package derivativesecuritylistrequest

import (
	"time"

	"github.com/shopspring/decimal"

	"github.com/quickfixgo/enum"
	"github.com/quickfixgo/field"
	"github.com/quickfixgo/fixt11"
	"github.com/quickfixgo/quickfix"
	"github.com/quickfixgo/tag"
)

// DerivativeSecurityListRequest is the fix50sp2 DerivativeSecurityListRequest type, MsgType = z.
type DerivativeSecurityListRequest struct {
	fixt11.Header
	*quickfix.Body
	fixt11.Trailer
	Message *quickfix.Message
}

// FromMessage creates a DerivativeSecurityListRequest from a quickfix.Message instance.
func FromMessage(m *quickfix.Message) DerivativeSecurityListRequest {
	return DerivativeSecurityListRequest{
		Header:  fixt11.Header{&m.Header},
		Body:    &m.Body,
		Trailer: fixt11.Trailer{&m.Trailer},
		Message: m,
	}
}

// ToMessage returns a quickfix.Message instance.
func (m DerivativeSecurityListRequest) ToMessage() *quickfix.Message {
	return m.Message
}

// New returns a DerivativeSecurityListRequest initialized with the required fields for DerivativeSecurityListRequest.
func New(securityreqid field.SecurityReqIDField, securitylistrequesttype field.SecurityListRequestTypeField) (m DerivativeSecurityListRequest) {
	m.Message = quickfix.NewMessage()
	m.Header = fixt11.NewHeader(&m.Message.Header)
	m.Body = &m.Message.Body
	m.Trailer.Trailer = &m.Message.Trailer

	m.Header.Set(field.NewMsgType("z"))
	m.Set(securityreqid)
	m.Set(securitylistrequesttype)

	return
}

// A RouteOut is the callback type that should be implemented for routing Message.
type RouteOut func(msg DerivativeSecurityListRequest, sessionID quickfix.SessionID) quickfix.MessageRejectError

// Route returns the beginstring, message type, and MessageRoute for this Message type.
func Route(router RouteOut) (string, string, quickfix.MessageRoute) {
	r := func(msg *quickfix.Message, sessionID quickfix.SessionID) quickfix.MessageRejectError {
		return router(FromMessage(msg), sessionID)
	}
	return "9", "z", r
}

// SetCurrency sets Currency, Tag 15.
func (m DerivativeSecurityListRequest) SetCurrency(v string) {
	m.Set(field.NewCurrency(v))
}

// SetText sets Text, Tag 58.
func (m DerivativeSecurityListRequest) SetText(v string) {
	m.Set(field.NewText(v))
}

// SetUnderlyingCouponPaymentDate sets UnderlyingCouponPaymentDate, Tag 241.
func (m DerivativeSecurityListRequest) SetUnderlyingCouponPaymentDate(v string) {
	m.Set(field.NewUnderlyingCouponPaymentDate(v))
}

// SetUnderlyingIssueDate sets UnderlyingIssueDate, Tag 242.
func (m DerivativeSecurityListRequest) SetUnderlyingIssueDate(v string) {
	m.Set(field.NewUnderlyingIssueDate(v))
}

// SetUnderlyingRepoCollateralSecurityType sets UnderlyingRepoCollateralSecurityType, Tag 243.
func (m DerivativeSecurityListRequest) SetUnderlyingRepoCollateralSecurityType(v string) {
	m.Set(field.NewUnderlyingRepoCollateralSecurityType(v))
}

// SetUnderlyingRepurchaseTerm sets UnderlyingRepurchaseTerm, Tag 244.
func (m DerivativeSecurityListRequest) SetUnderlyingRepurchaseTerm(v int) {
	m.Set(field.NewUnderlyingRepurchaseTerm(v))
}

// SetUnderlyingRepurchaseRate sets UnderlyingRepurchaseRate, Tag 245.
func (m DerivativeSecurityListRequest) SetUnderlyingRepurchaseRate(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingRepurchaseRate(value, scale))
}

// SetUnderlyingFactor sets UnderlyingFactor, Tag 246.
func (m DerivativeSecurityListRequest) SetUnderlyingFactor(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingFactor(value, scale))
}

// SetUnderlyingRedemptionDate sets UnderlyingRedemptionDate, Tag 247.
func (m DerivativeSecurityListRequest) SetUnderlyingRedemptionDate(v string) {
	m.Set(field.NewUnderlyingRedemptionDate(v))
}

// SetUnderlyingCreditRating sets UnderlyingCreditRating, Tag 256.
func (m DerivativeSecurityListRequest) SetUnderlyingCreditRating(v string) {
	m.Set(field.NewUnderlyingCreditRating(v))
}

// SetSubscriptionRequestType sets SubscriptionRequestType, Tag 263.
func (m DerivativeSecurityListRequest) SetSubscriptionRequestType(v enum.SubscriptionRequestType) {
	m.Set(field.NewSubscriptionRequestType(v))
}

// SetUnderlyingSecurityIDSource sets UnderlyingSecurityIDSource, Tag 305.
func (m DerivativeSecurityListRequest) SetUnderlyingSecurityIDSource(v string) {
	m.Set(field.NewUnderlyingSecurityIDSource(v))
}

// SetUnderlyingIssuer sets UnderlyingIssuer, Tag 306.
func (m DerivativeSecurityListRequest) SetUnderlyingIssuer(v string) {
	m.Set(field.NewUnderlyingIssuer(v))
}

// SetUnderlyingSecurityDesc sets UnderlyingSecurityDesc, Tag 307.
func (m DerivativeSecurityListRequest) SetUnderlyingSecurityDesc(v string) {
	m.Set(field.NewUnderlyingSecurityDesc(v))
}

// SetUnderlyingSecurityExchange sets UnderlyingSecurityExchange, Tag 308.
func (m DerivativeSecurityListRequest) SetUnderlyingSecurityExchange(v string) {
	m.Set(field.NewUnderlyingSecurityExchange(v))
}

// SetUnderlyingSecurityID sets UnderlyingSecurityID, Tag 309.
func (m DerivativeSecurityListRequest) SetUnderlyingSecurityID(v string) {
	m.Set(field.NewUnderlyingSecurityID(v))
}

// SetUnderlyingSecurityType sets UnderlyingSecurityType, Tag 310.
func (m DerivativeSecurityListRequest) SetUnderlyingSecurityType(v string) {
	m.Set(field.NewUnderlyingSecurityType(v))
}

// SetUnderlyingSymbol sets UnderlyingSymbol, Tag 311.
func (m DerivativeSecurityListRequest) SetUnderlyingSymbol(v string) {
	m.Set(field.NewUnderlyingSymbol(v))
}

// SetUnderlyingSymbolSfx sets UnderlyingSymbolSfx, Tag 312.
func (m DerivativeSecurityListRequest) SetUnderlyingSymbolSfx(v string) {
	m.Set(field.NewUnderlyingSymbolSfx(v))
}

// SetUnderlyingMaturityMonthYear sets UnderlyingMaturityMonthYear, Tag 313.
func (m DerivativeSecurityListRequest) SetUnderlyingMaturityMonthYear(v string) {
	m.Set(field.NewUnderlyingMaturityMonthYear(v))
}

// SetUnderlyingPutOrCall sets UnderlyingPutOrCall, Tag 315.
func (m DerivativeSecurityListRequest) SetUnderlyingPutOrCall(v int) {
	m.Set(field.NewUnderlyingPutOrCall(v))
}

// SetUnderlyingStrikePrice sets UnderlyingStrikePrice, Tag 316.
func (m DerivativeSecurityListRequest) SetUnderlyingStrikePrice(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingStrikePrice(value, scale))
}

// SetUnderlyingOptAttribute sets UnderlyingOptAttribute, Tag 317.
func (m DerivativeSecurityListRequest) SetUnderlyingOptAttribute(v string) {
	m.Set(field.NewUnderlyingOptAttribute(v))
}

// SetUnderlyingCurrency sets UnderlyingCurrency, Tag 318.
func (m DerivativeSecurityListRequest) SetUnderlyingCurrency(v string) {
	m.Set(field.NewUnderlyingCurrency(v))
}

// SetSecurityReqID sets SecurityReqID, Tag 320.
func (m DerivativeSecurityListRequest) SetSecurityReqID(v string) {
	m.Set(field.NewSecurityReqID(v))
}

// SetTradingSessionID sets TradingSessionID, Tag 336.
func (m DerivativeSecurityListRequest) SetTradingSessionID(v enum.TradingSessionID) {
	m.Set(field.NewTradingSessionID(v))
}

// SetEncodedTextLen sets EncodedTextLen, Tag 354.
func (m DerivativeSecurityListRequest) SetEncodedTextLen(v int) {
	m.Set(field.NewEncodedTextLen(v))
}

// SetEncodedText sets EncodedText, Tag 355.
func (m DerivativeSecurityListRequest) SetEncodedText(v string) {
	m.Set(field.NewEncodedText(v))
}

// SetEncodedUnderlyingIssuerLen sets EncodedUnderlyingIssuerLen, Tag 362.
func (m DerivativeSecurityListRequest) SetEncodedUnderlyingIssuerLen(v int) {
	m.Set(field.NewEncodedUnderlyingIssuerLen(v))
}

// SetEncodedUnderlyingIssuer sets EncodedUnderlyingIssuer, Tag 363.
func (m DerivativeSecurityListRequest) SetEncodedUnderlyingIssuer(v string) {
	m.Set(field.NewEncodedUnderlyingIssuer(v))
}

// SetEncodedUnderlyingSecurityDescLen sets EncodedUnderlyingSecurityDescLen, Tag 364.
func (m DerivativeSecurityListRequest) SetEncodedUnderlyingSecurityDescLen(v int) {
	m.Set(field.NewEncodedUnderlyingSecurityDescLen(v))
}

// SetEncodedUnderlyingSecurityDesc sets EncodedUnderlyingSecurityDesc, Tag 365.
func (m DerivativeSecurityListRequest) SetEncodedUnderlyingSecurityDesc(v string) {
	m.Set(field.NewEncodedUnderlyingSecurityDesc(v))
}

// SetUnderlyingCouponRate sets UnderlyingCouponRate, Tag 435.
func (m DerivativeSecurityListRequest) SetUnderlyingCouponRate(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingCouponRate(value, scale))
}

// SetUnderlyingContractMultiplier sets UnderlyingContractMultiplier, Tag 436.
func (m DerivativeSecurityListRequest) SetUnderlyingContractMultiplier(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingContractMultiplier(value, scale))
}

// SetNoUnderlyingSecurityAltID sets NoUnderlyingSecurityAltID, Tag 457.
func (m DerivativeSecurityListRequest) SetNoUnderlyingSecurityAltID(f NoUnderlyingSecurityAltIDRepeatingGroup) {
	m.SetGroup(f)
}

// SetUnderlyingProduct sets UnderlyingProduct, Tag 462.
func (m DerivativeSecurityListRequest) SetUnderlyingProduct(v int) {
	m.Set(field.NewUnderlyingProduct(v))
}

// SetUnderlyingCFICode sets UnderlyingCFICode, Tag 463.
func (m DerivativeSecurityListRequest) SetUnderlyingCFICode(v string) {
	m.Set(field.NewUnderlyingCFICode(v))
}

// SetUnderlyingMaturityDate sets UnderlyingMaturityDate, Tag 542.
func (m DerivativeSecurityListRequest) SetUnderlyingMaturityDate(v string) {
	m.Set(field.NewUnderlyingMaturityDate(v))
}

// SetSecurityListRequestType sets SecurityListRequestType, Tag 559.
func (m DerivativeSecurityListRequest) SetSecurityListRequestType(v enum.SecurityListRequestType) {
	m.Set(field.NewSecurityListRequestType(v))
}

// SetUnderlyingCountryOfIssue sets UnderlyingCountryOfIssue, Tag 592.
func (m DerivativeSecurityListRequest) SetUnderlyingCountryOfIssue(v string) {
	m.Set(field.NewUnderlyingCountryOfIssue(v))
}

// SetUnderlyingStateOrProvinceOfIssue sets UnderlyingStateOrProvinceOfIssue, Tag 593.
func (m DerivativeSecurityListRequest) SetUnderlyingStateOrProvinceOfIssue(v string) {
	m.Set(field.NewUnderlyingStateOrProvinceOfIssue(v))
}

// SetUnderlyingLocaleOfIssue sets UnderlyingLocaleOfIssue, Tag 594.
func (m DerivativeSecurityListRequest) SetUnderlyingLocaleOfIssue(v string) {
	m.Set(field.NewUnderlyingLocaleOfIssue(v))
}

// SetUnderlyingInstrRegistry sets UnderlyingInstrRegistry, Tag 595.
func (m DerivativeSecurityListRequest) SetUnderlyingInstrRegistry(v string) {
	m.Set(field.NewUnderlyingInstrRegistry(v))
}

// SetTradingSessionSubID sets TradingSessionSubID, Tag 625.
func (m DerivativeSecurityListRequest) SetTradingSessionSubID(v enum.TradingSessionSubID) {
	m.Set(field.NewTradingSessionSubID(v))
}

// SetSecuritySubType sets SecuritySubType, Tag 762.
func (m DerivativeSecurityListRequest) SetSecuritySubType(v string) {
	m.Set(field.NewSecuritySubType(v))
}

// SetUnderlyingSecuritySubType sets UnderlyingSecuritySubType, Tag 763.
func (m DerivativeSecurityListRequest) SetUnderlyingSecuritySubType(v string) {
	m.Set(field.NewUnderlyingSecuritySubType(v))
}

// SetUnderlyingPx sets UnderlyingPx, Tag 810.
func (m DerivativeSecurityListRequest) SetUnderlyingPx(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingPx(value, scale))
}

// SetUnderlyingCPProgram sets UnderlyingCPProgram, Tag 877.
func (m DerivativeSecurityListRequest) SetUnderlyingCPProgram(v int) {
	m.Set(field.NewUnderlyingCPProgram(v))
}

// SetUnderlyingCPRegType sets UnderlyingCPRegType, Tag 878.
func (m DerivativeSecurityListRequest) SetUnderlyingCPRegType(v string) {
	m.Set(field.NewUnderlyingCPRegType(v))
}

// SetUnderlyingQty sets UnderlyingQty, Tag 879.
func (m DerivativeSecurityListRequest) SetUnderlyingQty(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingQty(value, scale))
}

// SetUnderlyingDirtyPrice sets UnderlyingDirtyPrice, Tag 882.
func (m DerivativeSecurityListRequest) SetUnderlyingDirtyPrice(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingDirtyPrice(value, scale))
}

// SetUnderlyingEndPrice sets UnderlyingEndPrice, Tag 883.
func (m DerivativeSecurityListRequest) SetUnderlyingEndPrice(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingEndPrice(value, scale))
}

// SetUnderlyingStartValue sets UnderlyingStartValue, Tag 884.
func (m DerivativeSecurityListRequest) SetUnderlyingStartValue(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingStartValue(value, scale))
}

// SetUnderlyingCurrentValue sets UnderlyingCurrentValue, Tag 885.
func (m DerivativeSecurityListRequest) SetUnderlyingCurrentValue(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingCurrentValue(value, scale))
}

// SetUnderlyingEndValue sets UnderlyingEndValue, Tag 886.
func (m DerivativeSecurityListRequest) SetUnderlyingEndValue(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingEndValue(value, scale))
}

// SetNoUnderlyingStips sets NoUnderlyingStips, Tag 887.
func (m DerivativeSecurityListRequest) SetNoUnderlyingStips(f NoUnderlyingStipsRepeatingGroup) {
	m.SetGroup(f)
}

// SetUnderlyingStrikeCurrency sets UnderlyingStrikeCurrency, Tag 941.
func (m DerivativeSecurityListRequest) SetUnderlyingStrikeCurrency(v string) {
	m.Set(field.NewUnderlyingStrikeCurrency(v))
}

// SetUnderlyingAllocationPercent sets UnderlyingAllocationPercent, Tag 972.
func (m DerivativeSecurityListRequest) SetUnderlyingAllocationPercent(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingAllocationPercent(value, scale))
}

// SetUnderlyingCashAmount sets UnderlyingCashAmount, Tag 973.
func (m DerivativeSecurityListRequest) SetUnderlyingCashAmount(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingCashAmount(value, scale))
}

// SetUnderlyingCashType sets UnderlyingCashType, Tag 974.
func (m DerivativeSecurityListRequest) SetUnderlyingCashType(v enum.UnderlyingCashType) {
	m.Set(field.NewUnderlyingCashType(v))
}

// SetUnderlyingSettlementType sets UnderlyingSettlementType, Tag 975.
func (m DerivativeSecurityListRequest) SetUnderlyingSettlementType(v enum.UnderlyingSettlementType) {
	m.Set(field.NewUnderlyingSettlementType(v))
}

// SetUnderlyingUnitOfMeasure sets UnderlyingUnitOfMeasure, Tag 998.
func (m DerivativeSecurityListRequest) SetUnderlyingUnitOfMeasure(v string) {
	m.Set(field.NewUnderlyingUnitOfMeasure(v))
}

// SetUnderlyingTimeUnit sets UnderlyingTimeUnit, Tag 1000.
func (m DerivativeSecurityListRequest) SetUnderlyingTimeUnit(v string) {
	m.Set(field.NewUnderlyingTimeUnit(v))
}

// SetUnderlyingCapValue sets UnderlyingCapValue, Tag 1038.
func (m DerivativeSecurityListRequest) SetUnderlyingCapValue(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingCapValue(value, scale))
}

// SetUnderlyingSettlMethod sets UnderlyingSettlMethod, Tag 1039.
func (m DerivativeSecurityListRequest) SetUnderlyingSettlMethod(v string) {
	m.Set(field.NewUnderlyingSettlMethod(v))
}

// SetUnderlyingAdjustedQuantity sets UnderlyingAdjustedQuantity, Tag 1044.
func (m DerivativeSecurityListRequest) SetUnderlyingAdjustedQuantity(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingAdjustedQuantity(value, scale))
}

// SetUnderlyingFXRate sets UnderlyingFXRate, Tag 1045.
func (m DerivativeSecurityListRequest) SetUnderlyingFXRate(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingFXRate(value, scale))
}

// SetUnderlyingFXRateCalc sets UnderlyingFXRateCalc, Tag 1046.
func (m DerivativeSecurityListRequest) SetUnderlyingFXRateCalc(v enum.UnderlyingFXRateCalc) {
	m.Set(field.NewUnderlyingFXRateCalc(v))
}

// SetNoUndlyInstrumentParties sets NoUndlyInstrumentParties, Tag 1058.
func (m DerivativeSecurityListRequest) SetNoUndlyInstrumentParties(f NoUndlyInstrumentPartiesRepeatingGroup) {
	m.SetGroup(f)
}

// SetUnderlyingMaturityTime sets UnderlyingMaturityTime, Tag 1213.
func (m DerivativeSecurityListRequest) SetUnderlyingMaturityTime(v string) {
	m.Set(field.NewUnderlyingMaturityTime(v))
}

// SetDerivativeSymbol sets DerivativeSymbol, Tag 1214.
func (m DerivativeSecurityListRequest) SetDerivativeSymbol(v string) {
	m.Set(field.NewDerivativeSymbol(v))
}

// SetDerivativeSymbolSfx sets DerivativeSymbolSfx, Tag 1215.
func (m DerivativeSecurityListRequest) SetDerivativeSymbolSfx(v string) {
	m.Set(field.NewDerivativeSymbolSfx(v))
}

// SetDerivativeSecurityID sets DerivativeSecurityID, Tag 1216.
func (m DerivativeSecurityListRequest) SetDerivativeSecurityID(v string) {
	m.Set(field.NewDerivativeSecurityID(v))
}

// SetDerivativeSecurityIDSource sets DerivativeSecurityIDSource, Tag 1217.
func (m DerivativeSecurityListRequest) SetDerivativeSecurityIDSource(v string) {
	m.Set(field.NewDerivativeSecurityIDSource(v))
}

// SetNoDerivativeSecurityAltID sets NoDerivativeSecurityAltID, Tag 1218.
func (m DerivativeSecurityListRequest) SetNoDerivativeSecurityAltID(f NoDerivativeSecurityAltIDRepeatingGroup) {
	m.SetGroup(f)
}

// SetDerivativeOptPayAmount sets DerivativeOptPayAmount, Tag 1225.
func (m DerivativeSecurityListRequest) SetDerivativeOptPayAmount(value decimal.Decimal, scale int32) {
	m.Set(field.NewDerivativeOptPayAmount(value, scale))
}

// SetDerivativeProductComplex sets DerivativeProductComplex, Tag 1228.
func (m DerivativeSecurityListRequest) SetDerivativeProductComplex(v string) {
	m.Set(field.NewDerivativeProductComplex(v))
}

// SetDerivFlexProductEligibilityIndicator sets DerivFlexProductEligibilityIndicator, Tag 1243.
func (m DerivativeSecurityListRequest) SetDerivFlexProductEligibilityIndicator(v bool) {
	m.Set(field.NewDerivFlexProductEligibilityIndicator(v))
}

// SetDerivativeProduct sets DerivativeProduct, Tag 1246.
func (m DerivativeSecurityListRequest) SetDerivativeProduct(v int) {
	m.Set(field.NewDerivativeProduct(v))
}

// SetDerivativeSecurityGroup sets DerivativeSecurityGroup, Tag 1247.
func (m DerivativeSecurityListRequest) SetDerivativeSecurityGroup(v string) {
	m.Set(field.NewDerivativeSecurityGroup(v))
}

// SetDerivativeCFICode sets DerivativeCFICode, Tag 1248.
func (m DerivativeSecurityListRequest) SetDerivativeCFICode(v string) {
	m.Set(field.NewDerivativeCFICode(v))
}

// SetDerivativeSecurityType sets DerivativeSecurityType, Tag 1249.
func (m DerivativeSecurityListRequest) SetDerivativeSecurityType(v string) {
	m.Set(field.NewDerivativeSecurityType(v))
}

// SetDerivativeSecuritySubType sets DerivativeSecuritySubType, Tag 1250.
func (m DerivativeSecurityListRequest) SetDerivativeSecuritySubType(v string) {
	m.Set(field.NewDerivativeSecuritySubType(v))
}

// SetDerivativeMaturityMonthYear sets DerivativeMaturityMonthYear, Tag 1251.
func (m DerivativeSecurityListRequest) SetDerivativeMaturityMonthYear(v string) {
	m.Set(field.NewDerivativeMaturityMonthYear(v))
}

// SetDerivativeMaturityDate sets DerivativeMaturityDate, Tag 1252.
func (m DerivativeSecurityListRequest) SetDerivativeMaturityDate(v string) {
	m.Set(field.NewDerivativeMaturityDate(v))
}

// SetDerivativeMaturityTime sets DerivativeMaturityTime, Tag 1253.
func (m DerivativeSecurityListRequest) SetDerivativeMaturityTime(v string) {
	m.Set(field.NewDerivativeMaturityTime(v))
}

// SetDerivativeSettleOnOpenFlag sets DerivativeSettleOnOpenFlag, Tag 1254.
func (m DerivativeSecurityListRequest) SetDerivativeSettleOnOpenFlag(v string) {
	m.Set(field.NewDerivativeSettleOnOpenFlag(v))
}

// SetDerivativeInstrmtAssignmentMethod sets DerivativeInstrmtAssignmentMethod, Tag 1255.
func (m DerivativeSecurityListRequest) SetDerivativeInstrmtAssignmentMethod(v string) {
	m.Set(field.NewDerivativeInstrmtAssignmentMethod(v))
}

// SetDerivativeSecurityStatus sets DerivativeSecurityStatus, Tag 1256.
func (m DerivativeSecurityListRequest) SetDerivativeSecurityStatus(v string) {
	m.Set(field.NewDerivativeSecurityStatus(v))
}

// SetDerivativeInstrRegistry sets DerivativeInstrRegistry, Tag 1257.
func (m DerivativeSecurityListRequest) SetDerivativeInstrRegistry(v string) {
	m.Set(field.NewDerivativeInstrRegistry(v))
}

// SetDerivativeCountryOfIssue sets DerivativeCountryOfIssue, Tag 1258.
func (m DerivativeSecurityListRequest) SetDerivativeCountryOfIssue(v string) {
	m.Set(field.NewDerivativeCountryOfIssue(v))
}

// SetDerivativeStateOrProvinceOfIssue sets DerivativeStateOrProvinceOfIssue, Tag 1259.
func (m DerivativeSecurityListRequest) SetDerivativeStateOrProvinceOfIssue(v string) {
	m.Set(field.NewDerivativeStateOrProvinceOfIssue(v))
}

// SetDerivativeLocaleOfIssue sets DerivativeLocaleOfIssue, Tag 1260.
func (m DerivativeSecurityListRequest) SetDerivativeLocaleOfIssue(v string) {
	m.Set(field.NewDerivativeLocaleOfIssue(v))
}

// SetDerivativeStrikePrice sets DerivativeStrikePrice, Tag 1261.
func (m DerivativeSecurityListRequest) SetDerivativeStrikePrice(value decimal.Decimal, scale int32) {
	m.Set(field.NewDerivativeStrikePrice(value, scale))
}

// SetDerivativeStrikeCurrency sets DerivativeStrikeCurrency, Tag 1262.
func (m DerivativeSecurityListRequest) SetDerivativeStrikeCurrency(v string) {
	m.Set(field.NewDerivativeStrikeCurrency(v))
}

// SetDerivativeStrikeMultiplier sets DerivativeStrikeMultiplier, Tag 1263.
func (m DerivativeSecurityListRequest) SetDerivativeStrikeMultiplier(value decimal.Decimal, scale int32) {
	m.Set(field.NewDerivativeStrikeMultiplier(value, scale))
}

// SetDerivativeStrikeValue sets DerivativeStrikeValue, Tag 1264.
func (m DerivativeSecurityListRequest) SetDerivativeStrikeValue(value decimal.Decimal, scale int32) {
	m.Set(field.NewDerivativeStrikeValue(value, scale))
}

// SetDerivativeOptAttribute sets DerivativeOptAttribute, Tag 1265.
func (m DerivativeSecurityListRequest) SetDerivativeOptAttribute(v string) {
	m.Set(field.NewDerivativeOptAttribute(v))
}

// SetDerivativeContractMultiplier sets DerivativeContractMultiplier, Tag 1266.
func (m DerivativeSecurityListRequest) SetDerivativeContractMultiplier(value decimal.Decimal, scale int32) {
	m.Set(field.NewDerivativeContractMultiplier(value, scale))
}

// SetDerivativeMinPriceIncrement sets DerivativeMinPriceIncrement, Tag 1267.
func (m DerivativeSecurityListRequest) SetDerivativeMinPriceIncrement(value decimal.Decimal, scale int32) {
	m.Set(field.NewDerivativeMinPriceIncrement(value, scale))
}

// SetDerivativeMinPriceIncrementAmount sets DerivativeMinPriceIncrementAmount, Tag 1268.
func (m DerivativeSecurityListRequest) SetDerivativeMinPriceIncrementAmount(value decimal.Decimal, scale int32) {
	m.Set(field.NewDerivativeMinPriceIncrementAmount(value, scale))
}

// SetDerivativeUnitOfMeasure sets DerivativeUnitOfMeasure, Tag 1269.
func (m DerivativeSecurityListRequest) SetDerivativeUnitOfMeasure(v string) {
	m.Set(field.NewDerivativeUnitOfMeasure(v))
}

// SetDerivativeUnitOfMeasureQty sets DerivativeUnitOfMeasureQty, Tag 1270.
func (m DerivativeSecurityListRequest) SetDerivativeUnitOfMeasureQty(value decimal.Decimal, scale int32) {
	m.Set(field.NewDerivativeUnitOfMeasureQty(value, scale))
}

// SetDerivativeTimeUnit sets DerivativeTimeUnit, Tag 1271.
func (m DerivativeSecurityListRequest) SetDerivativeTimeUnit(v string) {
	m.Set(field.NewDerivativeTimeUnit(v))
}

// SetDerivativeSecurityExchange sets DerivativeSecurityExchange, Tag 1272.
func (m DerivativeSecurityListRequest) SetDerivativeSecurityExchange(v string) {
	m.Set(field.NewDerivativeSecurityExchange(v))
}

// SetDerivativePositionLimit sets DerivativePositionLimit, Tag 1273.
func (m DerivativeSecurityListRequest) SetDerivativePositionLimit(v int) {
	m.Set(field.NewDerivativePositionLimit(v))
}

// SetDerivativeNTPositionLimit sets DerivativeNTPositionLimit, Tag 1274.
func (m DerivativeSecurityListRequest) SetDerivativeNTPositionLimit(v int) {
	m.Set(field.NewDerivativeNTPositionLimit(v))
}

// SetDerivativeIssuer sets DerivativeIssuer, Tag 1275.
func (m DerivativeSecurityListRequest) SetDerivativeIssuer(v string) {
	m.Set(field.NewDerivativeIssuer(v))
}

// SetDerivativeIssueDate sets DerivativeIssueDate, Tag 1276.
func (m DerivativeSecurityListRequest) SetDerivativeIssueDate(v string) {
	m.Set(field.NewDerivativeIssueDate(v))
}

// SetDerivativeEncodedIssuerLen sets DerivativeEncodedIssuerLen, Tag 1277.
func (m DerivativeSecurityListRequest) SetDerivativeEncodedIssuerLen(v int) {
	m.Set(field.NewDerivativeEncodedIssuerLen(v))
}

// SetDerivativeEncodedIssuer sets DerivativeEncodedIssuer, Tag 1278.
func (m DerivativeSecurityListRequest) SetDerivativeEncodedIssuer(v string) {
	m.Set(field.NewDerivativeEncodedIssuer(v))
}

// SetDerivativeSecurityDesc sets DerivativeSecurityDesc, Tag 1279.
func (m DerivativeSecurityListRequest) SetDerivativeSecurityDesc(v string) {
	m.Set(field.NewDerivativeSecurityDesc(v))
}

// SetDerivativeEncodedSecurityDescLen sets DerivativeEncodedSecurityDescLen, Tag 1280.
func (m DerivativeSecurityListRequest) SetDerivativeEncodedSecurityDescLen(v int) {
	m.Set(field.NewDerivativeEncodedSecurityDescLen(v))
}

// SetDerivativeEncodedSecurityDesc sets DerivativeEncodedSecurityDesc, Tag 1281.
func (m DerivativeSecurityListRequest) SetDerivativeEncodedSecurityDesc(v string) {
	m.Set(field.NewDerivativeEncodedSecurityDesc(v))
}

// SetDerivativeSecurityXMLLen sets DerivativeSecurityXMLLen, Tag 1282.
func (m DerivativeSecurityListRequest) SetDerivativeSecurityXMLLen(v int) {
	m.Set(field.NewDerivativeSecurityXMLLen(v))
}

// SetDerivativeSecurityXML sets DerivativeSecurityXML, Tag 1283.
func (m DerivativeSecurityListRequest) SetDerivativeSecurityXML(v string) {
	m.Set(field.NewDerivativeSecurityXML(v))
}

// SetDerivativeSecurityXMLSchema sets DerivativeSecurityXMLSchema, Tag 1284.
func (m DerivativeSecurityListRequest) SetDerivativeSecurityXMLSchema(v string) {
	m.Set(field.NewDerivativeSecurityXMLSchema(v))
}

// SetDerivativeContractSettlMonth sets DerivativeContractSettlMonth, Tag 1285.
func (m DerivativeSecurityListRequest) SetDerivativeContractSettlMonth(v string) {
	m.Set(field.NewDerivativeContractSettlMonth(v))
}

// SetNoDerivativeEvents sets NoDerivativeEvents, Tag 1286.
func (m DerivativeSecurityListRequest) SetNoDerivativeEvents(f NoDerivativeEventsRepeatingGroup) {
	m.SetGroup(f)
}

// SetNoDerivativeInstrumentParties sets NoDerivativeInstrumentParties, Tag 1292.
func (m DerivativeSecurityListRequest) SetNoDerivativeInstrumentParties(f NoDerivativeInstrumentPartiesRepeatingGroup) {
	m.SetGroup(f)
}

// SetDerivativeExerciseStyle sets DerivativeExerciseStyle, Tag 1299.
func (m DerivativeSecurityListRequest) SetDerivativeExerciseStyle(v int) {
	m.Set(field.NewDerivativeExerciseStyle(v))
}

// SetMarketSegmentID sets MarketSegmentID, Tag 1300.
func (m DerivativeSecurityListRequest) SetMarketSegmentID(v string) {
	m.Set(field.NewMarketSegmentID(v))
}

// SetMarketID sets MarketID, Tag 1301.
func (m DerivativeSecurityListRequest) SetMarketID(v string) {
	m.Set(field.NewMarketID(v))
}

// SetDerivativePriceUnitOfMeasure sets DerivativePriceUnitOfMeasure, Tag 1315.
func (m DerivativeSecurityListRequest) SetDerivativePriceUnitOfMeasure(v string) {
	m.Set(field.NewDerivativePriceUnitOfMeasure(v))
}

// SetDerivativePriceUnitOfMeasureQty sets DerivativePriceUnitOfMeasureQty, Tag 1316.
func (m DerivativeSecurityListRequest) SetDerivativePriceUnitOfMeasureQty(value decimal.Decimal, scale int32) {
	m.Set(field.NewDerivativePriceUnitOfMeasureQty(value, scale))
}

// SetDerivativeSettlMethod sets DerivativeSettlMethod, Tag 1317.
func (m DerivativeSecurityListRequest) SetDerivativeSettlMethod(v string) {
	m.Set(field.NewDerivativeSettlMethod(v))
}

// SetDerivativePriceQuoteMethod sets DerivativePriceQuoteMethod, Tag 1318.
func (m DerivativeSecurityListRequest) SetDerivativePriceQuoteMethod(v string) {
	m.Set(field.NewDerivativePriceQuoteMethod(v))
}

// SetDerivativeValuationMethod sets DerivativeValuationMethod, Tag 1319.
func (m DerivativeSecurityListRequest) SetDerivativeValuationMethod(v string) {
	m.Set(field.NewDerivativeValuationMethod(v))
}

// SetDerivativeListMethod sets DerivativeListMethod, Tag 1320.
func (m DerivativeSecurityListRequest) SetDerivativeListMethod(v int) {
	m.Set(field.NewDerivativeListMethod(v))
}

// SetDerivativeCapPrice sets DerivativeCapPrice, Tag 1321.
func (m DerivativeSecurityListRequest) SetDerivativeCapPrice(value decimal.Decimal, scale int32) {
	m.Set(field.NewDerivativeCapPrice(value, scale))
}

// SetDerivativeFloorPrice sets DerivativeFloorPrice, Tag 1322.
func (m DerivativeSecurityListRequest) SetDerivativeFloorPrice(value decimal.Decimal, scale int32) {
	m.Set(field.NewDerivativeFloorPrice(value, scale))
}

// SetDerivativePutOrCall sets DerivativePutOrCall, Tag 1323.
func (m DerivativeSecurityListRequest) SetDerivativePutOrCall(v int) {
	m.Set(field.NewDerivativePutOrCall(v))
}

// SetUnderlyingExerciseStyle sets UnderlyingExerciseStyle, Tag 1419.
func (m DerivativeSecurityListRequest) SetUnderlyingExerciseStyle(v int) {
	m.Set(field.NewUnderlyingExerciseStyle(v))
}

// SetUnderlyingUnitOfMeasureQty sets UnderlyingUnitOfMeasureQty, Tag 1423.
func (m DerivativeSecurityListRequest) SetUnderlyingUnitOfMeasureQty(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingUnitOfMeasureQty(value, scale))
}

// SetUnderlyingPriceUnitOfMeasure sets UnderlyingPriceUnitOfMeasure, Tag 1424.
func (m DerivativeSecurityListRequest) SetUnderlyingPriceUnitOfMeasure(v string) {
	m.Set(field.NewUnderlyingPriceUnitOfMeasure(v))
}

// SetUnderlyingPriceUnitOfMeasureQty sets UnderlyingPriceUnitOfMeasureQty, Tag 1425.
func (m DerivativeSecurityListRequest) SetUnderlyingPriceUnitOfMeasureQty(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingPriceUnitOfMeasureQty(value, scale))
}

// SetUnderlyingContractMultiplierUnit sets UnderlyingContractMultiplierUnit, Tag 1437.
func (m DerivativeSecurityListRequest) SetUnderlyingContractMultiplierUnit(v int) {
	m.Set(field.NewUnderlyingContractMultiplierUnit(v))
}

// SetDerivativeContractMultiplierUnit sets DerivativeContractMultiplierUnit, Tag 1438.
func (m DerivativeSecurityListRequest) SetDerivativeContractMultiplierUnit(v int) {
	m.Set(field.NewDerivativeContractMultiplierUnit(v))
}

// SetUnderlyingFlowScheduleType sets UnderlyingFlowScheduleType, Tag 1441.
func (m DerivativeSecurityListRequest) SetUnderlyingFlowScheduleType(v int) {
	m.Set(field.NewUnderlyingFlowScheduleType(v))
}

// SetDerivativeFlowScheduleType sets DerivativeFlowScheduleType, Tag 1442.
func (m DerivativeSecurityListRequest) SetDerivativeFlowScheduleType(v int) {
	m.Set(field.NewDerivativeFlowScheduleType(v))
}

// SetUnderlyingRestructuringType sets UnderlyingRestructuringType, Tag 1453.
func (m DerivativeSecurityListRequest) SetUnderlyingRestructuringType(v string) {
	m.Set(field.NewUnderlyingRestructuringType(v))
}

// SetUnderlyingSeniority sets UnderlyingSeniority, Tag 1454.
func (m DerivativeSecurityListRequest) SetUnderlyingSeniority(v string) {
	m.Set(field.NewUnderlyingSeniority(v))
}

// SetUnderlyingNotionalPercentageOutstanding sets UnderlyingNotionalPercentageOutstanding, Tag 1455.
func (m DerivativeSecurityListRequest) SetUnderlyingNotionalPercentageOutstanding(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingNotionalPercentageOutstanding(value, scale))
}

// SetUnderlyingOriginalNotionalPercentageOutstanding sets UnderlyingOriginalNotionalPercentageOutstanding, Tag 1456.
func (m DerivativeSecurityListRequest) SetUnderlyingOriginalNotionalPercentageOutstanding(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingOriginalNotionalPercentageOutstanding(value, scale))
}

// SetUnderlyingAttachmentPoint sets UnderlyingAttachmentPoint, Tag 1459.
func (m DerivativeSecurityListRequest) SetUnderlyingAttachmentPoint(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingAttachmentPoint(value, scale))
}

// SetUnderlyingDetachmentPoint sets UnderlyingDetachmentPoint, Tag 1460.
func (m DerivativeSecurityListRequest) SetUnderlyingDetachmentPoint(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingDetachmentPoint(value, scale))
}

// SetUnderlyingPriceQuoteCurrency sets UnderlyingPriceQuoteCurrency, Tag 1526.
func (m DerivativeSecurityListRequest) SetUnderlyingPriceQuoteCurrency(v string) {
	m.Set(field.NewUnderlyingPriceQuoteCurrency(v))
}

// SetDerivativePriceQuoteCurrency sets DerivativePriceQuoteCurrency, Tag 1576.
func (m DerivativeSecurityListRequest) SetDerivativePriceQuoteCurrency(v string) {
	m.Set(field.NewDerivativePriceQuoteCurrency(v))
}

// SetUnderlyingUnitOfMeasureCurrency sets UnderlyingUnitOfMeasureCurrency, Tag 1718.
func (m DerivativeSecurityListRequest) SetUnderlyingUnitOfMeasureCurrency(v string) {
	m.Set(field.NewUnderlyingUnitOfMeasureCurrency(v))
}

// SetUnderlyingPriceUnitOfMeasureCurrency sets UnderlyingPriceUnitOfMeasureCurrency, Tag 1719.
func (m DerivativeSecurityListRequest) SetUnderlyingPriceUnitOfMeasureCurrency(v string) {
	m.Set(field.NewUnderlyingPriceUnitOfMeasureCurrency(v))
}

// SetDerivativeUnitOfMeasureCurrency sets DerivativeUnitOfMeasureCurrency, Tag 1722.
func (m DerivativeSecurityListRequest) SetDerivativeUnitOfMeasureCurrency(v string) {
	m.Set(field.NewDerivativeUnitOfMeasureCurrency(v))
}

// SetDerivativePriceUnitOfMeasureCurrency sets DerivativePriceUnitOfMeasureCurrency, Tag 1723.
func (m DerivativeSecurityListRequest) SetDerivativePriceUnitOfMeasureCurrency(v string) {
	m.Set(field.NewDerivativePriceUnitOfMeasureCurrency(v))
}

// SetUnderlyingContractPriceRefMonth sets UnderlyingContractPriceRefMonth, Tag 1837.
func (m DerivativeSecurityListRequest) SetUnderlyingContractPriceRefMonth(v string) {
	m.Set(field.NewUnderlyingContractPriceRefMonth(v))
}

// SetUnderlyingSecurityXMLLen sets UnderlyingSecurityXMLLen, Tag 1874.
func (m DerivativeSecurityListRequest) SetUnderlyingSecurityXMLLen(v int) {
	m.Set(field.NewUnderlyingSecurityXMLLen(v))
}

// SetUnderlyingSecurityXML sets UnderlyingSecurityXML, Tag 1875.
func (m DerivativeSecurityListRequest) SetUnderlyingSecurityXML(v string) {
	m.Set(field.NewUnderlyingSecurityXML(v))
}

// SetUnderlyingSecurityXMLSchema sets UnderlyingSecurityXMLSchema, Tag 1876.
func (m DerivativeSecurityListRequest) SetUnderlyingSecurityXMLSchema(v string) {
	m.Set(field.NewUnderlyingSecurityXMLSchema(v))
}

// SetNoUnderlyingEvents sets NoUnderlyingEvents, Tag 1981.
func (m DerivativeSecurityListRequest) SetNoUnderlyingEvents(f NoUnderlyingEventsRepeatingGroup) {
	m.SetGroup(f)
}

// SetUnderlyingConstituentWeight sets UnderlyingConstituentWeight, Tag 1988.
func (m DerivativeSecurityListRequest) SetUnderlyingConstituentWeight(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingConstituentWeight(value, scale))
}

// SetUnderlyingCouponType sets UnderlyingCouponType, Tag 1989.
func (m DerivativeSecurityListRequest) SetUnderlyingCouponType(v int) {
	m.Set(field.NewUnderlyingCouponType(v))
}

// SetUnderlyingTotalIssuedAmount sets UnderlyingTotalIssuedAmount, Tag 1990.
func (m DerivativeSecurityListRequest) SetUnderlyingTotalIssuedAmount(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingTotalIssuedAmount(value, scale))
}

// SetUnderlyingCouponFrequencyPeriod sets UnderlyingCouponFrequencyPeriod, Tag 1991.
func (m DerivativeSecurityListRequest) SetUnderlyingCouponFrequencyPeriod(v int) {
	m.Set(field.NewUnderlyingCouponFrequencyPeriod(v))
}

// SetUnderlyingCouponFrequencyUnit sets UnderlyingCouponFrequencyUnit, Tag 1992.
func (m DerivativeSecurityListRequest) SetUnderlyingCouponFrequencyUnit(v string) {
	m.Set(field.NewUnderlyingCouponFrequencyUnit(v))
}

// SetUnderlyingCouponDayCount sets UnderlyingCouponDayCount, Tag 1993.
func (m DerivativeSecurityListRequest) SetUnderlyingCouponDayCount(v int) {
	m.Set(field.NewUnderlyingCouponDayCount(v))
}

// SetUnderlyingObligationID sets UnderlyingObligationID, Tag 1994.
func (m DerivativeSecurityListRequest) SetUnderlyingObligationID(v string) {
	m.Set(field.NewUnderlyingObligationID(v))
}

// SetUnderlyingObligationIDSource sets UnderlyingObligationIDSource, Tag 1995.
func (m DerivativeSecurityListRequest) SetUnderlyingObligationIDSource(v string) {
	m.Set(field.NewUnderlyingObligationIDSource(v))
}

// SetUnderlyingEquityID sets UnderlyingEquityID, Tag 1996.
func (m DerivativeSecurityListRequest) SetUnderlyingEquityID(v string) {
	m.Set(field.NewUnderlyingEquityID(v))
}

// SetUnderlyingEquityIDSource sets UnderlyingEquityIDSource, Tag 1997.
func (m DerivativeSecurityListRequest) SetUnderlyingEquityIDSource(v string) {
	m.Set(field.NewUnderlyingEquityIDSource(v))
}

// SetUnderlyingLienSeniority sets UnderlyingLienSeniority, Tag 1998.
func (m DerivativeSecurityListRequest) SetUnderlyingLienSeniority(v int) {
	m.Set(field.NewUnderlyingLienSeniority(v))
}

// SetUnderlyingLoanFacility sets UnderlyingLoanFacility, Tag 1999.
func (m DerivativeSecurityListRequest) SetUnderlyingLoanFacility(v int) {
	m.Set(field.NewUnderlyingLoanFacility(v))
}

// SetUnderlyingReferenceEntityType sets UnderlyingReferenceEntityType, Tag 2000.
func (m DerivativeSecurityListRequest) SetUnderlyingReferenceEntityType(v int) {
	m.Set(field.NewUnderlyingReferenceEntityType(v))
}

// SetUnderlyingIndexSeries sets UnderlyingIndexSeries, Tag 2003.
func (m DerivativeSecurityListRequest) SetUnderlyingIndexSeries(v int) {
	m.Set(field.NewUnderlyingIndexSeries(v))
}

// SetUnderlyingIndexAnnexVersion sets UnderlyingIndexAnnexVersion, Tag 2004.
func (m DerivativeSecurityListRequest) SetUnderlyingIndexAnnexVersion(v int) {
	m.Set(field.NewUnderlyingIndexAnnexVersion(v))
}

// SetUnderlyingIndexAnnexDate sets UnderlyingIndexAnnexDate, Tag 2005.
func (m DerivativeSecurityListRequest) SetUnderlyingIndexAnnexDate(v string) {
	m.Set(field.NewUnderlyingIndexAnnexDate(v))
}

// SetUnderlyingIndexAnnexSource sets UnderlyingIndexAnnexSource, Tag 2006.
func (m DerivativeSecurityListRequest) SetUnderlyingIndexAnnexSource(v string) {
	m.Set(field.NewUnderlyingIndexAnnexSource(v))
}

// SetUnderlyingProductComplex sets UnderlyingProductComplex, Tag 2007.
func (m DerivativeSecurityListRequest) SetUnderlyingProductComplex(v string) {
	m.Set(field.NewUnderlyingProductComplex(v))
}

// SetUnderlyingSecurityGroup sets UnderlyingSecurityGroup, Tag 2008.
func (m DerivativeSecurityListRequest) SetUnderlyingSecurityGroup(v string) {
	m.Set(field.NewUnderlyingSecurityGroup(v))
}

// SetUnderlyingSettleOnOpenFlag sets UnderlyingSettleOnOpenFlag, Tag 2009.
func (m DerivativeSecurityListRequest) SetUnderlyingSettleOnOpenFlag(v string) {
	m.Set(field.NewUnderlyingSettleOnOpenFlag(v))
}

// SetUnderlyingAssignmentMethod sets UnderlyingAssignmentMethod, Tag 2010.
func (m DerivativeSecurityListRequest) SetUnderlyingAssignmentMethod(v string) {
	m.Set(field.NewUnderlyingAssignmentMethod(v))
}

// SetUnderlyingSecurityStatus sets UnderlyingSecurityStatus, Tag 2011.
func (m DerivativeSecurityListRequest) SetUnderlyingSecurityStatus(v string) {
	m.Set(field.NewUnderlyingSecurityStatus(v))
}

// SetUnderlyingObligationType sets UnderlyingObligationType, Tag 2012.
func (m DerivativeSecurityListRequest) SetUnderlyingObligationType(v enum.UnderlyingObligationType) {
	m.Set(field.NewUnderlyingObligationType(v))
}

// SetUnderlyingAssetClass sets UnderlyingAssetClass, Tag 2013.
func (m DerivativeSecurityListRequest) SetUnderlyingAssetClass(v int) {
	m.Set(field.NewUnderlyingAssetClass(v))
}

// SetUnderlyingAssetSubClass sets UnderlyingAssetSubClass, Tag 2014.
func (m DerivativeSecurityListRequest) SetUnderlyingAssetSubClass(v int) {
	m.Set(field.NewUnderlyingAssetSubClass(v))
}

// SetUnderlyingAssetType sets UnderlyingAssetType, Tag 2015.
func (m DerivativeSecurityListRequest) SetUnderlyingAssetType(v string) {
	m.Set(field.NewUnderlyingAssetType(v))
}

// SetUnderlyingSwapClass sets UnderlyingSwapClass, Tag 2016.
func (m DerivativeSecurityListRequest) SetUnderlyingSwapClass(v string) {
	m.Set(field.NewUnderlyingSwapClass(v))
}

// SetUnderlyingNthToDefault sets UnderlyingNthToDefault, Tag 2017.
func (m DerivativeSecurityListRequest) SetUnderlyingNthToDefault(v int) {
	m.Set(field.NewUnderlyingNthToDefault(v))
}

// SetUnderlyingMthToDefault sets UnderlyingMthToDefault, Tag 2018.
func (m DerivativeSecurityListRequest) SetUnderlyingMthToDefault(v int) {
	m.Set(field.NewUnderlyingMthToDefault(v))
}

// SetUnderlyingSettledEntityMatrixSource sets UnderlyingSettledEntityMatrixSource, Tag 2019.
func (m DerivativeSecurityListRequest) SetUnderlyingSettledEntityMatrixSource(v string) {
	m.Set(field.NewUnderlyingSettledEntityMatrixSource(v))
}

// SetUnderlyingSettledEntityMatrixPublicationDate sets UnderlyingSettledEntityMatrixPublicationDate, Tag 2020.
func (m DerivativeSecurityListRequest) SetUnderlyingSettledEntityMatrixPublicationDate(v string) {
	m.Set(field.NewUnderlyingSettledEntityMatrixPublicationDate(v))
}

// SetUnderlyingStrikeMultiplier sets UnderlyingStrikeMultiplier, Tag 2021.
func (m DerivativeSecurityListRequest) SetUnderlyingStrikeMultiplier(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingStrikeMultiplier(value, scale))
}

// SetUnderlyingStrikeValue sets UnderlyingStrikeValue, Tag 2022.
func (m DerivativeSecurityListRequest) SetUnderlyingStrikeValue(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingStrikeValue(value, scale))
}

// SetUnderlyingStrikePriceDeterminationMethod sets UnderlyingStrikePriceDeterminationMethod, Tag 2023.
func (m DerivativeSecurityListRequest) SetUnderlyingStrikePriceDeterminationMethod(v int) {
	m.Set(field.NewUnderlyingStrikePriceDeterminationMethod(v))
}

// SetUnderlyingStrikePriceBoundaryMethod sets UnderlyingStrikePriceBoundaryMethod, Tag 2024.
func (m DerivativeSecurityListRequest) SetUnderlyingStrikePriceBoundaryMethod(v int) {
	m.Set(field.NewUnderlyingStrikePriceBoundaryMethod(v))
}

// SetUnderlyingStrikePriceBoundaryPrecision sets UnderlyingStrikePriceBoundaryPrecision, Tag 2025.
func (m DerivativeSecurityListRequest) SetUnderlyingStrikePriceBoundaryPrecision(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingStrikePriceBoundaryPrecision(value, scale))
}

// SetUnderlyingMinPriceIncrement sets UnderlyingMinPriceIncrement, Tag 2026.
func (m DerivativeSecurityListRequest) SetUnderlyingMinPriceIncrement(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingMinPriceIncrement(value, scale))
}

// SetUnderlyingMinPriceIncrementAmount sets UnderlyingMinPriceIncrementAmount, Tag 2027.
func (m DerivativeSecurityListRequest) SetUnderlyingMinPriceIncrementAmount(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingMinPriceIncrementAmount(value, scale))
}

// SetUnderlyingOptPayoutType sets UnderlyingOptPayoutType, Tag 2028.
func (m DerivativeSecurityListRequest) SetUnderlyingOptPayoutType(v int) {
	m.Set(field.NewUnderlyingOptPayoutType(v))
}

// SetUnderlyingOptPayoutAmount sets UnderlyingOptPayoutAmount, Tag 2029.
func (m DerivativeSecurityListRequest) SetUnderlyingOptPayoutAmount(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingOptPayoutAmount(value, scale))
}

// SetUnderlyingPriceQuoteMethod sets UnderlyingPriceQuoteMethod, Tag 2030.
func (m DerivativeSecurityListRequest) SetUnderlyingPriceQuoteMethod(v string) {
	m.Set(field.NewUnderlyingPriceQuoteMethod(v))
}

// SetUnderlyingValuationMethod sets UnderlyingValuationMethod, Tag 2031.
func (m DerivativeSecurityListRequest) SetUnderlyingValuationMethod(v string) {
	m.Set(field.NewUnderlyingValuationMethod(v))
}

// SetUnderlyingListMethod sets UnderlyingListMethod, Tag 2032.
func (m DerivativeSecurityListRequest) SetUnderlyingListMethod(v int) {
	m.Set(field.NewUnderlyingListMethod(v))
}

// SetUnderlyingCapPrice sets UnderlyingCapPrice, Tag 2033.
func (m DerivativeSecurityListRequest) SetUnderlyingCapPrice(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingCapPrice(value, scale))
}

// SetUnderlyingFloorPrice sets UnderlyingFloorPrice, Tag 2034.
func (m DerivativeSecurityListRequest) SetUnderlyingFloorPrice(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingFloorPrice(value, scale))
}

// SetUnderlyingFlexibleIndicator sets UnderlyingFlexibleIndicator, Tag 2035.
func (m DerivativeSecurityListRequest) SetUnderlyingFlexibleIndicator(v bool) {
	m.Set(field.NewUnderlyingFlexibleIndicator(v))
}

// SetUnderlyingFlexProductEligibilityIndicator sets UnderlyingFlexProductEligibilityIndicator, Tag 2036.
func (m DerivativeSecurityListRequest) SetUnderlyingFlexProductEligibilityIndicator(v bool) {
	m.Set(field.NewUnderlyingFlexProductEligibilityIndicator(v))
}

// SetUnderlyingPositionLimit sets UnderlyingPositionLimit, Tag 2037.
func (m DerivativeSecurityListRequest) SetUnderlyingPositionLimit(v int) {
	m.Set(field.NewUnderlyingPositionLimit(v))
}

// SetUnderlyingNTPositionLimit sets UnderlyingNTPositionLimit, Tag 2038.
func (m DerivativeSecurityListRequest) SetUnderlyingNTPositionLimit(v int) {
	m.Set(field.NewUnderlyingNTPositionLimit(v))
}

// SetUnderlyingPool sets UnderlyingPool, Tag 2039.
func (m DerivativeSecurityListRequest) SetUnderlyingPool(v string) {
	m.Set(field.NewUnderlyingPool(v))
}

// SetUnderlyingContractSettlMonth sets UnderlyingContractSettlMonth, Tag 2040.
func (m DerivativeSecurityListRequest) SetUnderlyingContractSettlMonth(v string) {
	m.Set(field.NewUnderlyingContractSettlMonth(v))
}

// SetUnderlyingDatedDate sets UnderlyingDatedDate, Tag 2041.
func (m DerivativeSecurityListRequest) SetUnderlyingDatedDate(v string) {
	m.Set(field.NewUnderlyingDatedDate(v))
}

// SetUnderlyingInterestAccrualDate sets UnderlyingInterestAccrualDate, Tag 2042.
func (m DerivativeSecurityListRequest) SetUnderlyingInterestAccrualDate(v string) {
	m.Set(field.NewUnderlyingInterestAccrualDate(v))
}

// SetUnderlyingShortSaleRestriction sets UnderlyingShortSaleRestriction, Tag 2043.
func (m DerivativeSecurityListRequest) SetUnderlyingShortSaleRestriction(v int) {
	m.Set(field.NewUnderlyingShortSaleRestriction(v))
}

// SetUnderlyingRefTickTableID sets UnderlyingRefTickTableID, Tag 2044.
func (m DerivativeSecurityListRequest) SetUnderlyingRefTickTableID(v int) {
	m.Set(field.NewUnderlyingRefTickTableID(v))
}

// SetNoUnderlyingComplexEvents sets NoUnderlyingComplexEvents, Tag 2045.
func (m DerivativeSecurityListRequest) SetNoUnderlyingComplexEvents(f NoUnderlyingComplexEventsRepeatingGroup) {
	m.SetGroup(f)
}

// SetNoUnderlyingSecondaryAssetClasses sets NoUnderlyingSecondaryAssetClasses, Tag 2080.
func (m DerivativeSecurityListRequest) SetNoUnderlyingSecondaryAssetClasses(f NoUnderlyingSecondaryAssetClassesRepeatingGroup) {
	m.SetGroup(f)
}

// SetUnderlyingSettlRateIndex sets UnderlyingSettlRateIndex, Tag 2284.
func (m DerivativeSecurityListRequest) SetUnderlyingSettlRateIndex(v string) {
	m.Set(field.NewUnderlyingSettlRateIndex(v))
}

// SetUnderlyingSettlRateIndexLocation sets UnderlyingSettlRateIndexLocation, Tag 2285.
func (m DerivativeSecurityListRequest) SetUnderlyingSettlRateIndexLocation(v string) {
	m.Set(field.NewUnderlyingSettlRateIndexLocation(v))
}

// SetUnderlyingOptionExpirationDesc sets UnderlyingOptionExpirationDesc, Tag 2286.
func (m DerivativeSecurityListRequest) SetUnderlyingOptionExpirationDesc(v string) {
	m.Set(field.NewUnderlyingOptionExpirationDesc(v))
}

// SetEncodedUnderlyingOptionExpirationDescLen sets EncodedUnderlyingOptionExpirationDescLen, Tag 2287.
func (m DerivativeSecurityListRequest) SetEncodedUnderlyingOptionExpirationDescLen(v int) {
	m.Set(field.NewEncodedUnderlyingOptionExpirationDescLen(v))
}

// SetEncodedUnderlyingOptionExpirationDesc sets EncodedUnderlyingOptionExpirationDesc, Tag 2288.
func (m DerivativeSecurityListRequest) SetEncodedUnderlyingOptionExpirationDesc(v string) {
	m.Set(field.NewEncodedUnderlyingOptionExpirationDesc(v))
}

// SetUnderlyingSwapSubClass sets UnderlyingSwapSubClass, Tag 2289.
func (m DerivativeSecurityListRequest) SetUnderlyingSwapSubClass(v string) {
	m.Set(field.NewUnderlyingSwapSubClass(v))
}

// SetUnderlyingStrikeUnitOfMeasure sets UnderlyingStrikeUnitOfMeasure, Tag 2290.
func (m DerivativeSecurityListRequest) SetUnderlyingStrikeUnitOfMeasure(v string) {
	m.Set(field.NewUnderlyingStrikeUnitOfMeasure(v))
}

// SetUnderlyingStrikeIndex sets UnderlyingStrikeIndex, Tag 2291.
func (m DerivativeSecurityListRequest) SetUnderlyingStrikeIndex(v string) {
	m.Set(field.NewUnderlyingStrikeIndex(v))
}

// SetUnderlyingStrikeIndexSpread sets UnderlyingStrikeIndexSpread, Tag 2292.
func (m DerivativeSecurityListRequest) SetUnderlyingStrikeIndexSpread(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingStrikeIndexSpread(value, scale))
}

// SetUnderlyingValuationSource sets UnderlyingValuationSource, Tag 2293.
func (m DerivativeSecurityListRequest) SetUnderlyingValuationSource(v string) {
	m.Set(field.NewUnderlyingValuationSource(v))
}

// SetUnderlyingValuationReferenceModel sets UnderlyingValuationReferenceModel, Tag 2294.
func (m DerivativeSecurityListRequest) SetUnderlyingValuationReferenceModel(v string) {
	m.Set(field.NewUnderlyingValuationReferenceModel(v))
}

// SetUnderlyingStrategyType sets UnderlyingStrategyType, Tag 2295.
func (m DerivativeSecurityListRequest) SetUnderlyingStrategyType(v string) {
	m.Set(field.NewUnderlyingStrategyType(v))
}

// SetUnderlyingCommonPricingIndicator sets UnderlyingCommonPricingIndicator, Tag 2296.
func (m DerivativeSecurityListRequest) SetUnderlyingCommonPricingIndicator(v bool) {
	m.Set(field.NewUnderlyingCommonPricingIndicator(v))
}

// SetUnderlyingSettlDisruptionProvision sets UnderlyingSettlDisruptionProvision, Tag 2297.
func (m DerivativeSecurityListRequest) SetUnderlyingSettlDisruptionProvision(v int) {
	m.Set(field.NewUnderlyingSettlDisruptionProvision(v))
}

// SetUnderlyingInstrumentRoundingDirection sets UnderlyingInstrumentRoundingDirection, Tag 2298.
func (m DerivativeSecurityListRequest) SetUnderlyingInstrumentRoundingDirection(v string) {
	m.Set(field.NewUnderlyingInstrumentRoundingDirection(v))
}

// SetUnderlyingInstrumentRoundingPrecision sets UnderlyingInstrumentRoundingPrecision, Tag 2299.
func (m DerivativeSecurityListRequest) SetUnderlyingInstrumentRoundingPrecision(v int) {
	m.Set(field.NewUnderlyingInstrumentRoundingPrecision(v))
}

// SetNoUnderlyingAssetAttributes sets NoUnderlyingAssetAttributes, Tag 2312.
func (m DerivativeSecurityListRequest) SetNoUnderlyingAssetAttributes(f NoUnderlyingAssetAttributesRepeatingGroup) {
	m.SetGroup(f)
}

// SetUnderlyingTradingUnitPeriodMultiplier sets UnderlyingTradingUnitPeriodMultiplier, Tag 2363.
func (m DerivativeSecurityListRequest) SetUnderlyingTradingUnitPeriodMultiplier(v int) {
	m.Set(field.NewUnderlyingTradingUnitPeriodMultiplier(v))
}

// SetUnderlyingAssetGroup sets UnderlyingAssetGroup, Tag 2491.
func (m DerivativeSecurityListRequest) SetUnderlyingAssetGroup(v int) {
	m.Set(field.NewUnderlyingAssetGroup(v))
}

// SetUnderlyingNotional sets UnderlyingNotional, Tag 2614.
func (m DerivativeSecurityListRequest) SetUnderlyingNotional(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingNotional(value, scale))
}

// SetUnderlyingNotionalCurrency sets UnderlyingNotionalCurrency, Tag 2615.
func (m DerivativeSecurityListRequest) SetUnderlyingNotionalCurrency(v string) {
	m.Set(field.NewUnderlyingNotionalCurrency(v))
}

// SetUnderlyingNotionalDeterminationMethod sets UnderlyingNotionalDeterminationMethod, Tag 2616.
func (m DerivativeSecurityListRequest) SetUnderlyingNotionalDeterminationMethod(v string) {
	m.Set(field.NewUnderlyingNotionalDeterminationMethod(v))
}

// SetUnderlyingNotionalAdjustments sets UnderlyingNotionalAdjustments, Tag 2617.
func (m DerivativeSecurityListRequest) SetUnderlyingNotionalAdjustments(v enum.UnderlyingNotionalAdjustments) {
	m.Set(field.NewUnderlyingNotionalAdjustments(v))
}

// SetUnderlyingNotionalXIDRef sets UnderlyingNotionalXIDRef, Tag 2619.
func (m DerivativeSecurityListRequest) SetUnderlyingNotionalXIDRef(v string) {
	m.Set(field.NewUnderlyingNotionalXIDRef(v))
}

// SetUnderlyingFutureID sets UnderlyingFutureID, Tag 2620.
func (m DerivativeSecurityListRequest) SetUnderlyingFutureID(v string) {
	m.Set(field.NewUnderlyingFutureID(v))
}

// SetUnderlyingFutureIDSource sets UnderlyingFutureIDSource, Tag 2621.
func (m DerivativeSecurityListRequest) SetUnderlyingFutureIDSource(v string) {
	m.Set(field.NewUnderlyingFutureIDSource(v))
}

// SetUnderlyingStrikeIndexCurvePoint sets UnderlyingStrikeIndexCurvePoint, Tag 2622.
func (m DerivativeSecurityListRequest) SetUnderlyingStrikeIndexCurvePoint(v string) {
	m.Set(field.NewUnderlyingStrikeIndexCurvePoint(v))
}

// SetUnderlyingStrikeIndexQuote sets UnderlyingStrikeIndexQuote, Tag 2623.
func (m DerivativeSecurityListRequest) SetUnderlyingStrikeIndexQuote(v int) {
	m.Set(field.NewUnderlyingStrikeIndexQuote(v))
}

// SetUnderlyingExtraordinaryEventAdjustmentMethod sets UnderlyingExtraordinaryEventAdjustmentMethod, Tag 2624.
func (m DerivativeSecurityListRequest) SetUnderlyingExtraordinaryEventAdjustmentMethod(v int) {
	m.Set(field.NewUnderlyingExtraordinaryEventAdjustmentMethod(v))
}

// SetUnderlyingExchangeLookAlike sets UnderlyingExchangeLookAlike, Tag 2625.
func (m DerivativeSecurityListRequest) SetUnderlyingExchangeLookAlike(v bool) {
	m.Set(field.NewUnderlyingExchangeLookAlike(v))
}

// SetUnderlyingAverageVolumeLimitationPercentage sets UnderlyingAverageVolumeLimitationPercentage, Tag 2626.
func (m DerivativeSecurityListRequest) SetUnderlyingAverageVolumeLimitationPercentage(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingAverageVolumeLimitationPercentage(value, scale))
}

// SetUnderlyingAverageVolumeLimitationPeriodDays sets UnderlyingAverageVolumeLimitationPeriodDays, Tag 2627.
func (m DerivativeSecurityListRequest) SetUnderlyingAverageVolumeLimitationPeriodDays(v int) {
	m.Set(field.NewUnderlyingAverageVolumeLimitationPeriodDays(v))
}

// SetUnderlyingDepositoryReceiptIndicator sets UnderlyingDepositoryReceiptIndicator, Tag 2628.
func (m DerivativeSecurityListRequest) SetUnderlyingDepositoryReceiptIndicator(v bool) {
	m.Set(field.NewUnderlyingDepositoryReceiptIndicator(v))
}

// SetUnderlyingOpenUnits sets UnderlyingOpenUnits, Tag 2629.
func (m DerivativeSecurityListRequest) SetUnderlyingOpenUnits(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingOpenUnits(value, scale))
}

// SetUnderlyingBasketDivisor sets UnderlyingBasketDivisor, Tag 2630.
func (m DerivativeSecurityListRequest) SetUnderlyingBasketDivisor(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingBasketDivisor(value, scale))
}

// SetUnderlyingInstrumentXID sets UnderlyingInstrumentXID, Tag 2631.
func (m DerivativeSecurityListRequest) SetUnderlyingInstrumentXID(v string) {
	m.Set(field.NewUnderlyingInstrumentXID(v))
}

// SetUnderlyingInTheMoneyCondition sets UnderlyingInTheMoneyCondition, Tag 2683.
func (m DerivativeSecurityListRequest) SetUnderlyingInTheMoneyCondition(v int) {
	m.Set(field.NewUnderlyingInTheMoneyCondition(v))
}

// SetDerivativeInTheMoneyCondition sets DerivativeInTheMoneyCondition, Tag 2684.
func (m DerivativeSecurityListRequest) SetDerivativeInTheMoneyCondition(v int) {
	m.Set(field.NewDerivativeInTheMoneyCondition(v))
}

// SetUnderlyingContraryInstructionEligibilityIndicator sets UnderlyingContraryInstructionEligibilityIndicator, Tag 2687.
func (m DerivativeSecurityListRequest) SetUnderlyingContraryInstructionEligibilityIndicator(v bool) {
	m.Set(field.NewUnderlyingContraryInstructionEligibilityIndicator(v))
}

// SetDerivativeContraryInstructionEligibilityIndicator sets DerivativeContraryInstructionEligibilityIndicator, Tag 2688.
func (m DerivativeSecurityListRequest) SetDerivativeContraryInstructionEligibilityIndicator(v bool) {
	m.Set(field.NewDerivativeContraryInstructionEligibilityIndicator(v))
}

// SetUnderlyingFinancialInstrumentFullName sets UnderlyingFinancialInstrumentFullName, Tag 2720.
func (m DerivativeSecurityListRequest) SetUnderlyingFinancialInstrumentFullName(v string) {
	m.Set(field.NewUnderlyingFinancialInstrumentFullName(v))
}

// SetEncodedUnderlyingFinancialInstrumentFullNameLen sets EncodedUnderlyingFinancialInstrumentFullNameLen, Tag 2721.
func (m DerivativeSecurityListRequest) SetEncodedUnderlyingFinancialInstrumentFullNameLen(v int) {
	m.Set(field.NewEncodedUnderlyingFinancialInstrumentFullNameLen(v))
}

// SetEncodedUnderlyingFinancialInstrumentFullName sets EncodedUnderlyingFinancialInstrumentFullName, Tag 2722.
func (m DerivativeSecurityListRequest) SetEncodedUnderlyingFinancialInstrumentFullName(v string) {
	m.Set(field.NewEncodedUnderlyingFinancialInstrumentFullName(v))
}

// SetUnderlyingIndexCurveUnit sets UnderlyingIndexCurveUnit, Tag 2723.
func (m DerivativeSecurityListRequest) SetUnderlyingIndexCurveUnit(v string) {
	m.Set(field.NewUnderlyingIndexCurveUnit(v))
}

// SetUnderlyingIndexCurvePeriod sets UnderlyingIndexCurvePeriod, Tag 2724.
func (m DerivativeSecurityListRequest) SetUnderlyingIndexCurvePeriod(v int) {
	m.Set(field.NewUnderlyingIndexCurvePeriod(v))
}

// SetUnderlyingFinancialInstrumentShortName sets UnderlyingFinancialInstrumentShortName, Tag 2742.
func (m DerivativeSecurityListRequest) SetUnderlyingFinancialInstrumentShortName(v string) {
	m.Set(field.NewUnderlyingFinancialInstrumentShortName(v))
}

// SetUnderlyingAssetSubType sets UnderlyingAssetSubType, Tag 2744.
func (m DerivativeSecurityListRequest) SetUnderlyingAssetSubType(v string) {
	m.Set(field.NewUnderlyingAssetSubType(v))
}

// SetUnderlyingDeliveryRouteOrCharter sets UnderlyingDeliveryRouteOrCharter, Tag 2756.
func (m DerivativeSecurityListRequest) SetUnderlyingDeliveryRouteOrCharter(v string) {
	m.Set(field.NewUnderlyingDeliveryRouteOrCharter(v))
}

// SetUnderlyingReturnTrigger sets UnderlyingReturnTrigger, Tag 2757.
func (m DerivativeSecurityListRequest) SetUnderlyingReturnTrigger(v int) {
	m.Set(field.NewUnderlyingReturnTrigger(v))
}

// SetUnderlyingID sets UnderlyingID, Tag 2874.
func (m DerivativeSecurityListRequest) SetUnderlyingID(v string) {
	m.Set(field.NewUnderlyingID(v))
}

// SetUnderlyingCouponOtherDayCount sets UnderlyingCouponOtherDayCount, Tag 2881.
func (m DerivativeSecurityListRequest) SetUnderlyingCouponOtherDayCount(v string) {
	m.Set(field.NewUnderlyingCouponOtherDayCount(v))
}

// SetUnderlyingAccruedInterestAmt sets UnderlyingAccruedInterestAmt, Tag 2885.
func (m DerivativeSecurityListRequest) SetUnderlyingAccruedInterestAmt(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingAccruedInterestAmt(value, scale))
}

// SetUnderlyingNumDaysInterest sets UnderlyingNumDaysInterest, Tag 2886.
func (m DerivativeSecurityListRequest) SetUnderlyingNumDaysInterest(v int) {
	m.Set(field.NewUnderlyingNumDaysInterest(v))
}

// SetDerivativeUPICode sets DerivativeUPICode, Tag 2892.
func (m DerivativeSecurityListRequest) SetDerivativeUPICode(v string) {
	m.Set(field.NewDerivativeUPICode(v))
}

// SetUnderlyingUPICode sets UnderlyingUPICode, Tag 2894.
func (m DerivativeSecurityListRequest) SetUnderlyingUPICode(v string) {
	m.Set(field.NewUnderlyingUPICode(v))
}

// SetNoUnderlyingStreams sets NoUnderlyingStreams, Tag 40540.
func (m DerivativeSecurityListRequest) SetNoUnderlyingStreams(f NoUnderlyingStreamsRepeatingGroup) {
	m.SetGroup(f)
}

// SetNoUnderlyingBusinessCenters sets NoUnderlyingBusinessCenters, Tag 40962.
func (m DerivativeSecurityListRequest) SetNoUnderlyingBusinessCenters(f NoUnderlyingBusinessCentersRepeatingGroup) {
	m.SetGroup(f)
}

// SetUnderlyingBusinessDayConvention sets UnderlyingBusinessDayConvention, Tag 40964.
func (m DerivativeSecurityListRequest) SetUnderlyingBusinessDayConvention(v int) {
	m.Set(field.NewUnderlyingBusinessDayConvention(v))
}

// SetUnderlyingDateRollConvention sets UnderlyingDateRollConvention, Tag 40965.
func (m DerivativeSecurityListRequest) SetUnderlyingDateRollConvention(v string) {
	m.Set(field.NewUnderlyingDateRollConvention(v))
}

// SetUnderlyingProtectionTermXIDRef sets UnderlyingProtectionTermXIDRef, Tag 41314.
func (m DerivativeSecurityListRequest) SetUnderlyingProtectionTermXIDRef(v string) {
	m.Set(field.NewUnderlyingProtectionTermXIDRef(v))
}

// SetUnderlyingSettlTermXIDRef sets UnderlyingSettlTermXIDRef, Tag 41315.
func (m DerivativeSecurityListRequest) SetUnderlyingSettlTermXIDRef(v string) {
	m.Set(field.NewUnderlyingSettlTermXIDRef(v))
}

// SetUnderlyingExerciseDesc sets UnderlyingExerciseDesc, Tag 41810.
func (m DerivativeSecurityListRequest) SetUnderlyingExerciseDesc(v string) {
	m.Set(field.NewUnderlyingExerciseDesc(v))
}

// SetEncodedUnderlyingExerciseDescLen sets EncodedUnderlyingExerciseDescLen, Tag 41811.
func (m DerivativeSecurityListRequest) SetEncodedUnderlyingExerciseDescLen(v int) {
	m.Set(field.NewEncodedUnderlyingExerciseDescLen(v))
}

// SetEncodedUnderlyingExerciseDesc sets EncodedUnderlyingExerciseDesc, Tag 41812.
func (m DerivativeSecurityListRequest) SetEncodedUnderlyingExerciseDesc(v string) {
	m.Set(field.NewEncodedUnderlyingExerciseDesc(v))
}

// SetUnderlyingAutomaticExerciseIndicator sets UnderlyingAutomaticExerciseIndicator, Tag 41813.
func (m DerivativeSecurityListRequest) SetUnderlyingAutomaticExerciseIndicator(v bool) {
	m.Set(field.NewUnderlyingAutomaticExerciseIndicator(v))
}

// SetUnderlyingAutomaticExerciseThresholdRate sets UnderlyingAutomaticExerciseThresholdRate, Tag 41814.
func (m DerivativeSecurityListRequest) SetUnderlyingAutomaticExerciseThresholdRate(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingAutomaticExerciseThresholdRate(value, scale))
}

// SetUnderlyingExerciseConfirmationMethod sets UnderlyingExerciseConfirmationMethod, Tag 41815.
func (m DerivativeSecurityListRequest) SetUnderlyingExerciseConfirmationMethod(v int) {
	m.Set(field.NewUnderlyingExerciseConfirmationMethod(v))
}

// SetUnderlyingManualNoticeBusinessCenter sets UnderlyingManualNoticeBusinessCenter, Tag 41816.
func (m DerivativeSecurityListRequest) SetUnderlyingManualNoticeBusinessCenter(v string) {
	m.Set(field.NewUnderlyingManualNoticeBusinessCenter(v))
}

// SetUnderlyingFallbackExerciseIndicator sets UnderlyingFallbackExerciseIndicator, Tag 41817.
func (m DerivativeSecurityListRequest) SetUnderlyingFallbackExerciseIndicator(v bool) {
	m.Set(field.NewUnderlyingFallbackExerciseIndicator(v))
}

// SetUnderlyingLimitedRightToConfirmIndicator sets UnderlyingLimitedRightToConfirmIndicator, Tag 41818.
func (m DerivativeSecurityListRequest) SetUnderlyingLimitedRightToConfirmIndicator(v bool) {
	m.Set(field.NewUnderlyingLimitedRightToConfirmIndicator(v))
}

// SetUnderlyingExerciseSplitTicketIndicator sets UnderlyingExerciseSplitTicketIndicator, Tag 41819.
func (m DerivativeSecurityListRequest) SetUnderlyingExerciseSplitTicketIndicator(v bool) {
	m.Set(field.NewUnderlyingExerciseSplitTicketIndicator(v))
}

// SetNoUnderlyingOptionExerciseBusinessCenters sets NoUnderlyingOptionExerciseBusinessCenters, Tag 41820.
func (m DerivativeSecurityListRequest) SetNoUnderlyingOptionExerciseBusinessCenters(f NoUnderlyingOptionExerciseBusinessCentersRepeatingGroup) {
	m.SetGroup(f)
}

// SetUnderlyingOptionExerciseBusinessDayConvention sets UnderlyingOptionExerciseBusinessDayConvention, Tag 41822.
func (m DerivativeSecurityListRequest) SetUnderlyingOptionExerciseBusinessDayConvention(v int) {
	m.Set(field.NewUnderlyingOptionExerciseBusinessDayConvention(v))
}

// SetUnderlyingOptionExerciseEarliestDateOffsetDayType sets UnderlyingOptionExerciseEarliestDateOffsetDayType, Tag 41823.
func (m DerivativeSecurityListRequest) SetUnderlyingOptionExerciseEarliestDateOffsetDayType(v int) {
	m.Set(field.NewUnderlyingOptionExerciseEarliestDateOffsetDayType(v))
}

// SetUnderlyingOptionExerciseEarliestDateOffsetPeriod sets UnderlyingOptionExerciseEarliestDateOffsetPeriod, Tag 41824.
func (m DerivativeSecurityListRequest) SetUnderlyingOptionExerciseEarliestDateOffsetPeriod(v int) {
	m.Set(field.NewUnderlyingOptionExerciseEarliestDateOffsetPeriod(v))
}

// SetUnderlyingOptionExerciseEarliestDateOffsetUnit sets UnderlyingOptionExerciseEarliestDateOffsetUnit, Tag 41825.
func (m DerivativeSecurityListRequest) SetUnderlyingOptionExerciseEarliestDateOffsetUnit(v string) {
	m.Set(field.NewUnderlyingOptionExerciseEarliestDateOffsetUnit(v))
}

// SetUnderlyingOptionExerciseFrequencyPeriod sets UnderlyingOptionExerciseFrequencyPeriod, Tag 41826.
func (m DerivativeSecurityListRequest) SetUnderlyingOptionExerciseFrequencyPeriod(v int) {
	m.Set(field.NewUnderlyingOptionExerciseFrequencyPeriod(v))
}

// SetUnderlyingOptionExerciseFrequencyUnit sets UnderlyingOptionExerciseFrequencyUnit, Tag 41827.
func (m DerivativeSecurityListRequest) SetUnderlyingOptionExerciseFrequencyUnit(v string) {
	m.Set(field.NewUnderlyingOptionExerciseFrequencyUnit(v))
}

// SetUnderlyingOptionExerciseStartDateUnadjusted sets UnderlyingOptionExerciseStartDateUnadjusted, Tag 41828.
func (m DerivativeSecurityListRequest) SetUnderlyingOptionExerciseStartDateUnadjusted(v string) {
	m.Set(field.NewUnderlyingOptionExerciseStartDateUnadjusted(v))
}

// SetUnderlyingOptionExerciseStartDateRelativeTo sets UnderlyingOptionExerciseStartDateRelativeTo, Tag 41829.
func (m DerivativeSecurityListRequest) SetUnderlyingOptionExerciseStartDateRelativeTo(v int) {
	m.Set(field.NewUnderlyingOptionExerciseStartDateRelativeTo(v))
}

// SetUnderlyingOptionExerciseStartDateOffsetPeriod sets UnderlyingOptionExerciseStartDateOffsetPeriod, Tag 41830.
func (m DerivativeSecurityListRequest) SetUnderlyingOptionExerciseStartDateOffsetPeriod(v int) {
	m.Set(field.NewUnderlyingOptionExerciseStartDateOffsetPeriod(v))
}

// SetUnderlyingOptionExerciseStartDateOffsetUnit sets UnderlyingOptionExerciseStartDateOffsetUnit, Tag 41831.
func (m DerivativeSecurityListRequest) SetUnderlyingOptionExerciseStartDateOffsetUnit(v string) {
	m.Set(field.NewUnderlyingOptionExerciseStartDateOffsetUnit(v))
}

// SetUnderlyingOptionExerciseStartDateOffsetDayType sets UnderlyingOptionExerciseStartDateOffsetDayType, Tag 41832.
func (m DerivativeSecurityListRequest) SetUnderlyingOptionExerciseStartDateOffsetDayType(v int) {
	m.Set(field.NewUnderlyingOptionExerciseStartDateOffsetDayType(v))
}

// SetUnderlyingOptionExerciseStartDateAdjusted sets UnderlyingOptionExerciseStartDateAdjusted, Tag 41833.
func (m DerivativeSecurityListRequest) SetUnderlyingOptionExerciseStartDateAdjusted(v string) {
	m.Set(field.NewUnderlyingOptionExerciseStartDateAdjusted(v))
}

// SetUnderlyingOptionExerciseSkip sets UnderlyingOptionExerciseSkip, Tag 41834.
func (m DerivativeSecurityListRequest) SetUnderlyingOptionExerciseSkip(v int) {
	m.Set(field.NewUnderlyingOptionExerciseSkip(v))
}

// SetUnderlyingOptionExerciseNominationDeadline sets UnderlyingOptionExerciseNominationDeadline, Tag 41835.
func (m DerivativeSecurityListRequest) SetUnderlyingOptionExerciseNominationDeadline(v string) {
	m.Set(field.NewUnderlyingOptionExerciseNominationDeadline(v))
}

// SetUnderlyingOptionExerciseFirstDateUnadjusted sets UnderlyingOptionExerciseFirstDateUnadjusted, Tag 41836.
func (m DerivativeSecurityListRequest) SetUnderlyingOptionExerciseFirstDateUnadjusted(v string) {
	m.Set(field.NewUnderlyingOptionExerciseFirstDateUnadjusted(v))
}

// SetUnderlyingOptionExerciseLastDateUnadjusted sets UnderlyingOptionExerciseLastDateUnadjusted, Tag 41837.
func (m DerivativeSecurityListRequest) SetUnderlyingOptionExerciseLastDateUnadjusted(v string) {
	m.Set(field.NewUnderlyingOptionExerciseLastDateUnadjusted(v))
}

// SetUnderlyingOptionExerciseEarliestTime sets UnderlyingOptionExerciseEarliestTime, Tag 41838.
func (m DerivativeSecurityListRequest) SetUnderlyingOptionExerciseEarliestTime(v string) {
	m.Set(field.NewUnderlyingOptionExerciseEarliestTime(v))
}

// SetUnderlyingOptionExerciseLatestTime sets UnderlyingOptionExerciseLatestTime, Tag 41839.
func (m DerivativeSecurityListRequest) SetUnderlyingOptionExerciseLatestTime(v string) {
	m.Set(field.NewUnderlyingOptionExerciseLatestTime(v))
}

// SetUnderlyingOptionExerciseTimeBusinessCenter sets UnderlyingOptionExerciseTimeBusinessCenter, Tag 41840.
func (m DerivativeSecurityListRequest) SetUnderlyingOptionExerciseTimeBusinessCenter(v string) {
	m.Set(field.NewUnderlyingOptionExerciseTimeBusinessCenter(v))
}

// SetNoUnderlyingOptionExerciseDates sets NoUnderlyingOptionExerciseDates, Tag 41841.
func (m DerivativeSecurityListRequest) SetNoUnderlyingOptionExerciseDates(f NoUnderlyingOptionExerciseDatesRepeatingGroup) {
	m.SetGroup(f)
}

// SetNoUnderlyingOptionExerciseExpirationDateBusinessCenters sets NoUnderlyingOptionExerciseExpirationDateBusinessCenters, Tag 41844.
func (m DerivativeSecurityListRequest) SetNoUnderlyingOptionExerciseExpirationDateBusinessCenters(f NoUnderlyingOptionExerciseExpirationDateBusinessCentersRepeatingGroup) {
	m.SetGroup(f)
}

// SetUnderlyingOptionExerciseExpirationDateBusinessDayConvention sets UnderlyingOptionExerciseExpirationDateBusinessDayConvention, Tag 41846.
func (m DerivativeSecurityListRequest) SetUnderlyingOptionExerciseExpirationDateBusinessDayConvention(v int) {
	m.Set(field.NewUnderlyingOptionExerciseExpirationDateBusinessDayConvention(v))
}

// SetUnderlyingOptionExerciseExpirationDateRelativeTo sets UnderlyingOptionExerciseExpirationDateRelativeTo, Tag 41847.
func (m DerivativeSecurityListRequest) SetUnderlyingOptionExerciseExpirationDateRelativeTo(v int) {
	m.Set(field.NewUnderlyingOptionExerciseExpirationDateRelativeTo(v))
}

// SetUnderlyingOptionExerciseExpirationDateOffsetPeriod sets UnderlyingOptionExerciseExpirationDateOffsetPeriod, Tag 41848.
func (m DerivativeSecurityListRequest) SetUnderlyingOptionExerciseExpirationDateOffsetPeriod(v int) {
	m.Set(field.NewUnderlyingOptionExerciseExpirationDateOffsetPeriod(v))
}

// SetUnderlyingOptionExerciseExpirationDateOffsetUnit sets UnderlyingOptionExerciseExpirationDateOffsetUnit, Tag 41849.
func (m DerivativeSecurityListRequest) SetUnderlyingOptionExerciseExpirationDateOffsetUnit(v string) {
	m.Set(field.NewUnderlyingOptionExerciseExpirationDateOffsetUnit(v))
}

// SetUnderlyingOptionExerciseExpirationFrequencyPeriod sets UnderlyingOptionExerciseExpirationFrequencyPeriod, Tag 41850.
func (m DerivativeSecurityListRequest) SetUnderlyingOptionExerciseExpirationFrequencyPeriod(v int) {
	m.Set(field.NewUnderlyingOptionExerciseExpirationFrequencyPeriod(v))
}

// SetUnderlyingOptionExerciseExpirationFrequencyUnit sets UnderlyingOptionExerciseExpirationFrequencyUnit, Tag 41851.
func (m DerivativeSecurityListRequest) SetUnderlyingOptionExerciseExpirationFrequencyUnit(v string) {
	m.Set(field.NewUnderlyingOptionExerciseExpirationFrequencyUnit(v))
}

// SetUnderlyingOptionExerciseExpirationRollConvention sets UnderlyingOptionExerciseExpirationRollConvention, Tag 41852.
func (m DerivativeSecurityListRequest) SetUnderlyingOptionExerciseExpirationRollConvention(v string) {
	m.Set(field.NewUnderlyingOptionExerciseExpirationRollConvention(v))
}

// SetUnderlyingOptionExerciseExpirationDateOffsetDayType sets UnderlyingOptionExerciseExpirationDateOffsetDayType, Tag 41853.
func (m DerivativeSecurityListRequest) SetUnderlyingOptionExerciseExpirationDateOffsetDayType(v int) {
	m.Set(field.NewUnderlyingOptionExerciseExpirationDateOffsetDayType(v))
}

// SetUnderlyingOptionExerciseExpirationTime sets UnderlyingOptionExerciseExpirationTime, Tag 41854.
func (m DerivativeSecurityListRequest) SetUnderlyingOptionExerciseExpirationTime(v string) {
	m.Set(field.NewUnderlyingOptionExerciseExpirationTime(v))
}

// SetUnderlyingOptionExerciseExpirationTimeBusinessCenter sets UnderlyingOptionExerciseExpirationTimeBusinessCenter, Tag 41855.
func (m DerivativeSecurityListRequest) SetUnderlyingOptionExerciseExpirationTimeBusinessCenter(v string) {
	m.Set(field.NewUnderlyingOptionExerciseExpirationTimeBusinessCenter(v))
}

// SetNoUnderlyingOptionExerciseExpirationDates sets NoUnderlyingOptionExerciseExpirationDates, Tag 41856.
func (m DerivativeSecurityListRequest) SetNoUnderlyingOptionExerciseExpirationDates(f NoUnderlyingOptionExerciseExpirationDatesRepeatingGroup) {
	m.SetGroup(f)
}

// SetUnderlyingMarketDisruptionProvision sets UnderlyingMarketDisruptionProvision, Tag 41859.
func (m DerivativeSecurityListRequest) SetUnderlyingMarketDisruptionProvision(v int) {
	m.Set(field.NewUnderlyingMarketDisruptionProvision(v))
}

// SetUnderlyingMarketDisruptionFallbackProvision sets UnderlyingMarketDisruptionFallbackProvision, Tag 41860.
func (m DerivativeSecurityListRequest) SetUnderlyingMarketDisruptionFallbackProvision(v int) {
	m.Set(field.NewUnderlyingMarketDisruptionFallbackProvision(v))
}

// SetUnderlyingMarketDisruptionMaximumDays sets UnderlyingMarketDisruptionMaximumDays, Tag 41861.
func (m DerivativeSecurityListRequest) SetUnderlyingMarketDisruptionMaximumDays(v int) {
	m.Set(field.NewUnderlyingMarketDisruptionMaximumDays(v))
}

// SetUnderlyingMarketDisruptionMaterialityPercentage sets UnderlyingMarketDisruptionMaterialityPercentage, Tag 41862.
func (m DerivativeSecurityListRequest) SetUnderlyingMarketDisruptionMaterialityPercentage(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingMarketDisruptionMaterialityPercentage(value, scale))
}

// SetUnderlyingMarketDisruptionMinimumFuturesContracts sets UnderlyingMarketDisruptionMinimumFuturesContracts, Tag 41863.
func (m DerivativeSecurityListRequest) SetUnderlyingMarketDisruptionMinimumFuturesContracts(v int) {
	m.Set(field.NewUnderlyingMarketDisruptionMinimumFuturesContracts(v))
}

// SetNoUnderlyingMarketDisruptionEvents sets NoUnderlyingMarketDisruptionEvents, Tag 41864.
func (m DerivativeSecurityListRequest) SetNoUnderlyingMarketDisruptionEvents(f NoUnderlyingMarketDisruptionEventsRepeatingGroup) {
	m.SetGroup(f)
}

// SetNoUnderlyingMarketDisruptionFallbacks sets NoUnderlyingMarketDisruptionFallbacks, Tag 41866.
func (m DerivativeSecurityListRequest) SetNoUnderlyingMarketDisruptionFallbacks(f NoUnderlyingMarketDisruptionFallbacksRepeatingGroup) {
	m.SetGroup(f)
}

// SetNoUnderlyingMarketDisruptionFallbackReferencePrices sets NoUnderlyingMarketDisruptionFallbackReferencePrices, Tag 41868.
func (m DerivativeSecurityListRequest) SetNoUnderlyingMarketDisruptionFallbackReferencePrices(f NoUnderlyingMarketDisruptionFallbackReferencePricesRepeatingGroup) {
	m.SetGroup(f)
}

// SetNoUnderlyingPricingDateBusinessCenters sets NoUnderlyingPricingDateBusinessCenters, Tag 41947.
func (m DerivativeSecurityListRequest) SetNoUnderlyingPricingDateBusinessCenters(f NoUnderlyingPricingDateBusinessCentersRepeatingGroup) {
	m.SetGroup(f)
}

// SetUnderlyingPricingDateUnadjusted sets UnderlyingPricingDateUnadjusted, Tag 41949.
func (m DerivativeSecurityListRequest) SetUnderlyingPricingDateUnadjusted(v string) {
	m.Set(field.NewUnderlyingPricingDateUnadjusted(v))
}

// SetUnderlyingPricingDateBusinessDayConvention sets UnderlyingPricingDateBusinessDayConvention, Tag 41950.
func (m DerivativeSecurityListRequest) SetUnderlyingPricingDateBusinessDayConvention(v int) {
	m.Set(field.NewUnderlyingPricingDateBusinessDayConvention(v))
}

// SetUnderlyingPricingDateAdjusted sets UnderlyingPricingDateAdjusted, Tag 41951.
func (m DerivativeSecurityListRequest) SetUnderlyingPricingDateAdjusted(v string) {
	m.Set(field.NewUnderlyingPricingDateAdjusted(v))
}

// SetUnderlyingPricingTime sets UnderlyingPricingTime, Tag 41952.
func (m DerivativeSecurityListRequest) SetUnderlyingPricingTime(v string) {
	m.Set(field.NewUnderlyingPricingTime(v))
}

// SetUnderlyingPricingTimeBusinessCenter sets UnderlyingPricingTimeBusinessCenter, Tag 41953.
func (m DerivativeSecurityListRequest) SetUnderlyingPricingTimeBusinessCenter(v string) {
	m.Set(field.NewUnderlyingPricingTimeBusinessCenter(v))
}

// SetNoUnderlyingAdditionalTerms sets NoUnderlyingAdditionalTerms, Tag 42036.
func (m DerivativeSecurityListRequest) SetNoUnderlyingAdditionalTerms(f NoUnderlyingAdditionalTermsRepeatingGroup) {
	m.SetGroup(f)
}

// SetNoUnderlyingCashSettlTerms sets NoUnderlyingCashSettlTerms, Tag 42041.
func (m DerivativeSecurityListRequest) SetNoUnderlyingCashSettlTerms(f NoUnderlyingCashSettlTermsRepeatingGroup) {
	m.SetGroup(f)
}

// SetNoUnderlyingPhysicalSettlTerms sets NoUnderlyingPhysicalSettlTerms, Tag 42060.
func (m DerivativeSecurityListRequest) SetNoUnderlyingPhysicalSettlTerms(f NoUnderlyingPhysicalSettlTermsRepeatingGroup) {
	m.SetGroup(f)
}

// SetNoUnderlyingProtectionTerms sets NoUnderlyingProtectionTerms, Tag 42068.
func (m DerivativeSecurityListRequest) SetNoUnderlyingProtectionTerms(f NoUnderlyingProtectionTermsRepeatingGroup) {
	m.SetGroup(f)
}

// SetNoUnderlyingProvisions sets NoUnderlyingProvisions, Tag 42149.
func (m DerivativeSecurityListRequest) SetNoUnderlyingProvisions(f NoUnderlyingProvisionsRepeatingGroup) {
	m.SetGroup(f)
}

// SetNoUnderlyingDividendPayments sets NoUnderlyingDividendPayments, Tag 42855.
func (m DerivativeSecurityListRequest) SetNoUnderlyingDividendPayments(f NoUnderlyingDividendPaymentsRepeatingGroup) {
	m.SetGroup(f)
}

// SetUnderlyingDividendPayoutRatio sets UnderlyingDividendPayoutRatio, Tag 42860.
func (m DerivativeSecurityListRequest) SetUnderlyingDividendPayoutRatio(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingDividendPayoutRatio(value, scale))
}

// SetUnderlyingDividendPayoutConditions sets UnderlyingDividendPayoutConditions, Tag 42861.
func (m DerivativeSecurityListRequest) SetUnderlyingDividendPayoutConditions(v string) {
	m.Set(field.NewUnderlyingDividendPayoutConditions(v))
}

// SetNoUnderlyingExtraordinaryEvents sets NoUnderlyingExtraordinaryEvents, Tag 42884.
func (m DerivativeSecurityListRequest) SetNoUnderlyingExtraordinaryEvents(f NoUnderlyingExtraordinaryEventsRepeatingGroup) {
	m.SetGroup(f)
}

// SetUnderlyingSettlMethodElectingPartySide sets UnderlyingSettlMethodElectingPartySide, Tag 42887.
func (m DerivativeSecurityListRequest) SetUnderlyingSettlMethodElectingPartySide(v int) {
	m.Set(field.NewUnderlyingSettlMethodElectingPartySide(v))
}

// SetUnderlyingMakeWholeDate sets UnderlyingMakeWholeDate, Tag 42888.
func (m DerivativeSecurityListRequest) SetUnderlyingMakeWholeDate(v string) {
	m.Set(field.NewUnderlyingMakeWholeDate(v))
}

// SetUnderlyingMakeWholeAmount sets UnderlyingMakeWholeAmount, Tag 42889.
func (m DerivativeSecurityListRequest) SetUnderlyingMakeWholeAmount(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingMakeWholeAmount(value, scale))
}

// SetUnderlyingMakeWholeBenchmarkCurveName sets UnderlyingMakeWholeBenchmarkCurveName, Tag 42890.
func (m DerivativeSecurityListRequest) SetUnderlyingMakeWholeBenchmarkCurveName(v string) {
	m.Set(field.NewUnderlyingMakeWholeBenchmarkCurveName(v))
}

// SetUnderlyingMakeWholeBenchmarkCurvePoint sets UnderlyingMakeWholeBenchmarkCurvePoint, Tag 42891.
func (m DerivativeSecurityListRequest) SetUnderlyingMakeWholeBenchmarkCurvePoint(v string) {
	m.Set(field.NewUnderlyingMakeWholeBenchmarkCurvePoint(v))
}

// SetUnderlyingMakeWholeRecallSpread sets UnderlyingMakeWholeRecallSpread, Tag 42892.
func (m DerivativeSecurityListRequest) SetUnderlyingMakeWholeRecallSpread(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingMakeWholeRecallSpread(value, scale))
}

// SetUnderlyingMakeWholeBenchmarkQuote sets UnderlyingMakeWholeBenchmarkQuote, Tag 42893.
func (m DerivativeSecurityListRequest) SetUnderlyingMakeWholeBenchmarkQuote(v int) {
	m.Set(field.NewUnderlyingMakeWholeBenchmarkQuote(v))
}

// SetUnderlyingMakeWholeInterpolationMethod sets UnderlyingMakeWholeInterpolationMethod, Tag 42894.
func (m DerivativeSecurityListRequest) SetUnderlyingMakeWholeInterpolationMethod(v int) {
	m.Set(field.NewUnderlyingMakeWholeInterpolationMethod(v))
}

// SetUnderlyingRateSpreadInitialValue sets UnderlyingRateSpreadInitialValue, Tag 43004.
func (m DerivativeSecurityListRequest) SetUnderlyingRateSpreadInitialValue(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingRateSpreadInitialValue(value, scale))
}

// SetNoUnderlyingRateSpreadSteps sets NoUnderlyingRateSpreadSteps, Tag 43005.
func (m DerivativeSecurityListRequest) SetNoUnderlyingRateSpreadSteps(f NoUnderlyingRateSpreadStepsRepeatingGroup) {
	m.SetGroup(f)
}

// SetNoUnderlyingSettlMethodElectionDateBusinessCenters sets NoUnderlyingSettlMethodElectionDateBusinessCenters, Tag 43074.
func (m DerivativeSecurityListRequest) SetNoUnderlyingSettlMethodElectionDateBusinessCenters(f NoUnderlyingSettlMethodElectionDateBusinessCentersRepeatingGroup) {
	m.SetGroup(f)
}

// SetUnderlyingSettlMethodElectionDateUnadjusted sets UnderlyingSettlMethodElectionDateUnadjusted, Tag 43076.
func (m DerivativeSecurityListRequest) SetUnderlyingSettlMethodElectionDateUnadjusted(v string) {
	m.Set(field.NewUnderlyingSettlMethodElectionDateUnadjusted(v))
}

// SetUnderlyingSettlMethodElectionDateBusinessDayConvention sets UnderlyingSettlMethodElectionDateBusinessDayConvention, Tag 43077.
func (m DerivativeSecurityListRequest) SetUnderlyingSettlMethodElectionDateBusinessDayConvention(v int) {
	m.Set(field.NewUnderlyingSettlMethodElectionDateBusinessDayConvention(v))
}

// SetUnderlyingSettlMethodElectionDateRelativeTo sets UnderlyingSettlMethodElectionDateRelativeTo, Tag 43078.
func (m DerivativeSecurityListRequest) SetUnderlyingSettlMethodElectionDateRelativeTo(v int) {
	m.Set(field.NewUnderlyingSettlMethodElectionDateRelativeTo(v))
}

// SetUnderlyingSettlMethodElectionDateOffsetPeriod sets UnderlyingSettlMethodElectionDateOffsetPeriod, Tag 43079.
func (m DerivativeSecurityListRequest) SetUnderlyingSettlMethodElectionDateOffsetPeriod(v int) {
	m.Set(field.NewUnderlyingSettlMethodElectionDateOffsetPeriod(v))
}

// SetUnderlyingSettlMethodElectionDateOffsetUnit sets UnderlyingSettlMethodElectionDateOffsetUnit, Tag 43080.
func (m DerivativeSecurityListRequest) SetUnderlyingSettlMethodElectionDateOffsetUnit(v string) {
	m.Set(field.NewUnderlyingSettlMethodElectionDateOffsetUnit(v))
}

// SetUnderlyingSettlMethodElectionDateOffsetDayType sets UnderlyingSettlMethodElectionDateOffsetDayType, Tag 43081.
func (m DerivativeSecurityListRequest) SetUnderlyingSettlMethodElectionDateOffsetDayType(v int) {
	m.Set(field.NewUnderlyingSettlMethodElectionDateOffsetDayType(v))
}

// SetUnderlyingSettlMethodElectionDateAdjusted sets UnderlyingSettlMethodElectionDateAdjusted, Tag 43082.
func (m DerivativeSecurityListRequest) SetUnderlyingSettlMethodElectionDateAdjusted(v string) {
	m.Set(field.NewUnderlyingSettlMethodElectionDateAdjusted(v))
}

// GetCurrency gets Currency, Tag 15.
func (m DerivativeSecurityListRequest) GetCurrency() (v string, err quickfix.MessageRejectError) {
	var f field.CurrencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetText gets Text, Tag 58.
func (m DerivativeSecurityListRequest) GetText() (v string, err quickfix.MessageRejectError) {
	var f field.TextField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingCouponPaymentDate gets UnderlyingCouponPaymentDate, Tag 241.
func (m DerivativeSecurityListRequest) GetUnderlyingCouponPaymentDate() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingCouponPaymentDateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingIssueDate gets UnderlyingIssueDate, Tag 242.
func (m DerivativeSecurityListRequest) GetUnderlyingIssueDate() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingIssueDateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingRepoCollateralSecurityType gets UnderlyingRepoCollateralSecurityType, Tag 243.
func (m DerivativeSecurityListRequest) GetUnderlyingRepoCollateralSecurityType() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingRepoCollateralSecurityTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingRepurchaseTerm gets UnderlyingRepurchaseTerm, Tag 244.
func (m DerivativeSecurityListRequest) GetUnderlyingRepurchaseTerm() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingRepurchaseTermField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingRepurchaseRate gets UnderlyingRepurchaseRate, Tag 245.
func (m DerivativeSecurityListRequest) GetUnderlyingRepurchaseRate() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingRepurchaseRateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingFactor gets UnderlyingFactor, Tag 246.
func (m DerivativeSecurityListRequest) GetUnderlyingFactor() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingFactorField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingRedemptionDate gets UnderlyingRedemptionDate, Tag 247.
func (m DerivativeSecurityListRequest) GetUnderlyingRedemptionDate() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingRedemptionDateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingCreditRating gets UnderlyingCreditRating, Tag 256.
func (m DerivativeSecurityListRequest) GetUnderlyingCreditRating() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingCreditRatingField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetSubscriptionRequestType gets SubscriptionRequestType, Tag 263.
func (m DerivativeSecurityListRequest) GetSubscriptionRequestType() (v enum.SubscriptionRequestType, err quickfix.MessageRejectError) {
	var f field.SubscriptionRequestTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingSecurityIDSource gets UnderlyingSecurityIDSource, Tag 305.
func (m DerivativeSecurityListRequest) GetUnderlyingSecurityIDSource() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingSecurityIDSourceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingIssuer gets UnderlyingIssuer, Tag 306.
func (m DerivativeSecurityListRequest) GetUnderlyingIssuer() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingIssuerField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingSecurityDesc gets UnderlyingSecurityDesc, Tag 307.
func (m DerivativeSecurityListRequest) GetUnderlyingSecurityDesc() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingSecurityDescField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingSecurityExchange gets UnderlyingSecurityExchange, Tag 308.
func (m DerivativeSecurityListRequest) GetUnderlyingSecurityExchange() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingSecurityExchangeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingSecurityID gets UnderlyingSecurityID, Tag 309.
func (m DerivativeSecurityListRequest) GetUnderlyingSecurityID() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingSecurityIDField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingSecurityType gets UnderlyingSecurityType, Tag 310.
func (m DerivativeSecurityListRequest) GetUnderlyingSecurityType() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingSecurityTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingSymbol gets UnderlyingSymbol, Tag 311.
func (m DerivativeSecurityListRequest) GetUnderlyingSymbol() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingSymbolField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingSymbolSfx gets UnderlyingSymbolSfx, Tag 312.
func (m DerivativeSecurityListRequest) GetUnderlyingSymbolSfx() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingSymbolSfxField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingMaturityMonthYear gets UnderlyingMaturityMonthYear, Tag 313.
func (m DerivativeSecurityListRequest) GetUnderlyingMaturityMonthYear() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingMaturityMonthYearField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPutOrCall gets UnderlyingPutOrCall, Tag 315.
func (m DerivativeSecurityListRequest) GetUnderlyingPutOrCall() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPutOrCallField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStrikePrice gets UnderlyingStrikePrice, Tag 316.
func (m DerivativeSecurityListRequest) GetUnderlyingStrikePrice() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingStrikePriceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingOptAttribute gets UnderlyingOptAttribute, Tag 317.
func (m DerivativeSecurityListRequest) GetUnderlyingOptAttribute() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingOptAttributeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingCurrency gets UnderlyingCurrency, Tag 318.
func (m DerivativeSecurityListRequest) GetUnderlyingCurrency() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingCurrencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetSecurityReqID gets SecurityReqID, Tag 320.
func (m DerivativeSecurityListRequest) GetSecurityReqID() (v string, err quickfix.MessageRejectError) {
	var f field.SecurityReqIDField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetTradingSessionID gets TradingSessionID, Tag 336.
func (m DerivativeSecurityListRequest) GetTradingSessionID() (v enum.TradingSessionID, err quickfix.MessageRejectError) {
	var f field.TradingSessionIDField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetEncodedTextLen gets EncodedTextLen, Tag 354.
func (m DerivativeSecurityListRequest) GetEncodedTextLen() (v int, err quickfix.MessageRejectError) {
	var f field.EncodedTextLenField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetEncodedText gets EncodedText, Tag 355.
func (m DerivativeSecurityListRequest) GetEncodedText() (v string, err quickfix.MessageRejectError) {
	var f field.EncodedTextField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetEncodedUnderlyingIssuerLen gets EncodedUnderlyingIssuerLen, Tag 362.
func (m DerivativeSecurityListRequest) GetEncodedUnderlyingIssuerLen() (v int, err quickfix.MessageRejectError) {
	var f field.EncodedUnderlyingIssuerLenField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetEncodedUnderlyingIssuer gets EncodedUnderlyingIssuer, Tag 363.
func (m DerivativeSecurityListRequest) GetEncodedUnderlyingIssuer() (v string, err quickfix.MessageRejectError) {
	var f field.EncodedUnderlyingIssuerField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetEncodedUnderlyingSecurityDescLen gets EncodedUnderlyingSecurityDescLen, Tag 364.
func (m DerivativeSecurityListRequest) GetEncodedUnderlyingSecurityDescLen() (v int, err quickfix.MessageRejectError) {
	var f field.EncodedUnderlyingSecurityDescLenField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetEncodedUnderlyingSecurityDesc gets EncodedUnderlyingSecurityDesc, Tag 365.
func (m DerivativeSecurityListRequest) GetEncodedUnderlyingSecurityDesc() (v string, err quickfix.MessageRejectError) {
	var f field.EncodedUnderlyingSecurityDescField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingCouponRate gets UnderlyingCouponRate, Tag 435.
func (m DerivativeSecurityListRequest) GetUnderlyingCouponRate() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingCouponRateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingContractMultiplier gets UnderlyingContractMultiplier, Tag 436.
func (m DerivativeSecurityListRequest) GetUnderlyingContractMultiplier() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingContractMultiplierField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUnderlyingSecurityAltID gets NoUnderlyingSecurityAltID, Tag 457.
func (m DerivativeSecurityListRequest) GetNoUnderlyingSecurityAltID() (NoUnderlyingSecurityAltIDRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingSecurityAltIDRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetUnderlyingProduct gets UnderlyingProduct, Tag 462.
func (m DerivativeSecurityListRequest) GetUnderlyingProduct() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingProductField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingCFICode gets UnderlyingCFICode, Tag 463.
func (m DerivativeSecurityListRequest) GetUnderlyingCFICode() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingCFICodeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingMaturityDate gets UnderlyingMaturityDate, Tag 542.
func (m DerivativeSecurityListRequest) GetUnderlyingMaturityDate() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingMaturityDateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetSecurityListRequestType gets SecurityListRequestType, Tag 559.
func (m DerivativeSecurityListRequest) GetSecurityListRequestType() (v enum.SecurityListRequestType, err quickfix.MessageRejectError) {
	var f field.SecurityListRequestTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingCountryOfIssue gets UnderlyingCountryOfIssue, Tag 592.
func (m DerivativeSecurityListRequest) GetUnderlyingCountryOfIssue() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingCountryOfIssueField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStateOrProvinceOfIssue gets UnderlyingStateOrProvinceOfIssue, Tag 593.
func (m DerivativeSecurityListRequest) GetUnderlyingStateOrProvinceOfIssue() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingStateOrProvinceOfIssueField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingLocaleOfIssue gets UnderlyingLocaleOfIssue, Tag 594.
func (m DerivativeSecurityListRequest) GetUnderlyingLocaleOfIssue() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingLocaleOfIssueField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingInstrRegistry gets UnderlyingInstrRegistry, Tag 595.
func (m DerivativeSecurityListRequest) GetUnderlyingInstrRegistry() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingInstrRegistryField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetTradingSessionSubID gets TradingSessionSubID, Tag 625.
func (m DerivativeSecurityListRequest) GetTradingSessionSubID() (v enum.TradingSessionSubID, err quickfix.MessageRejectError) {
	var f field.TradingSessionSubIDField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetSecuritySubType gets SecuritySubType, Tag 762.
func (m DerivativeSecurityListRequest) GetSecuritySubType() (v string, err quickfix.MessageRejectError) {
	var f field.SecuritySubTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingSecuritySubType gets UnderlyingSecuritySubType, Tag 763.
func (m DerivativeSecurityListRequest) GetUnderlyingSecuritySubType() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingSecuritySubTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPx gets UnderlyingPx, Tag 810.
func (m DerivativeSecurityListRequest) GetUnderlyingPx() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingPxField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingCPProgram gets UnderlyingCPProgram, Tag 877.
func (m DerivativeSecurityListRequest) GetUnderlyingCPProgram() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingCPProgramField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingCPRegType gets UnderlyingCPRegType, Tag 878.
func (m DerivativeSecurityListRequest) GetUnderlyingCPRegType() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingCPRegTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingQty gets UnderlyingQty, Tag 879.
func (m DerivativeSecurityListRequest) GetUnderlyingQty() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingQtyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDirtyPrice gets UnderlyingDirtyPrice, Tag 882.
func (m DerivativeSecurityListRequest) GetUnderlyingDirtyPrice() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingDirtyPriceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingEndPrice gets UnderlyingEndPrice, Tag 883.
func (m DerivativeSecurityListRequest) GetUnderlyingEndPrice() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingEndPriceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStartValue gets UnderlyingStartValue, Tag 884.
func (m DerivativeSecurityListRequest) GetUnderlyingStartValue() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingStartValueField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingCurrentValue gets UnderlyingCurrentValue, Tag 885.
func (m DerivativeSecurityListRequest) GetUnderlyingCurrentValue() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingCurrentValueField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingEndValue gets UnderlyingEndValue, Tag 886.
func (m DerivativeSecurityListRequest) GetUnderlyingEndValue() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingEndValueField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUnderlyingStips gets NoUnderlyingStips, Tag 887.
func (m DerivativeSecurityListRequest) GetNoUnderlyingStips() (NoUnderlyingStipsRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingStipsRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetUnderlyingStrikeCurrency gets UnderlyingStrikeCurrency, Tag 941.
func (m DerivativeSecurityListRequest) GetUnderlyingStrikeCurrency() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingStrikeCurrencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingAllocationPercent gets UnderlyingAllocationPercent, Tag 972.
func (m DerivativeSecurityListRequest) GetUnderlyingAllocationPercent() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingAllocationPercentField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingCashAmount gets UnderlyingCashAmount, Tag 973.
func (m DerivativeSecurityListRequest) GetUnderlyingCashAmount() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingCashAmountField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingCashType gets UnderlyingCashType, Tag 974.
func (m DerivativeSecurityListRequest) GetUnderlyingCashType() (v enum.UnderlyingCashType, err quickfix.MessageRejectError) {
	var f field.UnderlyingCashTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingSettlementType gets UnderlyingSettlementType, Tag 975.
func (m DerivativeSecurityListRequest) GetUnderlyingSettlementType() (v enum.UnderlyingSettlementType, err quickfix.MessageRejectError) {
	var f field.UnderlyingSettlementTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingUnitOfMeasure gets UnderlyingUnitOfMeasure, Tag 998.
func (m DerivativeSecurityListRequest) GetUnderlyingUnitOfMeasure() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingUnitOfMeasureField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingTimeUnit gets UnderlyingTimeUnit, Tag 1000.
func (m DerivativeSecurityListRequest) GetUnderlyingTimeUnit() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingTimeUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingCapValue gets UnderlyingCapValue, Tag 1038.
func (m DerivativeSecurityListRequest) GetUnderlyingCapValue() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingCapValueField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingSettlMethod gets UnderlyingSettlMethod, Tag 1039.
func (m DerivativeSecurityListRequest) GetUnderlyingSettlMethod() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingSettlMethodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingAdjustedQuantity gets UnderlyingAdjustedQuantity, Tag 1044.
func (m DerivativeSecurityListRequest) GetUnderlyingAdjustedQuantity() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingAdjustedQuantityField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingFXRate gets UnderlyingFXRate, Tag 1045.
func (m DerivativeSecurityListRequest) GetUnderlyingFXRate() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingFXRateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingFXRateCalc gets UnderlyingFXRateCalc, Tag 1046.
func (m DerivativeSecurityListRequest) GetUnderlyingFXRateCalc() (v enum.UnderlyingFXRateCalc, err quickfix.MessageRejectError) {
	var f field.UnderlyingFXRateCalcField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUndlyInstrumentParties gets NoUndlyInstrumentParties, Tag 1058.
func (m DerivativeSecurityListRequest) GetNoUndlyInstrumentParties() (NoUndlyInstrumentPartiesRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUndlyInstrumentPartiesRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetUnderlyingMaturityTime gets UnderlyingMaturityTime, Tag 1213.
func (m DerivativeSecurityListRequest) GetUnderlyingMaturityTime() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingMaturityTimeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDerivativeSymbol gets DerivativeSymbol, Tag 1214.
func (m DerivativeSecurityListRequest) GetDerivativeSymbol() (v string, err quickfix.MessageRejectError) {
	var f field.DerivativeSymbolField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDerivativeSymbolSfx gets DerivativeSymbolSfx, Tag 1215.
func (m DerivativeSecurityListRequest) GetDerivativeSymbolSfx() (v string, err quickfix.MessageRejectError) {
	var f field.DerivativeSymbolSfxField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDerivativeSecurityID gets DerivativeSecurityID, Tag 1216.
func (m DerivativeSecurityListRequest) GetDerivativeSecurityID() (v string, err quickfix.MessageRejectError) {
	var f field.DerivativeSecurityIDField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDerivativeSecurityIDSource gets DerivativeSecurityIDSource, Tag 1217.
func (m DerivativeSecurityListRequest) GetDerivativeSecurityIDSource() (v string, err quickfix.MessageRejectError) {
	var f field.DerivativeSecurityIDSourceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoDerivativeSecurityAltID gets NoDerivativeSecurityAltID, Tag 1218.
func (m DerivativeSecurityListRequest) GetNoDerivativeSecurityAltID() (NoDerivativeSecurityAltIDRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoDerivativeSecurityAltIDRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetDerivativeOptPayAmount gets DerivativeOptPayAmount, Tag 1225.
func (m DerivativeSecurityListRequest) GetDerivativeOptPayAmount() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.DerivativeOptPayAmountField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDerivativeProductComplex gets DerivativeProductComplex, Tag 1228.
func (m DerivativeSecurityListRequest) GetDerivativeProductComplex() (v string, err quickfix.MessageRejectError) {
	var f field.DerivativeProductComplexField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDerivFlexProductEligibilityIndicator gets DerivFlexProductEligibilityIndicator, Tag 1243.
func (m DerivativeSecurityListRequest) GetDerivFlexProductEligibilityIndicator() (v bool, err quickfix.MessageRejectError) {
	var f field.DerivFlexProductEligibilityIndicatorField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDerivativeProduct gets DerivativeProduct, Tag 1246.
func (m DerivativeSecurityListRequest) GetDerivativeProduct() (v int, err quickfix.MessageRejectError) {
	var f field.DerivativeProductField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDerivativeSecurityGroup gets DerivativeSecurityGroup, Tag 1247.
func (m DerivativeSecurityListRequest) GetDerivativeSecurityGroup() (v string, err quickfix.MessageRejectError) {
	var f field.DerivativeSecurityGroupField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDerivativeCFICode gets DerivativeCFICode, Tag 1248.
func (m DerivativeSecurityListRequest) GetDerivativeCFICode() (v string, err quickfix.MessageRejectError) {
	var f field.DerivativeCFICodeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDerivativeSecurityType gets DerivativeSecurityType, Tag 1249.
func (m DerivativeSecurityListRequest) GetDerivativeSecurityType() (v string, err quickfix.MessageRejectError) {
	var f field.DerivativeSecurityTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDerivativeSecuritySubType gets DerivativeSecuritySubType, Tag 1250.
func (m DerivativeSecurityListRequest) GetDerivativeSecuritySubType() (v string, err quickfix.MessageRejectError) {
	var f field.DerivativeSecuritySubTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDerivativeMaturityMonthYear gets DerivativeMaturityMonthYear, Tag 1251.
func (m DerivativeSecurityListRequest) GetDerivativeMaturityMonthYear() (v string, err quickfix.MessageRejectError) {
	var f field.DerivativeMaturityMonthYearField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDerivativeMaturityDate gets DerivativeMaturityDate, Tag 1252.
func (m DerivativeSecurityListRequest) GetDerivativeMaturityDate() (v string, err quickfix.MessageRejectError) {
	var f field.DerivativeMaturityDateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDerivativeMaturityTime gets DerivativeMaturityTime, Tag 1253.
func (m DerivativeSecurityListRequest) GetDerivativeMaturityTime() (v string, err quickfix.MessageRejectError) {
	var f field.DerivativeMaturityTimeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDerivativeSettleOnOpenFlag gets DerivativeSettleOnOpenFlag, Tag 1254.
func (m DerivativeSecurityListRequest) GetDerivativeSettleOnOpenFlag() (v string, err quickfix.MessageRejectError) {
	var f field.DerivativeSettleOnOpenFlagField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDerivativeInstrmtAssignmentMethod gets DerivativeInstrmtAssignmentMethod, Tag 1255.
func (m DerivativeSecurityListRequest) GetDerivativeInstrmtAssignmentMethod() (v string, err quickfix.MessageRejectError) {
	var f field.DerivativeInstrmtAssignmentMethodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDerivativeSecurityStatus gets DerivativeSecurityStatus, Tag 1256.
func (m DerivativeSecurityListRequest) GetDerivativeSecurityStatus() (v string, err quickfix.MessageRejectError) {
	var f field.DerivativeSecurityStatusField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDerivativeInstrRegistry gets DerivativeInstrRegistry, Tag 1257.
func (m DerivativeSecurityListRequest) GetDerivativeInstrRegistry() (v string, err quickfix.MessageRejectError) {
	var f field.DerivativeInstrRegistryField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDerivativeCountryOfIssue gets DerivativeCountryOfIssue, Tag 1258.
func (m DerivativeSecurityListRequest) GetDerivativeCountryOfIssue() (v string, err quickfix.MessageRejectError) {
	var f field.DerivativeCountryOfIssueField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDerivativeStateOrProvinceOfIssue gets DerivativeStateOrProvinceOfIssue, Tag 1259.
func (m DerivativeSecurityListRequest) GetDerivativeStateOrProvinceOfIssue() (v string, err quickfix.MessageRejectError) {
	var f field.DerivativeStateOrProvinceOfIssueField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDerivativeLocaleOfIssue gets DerivativeLocaleOfIssue, Tag 1260.
func (m DerivativeSecurityListRequest) GetDerivativeLocaleOfIssue() (v string, err quickfix.MessageRejectError) {
	var f field.DerivativeLocaleOfIssueField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDerivativeStrikePrice gets DerivativeStrikePrice, Tag 1261.
func (m DerivativeSecurityListRequest) GetDerivativeStrikePrice() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.DerivativeStrikePriceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDerivativeStrikeCurrency gets DerivativeStrikeCurrency, Tag 1262.
func (m DerivativeSecurityListRequest) GetDerivativeStrikeCurrency() (v string, err quickfix.MessageRejectError) {
	var f field.DerivativeStrikeCurrencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDerivativeStrikeMultiplier gets DerivativeStrikeMultiplier, Tag 1263.
func (m DerivativeSecurityListRequest) GetDerivativeStrikeMultiplier() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.DerivativeStrikeMultiplierField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDerivativeStrikeValue gets DerivativeStrikeValue, Tag 1264.
func (m DerivativeSecurityListRequest) GetDerivativeStrikeValue() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.DerivativeStrikeValueField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDerivativeOptAttribute gets DerivativeOptAttribute, Tag 1265.
func (m DerivativeSecurityListRequest) GetDerivativeOptAttribute() (v string, err quickfix.MessageRejectError) {
	var f field.DerivativeOptAttributeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDerivativeContractMultiplier gets DerivativeContractMultiplier, Tag 1266.
func (m DerivativeSecurityListRequest) GetDerivativeContractMultiplier() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.DerivativeContractMultiplierField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDerivativeMinPriceIncrement gets DerivativeMinPriceIncrement, Tag 1267.
func (m DerivativeSecurityListRequest) GetDerivativeMinPriceIncrement() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.DerivativeMinPriceIncrementField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDerivativeMinPriceIncrementAmount gets DerivativeMinPriceIncrementAmount, Tag 1268.
func (m DerivativeSecurityListRequest) GetDerivativeMinPriceIncrementAmount() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.DerivativeMinPriceIncrementAmountField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDerivativeUnitOfMeasure gets DerivativeUnitOfMeasure, Tag 1269.
func (m DerivativeSecurityListRequest) GetDerivativeUnitOfMeasure() (v string, err quickfix.MessageRejectError) {
	var f field.DerivativeUnitOfMeasureField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDerivativeUnitOfMeasureQty gets DerivativeUnitOfMeasureQty, Tag 1270.
func (m DerivativeSecurityListRequest) GetDerivativeUnitOfMeasureQty() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.DerivativeUnitOfMeasureQtyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDerivativeTimeUnit gets DerivativeTimeUnit, Tag 1271.
func (m DerivativeSecurityListRequest) GetDerivativeTimeUnit() (v string, err quickfix.MessageRejectError) {
	var f field.DerivativeTimeUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDerivativeSecurityExchange gets DerivativeSecurityExchange, Tag 1272.
func (m DerivativeSecurityListRequest) GetDerivativeSecurityExchange() (v string, err quickfix.MessageRejectError) {
	var f field.DerivativeSecurityExchangeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDerivativePositionLimit gets DerivativePositionLimit, Tag 1273.
func (m DerivativeSecurityListRequest) GetDerivativePositionLimit() (v int, err quickfix.MessageRejectError) {
	var f field.DerivativePositionLimitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDerivativeNTPositionLimit gets DerivativeNTPositionLimit, Tag 1274.
func (m DerivativeSecurityListRequest) GetDerivativeNTPositionLimit() (v int, err quickfix.MessageRejectError) {
	var f field.DerivativeNTPositionLimitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDerivativeIssuer gets DerivativeIssuer, Tag 1275.
func (m DerivativeSecurityListRequest) GetDerivativeIssuer() (v string, err quickfix.MessageRejectError) {
	var f field.DerivativeIssuerField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDerivativeIssueDate gets DerivativeIssueDate, Tag 1276.
func (m DerivativeSecurityListRequest) GetDerivativeIssueDate() (v string, err quickfix.MessageRejectError) {
	var f field.DerivativeIssueDateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDerivativeEncodedIssuerLen gets DerivativeEncodedIssuerLen, Tag 1277.
func (m DerivativeSecurityListRequest) GetDerivativeEncodedIssuerLen() (v int, err quickfix.MessageRejectError) {
	var f field.DerivativeEncodedIssuerLenField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDerivativeEncodedIssuer gets DerivativeEncodedIssuer, Tag 1278.
func (m DerivativeSecurityListRequest) GetDerivativeEncodedIssuer() (v string, err quickfix.MessageRejectError) {
	var f field.DerivativeEncodedIssuerField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDerivativeSecurityDesc gets DerivativeSecurityDesc, Tag 1279.
func (m DerivativeSecurityListRequest) GetDerivativeSecurityDesc() (v string, err quickfix.MessageRejectError) {
	var f field.DerivativeSecurityDescField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDerivativeEncodedSecurityDescLen gets DerivativeEncodedSecurityDescLen, Tag 1280.
func (m DerivativeSecurityListRequest) GetDerivativeEncodedSecurityDescLen() (v int, err quickfix.MessageRejectError) {
	var f field.DerivativeEncodedSecurityDescLenField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDerivativeEncodedSecurityDesc gets DerivativeEncodedSecurityDesc, Tag 1281.
func (m DerivativeSecurityListRequest) GetDerivativeEncodedSecurityDesc() (v string, err quickfix.MessageRejectError) {
	var f field.DerivativeEncodedSecurityDescField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDerivativeSecurityXMLLen gets DerivativeSecurityXMLLen, Tag 1282.
func (m DerivativeSecurityListRequest) GetDerivativeSecurityXMLLen() (v int, err quickfix.MessageRejectError) {
	var f field.DerivativeSecurityXMLLenField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDerivativeSecurityXML gets DerivativeSecurityXML, Tag 1283.
func (m DerivativeSecurityListRequest) GetDerivativeSecurityXML() (v string, err quickfix.MessageRejectError) {
	var f field.DerivativeSecurityXMLField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDerivativeSecurityXMLSchema gets DerivativeSecurityXMLSchema, Tag 1284.
func (m DerivativeSecurityListRequest) GetDerivativeSecurityXMLSchema() (v string, err quickfix.MessageRejectError) {
	var f field.DerivativeSecurityXMLSchemaField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDerivativeContractSettlMonth gets DerivativeContractSettlMonth, Tag 1285.
func (m DerivativeSecurityListRequest) GetDerivativeContractSettlMonth() (v string, err quickfix.MessageRejectError) {
	var f field.DerivativeContractSettlMonthField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoDerivativeEvents gets NoDerivativeEvents, Tag 1286.
func (m DerivativeSecurityListRequest) GetNoDerivativeEvents() (NoDerivativeEventsRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoDerivativeEventsRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetNoDerivativeInstrumentParties gets NoDerivativeInstrumentParties, Tag 1292.
func (m DerivativeSecurityListRequest) GetNoDerivativeInstrumentParties() (NoDerivativeInstrumentPartiesRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoDerivativeInstrumentPartiesRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetDerivativeExerciseStyle gets DerivativeExerciseStyle, Tag 1299.
func (m DerivativeSecurityListRequest) GetDerivativeExerciseStyle() (v int, err quickfix.MessageRejectError) {
	var f field.DerivativeExerciseStyleField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetMarketSegmentID gets MarketSegmentID, Tag 1300.
func (m DerivativeSecurityListRequest) GetMarketSegmentID() (v string, err quickfix.MessageRejectError) {
	var f field.MarketSegmentIDField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetMarketID gets MarketID, Tag 1301.
func (m DerivativeSecurityListRequest) GetMarketID() (v string, err quickfix.MessageRejectError) {
	var f field.MarketIDField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDerivativePriceUnitOfMeasure gets DerivativePriceUnitOfMeasure, Tag 1315.
func (m DerivativeSecurityListRequest) GetDerivativePriceUnitOfMeasure() (v string, err quickfix.MessageRejectError) {
	var f field.DerivativePriceUnitOfMeasureField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDerivativePriceUnitOfMeasureQty gets DerivativePriceUnitOfMeasureQty, Tag 1316.
func (m DerivativeSecurityListRequest) GetDerivativePriceUnitOfMeasureQty() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.DerivativePriceUnitOfMeasureQtyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDerivativeSettlMethod gets DerivativeSettlMethod, Tag 1317.
func (m DerivativeSecurityListRequest) GetDerivativeSettlMethod() (v string, err quickfix.MessageRejectError) {
	var f field.DerivativeSettlMethodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDerivativePriceQuoteMethod gets DerivativePriceQuoteMethod, Tag 1318.
func (m DerivativeSecurityListRequest) GetDerivativePriceQuoteMethod() (v string, err quickfix.MessageRejectError) {
	var f field.DerivativePriceQuoteMethodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDerivativeValuationMethod gets DerivativeValuationMethod, Tag 1319.
func (m DerivativeSecurityListRequest) GetDerivativeValuationMethod() (v string, err quickfix.MessageRejectError) {
	var f field.DerivativeValuationMethodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDerivativeListMethod gets DerivativeListMethod, Tag 1320.
func (m DerivativeSecurityListRequest) GetDerivativeListMethod() (v int, err quickfix.MessageRejectError) {
	var f field.DerivativeListMethodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDerivativeCapPrice gets DerivativeCapPrice, Tag 1321.
func (m DerivativeSecurityListRequest) GetDerivativeCapPrice() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.DerivativeCapPriceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDerivativeFloorPrice gets DerivativeFloorPrice, Tag 1322.
func (m DerivativeSecurityListRequest) GetDerivativeFloorPrice() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.DerivativeFloorPriceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDerivativePutOrCall gets DerivativePutOrCall, Tag 1323.
func (m DerivativeSecurityListRequest) GetDerivativePutOrCall() (v int, err quickfix.MessageRejectError) {
	var f field.DerivativePutOrCallField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingExerciseStyle gets UnderlyingExerciseStyle, Tag 1419.
func (m DerivativeSecurityListRequest) GetUnderlyingExerciseStyle() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingExerciseStyleField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingUnitOfMeasureQty gets UnderlyingUnitOfMeasureQty, Tag 1423.
func (m DerivativeSecurityListRequest) GetUnderlyingUnitOfMeasureQty() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingUnitOfMeasureQtyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPriceUnitOfMeasure gets UnderlyingPriceUnitOfMeasure, Tag 1424.
func (m DerivativeSecurityListRequest) GetUnderlyingPriceUnitOfMeasure() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPriceUnitOfMeasureField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPriceUnitOfMeasureQty gets UnderlyingPriceUnitOfMeasureQty, Tag 1425.
func (m DerivativeSecurityListRequest) GetUnderlyingPriceUnitOfMeasureQty() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingPriceUnitOfMeasureQtyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingContractMultiplierUnit gets UnderlyingContractMultiplierUnit, Tag 1437.
func (m DerivativeSecurityListRequest) GetUnderlyingContractMultiplierUnit() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingContractMultiplierUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDerivativeContractMultiplierUnit gets DerivativeContractMultiplierUnit, Tag 1438.
func (m DerivativeSecurityListRequest) GetDerivativeContractMultiplierUnit() (v int, err quickfix.MessageRejectError) {
	var f field.DerivativeContractMultiplierUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingFlowScheduleType gets UnderlyingFlowScheduleType, Tag 1441.
func (m DerivativeSecurityListRequest) GetUnderlyingFlowScheduleType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingFlowScheduleTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDerivativeFlowScheduleType gets DerivativeFlowScheduleType, Tag 1442.
func (m DerivativeSecurityListRequest) GetDerivativeFlowScheduleType() (v int, err quickfix.MessageRejectError) {
	var f field.DerivativeFlowScheduleTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingRestructuringType gets UnderlyingRestructuringType, Tag 1453.
func (m DerivativeSecurityListRequest) GetUnderlyingRestructuringType() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingRestructuringTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingSeniority gets UnderlyingSeniority, Tag 1454.
func (m DerivativeSecurityListRequest) GetUnderlyingSeniority() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingSeniorityField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingNotionalPercentageOutstanding gets UnderlyingNotionalPercentageOutstanding, Tag 1455.
func (m DerivativeSecurityListRequest) GetUnderlyingNotionalPercentageOutstanding() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingNotionalPercentageOutstandingField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingOriginalNotionalPercentageOutstanding gets UnderlyingOriginalNotionalPercentageOutstanding, Tag 1456.
func (m DerivativeSecurityListRequest) GetUnderlyingOriginalNotionalPercentageOutstanding() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingOriginalNotionalPercentageOutstandingField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingAttachmentPoint gets UnderlyingAttachmentPoint, Tag 1459.
func (m DerivativeSecurityListRequest) GetUnderlyingAttachmentPoint() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingAttachmentPointField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDetachmentPoint gets UnderlyingDetachmentPoint, Tag 1460.
func (m DerivativeSecurityListRequest) GetUnderlyingDetachmentPoint() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingDetachmentPointField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPriceQuoteCurrency gets UnderlyingPriceQuoteCurrency, Tag 1526.
func (m DerivativeSecurityListRequest) GetUnderlyingPriceQuoteCurrency() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPriceQuoteCurrencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDerivativePriceQuoteCurrency gets DerivativePriceQuoteCurrency, Tag 1576.
func (m DerivativeSecurityListRequest) GetDerivativePriceQuoteCurrency() (v string, err quickfix.MessageRejectError) {
	var f field.DerivativePriceQuoteCurrencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingUnitOfMeasureCurrency gets UnderlyingUnitOfMeasureCurrency, Tag 1718.
func (m DerivativeSecurityListRequest) GetUnderlyingUnitOfMeasureCurrency() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingUnitOfMeasureCurrencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPriceUnitOfMeasureCurrency gets UnderlyingPriceUnitOfMeasureCurrency, Tag 1719.
func (m DerivativeSecurityListRequest) GetUnderlyingPriceUnitOfMeasureCurrency() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPriceUnitOfMeasureCurrencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDerivativeUnitOfMeasureCurrency gets DerivativeUnitOfMeasureCurrency, Tag 1722.
func (m DerivativeSecurityListRequest) GetDerivativeUnitOfMeasureCurrency() (v string, err quickfix.MessageRejectError) {
	var f field.DerivativeUnitOfMeasureCurrencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDerivativePriceUnitOfMeasureCurrency gets DerivativePriceUnitOfMeasureCurrency, Tag 1723.
func (m DerivativeSecurityListRequest) GetDerivativePriceUnitOfMeasureCurrency() (v string, err quickfix.MessageRejectError) {
	var f field.DerivativePriceUnitOfMeasureCurrencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingContractPriceRefMonth gets UnderlyingContractPriceRefMonth, Tag 1837.
func (m DerivativeSecurityListRequest) GetUnderlyingContractPriceRefMonth() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingContractPriceRefMonthField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingSecurityXMLLen gets UnderlyingSecurityXMLLen, Tag 1874.
func (m DerivativeSecurityListRequest) GetUnderlyingSecurityXMLLen() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingSecurityXMLLenField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingSecurityXML gets UnderlyingSecurityXML, Tag 1875.
func (m DerivativeSecurityListRequest) GetUnderlyingSecurityXML() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingSecurityXMLField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingSecurityXMLSchema gets UnderlyingSecurityXMLSchema, Tag 1876.
func (m DerivativeSecurityListRequest) GetUnderlyingSecurityXMLSchema() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingSecurityXMLSchemaField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUnderlyingEvents gets NoUnderlyingEvents, Tag 1981.
func (m DerivativeSecurityListRequest) GetNoUnderlyingEvents() (NoUnderlyingEventsRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingEventsRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetUnderlyingConstituentWeight gets UnderlyingConstituentWeight, Tag 1988.
func (m DerivativeSecurityListRequest) GetUnderlyingConstituentWeight() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingConstituentWeightField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingCouponType gets UnderlyingCouponType, Tag 1989.
func (m DerivativeSecurityListRequest) GetUnderlyingCouponType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingCouponTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingTotalIssuedAmount gets UnderlyingTotalIssuedAmount, Tag 1990.
func (m DerivativeSecurityListRequest) GetUnderlyingTotalIssuedAmount() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingTotalIssuedAmountField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingCouponFrequencyPeriod gets UnderlyingCouponFrequencyPeriod, Tag 1991.
func (m DerivativeSecurityListRequest) GetUnderlyingCouponFrequencyPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingCouponFrequencyPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingCouponFrequencyUnit gets UnderlyingCouponFrequencyUnit, Tag 1992.
func (m DerivativeSecurityListRequest) GetUnderlyingCouponFrequencyUnit() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingCouponFrequencyUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingCouponDayCount gets UnderlyingCouponDayCount, Tag 1993.
func (m DerivativeSecurityListRequest) GetUnderlyingCouponDayCount() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingCouponDayCountField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingObligationID gets UnderlyingObligationID, Tag 1994.
func (m DerivativeSecurityListRequest) GetUnderlyingObligationID() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingObligationIDField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingObligationIDSource gets UnderlyingObligationIDSource, Tag 1995.
func (m DerivativeSecurityListRequest) GetUnderlyingObligationIDSource() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingObligationIDSourceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingEquityID gets UnderlyingEquityID, Tag 1996.
func (m DerivativeSecurityListRequest) GetUnderlyingEquityID() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingEquityIDField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingEquityIDSource gets UnderlyingEquityIDSource, Tag 1997.
func (m DerivativeSecurityListRequest) GetUnderlyingEquityIDSource() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingEquityIDSourceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingLienSeniority gets UnderlyingLienSeniority, Tag 1998.
func (m DerivativeSecurityListRequest) GetUnderlyingLienSeniority() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingLienSeniorityField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingLoanFacility gets UnderlyingLoanFacility, Tag 1999.
func (m DerivativeSecurityListRequest) GetUnderlyingLoanFacility() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingLoanFacilityField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingReferenceEntityType gets UnderlyingReferenceEntityType, Tag 2000.
func (m DerivativeSecurityListRequest) GetUnderlyingReferenceEntityType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingReferenceEntityTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingIndexSeries gets UnderlyingIndexSeries, Tag 2003.
func (m DerivativeSecurityListRequest) GetUnderlyingIndexSeries() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingIndexSeriesField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingIndexAnnexVersion gets UnderlyingIndexAnnexVersion, Tag 2004.
func (m DerivativeSecurityListRequest) GetUnderlyingIndexAnnexVersion() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingIndexAnnexVersionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingIndexAnnexDate gets UnderlyingIndexAnnexDate, Tag 2005.
func (m DerivativeSecurityListRequest) GetUnderlyingIndexAnnexDate() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingIndexAnnexDateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingIndexAnnexSource gets UnderlyingIndexAnnexSource, Tag 2006.
func (m DerivativeSecurityListRequest) GetUnderlyingIndexAnnexSource() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingIndexAnnexSourceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProductComplex gets UnderlyingProductComplex, Tag 2007.
func (m DerivativeSecurityListRequest) GetUnderlyingProductComplex() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingProductComplexField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingSecurityGroup gets UnderlyingSecurityGroup, Tag 2008.
func (m DerivativeSecurityListRequest) GetUnderlyingSecurityGroup() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingSecurityGroupField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingSettleOnOpenFlag gets UnderlyingSettleOnOpenFlag, Tag 2009.
func (m DerivativeSecurityListRequest) GetUnderlyingSettleOnOpenFlag() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingSettleOnOpenFlagField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingAssignmentMethod gets UnderlyingAssignmentMethod, Tag 2010.
func (m DerivativeSecurityListRequest) GetUnderlyingAssignmentMethod() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingAssignmentMethodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingSecurityStatus gets UnderlyingSecurityStatus, Tag 2011.
func (m DerivativeSecurityListRequest) GetUnderlyingSecurityStatus() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingSecurityStatusField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingObligationType gets UnderlyingObligationType, Tag 2012.
func (m DerivativeSecurityListRequest) GetUnderlyingObligationType() (v enum.UnderlyingObligationType, err quickfix.MessageRejectError) {
	var f field.UnderlyingObligationTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingAssetClass gets UnderlyingAssetClass, Tag 2013.
func (m DerivativeSecurityListRequest) GetUnderlyingAssetClass() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingAssetClassField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingAssetSubClass gets UnderlyingAssetSubClass, Tag 2014.
func (m DerivativeSecurityListRequest) GetUnderlyingAssetSubClass() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingAssetSubClassField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingAssetType gets UnderlyingAssetType, Tag 2015.
func (m DerivativeSecurityListRequest) GetUnderlyingAssetType() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingAssetTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingSwapClass gets UnderlyingSwapClass, Tag 2016.
func (m DerivativeSecurityListRequest) GetUnderlyingSwapClass() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingSwapClassField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingNthToDefault gets UnderlyingNthToDefault, Tag 2017.
func (m DerivativeSecurityListRequest) GetUnderlyingNthToDefault() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingNthToDefaultField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingMthToDefault gets UnderlyingMthToDefault, Tag 2018.
func (m DerivativeSecurityListRequest) GetUnderlyingMthToDefault() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingMthToDefaultField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingSettledEntityMatrixSource gets UnderlyingSettledEntityMatrixSource, Tag 2019.
func (m DerivativeSecurityListRequest) GetUnderlyingSettledEntityMatrixSource() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingSettledEntityMatrixSourceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingSettledEntityMatrixPublicationDate gets UnderlyingSettledEntityMatrixPublicationDate, Tag 2020.
func (m DerivativeSecurityListRequest) GetUnderlyingSettledEntityMatrixPublicationDate() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingSettledEntityMatrixPublicationDateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStrikeMultiplier gets UnderlyingStrikeMultiplier, Tag 2021.
func (m DerivativeSecurityListRequest) GetUnderlyingStrikeMultiplier() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingStrikeMultiplierField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStrikeValue gets UnderlyingStrikeValue, Tag 2022.
func (m DerivativeSecurityListRequest) GetUnderlyingStrikeValue() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingStrikeValueField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStrikePriceDeterminationMethod gets UnderlyingStrikePriceDeterminationMethod, Tag 2023.
func (m DerivativeSecurityListRequest) GetUnderlyingStrikePriceDeterminationMethod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingStrikePriceDeterminationMethodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStrikePriceBoundaryMethod gets UnderlyingStrikePriceBoundaryMethod, Tag 2024.
func (m DerivativeSecurityListRequest) GetUnderlyingStrikePriceBoundaryMethod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingStrikePriceBoundaryMethodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStrikePriceBoundaryPrecision gets UnderlyingStrikePriceBoundaryPrecision, Tag 2025.
func (m DerivativeSecurityListRequest) GetUnderlyingStrikePriceBoundaryPrecision() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingStrikePriceBoundaryPrecisionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingMinPriceIncrement gets UnderlyingMinPriceIncrement, Tag 2026.
func (m DerivativeSecurityListRequest) GetUnderlyingMinPriceIncrement() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingMinPriceIncrementField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingMinPriceIncrementAmount gets UnderlyingMinPriceIncrementAmount, Tag 2027.
func (m DerivativeSecurityListRequest) GetUnderlyingMinPriceIncrementAmount() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingMinPriceIncrementAmountField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingOptPayoutType gets UnderlyingOptPayoutType, Tag 2028.
func (m DerivativeSecurityListRequest) GetUnderlyingOptPayoutType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingOptPayoutTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingOptPayoutAmount gets UnderlyingOptPayoutAmount, Tag 2029.
func (m DerivativeSecurityListRequest) GetUnderlyingOptPayoutAmount() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingOptPayoutAmountField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPriceQuoteMethod gets UnderlyingPriceQuoteMethod, Tag 2030.
func (m DerivativeSecurityListRequest) GetUnderlyingPriceQuoteMethod() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPriceQuoteMethodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingValuationMethod gets UnderlyingValuationMethod, Tag 2031.
func (m DerivativeSecurityListRequest) GetUnderlyingValuationMethod() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingValuationMethodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingListMethod gets UnderlyingListMethod, Tag 2032.
func (m DerivativeSecurityListRequest) GetUnderlyingListMethod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingListMethodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingCapPrice gets UnderlyingCapPrice, Tag 2033.
func (m DerivativeSecurityListRequest) GetUnderlyingCapPrice() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingCapPriceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingFloorPrice gets UnderlyingFloorPrice, Tag 2034.
func (m DerivativeSecurityListRequest) GetUnderlyingFloorPrice() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingFloorPriceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingFlexibleIndicator gets UnderlyingFlexibleIndicator, Tag 2035.
func (m DerivativeSecurityListRequest) GetUnderlyingFlexibleIndicator() (v bool, err quickfix.MessageRejectError) {
	var f field.UnderlyingFlexibleIndicatorField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingFlexProductEligibilityIndicator gets UnderlyingFlexProductEligibilityIndicator, Tag 2036.
func (m DerivativeSecurityListRequest) GetUnderlyingFlexProductEligibilityIndicator() (v bool, err quickfix.MessageRejectError) {
	var f field.UnderlyingFlexProductEligibilityIndicatorField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPositionLimit gets UnderlyingPositionLimit, Tag 2037.
func (m DerivativeSecurityListRequest) GetUnderlyingPositionLimit() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPositionLimitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingNTPositionLimit gets UnderlyingNTPositionLimit, Tag 2038.
func (m DerivativeSecurityListRequest) GetUnderlyingNTPositionLimit() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingNTPositionLimitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPool gets UnderlyingPool, Tag 2039.
func (m DerivativeSecurityListRequest) GetUnderlyingPool() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPoolField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingContractSettlMonth gets UnderlyingContractSettlMonth, Tag 2040.
func (m DerivativeSecurityListRequest) GetUnderlyingContractSettlMonth() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingContractSettlMonthField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDatedDate gets UnderlyingDatedDate, Tag 2041.
func (m DerivativeSecurityListRequest) GetUnderlyingDatedDate() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingDatedDateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingInterestAccrualDate gets UnderlyingInterestAccrualDate, Tag 2042.
func (m DerivativeSecurityListRequest) GetUnderlyingInterestAccrualDate() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingInterestAccrualDateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingShortSaleRestriction gets UnderlyingShortSaleRestriction, Tag 2043.
func (m DerivativeSecurityListRequest) GetUnderlyingShortSaleRestriction() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingShortSaleRestrictionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingRefTickTableID gets UnderlyingRefTickTableID, Tag 2044.
func (m DerivativeSecurityListRequest) GetUnderlyingRefTickTableID() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingRefTickTableIDField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUnderlyingComplexEvents gets NoUnderlyingComplexEvents, Tag 2045.
func (m DerivativeSecurityListRequest) GetNoUnderlyingComplexEvents() (NoUnderlyingComplexEventsRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingComplexEventsRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetNoUnderlyingSecondaryAssetClasses gets NoUnderlyingSecondaryAssetClasses, Tag 2080.
func (m DerivativeSecurityListRequest) GetNoUnderlyingSecondaryAssetClasses() (NoUnderlyingSecondaryAssetClassesRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingSecondaryAssetClassesRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetUnderlyingSettlRateIndex gets UnderlyingSettlRateIndex, Tag 2284.
func (m DerivativeSecurityListRequest) GetUnderlyingSettlRateIndex() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingSettlRateIndexField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingSettlRateIndexLocation gets UnderlyingSettlRateIndexLocation, Tag 2285.
func (m DerivativeSecurityListRequest) GetUnderlyingSettlRateIndexLocation() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingSettlRateIndexLocationField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingOptionExpirationDesc gets UnderlyingOptionExpirationDesc, Tag 2286.
func (m DerivativeSecurityListRequest) GetUnderlyingOptionExpirationDesc() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingOptionExpirationDescField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetEncodedUnderlyingOptionExpirationDescLen gets EncodedUnderlyingOptionExpirationDescLen, Tag 2287.
func (m DerivativeSecurityListRequest) GetEncodedUnderlyingOptionExpirationDescLen() (v int, err quickfix.MessageRejectError) {
	var f field.EncodedUnderlyingOptionExpirationDescLenField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetEncodedUnderlyingOptionExpirationDesc gets EncodedUnderlyingOptionExpirationDesc, Tag 2288.
func (m DerivativeSecurityListRequest) GetEncodedUnderlyingOptionExpirationDesc() (v string, err quickfix.MessageRejectError) {
	var f field.EncodedUnderlyingOptionExpirationDescField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingSwapSubClass gets UnderlyingSwapSubClass, Tag 2289.
func (m DerivativeSecurityListRequest) GetUnderlyingSwapSubClass() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingSwapSubClassField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStrikeUnitOfMeasure gets UnderlyingStrikeUnitOfMeasure, Tag 2290.
func (m DerivativeSecurityListRequest) GetUnderlyingStrikeUnitOfMeasure() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingStrikeUnitOfMeasureField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStrikeIndex gets UnderlyingStrikeIndex, Tag 2291.
func (m DerivativeSecurityListRequest) GetUnderlyingStrikeIndex() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingStrikeIndexField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStrikeIndexSpread gets UnderlyingStrikeIndexSpread, Tag 2292.
func (m DerivativeSecurityListRequest) GetUnderlyingStrikeIndexSpread() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingStrikeIndexSpreadField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingValuationSource gets UnderlyingValuationSource, Tag 2293.
func (m DerivativeSecurityListRequest) GetUnderlyingValuationSource() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingValuationSourceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingValuationReferenceModel gets UnderlyingValuationReferenceModel, Tag 2294.
func (m DerivativeSecurityListRequest) GetUnderlyingValuationReferenceModel() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingValuationReferenceModelField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStrategyType gets UnderlyingStrategyType, Tag 2295.
func (m DerivativeSecurityListRequest) GetUnderlyingStrategyType() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingStrategyTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingCommonPricingIndicator gets UnderlyingCommonPricingIndicator, Tag 2296.
func (m DerivativeSecurityListRequest) GetUnderlyingCommonPricingIndicator() (v bool, err quickfix.MessageRejectError) {
	var f field.UnderlyingCommonPricingIndicatorField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingSettlDisruptionProvision gets UnderlyingSettlDisruptionProvision, Tag 2297.
func (m DerivativeSecurityListRequest) GetUnderlyingSettlDisruptionProvision() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingSettlDisruptionProvisionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingInstrumentRoundingDirection gets UnderlyingInstrumentRoundingDirection, Tag 2298.
func (m DerivativeSecurityListRequest) GetUnderlyingInstrumentRoundingDirection() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingInstrumentRoundingDirectionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingInstrumentRoundingPrecision gets UnderlyingInstrumentRoundingPrecision, Tag 2299.
func (m DerivativeSecurityListRequest) GetUnderlyingInstrumentRoundingPrecision() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingInstrumentRoundingPrecisionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUnderlyingAssetAttributes gets NoUnderlyingAssetAttributes, Tag 2312.
func (m DerivativeSecurityListRequest) GetNoUnderlyingAssetAttributes() (NoUnderlyingAssetAttributesRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingAssetAttributesRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetUnderlyingTradingUnitPeriodMultiplier gets UnderlyingTradingUnitPeriodMultiplier, Tag 2363.
func (m DerivativeSecurityListRequest) GetUnderlyingTradingUnitPeriodMultiplier() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingTradingUnitPeriodMultiplierField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingAssetGroup gets UnderlyingAssetGroup, Tag 2491.
func (m DerivativeSecurityListRequest) GetUnderlyingAssetGroup() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingAssetGroupField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingNotional gets UnderlyingNotional, Tag 2614.
func (m DerivativeSecurityListRequest) GetUnderlyingNotional() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingNotionalField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingNotionalCurrency gets UnderlyingNotionalCurrency, Tag 2615.
func (m DerivativeSecurityListRequest) GetUnderlyingNotionalCurrency() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingNotionalCurrencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingNotionalDeterminationMethod gets UnderlyingNotionalDeterminationMethod, Tag 2616.
func (m DerivativeSecurityListRequest) GetUnderlyingNotionalDeterminationMethod() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingNotionalDeterminationMethodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingNotionalAdjustments gets UnderlyingNotionalAdjustments, Tag 2617.
func (m DerivativeSecurityListRequest) GetUnderlyingNotionalAdjustments() (v enum.UnderlyingNotionalAdjustments, err quickfix.MessageRejectError) {
	var f field.UnderlyingNotionalAdjustmentsField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingNotionalXIDRef gets UnderlyingNotionalXIDRef, Tag 2619.
func (m DerivativeSecurityListRequest) GetUnderlyingNotionalXIDRef() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingNotionalXIDRefField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingFutureID gets UnderlyingFutureID, Tag 2620.
func (m DerivativeSecurityListRequest) GetUnderlyingFutureID() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingFutureIDField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingFutureIDSource gets UnderlyingFutureIDSource, Tag 2621.
func (m DerivativeSecurityListRequest) GetUnderlyingFutureIDSource() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingFutureIDSourceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStrikeIndexCurvePoint gets UnderlyingStrikeIndexCurvePoint, Tag 2622.
func (m DerivativeSecurityListRequest) GetUnderlyingStrikeIndexCurvePoint() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingStrikeIndexCurvePointField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStrikeIndexQuote gets UnderlyingStrikeIndexQuote, Tag 2623.
func (m DerivativeSecurityListRequest) GetUnderlyingStrikeIndexQuote() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingStrikeIndexQuoteField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingExtraordinaryEventAdjustmentMethod gets UnderlyingExtraordinaryEventAdjustmentMethod, Tag 2624.
func (m DerivativeSecurityListRequest) GetUnderlyingExtraordinaryEventAdjustmentMethod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingExtraordinaryEventAdjustmentMethodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingExchangeLookAlike gets UnderlyingExchangeLookAlike, Tag 2625.
func (m DerivativeSecurityListRequest) GetUnderlyingExchangeLookAlike() (v bool, err quickfix.MessageRejectError) {
	var f field.UnderlyingExchangeLookAlikeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingAverageVolumeLimitationPercentage gets UnderlyingAverageVolumeLimitationPercentage, Tag 2626.
func (m DerivativeSecurityListRequest) GetUnderlyingAverageVolumeLimitationPercentage() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingAverageVolumeLimitationPercentageField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingAverageVolumeLimitationPeriodDays gets UnderlyingAverageVolumeLimitationPeriodDays, Tag 2627.
func (m DerivativeSecurityListRequest) GetUnderlyingAverageVolumeLimitationPeriodDays() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingAverageVolumeLimitationPeriodDaysField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDepositoryReceiptIndicator gets UnderlyingDepositoryReceiptIndicator, Tag 2628.
func (m DerivativeSecurityListRequest) GetUnderlyingDepositoryReceiptIndicator() (v bool, err quickfix.MessageRejectError) {
	var f field.UnderlyingDepositoryReceiptIndicatorField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingOpenUnits gets UnderlyingOpenUnits, Tag 2629.
func (m DerivativeSecurityListRequest) GetUnderlyingOpenUnits() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingOpenUnitsField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingBasketDivisor gets UnderlyingBasketDivisor, Tag 2630.
func (m DerivativeSecurityListRequest) GetUnderlyingBasketDivisor() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingBasketDivisorField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingInstrumentXID gets UnderlyingInstrumentXID, Tag 2631.
func (m DerivativeSecurityListRequest) GetUnderlyingInstrumentXID() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingInstrumentXIDField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingInTheMoneyCondition gets UnderlyingInTheMoneyCondition, Tag 2683.
func (m DerivativeSecurityListRequest) GetUnderlyingInTheMoneyCondition() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingInTheMoneyConditionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDerivativeInTheMoneyCondition gets DerivativeInTheMoneyCondition, Tag 2684.
func (m DerivativeSecurityListRequest) GetDerivativeInTheMoneyCondition() (v int, err quickfix.MessageRejectError) {
	var f field.DerivativeInTheMoneyConditionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingContraryInstructionEligibilityIndicator gets UnderlyingContraryInstructionEligibilityIndicator, Tag 2687.
func (m DerivativeSecurityListRequest) GetUnderlyingContraryInstructionEligibilityIndicator() (v bool, err quickfix.MessageRejectError) {
	var f field.UnderlyingContraryInstructionEligibilityIndicatorField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDerivativeContraryInstructionEligibilityIndicator gets DerivativeContraryInstructionEligibilityIndicator, Tag 2688.
func (m DerivativeSecurityListRequest) GetDerivativeContraryInstructionEligibilityIndicator() (v bool, err quickfix.MessageRejectError) {
	var f field.DerivativeContraryInstructionEligibilityIndicatorField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingFinancialInstrumentFullName gets UnderlyingFinancialInstrumentFullName, Tag 2720.
func (m DerivativeSecurityListRequest) GetUnderlyingFinancialInstrumentFullName() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingFinancialInstrumentFullNameField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetEncodedUnderlyingFinancialInstrumentFullNameLen gets EncodedUnderlyingFinancialInstrumentFullNameLen, Tag 2721.
func (m DerivativeSecurityListRequest) GetEncodedUnderlyingFinancialInstrumentFullNameLen() (v int, err quickfix.MessageRejectError) {
	var f field.EncodedUnderlyingFinancialInstrumentFullNameLenField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetEncodedUnderlyingFinancialInstrumentFullName gets EncodedUnderlyingFinancialInstrumentFullName, Tag 2722.
func (m DerivativeSecurityListRequest) GetEncodedUnderlyingFinancialInstrumentFullName() (v string, err quickfix.MessageRejectError) {
	var f field.EncodedUnderlyingFinancialInstrumentFullNameField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingIndexCurveUnit gets UnderlyingIndexCurveUnit, Tag 2723.
func (m DerivativeSecurityListRequest) GetUnderlyingIndexCurveUnit() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingIndexCurveUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingIndexCurvePeriod gets UnderlyingIndexCurvePeriod, Tag 2724.
func (m DerivativeSecurityListRequest) GetUnderlyingIndexCurvePeriod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingIndexCurvePeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingFinancialInstrumentShortName gets UnderlyingFinancialInstrumentShortName, Tag 2742.
func (m DerivativeSecurityListRequest) GetUnderlyingFinancialInstrumentShortName() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingFinancialInstrumentShortNameField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingAssetSubType gets UnderlyingAssetSubType, Tag 2744.
func (m DerivativeSecurityListRequest) GetUnderlyingAssetSubType() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingAssetSubTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDeliveryRouteOrCharter gets UnderlyingDeliveryRouteOrCharter, Tag 2756.
func (m DerivativeSecurityListRequest) GetUnderlyingDeliveryRouteOrCharter() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingDeliveryRouteOrCharterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingReturnTrigger gets UnderlyingReturnTrigger, Tag 2757.
func (m DerivativeSecurityListRequest) GetUnderlyingReturnTrigger() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingReturnTriggerField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingID gets UnderlyingID, Tag 2874.
func (m DerivativeSecurityListRequest) GetUnderlyingID() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingIDField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingCouponOtherDayCount gets UnderlyingCouponOtherDayCount, Tag 2881.
func (m DerivativeSecurityListRequest) GetUnderlyingCouponOtherDayCount() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingCouponOtherDayCountField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingAccruedInterestAmt gets UnderlyingAccruedInterestAmt, Tag 2885.
func (m DerivativeSecurityListRequest) GetUnderlyingAccruedInterestAmt() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingAccruedInterestAmtField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingNumDaysInterest gets UnderlyingNumDaysInterest, Tag 2886.
func (m DerivativeSecurityListRequest) GetUnderlyingNumDaysInterest() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingNumDaysInterestField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDerivativeUPICode gets DerivativeUPICode, Tag 2892.
func (m DerivativeSecurityListRequest) GetDerivativeUPICode() (v string, err quickfix.MessageRejectError) {
	var f field.DerivativeUPICodeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingUPICode gets UnderlyingUPICode, Tag 2894.
func (m DerivativeSecurityListRequest) GetUnderlyingUPICode() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingUPICodeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUnderlyingStreams gets NoUnderlyingStreams, Tag 40540.
func (m DerivativeSecurityListRequest) GetNoUnderlyingStreams() (NoUnderlyingStreamsRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingStreamsRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetNoUnderlyingBusinessCenters gets NoUnderlyingBusinessCenters, Tag 40962.
func (m DerivativeSecurityListRequest) GetNoUnderlyingBusinessCenters() (NoUnderlyingBusinessCentersRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingBusinessCentersRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetUnderlyingBusinessDayConvention gets UnderlyingBusinessDayConvention, Tag 40964.
func (m DerivativeSecurityListRequest) GetUnderlyingBusinessDayConvention() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingBusinessDayConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDateRollConvention gets UnderlyingDateRollConvention, Tag 40965.
func (m DerivativeSecurityListRequest) GetUnderlyingDateRollConvention() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingDateRollConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProtectionTermXIDRef gets UnderlyingProtectionTermXIDRef, Tag 41314.
func (m DerivativeSecurityListRequest) GetUnderlyingProtectionTermXIDRef() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingProtectionTermXIDRefField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingSettlTermXIDRef gets UnderlyingSettlTermXIDRef, Tag 41315.
func (m DerivativeSecurityListRequest) GetUnderlyingSettlTermXIDRef() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingSettlTermXIDRefField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingExerciseDesc gets UnderlyingExerciseDesc, Tag 41810.
func (m DerivativeSecurityListRequest) GetUnderlyingExerciseDesc() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingExerciseDescField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetEncodedUnderlyingExerciseDescLen gets EncodedUnderlyingExerciseDescLen, Tag 41811.
func (m DerivativeSecurityListRequest) GetEncodedUnderlyingExerciseDescLen() (v int, err quickfix.MessageRejectError) {
	var f field.EncodedUnderlyingExerciseDescLenField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetEncodedUnderlyingExerciseDesc gets EncodedUnderlyingExerciseDesc, Tag 41812.
func (m DerivativeSecurityListRequest) GetEncodedUnderlyingExerciseDesc() (v string, err quickfix.MessageRejectError) {
	var f field.EncodedUnderlyingExerciseDescField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingAutomaticExerciseIndicator gets UnderlyingAutomaticExerciseIndicator, Tag 41813.
func (m DerivativeSecurityListRequest) GetUnderlyingAutomaticExerciseIndicator() (v bool, err quickfix.MessageRejectError) {
	var f field.UnderlyingAutomaticExerciseIndicatorField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingAutomaticExerciseThresholdRate gets UnderlyingAutomaticExerciseThresholdRate, Tag 41814.
func (m DerivativeSecurityListRequest) GetUnderlyingAutomaticExerciseThresholdRate() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingAutomaticExerciseThresholdRateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingExerciseConfirmationMethod gets UnderlyingExerciseConfirmationMethod, Tag 41815.
func (m DerivativeSecurityListRequest) GetUnderlyingExerciseConfirmationMethod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingExerciseConfirmationMethodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingManualNoticeBusinessCenter gets UnderlyingManualNoticeBusinessCenter, Tag 41816.
func (m DerivativeSecurityListRequest) GetUnderlyingManualNoticeBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingManualNoticeBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingFallbackExerciseIndicator gets UnderlyingFallbackExerciseIndicator, Tag 41817.
func (m DerivativeSecurityListRequest) GetUnderlyingFallbackExerciseIndicator() (v bool, err quickfix.MessageRejectError) {
	var f field.UnderlyingFallbackExerciseIndicatorField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingLimitedRightToConfirmIndicator gets UnderlyingLimitedRightToConfirmIndicator, Tag 41818.
func (m DerivativeSecurityListRequest) GetUnderlyingLimitedRightToConfirmIndicator() (v bool, err quickfix.MessageRejectError) {
	var f field.UnderlyingLimitedRightToConfirmIndicatorField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingExerciseSplitTicketIndicator gets UnderlyingExerciseSplitTicketIndicator, Tag 41819.
func (m DerivativeSecurityListRequest) GetUnderlyingExerciseSplitTicketIndicator() (v bool, err quickfix.MessageRejectError) {
	var f field.UnderlyingExerciseSplitTicketIndicatorField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUnderlyingOptionExerciseBusinessCenters gets NoUnderlyingOptionExerciseBusinessCenters, Tag 41820.
func (m DerivativeSecurityListRequest) GetNoUnderlyingOptionExerciseBusinessCenters() (NoUnderlyingOptionExerciseBusinessCentersRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingOptionExerciseBusinessCentersRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetUnderlyingOptionExerciseBusinessDayConvention gets UnderlyingOptionExerciseBusinessDayConvention, Tag 41822.
func (m DerivativeSecurityListRequest) GetUnderlyingOptionExerciseBusinessDayConvention() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingOptionExerciseBusinessDayConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingOptionExerciseEarliestDateOffsetDayType gets UnderlyingOptionExerciseEarliestDateOffsetDayType, Tag 41823.
func (m DerivativeSecurityListRequest) GetUnderlyingOptionExerciseEarliestDateOffsetDayType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingOptionExerciseEarliestDateOffsetDayTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingOptionExerciseEarliestDateOffsetPeriod gets UnderlyingOptionExerciseEarliestDateOffsetPeriod, Tag 41824.
func (m DerivativeSecurityListRequest) GetUnderlyingOptionExerciseEarliestDateOffsetPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingOptionExerciseEarliestDateOffsetPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingOptionExerciseEarliestDateOffsetUnit gets UnderlyingOptionExerciseEarliestDateOffsetUnit, Tag 41825.
func (m DerivativeSecurityListRequest) GetUnderlyingOptionExerciseEarliestDateOffsetUnit() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingOptionExerciseEarliestDateOffsetUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingOptionExerciseFrequencyPeriod gets UnderlyingOptionExerciseFrequencyPeriod, Tag 41826.
func (m DerivativeSecurityListRequest) GetUnderlyingOptionExerciseFrequencyPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingOptionExerciseFrequencyPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingOptionExerciseFrequencyUnit gets UnderlyingOptionExerciseFrequencyUnit, Tag 41827.
func (m DerivativeSecurityListRequest) GetUnderlyingOptionExerciseFrequencyUnit() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingOptionExerciseFrequencyUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingOptionExerciseStartDateUnadjusted gets UnderlyingOptionExerciseStartDateUnadjusted, Tag 41828.
func (m DerivativeSecurityListRequest) GetUnderlyingOptionExerciseStartDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingOptionExerciseStartDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingOptionExerciseStartDateRelativeTo gets UnderlyingOptionExerciseStartDateRelativeTo, Tag 41829.
func (m DerivativeSecurityListRequest) GetUnderlyingOptionExerciseStartDateRelativeTo() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingOptionExerciseStartDateRelativeToField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingOptionExerciseStartDateOffsetPeriod gets UnderlyingOptionExerciseStartDateOffsetPeriod, Tag 41830.
func (m DerivativeSecurityListRequest) GetUnderlyingOptionExerciseStartDateOffsetPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingOptionExerciseStartDateOffsetPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingOptionExerciseStartDateOffsetUnit gets UnderlyingOptionExerciseStartDateOffsetUnit, Tag 41831.
func (m DerivativeSecurityListRequest) GetUnderlyingOptionExerciseStartDateOffsetUnit() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingOptionExerciseStartDateOffsetUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingOptionExerciseStartDateOffsetDayType gets UnderlyingOptionExerciseStartDateOffsetDayType, Tag 41832.
func (m DerivativeSecurityListRequest) GetUnderlyingOptionExerciseStartDateOffsetDayType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingOptionExerciseStartDateOffsetDayTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingOptionExerciseStartDateAdjusted gets UnderlyingOptionExerciseStartDateAdjusted, Tag 41833.
func (m DerivativeSecurityListRequest) GetUnderlyingOptionExerciseStartDateAdjusted() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingOptionExerciseStartDateAdjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingOptionExerciseSkip gets UnderlyingOptionExerciseSkip, Tag 41834.
func (m DerivativeSecurityListRequest) GetUnderlyingOptionExerciseSkip() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingOptionExerciseSkipField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingOptionExerciseNominationDeadline gets UnderlyingOptionExerciseNominationDeadline, Tag 41835.
func (m DerivativeSecurityListRequest) GetUnderlyingOptionExerciseNominationDeadline() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingOptionExerciseNominationDeadlineField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingOptionExerciseFirstDateUnadjusted gets UnderlyingOptionExerciseFirstDateUnadjusted, Tag 41836.
func (m DerivativeSecurityListRequest) GetUnderlyingOptionExerciseFirstDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingOptionExerciseFirstDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingOptionExerciseLastDateUnadjusted gets UnderlyingOptionExerciseLastDateUnadjusted, Tag 41837.
func (m DerivativeSecurityListRequest) GetUnderlyingOptionExerciseLastDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingOptionExerciseLastDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingOptionExerciseEarliestTime gets UnderlyingOptionExerciseEarliestTime, Tag 41838.
func (m DerivativeSecurityListRequest) GetUnderlyingOptionExerciseEarliestTime() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingOptionExerciseEarliestTimeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingOptionExerciseLatestTime gets UnderlyingOptionExerciseLatestTime, Tag 41839.
func (m DerivativeSecurityListRequest) GetUnderlyingOptionExerciseLatestTime() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingOptionExerciseLatestTimeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingOptionExerciseTimeBusinessCenter gets UnderlyingOptionExerciseTimeBusinessCenter, Tag 41840.
func (m DerivativeSecurityListRequest) GetUnderlyingOptionExerciseTimeBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingOptionExerciseTimeBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUnderlyingOptionExerciseDates gets NoUnderlyingOptionExerciseDates, Tag 41841.
func (m DerivativeSecurityListRequest) GetNoUnderlyingOptionExerciseDates() (NoUnderlyingOptionExerciseDatesRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingOptionExerciseDatesRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetNoUnderlyingOptionExerciseExpirationDateBusinessCenters gets NoUnderlyingOptionExerciseExpirationDateBusinessCenters, Tag 41844.
func (m DerivativeSecurityListRequest) GetNoUnderlyingOptionExerciseExpirationDateBusinessCenters() (NoUnderlyingOptionExerciseExpirationDateBusinessCentersRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingOptionExerciseExpirationDateBusinessCentersRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetUnderlyingOptionExerciseExpirationDateBusinessDayConvention gets UnderlyingOptionExerciseExpirationDateBusinessDayConvention, Tag 41846.
func (m DerivativeSecurityListRequest) GetUnderlyingOptionExerciseExpirationDateBusinessDayConvention() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingOptionExerciseExpirationDateBusinessDayConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingOptionExerciseExpirationDateRelativeTo gets UnderlyingOptionExerciseExpirationDateRelativeTo, Tag 41847.
func (m DerivativeSecurityListRequest) GetUnderlyingOptionExerciseExpirationDateRelativeTo() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingOptionExerciseExpirationDateRelativeToField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingOptionExerciseExpirationDateOffsetPeriod gets UnderlyingOptionExerciseExpirationDateOffsetPeriod, Tag 41848.
func (m DerivativeSecurityListRequest) GetUnderlyingOptionExerciseExpirationDateOffsetPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingOptionExerciseExpirationDateOffsetPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingOptionExerciseExpirationDateOffsetUnit gets UnderlyingOptionExerciseExpirationDateOffsetUnit, Tag 41849.
func (m DerivativeSecurityListRequest) GetUnderlyingOptionExerciseExpirationDateOffsetUnit() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingOptionExerciseExpirationDateOffsetUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingOptionExerciseExpirationFrequencyPeriod gets UnderlyingOptionExerciseExpirationFrequencyPeriod, Tag 41850.
func (m DerivativeSecurityListRequest) GetUnderlyingOptionExerciseExpirationFrequencyPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingOptionExerciseExpirationFrequencyPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingOptionExerciseExpirationFrequencyUnit gets UnderlyingOptionExerciseExpirationFrequencyUnit, Tag 41851.
func (m DerivativeSecurityListRequest) GetUnderlyingOptionExerciseExpirationFrequencyUnit() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingOptionExerciseExpirationFrequencyUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingOptionExerciseExpirationRollConvention gets UnderlyingOptionExerciseExpirationRollConvention, Tag 41852.
func (m DerivativeSecurityListRequest) GetUnderlyingOptionExerciseExpirationRollConvention() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingOptionExerciseExpirationRollConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingOptionExerciseExpirationDateOffsetDayType gets UnderlyingOptionExerciseExpirationDateOffsetDayType, Tag 41853.
func (m DerivativeSecurityListRequest) GetUnderlyingOptionExerciseExpirationDateOffsetDayType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingOptionExerciseExpirationDateOffsetDayTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingOptionExerciseExpirationTime gets UnderlyingOptionExerciseExpirationTime, Tag 41854.
func (m DerivativeSecurityListRequest) GetUnderlyingOptionExerciseExpirationTime() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingOptionExerciseExpirationTimeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingOptionExerciseExpirationTimeBusinessCenter gets UnderlyingOptionExerciseExpirationTimeBusinessCenter, Tag 41855.
func (m DerivativeSecurityListRequest) GetUnderlyingOptionExerciseExpirationTimeBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingOptionExerciseExpirationTimeBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUnderlyingOptionExerciseExpirationDates gets NoUnderlyingOptionExerciseExpirationDates, Tag 41856.
func (m DerivativeSecurityListRequest) GetNoUnderlyingOptionExerciseExpirationDates() (NoUnderlyingOptionExerciseExpirationDatesRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingOptionExerciseExpirationDatesRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetUnderlyingMarketDisruptionProvision gets UnderlyingMarketDisruptionProvision, Tag 41859.
func (m DerivativeSecurityListRequest) GetUnderlyingMarketDisruptionProvision() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingMarketDisruptionProvisionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingMarketDisruptionFallbackProvision gets UnderlyingMarketDisruptionFallbackProvision, Tag 41860.
func (m DerivativeSecurityListRequest) GetUnderlyingMarketDisruptionFallbackProvision() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingMarketDisruptionFallbackProvisionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingMarketDisruptionMaximumDays gets UnderlyingMarketDisruptionMaximumDays, Tag 41861.
func (m DerivativeSecurityListRequest) GetUnderlyingMarketDisruptionMaximumDays() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingMarketDisruptionMaximumDaysField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingMarketDisruptionMaterialityPercentage gets UnderlyingMarketDisruptionMaterialityPercentage, Tag 41862.
func (m DerivativeSecurityListRequest) GetUnderlyingMarketDisruptionMaterialityPercentage() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingMarketDisruptionMaterialityPercentageField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingMarketDisruptionMinimumFuturesContracts gets UnderlyingMarketDisruptionMinimumFuturesContracts, Tag 41863.
func (m DerivativeSecurityListRequest) GetUnderlyingMarketDisruptionMinimumFuturesContracts() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingMarketDisruptionMinimumFuturesContractsField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUnderlyingMarketDisruptionEvents gets NoUnderlyingMarketDisruptionEvents, Tag 41864.
func (m DerivativeSecurityListRequest) GetNoUnderlyingMarketDisruptionEvents() (NoUnderlyingMarketDisruptionEventsRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingMarketDisruptionEventsRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetNoUnderlyingMarketDisruptionFallbacks gets NoUnderlyingMarketDisruptionFallbacks, Tag 41866.
func (m DerivativeSecurityListRequest) GetNoUnderlyingMarketDisruptionFallbacks() (NoUnderlyingMarketDisruptionFallbacksRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingMarketDisruptionFallbacksRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetNoUnderlyingMarketDisruptionFallbackReferencePrices gets NoUnderlyingMarketDisruptionFallbackReferencePrices, Tag 41868.
func (m DerivativeSecurityListRequest) GetNoUnderlyingMarketDisruptionFallbackReferencePrices() (NoUnderlyingMarketDisruptionFallbackReferencePricesRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingMarketDisruptionFallbackReferencePricesRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetNoUnderlyingPricingDateBusinessCenters gets NoUnderlyingPricingDateBusinessCenters, Tag 41947.
func (m DerivativeSecurityListRequest) GetNoUnderlyingPricingDateBusinessCenters() (NoUnderlyingPricingDateBusinessCentersRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingPricingDateBusinessCentersRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetUnderlyingPricingDateUnadjusted gets UnderlyingPricingDateUnadjusted, Tag 41949.
func (m DerivativeSecurityListRequest) GetUnderlyingPricingDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPricingDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPricingDateBusinessDayConvention gets UnderlyingPricingDateBusinessDayConvention, Tag 41950.
func (m DerivativeSecurityListRequest) GetUnderlyingPricingDateBusinessDayConvention() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPricingDateBusinessDayConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPricingDateAdjusted gets UnderlyingPricingDateAdjusted, Tag 41951.
func (m DerivativeSecurityListRequest) GetUnderlyingPricingDateAdjusted() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPricingDateAdjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPricingTime gets UnderlyingPricingTime, Tag 41952.
func (m DerivativeSecurityListRequest) GetUnderlyingPricingTime() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPricingTimeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPricingTimeBusinessCenter gets UnderlyingPricingTimeBusinessCenter, Tag 41953.
func (m DerivativeSecurityListRequest) GetUnderlyingPricingTimeBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPricingTimeBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUnderlyingAdditionalTerms gets NoUnderlyingAdditionalTerms, Tag 42036.
func (m DerivativeSecurityListRequest) GetNoUnderlyingAdditionalTerms() (NoUnderlyingAdditionalTermsRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingAdditionalTermsRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetNoUnderlyingCashSettlTerms gets NoUnderlyingCashSettlTerms, Tag 42041.
func (m DerivativeSecurityListRequest) GetNoUnderlyingCashSettlTerms() (NoUnderlyingCashSettlTermsRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingCashSettlTermsRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetNoUnderlyingPhysicalSettlTerms gets NoUnderlyingPhysicalSettlTerms, Tag 42060.
func (m DerivativeSecurityListRequest) GetNoUnderlyingPhysicalSettlTerms() (NoUnderlyingPhysicalSettlTermsRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingPhysicalSettlTermsRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetNoUnderlyingProtectionTerms gets NoUnderlyingProtectionTerms, Tag 42068.
func (m DerivativeSecurityListRequest) GetNoUnderlyingProtectionTerms() (NoUnderlyingProtectionTermsRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingProtectionTermsRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetNoUnderlyingProvisions gets NoUnderlyingProvisions, Tag 42149.
func (m DerivativeSecurityListRequest) GetNoUnderlyingProvisions() (NoUnderlyingProvisionsRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingProvisionsRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetNoUnderlyingDividendPayments gets NoUnderlyingDividendPayments, Tag 42855.
func (m DerivativeSecurityListRequest) GetNoUnderlyingDividendPayments() (NoUnderlyingDividendPaymentsRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingDividendPaymentsRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetUnderlyingDividendPayoutRatio gets UnderlyingDividendPayoutRatio, Tag 42860.
func (m DerivativeSecurityListRequest) GetUnderlyingDividendPayoutRatio() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingDividendPayoutRatioField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDividendPayoutConditions gets UnderlyingDividendPayoutConditions, Tag 42861.
func (m DerivativeSecurityListRequest) GetUnderlyingDividendPayoutConditions() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingDividendPayoutConditionsField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUnderlyingExtraordinaryEvents gets NoUnderlyingExtraordinaryEvents, Tag 42884.
func (m DerivativeSecurityListRequest) GetNoUnderlyingExtraordinaryEvents() (NoUnderlyingExtraordinaryEventsRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingExtraordinaryEventsRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetUnderlyingSettlMethodElectingPartySide gets UnderlyingSettlMethodElectingPartySide, Tag 42887.
func (m DerivativeSecurityListRequest) GetUnderlyingSettlMethodElectingPartySide() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingSettlMethodElectingPartySideField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingMakeWholeDate gets UnderlyingMakeWholeDate, Tag 42888.
func (m DerivativeSecurityListRequest) GetUnderlyingMakeWholeDate() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingMakeWholeDateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingMakeWholeAmount gets UnderlyingMakeWholeAmount, Tag 42889.
func (m DerivativeSecurityListRequest) GetUnderlyingMakeWholeAmount() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingMakeWholeAmountField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingMakeWholeBenchmarkCurveName gets UnderlyingMakeWholeBenchmarkCurveName, Tag 42890.
func (m DerivativeSecurityListRequest) GetUnderlyingMakeWholeBenchmarkCurveName() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingMakeWholeBenchmarkCurveNameField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingMakeWholeBenchmarkCurvePoint gets UnderlyingMakeWholeBenchmarkCurvePoint, Tag 42891.
func (m DerivativeSecurityListRequest) GetUnderlyingMakeWholeBenchmarkCurvePoint() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingMakeWholeBenchmarkCurvePointField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingMakeWholeRecallSpread gets UnderlyingMakeWholeRecallSpread, Tag 42892.
func (m DerivativeSecurityListRequest) GetUnderlyingMakeWholeRecallSpread() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingMakeWholeRecallSpreadField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingMakeWholeBenchmarkQuote gets UnderlyingMakeWholeBenchmarkQuote, Tag 42893.
func (m DerivativeSecurityListRequest) GetUnderlyingMakeWholeBenchmarkQuote() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingMakeWholeBenchmarkQuoteField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingMakeWholeInterpolationMethod gets UnderlyingMakeWholeInterpolationMethod, Tag 42894.
func (m DerivativeSecurityListRequest) GetUnderlyingMakeWholeInterpolationMethod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingMakeWholeInterpolationMethodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingRateSpreadInitialValue gets UnderlyingRateSpreadInitialValue, Tag 43004.
func (m DerivativeSecurityListRequest) GetUnderlyingRateSpreadInitialValue() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingRateSpreadInitialValueField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUnderlyingRateSpreadSteps gets NoUnderlyingRateSpreadSteps, Tag 43005.
func (m DerivativeSecurityListRequest) GetNoUnderlyingRateSpreadSteps() (NoUnderlyingRateSpreadStepsRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingRateSpreadStepsRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetNoUnderlyingSettlMethodElectionDateBusinessCenters gets NoUnderlyingSettlMethodElectionDateBusinessCenters, Tag 43074.
func (m DerivativeSecurityListRequest) GetNoUnderlyingSettlMethodElectionDateBusinessCenters() (NoUnderlyingSettlMethodElectionDateBusinessCentersRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingSettlMethodElectionDateBusinessCentersRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetUnderlyingSettlMethodElectionDateUnadjusted gets UnderlyingSettlMethodElectionDateUnadjusted, Tag 43076.
func (m DerivativeSecurityListRequest) GetUnderlyingSettlMethodElectionDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingSettlMethodElectionDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingSettlMethodElectionDateBusinessDayConvention gets UnderlyingSettlMethodElectionDateBusinessDayConvention, Tag 43077.
func (m DerivativeSecurityListRequest) GetUnderlyingSettlMethodElectionDateBusinessDayConvention() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingSettlMethodElectionDateBusinessDayConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingSettlMethodElectionDateRelativeTo gets UnderlyingSettlMethodElectionDateRelativeTo, Tag 43078.
func (m DerivativeSecurityListRequest) GetUnderlyingSettlMethodElectionDateRelativeTo() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingSettlMethodElectionDateRelativeToField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingSettlMethodElectionDateOffsetPeriod gets UnderlyingSettlMethodElectionDateOffsetPeriod, Tag 43079.
func (m DerivativeSecurityListRequest) GetUnderlyingSettlMethodElectionDateOffsetPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingSettlMethodElectionDateOffsetPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingSettlMethodElectionDateOffsetUnit gets UnderlyingSettlMethodElectionDateOffsetUnit, Tag 43080.
func (m DerivativeSecurityListRequest) GetUnderlyingSettlMethodElectionDateOffsetUnit() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingSettlMethodElectionDateOffsetUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingSettlMethodElectionDateOffsetDayType gets UnderlyingSettlMethodElectionDateOffsetDayType, Tag 43081.
func (m DerivativeSecurityListRequest) GetUnderlyingSettlMethodElectionDateOffsetDayType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingSettlMethodElectionDateOffsetDayTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingSettlMethodElectionDateAdjusted gets UnderlyingSettlMethodElectionDateAdjusted, Tag 43082.
func (m DerivativeSecurityListRequest) GetUnderlyingSettlMethodElectionDateAdjusted() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingSettlMethodElectionDateAdjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasCurrency returns true if Currency is present, Tag 15.
func (m DerivativeSecurityListRequest) HasCurrency() bool {
	return m.Has(tag.Currency)
}

// HasText returns true if Text is present, Tag 58.
func (m DerivativeSecurityListRequest) HasText() bool {
	return m.Has(tag.Text)
}

// HasUnderlyingCouponPaymentDate returns true if UnderlyingCouponPaymentDate is present, Tag 241.
func (m DerivativeSecurityListRequest) HasUnderlyingCouponPaymentDate() bool {
	return m.Has(tag.UnderlyingCouponPaymentDate)
}

// HasUnderlyingIssueDate returns true if UnderlyingIssueDate is present, Tag 242.
func (m DerivativeSecurityListRequest) HasUnderlyingIssueDate() bool {
	return m.Has(tag.UnderlyingIssueDate)
}

// HasUnderlyingRepoCollateralSecurityType returns true if UnderlyingRepoCollateralSecurityType is present, Tag 243.
func (m DerivativeSecurityListRequest) HasUnderlyingRepoCollateralSecurityType() bool {
	return m.Has(tag.UnderlyingRepoCollateralSecurityType)
}

// HasUnderlyingRepurchaseTerm returns true if UnderlyingRepurchaseTerm is present, Tag 244.
func (m DerivativeSecurityListRequest) HasUnderlyingRepurchaseTerm() bool {
	return m.Has(tag.UnderlyingRepurchaseTerm)
}

// HasUnderlyingRepurchaseRate returns true if UnderlyingRepurchaseRate is present, Tag 245.
func (m DerivativeSecurityListRequest) HasUnderlyingRepurchaseRate() bool {
	return m.Has(tag.UnderlyingRepurchaseRate)
}

// HasUnderlyingFactor returns true if UnderlyingFactor is present, Tag 246.
func (m DerivativeSecurityListRequest) HasUnderlyingFactor() bool {
	return m.Has(tag.UnderlyingFactor)
}

// HasUnderlyingRedemptionDate returns true if UnderlyingRedemptionDate is present, Tag 247.
func (m DerivativeSecurityListRequest) HasUnderlyingRedemptionDate() bool {
	return m.Has(tag.UnderlyingRedemptionDate)
}

// HasUnderlyingCreditRating returns true if UnderlyingCreditRating is present, Tag 256.
func (m DerivativeSecurityListRequest) HasUnderlyingCreditRating() bool {
	return m.Has(tag.UnderlyingCreditRating)
}

// HasSubscriptionRequestType returns true if SubscriptionRequestType is present, Tag 263.
func (m DerivativeSecurityListRequest) HasSubscriptionRequestType() bool {
	return m.Has(tag.SubscriptionRequestType)
}

// HasUnderlyingSecurityIDSource returns true if UnderlyingSecurityIDSource is present, Tag 305.
func (m DerivativeSecurityListRequest) HasUnderlyingSecurityIDSource() bool {
	return m.Has(tag.UnderlyingSecurityIDSource)
}

// HasUnderlyingIssuer returns true if UnderlyingIssuer is present, Tag 306.
func (m DerivativeSecurityListRequest) HasUnderlyingIssuer() bool {
	return m.Has(tag.UnderlyingIssuer)
}

// HasUnderlyingSecurityDesc returns true if UnderlyingSecurityDesc is present, Tag 307.
func (m DerivativeSecurityListRequest) HasUnderlyingSecurityDesc() bool {
	return m.Has(tag.UnderlyingSecurityDesc)
}

// HasUnderlyingSecurityExchange returns true if UnderlyingSecurityExchange is present, Tag 308.
func (m DerivativeSecurityListRequest) HasUnderlyingSecurityExchange() bool {
	return m.Has(tag.UnderlyingSecurityExchange)
}

// HasUnderlyingSecurityID returns true if UnderlyingSecurityID is present, Tag 309.
func (m DerivativeSecurityListRequest) HasUnderlyingSecurityID() bool {
	return m.Has(tag.UnderlyingSecurityID)
}

// HasUnderlyingSecurityType returns true if UnderlyingSecurityType is present, Tag 310.
func (m DerivativeSecurityListRequest) HasUnderlyingSecurityType() bool {
	return m.Has(tag.UnderlyingSecurityType)
}

// HasUnderlyingSymbol returns true if UnderlyingSymbol is present, Tag 311.
func (m DerivativeSecurityListRequest) HasUnderlyingSymbol() bool {
	return m.Has(tag.UnderlyingSymbol)
}

// HasUnderlyingSymbolSfx returns true if UnderlyingSymbolSfx is present, Tag 312.
func (m DerivativeSecurityListRequest) HasUnderlyingSymbolSfx() bool {
	return m.Has(tag.UnderlyingSymbolSfx)
}

// HasUnderlyingMaturityMonthYear returns true if UnderlyingMaturityMonthYear is present, Tag 313.
func (m DerivativeSecurityListRequest) HasUnderlyingMaturityMonthYear() bool {
	return m.Has(tag.UnderlyingMaturityMonthYear)
}

// HasUnderlyingPutOrCall returns true if UnderlyingPutOrCall is present, Tag 315.
func (m DerivativeSecurityListRequest) HasUnderlyingPutOrCall() bool {
	return m.Has(tag.UnderlyingPutOrCall)
}

// HasUnderlyingStrikePrice returns true if UnderlyingStrikePrice is present, Tag 316.
func (m DerivativeSecurityListRequest) HasUnderlyingStrikePrice() bool {
	return m.Has(tag.UnderlyingStrikePrice)
}

// HasUnderlyingOptAttribute returns true if UnderlyingOptAttribute is present, Tag 317.
func (m DerivativeSecurityListRequest) HasUnderlyingOptAttribute() bool {
	return m.Has(tag.UnderlyingOptAttribute)
}

// HasUnderlyingCurrency returns true if UnderlyingCurrency is present, Tag 318.
func (m DerivativeSecurityListRequest) HasUnderlyingCurrency() bool {
	return m.Has(tag.UnderlyingCurrency)
}

// HasSecurityReqID returns true if SecurityReqID is present, Tag 320.
func (m DerivativeSecurityListRequest) HasSecurityReqID() bool {
	return m.Has(tag.SecurityReqID)
}

// HasTradingSessionID returns true if TradingSessionID is present, Tag 336.
func (m DerivativeSecurityListRequest) HasTradingSessionID() bool {
	return m.Has(tag.TradingSessionID)
}

// HasEncodedTextLen returns true if EncodedTextLen is present, Tag 354.
func (m DerivativeSecurityListRequest) HasEncodedTextLen() bool {
	return m.Has(tag.EncodedTextLen)
}

// HasEncodedText returns true if EncodedText is present, Tag 355.
func (m DerivativeSecurityListRequest) HasEncodedText() bool {
	return m.Has(tag.EncodedText)
}

// HasEncodedUnderlyingIssuerLen returns true if EncodedUnderlyingIssuerLen is present, Tag 362.
func (m DerivativeSecurityListRequest) HasEncodedUnderlyingIssuerLen() bool {
	return m.Has(tag.EncodedUnderlyingIssuerLen)
}

// HasEncodedUnderlyingIssuer returns true if EncodedUnderlyingIssuer is present, Tag 363.
func (m DerivativeSecurityListRequest) HasEncodedUnderlyingIssuer() bool {
	return m.Has(tag.EncodedUnderlyingIssuer)
}

// HasEncodedUnderlyingSecurityDescLen returns true if EncodedUnderlyingSecurityDescLen is present, Tag 364.
func (m DerivativeSecurityListRequest) HasEncodedUnderlyingSecurityDescLen() bool {
	return m.Has(tag.EncodedUnderlyingSecurityDescLen)
}

// HasEncodedUnderlyingSecurityDesc returns true if EncodedUnderlyingSecurityDesc is present, Tag 365.
func (m DerivativeSecurityListRequest) HasEncodedUnderlyingSecurityDesc() bool {
	return m.Has(tag.EncodedUnderlyingSecurityDesc)
}

// HasUnderlyingCouponRate returns true if UnderlyingCouponRate is present, Tag 435.
func (m DerivativeSecurityListRequest) HasUnderlyingCouponRate() bool {
	return m.Has(tag.UnderlyingCouponRate)
}

// HasUnderlyingContractMultiplier returns true if UnderlyingContractMultiplier is present, Tag 436.
func (m DerivativeSecurityListRequest) HasUnderlyingContractMultiplier() bool {
	return m.Has(tag.UnderlyingContractMultiplier)
}

// HasNoUnderlyingSecurityAltID returns true if NoUnderlyingSecurityAltID is present, Tag 457.
func (m DerivativeSecurityListRequest) HasNoUnderlyingSecurityAltID() bool {
	return m.Has(tag.NoUnderlyingSecurityAltID)
}

// HasUnderlyingProduct returns true if UnderlyingProduct is present, Tag 462.
func (m DerivativeSecurityListRequest) HasUnderlyingProduct() bool {
	return m.Has(tag.UnderlyingProduct)
}

// HasUnderlyingCFICode returns true if UnderlyingCFICode is present, Tag 463.
func (m DerivativeSecurityListRequest) HasUnderlyingCFICode() bool {
	return m.Has(tag.UnderlyingCFICode)
}

// HasUnderlyingMaturityDate returns true if UnderlyingMaturityDate is present, Tag 542.
func (m DerivativeSecurityListRequest) HasUnderlyingMaturityDate() bool {
	return m.Has(tag.UnderlyingMaturityDate)
}

// HasSecurityListRequestType returns true if SecurityListRequestType is present, Tag 559.
func (m DerivativeSecurityListRequest) HasSecurityListRequestType() bool {
	return m.Has(tag.SecurityListRequestType)
}

// HasUnderlyingCountryOfIssue returns true if UnderlyingCountryOfIssue is present, Tag 592.
func (m DerivativeSecurityListRequest) HasUnderlyingCountryOfIssue() bool {
	return m.Has(tag.UnderlyingCountryOfIssue)
}

// HasUnderlyingStateOrProvinceOfIssue returns true if UnderlyingStateOrProvinceOfIssue is present, Tag 593.
func (m DerivativeSecurityListRequest) HasUnderlyingStateOrProvinceOfIssue() bool {
	return m.Has(tag.UnderlyingStateOrProvinceOfIssue)
}

// HasUnderlyingLocaleOfIssue returns true if UnderlyingLocaleOfIssue is present, Tag 594.
func (m DerivativeSecurityListRequest) HasUnderlyingLocaleOfIssue() bool {
	return m.Has(tag.UnderlyingLocaleOfIssue)
}

// HasUnderlyingInstrRegistry returns true if UnderlyingInstrRegistry is present, Tag 595.
func (m DerivativeSecurityListRequest) HasUnderlyingInstrRegistry() bool {
	return m.Has(tag.UnderlyingInstrRegistry)
}

// HasTradingSessionSubID returns true if TradingSessionSubID is present, Tag 625.
func (m DerivativeSecurityListRequest) HasTradingSessionSubID() bool {
	return m.Has(tag.TradingSessionSubID)
}

// HasSecuritySubType returns true if SecuritySubType is present, Tag 762.
func (m DerivativeSecurityListRequest) HasSecuritySubType() bool {
	return m.Has(tag.SecuritySubType)
}

// HasUnderlyingSecuritySubType returns true if UnderlyingSecuritySubType is present, Tag 763.
func (m DerivativeSecurityListRequest) HasUnderlyingSecuritySubType() bool {
	return m.Has(tag.UnderlyingSecuritySubType)
}

// HasUnderlyingPx returns true if UnderlyingPx is present, Tag 810.
func (m DerivativeSecurityListRequest) HasUnderlyingPx() bool {
	return m.Has(tag.UnderlyingPx)
}

// HasUnderlyingCPProgram returns true if UnderlyingCPProgram is present, Tag 877.
func (m DerivativeSecurityListRequest) HasUnderlyingCPProgram() bool {
	return m.Has(tag.UnderlyingCPProgram)
}

// HasUnderlyingCPRegType returns true if UnderlyingCPRegType is present, Tag 878.
func (m DerivativeSecurityListRequest) HasUnderlyingCPRegType() bool {
	return m.Has(tag.UnderlyingCPRegType)
}

// HasUnderlyingQty returns true if UnderlyingQty is present, Tag 879.
func (m DerivativeSecurityListRequest) HasUnderlyingQty() bool {
	return m.Has(tag.UnderlyingQty)
}

// HasUnderlyingDirtyPrice returns true if UnderlyingDirtyPrice is present, Tag 882.
func (m DerivativeSecurityListRequest) HasUnderlyingDirtyPrice() bool {
	return m.Has(tag.UnderlyingDirtyPrice)
}

// HasUnderlyingEndPrice returns true if UnderlyingEndPrice is present, Tag 883.
func (m DerivativeSecurityListRequest) HasUnderlyingEndPrice() bool {
	return m.Has(tag.UnderlyingEndPrice)
}

// HasUnderlyingStartValue returns true if UnderlyingStartValue is present, Tag 884.
func (m DerivativeSecurityListRequest) HasUnderlyingStartValue() bool {
	return m.Has(tag.UnderlyingStartValue)
}

// HasUnderlyingCurrentValue returns true if UnderlyingCurrentValue is present, Tag 885.
func (m DerivativeSecurityListRequest) HasUnderlyingCurrentValue() bool {
	return m.Has(tag.UnderlyingCurrentValue)
}

// HasUnderlyingEndValue returns true if UnderlyingEndValue is present, Tag 886.
func (m DerivativeSecurityListRequest) HasUnderlyingEndValue() bool {
	return m.Has(tag.UnderlyingEndValue)
}

// HasNoUnderlyingStips returns true if NoUnderlyingStips is present, Tag 887.
func (m DerivativeSecurityListRequest) HasNoUnderlyingStips() bool {
	return m.Has(tag.NoUnderlyingStips)
}

// HasUnderlyingStrikeCurrency returns true if UnderlyingStrikeCurrency is present, Tag 941.
func (m DerivativeSecurityListRequest) HasUnderlyingStrikeCurrency() bool {
	return m.Has(tag.UnderlyingStrikeCurrency)
}

// HasUnderlyingAllocationPercent returns true if UnderlyingAllocationPercent is present, Tag 972.
func (m DerivativeSecurityListRequest) HasUnderlyingAllocationPercent() bool {
	return m.Has(tag.UnderlyingAllocationPercent)
}

// HasUnderlyingCashAmount returns true if UnderlyingCashAmount is present, Tag 973.
func (m DerivativeSecurityListRequest) HasUnderlyingCashAmount() bool {
	return m.Has(tag.UnderlyingCashAmount)
}

// HasUnderlyingCashType returns true if UnderlyingCashType is present, Tag 974.
func (m DerivativeSecurityListRequest) HasUnderlyingCashType() bool {
	return m.Has(tag.UnderlyingCashType)
}

// HasUnderlyingSettlementType returns true if UnderlyingSettlementType is present, Tag 975.
func (m DerivativeSecurityListRequest) HasUnderlyingSettlementType() bool {
	return m.Has(tag.UnderlyingSettlementType)
}

// HasUnderlyingUnitOfMeasure returns true if UnderlyingUnitOfMeasure is present, Tag 998.
func (m DerivativeSecurityListRequest) HasUnderlyingUnitOfMeasure() bool {
	return m.Has(tag.UnderlyingUnitOfMeasure)
}

// HasUnderlyingTimeUnit returns true if UnderlyingTimeUnit is present, Tag 1000.
func (m DerivativeSecurityListRequest) HasUnderlyingTimeUnit() bool {
	return m.Has(tag.UnderlyingTimeUnit)
}

// HasUnderlyingCapValue returns true if UnderlyingCapValue is present, Tag 1038.
func (m DerivativeSecurityListRequest) HasUnderlyingCapValue() bool {
	return m.Has(tag.UnderlyingCapValue)
}

// HasUnderlyingSettlMethod returns true if UnderlyingSettlMethod is present, Tag 1039.
func (m DerivativeSecurityListRequest) HasUnderlyingSettlMethod() bool {
	return m.Has(tag.UnderlyingSettlMethod)
}

// HasUnderlyingAdjustedQuantity returns true if UnderlyingAdjustedQuantity is present, Tag 1044.
func (m DerivativeSecurityListRequest) HasUnderlyingAdjustedQuantity() bool {
	return m.Has(tag.UnderlyingAdjustedQuantity)
}

// HasUnderlyingFXRate returns true if UnderlyingFXRate is present, Tag 1045.
func (m DerivativeSecurityListRequest) HasUnderlyingFXRate() bool {
	return m.Has(tag.UnderlyingFXRate)
}

// HasUnderlyingFXRateCalc returns true if UnderlyingFXRateCalc is present, Tag 1046.
func (m DerivativeSecurityListRequest) HasUnderlyingFXRateCalc() bool {
	return m.Has(tag.UnderlyingFXRateCalc)
}

// HasNoUndlyInstrumentParties returns true if NoUndlyInstrumentParties is present, Tag 1058.
func (m DerivativeSecurityListRequest) HasNoUndlyInstrumentParties() bool {
	return m.Has(tag.NoUndlyInstrumentParties)
}

// HasUnderlyingMaturityTime returns true if UnderlyingMaturityTime is present, Tag 1213.
func (m DerivativeSecurityListRequest) HasUnderlyingMaturityTime() bool {
	return m.Has(tag.UnderlyingMaturityTime)
}

// HasDerivativeSymbol returns true if DerivativeSymbol is present, Tag 1214.
func (m DerivativeSecurityListRequest) HasDerivativeSymbol() bool {
	return m.Has(tag.DerivativeSymbol)
}

// HasDerivativeSymbolSfx returns true if DerivativeSymbolSfx is present, Tag 1215.
func (m DerivativeSecurityListRequest) HasDerivativeSymbolSfx() bool {
	return m.Has(tag.DerivativeSymbolSfx)
}

// HasDerivativeSecurityID returns true if DerivativeSecurityID is present, Tag 1216.
func (m DerivativeSecurityListRequest) HasDerivativeSecurityID() bool {
	return m.Has(tag.DerivativeSecurityID)
}

// HasDerivativeSecurityIDSource returns true if DerivativeSecurityIDSource is present, Tag 1217.
func (m DerivativeSecurityListRequest) HasDerivativeSecurityIDSource() bool {
	return m.Has(tag.DerivativeSecurityIDSource)
}

// HasNoDerivativeSecurityAltID returns true if NoDerivativeSecurityAltID is present, Tag 1218.
func (m DerivativeSecurityListRequest) HasNoDerivativeSecurityAltID() bool {
	return m.Has(tag.NoDerivativeSecurityAltID)
}

// HasDerivativeOptPayAmount returns true if DerivativeOptPayAmount is present, Tag 1225.
func (m DerivativeSecurityListRequest) HasDerivativeOptPayAmount() bool {
	return m.Has(tag.DerivativeOptPayAmount)
}

// HasDerivativeProductComplex returns true if DerivativeProductComplex is present, Tag 1228.
func (m DerivativeSecurityListRequest) HasDerivativeProductComplex() bool {
	return m.Has(tag.DerivativeProductComplex)
}

// HasDerivFlexProductEligibilityIndicator returns true if DerivFlexProductEligibilityIndicator is present, Tag 1243.
func (m DerivativeSecurityListRequest) HasDerivFlexProductEligibilityIndicator() bool {
	return m.Has(tag.DerivFlexProductEligibilityIndicator)
}

// HasDerivativeProduct returns true if DerivativeProduct is present, Tag 1246.
func (m DerivativeSecurityListRequest) HasDerivativeProduct() bool {
	return m.Has(tag.DerivativeProduct)
}

// HasDerivativeSecurityGroup returns true if DerivativeSecurityGroup is present, Tag 1247.
func (m DerivativeSecurityListRequest) HasDerivativeSecurityGroup() bool {
	return m.Has(tag.DerivativeSecurityGroup)
}

// HasDerivativeCFICode returns true if DerivativeCFICode is present, Tag 1248.
func (m DerivativeSecurityListRequest) HasDerivativeCFICode() bool {
	return m.Has(tag.DerivativeCFICode)
}

// HasDerivativeSecurityType returns true if DerivativeSecurityType is present, Tag 1249.
func (m DerivativeSecurityListRequest) HasDerivativeSecurityType() bool {
	return m.Has(tag.DerivativeSecurityType)
}

// HasDerivativeSecuritySubType returns true if DerivativeSecuritySubType is present, Tag 1250.
func (m DerivativeSecurityListRequest) HasDerivativeSecuritySubType() bool {
	return m.Has(tag.DerivativeSecuritySubType)
}

// HasDerivativeMaturityMonthYear returns true if DerivativeMaturityMonthYear is present, Tag 1251.
func (m DerivativeSecurityListRequest) HasDerivativeMaturityMonthYear() bool {
	return m.Has(tag.DerivativeMaturityMonthYear)
}

// HasDerivativeMaturityDate returns true if DerivativeMaturityDate is present, Tag 1252.
func (m DerivativeSecurityListRequest) HasDerivativeMaturityDate() bool {
	return m.Has(tag.DerivativeMaturityDate)
}

// HasDerivativeMaturityTime returns true if DerivativeMaturityTime is present, Tag 1253.
func (m DerivativeSecurityListRequest) HasDerivativeMaturityTime() bool {
	return m.Has(tag.DerivativeMaturityTime)
}

// HasDerivativeSettleOnOpenFlag returns true if DerivativeSettleOnOpenFlag is present, Tag 1254.
func (m DerivativeSecurityListRequest) HasDerivativeSettleOnOpenFlag() bool {
	return m.Has(tag.DerivativeSettleOnOpenFlag)
}

// HasDerivativeInstrmtAssignmentMethod returns true if DerivativeInstrmtAssignmentMethod is present, Tag 1255.
func (m DerivativeSecurityListRequest) HasDerivativeInstrmtAssignmentMethod() bool {
	return m.Has(tag.DerivativeInstrmtAssignmentMethod)
}

// HasDerivativeSecurityStatus returns true if DerivativeSecurityStatus is present, Tag 1256.
func (m DerivativeSecurityListRequest) HasDerivativeSecurityStatus() bool {
	return m.Has(tag.DerivativeSecurityStatus)
}

// HasDerivativeInstrRegistry returns true if DerivativeInstrRegistry is present, Tag 1257.
func (m DerivativeSecurityListRequest) HasDerivativeInstrRegistry() bool {
	return m.Has(tag.DerivativeInstrRegistry)
}

// HasDerivativeCountryOfIssue returns true if DerivativeCountryOfIssue is present, Tag 1258.
func (m DerivativeSecurityListRequest) HasDerivativeCountryOfIssue() bool {
	return m.Has(tag.DerivativeCountryOfIssue)
}

// HasDerivativeStateOrProvinceOfIssue returns true if DerivativeStateOrProvinceOfIssue is present, Tag 1259.
func (m DerivativeSecurityListRequest) HasDerivativeStateOrProvinceOfIssue() bool {
	return m.Has(tag.DerivativeStateOrProvinceOfIssue)
}

// HasDerivativeLocaleOfIssue returns true if DerivativeLocaleOfIssue is present, Tag 1260.
func (m DerivativeSecurityListRequest) HasDerivativeLocaleOfIssue() bool {
	return m.Has(tag.DerivativeLocaleOfIssue)
}

// HasDerivativeStrikePrice returns true if DerivativeStrikePrice is present, Tag 1261.
func (m DerivativeSecurityListRequest) HasDerivativeStrikePrice() bool {
	return m.Has(tag.DerivativeStrikePrice)
}

// HasDerivativeStrikeCurrency returns true if DerivativeStrikeCurrency is present, Tag 1262.
func (m DerivativeSecurityListRequest) HasDerivativeStrikeCurrency() bool {
	return m.Has(tag.DerivativeStrikeCurrency)
}

// HasDerivativeStrikeMultiplier returns true if DerivativeStrikeMultiplier is present, Tag 1263.
func (m DerivativeSecurityListRequest) HasDerivativeStrikeMultiplier() bool {
	return m.Has(tag.DerivativeStrikeMultiplier)
}

// HasDerivativeStrikeValue returns true if DerivativeStrikeValue is present, Tag 1264.
func (m DerivativeSecurityListRequest) HasDerivativeStrikeValue() bool {
	return m.Has(tag.DerivativeStrikeValue)
}

// HasDerivativeOptAttribute returns true if DerivativeOptAttribute is present, Tag 1265.
func (m DerivativeSecurityListRequest) HasDerivativeOptAttribute() bool {
	return m.Has(tag.DerivativeOptAttribute)
}

// HasDerivativeContractMultiplier returns true if DerivativeContractMultiplier is present, Tag 1266.
func (m DerivativeSecurityListRequest) HasDerivativeContractMultiplier() bool {
	return m.Has(tag.DerivativeContractMultiplier)
}

// HasDerivativeMinPriceIncrement returns true if DerivativeMinPriceIncrement is present, Tag 1267.
func (m DerivativeSecurityListRequest) HasDerivativeMinPriceIncrement() bool {
	return m.Has(tag.DerivativeMinPriceIncrement)
}

// HasDerivativeMinPriceIncrementAmount returns true if DerivativeMinPriceIncrementAmount is present, Tag 1268.
func (m DerivativeSecurityListRequest) HasDerivativeMinPriceIncrementAmount() bool {
	return m.Has(tag.DerivativeMinPriceIncrementAmount)
}

// HasDerivativeUnitOfMeasure returns true if DerivativeUnitOfMeasure is present, Tag 1269.
func (m DerivativeSecurityListRequest) HasDerivativeUnitOfMeasure() bool {
	return m.Has(tag.DerivativeUnitOfMeasure)
}

// HasDerivativeUnitOfMeasureQty returns true if DerivativeUnitOfMeasureQty is present, Tag 1270.
func (m DerivativeSecurityListRequest) HasDerivativeUnitOfMeasureQty() bool {
	return m.Has(tag.DerivativeUnitOfMeasureQty)
}

// HasDerivativeTimeUnit returns true if DerivativeTimeUnit is present, Tag 1271.
func (m DerivativeSecurityListRequest) HasDerivativeTimeUnit() bool {
	return m.Has(tag.DerivativeTimeUnit)
}

// HasDerivativeSecurityExchange returns true if DerivativeSecurityExchange is present, Tag 1272.
func (m DerivativeSecurityListRequest) HasDerivativeSecurityExchange() bool {
	return m.Has(tag.DerivativeSecurityExchange)
}

// HasDerivativePositionLimit returns true if DerivativePositionLimit is present, Tag 1273.
func (m DerivativeSecurityListRequest) HasDerivativePositionLimit() bool {
	return m.Has(tag.DerivativePositionLimit)
}

// HasDerivativeNTPositionLimit returns true if DerivativeNTPositionLimit is present, Tag 1274.
func (m DerivativeSecurityListRequest) HasDerivativeNTPositionLimit() bool {
	return m.Has(tag.DerivativeNTPositionLimit)
}

// HasDerivativeIssuer returns true if DerivativeIssuer is present, Tag 1275.
func (m DerivativeSecurityListRequest) HasDerivativeIssuer() bool {
	return m.Has(tag.DerivativeIssuer)
}

// HasDerivativeIssueDate returns true if DerivativeIssueDate is present, Tag 1276.
func (m DerivativeSecurityListRequest) HasDerivativeIssueDate() bool {
	return m.Has(tag.DerivativeIssueDate)
}

// HasDerivativeEncodedIssuerLen returns true if DerivativeEncodedIssuerLen is present, Tag 1277.
func (m DerivativeSecurityListRequest) HasDerivativeEncodedIssuerLen() bool {
	return m.Has(tag.DerivativeEncodedIssuerLen)
}

// HasDerivativeEncodedIssuer returns true if DerivativeEncodedIssuer is present, Tag 1278.
func (m DerivativeSecurityListRequest) HasDerivativeEncodedIssuer() bool {
	return m.Has(tag.DerivativeEncodedIssuer)
}

// HasDerivativeSecurityDesc returns true if DerivativeSecurityDesc is present, Tag 1279.
func (m DerivativeSecurityListRequest) HasDerivativeSecurityDesc() bool {
	return m.Has(tag.DerivativeSecurityDesc)
}

// HasDerivativeEncodedSecurityDescLen returns true if DerivativeEncodedSecurityDescLen is present, Tag 1280.
func (m DerivativeSecurityListRequest) HasDerivativeEncodedSecurityDescLen() bool {
	return m.Has(tag.DerivativeEncodedSecurityDescLen)
}

// HasDerivativeEncodedSecurityDesc returns true if DerivativeEncodedSecurityDesc is present, Tag 1281.
func (m DerivativeSecurityListRequest) HasDerivativeEncodedSecurityDesc() bool {
	return m.Has(tag.DerivativeEncodedSecurityDesc)
}

// HasDerivativeSecurityXMLLen returns true if DerivativeSecurityXMLLen is present, Tag 1282.
func (m DerivativeSecurityListRequest) HasDerivativeSecurityXMLLen() bool {
	return m.Has(tag.DerivativeSecurityXMLLen)
}

// HasDerivativeSecurityXML returns true if DerivativeSecurityXML is present, Tag 1283.
func (m DerivativeSecurityListRequest) HasDerivativeSecurityXML() bool {
	return m.Has(tag.DerivativeSecurityXML)
}

// HasDerivativeSecurityXMLSchema returns true if DerivativeSecurityXMLSchema is present, Tag 1284.
func (m DerivativeSecurityListRequest) HasDerivativeSecurityXMLSchema() bool {
	return m.Has(tag.DerivativeSecurityXMLSchema)
}

// HasDerivativeContractSettlMonth returns true if DerivativeContractSettlMonth is present, Tag 1285.
func (m DerivativeSecurityListRequest) HasDerivativeContractSettlMonth() bool {
	return m.Has(tag.DerivativeContractSettlMonth)
}

// HasNoDerivativeEvents returns true if NoDerivativeEvents is present, Tag 1286.
func (m DerivativeSecurityListRequest) HasNoDerivativeEvents() bool {
	return m.Has(tag.NoDerivativeEvents)
}

// HasNoDerivativeInstrumentParties returns true if NoDerivativeInstrumentParties is present, Tag 1292.
func (m DerivativeSecurityListRequest) HasNoDerivativeInstrumentParties() bool {
	return m.Has(tag.NoDerivativeInstrumentParties)
}

// HasDerivativeExerciseStyle returns true if DerivativeExerciseStyle is present, Tag 1299.
func (m DerivativeSecurityListRequest) HasDerivativeExerciseStyle() bool {
	return m.Has(tag.DerivativeExerciseStyle)
}

// HasMarketSegmentID returns true if MarketSegmentID is present, Tag 1300.
func (m DerivativeSecurityListRequest) HasMarketSegmentID() bool {
	return m.Has(tag.MarketSegmentID)
}

// HasMarketID returns true if MarketID is present, Tag 1301.
func (m DerivativeSecurityListRequest) HasMarketID() bool {
	return m.Has(tag.MarketID)
}

// HasDerivativePriceUnitOfMeasure returns true if DerivativePriceUnitOfMeasure is present, Tag 1315.
func (m DerivativeSecurityListRequest) HasDerivativePriceUnitOfMeasure() bool {
	return m.Has(tag.DerivativePriceUnitOfMeasure)
}

// HasDerivativePriceUnitOfMeasureQty returns true if DerivativePriceUnitOfMeasureQty is present, Tag 1316.
func (m DerivativeSecurityListRequest) HasDerivativePriceUnitOfMeasureQty() bool {
	return m.Has(tag.DerivativePriceUnitOfMeasureQty)
}

// HasDerivativeSettlMethod returns true if DerivativeSettlMethod is present, Tag 1317.
func (m DerivativeSecurityListRequest) HasDerivativeSettlMethod() bool {
	return m.Has(tag.DerivativeSettlMethod)
}

// HasDerivativePriceQuoteMethod returns true if DerivativePriceQuoteMethod is present, Tag 1318.
func (m DerivativeSecurityListRequest) HasDerivativePriceQuoteMethod() bool {
	return m.Has(tag.DerivativePriceQuoteMethod)
}

// HasDerivativeValuationMethod returns true if DerivativeValuationMethod is present, Tag 1319.
func (m DerivativeSecurityListRequest) HasDerivativeValuationMethod() bool {
	return m.Has(tag.DerivativeValuationMethod)
}

// HasDerivativeListMethod returns true if DerivativeListMethod is present, Tag 1320.
func (m DerivativeSecurityListRequest) HasDerivativeListMethod() bool {
	return m.Has(tag.DerivativeListMethod)
}

// HasDerivativeCapPrice returns true if DerivativeCapPrice is present, Tag 1321.
func (m DerivativeSecurityListRequest) HasDerivativeCapPrice() bool {
	return m.Has(tag.DerivativeCapPrice)
}

// HasDerivativeFloorPrice returns true if DerivativeFloorPrice is present, Tag 1322.
func (m DerivativeSecurityListRequest) HasDerivativeFloorPrice() bool {
	return m.Has(tag.DerivativeFloorPrice)
}

// HasDerivativePutOrCall returns true if DerivativePutOrCall is present, Tag 1323.
func (m DerivativeSecurityListRequest) HasDerivativePutOrCall() bool {
	return m.Has(tag.DerivativePutOrCall)
}

// HasUnderlyingExerciseStyle returns true if UnderlyingExerciseStyle is present, Tag 1419.
func (m DerivativeSecurityListRequest) HasUnderlyingExerciseStyle() bool {
	return m.Has(tag.UnderlyingExerciseStyle)
}

// HasUnderlyingUnitOfMeasureQty returns true if UnderlyingUnitOfMeasureQty is present, Tag 1423.
func (m DerivativeSecurityListRequest) HasUnderlyingUnitOfMeasureQty() bool {
	return m.Has(tag.UnderlyingUnitOfMeasureQty)
}

// HasUnderlyingPriceUnitOfMeasure returns true if UnderlyingPriceUnitOfMeasure is present, Tag 1424.
func (m DerivativeSecurityListRequest) HasUnderlyingPriceUnitOfMeasure() bool {
	return m.Has(tag.UnderlyingPriceUnitOfMeasure)
}

// HasUnderlyingPriceUnitOfMeasureQty returns true if UnderlyingPriceUnitOfMeasureQty is present, Tag 1425.
func (m DerivativeSecurityListRequest) HasUnderlyingPriceUnitOfMeasureQty() bool {
	return m.Has(tag.UnderlyingPriceUnitOfMeasureQty)
}

// HasUnderlyingContractMultiplierUnit returns true if UnderlyingContractMultiplierUnit is present, Tag 1437.
func (m DerivativeSecurityListRequest) HasUnderlyingContractMultiplierUnit() bool {
	return m.Has(tag.UnderlyingContractMultiplierUnit)
}

// HasDerivativeContractMultiplierUnit returns true if DerivativeContractMultiplierUnit is present, Tag 1438.
func (m DerivativeSecurityListRequest) HasDerivativeContractMultiplierUnit() bool {
	return m.Has(tag.DerivativeContractMultiplierUnit)
}

// HasUnderlyingFlowScheduleType returns true if UnderlyingFlowScheduleType is present, Tag 1441.
func (m DerivativeSecurityListRequest) HasUnderlyingFlowScheduleType() bool {
	return m.Has(tag.UnderlyingFlowScheduleType)
}

// HasDerivativeFlowScheduleType returns true if DerivativeFlowScheduleType is present, Tag 1442.
func (m DerivativeSecurityListRequest) HasDerivativeFlowScheduleType() bool {
	return m.Has(tag.DerivativeFlowScheduleType)
}

// HasUnderlyingRestructuringType returns true if UnderlyingRestructuringType is present, Tag 1453.
func (m DerivativeSecurityListRequest) HasUnderlyingRestructuringType() bool {
	return m.Has(tag.UnderlyingRestructuringType)
}

// HasUnderlyingSeniority returns true if UnderlyingSeniority is present, Tag 1454.
func (m DerivativeSecurityListRequest) HasUnderlyingSeniority() bool {
	return m.Has(tag.UnderlyingSeniority)
}

// HasUnderlyingNotionalPercentageOutstanding returns true if UnderlyingNotionalPercentageOutstanding is present, Tag 1455.
func (m DerivativeSecurityListRequest) HasUnderlyingNotionalPercentageOutstanding() bool {
	return m.Has(tag.UnderlyingNotionalPercentageOutstanding)
}

// HasUnderlyingOriginalNotionalPercentageOutstanding returns true if UnderlyingOriginalNotionalPercentageOutstanding is present, Tag 1456.
func (m DerivativeSecurityListRequest) HasUnderlyingOriginalNotionalPercentageOutstanding() bool {
	return m.Has(tag.UnderlyingOriginalNotionalPercentageOutstanding)
}

// HasUnderlyingAttachmentPoint returns true if UnderlyingAttachmentPoint is present, Tag 1459.
func (m DerivativeSecurityListRequest) HasUnderlyingAttachmentPoint() bool {
	return m.Has(tag.UnderlyingAttachmentPoint)
}

// HasUnderlyingDetachmentPoint returns true if UnderlyingDetachmentPoint is present, Tag 1460.
func (m DerivativeSecurityListRequest) HasUnderlyingDetachmentPoint() bool {
	return m.Has(tag.UnderlyingDetachmentPoint)
}

// HasUnderlyingPriceQuoteCurrency returns true if UnderlyingPriceQuoteCurrency is present, Tag 1526.
func (m DerivativeSecurityListRequest) HasUnderlyingPriceQuoteCurrency() bool {
	return m.Has(tag.UnderlyingPriceQuoteCurrency)
}

// HasDerivativePriceQuoteCurrency returns true if DerivativePriceQuoteCurrency is present, Tag 1576.
func (m DerivativeSecurityListRequest) HasDerivativePriceQuoteCurrency() bool {
	return m.Has(tag.DerivativePriceQuoteCurrency)
}

// HasUnderlyingUnitOfMeasureCurrency returns true if UnderlyingUnitOfMeasureCurrency is present, Tag 1718.
func (m DerivativeSecurityListRequest) HasUnderlyingUnitOfMeasureCurrency() bool {
	return m.Has(tag.UnderlyingUnitOfMeasureCurrency)
}

// HasUnderlyingPriceUnitOfMeasureCurrency returns true if UnderlyingPriceUnitOfMeasureCurrency is present, Tag 1719.
func (m DerivativeSecurityListRequest) HasUnderlyingPriceUnitOfMeasureCurrency() bool {
	return m.Has(tag.UnderlyingPriceUnitOfMeasureCurrency)
}

// HasDerivativeUnitOfMeasureCurrency returns true if DerivativeUnitOfMeasureCurrency is present, Tag 1722.
func (m DerivativeSecurityListRequest) HasDerivativeUnitOfMeasureCurrency() bool {
	return m.Has(tag.DerivativeUnitOfMeasureCurrency)
}

// HasDerivativePriceUnitOfMeasureCurrency returns true if DerivativePriceUnitOfMeasureCurrency is present, Tag 1723.
func (m DerivativeSecurityListRequest) HasDerivativePriceUnitOfMeasureCurrency() bool {
	return m.Has(tag.DerivativePriceUnitOfMeasureCurrency)
}

// HasUnderlyingContractPriceRefMonth returns true if UnderlyingContractPriceRefMonth is present, Tag 1837.
func (m DerivativeSecurityListRequest) HasUnderlyingContractPriceRefMonth() bool {
	return m.Has(tag.UnderlyingContractPriceRefMonth)
}

// HasUnderlyingSecurityXMLLen returns true if UnderlyingSecurityXMLLen is present, Tag 1874.
func (m DerivativeSecurityListRequest) HasUnderlyingSecurityXMLLen() bool {
	return m.Has(tag.UnderlyingSecurityXMLLen)
}

// HasUnderlyingSecurityXML returns true if UnderlyingSecurityXML is present, Tag 1875.
func (m DerivativeSecurityListRequest) HasUnderlyingSecurityXML() bool {
	return m.Has(tag.UnderlyingSecurityXML)
}

// HasUnderlyingSecurityXMLSchema returns true if UnderlyingSecurityXMLSchema is present, Tag 1876.
func (m DerivativeSecurityListRequest) HasUnderlyingSecurityXMLSchema() bool {
	return m.Has(tag.UnderlyingSecurityXMLSchema)
}

// HasNoUnderlyingEvents returns true if NoUnderlyingEvents is present, Tag 1981.
func (m DerivativeSecurityListRequest) HasNoUnderlyingEvents() bool {
	return m.Has(tag.NoUnderlyingEvents)
}

// HasUnderlyingConstituentWeight returns true if UnderlyingConstituentWeight is present, Tag 1988.
func (m DerivativeSecurityListRequest) HasUnderlyingConstituentWeight() bool {
	return m.Has(tag.UnderlyingConstituentWeight)
}

// HasUnderlyingCouponType returns true if UnderlyingCouponType is present, Tag 1989.
func (m DerivativeSecurityListRequest) HasUnderlyingCouponType() bool {
	return m.Has(tag.UnderlyingCouponType)
}

// HasUnderlyingTotalIssuedAmount returns true if UnderlyingTotalIssuedAmount is present, Tag 1990.
func (m DerivativeSecurityListRequest) HasUnderlyingTotalIssuedAmount() bool {
	return m.Has(tag.UnderlyingTotalIssuedAmount)
}

// HasUnderlyingCouponFrequencyPeriod returns true if UnderlyingCouponFrequencyPeriod is present, Tag 1991.
func (m DerivativeSecurityListRequest) HasUnderlyingCouponFrequencyPeriod() bool {
	return m.Has(tag.UnderlyingCouponFrequencyPeriod)
}

// HasUnderlyingCouponFrequencyUnit returns true if UnderlyingCouponFrequencyUnit is present, Tag 1992.
func (m DerivativeSecurityListRequest) HasUnderlyingCouponFrequencyUnit() bool {
	return m.Has(tag.UnderlyingCouponFrequencyUnit)
}

// HasUnderlyingCouponDayCount returns true if UnderlyingCouponDayCount is present, Tag 1993.
func (m DerivativeSecurityListRequest) HasUnderlyingCouponDayCount() bool {
	return m.Has(tag.UnderlyingCouponDayCount)
}

// HasUnderlyingObligationID returns true if UnderlyingObligationID is present, Tag 1994.
func (m DerivativeSecurityListRequest) HasUnderlyingObligationID() bool {
	return m.Has(tag.UnderlyingObligationID)
}

// HasUnderlyingObligationIDSource returns true if UnderlyingObligationIDSource is present, Tag 1995.
func (m DerivativeSecurityListRequest) HasUnderlyingObligationIDSource() bool {
	return m.Has(tag.UnderlyingObligationIDSource)
}

// HasUnderlyingEquityID returns true if UnderlyingEquityID is present, Tag 1996.
func (m DerivativeSecurityListRequest) HasUnderlyingEquityID() bool {
	return m.Has(tag.UnderlyingEquityID)
}

// HasUnderlyingEquityIDSource returns true if UnderlyingEquityIDSource is present, Tag 1997.
func (m DerivativeSecurityListRequest) HasUnderlyingEquityIDSource() bool {
	return m.Has(tag.UnderlyingEquityIDSource)
}

// HasUnderlyingLienSeniority returns true if UnderlyingLienSeniority is present, Tag 1998.
func (m DerivativeSecurityListRequest) HasUnderlyingLienSeniority() bool {
	return m.Has(tag.UnderlyingLienSeniority)
}

// HasUnderlyingLoanFacility returns true if UnderlyingLoanFacility is present, Tag 1999.
func (m DerivativeSecurityListRequest) HasUnderlyingLoanFacility() bool {
	return m.Has(tag.UnderlyingLoanFacility)
}

// HasUnderlyingReferenceEntityType returns true if UnderlyingReferenceEntityType is present, Tag 2000.
func (m DerivativeSecurityListRequest) HasUnderlyingReferenceEntityType() bool {
	return m.Has(tag.UnderlyingReferenceEntityType)
}

// HasUnderlyingIndexSeries returns true if UnderlyingIndexSeries is present, Tag 2003.
func (m DerivativeSecurityListRequest) HasUnderlyingIndexSeries() bool {
	return m.Has(tag.UnderlyingIndexSeries)
}

// HasUnderlyingIndexAnnexVersion returns true if UnderlyingIndexAnnexVersion is present, Tag 2004.
func (m DerivativeSecurityListRequest) HasUnderlyingIndexAnnexVersion() bool {
	return m.Has(tag.UnderlyingIndexAnnexVersion)
}

// HasUnderlyingIndexAnnexDate returns true if UnderlyingIndexAnnexDate is present, Tag 2005.
func (m DerivativeSecurityListRequest) HasUnderlyingIndexAnnexDate() bool {
	return m.Has(tag.UnderlyingIndexAnnexDate)
}

// HasUnderlyingIndexAnnexSource returns true if UnderlyingIndexAnnexSource is present, Tag 2006.
func (m DerivativeSecurityListRequest) HasUnderlyingIndexAnnexSource() bool {
	return m.Has(tag.UnderlyingIndexAnnexSource)
}

// HasUnderlyingProductComplex returns true if UnderlyingProductComplex is present, Tag 2007.
func (m DerivativeSecurityListRequest) HasUnderlyingProductComplex() bool {
	return m.Has(tag.UnderlyingProductComplex)
}

// HasUnderlyingSecurityGroup returns true if UnderlyingSecurityGroup is present, Tag 2008.
func (m DerivativeSecurityListRequest) HasUnderlyingSecurityGroup() bool {
	return m.Has(tag.UnderlyingSecurityGroup)
}

// HasUnderlyingSettleOnOpenFlag returns true if UnderlyingSettleOnOpenFlag is present, Tag 2009.
func (m DerivativeSecurityListRequest) HasUnderlyingSettleOnOpenFlag() bool {
	return m.Has(tag.UnderlyingSettleOnOpenFlag)
}

// HasUnderlyingAssignmentMethod returns true if UnderlyingAssignmentMethod is present, Tag 2010.
func (m DerivativeSecurityListRequest) HasUnderlyingAssignmentMethod() bool {
	return m.Has(tag.UnderlyingAssignmentMethod)
}

// HasUnderlyingSecurityStatus returns true if UnderlyingSecurityStatus is present, Tag 2011.
func (m DerivativeSecurityListRequest) HasUnderlyingSecurityStatus() bool {
	return m.Has(tag.UnderlyingSecurityStatus)
}

// HasUnderlyingObligationType returns true if UnderlyingObligationType is present, Tag 2012.
func (m DerivativeSecurityListRequest) HasUnderlyingObligationType() bool {
	return m.Has(tag.UnderlyingObligationType)
}

// HasUnderlyingAssetClass returns true if UnderlyingAssetClass is present, Tag 2013.
func (m DerivativeSecurityListRequest) HasUnderlyingAssetClass() bool {
	return m.Has(tag.UnderlyingAssetClass)
}

// HasUnderlyingAssetSubClass returns true if UnderlyingAssetSubClass is present, Tag 2014.
func (m DerivativeSecurityListRequest) HasUnderlyingAssetSubClass() bool {
	return m.Has(tag.UnderlyingAssetSubClass)
}

// HasUnderlyingAssetType returns true if UnderlyingAssetType is present, Tag 2015.
func (m DerivativeSecurityListRequest) HasUnderlyingAssetType() bool {
	return m.Has(tag.UnderlyingAssetType)
}

// HasUnderlyingSwapClass returns true if UnderlyingSwapClass is present, Tag 2016.
func (m DerivativeSecurityListRequest) HasUnderlyingSwapClass() bool {
	return m.Has(tag.UnderlyingSwapClass)
}

// HasUnderlyingNthToDefault returns true if UnderlyingNthToDefault is present, Tag 2017.
func (m DerivativeSecurityListRequest) HasUnderlyingNthToDefault() bool {
	return m.Has(tag.UnderlyingNthToDefault)
}

// HasUnderlyingMthToDefault returns true if UnderlyingMthToDefault is present, Tag 2018.
func (m DerivativeSecurityListRequest) HasUnderlyingMthToDefault() bool {
	return m.Has(tag.UnderlyingMthToDefault)
}

// HasUnderlyingSettledEntityMatrixSource returns true if UnderlyingSettledEntityMatrixSource is present, Tag 2019.
func (m DerivativeSecurityListRequest) HasUnderlyingSettledEntityMatrixSource() bool {
	return m.Has(tag.UnderlyingSettledEntityMatrixSource)
}

// HasUnderlyingSettledEntityMatrixPublicationDate returns true if UnderlyingSettledEntityMatrixPublicationDate is present, Tag 2020.
func (m DerivativeSecurityListRequest) HasUnderlyingSettledEntityMatrixPublicationDate() bool {
	return m.Has(tag.UnderlyingSettledEntityMatrixPublicationDate)
}

// HasUnderlyingStrikeMultiplier returns true if UnderlyingStrikeMultiplier is present, Tag 2021.
func (m DerivativeSecurityListRequest) HasUnderlyingStrikeMultiplier() bool {
	return m.Has(tag.UnderlyingStrikeMultiplier)
}

// HasUnderlyingStrikeValue returns true if UnderlyingStrikeValue is present, Tag 2022.
func (m DerivativeSecurityListRequest) HasUnderlyingStrikeValue() bool {
	return m.Has(tag.UnderlyingStrikeValue)
}

// HasUnderlyingStrikePriceDeterminationMethod returns true if UnderlyingStrikePriceDeterminationMethod is present, Tag 2023.
func (m DerivativeSecurityListRequest) HasUnderlyingStrikePriceDeterminationMethod() bool {
	return m.Has(tag.UnderlyingStrikePriceDeterminationMethod)
}

// HasUnderlyingStrikePriceBoundaryMethod returns true if UnderlyingStrikePriceBoundaryMethod is present, Tag 2024.
func (m DerivativeSecurityListRequest) HasUnderlyingStrikePriceBoundaryMethod() bool {
	return m.Has(tag.UnderlyingStrikePriceBoundaryMethod)
}

// HasUnderlyingStrikePriceBoundaryPrecision returns true if UnderlyingStrikePriceBoundaryPrecision is present, Tag 2025.
func (m DerivativeSecurityListRequest) HasUnderlyingStrikePriceBoundaryPrecision() bool {
	return m.Has(tag.UnderlyingStrikePriceBoundaryPrecision)
}

// HasUnderlyingMinPriceIncrement returns true if UnderlyingMinPriceIncrement is present, Tag 2026.
func (m DerivativeSecurityListRequest) HasUnderlyingMinPriceIncrement() bool {
	return m.Has(tag.UnderlyingMinPriceIncrement)
}

// HasUnderlyingMinPriceIncrementAmount returns true if UnderlyingMinPriceIncrementAmount is present, Tag 2027.
func (m DerivativeSecurityListRequest) HasUnderlyingMinPriceIncrementAmount() bool {
	return m.Has(tag.UnderlyingMinPriceIncrementAmount)
}

// HasUnderlyingOptPayoutType returns true if UnderlyingOptPayoutType is present, Tag 2028.
func (m DerivativeSecurityListRequest) HasUnderlyingOptPayoutType() bool {
	return m.Has(tag.UnderlyingOptPayoutType)
}

// HasUnderlyingOptPayoutAmount returns true if UnderlyingOptPayoutAmount is present, Tag 2029.
func (m DerivativeSecurityListRequest) HasUnderlyingOptPayoutAmount() bool {
	return m.Has(tag.UnderlyingOptPayoutAmount)
}

// HasUnderlyingPriceQuoteMethod returns true if UnderlyingPriceQuoteMethod is present, Tag 2030.
func (m DerivativeSecurityListRequest) HasUnderlyingPriceQuoteMethod() bool {
	return m.Has(tag.UnderlyingPriceQuoteMethod)
}

// HasUnderlyingValuationMethod returns true if UnderlyingValuationMethod is present, Tag 2031.
func (m DerivativeSecurityListRequest) HasUnderlyingValuationMethod() bool {
	return m.Has(tag.UnderlyingValuationMethod)
}

// HasUnderlyingListMethod returns true if UnderlyingListMethod is present, Tag 2032.
func (m DerivativeSecurityListRequest) HasUnderlyingListMethod() bool {
	return m.Has(tag.UnderlyingListMethod)
}

// HasUnderlyingCapPrice returns true if UnderlyingCapPrice is present, Tag 2033.
func (m DerivativeSecurityListRequest) HasUnderlyingCapPrice() bool {
	return m.Has(tag.UnderlyingCapPrice)
}

// HasUnderlyingFloorPrice returns true if UnderlyingFloorPrice is present, Tag 2034.
func (m DerivativeSecurityListRequest) HasUnderlyingFloorPrice() bool {
	return m.Has(tag.UnderlyingFloorPrice)
}

// HasUnderlyingFlexibleIndicator returns true if UnderlyingFlexibleIndicator is present, Tag 2035.
func (m DerivativeSecurityListRequest) HasUnderlyingFlexibleIndicator() bool {
	return m.Has(tag.UnderlyingFlexibleIndicator)
}

// HasUnderlyingFlexProductEligibilityIndicator returns true if UnderlyingFlexProductEligibilityIndicator is present, Tag 2036.
func (m DerivativeSecurityListRequest) HasUnderlyingFlexProductEligibilityIndicator() bool {
	return m.Has(tag.UnderlyingFlexProductEligibilityIndicator)
}

// HasUnderlyingPositionLimit returns true if UnderlyingPositionLimit is present, Tag 2037.
func (m DerivativeSecurityListRequest) HasUnderlyingPositionLimit() bool {
	return m.Has(tag.UnderlyingPositionLimit)
}

// HasUnderlyingNTPositionLimit returns true if UnderlyingNTPositionLimit is present, Tag 2038.
func (m DerivativeSecurityListRequest) HasUnderlyingNTPositionLimit() bool {
	return m.Has(tag.UnderlyingNTPositionLimit)
}

// HasUnderlyingPool returns true if UnderlyingPool is present, Tag 2039.
func (m DerivativeSecurityListRequest) HasUnderlyingPool() bool {
	return m.Has(tag.UnderlyingPool)
}

// HasUnderlyingContractSettlMonth returns true if UnderlyingContractSettlMonth is present, Tag 2040.
func (m DerivativeSecurityListRequest) HasUnderlyingContractSettlMonth() bool {
	return m.Has(tag.UnderlyingContractSettlMonth)
}

// HasUnderlyingDatedDate returns true if UnderlyingDatedDate is present, Tag 2041.
func (m DerivativeSecurityListRequest) HasUnderlyingDatedDate() bool {
	return m.Has(tag.UnderlyingDatedDate)
}

// HasUnderlyingInterestAccrualDate returns true if UnderlyingInterestAccrualDate is present, Tag 2042.
func (m DerivativeSecurityListRequest) HasUnderlyingInterestAccrualDate() bool {
	return m.Has(tag.UnderlyingInterestAccrualDate)
}

// HasUnderlyingShortSaleRestriction returns true if UnderlyingShortSaleRestriction is present, Tag 2043.
func (m DerivativeSecurityListRequest) HasUnderlyingShortSaleRestriction() bool {
	return m.Has(tag.UnderlyingShortSaleRestriction)
}

// HasUnderlyingRefTickTableID returns true if UnderlyingRefTickTableID is present, Tag 2044.
func (m DerivativeSecurityListRequest) HasUnderlyingRefTickTableID() bool {
	return m.Has(tag.UnderlyingRefTickTableID)
}

// HasNoUnderlyingComplexEvents returns true if NoUnderlyingComplexEvents is present, Tag 2045.
func (m DerivativeSecurityListRequest) HasNoUnderlyingComplexEvents() bool {
	return m.Has(tag.NoUnderlyingComplexEvents)
}

// HasNoUnderlyingSecondaryAssetClasses returns true if NoUnderlyingSecondaryAssetClasses is present, Tag 2080.
func (m DerivativeSecurityListRequest) HasNoUnderlyingSecondaryAssetClasses() bool {
	return m.Has(tag.NoUnderlyingSecondaryAssetClasses)
}

// HasUnderlyingSettlRateIndex returns true if UnderlyingSettlRateIndex is present, Tag 2284.
func (m DerivativeSecurityListRequest) HasUnderlyingSettlRateIndex() bool {
	return m.Has(tag.UnderlyingSettlRateIndex)
}

// HasUnderlyingSettlRateIndexLocation returns true if UnderlyingSettlRateIndexLocation is present, Tag 2285.
func (m DerivativeSecurityListRequest) HasUnderlyingSettlRateIndexLocation() bool {
	return m.Has(tag.UnderlyingSettlRateIndexLocation)
}

// HasUnderlyingOptionExpirationDesc returns true if UnderlyingOptionExpirationDesc is present, Tag 2286.
func (m DerivativeSecurityListRequest) HasUnderlyingOptionExpirationDesc() bool {
	return m.Has(tag.UnderlyingOptionExpirationDesc)
}

// HasEncodedUnderlyingOptionExpirationDescLen returns true if EncodedUnderlyingOptionExpirationDescLen is present, Tag 2287.
func (m DerivativeSecurityListRequest) HasEncodedUnderlyingOptionExpirationDescLen() bool {
	return m.Has(tag.EncodedUnderlyingOptionExpirationDescLen)
}

// HasEncodedUnderlyingOptionExpirationDesc returns true if EncodedUnderlyingOptionExpirationDesc is present, Tag 2288.
func (m DerivativeSecurityListRequest) HasEncodedUnderlyingOptionExpirationDesc() bool {
	return m.Has(tag.EncodedUnderlyingOptionExpirationDesc)
}

// HasUnderlyingSwapSubClass returns true if UnderlyingSwapSubClass is present, Tag 2289.
func (m DerivativeSecurityListRequest) HasUnderlyingSwapSubClass() bool {
	return m.Has(tag.UnderlyingSwapSubClass)
}

// HasUnderlyingStrikeUnitOfMeasure returns true if UnderlyingStrikeUnitOfMeasure is present, Tag 2290.
func (m DerivativeSecurityListRequest) HasUnderlyingStrikeUnitOfMeasure() bool {
	return m.Has(tag.UnderlyingStrikeUnitOfMeasure)
}

// HasUnderlyingStrikeIndex returns true if UnderlyingStrikeIndex is present, Tag 2291.
func (m DerivativeSecurityListRequest) HasUnderlyingStrikeIndex() bool {
	return m.Has(tag.UnderlyingStrikeIndex)
}

// HasUnderlyingStrikeIndexSpread returns true if UnderlyingStrikeIndexSpread is present, Tag 2292.
func (m DerivativeSecurityListRequest) HasUnderlyingStrikeIndexSpread() bool {
	return m.Has(tag.UnderlyingStrikeIndexSpread)
}

// HasUnderlyingValuationSource returns true if UnderlyingValuationSource is present, Tag 2293.
func (m DerivativeSecurityListRequest) HasUnderlyingValuationSource() bool {
	return m.Has(tag.UnderlyingValuationSource)
}

// HasUnderlyingValuationReferenceModel returns true if UnderlyingValuationReferenceModel is present, Tag 2294.
func (m DerivativeSecurityListRequest) HasUnderlyingValuationReferenceModel() bool {
	return m.Has(tag.UnderlyingValuationReferenceModel)
}

// HasUnderlyingStrategyType returns true if UnderlyingStrategyType is present, Tag 2295.
func (m DerivativeSecurityListRequest) HasUnderlyingStrategyType() bool {
	return m.Has(tag.UnderlyingStrategyType)
}

// HasUnderlyingCommonPricingIndicator returns true if UnderlyingCommonPricingIndicator is present, Tag 2296.
func (m DerivativeSecurityListRequest) HasUnderlyingCommonPricingIndicator() bool {
	return m.Has(tag.UnderlyingCommonPricingIndicator)
}

// HasUnderlyingSettlDisruptionProvision returns true if UnderlyingSettlDisruptionProvision is present, Tag 2297.
func (m DerivativeSecurityListRequest) HasUnderlyingSettlDisruptionProvision() bool {
	return m.Has(tag.UnderlyingSettlDisruptionProvision)
}

// HasUnderlyingInstrumentRoundingDirection returns true if UnderlyingInstrumentRoundingDirection is present, Tag 2298.
func (m DerivativeSecurityListRequest) HasUnderlyingInstrumentRoundingDirection() bool {
	return m.Has(tag.UnderlyingInstrumentRoundingDirection)
}

// HasUnderlyingInstrumentRoundingPrecision returns true if UnderlyingInstrumentRoundingPrecision is present, Tag 2299.
func (m DerivativeSecurityListRequest) HasUnderlyingInstrumentRoundingPrecision() bool {
	return m.Has(tag.UnderlyingInstrumentRoundingPrecision)
}

// HasNoUnderlyingAssetAttributes returns true if NoUnderlyingAssetAttributes is present, Tag 2312.
func (m DerivativeSecurityListRequest) HasNoUnderlyingAssetAttributes() bool {
	return m.Has(tag.NoUnderlyingAssetAttributes)
}

// HasUnderlyingTradingUnitPeriodMultiplier returns true if UnderlyingTradingUnitPeriodMultiplier is present, Tag 2363.
func (m DerivativeSecurityListRequest) HasUnderlyingTradingUnitPeriodMultiplier() bool {
	return m.Has(tag.UnderlyingTradingUnitPeriodMultiplier)
}

// HasUnderlyingAssetGroup returns true if UnderlyingAssetGroup is present, Tag 2491.
func (m DerivativeSecurityListRequest) HasUnderlyingAssetGroup() bool {
	return m.Has(tag.UnderlyingAssetGroup)
}

// HasUnderlyingNotional returns true if UnderlyingNotional is present, Tag 2614.
func (m DerivativeSecurityListRequest) HasUnderlyingNotional() bool {
	return m.Has(tag.UnderlyingNotional)
}

// HasUnderlyingNotionalCurrency returns true if UnderlyingNotionalCurrency is present, Tag 2615.
func (m DerivativeSecurityListRequest) HasUnderlyingNotionalCurrency() bool {
	return m.Has(tag.UnderlyingNotionalCurrency)
}

// HasUnderlyingNotionalDeterminationMethod returns true if UnderlyingNotionalDeterminationMethod is present, Tag 2616.
func (m DerivativeSecurityListRequest) HasUnderlyingNotionalDeterminationMethod() bool {
	return m.Has(tag.UnderlyingNotionalDeterminationMethod)
}

// HasUnderlyingNotionalAdjustments returns true if UnderlyingNotionalAdjustments is present, Tag 2617.
func (m DerivativeSecurityListRequest) HasUnderlyingNotionalAdjustments() bool {
	return m.Has(tag.UnderlyingNotionalAdjustments)
}

// HasUnderlyingNotionalXIDRef returns true if UnderlyingNotionalXIDRef is present, Tag 2619.
func (m DerivativeSecurityListRequest) HasUnderlyingNotionalXIDRef() bool {
	return m.Has(tag.UnderlyingNotionalXIDRef)
}

// HasUnderlyingFutureID returns true if UnderlyingFutureID is present, Tag 2620.
func (m DerivativeSecurityListRequest) HasUnderlyingFutureID() bool {
	return m.Has(tag.UnderlyingFutureID)
}

// HasUnderlyingFutureIDSource returns true if UnderlyingFutureIDSource is present, Tag 2621.
func (m DerivativeSecurityListRequest) HasUnderlyingFutureIDSource() bool {
	return m.Has(tag.UnderlyingFutureIDSource)
}

// HasUnderlyingStrikeIndexCurvePoint returns true if UnderlyingStrikeIndexCurvePoint is present, Tag 2622.
func (m DerivativeSecurityListRequest) HasUnderlyingStrikeIndexCurvePoint() bool {
	return m.Has(tag.UnderlyingStrikeIndexCurvePoint)
}

// HasUnderlyingStrikeIndexQuote returns true if UnderlyingStrikeIndexQuote is present, Tag 2623.
func (m DerivativeSecurityListRequest) HasUnderlyingStrikeIndexQuote() bool {
	return m.Has(tag.UnderlyingStrikeIndexQuote)
}

// HasUnderlyingExtraordinaryEventAdjustmentMethod returns true if UnderlyingExtraordinaryEventAdjustmentMethod is present, Tag 2624.
func (m DerivativeSecurityListRequest) HasUnderlyingExtraordinaryEventAdjustmentMethod() bool {
	return m.Has(tag.UnderlyingExtraordinaryEventAdjustmentMethod)
}

// HasUnderlyingExchangeLookAlike returns true if UnderlyingExchangeLookAlike is present, Tag 2625.
func (m DerivativeSecurityListRequest) HasUnderlyingExchangeLookAlike() bool {
	return m.Has(tag.UnderlyingExchangeLookAlike)
}

// HasUnderlyingAverageVolumeLimitationPercentage returns true if UnderlyingAverageVolumeLimitationPercentage is present, Tag 2626.
func (m DerivativeSecurityListRequest) HasUnderlyingAverageVolumeLimitationPercentage() bool {
	return m.Has(tag.UnderlyingAverageVolumeLimitationPercentage)
}

// HasUnderlyingAverageVolumeLimitationPeriodDays returns true if UnderlyingAverageVolumeLimitationPeriodDays is present, Tag 2627.
func (m DerivativeSecurityListRequest) HasUnderlyingAverageVolumeLimitationPeriodDays() bool {
	return m.Has(tag.UnderlyingAverageVolumeLimitationPeriodDays)
}

// HasUnderlyingDepositoryReceiptIndicator returns true if UnderlyingDepositoryReceiptIndicator is present, Tag 2628.
func (m DerivativeSecurityListRequest) HasUnderlyingDepositoryReceiptIndicator() bool {
	return m.Has(tag.UnderlyingDepositoryReceiptIndicator)
}

// HasUnderlyingOpenUnits returns true if UnderlyingOpenUnits is present, Tag 2629.
func (m DerivativeSecurityListRequest) HasUnderlyingOpenUnits() bool {
	return m.Has(tag.UnderlyingOpenUnits)
}

// HasUnderlyingBasketDivisor returns true if UnderlyingBasketDivisor is present, Tag 2630.
func (m DerivativeSecurityListRequest) HasUnderlyingBasketDivisor() bool {
	return m.Has(tag.UnderlyingBasketDivisor)
}

// HasUnderlyingInstrumentXID returns true if UnderlyingInstrumentXID is present, Tag 2631.
func (m DerivativeSecurityListRequest) HasUnderlyingInstrumentXID() bool {
	return m.Has(tag.UnderlyingInstrumentXID)
}

// HasUnderlyingInTheMoneyCondition returns true if UnderlyingInTheMoneyCondition is present, Tag 2683.
func (m DerivativeSecurityListRequest) HasUnderlyingInTheMoneyCondition() bool {
	return m.Has(tag.UnderlyingInTheMoneyCondition)
}

// HasDerivativeInTheMoneyCondition returns true if DerivativeInTheMoneyCondition is present, Tag 2684.
func (m DerivativeSecurityListRequest) HasDerivativeInTheMoneyCondition() bool {
	return m.Has(tag.DerivativeInTheMoneyCondition)
}

// HasUnderlyingContraryInstructionEligibilityIndicator returns true if UnderlyingContraryInstructionEligibilityIndicator is present, Tag 2687.
func (m DerivativeSecurityListRequest) HasUnderlyingContraryInstructionEligibilityIndicator() bool {
	return m.Has(tag.UnderlyingContraryInstructionEligibilityIndicator)
}

// HasDerivativeContraryInstructionEligibilityIndicator returns true if DerivativeContraryInstructionEligibilityIndicator is present, Tag 2688.
func (m DerivativeSecurityListRequest) HasDerivativeContraryInstructionEligibilityIndicator() bool {
	return m.Has(tag.DerivativeContraryInstructionEligibilityIndicator)
}

// HasUnderlyingFinancialInstrumentFullName returns true if UnderlyingFinancialInstrumentFullName is present, Tag 2720.
func (m DerivativeSecurityListRequest) HasUnderlyingFinancialInstrumentFullName() bool {
	return m.Has(tag.UnderlyingFinancialInstrumentFullName)
}

// HasEncodedUnderlyingFinancialInstrumentFullNameLen returns true if EncodedUnderlyingFinancialInstrumentFullNameLen is present, Tag 2721.
func (m DerivativeSecurityListRequest) HasEncodedUnderlyingFinancialInstrumentFullNameLen() bool {
	return m.Has(tag.EncodedUnderlyingFinancialInstrumentFullNameLen)
}

// HasEncodedUnderlyingFinancialInstrumentFullName returns true if EncodedUnderlyingFinancialInstrumentFullName is present, Tag 2722.
func (m DerivativeSecurityListRequest) HasEncodedUnderlyingFinancialInstrumentFullName() bool {
	return m.Has(tag.EncodedUnderlyingFinancialInstrumentFullName)
}

// HasUnderlyingIndexCurveUnit returns true if UnderlyingIndexCurveUnit is present, Tag 2723.
func (m DerivativeSecurityListRequest) HasUnderlyingIndexCurveUnit() bool {
	return m.Has(tag.UnderlyingIndexCurveUnit)
}

// HasUnderlyingIndexCurvePeriod returns true if UnderlyingIndexCurvePeriod is present, Tag 2724.
func (m DerivativeSecurityListRequest) HasUnderlyingIndexCurvePeriod() bool {
	return m.Has(tag.UnderlyingIndexCurvePeriod)
}

// HasUnderlyingFinancialInstrumentShortName returns true if UnderlyingFinancialInstrumentShortName is present, Tag 2742.
func (m DerivativeSecurityListRequest) HasUnderlyingFinancialInstrumentShortName() bool {
	return m.Has(tag.UnderlyingFinancialInstrumentShortName)
}

// HasUnderlyingAssetSubType returns true if UnderlyingAssetSubType is present, Tag 2744.
func (m DerivativeSecurityListRequest) HasUnderlyingAssetSubType() bool {
	return m.Has(tag.UnderlyingAssetSubType)
}

// HasUnderlyingDeliveryRouteOrCharter returns true if UnderlyingDeliveryRouteOrCharter is present, Tag 2756.
func (m DerivativeSecurityListRequest) HasUnderlyingDeliveryRouteOrCharter() bool {
	return m.Has(tag.UnderlyingDeliveryRouteOrCharter)
}

// HasUnderlyingReturnTrigger returns true if UnderlyingReturnTrigger is present, Tag 2757.
func (m DerivativeSecurityListRequest) HasUnderlyingReturnTrigger() bool {
	return m.Has(tag.UnderlyingReturnTrigger)
}

// HasUnderlyingID returns true if UnderlyingID is present, Tag 2874.
func (m DerivativeSecurityListRequest) HasUnderlyingID() bool {
	return m.Has(tag.UnderlyingID)
}

// HasUnderlyingCouponOtherDayCount returns true if UnderlyingCouponOtherDayCount is present, Tag 2881.
func (m DerivativeSecurityListRequest) HasUnderlyingCouponOtherDayCount() bool {
	return m.Has(tag.UnderlyingCouponOtherDayCount)
}

// HasUnderlyingAccruedInterestAmt returns true if UnderlyingAccruedInterestAmt is present, Tag 2885.
func (m DerivativeSecurityListRequest) HasUnderlyingAccruedInterestAmt() bool {
	return m.Has(tag.UnderlyingAccruedInterestAmt)
}

// HasUnderlyingNumDaysInterest returns true if UnderlyingNumDaysInterest is present, Tag 2886.
func (m DerivativeSecurityListRequest) HasUnderlyingNumDaysInterest() bool {
	return m.Has(tag.UnderlyingNumDaysInterest)
}

// HasDerivativeUPICode returns true if DerivativeUPICode is present, Tag 2892.
func (m DerivativeSecurityListRequest) HasDerivativeUPICode() bool {
	return m.Has(tag.DerivativeUPICode)
}

// HasUnderlyingUPICode returns true if UnderlyingUPICode is present, Tag 2894.
func (m DerivativeSecurityListRequest) HasUnderlyingUPICode() bool {
	return m.Has(tag.UnderlyingUPICode)
}

// HasNoUnderlyingStreams returns true if NoUnderlyingStreams is present, Tag 40540.
func (m DerivativeSecurityListRequest) HasNoUnderlyingStreams() bool {
	return m.Has(tag.NoUnderlyingStreams)
}

// HasNoUnderlyingBusinessCenters returns true if NoUnderlyingBusinessCenters is present, Tag 40962.
func (m DerivativeSecurityListRequest) HasNoUnderlyingBusinessCenters() bool {
	return m.Has(tag.NoUnderlyingBusinessCenters)
}

// HasUnderlyingBusinessDayConvention returns true if UnderlyingBusinessDayConvention is present, Tag 40964.
func (m DerivativeSecurityListRequest) HasUnderlyingBusinessDayConvention() bool {
	return m.Has(tag.UnderlyingBusinessDayConvention)
}

// HasUnderlyingDateRollConvention returns true if UnderlyingDateRollConvention is present, Tag 40965.
func (m DerivativeSecurityListRequest) HasUnderlyingDateRollConvention() bool {
	return m.Has(tag.UnderlyingDateRollConvention)
}

// HasUnderlyingProtectionTermXIDRef returns true if UnderlyingProtectionTermXIDRef is present, Tag 41314.
func (m DerivativeSecurityListRequest) HasUnderlyingProtectionTermXIDRef() bool {
	return m.Has(tag.UnderlyingProtectionTermXIDRef)
}

// HasUnderlyingSettlTermXIDRef returns true if UnderlyingSettlTermXIDRef is present, Tag 41315.
func (m DerivativeSecurityListRequest) HasUnderlyingSettlTermXIDRef() bool {
	return m.Has(tag.UnderlyingSettlTermXIDRef)
}

// HasUnderlyingExerciseDesc returns true if UnderlyingExerciseDesc is present, Tag 41810.
func (m DerivativeSecurityListRequest) HasUnderlyingExerciseDesc() bool {
	return m.Has(tag.UnderlyingExerciseDesc)
}

// HasEncodedUnderlyingExerciseDescLen returns true if EncodedUnderlyingExerciseDescLen is present, Tag 41811.
func (m DerivativeSecurityListRequest) HasEncodedUnderlyingExerciseDescLen() bool {
	return m.Has(tag.EncodedUnderlyingExerciseDescLen)
}

// HasEncodedUnderlyingExerciseDesc returns true if EncodedUnderlyingExerciseDesc is present, Tag 41812.
func (m DerivativeSecurityListRequest) HasEncodedUnderlyingExerciseDesc() bool {
	return m.Has(tag.EncodedUnderlyingExerciseDesc)
}

// HasUnderlyingAutomaticExerciseIndicator returns true if UnderlyingAutomaticExerciseIndicator is present, Tag 41813.
func (m DerivativeSecurityListRequest) HasUnderlyingAutomaticExerciseIndicator() bool {
	return m.Has(tag.UnderlyingAutomaticExerciseIndicator)
}

// HasUnderlyingAutomaticExerciseThresholdRate returns true if UnderlyingAutomaticExerciseThresholdRate is present, Tag 41814.
func (m DerivativeSecurityListRequest) HasUnderlyingAutomaticExerciseThresholdRate() bool {
	return m.Has(tag.UnderlyingAutomaticExerciseThresholdRate)
}

// HasUnderlyingExerciseConfirmationMethod returns true if UnderlyingExerciseConfirmationMethod is present, Tag 41815.
func (m DerivativeSecurityListRequest) HasUnderlyingExerciseConfirmationMethod() bool {
	return m.Has(tag.UnderlyingExerciseConfirmationMethod)
}

// HasUnderlyingManualNoticeBusinessCenter returns true if UnderlyingManualNoticeBusinessCenter is present, Tag 41816.
func (m DerivativeSecurityListRequest) HasUnderlyingManualNoticeBusinessCenter() bool {
	return m.Has(tag.UnderlyingManualNoticeBusinessCenter)
}

// HasUnderlyingFallbackExerciseIndicator returns true if UnderlyingFallbackExerciseIndicator is present, Tag 41817.
func (m DerivativeSecurityListRequest) HasUnderlyingFallbackExerciseIndicator() bool {
	return m.Has(tag.UnderlyingFallbackExerciseIndicator)
}

// HasUnderlyingLimitedRightToConfirmIndicator returns true if UnderlyingLimitedRightToConfirmIndicator is present, Tag 41818.
func (m DerivativeSecurityListRequest) HasUnderlyingLimitedRightToConfirmIndicator() bool {
	return m.Has(tag.UnderlyingLimitedRightToConfirmIndicator)
}

// HasUnderlyingExerciseSplitTicketIndicator returns true if UnderlyingExerciseSplitTicketIndicator is present, Tag 41819.
func (m DerivativeSecurityListRequest) HasUnderlyingExerciseSplitTicketIndicator() bool {
	return m.Has(tag.UnderlyingExerciseSplitTicketIndicator)
}

// HasNoUnderlyingOptionExerciseBusinessCenters returns true if NoUnderlyingOptionExerciseBusinessCenters is present, Tag 41820.
func (m DerivativeSecurityListRequest) HasNoUnderlyingOptionExerciseBusinessCenters() bool {
	return m.Has(tag.NoUnderlyingOptionExerciseBusinessCenters)
}

// HasUnderlyingOptionExerciseBusinessDayConvention returns true if UnderlyingOptionExerciseBusinessDayConvention is present, Tag 41822.
func (m DerivativeSecurityListRequest) HasUnderlyingOptionExerciseBusinessDayConvention() bool {
	return m.Has(tag.UnderlyingOptionExerciseBusinessDayConvention)
}

// HasUnderlyingOptionExerciseEarliestDateOffsetDayType returns true if UnderlyingOptionExerciseEarliestDateOffsetDayType is present, Tag 41823.
func (m DerivativeSecurityListRequest) HasUnderlyingOptionExerciseEarliestDateOffsetDayType() bool {
	return m.Has(tag.UnderlyingOptionExerciseEarliestDateOffsetDayType)
}

// HasUnderlyingOptionExerciseEarliestDateOffsetPeriod returns true if UnderlyingOptionExerciseEarliestDateOffsetPeriod is present, Tag 41824.
func (m DerivativeSecurityListRequest) HasUnderlyingOptionExerciseEarliestDateOffsetPeriod() bool {
	return m.Has(tag.UnderlyingOptionExerciseEarliestDateOffsetPeriod)
}

// HasUnderlyingOptionExerciseEarliestDateOffsetUnit returns true if UnderlyingOptionExerciseEarliestDateOffsetUnit is present, Tag 41825.
func (m DerivativeSecurityListRequest) HasUnderlyingOptionExerciseEarliestDateOffsetUnit() bool {
	return m.Has(tag.UnderlyingOptionExerciseEarliestDateOffsetUnit)
}

// HasUnderlyingOptionExerciseFrequencyPeriod returns true if UnderlyingOptionExerciseFrequencyPeriod is present, Tag 41826.
func (m DerivativeSecurityListRequest) HasUnderlyingOptionExerciseFrequencyPeriod() bool {
	return m.Has(tag.UnderlyingOptionExerciseFrequencyPeriod)
}

// HasUnderlyingOptionExerciseFrequencyUnit returns true if UnderlyingOptionExerciseFrequencyUnit is present, Tag 41827.
func (m DerivativeSecurityListRequest) HasUnderlyingOptionExerciseFrequencyUnit() bool {
	return m.Has(tag.UnderlyingOptionExerciseFrequencyUnit)
}

// HasUnderlyingOptionExerciseStartDateUnadjusted returns true if UnderlyingOptionExerciseStartDateUnadjusted is present, Tag 41828.
func (m DerivativeSecurityListRequest) HasUnderlyingOptionExerciseStartDateUnadjusted() bool {
	return m.Has(tag.UnderlyingOptionExerciseStartDateUnadjusted)
}

// HasUnderlyingOptionExerciseStartDateRelativeTo returns true if UnderlyingOptionExerciseStartDateRelativeTo is present, Tag 41829.
func (m DerivativeSecurityListRequest) HasUnderlyingOptionExerciseStartDateRelativeTo() bool {
	return m.Has(tag.UnderlyingOptionExerciseStartDateRelativeTo)
}

// HasUnderlyingOptionExerciseStartDateOffsetPeriod returns true if UnderlyingOptionExerciseStartDateOffsetPeriod is present, Tag 41830.
func (m DerivativeSecurityListRequest) HasUnderlyingOptionExerciseStartDateOffsetPeriod() bool {
	return m.Has(tag.UnderlyingOptionExerciseStartDateOffsetPeriod)
}

// HasUnderlyingOptionExerciseStartDateOffsetUnit returns true if UnderlyingOptionExerciseStartDateOffsetUnit is present, Tag 41831.
func (m DerivativeSecurityListRequest) HasUnderlyingOptionExerciseStartDateOffsetUnit() bool {
	return m.Has(tag.UnderlyingOptionExerciseStartDateOffsetUnit)
}

// HasUnderlyingOptionExerciseStartDateOffsetDayType returns true if UnderlyingOptionExerciseStartDateOffsetDayType is present, Tag 41832.
func (m DerivativeSecurityListRequest) HasUnderlyingOptionExerciseStartDateOffsetDayType() bool {
	return m.Has(tag.UnderlyingOptionExerciseStartDateOffsetDayType)
}

// HasUnderlyingOptionExerciseStartDateAdjusted returns true if UnderlyingOptionExerciseStartDateAdjusted is present, Tag 41833.
func (m DerivativeSecurityListRequest) HasUnderlyingOptionExerciseStartDateAdjusted() bool {
	return m.Has(tag.UnderlyingOptionExerciseStartDateAdjusted)
}

// HasUnderlyingOptionExerciseSkip returns true if UnderlyingOptionExerciseSkip is present, Tag 41834.
func (m DerivativeSecurityListRequest) HasUnderlyingOptionExerciseSkip() bool {
	return m.Has(tag.UnderlyingOptionExerciseSkip)
}

// HasUnderlyingOptionExerciseNominationDeadline returns true if UnderlyingOptionExerciseNominationDeadline is present, Tag 41835.
func (m DerivativeSecurityListRequest) HasUnderlyingOptionExerciseNominationDeadline() bool {
	return m.Has(tag.UnderlyingOptionExerciseNominationDeadline)
}

// HasUnderlyingOptionExerciseFirstDateUnadjusted returns true if UnderlyingOptionExerciseFirstDateUnadjusted is present, Tag 41836.
func (m DerivativeSecurityListRequest) HasUnderlyingOptionExerciseFirstDateUnadjusted() bool {
	return m.Has(tag.UnderlyingOptionExerciseFirstDateUnadjusted)
}

// HasUnderlyingOptionExerciseLastDateUnadjusted returns true if UnderlyingOptionExerciseLastDateUnadjusted is present, Tag 41837.
func (m DerivativeSecurityListRequest) HasUnderlyingOptionExerciseLastDateUnadjusted() bool {
	return m.Has(tag.UnderlyingOptionExerciseLastDateUnadjusted)
}

// HasUnderlyingOptionExerciseEarliestTime returns true if UnderlyingOptionExerciseEarliestTime is present, Tag 41838.
func (m DerivativeSecurityListRequest) HasUnderlyingOptionExerciseEarliestTime() bool {
	return m.Has(tag.UnderlyingOptionExerciseEarliestTime)
}

// HasUnderlyingOptionExerciseLatestTime returns true if UnderlyingOptionExerciseLatestTime is present, Tag 41839.
func (m DerivativeSecurityListRequest) HasUnderlyingOptionExerciseLatestTime() bool {
	return m.Has(tag.UnderlyingOptionExerciseLatestTime)
}

// HasUnderlyingOptionExerciseTimeBusinessCenter returns true if UnderlyingOptionExerciseTimeBusinessCenter is present, Tag 41840.
func (m DerivativeSecurityListRequest) HasUnderlyingOptionExerciseTimeBusinessCenter() bool {
	return m.Has(tag.UnderlyingOptionExerciseTimeBusinessCenter)
}

// HasNoUnderlyingOptionExerciseDates returns true if NoUnderlyingOptionExerciseDates is present, Tag 41841.
func (m DerivativeSecurityListRequest) HasNoUnderlyingOptionExerciseDates() bool {
	return m.Has(tag.NoUnderlyingOptionExerciseDates)
}

// HasNoUnderlyingOptionExerciseExpirationDateBusinessCenters returns true if NoUnderlyingOptionExerciseExpirationDateBusinessCenters is present, Tag 41844.
func (m DerivativeSecurityListRequest) HasNoUnderlyingOptionExerciseExpirationDateBusinessCenters() bool {
	return m.Has(tag.NoUnderlyingOptionExerciseExpirationDateBusinessCenters)
}

// HasUnderlyingOptionExerciseExpirationDateBusinessDayConvention returns true if UnderlyingOptionExerciseExpirationDateBusinessDayConvention is present, Tag 41846.
func (m DerivativeSecurityListRequest) HasUnderlyingOptionExerciseExpirationDateBusinessDayConvention() bool {
	return m.Has(tag.UnderlyingOptionExerciseExpirationDateBusinessDayConvention)
}

// HasUnderlyingOptionExerciseExpirationDateRelativeTo returns true if UnderlyingOptionExerciseExpirationDateRelativeTo is present, Tag 41847.
func (m DerivativeSecurityListRequest) HasUnderlyingOptionExerciseExpirationDateRelativeTo() bool {
	return m.Has(tag.UnderlyingOptionExerciseExpirationDateRelativeTo)
}

// HasUnderlyingOptionExerciseExpirationDateOffsetPeriod returns true if UnderlyingOptionExerciseExpirationDateOffsetPeriod is present, Tag 41848.
func (m DerivativeSecurityListRequest) HasUnderlyingOptionExerciseExpirationDateOffsetPeriod() bool {
	return m.Has(tag.UnderlyingOptionExerciseExpirationDateOffsetPeriod)
}

// HasUnderlyingOptionExerciseExpirationDateOffsetUnit returns true if UnderlyingOptionExerciseExpirationDateOffsetUnit is present, Tag 41849.
func (m DerivativeSecurityListRequest) HasUnderlyingOptionExerciseExpirationDateOffsetUnit() bool {
	return m.Has(tag.UnderlyingOptionExerciseExpirationDateOffsetUnit)
}

// HasUnderlyingOptionExerciseExpirationFrequencyPeriod returns true if UnderlyingOptionExerciseExpirationFrequencyPeriod is present, Tag 41850.
func (m DerivativeSecurityListRequest) HasUnderlyingOptionExerciseExpirationFrequencyPeriod() bool {
	return m.Has(tag.UnderlyingOptionExerciseExpirationFrequencyPeriod)
}

// HasUnderlyingOptionExerciseExpirationFrequencyUnit returns true if UnderlyingOptionExerciseExpirationFrequencyUnit is present, Tag 41851.
func (m DerivativeSecurityListRequest) HasUnderlyingOptionExerciseExpirationFrequencyUnit() bool {
	return m.Has(tag.UnderlyingOptionExerciseExpirationFrequencyUnit)
}

// HasUnderlyingOptionExerciseExpirationRollConvention returns true if UnderlyingOptionExerciseExpirationRollConvention is present, Tag 41852.
func (m DerivativeSecurityListRequest) HasUnderlyingOptionExerciseExpirationRollConvention() bool {
	return m.Has(tag.UnderlyingOptionExerciseExpirationRollConvention)
}

// HasUnderlyingOptionExerciseExpirationDateOffsetDayType returns true if UnderlyingOptionExerciseExpirationDateOffsetDayType is present, Tag 41853.
func (m DerivativeSecurityListRequest) HasUnderlyingOptionExerciseExpirationDateOffsetDayType() bool {
	return m.Has(tag.UnderlyingOptionExerciseExpirationDateOffsetDayType)
}

// HasUnderlyingOptionExerciseExpirationTime returns true if UnderlyingOptionExerciseExpirationTime is present, Tag 41854.
func (m DerivativeSecurityListRequest) HasUnderlyingOptionExerciseExpirationTime() bool {
	return m.Has(tag.UnderlyingOptionExerciseExpirationTime)
}

// HasUnderlyingOptionExerciseExpirationTimeBusinessCenter returns true if UnderlyingOptionExerciseExpirationTimeBusinessCenter is present, Tag 41855.
func (m DerivativeSecurityListRequest) HasUnderlyingOptionExerciseExpirationTimeBusinessCenter() bool {
	return m.Has(tag.UnderlyingOptionExerciseExpirationTimeBusinessCenter)
}

// HasNoUnderlyingOptionExerciseExpirationDates returns true if NoUnderlyingOptionExerciseExpirationDates is present, Tag 41856.
func (m DerivativeSecurityListRequest) HasNoUnderlyingOptionExerciseExpirationDates() bool {
	return m.Has(tag.NoUnderlyingOptionExerciseExpirationDates)
}

// HasUnderlyingMarketDisruptionProvision returns true if UnderlyingMarketDisruptionProvision is present, Tag 41859.
func (m DerivativeSecurityListRequest) HasUnderlyingMarketDisruptionProvision() bool {
	return m.Has(tag.UnderlyingMarketDisruptionProvision)
}

// HasUnderlyingMarketDisruptionFallbackProvision returns true if UnderlyingMarketDisruptionFallbackProvision is present, Tag 41860.
func (m DerivativeSecurityListRequest) HasUnderlyingMarketDisruptionFallbackProvision() bool {
	return m.Has(tag.UnderlyingMarketDisruptionFallbackProvision)
}

// HasUnderlyingMarketDisruptionMaximumDays returns true if UnderlyingMarketDisruptionMaximumDays is present, Tag 41861.
func (m DerivativeSecurityListRequest) HasUnderlyingMarketDisruptionMaximumDays() bool {
	return m.Has(tag.UnderlyingMarketDisruptionMaximumDays)
}

// HasUnderlyingMarketDisruptionMaterialityPercentage returns true if UnderlyingMarketDisruptionMaterialityPercentage is present, Tag 41862.
func (m DerivativeSecurityListRequest) HasUnderlyingMarketDisruptionMaterialityPercentage() bool {
	return m.Has(tag.UnderlyingMarketDisruptionMaterialityPercentage)
}

// HasUnderlyingMarketDisruptionMinimumFuturesContracts returns true if UnderlyingMarketDisruptionMinimumFuturesContracts is present, Tag 41863.
func (m DerivativeSecurityListRequest) HasUnderlyingMarketDisruptionMinimumFuturesContracts() bool {
	return m.Has(tag.UnderlyingMarketDisruptionMinimumFuturesContracts)
}

// HasNoUnderlyingMarketDisruptionEvents returns true if NoUnderlyingMarketDisruptionEvents is present, Tag 41864.
func (m DerivativeSecurityListRequest) HasNoUnderlyingMarketDisruptionEvents() bool {
	return m.Has(tag.NoUnderlyingMarketDisruptionEvents)
}

// HasNoUnderlyingMarketDisruptionFallbacks returns true if NoUnderlyingMarketDisruptionFallbacks is present, Tag 41866.
func (m DerivativeSecurityListRequest) HasNoUnderlyingMarketDisruptionFallbacks() bool {
	return m.Has(tag.NoUnderlyingMarketDisruptionFallbacks)
}

// HasNoUnderlyingMarketDisruptionFallbackReferencePrices returns true if NoUnderlyingMarketDisruptionFallbackReferencePrices is present, Tag 41868.
func (m DerivativeSecurityListRequest) HasNoUnderlyingMarketDisruptionFallbackReferencePrices() bool {
	return m.Has(tag.NoUnderlyingMarketDisruptionFallbackReferencePrices)
}

// HasNoUnderlyingPricingDateBusinessCenters returns true if NoUnderlyingPricingDateBusinessCenters is present, Tag 41947.
func (m DerivativeSecurityListRequest) HasNoUnderlyingPricingDateBusinessCenters() bool {
	return m.Has(tag.NoUnderlyingPricingDateBusinessCenters)
}

// HasUnderlyingPricingDateUnadjusted returns true if UnderlyingPricingDateUnadjusted is present, Tag 41949.
func (m DerivativeSecurityListRequest) HasUnderlyingPricingDateUnadjusted() bool {
	return m.Has(tag.UnderlyingPricingDateUnadjusted)
}

// HasUnderlyingPricingDateBusinessDayConvention returns true if UnderlyingPricingDateBusinessDayConvention is present, Tag 41950.
func (m DerivativeSecurityListRequest) HasUnderlyingPricingDateBusinessDayConvention() bool {
	return m.Has(tag.UnderlyingPricingDateBusinessDayConvention)
}

// HasUnderlyingPricingDateAdjusted returns true if UnderlyingPricingDateAdjusted is present, Tag 41951.
func (m DerivativeSecurityListRequest) HasUnderlyingPricingDateAdjusted() bool {
	return m.Has(tag.UnderlyingPricingDateAdjusted)
}

// HasUnderlyingPricingTime returns true if UnderlyingPricingTime is present, Tag 41952.
func (m DerivativeSecurityListRequest) HasUnderlyingPricingTime() bool {
	return m.Has(tag.UnderlyingPricingTime)
}

// HasUnderlyingPricingTimeBusinessCenter returns true if UnderlyingPricingTimeBusinessCenter is present, Tag 41953.
func (m DerivativeSecurityListRequest) HasUnderlyingPricingTimeBusinessCenter() bool {
	return m.Has(tag.UnderlyingPricingTimeBusinessCenter)
}

// HasNoUnderlyingAdditionalTerms returns true if NoUnderlyingAdditionalTerms is present, Tag 42036.
func (m DerivativeSecurityListRequest) HasNoUnderlyingAdditionalTerms() bool {
	return m.Has(tag.NoUnderlyingAdditionalTerms)
}

// HasNoUnderlyingCashSettlTerms returns true if NoUnderlyingCashSettlTerms is present, Tag 42041.
func (m DerivativeSecurityListRequest) HasNoUnderlyingCashSettlTerms() bool {
	return m.Has(tag.NoUnderlyingCashSettlTerms)
}

// HasNoUnderlyingPhysicalSettlTerms returns true if NoUnderlyingPhysicalSettlTerms is present, Tag 42060.
func (m DerivativeSecurityListRequest) HasNoUnderlyingPhysicalSettlTerms() bool {
	return m.Has(tag.NoUnderlyingPhysicalSettlTerms)
}

// HasNoUnderlyingProtectionTerms returns true if NoUnderlyingProtectionTerms is present, Tag 42068.
func (m DerivativeSecurityListRequest) HasNoUnderlyingProtectionTerms() bool {
	return m.Has(tag.NoUnderlyingProtectionTerms)
}

// HasNoUnderlyingProvisions returns true if NoUnderlyingProvisions is present, Tag 42149.
func (m DerivativeSecurityListRequest) HasNoUnderlyingProvisions() bool {
	return m.Has(tag.NoUnderlyingProvisions)
}

// HasNoUnderlyingDividendPayments returns true if NoUnderlyingDividendPayments is present, Tag 42855.
func (m DerivativeSecurityListRequest) HasNoUnderlyingDividendPayments() bool {
	return m.Has(tag.NoUnderlyingDividendPayments)
}

// HasUnderlyingDividendPayoutRatio returns true if UnderlyingDividendPayoutRatio is present, Tag 42860.
func (m DerivativeSecurityListRequest) HasUnderlyingDividendPayoutRatio() bool {
	return m.Has(tag.UnderlyingDividendPayoutRatio)
}

// HasUnderlyingDividendPayoutConditions returns true if UnderlyingDividendPayoutConditions is present, Tag 42861.
func (m DerivativeSecurityListRequest) HasUnderlyingDividendPayoutConditions() bool {
	return m.Has(tag.UnderlyingDividendPayoutConditions)
}

// HasNoUnderlyingExtraordinaryEvents returns true if NoUnderlyingExtraordinaryEvents is present, Tag 42884.
func (m DerivativeSecurityListRequest) HasNoUnderlyingExtraordinaryEvents() bool {
	return m.Has(tag.NoUnderlyingExtraordinaryEvents)
}

// HasUnderlyingSettlMethodElectingPartySide returns true if UnderlyingSettlMethodElectingPartySide is present, Tag 42887.
func (m DerivativeSecurityListRequest) HasUnderlyingSettlMethodElectingPartySide() bool {
	return m.Has(tag.UnderlyingSettlMethodElectingPartySide)
}

// HasUnderlyingMakeWholeDate returns true if UnderlyingMakeWholeDate is present, Tag 42888.
func (m DerivativeSecurityListRequest) HasUnderlyingMakeWholeDate() bool {
	return m.Has(tag.UnderlyingMakeWholeDate)
}

// HasUnderlyingMakeWholeAmount returns true if UnderlyingMakeWholeAmount is present, Tag 42889.
func (m DerivativeSecurityListRequest) HasUnderlyingMakeWholeAmount() bool {
	return m.Has(tag.UnderlyingMakeWholeAmount)
}

// HasUnderlyingMakeWholeBenchmarkCurveName returns true if UnderlyingMakeWholeBenchmarkCurveName is present, Tag 42890.
func (m DerivativeSecurityListRequest) HasUnderlyingMakeWholeBenchmarkCurveName() bool {
	return m.Has(tag.UnderlyingMakeWholeBenchmarkCurveName)
}

// HasUnderlyingMakeWholeBenchmarkCurvePoint returns true if UnderlyingMakeWholeBenchmarkCurvePoint is present, Tag 42891.
func (m DerivativeSecurityListRequest) HasUnderlyingMakeWholeBenchmarkCurvePoint() bool {
	return m.Has(tag.UnderlyingMakeWholeBenchmarkCurvePoint)
}

// HasUnderlyingMakeWholeRecallSpread returns true if UnderlyingMakeWholeRecallSpread is present, Tag 42892.
func (m DerivativeSecurityListRequest) HasUnderlyingMakeWholeRecallSpread() bool {
	return m.Has(tag.UnderlyingMakeWholeRecallSpread)
}

// HasUnderlyingMakeWholeBenchmarkQuote returns true if UnderlyingMakeWholeBenchmarkQuote is present, Tag 42893.
func (m DerivativeSecurityListRequest) HasUnderlyingMakeWholeBenchmarkQuote() bool {
	return m.Has(tag.UnderlyingMakeWholeBenchmarkQuote)
}

// HasUnderlyingMakeWholeInterpolationMethod returns true if UnderlyingMakeWholeInterpolationMethod is present, Tag 42894.
func (m DerivativeSecurityListRequest) HasUnderlyingMakeWholeInterpolationMethod() bool {
	return m.Has(tag.UnderlyingMakeWholeInterpolationMethod)
}

// HasUnderlyingRateSpreadInitialValue returns true if UnderlyingRateSpreadInitialValue is present, Tag 43004.
func (m DerivativeSecurityListRequest) HasUnderlyingRateSpreadInitialValue() bool {
	return m.Has(tag.UnderlyingRateSpreadInitialValue)
}

// HasNoUnderlyingRateSpreadSteps returns true if NoUnderlyingRateSpreadSteps is present, Tag 43005.
func (m DerivativeSecurityListRequest) HasNoUnderlyingRateSpreadSteps() bool {
	return m.Has(tag.NoUnderlyingRateSpreadSteps)
}

// HasNoUnderlyingSettlMethodElectionDateBusinessCenters returns true if NoUnderlyingSettlMethodElectionDateBusinessCenters is present, Tag 43074.
func (m DerivativeSecurityListRequest) HasNoUnderlyingSettlMethodElectionDateBusinessCenters() bool {
	return m.Has(tag.NoUnderlyingSettlMethodElectionDateBusinessCenters)
}

// HasUnderlyingSettlMethodElectionDateUnadjusted returns true if UnderlyingSettlMethodElectionDateUnadjusted is present, Tag 43076.
func (m DerivativeSecurityListRequest) HasUnderlyingSettlMethodElectionDateUnadjusted() bool {
	return m.Has(tag.UnderlyingSettlMethodElectionDateUnadjusted)
}

// HasUnderlyingSettlMethodElectionDateBusinessDayConvention returns true if UnderlyingSettlMethodElectionDateBusinessDayConvention is present, Tag 43077.
func (m DerivativeSecurityListRequest) HasUnderlyingSettlMethodElectionDateBusinessDayConvention() bool {
	return m.Has(tag.UnderlyingSettlMethodElectionDateBusinessDayConvention)
}

// HasUnderlyingSettlMethodElectionDateRelativeTo returns true if UnderlyingSettlMethodElectionDateRelativeTo is present, Tag 43078.
func (m DerivativeSecurityListRequest) HasUnderlyingSettlMethodElectionDateRelativeTo() bool {
	return m.Has(tag.UnderlyingSettlMethodElectionDateRelativeTo)
}

// HasUnderlyingSettlMethodElectionDateOffsetPeriod returns true if UnderlyingSettlMethodElectionDateOffsetPeriod is present, Tag 43079.
func (m DerivativeSecurityListRequest) HasUnderlyingSettlMethodElectionDateOffsetPeriod() bool {
	return m.Has(tag.UnderlyingSettlMethodElectionDateOffsetPeriod)
}

// HasUnderlyingSettlMethodElectionDateOffsetUnit returns true if UnderlyingSettlMethodElectionDateOffsetUnit is present, Tag 43080.
func (m DerivativeSecurityListRequest) HasUnderlyingSettlMethodElectionDateOffsetUnit() bool {
	return m.Has(tag.UnderlyingSettlMethodElectionDateOffsetUnit)
}

// HasUnderlyingSettlMethodElectionDateOffsetDayType returns true if UnderlyingSettlMethodElectionDateOffsetDayType is present, Tag 43081.
func (m DerivativeSecurityListRequest) HasUnderlyingSettlMethodElectionDateOffsetDayType() bool {
	return m.Has(tag.UnderlyingSettlMethodElectionDateOffsetDayType)
}

// HasUnderlyingSettlMethodElectionDateAdjusted returns true if UnderlyingSettlMethodElectionDateAdjusted is present, Tag 43082.
func (m DerivativeSecurityListRequest) HasUnderlyingSettlMethodElectionDateAdjusted() bool {
	return m.Has(tag.UnderlyingSettlMethodElectionDateAdjusted)
}

// NoUnderlyingSecurityAltID is a repeating group element, Tag 457.
type NoUnderlyingSecurityAltID struct {
	*quickfix.Group
}

// SetUnderlyingSecurityAltID sets UnderlyingSecurityAltID, Tag 458.
func (m NoUnderlyingSecurityAltID) SetUnderlyingSecurityAltID(v string) {
	m.Set(field.NewUnderlyingSecurityAltID(v))
}

// SetUnderlyingSecurityAltIDSource sets UnderlyingSecurityAltIDSource, Tag 459.
func (m NoUnderlyingSecurityAltID) SetUnderlyingSecurityAltIDSource(v string) {
	m.Set(field.NewUnderlyingSecurityAltIDSource(v))
}

// GetUnderlyingSecurityAltID gets UnderlyingSecurityAltID, Tag 458.
func (m NoUnderlyingSecurityAltID) GetUnderlyingSecurityAltID() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingSecurityAltIDField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingSecurityAltIDSource gets UnderlyingSecurityAltIDSource, Tag 459.
func (m NoUnderlyingSecurityAltID) GetUnderlyingSecurityAltIDSource() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingSecurityAltIDSourceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingSecurityAltID returns true if UnderlyingSecurityAltID is present, Tag 458.
func (m NoUnderlyingSecurityAltID) HasUnderlyingSecurityAltID() bool {
	return m.Has(tag.UnderlyingSecurityAltID)
}

// HasUnderlyingSecurityAltIDSource returns true if UnderlyingSecurityAltIDSource is present, Tag 459.
func (m NoUnderlyingSecurityAltID) HasUnderlyingSecurityAltIDSource() bool {
	return m.Has(tag.UnderlyingSecurityAltIDSource)
}

// NoUnderlyingSecurityAltIDRepeatingGroup is a repeating group, Tag 457.
type NoUnderlyingSecurityAltIDRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingSecurityAltIDRepeatingGroup returns an initialized, NoUnderlyingSecurityAltIDRepeatingGroup.
func NewNoUnderlyingSecurityAltIDRepeatingGroup() NoUnderlyingSecurityAltIDRepeatingGroup {
	return NoUnderlyingSecurityAltIDRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingSecurityAltID,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingSecurityAltID),
				quickfix.GroupElement(tag.UnderlyingSecurityAltIDSource),
			},
		),
	}
}

// Add create and append a new NoUnderlyingSecurityAltID to this group.
func (m NoUnderlyingSecurityAltIDRepeatingGroup) Add() NoUnderlyingSecurityAltID {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingSecurityAltID{g}
}

// Get returns the ith NoUnderlyingSecurityAltID in the NoUnderlyingSecurityAltIDRepeatinGroup.
func (m NoUnderlyingSecurityAltIDRepeatingGroup) Get(i int) NoUnderlyingSecurityAltID {
	return NoUnderlyingSecurityAltID{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingStips is a repeating group element, Tag 887.
type NoUnderlyingStips struct {
	*quickfix.Group
}

// SetUnderlyingStipType sets UnderlyingStipType, Tag 888.
func (m NoUnderlyingStips) SetUnderlyingStipType(v string) {
	m.Set(field.NewUnderlyingStipType(v))
}

// SetUnderlyingStipValue sets UnderlyingStipValue, Tag 889.
func (m NoUnderlyingStips) SetUnderlyingStipValue(v string) {
	m.Set(field.NewUnderlyingStipValue(v))
}

// GetUnderlyingStipType gets UnderlyingStipType, Tag 888.
func (m NoUnderlyingStips) GetUnderlyingStipType() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingStipTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStipValue gets UnderlyingStipValue, Tag 889.
func (m NoUnderlyingStips) GetUnderlyingStipValue() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingStipValueField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingStipType returns true if UnderlyingStipType is present, Tag 888.
func (m NoUnderlyingStips) HasUnderlyingStipType() bool {
	return m.Has(tag.UnderlyingStipType)
}

// HasUnderlyingStipValue returns true if UnderlyingStipValue is present, Tag 889.
func (m NoUnderlyingStips) HasUnderlyingStipValue() bool {
	return m.Has(tag.UnderlyingStipValue)
}

// NoUnderlyingStipsRepeatingGroup is a repeating group, Tag 887.
type NoUnderlyingStipsRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingStipsRepeatingGroup returns an initialized, NoUnderlyingStipsRepeatingGroup.
func NewNoUnderlyingStipsRepeatingGroup() NoUnderlyingStipsRepeatingGroup {
	return NoUnderlyingStipsRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingStips,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingStipType),
				quickfix.GroupElement(tag.UnderlyingStipValue),
			},
		),
	}
}

// Add create and append a new NoUnderlyingStips to this group.
func (m NoUnderlyingStipsRepeatingGroup) Add() NoUnderlyingStips {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingStips{g}
}

// Get returns the ith NoUnderlyingStips in the NoUnderlyingStipsRepeatinGroup.
func (m NoUnderlyingStipsRepeatingGroup) Get(i int) NoUnderlyingStips {
	return NoUnderlyingStips{m.RepeatingGroup.Get(i)}
}

// NoUndlyInstrumentParties is a repeating group element, Tag 1058.
type NoUndlyInstrumentParties struct {
	*quickfix.Group
}

// SetUnderlyingInstrumentPartyID sets UnderlyingInstrumentPartyID, Tag 1059.
func (m NoUndlyInstrumentParties) SetUnderlyingInstrumentPartyID(v string) {
	m.Set(field.NewUnderlyingInstrumentPartyID(v))
}

// SetUnderlyingInstrumentPartyIDSource sets UnderlyingInstrumentPartyIDSource, Tag 1060.
func (m NoUndlyInstrumentParties) SetUnderlyingInstrumentPartyIDSource(v string) {
	m.Set(field.NewUnderlyingInstrumentPartyIDSource(v))
}

// SetUnderlyingInstrumentPartyRole sets UnderlyingInstrumentPartyRole, Tag 1061.
func (m NoUndlyInstrumentParties) SetUnderlyingInstrumentPartyRole(v int) {
	m.Set(field.NewUnderlyingInstrumentPartyRole(v))
}

// SetNoUndlyInstrumentPartySubIDs sets NoUndlyInstrumentPartySubIDs, Tag 1062.
func (m NoUndlyInstrumentParties) SetNoUndlyInstrumentPartySubIDs(f NoUndlyInstrumentPartySubIDsRepeatingGroup) {
	m.SetGroup(f)
}

// SetUnderlyingInstrumentPartyRoleQualifier sets UnderlyingInstrumentPartyRoleQualifier, Tag 2391.
func (m NoUndlyInstrumentParties) SetUnderlyingInstrumentPartyRoleQualifier(v int) {
	m.Set(field.NewUnderlyingInstrumentPartyRoleQualifier(v))
}

// GetUnderlyingInstrumentPartyID gets UnderlyingInstrumentPartyID, Tag 1059.
func (m NoUndlyInstrumentParties) GetUnderlyingInstrumentPartyID() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingInstrumentPartyIDField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingInstrumentPartyIDSource gets UnderlyingInstrumentPartyIDSource, Tag 1060.
func (m NoUndlyInstrumentParties) GetUnderlyingInstrumentPartyIDSource() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingInstrumentPartyIDSourceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingInstrumentPartyRole gets UnderlyingInstrumentPartyRole, Tag 1061.
func (m NoUndlyInstrumentParties) GetUnderlyingInstrumentPartyRole() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingInstrumentPartyRoleField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUndlyInstrumentPartySubIDs gets NoUndlyInstrumentPartySubIDs, Tag 1062.
func (m NoUndlyInstrumentParties) GetNoUndlyInstrumentPartySubIDs() (NoUndlyInstrumentPartySubIDsRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUndlyInstrumentPartySubIDsRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetUnderlyingInstrumentPartyRoleQualifier gets UnderlyingInstrumentPartyRoleQualifier, Tag 2391.
func (m NoUndlyInstrumentParties) GetUnderlyingInstrumentPartyRoleQualifier() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingInstrumentPartyRoleQualifierField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingInstrumentPartyID returns true if UnderlyingInstrumentPartyID is present, Tag 1059.
func (m NoUndlyInstrumentParties) HasUnderlyingInstrumentPartyID() bool {
	return m.Has(tag.UnderlyingInstrumentPartyID)
}

// HasUnderlyingInstrumentPartyIDSource returns true if UnderlyingInstrumentPartyIDSource is present, Tag 1060.
func (m NoUndlyInstrumentParties) HasUnderlyingInstrumentPartyIDSource() bool {
	return m.Has(tag.UnderlyingInstrumentPartyIDSource)
}

// HasUnderlyingInstrumentPartyRole returns true if UnderlyingInstrumentPartyRole is present, Tag 1061.
func (m NoUndlyInstrumentParties) HasUnderlyingInstrumentPartyRole() bool {
	return m.Has(tag.UnderlyingInstrumentPartyRole)
}

// HasNoUndlyInstrumentPartySubIDs returns true if NoUndlyInstrumentPartySubIDs is present, Tag 1062.
func (m NoUndlyInstrumentParties) HasNoUndlyInstrumentPartySubIDs() bool {
	return m.Has(tag.NoUndlyInstrumentPartySubIDs)
}

// HasUnderlyingInstrumentPartyRoleQualifier returns true if UnderlyingInstrumentPartyRoleQualifier is present, Tag 2391.
func (m NoUndlyInstrumentParties) HasUnderlyingInstrumentPartyRoleQualifier() bool {
	return m.Has(tag.UnderlyingInstrumentPartyRoleQualifier)
}

// NoUndlyInstrumentPartySubIDs is a repeating group element, Tag 1062.
type NoUndlyInstrumentPartySubIDs struct {
	*quickfix.Group
}

// SetUnderlyingInstrumentPartySubID sets UnderlyingInstrumentPartySubID, Tag 1063.
func (m NoUndlyInstrumentPartySubIDs) SetUnderlyingInstrumentPartySubID(v string) {
	m.Set(field.NewUnderlyingInstrumentPartySubID(v))
}

// SetUnderlyingInstrumentPartySubIDType sets UnderlyingInstrumentPartySubIDType, Tag 1064.
func (m NoUndlyInstrumentPartySubIDs) SetUnderlyingInstrumentPartySubIDType(v int) {
	m.Set(field.NewUnderlyingInstrumentPartySubIDType(v))
}

// GetUnderlyingInstrumentPartySubID gets UnderlyingInstrumentPartySubID, Tag 1063.
func (m NoUndlyInstrumentPartySubIDs) GetUnderlyingInstrumentPartySubID() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingInstrumentPartySubIDField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingInstrumentPartySubIDType gets UnderlyingInstrumentPartySubIDType, Tag 1064.
func (m NoUndlyInstrumentPartySubIDs) GetUnderlyingInstrumentPartySubIDType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingInstrumentPartySubIDTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingInstrumentPartySubID returns true if UnderlyingInstrumentPartySubID is present, Tag 1063.
func (m NoUndlyInstrumentPartySubIDs) HasUnderlyingInstrumentPartySubID() bool {
	return m.Has(tag.UnderlyingInstrumentPartySubID)
}

// HasUnderlyingInstrumentPartySubIDType returns true if UnderlyingInstrumentPartySubIDType is present, Tag 1064.
func (m NoUndlyInstrumentPartySubIDs) HasUnderlyingInstrumentPartySubIDType() bool {
	return m.Has(tag.UnderlyingInstrumentPartySubIDType)
}

// NoUndlyInstrumentPartySubIDsRepeatingGroup is a repeating group, Tag 1062.
type NoUndlyInstrumentPartySubIDsRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUndlyInstrumentPartySubIDsRepeatingGroup returns an initialized, NoUndlyInstrumentPartySubIDsRepeatingGroup.
func NewNoUndlyInstrumentPartySubIDsRepeatingGroup() NoUndlyInstrumentPartySubIDsRepeatingGroup {
	return NoUndlyInstrumentPartySubIDsRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUndlyInstrumentPartySubIDs,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingInstrumentPartySubID),
				quickfix.GroupElement(tag.UnderlyingInstrumentPartySubIDType),
			},
		),
	}
}

// Add create and append a new NoUndlyInstrumentPartySubIDs to this group.
func (m NoUndlyInstrumentPartySubIDsRepeatingGroup) Add() NoUndlyInstrumentPartySubIDs {
	g := m.RepeatingGroup.Add()
	return NoUndlyInstrumentPartySubIDs{g}
}

// Get returns the ith NoUndlyInstrumentPartySubIDs in the NoUndlyInstrumentPartySubIDsRepeatinGroup.
func (m NoUndlyInstrumentPartySubIDsRepeatingGroup) Get(i int) NoUndlyInstrumentPartySubIDs {
	return NoUndlyInstrumentPartySubIDs{m.RepeatingGroup.Get(i)}
}

// NoUndlyInstrumentPartiesRepeatingGroup is a repeating group, Tag 1058.
type NoUndlyInstrumentPartiesRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUndlyInstrumentPartiesRepeatingGroup returns an initialized, NoUndlyInstrumentPartiesRepeatingGroup.
func NewNoUndlyInstrumentPartiesRepeatingGroup() NoUndlyInstrumentPartiesRepeatingGroup {
	return NoUndlyInstrumentPartiesRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUndlyInstrumentParties,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingInstrumentPartyID),
				quickfix.GroupElement(tag.UnderlyingInstrumentPartyIDSource),
				quickfix.GroupElement(tag.UnderlyingInstrumentPartyRole),
				NewNoUndlyInstrumentPartySubIDsRepeatingGroup(),
				quickfix.GroupElement(tag.UnderlyingInstrumentPartyRoleQualifier),
			},
		),
	}
}

// Add create and append a new NoUndlyInstrumentParties to this group.
func (m NoUndlyInstrumentPartiesRepeatingGroup) Add() NoUndlyInstrumentParties {
	g := m.RepeatingGroup.Add()
	return NoUndlyInstrumentParties{g}
}

// Get returns the ith NoUndlyInstrumentParties in the NoUndlyInstrumentPartiesRepeatinGroup.
func (m NoUndlyInstrumentPartiesRepeatingGroup) Get(i int) NoUndlyInstrumentParties {
	return NoUndlyInstrumentParties{m.RepeatingGroup.Get(i)}
}

// NoDerivativeSecurityAltID is a repeating group element, Tag 1218.
type NoDerivativeSecurityAltID struct {
	*quickfix.Group
}

// SetDerivativeSecurityAltID sets DerivativeSecurityAltID, Tag 1219.
func (m NoDerivativeSecurityAltID) SetDerivativeSecurityAltID(v string) {
	m.Set(field.NewDerivativeSecurityAltID(v))
}

// SetDerivativeSecurityAltIDSource sets DerivativeSecurityAltIDSource, Tag 1220.
func (m NoDerivativeSecurityAltID) SetDerivativeSecurityAltIDSource(v string) {
	m.Set(field.NewDerivativeSecurityAltIDSource(v))
}

// GetDerivativeSecurityAltID gets DerivativeSecurityAltID, Tag 1219.
func (m NoDerivativeSecurityAltID) GetDerivativeSecurityAltID() (v string, err quickfix.MessageRejectError) {
	var f field.DerivativeSecurityAltIDField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDerivativeSecurityAltIDSource gets DerivativeSecurityAltIDSource, Tag 1220.
func (m NoDerivativeSecurityAltID) GetDerivativeSecurityAltIDSource() (v string, err quickfix.MessageRejectError) {
	var f field.DerivativeSecurityAltIDSourceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasDerivativeSecurityAltID returns true if DerivativeSecurityAltID is present, Tag 1219.
func (m NoDerivativeSecurityAltID) HasDerivativeSecurityAltID() bool {
	return m.Has(tag.DerivativeSecurityAltID)
}

// HasDerivativeSecurityAltIDSource returns true if DerivativeSecurityAltIDSource is present, Tag 1220.
func (m NoDerivativeSecurityAltID) HasDerivativeSecurityAltIDSource() bool {
	return m.Has(tag.DerivativeSecurityAltIDSource)
}

// NoDerivativeSecurityAltIDRepeatingGroup is a repeating group, Tag 1218.
type NoDerivativeSecurityAltIDRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoDerivativeSecurityAltIDRepeatingGroup returns an initialized, NoDerivativeSecurityAltIDRepeatingGroup.
func NewNoDerivativeSecurityAltIDRepeatingGroup() NoDerivativeSecurityAltIDRepeatingGroup {
	return NoDerivativeSecurityAltIDRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoDerivativeSecurityAltID,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.DerivativeSecurityAltID),
				quickfix.GroupElement(tag.DerivativeSecurityAltIDSource),
			},
		),
	}
}

// Add create and append a new NoDerivativeSecurityAltID to this group.
func (m NoDerivativeSecurityAltIDRepeatingGroup) Add() NoDerivativeSecurityAltID {
	g := m.RepeatingGroup.Add()
	return NoDerivativeSecurityAltID{g}
}

// Get returns the ith NoDerivativeSecurityAltID in the NoDerivativeSecurityAltIDRepeatinGroup.
func (m NoDerivativeSecurityAltIDRepeatingGroup) Get(i int) NoDerivativeSecurityAltID {
	return NoDerivativeSecurityAltID{m.RepeatingGroup.Get(i)}
}

// NoDerivativeEvents is a repeating group element, Tag 1286.
type NoDerivativeEvents struct {
	*quickfix.Group
}

// SetDerivativeEventType sets DerivativeEventType, Tag 1287.
func (m NoDerivativeEvents) SetDerivativeEventType(v int) {
	m.Set(field.NewDerivativeEventType(v))
}

// SetDerivativeEventDate sets DerivativeEventDate, Tag 1288.
func (m NoDerivativeEvents) SetDerivativeEventDate(v string) {
	m.Set(field.NewDerivativeEventDate(v))
}

// SetDerivativeEventTime sets DerivativeEventTime, Tag 1289.
func (m NoDerivativeEvents) SetDerivativeEventTime(v time.Time) {
	m.Set(field.NewDerivativeEventTime(v))
}

// SetDerivativeEventPx sets DerivativeEventPx, Tag 1290.
func (m NoDerivativeEvents) SetDerivativeEventPx(value decimal.Decimal, scale int32) {
	m.Set(field.NewDerivativeEventPx(value, scale))
}

// SetDerivativeEventText sets DerivativeEventText, Tag 1291.
func (m NoDerivativeEvents) SetDerivativeEventText(v string) {
	m.Set(field.NewDerivativeEventText(v))
}

// GetDerivativeEventType gets DerivativeEventType, Tag 1287.
func (m NoDerivativeEvents) GetDerivativeEventType() (v int, err quickfix.MessageRejectError) {
	var f field.DerivativeEventTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDerivativeEventDate gets DerivativeEventDate, Tag 1288.
func (m NoDerivativeEvents) GetDerivativeEventDate() (v string, err quickfix.MessageRejectError) {
	var f field.DerivativeEventDateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDerivativeEventTime gets DerivativeEventTime, Tag 1289.
func (m NoDerivativeEvents) GetDerivativeEventTime() (v time.Time, err quickfix.MessageRejectError) {
	var f field.DerivativeEventTimeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDerivativeEventPx gets DerivativeEventPx, Tag 1290.
func (m NoDerivativeEvents) GetDerivativeEventPx() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.DerivativeEventPxField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDerivativeEventText gets DerivativeEventText, Tag 1291.
func (m NoDerivativeEvents) GetDerivativeEventText() (v string, err quickfix.MessageRejectError) {
	var f field.DerivativeEventTextField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasDerivativeEventType returns true if DerivativeEventType is present, Tag 1287.
func (m NoDerivativeEvents) HasDerivativeEventType() bool {
	return m.Has(tag.DerivativeEventType)
}

// HasDerivativeEventDate returns true if DerivativeEventDate is present, Tag 1288.
func (m NoDerivativeEvents) HasDerivativeEventDate() bool {
	return m.Has(tag.DerivativeEventDate)
}

// HasDerivativeEventTime returns true if DerivativeEventTime is present, Tag 1289.
func (m NoDerivativeEvents) HasDerivativeEventTime() bool {
	return m.Has(tag.DerivativeEventTime)
}

// HasDerivativeEventPx returns true if DerivativeEventPx is present, Tag 1290.
func (m NoDerivativeEvents) HasDerivativeEventPx() bool {
	return m.Has(tag.DerivativeEventPx)
}

// HasDerivativeEventText returns true if DerivativeEventText is present, Tag 1291.
func (m NoDerivativeEvents) HasDerivativeEventText() bool {
	return m.Has(tag.DerivativeEventText)
}

// NoDerivativeEventsRepeatingGroup is a repeating group, Tag 1286.
type NoDerivativeEventsRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoDerivativeEventsRepeatingGroup returns an initialized, NoDerivativeEventsRepeatingGroup.
func NewNoDerivativeEventsRepeatingGroup() NoDerivativeEventsRepeatingGroup {
	return NoDerivativeEventsRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoDerivativeEvents,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.DerivativeEventType),
				quickfix.GroupElement(tag.DerivativeEventDate),
				quickfix.GroupElement(tag.DerivativeEventTime),
				quickfix.GroupElement(tag.DerivativeEventPx),
				quickfix.GroupElement(tag.DerivativeEventText),
			},
		),
	}
}

// Add create and append a new NoDerivativeEvents to this group.
func (m NoDerivativeEventsRepeatingGroup) Add() NoDerivativeEvents {
	g := m.RepeatingGroup.Add()
	return NoDerivativeEvents{g}
}

// Get returns the ith NoDerivativeEvents in the NoDerivativeEventsRepeatinGroup.
func (m NoDerivativeEventsRepeatingGroup) Get(i int) NoDerivativeEvents {
	return NoDerivativeEvents{m.RepeatingGroup.Get(i)}
}

// NoDerivativeInstrumentParties is a repeating group element, Tag 1292.
type NoDerivativeInstrumentParties struct {
	*quickfix.Group
}

// SetDerivativeInstrumentPartyID sets DerivativeInstrumentPartyID, Tag 1293.
func (m NoDerivativeInstrumentParties) SetDerivativeInstrumentPartyID(v string) {
	m.Set(field.NewDerivativeInstrumentPartyID(v))
}

// SetDerivativeInstrumentPartyIDSource sets DerivativeInstrumentPartyIDSource, Tag 1294.
func (m NoDerivativeInstrumentParties) SetDerivativeInstrumentPartyIDSource(v string) {
	m.Set(field.NewDerivativeInstrumentPartyIDSource(v))
}

// SetDerivativeInstrumentPartyRole sets DerivativeInstrumentPartyRole, Tag 1295.
func (m NoDerivativeInstrumentParties) SetDerivativeInstrumentPartyRole(v int) {
	m.Set(field.NewDerivativeInstrumentPartyRole(v))
}

// SetNoDerivativeInstrumentPartySubIDs sets NoDerivativeInstrumentPartySubIDs, Tag 1296.
func (m NoDerivativeInstrumentParties) SetNoDerivativeInstrumentPartySubIDs(f NoDerivativeInstrumentPartySubIDsRepeatingGroup) {
	m.SetGroup(f)
}

// SetDerivativeInstrumentPartyRoleQualifier sets DerivativeInstrumentPartyRoleQualifier, Tag 2377.
func (m NoDerivativeInstrumentParties) SetDerivativeInstrumentPartyRoleQualifier(v int) {
	m.Set(field.NewDerivativeInstrumentPartyRoleQualifier(v))
}

// GetDerivativeInstrumentPartyID gets DerivativeInstrumentPartyID, Tag 1293.
func (m NoDerivativeInstrumentParties) GetDerivativeInstrumentPartyID() (v string, err quickfix.MessageRejectError) {
	var f field.DerivativeInstrumentPartyIDField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDerivativeInstrumentPartyIDSource gets DerivativeInstrumentPartyIDSource, Tag 1294.
func (m NoDerivativeInstrumentParties) GetDerivativeInstrumentPartyIDSource() (v string, err quickfix.MessageRejectError) {
	var f field.DerivativeInstrumentPartyIDSourceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDerivativeInstrumentPartyRole gets DerivativeInstrumentPartyRole, Tag 1295.
func (m NoDerivativeInstrumentParties) GetDerivativeInstrumentPartyRole() (v int, err quickfix.MessageRejectError) {
	var f field.DerivativeInstrumentPartyRoleField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoDerivativeInstrumentPartySubIDs gets NoDerivativeInstrumentPartySubIDs, Tag 1296.
func (m NoDerivativeInstrumentParties) GetNoDerivativeInstrumentPartySubIDs() (NoDerivativeInstrumentPartySubIDsRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoDerivativeInstrumentPartySubIDsRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetDerivativeInstrumentPartyRoleQualifier gets DerivativeInstrumentPartyRoleQualifier, Tag 2377.
func (m NoDerivativeInstrumentParties) GetDerivativeInstrumentPartyRoleQualifier() (v int, err quickfix.MessageRejectError) {
	var f field.DerivativeInstrumentPartyRoleQualifierField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasDerivativeInstrumentPartyID returns true if DerivativeInstrumentPartyID is present, Tag 1293.
func (m NoDerivativeInstrumentParties) HasDerivativeInstrumentPartyID() bool {
	return m.Has(tag.DerivativeInstrumentPartyID)
}

// HasDerivativeInstrumentPartyIDSource returns true if DerivativeInstrumentPartyIDSource is present, Tag 1294.
func (m NoDerivativeInstrumentParties) HasDerivativeInstrumentPartyIDSource() bool {
	return m.Has(tag.DerivativeInstrumentPartyIDSource)
}

// HasDerivativeInstrumentPartyRole returns true if DerivativeInstrumentPartyRole is present, Tag 1295.
func (m NoDerivativeInstrumentParties) HasDerivativeInstrumentPartyRole() bool {
	return m.Has(tag.DerivativeInstrumentPartyRole)
}

// HasNoDerivativeInstrumentPartySubIDs returns true if NoDerivativeInstrumentPartySubIDs is present, Tag 1296.
func (m NoDerivativeInstrumentParties) HasNoDerivativeInstrumentPartySubIDs() bool {
	return m.Has(tag.NoDerivativeInstrumentPartySubIDs)
}

// HasDerivativeInstrumentPartyRoleQualifier returns true if DerivativeInstrumentPartyRoleQualifier is present, Tag 2377.
func (m NoDerivativeInstrumentParties) HasDerivativeInstrumentPartyRoleQualifier() bool {
	return m.Has(tag.DerivativeInstrumentPartyRoleQualifier)
}

// NoDerivativeInstrumentPartySubIDs is a repeating group element, Tag 1296.
type NoDerivativeInstrumentPartySubIDs struct {
	*quickfix.Group
}

// SetDerivativeInstrumentPartySubID sets DerivativeInstrumentPartySubID, Tag 1297.
func (m NoDerivativeInstrumentPartySubIDs) SetDerivativeInstrumentPartySubID(v string) {
	m.Set(field.NewDerivativeInstrumentPartySubID(v))
}

// SetDerivativeInstrumentPartySubIDType sets DerivativeInstrumentPartySubIDType, Tag 1298.
func (m NoDerivativeInstrumentPartySubIDs) SetDerivativeInstrumentPartySubIDType(v int) {
	m.Set(field.NewDerivativeInstrumentPartySubIDType(v))
}

// GetDerivativeInstrumentPartySubID gets DerivativeInstrumentPartySubID, Tag 1297.
func (m NoDerivativeInstrumentPartySubIDs) GetDerivativeInstrumentPartySubID() (v string, err quickfix.MessageRejectError) {
	var f field.DerivativeInstrumentPartySubIDField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDerivativeInstrumentPartySubIDType gets DerivativeInstrumentPartySubIDType, Tag 1298.
func (m NoDerivativeInstrumentPartySubIDs) GetDerivativeInstrumentPartySubIDType() (v int, err quickfix.MessageRejectError) {
	var f field.DerivativeInstrumentPartySubIDTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasDerivativeInstrumentPartySubID returns true if DerivativeInstrumentPartySubID is present, Tag 1297.
func (m NoDerivativeInstrumentPartySubIDs) HasDerivativeInstrumentPartySubID() bool {
	return m.Has(tag.DerivativeInstrumentPartySubID)
}

// HasDerivativeInstrumentPartySubIDType returns true if DerivativeInstrumentPartySubIDType is present, Tag 1298.
func (m NoDerivativeInstrumentPartySubIDs) HasDerivativeInstrumentPartySubIDType() bool {
	return m.Has(tag.DerivativeInstrumentPartySubIDType)
}

// NoDerivativeInstrumentPartySubIDsRepeatingGroup is a repeating group, Tag 1296.
type NoDerivativeInstrumentPartySubIDsRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoDerivativeInstrumentPartySubIDsRepeatingGroup returns an initialized, NoDerivativeInstrumentPartySubIDsRepeatingGroup.
func NewNoDerivativeInstrumentPartySubIDsRepeatingGroup() NoDerivativeInstrumentPartySubIDsRepeatingGroup {
	return NoDerivativeInstrumentPartySubIDsRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoDerivativeInstrumentPartySubIDs,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.DerivativeInstrumentPartySubID),
				quickfix.GroupElement(tag.DerivativeInstrumentPartySubIDType),
			},
		),
	}
}

// Add create and append a new NoDerivativeInstrumentPartySubIDs to this group.
func (m NoDerivativeInstrumentPartySubIDsRepeatingGroup) Add() NoDerivativeInstrumentPartySubIDs {
	g := m.RepeatingGroup.Add()
	return NoDerivativeInstrumentPartySubIDs{g}
}

// Get returns the ith NoDerivativeInstrumentPartySubIDs in the NoDerivativeInstrumentPartySubIDsRepeatinGroup.
func (m NoDerivativeInstrumentPartySubIDsRepeatingGroup) Get(i int) NoDerivativeInstrumentPartySubIDs {
	return NoDerivativeInstrumentPartySubIDs{m.RepeatingGroup.Get(i)}
}

// NoDerivativeInstrumentPartiesRepeatingGroup is a repeating group, Tag 1292.
type NoDerivativeInstrumentPartiesRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoDerivativeInstrumentPartiesRepeatingGroup returns an initialized, NoDerivativeInstrumentPartiesRepeatingGroup.
func NewNoDerivativeInstrumentPartiesRepeatingGroup() NoDerivativeInstrumentPartiesRepeatingGroup {
	return NoDerivativeInstrumentPartiesRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoDerivativeInstrumentParties,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.DerivativeInstrumentPartyID),
				quickfix.GroupElement(tag.DerivativeInstrumentPartyIDSource),
				quickfix.GroupElement(tag.DerivativeInstrumentPartyRole),
				NewNoDerivativeInstrumentPartySubIDsRepeatingGroup(),
				quickfix.GroupElement(tag.DerivativeInstrumentPartyRoleQualifier),
			},
		),
	}
}

// Add create and append a new NoDerivativeInstrumentParties to this group.
func (m NoDerivativeInstrumentPartiesRepeatingGroup) Add() NoDerivativeInstrumentParties {
	g := m.RepeatingGroup.Add()
	return NoDerivativeInstrumentParties{g}
}

// Get returns the ith NoDerivativeInstrumentParties in the NoDerivativeInstrumentPartiesRepeatinGroup.
func (m NoDerivativeInstrumentPartiesRepeatingGroup) Get(i int) NoDerivativeInstrumentParties {
	return NoDerivativeInstrumentParties{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingEvents is a repeating group element, Tag 1981.
type NoUnderlyingEvents struct {
	*quickfix.Group
}

// SetUnderlyingEventType sets UnderlyingEventType, Tag 1982.
func (m NoUnderlyingEvents) SetUnderlyingEventType(v int) {
	m.Set(field.NewUnderlyingEventType(v))
}

// SetUnderlyingEventDate sets UnderlyingEventDate, Tag 1983.
func (m NoUnderlyingEvents) SetUnderlyingEventDate(v string) {
	m.Set(field.NewUnderlyingEventDate(v))
}

// SetUnderlyingEventTime sets UnderlyingEventTime, Tag 1984.
func (m NoUnderlyingEvents) SetUnderlyingEventTime(v time.Time) {
	m.Set(field.NewUnderlyingEventTime(v))
}

// SetUnderlyingEventTimeUnit sets UnderlyingEventTimeUnit, Tag 1985.
func (m NoUnderlyingEvents) SetUnderlyingEventTimeUnit(v string) {
	m.Set(field.NewUnderlyingEventTimeUnit(v))
}

// SetUnderlyingEventTimePeriod sets UnderlyingEventTimePeriod, Tag 1986.
func (m NoUnderlyingEvents) SetUnderlyingEventTimePeriod(v int) {
	m.Set(field.NewUnderlyingEventTimePeriod(v))
}

// SetUnderlyingEventMonthYear sets UnderlyingEventMonthYear, Tag 2342.
func (m NoUnderlyingEvents) SetUnderlyingEventMonthYear(v string) {
	m.Set(field.NewUnderlyingEventMonthYear(v))
}

// SetUnderlyingEventPx sets UnderlyingEventPx, Tag 1987.
func (m NoUnderlyingEvents) SetUnderlyingEventPx(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingEventPx(value, scale))
}

// SetUnderlyingEventText sets UnderlyingEventText, Tag 2071.
func (m NoUnderlyingEvents) SetUnderlyingEventText(v string) {
	m.Set(field.NewUnderlyingEventText(v))
}

// SetEncodedUnderlyingEventTextLen sets EncodedUnderlyingEventTextLen, Tag 2072.
func (m NoUnderlyingEvents) SetEncodedUnderlyingEventTextLen(v int) {
	m.Set(field.NewEncodedUnderlyingEventTextLen(v))
}

// SetEncodedUnderlyingEventText sets EncodedUnderlyingEventText, Tag 2073.
func (m NoUnderlyingEvents) SetEncodedUnderlyingEventText(v string) {
	m.Set(field.NewEncodedUnderlyingEventText(v))
}

// GetUnderlyingEventType gets UnderlyingEventType, Tag 1982.
func (m NoUnderlyingEvents) GetUnderlyingEventType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingEventTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingEventDate gets UnderlyingEventDate, Tag 1983.
func (m NoUnderlyingEvents) GetUnderlyingEventDate() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingEventDateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingEventTime gets UnderlyingEventTime, Tag 1984.
func (m NoUnderlyingEvents) GetUnderlyingEventTime() (v time.Time, err quickfix.MessageRejectError) {
	var f field.UnderlyingEventTimeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingEventTimeUnit gets UnderlyingEventTimeUnit, Tag 1985.
func (m NoUnderlyingEvents) GetUnderlyingEventTimeUnit() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingEventTimeUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingEventTimePeriod gets UnderlyingEventTimePeriod, Tag 1986.
func (m NoUnderlyingEvents) GetUnderlyingEventTimePeriod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingEventTimePeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingEventMonthYear gets UnderlyingEventMonthYear, Tag 2342.
func (m NoUnderlyingEvents) GetUnderlyingEventMonthYear() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingEventMonthYearField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingEventPx gets UnderlyingEventPx, Tag 1987.
func (m NoUnderlyingEvents) GetUnderlyingEventPx() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingEventPxField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingEventText gets UnderlyingEventText, Tag 2071.
func (m NoUnderlyingEvents) GetUnderlyingEventText() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingEventTextField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetEncodedUnderlyingEventTextLen gets EncodedUnderlyingEventTextLen, Tag 2072.
func (m NoUnderlyingEvents) GetEncodedUnderlyingEventTextLen() (v int, err quickfix.MessageRejectError) {
	var f field.EncodedUnderlyingEventTextLenField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetEncodedUnderlyingEventText gets EncodedUnderlyingEventText, Tag 2073.
func (m NoUnderlyingEvents) GetEncodedUnderlyingEventText() (v string, err quickfix.MessageRejectError) {
	var f field.EncodedUnderlyingEventTextField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingEventType returns true if UnderlyingEventType is present, Tag 1982.
func (m NoUnderlyingEvents) HasUnderlyingEventType() bool {
	return m.Has(tag.UnderlyingEventType)
}

// HasUnderlyingEventDate returns true if UnderlyingEventDate is present, Tag 1983.
func (m NoUnderlyingEvents) HasUnderlyingEventDate() bool {
	return m.Has(tag.UnderlyingEventDate)
}

// HasUnderlyingEventTime returns true if UnderlyingEventTime is present, Tag 1984.
func (m NoUnderlyingEvents) HasUnderlyingEventTime() bool {
	return m.Has(tag.UnderlyingEventTime)
}

// HasUnderlyingEventTimeUnit returns true if UnderlyingEventTimeUnit is present, Tag 1985.
func (m NoUnderlyingEvents) HasUnderlyingEventTimeUnit() bool {
	return m.Has(tag.UnderlyingEventTimeUnit)
}

// HasUnderlyingEventTimePeriod returns true if UnderlyingEventTimePeriod is present, Tag 1986.
func (m NoUnderlyingEvents) HasUnderlyingEventTimePeriod() bool {
	return m.Has(tag.UnderlyingEventTimePeriod)
}

// HasUnderlyingEventMonthYear returns true if UnderlyingEventMonthYear is present, Tag 2342.
func (m NoUnderlyingEvents) HasUnderlyingEventMonthYear() bool {
	return m.Has(tag.UnderlyingEventMonthYear)
}

// HasUnderlyingEventPx returns true if UnderlyingEventPx is present, Tag 1987.
func (m NoUnderlyingEvents) HasUnderlyingEventPx() bool {
	return m.Has(tag.UnderlyingEventPx)
}

// HasUnderlyingEventText returns true if UnderlyingEventText is present, Tag 2071.
func (m NoUnderlyingEvents) HasUnderlyingEventText() bool {
	return m.Has(tag.UnderlyingEventText)
}

// HasEncodedUnderlyingEventTextLen returns true if EncodedUnderlyingEventTextLen is present, Tag 2072.
func (m NoUnderlyingEvents) HasEncodedUnderlyingEventTextLen() bool {
	return m.Has(tag.EncodedUnderlyingEventTextLen)
}

// HasEncodedUnderlyingEventText returns true if EncodedUnderlyingEventText is present, Tag 2073.
func (m NoUnderlyingEvents) HasEncodedUnderlyingEventText() bool {
	return m.Has(tag.EncodedUnderlyingEventText)
}

// NoUnderlyingEventsRepeatingGroup is a repeating group, Tag 1981.
type NoUnderlyingEventsRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingEventsRepeatingGroup returns an initialized, NoUnderlyingEventsRepeatingGroup.
func NewNoUnderlyingEventsRepeatingGroup() NoUnderlyingEventsRepeatingGroup {
	return NoUnderlyingEventsRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingEvents,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingEventType),
				quickfix.GroupElement(tag.UnderlyingEventDate),
				quickfix.GroupElement(tag.UnderlyingEventTime),
				quickfix.GroupElement(tag.UnderlyingEventTimeUnit),
				quickfix.GroupElement(tag.UnderlyingEventTimePeriod),
				quickfix.GroupElement(tag.UnderlyingEventMonthYear),
				quickfix.GroupElement(tag.UnderlyingEventPx),
				quickfix.GroupElement(tag.UnderlyingEventText),
				quickfix.GroupElement(tag.EncodedUnderlyingEventTextLen),
				quickfix.GroupElement(tag.EncodedUnderlyingEventText),
			},
		),
	}
}

// Add create and append a new NoUnderlyingEvents to this group.
func (m NoUnderlyingEventsRepeatingGroup) Add() NoUnderlyingEvents {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingEvents{g}
}

// Get returns the ith NoUnderlyingEvents in the NoUnderlyingEventsRepeatinGroup.
func (m NoUnderlyingEventsRepeatingGroup) Get(i int) NoUnderlyingEvents {
	return NoUnderlyingEvents{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingComplexEvents is a repeating group element, Tag 2045.
type NoUnderlyingComplexEvents struct {
	*quickfix.Group
}

// SetUnderlyingComplexEventType sets UnderlyingComplexEventType, Tag 2046.
func (m NoUnderlyingComplexEvents) SetUnderlyingComplexEventType(v int) {
	m.Set(field.NewUnderlyingComplexEventType(v))
}

// SetUnderlyingComplexOptPayoutAmount sets UnderlyingComplexOptPayoutAmount, Tag 2047.
func (m NoUnderlyingComplexEvents) SetUnderlyingComplexOptPayoutAmount(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingComplexOptPayoutAmount(value, scale))
}

// SetUnderlyingComplexEventPrice sets UnderlyingComplexEventPrice, Tag 2048.
func (m NoUnderlyingComplexEvents) SetUnderlyingComplexEventPrice(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingComplexEventPrice(value, scale))
}

// SetUnderlyingComplexEventPriceBoundaryMethod sets UnderlyingComplexEventPriceBoundaryMethod, Tag 2049.
func (m NoUnderlyingComplexEvents) SetUnderlyingComplexEventPriceBoundaryMethod(v int) {
	m.Set(field.NewUnderlyingComplexEventPriceBoundaryMethod(v))
}

// SetUnderlyingComplexEventPriceBoundaryPrecision sets UnderlyingComplexEventPriceBoundaryPrecision, Tag 2050.
func (m NoUnderlyingComplexEvents) SetUnderlyingComplexEventPriceBoundaryPrecision(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingComplexEventPriceBoundaryPrecision(value, scale))
}

// SetUnderlyingComplexEventPriceTimeType sets UnderlyingComplexEventPriceTimeType, Tag 2051.
func (m NoUnderlyingComplexEvents) SetUnderlyingComplexEventPriceTimeType(v int) {
	m.Set(field.NewUnderlyingComplexEventPriceTimeType(v))
}

// SetUnderlyingComplexEventCondition sets UnderlyingComplexEventCondition, Tag 2052.
func (m NoUnderlyingComplexEvents) SetUnderlyingComplexEventCondition(v int) {
	m.Set(field.NewUnderlyingComplexEventCondition(v))
}

// SetNoUnderlyingComplexEventDates sets NoUnderlyingComplexEventDates, Tag 2053.
func (m NoUnderlyingComplexEvents) SetNoUnderlyingComplexEventDates(f NoUnderlyingComplexEventDatesRepeatingGroup) {
	m.SetGroup(f)
}

// SetUnderlyingComplexOptPayoutPaySide sets UnderlyingComplexOptPayoutPaySide, Tag 2261.
func (m NoUnderlyingComplexEvents) SetUnderlyingComplexOptPayoutPaySide(v int) {
	m.Set(field.NewUnderlyingComplexOptPayoutPaySide(v))
}

// SetUnderlyingComplexOptPayoutReceiveSide sets UnderlyingComplexOptPayoutReceiveSide, Tag 2262.
func (m NoUnderlyingComplexEvents) SetUnderlyingComplexOptPayoutReceiveSide(v int) {
	m.Set(field.NewUnderlyingComplexOptPayoutReceiveSide(v))
}

// SetUnderlyingComplexOptPayoutUnderlier sets UnderlyingComplexOptPayoutUnderlier, Tag 2263.
func (m NoUnderlyingComplexEvents) SetUnderlyingComplexOptPayoutUnderlier(v string) {
	m.Set(field.NewUnderlyingComplexOptPayoutUnderlier(v))
}

// SetUnderlyingComplexOptPayoutPercentage sets UnderlyingComplexOptPayoutPercentage, Tag 2264.
func (m NoUnderlyingComplexEvents) SetUnderlyingComplexOptPayoutPercentage(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingComplexOptPayoutPercentage(value, scale))
}

// SetUnderlyingComplexOptPayoutTime sets UnderlyingComplexOptPayoutTime, Tag 2265.
func (m NoUnderlyingComplexEvents) SetUnderlyingComplexOptPayoutTime(v int) {
	m.Set(field.NewUnderlyingComplexOptPayoutTime(v))
}

// SetUnderlyingComplexOptPayoutCurrency sets UnderlyingComplexOptPayoutCurrency, Tag 2266.
func (m NoUnderlyingComplexEvents) SetUnderlyingComplexOptPayoutCurrency(v string) {
	m.Set(field.NewUnderlyingComplexOptPayoutCurrency(v))
}

// SetUnderlyingComplexEventPricePercentage sets UnderlyingComplexEventPricePercentage, Tag 2267.
func (m NoUnderlyingComplexEvents) SetUnderlyingComplexEventPricePercentage(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingComplexEventPricePercentage(value, scale))
}

// SetUnderlyingComplexEventCurrencyOne sets UnderlyingComplexEventCurrencyOne, Tag 2268.
func (m NoUnderlyingComplexEvents) SetUnderlyingComplexEventCurrencyOne(v string) {
	m.Set(field.NewUnderlyingComplexEventCurrencyOne(v))
}

// SetUnderlyingComplexEventCurrencyTwo sets UnderlyingComplexEventCurrencyTwo, Tag 2269.
func (m NoUnderlyingComplexEvents) SetUnderlyingComplexEventCurrencyTwo(v string) {
	m.Set(field.NewUnderlyingComplexEventCurrencyTwo(v))
}

// SetUnderlyingComplexEventQuoteBasis sets UnderlyingComplexEventQuoteBasis, Tag 2270.
func (m NoUnderlyingComplexEvents) SetUnderlyingComplexEventQuoteBasis(v int) {
	m.Set(field.NewUnderlyingComplexEventQuoteBasis(v))
}

// SetUnderlyingComplexEventFixedFXRate sets UnderlyingComplexEventFixedFXRate, Tag 2271.
func (m NoUnderlyingComplexEvents) SetUnderlyingComplexEventFixedFXRate(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingComplexEventFixedFXRate(value, scale))
}

// SetUnderlyingComplexEventDeterminationMethod sets UnderlyingComplexEventDeterminationMethod, Tag 2272.
func (m NoUnderlyingComplexEvents) SetUnderlyingComplexEventDeterminationMethod(v string) {
	m.Set(field.NewUnderlyingComplexEventDeterminationMethod(v))
}

// SetUnderlyingComplexEventCalculationAgent sets UnderlyingComplexEventCalculationAgent, Tag 2273.
func (m NoUnderlyingComplexEvents) SetUnderlyingComplexEventCalculationAgent(v int) {
	m.Set(field.NewUnderlyingComplexEventCalculationAgent(v))
}

// SetUnderlyingComplexEventStrikePrice sets UnderlyingComplexEventStrikePrice, Tag 2274.
func (m NoUnderlyingComplexEvents) SetUnderlyingComplexEventStrikePrice(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingComplexEventStrikePrice(value, scale))
}

// SetUnderlyingComplexEventStrikeFactor sets UnderlyingComplexEventStrikeFactor, Tag 2275.
func (m NoUnderlyingComplexEvents) SetUnderlyingComplexEventStrikeFactor(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingComplexEventStrikeFactor(value, scale))
}

// SetUnderlyingComplexEventStrikeNumberOfOptions sets UnderlyingComplexEventStrikeNumberOfOptions, Tag 2276.
func (m NoUnderlyingComplexEvents) SetUnderlyingComplexEventStrikeNumberOfOptions(v int) {
	m.Set(field.NewUnderlyingComplexEventStrikeNumberOfOptions(v))
}

// SetNoUnderlyingComplexEventRateSources sets NoUnderlyingComplexEventRateSources, Tag 41732.
func (m NoUnderlyingComplexEvents) SetNoUnderlyingComplexEventRateSources(f NoUnderlyingComplexEventRateSourcesRepeatingGroup) {
	m.SetGroup(f)
}

// SetUnderlyingComplexEventDateUnadjusted sets UnderlyingComplexEventDateUnadjusted, Tag 41739.
func (m NoUnderlyingComplexEvents) SetUnderlyingComplexEventDateUnadjusted(v string) {
	m.Set(field.NewUnderlyingComplexEventDateUnadjusted(v))
}

// SetUnderlyingComplexEventDateRelativeTo sets UnderlyingComplexEventDateRelativeTo, Tag 41740.
func (m NoUnderlyingComplexEvents) SetUnderlyingComplexEventDateRelativeTo(v int) {
	m.Set(field.NewUnderlyingComplexEventDateRelativeTo(v))
}

// SetUnderlyingComplexEventDateOffsetPeriod sets UnderlyingComplexEventDateOffsetPeriod, Tag 41741.
func (m NoUnderlyingComplexEvents) SetUnderlyingComplexEventDateOffsetPeriod(v int) {
	m.Set(field.NewUnderlyingComplexEventDateOffsetPeriod(v))
}

// SetUnderlyingComplexEventDateOffsetUnit sets UnderlyingComplexEventDateOffsetUnit, Tag 41742.
func (m NoUnderlyingComplexEvents) SetUnderlyingComplexEventDateOffsetUnit(v string) {
	m.Set(field.NewUnderlyingComplexEventDateOffsetUnit(v))
}

// SetUnderlyingComplexEventDateOffsetDayType sets UnderlyingComplexEventDateOffsetDayType, Tag 41743.
func (m NoUnderlyingComplexEvents) SetUnderlyingComplexEventDateOffsetDayType(v int) {
	m.Set(field.NewUnderlyingComplexEventDateOffsetDayType(v))
}

// SetUnderlyingComplexEventDateBusinessDayConvention sets UnderlyingComplexEventDateBusinessDayConvention, Tag 41744.
func (m NoUnderlyingComplexEvents) SetUnderlyingComplexEventDateBusinessDayConvention(v int) {
	m.Set(field.NewUnderlyingComplexEventDateBusinessDayConvention(v))
}

// SetNoUnderlyingComplexEventDateBusinessCenters sets NoUnderlyingComplexEventDateBusinessCenters, Tag 41737.
func (m NoUnderlyingComplexEvents) SetNoUnderlyingComplexEventDateBusinessCenters(f NoUnderlyingComplexEventDateBusinessCentersRepeatingGroup) {
	m.SetGroup(f)
}

// SetUnderlyingComplexEventDateAdjusted sets UnderlyingComplexEventDateAdjusted, Tag 41745.
func (m NoUnderlyingComplexEvents) SetUnderlyingComplexEventDateAdjusted(v string) {
	m.Set(field.NewUnderlyingComplexEventDateAdjusted(v))
}

// SetUnderlyingComplexEventFixingTime sets UnderlyingComplexEventFixingTime, Tag 41746.
func (m NoUnderlyingComplexEvents) SetUnderlyingComplexEventFixingTime(v string) {
	m.Set(field.NewUnderlyingComplexEventFixingTime(v))
}

// SetUnderlyingComplexEventFixingTimeBusinessCenter sets UnderlyingComplexEventFixingTimeBusinessCenter, Tag 41747.
func (m NoUnderlyingComplexEvents) SetUnderlyingComplexEventFixingTimeBusinessCenter(v string) {
	m.Set(field.NewUnderlyingComplexEventFixingTimeBusinessCenter(v))
}

// SetNoUnderlyingComplexEventPeriods sets NoUnderlyingComplexEventPeriods, Tag 41729.
func (m NoUnderlyingComplexEvents) SetNoUnderlyingComplexEventPeriods(f NoUnderlyingComplexEventPeriodsRepeatingGroup) {
	m.SetGroup(f)
}

// SetUnderlyingComplexEventCreditEventsXIDRef sets UnderlyingComplexEventCreditEventsXIDRef, Tag 2277.
func (m NoUnderlyingComplexEvents) SetUnderlyingComplexEventCreditEventsXIDRef(v string) {
	m.Set(field.NewUnderlyingComplexEventCreditEventsXIDRef(v))
}

// SetUnderlyingComplexEventCreditEventNotifyingParty sets UnderlyingComplexEventCreditEventNotifyingParty, Tag 2278.
func (m NoUnderlyingComplexEvents) SetUnderlyingComplexEventCreditEventNotifyingParty(v int) {
	m.Set(field.NewUnderlyingComplexEventCreditEventNotifyingParty(v))
}

// SetUnderlyingComplexEventCreditEventBusinessCenter sets UnderlyingComplexEventCreditEventBusinessCenter, Tag 2279.
func (m NoUnderlyingComplexEvents) SetUnderlyingComplexEventCreditEventBusinessCenter(v string) {
	m.Set(field.NewUnderlyingComplexEventCreditEventBusinessCenter(v))
}

// SetUnderlyingComplexEventCreditEventStandardSources sets UnderlyingComplexEventCreditEventStandardSources, Tag 2280.
func (m NoUnderlyingComplexEvents) SetUnderlyingComplexEventCreditEventStandardSources(v bool) {
	m.Set(field.NewUnderlyingComplexEventCreditEventStandardSources(v))
}

// SetUnderlyingComplexEventCreditEventMinimumSources sets UnderlyingComplexEventCreditEventMinimumSources, Tag 2281.
func (m NoUnderlyingComplexEvents) SetUnderlyingComplexEventCreditEventMinimumSources(v int) {
	m.Set(field.NewUnderlyingComplexEventCreditEventMinimumSources(v))
}

// SetNoUnderlyingComplexEventCreditEventSources sets NoUnderlyingComplexEventCreditEventSources, Tag 41748.
func (m NoUnderlyingComplexEvents) SetNoUnderlyingComplexEventCreditEventSources(f NoUnderlyingComplexEventCreditEventSourcesRepeatingGroup) {
	m.SetGroup(f)
}

// SetNoUnderlyingComplexEventCreditEvents sets NoUnderlyingComplexEventCreditEvents, Tag 41716.
func (m NoUnderlyingComplexEvents) SetNoUnderlyingComplexEventCreditEvents(f NoUnderlyingComplexEventCreditEventsRepeatingGroup) {
	m.SetGroup(f)
}

// SetUnderlyingComplexEventXID sets UnderlyingComplexEventXID, Tag 2282.
func (m NoUnderlyingComplexEvents) SetUnderlyingComplexEventXID(v string) {
	m.Set(field.NewUnderlyingComplexEventXID(v))
}

// SetUnderlyingComplexEventXIDRef sets UnderlyingComplexEventXIDRef, Tag 2283.
func (m NoUnderlyingComplexEvents) SetUnderlyingComplexEventXIDRef(v string) {
	m.Set(field.NewUnderlyingComplexEventXIDRef(v))
}

// SetUnderlyingComplexEventSpotRate sets UnderlyingComplexEventSpotRate, Tag 2419.
func (m NoUnderlyingComplexEvents) SetUnderlyingComplexEventSpotRate(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingComplexEventSpotRate(value, scale))
}

// SetUnderlyingComplexEventForwardPoints sets UnderlyingComplexEventForwardPoints, Tag 2420.
func (m NoUnderlyingComplexEvents) SetUnderlyingComplexEventForwardPoints(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingComplexEventForwardPoints(value, scale))
}

// SetUnderlyingComplexEventFuturesPriceValuation sets UnderlyingComplexEventFuturesPriceValuation, Tag 2611.
func (m NoUnderlyingComplexEvents) SetUnderlyingComplexEventFuturesPriceValuation(v bool) {
	m.Set(field.NewUnderlyingComplexEventFuturesPriceValuation(v))
}

// SetUnderlyingComplexEventOptionsPriceValuation sets UnderlyingComplexEventOptionsPriceValuation, Tag 2612.
func (m NoUnderlyingComplexEvents) SetUnderlyingComplexEventOptionsPriceValuation(v bool) {
	m.Set(field.NewUnderlyingComplexEventOptionsPriceValuation(v))
}

// SetUnderlyingComplexEventPVFinalPriceElectionFallback sets UnderlyingComplexEventPVFinalPriceElectionFallback, Tag 2613.
func (m NoUnderlyingComplexEvents) SetUnderlyingComplexEventPVFinalPriceElectionFallback(v int) {
	m.Set(field.NewUnderlyingComplexEventPVFinalPriceElectionFallback(v))
}

// GetUnderlyingComplexEventType gets UnderlyingComplexEventType, Tag 2046.
func (m NoUnderlyingComplexEvents) GetUnderlyingComplexEventType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingComplexEventTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingComplexOptPayoutAmount gets UnderlyingComplexOptPayoutAmount, Tag 2047.
func (m NoUnderlyingComplexEvents) GetUnderlyingComplexOptPayoutAmount() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingComplexOptPayoutAmountField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingComplexEventPrice gets UnderlyingComplexEventPrice, Tag 2048.
func (m NoUnderlyingComplexEvents) GetUnderlyingComplexEventPrice() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingComplexEventPriceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingComplexEventPriceBoundaryMethod gets UnderlyingComplexEventPriceBoundaryMethod, Tag 2049.
func (m NoUnderlyingComplexEvents) GetUnderlyingComplexEventPriceBoundaryMethod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingComplexEventPriceBoundaryMethodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingComplexEventPriceBoundaryPrecision gets UnderlyingComplexEventPriceBoundaryPrecision, Tag 2050.
func (m NoUnderlyingComplexEvents) GetUnderlyingComplexEventPriceBoundaryPrecision() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingComplexEventPriceBoundaryPrecisionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingComplexEventPriceTimeType gets UnderlyingComplexEventPriceTimeType, Tag 2051.
func (m NoUnderlyingComplexEvents) GetUnderlyingComplexEventPriceTimeType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingComplexEventPriceTimeTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingComplexEventCondition gets UnderlyingComplexEventCondition, Tag 2052.
func (m NoUnderlyingComplexEvents) GetUnderlyingComplexEventCondition() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingComplexEventConditionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUnderlyingComplexEventDates gets NoUnderlyingComplexEventDates, Tag 2053.
func (m NoUnderlyingComplexEvents) GetNoUnderlyingComplexEventDates() (NoUnderlyingComplexEventDatesRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingComplexEventDatesRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetUnderlyingComplexOptPayoutPaySide gets UnderlyingComplexOptPayoutPaySide, Tag 2261.
func (m NoUnderlyingComplexEvents) GetUnderlyingComplexOptPayoutPaySide() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingComplexOptPayoutPaySideField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingComplexOptPayoutReceiveSide gets UnderlyingComplexOptPayoutReceiveSide, Tag 2262.
func (m NoUnderlyingComplexEvents) GetUnderlyingComplexOptPayoutReceiveSide() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingComplexOptPayoutReceiveSideField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingComplexOptPayoutUnderlier gets UnderlyingComplexOptPayoutUnderlier, Tag 2263.
func (m NoUnderlyingComplexEvents) GetUnderlyingComplexOptPayoutUnderlier() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingComplexOptPayoutUnderlierField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingComplexOptPayoutPercentage gets UnderlyingComplexOptPayoutPercentage, Tag 2264.
func (m NoUnderlyingComplexEvents) GetUnderlyingComplexOptPayoutPercentage() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingComplexOptPayoutPercentageField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingComplexOptPayoutTime gets UnderlyingComplexOptPayoutTime, Tag 2265.
func (m NoUnderlyingComplexEvents) GetUnderlyingComplexOptPayoutTime() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingComplexOptPayoutTimeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingComplexOptPayoutCurrency gets UnderlyingComplexOptPayoutCurrency, Tag 2266.
func (m NoUnderlyingComplexEvents) GetUnderlyingComplexOptPayoutCurrency() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingComplexOptPayoutCurrencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingComplexEventPricePercentage gets UnderlyingComplexEventPricePercentage, Tag 2267.
func (m NoUnderlyingComplexEvents) GetUnderlyingComplexEventPricePercentage() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingComplexEventPricePercentageField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingComplexEventCurrencyOne gets UnderlyingComplexEventCurrencyOne, Tag 2268.
func (m NoUnderlyingComplexEvents) GetUnderlyingComplexEventCurrencyOne() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingComplexEventCurrencyOneField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingComplexEventCurrencyTwo gets UnderlyingComplexEventCurrencyTwo, Tag 2269.
func (m NoUnderlyingComplexEvents) GetUnderlyingComplexEventCurrencyTwo() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingComplexEventCurrencyTwoField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingComplexEventQuoteBasis gets UnderlyingComplexEventQuoteBasis, Tag 2270.
func (m NoUnderlyingComplexEvents) GetUnderlyingComplexEventQuoteBasis() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingComplexEventQuoteBasisField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingComplexEventFixedFXRate gets UnderlyingComplexEventFixedFXRate, Tag 2271.
func (m NoUnderlyingComplexEvents) GetUnderlyingComplexEventFixedFXRate() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingComplexEventFixedFXRateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingComplexEventDeterminationMethod gets UnderlyingComplexEventDeterminationMethod, Tag 2272.
func (m NoUnderlyingComplexEvents) GetUnderlyingComplexEventDeterminationMethod() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingComplexEventDeterminationMethodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingComplexEventCalculationAgent gets UnderlyingComplexEventCalculationAgent, Tag 2273.
func (m NoUnderlyingComplexEvents) GetUnderlyingComplexEventCalculationAgent() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingComplexEventCalculationAgentField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingComplexEventStrikePrice gets UnderlyingComplexEventStrikePrice, Tag 2274.
func (m NoUnderlyingComplexEvents) GetUnderlyingComplexEventStrikePrice() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingComplexEventStrikePriceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingComplexEventStrikeFactor gets UnderlyingComplexEventStrikeFactor, Tag 2275.
func (m NoUnderlyingComplexEvents) GetUnderlyingComplexEventStrikeFactor() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingComplexEventStrikeFactorField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingComplexEventStrikeNumberOfOptions gets UnderlyingComplexEventStrikeNumberOfOptions, Tag 2276.
func (m NoUnderlyingComplexEvents) GetUnderlyingComplexEventStrikeNumberOfOptions() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingComplexEventStrikeNumberOfOptionsField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUnderlyingComplexEventRateSources gets NoUnderlyingComplexEventRateSources, Tag 41732.
func (m NoUnderlyingComplexEvents) GetNoUnderlyingComplexEventRateSources() (NoUnderlyingComplexEventRateSourcesRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingComplexEventRateSourcesRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetUnderlyingComplexEventDateUnadjusted gets UnderlyingComplexEventDateUnadjusted, Tag 41739.
func (m NoUnderlyingComplexEvents) GetUnderlyingComplexEventDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingComplexEventDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingComplexEventDateRelativeTo gets UnderlyingComplexEventDateRelativeTo, Tag 41740.
func (m NoUnderlyingComplexEvents) GetUnderlyingComplexEventDateRelativeTo() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingComplexEventDateRelativeToField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingComplexEventDateOffsetPeriod gets UnderlyingComplexEventDateOffsetPeriod, Tag 41741.
func (m NoUnderlyingComplexEvents) GetUnderlyingComplexEventDateOffsetPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingComplexEventDateOffsetPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingComplexEventDateOffsetUnit gets UnderlyingComplexEventDateOffsetUnit, Tag 41742.
func (m NoUnderlyingComplexEvents) GetUnderlyingComplexEventDateOffsetUnit() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingComplexEventDateOffsetUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingComplexEventDateOffsetDayType gets UnderlyingComplexEventDateOffsetDayType, Tag 41743.
func (m NoUnderlyingComplexEvents) GetUnderlyingComplexEventDateOffsetDayType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingComplexEventDateOffsetDayTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingComplexEventDateBusinessDayConvention gets UnderlyingComplexEventDateBusinessDayConvention, Tag 41744.
func (m NoUnderlyingComplexEvents) GetUnderlyingComplexEventDateBusinessDayConvention() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingComplexEventDateBusinessDayConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUnderlyingComplexEventDateBusinessCenters gets NoUnderlyingComplexEventDateBusinessCenters, Tag 41737.
func (m NoUnderlyingComplexEvents) GetNoUnderlyingComplexEventDateBusinessCenters() (NoUnderlyingComplexEventDateBusinessCentersRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingComplexEventDateBusinessCentersRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetUnderlyingComplexEventDateAdjusted gets UnderlyingComplexEventDateAdjusted, Tag 41745.
func (m NoUnderlyingComplexEvents) GetUnderlyingComplexEventDateAdjusted() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingComplexEventDateAdjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingComplexEventFixingTime gets UnderlyingComplexEventFixingTime, Tag 41746.
func (m NoUnderlyingComplexEvents) GetUnderlyingComplexEventFixingTime() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingComplexEventFixingTimeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingComplexEventFixingTimeBusinessCenter gets UnderlyingComplexEventFixingTimeBusinessCenter, Tag 41747.
func (m NoUnderlyingComplexEvents) GetUnderlyingComplexEventFixingTimeBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingComplexEventFixingTimeBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUnderlyingComplexEventPeriods gets NoUnderlyingComplexEventPeriods, Tag 41729.
func (m NoUnderlyingComplexEvents) GetNoUnderlyingComplexEventPeriods() (NoUnderlyingComplexEventPeriodsRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingComplexEventPeriodsRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetUnderlyingComplexEventCreditEventsXIDRef gets UnderlyingComplexEventCreditEventsXIDRef, Tag 2277.
func (m NoUnderlyingComplexEvents) GetUnderlyingComplexEventCreditEventsXIDRef() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingComplexEventCreditEventsXIDRefField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingComplexEventCreditEventNotifyingParty gets UnderlyingComplexEventCreditEventNotifyingParty, Tag 2278.
func (m NoUnderlyingComplexEvents) GetUnderlyingComplexEventCreditEventNotifyingParty() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingComplexEventCreditEventNotifyingPartyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingComplexEventCreditEventBusinessCenter gets UnderlyingComplexEventCreditEventBusinessCenter, Tag 2279.
func (m NoUnderlyingComplexEvents) GetUnderlyingComplexEventCreditEventBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingComplexEventCreditEventBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingComplexEventCreditEventStandardSources gets UnderlyingComplexEventCreditEventStandardSources, Tag 2280.
func (m NoUnderlyingComplexEvents) GetUnderlyingComplexEventCreditEventStandardSources() (v bool, err quickfix.MessageRejectError) {
	var f field.UnderlyingComplexEventCreditEventStandardSourcesField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingComplexEventCreditEventMinimumSources gets UnderlyingComplexEventCreditEventMinimumSources, Tag 2281.
func (m NoUnderlyingComplexEvents) GetUnderlyingComplexEventCreditEventMinimumSources() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingComplexEventCreditEventMinimumSourcesField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUnderlyingComplexEventCreditEventSources gets NoUnderlyingComplexEventCreditEventSources, Tag 41748.
func (m NoUnderlyingComplexEvents) GetNoUnderlyingComplexEventCreditEventSources() (NoUnderlyingComplexEventCreditEventSourcesRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingComplexEventCreditEventSourcesRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetNoUnderlyingComplexEventCreditEvents gets NoUnderlyingComplexEventCreditEvents, Tag 41716.
func (m NoUnderlyingComplexEvents) GetNoUnderlyingComplexEventCreditEvents() (NoUnderlyingComplexEventCreditEventsRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingComplexEventCreditEventsRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetUnderlyingComplexEventXID gets UnderlyingComplexEventXID, Tag 2282.
func (m NoUnderlyingComplexEvents) GetUnderlyingComplexEventXID() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingComplexEventXIDField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingComplexEventXIDRef gets UnderlyingComplexEventXIDRef, Tag 2283.
func (m NoUnderlyingComplexEvents) GetUnderlyingComplexEventXIDRef() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingComplexEventXIDRefField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingComplexEventSpotRate gets UnderlyingComplexEventSpotRate, Tag 2419.
func (m NoUnderlyingComplexEvents) GetUnderlyingComplexEventSpotRate() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingComplexEventSpotRateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingComplexEventForwardPoints gets UnderlyingComplexEventForwardPoints, Tag 2420.
func (m NoUnderlyingComplexEvents) GetUnderlyingComplexEventForwardPoints() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingComplexEventForwardPointsField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingComplexEventFuturesPriceValuation gets UnderlyingComplexEventFuturesPriceValuation, Tag 2611.
func (m NoUnderlyingComplexEvents) GetUnderlyingComplexEventFuturesPriceValuation() (v bool, err quickfix.MessageRejectError) {
	var f field.UnderlyingComplexEventFuturesPriceValuationField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingComplexEventOptionsPriceValuation gets UnderlyingComplexEventOptionsPriceValuation, Tag 2612.
func (m NoUnderlyingComplexEvents) GetUnderlyingComplexEventOptionsPriceValuation() (v bool, err quickfix.MessageRejectError) {
	var f field.UnderlyingComplexEventOptionsPriceValuationField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingComplexEventPVFinalPriceElectionFallback gets UnderlyingComplexEventPVFinalPriceElectionFallback, Tag 2613.
func (m NoUnderlyingComplexEvents) GetUnderlyingComplexEventPVFinalPriceElectionFallback() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingComplexEventPVFinalPriceElectionFallbackField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingComplexEventType returns true if UnderlyingComplexEventType is present, Tag 2046.
func (m NoUnderlyingComplexEvents) HasUnderlyingComplexEventType() bool {
	return m.Has(tag.UnderlyingComplexEventType)
}

// HasUnderlyingComplexOptPayoutAmount returns true if UnderlyingComplexOptPayoutAmount is present, Tag 2047.
func (m NoUnderlyingComplexEvents) HasUnderlyingComplexOptPayoutAmount() bool {
	return m.Has(tag.UnderlyingComplexOptPayoutAmount)
}

// HasUnderlyingComplexEventPrice returns true if UnderlyingComplexEventPrice is present, Tag 2048.
func (m NoUnderlyingComplexEvents) HasUnderlyingComplexEventPrice() bool {
	return m.Has(tag.UnderlyingComplexEventPrice)
}

// HasUnderlyingComplexEventPriceBoundaryMethod returns true if UnderlyingComplexEventPriceBoundaryMethod is present, Tag 2049.
func (m NoUnderlyingComplexEvents) HasUnderlyingComplexEventPriceBoundaryMethod() bool {
	return m.Has(tag.UnderlyingComplexEventPriceBoundaryMethod)
}

// HasUnderlyingComplexEventPriceBoundaryPrecision returns true if UnderlyingComplexEventPriceBoundaryPrecision is present, Tag 2050.
func (m NoUnderlyingComplexEvents) HasUnderlyingComplexEventPriceBoundaryPrecision() bool {
	return m.Has(tag.UnderlyingComplexEventPriceBoundaryPrecision)
}

// HasUnderlyingComplexEventPriceTimeType returns true if UnderlyingComplexEventPriceTimeType is present, Tag 2051.
func (m NoUnderlyingComplexEvents) HasUnderlyingComplexEventPriceTimeType() bool {
	return m.Has(tag.UnderlyingComplexEventPriceTimeType)
}

// HasUnderlyingComplexEventCondition returns true if UnderlyingComplexEventCondition is present, Tag 2052.
func (m NoUnderlyingComplexEvents) HasUnderlyingComplexEventCondition() bool {
	return m.Has(tag.UnderlyingComplexEventCondition)
}

// HasNoUnderlyingComplexEventDates returns true if NoUnderlyingComplexEventDates is present, Tag 2053.
func (m NoUnderlyingComplexEvents) HasNoUnderlyingComplexEventDates() bool {
	return m.Has(tag.NoUnderlyingComplexEventDates)
}

// HasUnderlyingComplexOptPayoutPaySide returns true if UnderlyingComplexOptPayoutPaySide is present, Tag 2261.
func (m NoUnderlyingComplexEvents) HasUnderlyingComplexOptPayoutPaySide() bool {
	return m.Has(tag.UnderlyingComplexOptPayoutPaySide)
}

// HasUnderlyingComplexOptPayoutReceiveSide returns true if UnderlyingComplexOptPayoutReceiveSide is present, Tag 2262.
func (m NoUnderlyingComplexEvents) HasUnderlyingComplexOptPayoutReceiveSide() bool {
	return m.Has(tag.UnderlyingComplexOptPayoutReceiveSide)
}

// HasUnderlyingComplexOptPayoutUnderlier returns true if UnderlyingComplexOptPayoutUnderlier is present, Tag 2263.
func (m NoUnderlyingComplexEvents) HasUnderlyingComplexOptPayoutUnderlier() bool {
	return m.Has(tag.UnderlyingComplexOptPayoutUnderlier)
}

// HasUnderlyingComplexOptPayoutPercentage returns true if UnderlyingComplexOptPayoutPercentage is present, Tag 2264.
func (m NoUnderlyingComplexEvents) HasUnderlyingComplexOptPayoutPercentage() bool {
	return m.Has(tag.UnderlyingComplexOptPayoutPercentage)
}

// HasUnderlyingComplexOptPayoutTime returns true if UnderlyingComplexOptPayoutTime is present, Tag 2265.
func (m NoUnderlyingComplexEvents) HasUnderlyingComplexOptPayoutTime() bool {
	return m.Has(tag.UnderlyingComplexOptPayoutTime)
}

// HasUnderlyingComplexOptPayoutCurrency returns true if UnderlyingComplexOptPayoutCurrency is present, Tag 2266.
func (m NoUnderlyingComplexEvents) HasUnderlyingComplexOptPayoutCurrency() bool {
	return m.Has(tag.UnderlyingComplexOptPayoutCurrency)
}

// HasUnderlyingComplexEventPricePercentage returns true if UnderlyingComplexEventPricePercentage is present, Tag 2267.
func (m NoUnderlyingComplexEvents) HasUnderlyingComplexEventPricePercentage() bool {
	return m.Has(tag.UnderlyingComplexEventPricePercentage)
}

// HasUnderlyingComplexEventCurrencyOne returns true if UnderlyingComplexEventCurrencyOne is present, Tag 2268.
func (m NoUnderlyingComplexEvents) HasUnderlyingComplexEventCurrencyOne() bool {
	return m.Has(tag.UnderlyingComplexEventCurrencyOne)
}

// HasUnderlyingComplexEventCurrencyTwo returns true if UnderlyingComplexEventCurrencyTwo is present, Tag 2269.
func (m NoUnderlyingComplexEvents) HasUnderlyingComplexEventCurrencyTwo() bool {
	return m.Has(tag.UnderlyingComplexEventCurrencyTwo)
}

// HasUnderlyingComplexEventQuoteBasis returns true if UnderlyingComplexEventQuoteBasis is present, Tag 2270.
func (m NoUnderlyingComplexEvents) HasUnderlyingComplexEventQuoteBasis() bool {
	return m.Has(tag.UnderlyingComplexEventQuoteBasis)
}

// HasUnderlyingComplexEventFixedFXRate returns true if UnderlyingComplexEventFixedFXRate is present, Tag 2271.
func (m NoUnderlyingComplexEvents) HasUnderlyingComplexEventFixedFXRate() bool {
	return m.Has(tag.UnderlyingComplexEventFixedFXRate)
}

// HasUnderlyingComplexEventDeterminationMethod returns true if UnderlyingComplexEventDeterminationMethod is present, Tag 2272.
func (m NoUnderlyingComplexEvents) HasUnderlyingComplexEventDeterminationMethod() bool {
	return m.Has(tag.UnderlyingComplexEventDeterminationMethod)
}

// HasUnderlyingComplexEventCalculationAgent returns true if UnderlyingComplexEventCalculationAgent is present, Tag 2273.
func (m NoUnderlyingComplexEvents) HasUnderlyingComplexEventCalculationAgent() bool {
	return m.Has(tag.UnderlyingComplexEventCalculationAgent)
}

// HasUnderlyingComplexEventStrikePrice returns true if UnderlyingComplexEventStrikePrice is present, Tag 2274.
func (m NoUnderlyingComplexEvents) HasUnderlyingComplexEventStrikePrice() bool {
	return m.Has(tag.UnderlyingComplexEventStrikePrice)
}

// HasUnderlyingComplexEventStrikeFactor returns true if UnderlyingComplexEventStrikeFactor is present, Tag 2275.
func (m NoUnderlyingComplexEvents) HasUnderlyingComplexEventStrikeFactor() bool {
	return m.Has(tag.UnderlyingComplexEventStrikeFactor)
}

// HasUnderlyingComplexEventStrikeNumberOfOptions returns true if UnderlyingComplexEventStrikeNumberOfOptions is present, Tag 2276.
func (m NoUnderlyingComplexEvents) HasUnderlyingComplexEventStrikeNumberOfOptions() bool {
	return m.Has(tag.UnderlyingComplexEventStrikeNumberOfOptions)
}

// HasNoUnderlyingComplexEventRateSources returns true if NoUnderlyingComplexEventRateSources is present, Tag 41732.
func (m NoUnderlyingComplexEvents) HasNoUnderlyingComplexEventRateSources() bool {
	return m.Has(tag.NoUnderlyingComplexEventRateSources)
}

// HasUnderlyingComplexEventDateUnadjusted returns true if UnderlyingComplexEventDateUnadjusted is present, Tag 41739.
func (m NoUnderlyingComplexEvents) HasUnderlyingComplexEventDateUnadjusted() bool {
	return m.Has(tag.UnderlyingComplexEventDateUnadjusted)
}

// HasUnderlyingComplexEventDateRelativeTo returns true if UnderlyingComplexEventDateRelativeTo is present, Tag 41740.
func (m NoUnderlyingComplexEvents) HasUnderlyingComplexEventDateRelativeTo() bool {
	return m.Has(tag.UnderlyingComplexEventDateRelativeTo)
}

// HasUnderlyingComplexEventDateOffsetPeriod returns true if UnderlyingComplexEventDateOffsetPeriod is present, Tag 41741.
func (m NoUnderlyingComplexEvents) HasUnderlyingComplexEventDateOffsetPeriod() bool {
	return m.Has(tag.UnderlyingComplexEventDateOffsetPeriod)
}

// HasUnderlyingComplexEventDateOffsetUnit returns true if UnderlyingComplexEventDateOffsetUnit is present, Tag 41742.
func (m NoUnderlyingComplexEvents) HasUnderlyingComplexEventDateOffsetUnit() bool {
	return m.Has(tag.UnderlyingComplexEventDateOffsetUnit)
}

// HasUnderlyingComplexEventDateOffsetDayType returns true if UnderlyingComplexEventDateOffsetDayType is present, Tag 41743.
func (m NoUnderlyingComplexEvents) HasUnderlyingComplexEventDateOffsetDayType() bool {
	return m.Has(tag.UnderlyingComplexEventDateOffsetDayType)
}

// HasUnderlyingComplexEventDateBusinessDayConvention returns true if UnderlyingComplexEventDateBusinessDayConvention is present, Tag 41744.
func (m NoUnderlyingComplexEvents) HasUnderlyingComplexEventDateBusinessDayConvention() bool {
	return m.Has(tag.UnderlyingComplexEventDateBusinessDayConvention)
}

// HasNoUnderlyingComplexEventDateBusinessCenters returns true if NoUnderlyingComplexEventDateBusinessCenters is present, Tag 41737.
func (m NoUnderlyingComplexEvents) HasNoUnderlyingComplexEventDateBusinessCenters() bool {
	return m.Has(tag.NoUnderlyingComplexEventDateBusinessCenters)
}

// HasUnderlyingComplexEventDateAdjusted returns true if UnderlyingComplexEventDateAdjusted is present, Tag 41745.
func (m NoUnderlyingComplexEvents) HasUnderlyingComplexEventDateAdjusted() bool {
	return m.Has(tag.UnderlyingComplexEventDateAdjusted)
}

// HasUnderlyingComplexEventFixingTime returns true if UnderlyingComplexEventFixingTime is present, Tag 41746.
func (m NoUnderlyingComplexEvents) HasUnderlyingComplexEventFixingTime() bool {
	return m.Has(tag.UnderlyingComplexEventFixingTime)
}

// HasUnderlyingComplexEventFixingTimeBusinessCenter returns true if UnderlyingComplexEventFixingTimeBusinessCenter is present, Tag 41747.
func (m NoUnderlyingComplexEvents) HasUnderlyingComplexEventFixingTimeBusinessCenter() bool {
	return m.Has(tag.UnderlyingComplexEventFixingTimeBusinessCenter)
}

// HasNoUnderlyingComplexEventPeriods returns true if NoUnderlyingComplexEventPeriods is present, Tag 41729.
func (m NoUnderlyingComplexEvents) HasNoUnderlyingComplexEventPeriods() bool {
	return m.Has(tag.NoUnderlyingComplexEventPeriods)
}

// HasUnderlyingComplexEventCreditEventsXIDRef returns true if UnderlyingComplexEventCreditEventsXIDRef is present, Tag 2277.
func (m NoUnderlyingComplexEvents) HasUnderlyingComplexEventCreditEventsXIDRef() bool {
	return m.Has(tag.UnderlyingComplexEventCreditEventsXIDRef)
}

// HasUnderlyingComplexEventCreditEventNotifyingParty returns true if UnderlyingComplexEventCreditEventNotifyingParty is present, Tag 2278.
func (m NoUnderlyingComplexEvents) HasUnderlyingComplexEventCreditEventNotifyingParty() bool {
	return m.Has(tag.UnderlyingComplexEventCreditEventNotifyingParty)
}

// HasUnderlyingComplexEventCreditEventBusinessCenter returns true if UnderlyingComplexEventCreditEventBusinessCenter is present, Tag 2279.
func (m NoUnderlyingComplexEvents) HasUnderlyingComplexEventCreditEventBusinessCenter() bool {
	return m.Has(tag.UnderlyingComplexEventCreditEventBusinessCenter)
}

// HasUnderlyingComplexEventCreditEventStandardSources returns true if UnderlyingComplexEventCreditEventStandardSources is present, Tag 2280.
func (m NoUnderlyingComplexEvents) HasUnderlyingComplexEventCreditEventStandardSources() bool {
	return m.Has(tag.UnderlyingComplexEventCreditEventStandardSources)
}

// HasUnderlyingComplexEventCreditEventMinimumSources returns true if UnderlyingComplexEventCreditEventMinimumSources is present, Tag 2281.
func (m NoUnderlyingComplexEvents) HasUnderlyingComplexEventCreditEventMinimumSources() bool {
	return m.Has(tag.UnderlyingComplexEventCreditEventMinimumSources)
}

// HasNoUnderlyingComplexEventCreditEventSources returns true if NoUnderlyingComplexEventCreditEventSources is present, Tag 41748.
func (m NoUnderlyingComplexEvents) HasNoUnderlyingComplexEventCreditEventSources() bool {
	return m.Has(tag.NoUnderlyingComplexEventCreditEventSources)
}

// HasNoUnderlyingComplexEventCreditEvents returns true if NoUnderlyingComplexEventCreditEvents is present, Tag 41716.
func (m NoUnderlyingComplexEvents) HasNoUnderlyingComplexEventCreditEvents() bool {
	return m.Has(tag.NoUnderlyingComplexEventCreditEvents)
}

// HasUnderlyingComplexEventXID returns true if UnderlyingComplexEventXID is present, Tag 2282.
func (m NoUnderlyingComplexEvents) HasUnderlyingComplexEventXID() bool {
	return m.Has(tag.UnderlyingComplexEventXID)
}

// HasUnderlyingComplexEventXIDRef returns true if UnderlyingComplexEventXIDRef is present, Tag 2283.
func (m NoUnderlyingComplexEvents) HasUnderlyingComplexEventXIDRef() bool {
	return m.Has(tag.UnderlyingComplexEventXIDRef)
}

// HasUnderlyingComplexEventSpotRate returns true if UnderlyingComplexEventSpotRate is present, Tag 2419.
func (m NoUnderlyingComplexEvents) HasUnderlyingComplexEventSpotRate() bool {
	return m.Has(tag.UnderlyingComplexEventSpotRate)
}

// HasUnderlyingComplexEventForwardPoints returns true if UnderlyingComplexEventForwardPoints is present, Tag 2420.
func (m NoUnderlyingComplexEvents) HasUnderlyingComplexEventForwardPoints() bool {
	return m.Has(tag.UnderlyingComplexEventForwardPoints)
}

// HasUnderlyingComplexEventFuturesPriceValuation returns true if UnderlyingComplexEventFuturesPriceValuation is present, Tag 2611.
func (m NoUnderlyingComplexEvents) HasUnderlyingComplexEventFuturesPriceValuation() bool {
	return m.Has(tag.UnderlyingComplexEventFuturesPriceValuation)
}

// HasUnderlyingComplexEventOptionsPriceValuation returns true if UnderlyingComplexEventOptionsPriceValuation is present, Tag 2612.
func (m NoUnderlyingComplexEvents) HasUnderlyingComplexEventOptionsPriceValuation() bool {
	return m.Has(tag.UnderlyingComplexEventOptionsPriceValuation)
}

// HasUnderlyingComplexEventPVFinalPriceElectionFallback returns true if UnderlyingComplexEventPVFinalPriceElectionFallback is present, Tag 2613.
func (m NoUnderlyingComplexEvents) HasUnderlyingComplexEventPVFinalPriceElectionFallback() bool {
	return m.Has(tag.UnderlyingComplexEventPVFinalPriceElectionFallback)
}

// NoUnderlyingComplexEventDates is a repeating group element, Tag 2053.
type NoUnderlyingComplexEventDates struct {
	*quickfix.Group
}

// SetUnderlyingComplexEventStartDate sets UnderlyingComplexEventStartDate, Tag 2054.
func (m NoUnderlyingComplexEventDates) SetUnderlyingComplexEventStartDate(v string) {
	m.Set(field.NewUnderlyingComplexEventStartDate(v))
}

// SetUnderlyingComplexEventEndDate sets UnderlyingComplexEventEndDate, Tag 2055.
func (m NoUnderlyingComplexEventDates) SetUnderlyingComplexEventEndDate(v string) {
	m.Set(field.NewUnderlyingComplexEventEndDate(v))
}

// SetNoUnderlyingComplexEventTimes sets NoUnderlyingComplexEventTimes, Tag 2056.
func (m NoUnderlyingComplexEventDates) SetNoUnderlyingComplexEventTimes(f NoUnderlyingComplexEventTimesRepeatingGroup) {
	m.SetGroup(f)
}

// GetUnderlyingComplexEventStartDate gets UnderlyingComplexEventStartDate, Tag 2054.
func (m NoUnderlyingComplexEventDates) GetUnderlyingComplexEventStartDate() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingComplexEventStartDateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingComplexEventEndDate gets UnderlyingComplexEventEndDate, Tag 2055.
func (m NoUnderlyingComplexEventDates) GetUnderlyingComplexEventEndDate() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingComplexEventEndDateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUnderlyingComplexEventTimes gets NoUnderlyingComplexEventTimes, Tag 2056.
func (m NoUnderlyingComplexEventDates) GetNoUnderlyingComplexEventTimes() (NoUnderlyingComplexEventTimesRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingComplexEventTimesRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// HasUnderlyingComplexEventStartDate returns true if UnderlyingComplexEventStartDate is present, Tag 2054.
func (m NoUnderlyingComplexEventDates) HasUnderlyingComplexEventStartDate() bool {
	return m.Has(tag.UnderlyingComplexEventStartDate)
}

// HasUnderlyingComplexEventEndDate returns true if UnderlyingComplexEventEndDate is present, Tag 2055.
func (m NoUnderlyingComplexEventDates) HasUnderlyingComplexEventEndDate() bool {
	return m.Has(tag.UnderlyingComplexEventEndDate)
}

// HasNoUnderlyingComplexEventTimes returns true if NoUnderlyingComplexEventTimes is present, Tag 2056.
func (m NoUnderlyingComplexEventDates) HasNoUnderlyingComplexEventTimes() bool {
	return m.Has(tag.NoUnderlyingComplexEventTimes)
}

// NoUnderlyingComplexEventTimes is a repeating group element, Tag 2056.
type NoUnderlyingComplexEventTimes struct {
	*quickfix.Group
}

// SetUnderlyingComplexEventStartTime sets UnderlyingComplexEventStartTime, Tag 2057.
func (m NoUnderlyingComplexEventTimes) SetUnderlyingComplexEventStartTime(v string) {
	m.Set(field.NewUnderlyingComplexEventStartTime(v))
}

// SetUnderlyingComplexEventEndTime sets UnderlyingComplexEventEndTime, Tag 2058.
func (m NoUnderlyingComplexEventTimes) SetUnderlyingComplexEventEndTime(v string) {
	m.Set(field.NewUnderlyingComplexEventEndTime(v))
}

// GetUnderlyingComplexEventStartTime gets UnderlyingComplexEventStartTime, Tag 2057.
func (m NoUnderlyingComplexEventTimes) GetUnderlyingComplexEventStartTime() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingComplexEventStartTimeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingComplexEventEndTime gets UnderlyingComplexEventEndTime, Tag 2058.
func (m NoUnderlyingComplexEventTimes) GetUnderlyingComplexEventEndTime() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingComplexEventEndTimeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingComplexEventStartTime returns true if UnderlyingComplexEventStartTime is present, Tag 2057.
func (m NoUnderlyingComplexEventTimes) HasUnderlyingComplexEventStartTime() bool {
	return m.Has(tag.UnderlyingComplexEventStartTime)
}

// HasUnderlyingComplexEventEndTime returns true if UnderlyingComplexEventEndTime is present, Tag 2058.
func (m NoUnderlyingComplexEventTimes) HasUnderlyingComplexEventEndTime() bool {
	return m.Has(tag.UnderlyingComplexEventEndTime)
}

// NoUnderlyingComplexEventTimesRepeatingGroup is a repeating group, Tag 2056.
type NoUnderlyingComplexEventTimesRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingComplexEventTimesRepeatingGroup returns an initialized, NoUnderlyingComplexEventTimesRepeatingGroup.
func NewNoUnderlyingComplexEventTimesRepeatingGroup() NoUnderlyingComplexEventTimesRepeatingGroup {
	return NoUnderlyingComplexEventTimesRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingComplexEventTimes,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingComplexEventStartTime),
				quickfix.GroupElement(tag.UnderlyingComplexEventEndTime),
			},
		),
	}
}

// Add create and append a new NoUnderlyingComplexEventTimes to this group.
func (m NoUnderlyingComplexEventTimesRepeatingGroup) Add() NoUnderlyingComplexEventTimes {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingComplexEventTimes{g}
}

// Get returns the ith NoUnderlyingComplexEventTimes in the NoUnderlyingComplexEventTimesRepeatinGroup.
func (m NoUnderlyingComplexEventTimesRepeatingGroup) Get(i int) NoUnderlyingComplexEventTimes {
	return NoUnderlyingComplexEventTimes{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingComplexEventDatesRepeatingGroup is a repeating group, Tag 2053.
type NoUnderlyingComplexEventDatesRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingComplexEventDatesRepeatingGroup returns an initialized, NoUnderlyingComplexEventDatesRepeatingGroup.
func NewNoUnderlyingComplexEventDatesRepeatingGroup() NoUnderlyingComplexEventDatesRepeatingGroup {
	return NoUnderlyingComplexEventDatesRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingComplexEventDates,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingComplexEventStartDate),
				quickfix.GroupElement(tag.UnderlyingComplexEventEndDate),
				NewNoUnderlyingComplexEventTimesRepeatingGroup(),
			},
		),
	}
}

// Add create and append a new NoUnderlyingComplexEventDates to this group.
func (m NoUnderlyingComplexEventDatesRepeatingGroup) Add() NoUnderlyingComplexEventDates {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingComplexEventDates{g}
}

// Get returns the ith NoUnderlyingComplexEventDates in the NoUnderlyingComplexEventDatesRepeatinGroup.
func (m NoUnderlyingComplexEventDatesRepeatingGroup) Get(i int) NoUnderlyingComplexEventDates {
	return NoUnderlyingComplexEventDates{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingComplexEventRateSources is a repeating group element, Tag 41732.
type NoUnderlyingComplexEventRateSources struct {
	*quickfix.Group
}

// SetUnderlyingComplexEventRateSource sets UnderlyingComplexEventRateSource, Tag 41733.
func (m NoUnderlyingComplexEventRateSources) SetUnderlyingComplexEventRateSource(v int) {
	m.Set(field.NewUnderlyingComplexEventRateSource(v))
}

// SetUnderlyingComplexEventRateSourceType sets UnderlyingComplexEventRateSourceType, Tag 41734.
func (m NoUnderlyingComplexEventRateSources) SetUnderlyingComplexEventRateSourceType(v int) {
	m.Set(field.NewUnderlyingComplexEventRateSourceType(v))
}

// SetUnderlyingComplexEventReferencePage sets UnderlyingComplexEventReferencePage, Tag 41735.
func (m NoUnderlyingComplexEventRateSources) SetUnderlyingComplexEventReferencePage(v string) {
	m.Set(field.NewUnderlyingComplexEventReferencePage(v))
}

// SetUnderlyingComplexEventReferencePageHeading sets UnderlyingComplexEventReferencePageHeading, Tag 41736.
func (m NoUnderlyingComplexEventRateSources) SetUnderlyingComplexEventReferencePageHeading(v string) {
	m.Set(field.NewUnderlyingComplexEventReferencePageHeading(v))
}

// GetUnderlyingComplexEventRateSource gets UnderlyingComplexEventRateSource, Tag 41733.
func (m NoUnderlyingComplexEventRateSources) GetUnderlyingComplexEventRateSource() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingComplexEventRateSourceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingComplexEventRateSourceType gets UnderlyingComplexEventRateSourceType, Tag 41734.
func (m NoUnderlyingComplexEventRateSources) GetUnderlyingComplexEventRateSourceType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingComplexEventRateSourceTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingComplexEventReferencePage gets UnderlyingComplexEventReferencePage, Tag 41735.
func (m NoUnderlyingComplexEventRateSources) GetUnderlyingComplexEventReferencePage() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingComplexEventReferencePageField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingComplexEventReferencePageHeading gets UnderlyingComplexEventReferencePageHeading, Tag 41736.
func (m NoUnderlyingComplexEventRateSources) GetUnderlyingComplexEventReferencePageHeading() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingComplexEventReferencePageHeadingField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingComplexEventRateSource returns true if UnderlyingComplexEventRateSource is present, Tag 41733.
func (m NoUnderlyingComplexEventRateSources) HasUnderlyingComplexEventRateSource() bool {
	return m.Has(tag.UnderlyingComplexEventRateSource)
}

// HasUnderlyingComplexEventRateSourceType returns true if UnderlyingComplexEventRateSourceType is present, Tag 41734.
func (m NoUnderlyingComplexEventRateSources) HasUnderlyingComplexEventRateSourceType() bool {
	return m.Has(tag.UnderlyingComplexEventRateSourceType)
}

// HasUnderlyingComplexEventReferencePage returns true if UnderlyingComplexEventReferencePage is present, Tag 41735.
func (m NoUnderlyingComplexEventRateSources) HasUnderlyingComplexEventReferencePage() bool {
	return m.Has(tag.UnderlyingComplexEventReferencePage)
}

// HasUnderlyingComplexEventReferencePageHeading returns true if UnderlyingComplexEventReferencePageHeading is present, Tag 41736.
func (m NoUnderlyingComplexEventRateSources) HasUnderlyingComplexEventReferencePageHeading() bool {
	return m.Has(tag.UnderlyingComplexEventReferencePageHeading)
}

// NoUnderlyingComplexEventRateSourcesRepeatingGroup is a repeating group, Tag 41732.
type NoUnderlyingComplexEventRateSourcesRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingComplexEventRateSourcesRepeatingGroup returns an initialized, NoUnderlyingComplexEventRateSourcesRepeatingGroup.
func NewNoUnderlyingComplexEventRateSourcesRepeatingGroup() NoUnderlyingComplexEventRateSourcesRepeatingGroup {
	return NoUnderlyingComplexEventRateSourcesRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingComplexEventRateSources,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingComplexEventRateSource),
				quickfix.GroupElement(tag.UnderlyingComplexEventRateSourceType),
				quickfix.GroupElement(tag.UnderlyingComplexEventReferencePage),
				quickfix.GroupElement(tag.UnderlyingComplexEventReferencePageHeading),
			},
		),
	}
}

// Add create and append a new NoUnderlyingComplexEventRateSources to this group.
func (m NoUnderlyingComplexEventRateSourcesRepeatingGroup) Add() NoUnderlyingComplexEventRateSources {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingComplexEventRateSources{g}
}

// Get returns the ith NoUnderlyingComplexEventRateSources in the NoUnderlyingComplexEventRateSourcesRepeatinGroup.
func (m NoUnderlyingComplexEventRateSourcesRepeatingGroup) Get(i int) NoUnderlyingComplexEventRateSources {
	return NoUnderlyingComplexEventRateSources{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingComplexEventDateBusinessCenters is a repeating group element, Tag 41737.
type NoUnderlyingComplexEventDateBusinessCenters struct {
	*quickfix.Group
}

// SetUnderlyingComplexEventDateBusinessCenter sets UnderlyingComplexEventDateBusinessCenter, Tag 41738.
func (m NoUnderlyingComplexEventDateBusinessCenters) SetUnderlyingComplexEventDateBusinessCenter(v string) {
	m.Set(field.NewUnderlyingComplexEventDateBusinessCenter(v))
}

// GetUnderlyingComplexEventDateBusinessCenter gets UnderlyingComplexEventDateBusinessCenter, Tag 41738.
func (m NoUnderlyingComplexEventDateBusinessCenters) GetUnderlyingComplexEventDateBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingComplexEventDateBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingComplexEventDateBusinessCenter returns true if UnderlyingComplexEventDateBusinessCenter is present, Tag 41738.
func (m NoUnderlyingComplexEventDateBusinessCenters) HasUnderlyingComplexEventDateBusinessCenter() bool {
	return m.Has(tag.UnderlyingComplexEventDateBusinessCenter)
}

// NoUnderlyingComplexEventDateBusinessCentersRepeatingGroup is a repeating group, Tag 41737.
type NoUnderlyingComplexEventDateBusinessCentersRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingComplexEventDateBusinessCentersRepeatingGroup returns an initialized, NoUnderlyingComplexEventDateBusinessCentersRepeatingGroup.
func NewNoUnderlyingComplexEventDateBusinessCentersRepeatingGroup() NoUnderlyingComplexEventDateBusinessCentersRepeatingGroup {
	return NoUnderlyingComplexEventDateBusinessCentersRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingComplexEventDateBusinessCenters,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingComplexEventDateBusinessCenter),
			},
		),
	}
}

// Add create and append a new NoUnderlyingComplexEventDateBusinessCenters to this group.
func (m NoUnderlyingComplexEventDateBusinessCentersRepeatingGroup) Add() NoUnderlyingComplexEventDateBusinessCenters {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingComplexEventDateBusinessCenters{g}
}

// Get returns the ith NoUnderlyingComplexEventDateBusinessCenters in the NoUnderlyingComplexEventDateBusinessCentersRepeatinGroup.
func (m NoUnderlyingComplexEventDateBusinessCentersRepeatingGroup) Get(i int) NoUnderlyingComplexEventDateBusinessCenters {
	return NoUnderlyingComplexEventDateBusinessCenters{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingComplexEventPeriods is a repeating group element, Tag 41729.
type NoUnderlyingComplexEventPeriods struct {
	*quickfix.Group
}

// SetUnderlyingComplexEventPeriodType sets UnderlyingComplexEventPeriodType, Tag 41730.
func (m NoUnderlyingComplexEventPeriods) SetUnderlyingComplexEventPeriodType(v int) {
	m.Set(field.NewUnderlyingComplexEventPeriodType(v))
}

// SetUnderlyingComplexEventBusinessCenter sets UnderlyingComplexEventBusinessCenter, Tag 41731.
func (m NoUnderlyingComplexEventPeriods) SetUnderlyingComplexEventBusinessCenter(v string) {
	m.Set(field.NewUnderlyingComplexEventBusinessCenter(v))
}

// SetNoUnderlyingComplexEventSchedules sets NoUnderlyingComplexEventSchedules, Tag 41750.
func (m NoUnderlyingComplexEventPeriods) SetNoUnderlyingComplexEventSchedules(f NoUnderlyingComplexEventSchedulesRepeatingGroup) {
	m.SetGroup(f)
}

// SetNoUnderlyingComplexEventPeriodDateTimes sets NoUnderlyingComplexEventPeriodDateTimes, Tag 41726.
func (m NoUnderlyingComplexEventPeriods) SetNoUnderlyingComplexEventPeriodDateTimes(f NoUnderlyingComplexEventPeriodDateTimesRepeatingGroup) {
	m.SetGroup(f)
}

// SetNoUnderlyingComplexEventAveragingObservations sets NoUnderlyingComplexEventAveragingObservations, Tag 41713.
func (m NoUnderlyingComplexEventPeriods) SetNoUnderlyingComplexEventAveragingObservations(f NoUnderlyingComplexEventAveragingObservationsRepeatingGroup) {
	m.SetGroup(f)
}

// GetUnderlyingComplexEventPeriodType gets UnderlyingComplexEventPeriodType, Tag 41730.
func (m NoUnderlyingComplexEventPeriods) GetUnderlyingComplexEventPeriodType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingComplexEventPeriodTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingComplexEventBusinessCenter gets UnderlyingComplexEventBusinessCenter, Tag 41731.
func (m NoUnderlyingComplexEventPeriods) GetUnderlyingComplexEventBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingComplexEventBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUnderlyingComplexEventSchedules gets NoUnderlyingComplexEventSchedules, Tag 41750.
func (m NoUnderlyingComplexEventPeriods) GetNoUnderlyingComplexEventSchedules() (NoUnderlyingComplexEventSchedulesRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingComplexEventSchedulesRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetNoUnderlyingComplexEventPeriodDateTimes gets NoUnderlyingComplexEventPeriodDateTimes, Tag 41726.
func (m NoUnderlyingComplexEventPeriods) GetNoUnderlyingComplexEventPeriodDateTimes() (NoUnderlyingComplexEventPeriodDateTimesRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingComplexEventPeriodDateTimesRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetNoUnderlyingComplexEventAveragingObservations gets NoUnderlyingComplexEventAveragingObservations, Tag 41713.
func (m NoUnderlyingComplexEventPeriods) GetNoUnderlyingComplexEventAveragingObservations() (NoUnderlyingComplexEventAveragingObservationsRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingComplexEventAveragingObservationsRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// HasUnderlyingComplexEventPeriodType returns true if UnderlyingComplexEventPeriodType is present, Tag 41730.
func (m NoUnderlyingComplexEventPeriods) HasUnderlyingComplexEventPeriodType() bool {
	return m.Has(tag.UnderlyingComplexEventPeriodType)
}

// HasUnderlyingComplexEventBusinessCenter returns true if UnderlyingComplexEventBusinessCenter is present, Tag 41731.
func (m NoUnderlyingComplexEventPeriods) HasUnderlyingComplexEventBusinessCenter() bool {
	return m.Has(tag.UnderlyingComplexEventBusinessCenter)
}

// HasNoUnderlyingComplexEventSchedules returns true if NoUnderlyingComplexEventSchedules is present, Tag 41750.
func (m NoUnderlyingComplexEventPeriods) HasNoUnderlyingComplexEventSchedules() bool {
	return m.Has(tag.NoUnderlyingComplexEventSchedules)
}

// HasNoUnderlyingComplexEventPeriodDateTimes returns true if NoUnderlyingComplexEventPeriodDateTimes is present, Tag 41726.
func (m NoUnderlyingComplexEventPeriods) HasNoUnderlyingComplexEventPeriodDateTimes() bool {
	return m.Has(tag.NoUnderlyingComplexEventPeriodDateTimes)
}

// HasNoUnderlyingComplexEventAveragingObservations returns true if NoUnderlyingComplexEventAveragingObservations is present, Tag 41713.
func (m NoUnderlyingComplexEventPeriods) HasNoUnderlyingComplexEventAveragingObservations() bool {
	return m.Has(tag.NoUnderlyingComplexEventAveragingObservations)
}

// NoUnderlyingComplexEventSchedules is a repeating group element, Tag 41750.
type NoUnderlyingComplexEventSchedules struct {
	*quickfix.Group
}

// SetUnderlyingComplexEventScheduleStartDate sets UnderlyingComplexEventScheduleStartDate, Tag 41751.
func (m NoUnderlyingComplexEventSchedules) SetUnderlyingComplexEventScheduleStartDate(v string) {
	m.Set(field.NewUnderlyingComplexEventScheduleStartDate(v))
}

// SetUnderlyingComplexEventScheduleEndDate sets UnderlyingComplexEventScheduleEndDate, Tag 41752.
func (m NoUnderlyingComplexEventSchedules) SetUnderlyingComplexEventScheduleEndDate(v string) {
	m.Set(field.NewUnderlyingComplexEventScheduleEndDate(v))
}

// SetUnderlyingComplexEventScheduleFrequencyPeriod sets UnderlyingComplexEventScheduleFrequencyPeriod, Tag 41753.
func (m NoUnderlyingComplexEventSchedules) SetUnderlyingComplexEventScheduleFrequencyPeriod(v int) {
	m.Set(field.NewUnderlyingComplexEventScheduleFrequencyPeriod(v))
}

// SetUnderlyingComplexEventScheduleFrequencyUnit sets UnderlyingComplexEventScheduleFrequencyUnit, Tag 41754.
func (m NoUnderlyingComplexEventSchedules) SetUnderlyingComplexEventScheduleFrequencyUnit(v string) {
	m.Set(field.NewUnderlyingComplexEventScheduleFrequencyUnit(v))
}

// SetUnderlyingComplexEventScheduleRollConvention sets UnderlyingComplexEventScheduleRollConvention, Tag 41755.
func (m NoUnderlyingComplexEventSchedules) SetUnderlyingComplexEventScheduleRollConvention(v string) {
	m.Set(field.NewUnderlyingComplexEventScheduleRollConvention(v))
}

// GetUnderlyingComplexEventScheduleStartDate gets UnderlyingComplexEventScheduleStartDate, Tag 41751.
func (m NoUnderlyingComplexEventSchedules) GetUnderlyingComplexEventScheduleStartDate() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingComplexEventScheduleStartDateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingComplexEventScheduleEndDate gets UnderlyingComplexEventScheduleEndDate, Tag 41752.
func (m NoUnderlyingComplexEventSchedules) GetUnderlyingComplexEventScheduleEndDate() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingComplexEventScheduleEndDateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingComplexEventScheduleFrequencyPeriod gets UnderlyingComplexEventScheduleFrequencyPeriod, Tag 41753.
func (m NoUnderlyingComplexEventSchedules) GetUnderlyingComplexEventScheduleFrequencyPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingComplexEventScheduleFrequencyPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingComplexEventScheduleFrequencyUnit gets UnderlyingComplexEventScheduleFrequencyUnit, Tag 41754.
func (m NoUnderlyingComplexEventSchedules) GetUnderlyingComplexEventScheduleFrequencyUnit() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingComplexEventScheduleFrequencyUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingComplexEventScheduleRollConvention gets UnderlyingComplexEventScheduleRollConvention, Tag 41755.
func (m NoUnderlyingComplexEventSchedules) GetUnderlyingComplexEventScheduleRollConvention() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingComplexEventScheduleRollConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingComplexEventScheduleStartDate returns true if UnderlyingComplexEventScheduleStartDate is present, Tag 41751.
func (m NoUnderlyingComplexEventSchedules) HasUnderlyingComplexEventScheduleStartDate() bool {
	return m.Has(tag.UnderlyingComplexEventScheduleStartDate)
}

// HasUnderlyingComplexEventScheduleEndDate returns true if UnderlyingComplexEventScheduleEndDate is present, Tag 41752.
func (m NoUnderlyingComplexEventSchedules) HasUnderlyingComplexEventScheduleEndDate() bool {
	return m.Has(tag.UnderlyingComplexEventScheduleEndDate)
}

// HasUnderlyingComplexEventScheduleFrequencyPeriod returns true if UnderlyingComplexEventScheduleFrequencyPeriod is present, Tag 41753.
func (m NoUnderlyingComplexEventSchedules) HasUnderlyingComplexEventScheduleFrequencyPeriod() bool {
	return m.Has(tag.UnderlyingComplexEventScheduleFrequencyPeriod)
}

// HasUnderlyingComplexEventScheduleFrequencyUnit returns true if UnderlyingComplexEventScheduleFrequencyUnit is present, Tag 41754.
func (m NoUnderlyingComplexEventSchedules) HasUnderlyingComplexEventScheduleFrequencyUnit() bool {
	return m.Has(tag.UnderlyingComplexEventScheduleFrequencyUnit)
}

// HasUnderlyingComplexEventScheduleRollConvention returns true if UnderlyingComplexEventScheduleRollConvention is present, Tag 41755.
func (m NoUnderlyingComplexEventSchedules) HasUnderlyingComplexEventScheduleRollConvention() bool {
	return m.Has(tag.UnderlyingComplexEventScheduleRollConvention)
}

// NoUnderlyingComplexEventSchedulesRepeatingGroup is a repeating group, Tag 41750.
type NoUnderlyingComplexEventSchedulesRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingComplexEventSchedulesRepeatingGroup returns an initialized, NoUnderlyingComplexEventSchedulesRepeatingGroup.
func NewNoUnderlyingComplexEventSchedulesRepeatingGroup() NoUnderlyingComplexEventSchedulesRepeatingGroup {
	return NoUnderlyingComplexEventSchedulesRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingComplexEventSchedules,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingComplexEventScheduleStartDate),
				quickfix.GroupElement(tag.UnderlyingComplexEventScheduleEndDate),
				quickfix.GroupElement(tag.UnderlyingComplexEventScheduleFrequencyPeriod),
				quickfix.GroupElement(tag.UnderlyingComplexEventScheduleFrequencyUnit),
				quickfix.GroupElement(tag.UnderlyingComplexEventScheduleRollConvention),
			},
		),
	}
}

// Add create and append a new NoUnderlyingComplexEventSchedules to this group.
func (m NoUnderlyingComplexEventSchedulesRepeatingGroup) Add() NoUnderlyingComplexEventSchedules {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingComplexEventSchedules{g}
}

// Get returns the ith NoUnderlyingComplexEventSchedules in the NoUnderlyingComplexEventSchedulesRepeatinGroup.
func (m NoUnderlyingComplexEventSchedulesRepeatingGroup) Get(i int) NoUnderlyingComplexEventSchedules {
	return NoUnderlyingComplexEventSchedules{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingComplexEventPeriodDateTimes is a repeating group element, Tag 41726.
type NoUnderlyingComplexEventPeriodDateTimes struct {
	*quickfix.Group
}

// SetUnderlyingComplexEventPeriodDate sets UnderlyingComplexEventPeriodDate, Tag 41727.
func (m NoUnderlyingComplexEventPeriodDateTimes) SetUnderlyingComplexEventPeriodDate(v string) {
	m.Set(field.NewUnderlyingComplexEventPeriodDate(v))
}

// SetUnderlyingComplexEventPeriodTime sets UnderlyingComplexEventPeriodTime, Tag 41728.
func (m NoUnderlyingComplexEventPeriodDateTimes) SetUnderlyingComplexEventPeriodTime(v string) {
	m.Set(field.NewUnderlyingComplexEventPeriodTime(v))
}

// GetUnderlyingComplexEventPeriodDate gets UnderlyingComplexEventPeriodDate, Tag 41727.
func (m NoUnderlyingComplexEventPeriodDateTimes) GetUnderlyingComplexEventPeriodDate() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingComplexEventPeriodDateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingComplexEventPeriodTime gets UnderlyingComplexEventPeriodTime, Tag 41728.
func (m NoUnderlyingComplexEventPeriodDateTimes) GetUnderlyingComplexEventPeriodTime() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingComplexEventPeriodTimeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingComplexEventPeriodDate returns true if UnderlyingComplexEventPeriodDate is present, Tag 41727.
func (m NoUnderlyingComplexEventPeriodDateTimes) HasUnderlyingComplexEventPeriodDate() bool {
	return m.Has(tag.UnderlyingComplexEventPeriodDate)
}

// HasUnderlyingComplexEventPeriodTime returns true if UnderlyingComplexEventPeriodTime is present, Tag 41728.
func (m NoUnderlyingComplexEventPeriodDateTimes) HasUnderlyingComplexEventPeriodTime() bool {
	return m.Has(tag.UnderlyingComplexEventPeriodTime)
}

// NoUnderlyingComplexEventPeriodDateTimesRepeatingGroup is a repeating group, Tag 41726.
type NoUnderlyingComplexEventPeriodDateTimesRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingComplexEventPeriodDateTimesRepeatingGroup returns an initialized, NoUnderlyingComplexEventPeriodDateTimesRepeatingGroup.
func NewNoUnderlyingComplexEventPeriodDateTimesRepeatingGroup() NoUnderlyingComplexEventPeriodDateTimesRepeatingGroup {
	return NoUnderlyingComplexEventPeriodDateTimesRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingComplexEventPeriodDateTimes,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingComplexEventPeriodDate),
				quickfix.GroupElement(tag.UnderlyingComplexEventPeriodTime),
			},
		),
	}
}

// Add create and append a new NoUnderlyingComplexEventPeriodDateTimes to this group.
func (m NoUnderlyingComplexEventPeriodDateTimesRepeatingGroup) Add() NoUnderlyingComplexEventPeriodDateTimes {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingComplexEventPeriodDateTimes{g}
}

// Get returns the ith NoUnderlyingComplexEventPeriodDateTimes in the NoUnderlyingComplexEventPeriodDateTimesRepeatinGroup.
func (m NoUnderlyingComplexEventPeriodDateTimesRepeatingGroup) Get(i int) NoUnderlyingComplexEventPeriodDateTimes {
	return NoUnderlyingComplexEventPeriodDateTimes{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingComplexEventAveragingObservations is a repeating group element, Tag 41713.
type NoUnderlyingComplexEventAveragingObservations struct {
	*quickfix.Group
}

// SetUnderlyingComplexEventAveragingObservationNumber sets UnderlyingComplexEventAveragingObservationNumber, Tag 41714.
func (m NoUnderlyingComplexEventAveragingObservations) SetUnderlyingComplexEventAveragingObservationNumber(v int) {
	m.Set(field.NewUnderlyingComplexEventAveragingObservationNumber(v))
}

// SetUnderlyingComplexEventAveragingWeight sets UnderlyingComplexEventAveragingWeight, Tag 41715.
func (m NoUnderlyingComplexEventAveragingObservations) SetUnderlyingComplexEventAveragingWeight(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingComplexEventAveragingWeight(value, scale))
}

// GetUnderlyingComplexEventAveragingObservationNumber gets UnderlyingComplexEventAveragingObservationNumber, Tag 41714.
func (m NoUnderlyingComplexEventAveragingObservations) GetUnderlyingComplexEventAveragingObservationNumber() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingComplexEventAveragingObservationNumberField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingComplexEventAveragingWeight gets UnderlyingComplexEventAveragingWeight, Tag 41715.
func (m NoUnderlyingComplexEventAveragingObservations) GetUnderlyingComplexEventAveragingWeight() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingComplexEventAveragingWeightField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingComplexEventAveragingObservationNumber returns true if UnderlyingComplexEventAveragingObservationNumber is present, Tag 41714.
func (m NoUnderlyingComplexEventAveragingObservations) HasUnderlyingComplexEventAveragingObservationNumber() bool {
	return m.Has(tag.UnderlyingComplexEventAveragingObservationNumber)
}

// HasUnderlyingComplexEventAveragingWeight returns true if UnderlyingComplexEventAveragingWeight is present, Tag 41715.
func (m NoUnderlyingComplexEventAveragingObservations) HasUnderlyingComplexEventAveragingWeight() bool {
	return m.Has(tag.UnderlyingComplexEventAveragingWeight)
}

// NoUnderlyingComplexEventAveragingObservationsRepeatingGroup is a repeating group, Tag 41713.
type NoUnderlyingComplexEventAveragingObservationsRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingComplexEventAveragingObservationsRepeatingGroup returns an initialized, NoUnderlyingComplexEventAveragingObservationsRepeatingGroup.
func NewNoUnderlyingComplexEventAveragingObservationsRepeatingGroup() NoUnderlyingComplexEventAveragingObservationsRepeatingGroup {
	return NoUnderlyingComplexEventAveragingObservationsRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingComplexEventAveragingObservations,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingComplexEventAveragingObservationNumber),
				quickfix.GroupElement(tag.UnderlyingComplexEventAveragingWeight),
			},
		),
	}
}

// Add create and append a new NoUnderlyingComplexEventAveragingObservations to this group.
func (m NoUnderlyingComplexEventAveragingObservationsRepeatingGroup) Add() NoUnderlyingComplexEventAveragingObservations {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingComplexEventAveragingObservations{g}
}

// Get returns the ith NoUnderlyingComplexEventAveragingObservations in the NoUnderlyingComplexEventAveragingObservationsRepeatinGroup.
func (m NoUnderlyingComplexEventAveragingObservationsRepeatingGroup) Get(i int) NoUnderlyingComplexEventAveragingObservations {
	return NoUnderlyingComplexEventAveragingObservations{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingComplexEventPeriodsRepeatingGroup is a repeating group, Tag 41729.
type NoUnderlyingComplexEventPeriodsRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingComplexEventPeriodsRepeatingGroup returns an initialized, NoUnderlyingComplexEventPeriodsRepeatingGroup.
func NewNoUnderlyingComplexEventPeriodsRepeatingGroup() NoUnderlyingComplexEventPeriodsRepeatingGroup {
	return NoUnderlyingComplexEventPeriodsRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingComplexEventPeriods,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingComplexEventPeriodType),
				quickfix.GroupElement(tag.UnderlyingComplexEventBusinessCenter),
				NewNoUnderlyingComplexEventSchedulesRepeatingGroup(),
				NewNoUnderlyingComplexEventPeriodDateTimesRepeatingGroup(),
				NewNoUnderlyingComplexEventAveragingObservationsRepeatingGroup(),
			},
		),
	}
}

// Add create and append a new NoUnderlyingComplexEventPeriods to this group.
func (m NoUnderlyingComplexEventPeriodsRepeatingGroup) Add() NoUnderlyingComplexEventPeriods {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingComplexEventPeriods{g}
}

// Get returns the ith NoUnderlyingComplexEventPeriods in the NoUnderlyingComplexEventPeriodsRepeatinGroup.
func (m NoUnderlyingComplexEventPeriodsRepeatingGroup) Get(i int) NoUnderlyingComplexEventPeriods {
	return NoUnderlyingComplexEventPeriods{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingComplexEventCreditEventSources is a repeating group element, Tag 41748.
type NoUnderlyingComplexEventCreditEventSources struct {
	*quickfix.Group
}

// SetUnderlyingComplexEventCreditEventSource sets UnderlyingComplexEventCreditEventSource, Tag 41749.
func (m NoUnderlyingComplexEventCreditEventSources) SetUnderlyingComplexEventCreditEventSource(v string) {
	m.Set(field.NewUnderlyingComplexEventCreditEventSource(v))
}

// GetUnderlyingComplexEventCreditEventSource gets UnderlyingComplexEventCreditEventSource, Tag 41749.
func (m NoUnderlyingComplexEventCreditEventSources) GetUnderlyingComplexEventCreditEventSource() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingComplexEventCreditEventSourceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingComplexEventCreditEventSource returns true if UnderlyingComplexEventCreditEventSource is present, Tag 41749.
func (m NoUnderlyingComplexEventCreditEventSources) HasUnderlyingComplexEventCreditEventSource() bool {
	return m.Has(tag.UnderlyingComplexEventCreditEventSource)
}

// NoUnderlyingComplexEventCreditEventSourcesRepeatingGroup is a repeating group, Tag 41748.
type NoUnderlyingComplexEventCreditEventSourcesRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingComplexEventCreditEventSourcesRepeatingGroup returns an initialized, NoUnderlyingComplexEventCreditEventSourcesRepeatingGroup.
func NewNoUnderlyingComplexEventCreditEventSourcesRepeatingGroup() NoUnderlyingComplexEventCreditEventSourcesRepeatingGroup {
	return NoUnderlyingComplexEventCreditEventSourcesRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingComplexEventCreditEventSources,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingComplexEventCreditEventSource),
			},
		),
	}
}

// Add create and append a new NoUnderlyingComplexEventCreditEventSources to this group.
func (m NoUnderlyingComplexEventCreditEventSourcesRepeatingGroup) Add() NoUnderlyingComplexEventCreditEventSources {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingComplexEventCreditEventSources{g}
}

// Get returns the ith NoUnderlyingComplexEventCreditEventSources in the NoUnderlyingComplexEventCreditEventSourcesRepeatinGroup.
func (m NoUnderlyingComplexEventCreditEventSourcesRepeatingGroup) Get(i int) NoUnderlyingComplexEventCreditEventSources {
	return NoUnderlyingComplexEventCreditEventSources{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingComplexEventCreditEvents is a repeating group element, Tag 41716.
type NoUnderlyingComplexEventCreditEvents struct {
	*quickfix.Group
}

// SetUnderlyingComplexEventCreditEventType sets UnderlyingComplexEventCreditEventType, Tag 41717.
func (m NoUnderlyingComplexEventCreditEvents) SetUnderlyingComplexEventCreditEventType(v string) {
	m.Set(field.NewUnderlyingComplexEventCreditEventType(v))
}

// SetUnderlyingComplexEventCreditEventValue sets UnderlyingComplexEventCreditEventValue, Tag 41718.
func (m NoUnderlyingComplexEventCreditEvents) SetUnderlyingComplexEventCreditEventValue(v string) {
	m.Set(field.NewUnderlyingComplexEventCreditEventValue(v))
}

// SetUnderlyingComplexEventCreditEventCurrency sets UnderlyingComplexEventCreditEventCurrency, Tag 41719.
func (m NoUnderlyingComplexEventCreditEvents) SetUnderlyingComplexEventCreditEventCurrency(v string) {
	m.Set(field.NewUnderlyingComplexEventCreditEventCurrency(v))
}

// SetUnderlyingComplexEventCreditEventPeriod sets UnderlyingComplexEventCreditEventPeriod, Tag 41720.
func (m NoUnderlyingComplexEventCreditEvents) SetUnderlyingComplexEventCreditEventPeriod(v int) {
	m.Set(field.NewUnderlyingComplexEventCreditEventPeriod(v))
}

// SetUnderlyingComplexEventCreditEventUnit sets UnderlyingComplexEventCreditEventUnit, Tag 41721.
func (m NoUnderlyingComplexEventCreditEvents) SetUnderlyingComplexEventCreditEventUnit(v string) {
	m.Set(field.NewUnderlyingComplexEventCreditEventUnit(v))
}

// SetUnderlyingComplexEventCreditEventDayType sets UnderlyingComplexEventCreditEventDayType, Tag 41722.
func (m NoUnderlyingComplexEventCreditEvents) SetUnderlyingComplexEventCreditEventDayType(v int) {
	m.Set(field.NewUnderlyingComplexEventCreditEventDayType(v))
}

// SetUnderlyingComplexEventCreditEventRateSource sets UnderlyingComplexEventCreditEventRateSource, Tag 41723.
func (m NoUnderlyingComplexEventCreditEvents) SetUnderlyingComplexEventCreditEventRateSource(v int) {
	m.Set(field.NewUnderlyingComplexEventCreditEventRateSource(v))
}

// SetNoUnderlyingComplexEventCreditEventQualifiers sets NoUnderlyingComplexEventCreditEventQualifiers, Tag 41724.
func (m NoUnderlyingComplexEventCreditEvents) SetNoUnderlyingComplexEventCreditEventQualifiers(f NoUnderlyingComplexEventCreditEventQualifiersRepeatingGroup) {
	m.SetGroup(f)
}

// GetUnderlyingComplexEventCreditEventType gets UnderlyingComplexEventCreditEventType, Tag 41717.
func (m NoUnderlyingComplexEventCreditEvents) GetUnderlyingComplexEventCreditEventType() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingComplexEventCreditEventTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingComplexEventCreditEventValue gets UnderlyingComplexEventCreditEventValue, Tag 41718.
func (m NoUnderlyingComplexEventCreditEvents) GetUnderlyingComplexEventCreditEventValue() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingComplexEventCreditEventValueField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingComplexEventCreditEventCurrency gets UnderlyingComplexEventCreditEventCurrency, Tag 41719.
func (m NoUnderlyingComplexEventCreditEvents) GetUnderlyingComplexEventCreditEventCurrency() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingComplexEventCreditEventCurrencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingComplexEventCreditEventPeriod gets UnderlyingComplexEventCreditEventPeriod, Tag 41720.
func (m NoUnderlyingComplexEventCreditEvents) GetUnderlyingComplexEventCreditEventPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingComplexEventCreditEventPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingComplexEventCreditEventUnit gets UnderlyingComplexEventCreditEventUnit, Tag 41721.
func (m NoUnderlyingComplexEventCreditEvents) GetUnderlyingComplexEventCreditEventUnit() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingComplexEventCreditEventUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingComplexEventCreditEventDayType gets UnderlyingComplexEventCreditEventDayType, Tag 41722.
func (m NoUnderlyingComplexEventCreditEvents) GetUnderlyingComplexEventCreditEventDayType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingComplexEventCreditEventDayTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingComplexEventCreditEventRateSource gets UnderlyingComplexEventCreditEventRateSource, Tag 41723.
func (m NoUnderlyingComplexEventCreditEvents) GetUnderlyingComplexEventCreditEventRateSource() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingComplexEventCreditEventRateSourceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUnderlyingComplexEventCreditEventQualifiers gets NoUnderlyingComplexEventCreditEventQualifiers, Tag 41724.
func (m NoUnderlyingComplexEventCreditEvents) GetNoUnderlyingComplexEventCreditEventQualifiers() (NoUnderlyingComplexEventCreditEventQualifiersRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingComplexEventCreditEventQualifiersRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// HasUnderlyingComplexEventCreditEventType returns true if UnderlyingComplexEventCreditEventType is present, Tag 41717.
func (m NoUnderlyingComplexEventCreditEvents) HasUnderlyingComplexEventCreditEventType() bool {
	return m.Has(tag.UnderlyingComplexEventCreditEventType)
}

// HasUnderlyingComplexEventCreditEventValue returns true if UnderlyingComplexEventCreditEventValue is present, Tag 41718.
func (m NoUnderlyingComplexEventCreditEvents) HasUnderlyingComplexEventCreditEventValue() bool {
	return m.Has(tag.UnderlyingComplexEventCreditEventValue)
}

// HasUnderlyingComplexEventCreditEventCurrency returns true if UnderlyingComplexEventCreditEventCurrency is present, Tag 41719.
func (m NoUnderlyingComplexEventCreditEvents) HasUnderlyingComplexEventCreditEventCurrency() bool {
	return m.Has(tag.UnderlyingComplexEventCreditEventCurrency)
}

// HasUnderlyingComplexEventCreditEventPeriod returns true if UnderlyingComplexEventCreditEventPeriod is present, Tag 41720.
func (m NoUnderlyingComplexEventCreditEvents) HasUnderlyingComplexEventCreditEventPeriod() bool {
	return m.Has(tag.UnderlyingComplexEventCreditEventPeriod)
}

// HasUnderlyingComplexEventCreditEventUnit returns true if UnderlyingComplexEventCreditEventUnit is present, Tag 41721.
func (m NoUnderlyingComplexEventCreditEvents) HasUnderlyingComplexEventCreditEventUnit() bool {
	return m.Has(tag.UnderlyingComplexEventCreditEventUnit)
}

// HasUnderlyingComplexEventCreditEventDayType returns true if UnderlyingComplexEventCreditEventDayType is present, Tag 41722.
func (m NoUnderlyingComplexEventCreditEvents) HasUnderlyingComplexEventCreditEventDayType() bool {
	return m.Has(tag.UnderlyingComplexEventCreditEventDayType)
}

// HasUnderlyingComplexEventCreditEventRateSource returns true if UnderlyingComplexEventCreditEventRateSource is present, Tag 41723.
func (m NoUnderlyingComplexEventCreditEvents) HasUnderlyingComplexEventCreditEventRateSource() bool {
	return m.Has(tag.UnderlyingComplexEventCreditEventRateSource)
}

// HasNoUnderlyingComplexEventCreditEventQualifiers returns true if NoUnderlyingComplexEventCreditEventQualifiers is present, Tag 41724.
func (m NoUnderlyingComplexEventCreditEvents) HasNoUnderlyingComplexEventCreditEventQualifiers() bool {
	return m.Has(tag.NoUnderlyingComplexEventCreditEventQualifiers)
}

// NoUnderlyingComplexEventCreditEventQualifiers is a repeating group element, Tag 41724.
type NoUnderlyingComplexEventCreditEventQualifiers struct {
	*quickfix.Group
}

// SetUnderlyingComplexEventCreditEventQualifier sets UnderlyingComplexEventCreditEventQualifier, Tag 41725.
func (m NoUnderlyingComplexEventCreditEventQualifiers) SetUnderlyingComplexEventCreditEventQualifier(v string) {
	m.Set(field.NewUnderlyingComplexEventCreditEventQualifier(v))
}

// GetUnderlyingComplexEventCreditEventQualifier gets UnderlyingComplexEventCreditEventQualifier, Tag 41725.
func (m NoUnderlyingComplexEventCreditEventQualifiers) GetUnderlyingComplexEventCreditEventQualifier() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingComplexEventCreditEventQualifierField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingComplexEventCreditEventQualifier returns true if UnderlyingComplexEventCreditEventQualifier is present, Tag 41725.
func (m NoUnderlyingComplexEventCreditEventQualifiers) HasUnderlyingComplexEventCreditEventQualifier() bool {
	return m.Has(tag.UnderlyingComplexEventCreditEventQualifier)
}

// NoUnderlyingComplexEventCreditEventQualifiersRepeatingGroup is a repeating group, Tag 41724.
type NoUnderlyingComplexEventCreditEventQualifiersRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingComplexEventCreditEventQualifiersRepeatingGroup returns an initialized, NoUnderlyingComplexEventCreditEventQualifiersRepeatingGroup.
func NewNoUnderlyingComplexEventCreditEventQualifiersRepeatingGroup() NoUnderlyingComplexEventCreditEventQualifiersRepeatingGroup {
	return NoUnderlyingComplexEventCreditEventQualifiersRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingComplexEventCreditEventQualifiers,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingComplexEventCreditEventQualifier),
			},
		),
	}
}

// Add create and append a new NoUnderlyingComplexEventCreditEventQualifiers to this group.
func (m NoUnderlyingComplexEventCreditEventQualifiersRepeatingGroup) Add() NoUnderlyingComplexEventCreditEventQualifiers {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingComplexEventCreditEventQualifiers{g}
}

// Get returns the ith NoUnderlyingComplexEventCreditEventQualifiers in the NoUnderlyingComplexEventCreditEventQualifiersRepeatinGroup.
func (m NoUnderlyingComplexEventCreditEventQualifiersRepeatingGroup) Get(i int) NoUnderlyingComplexEventCreditEventQualifiers {
	return NoUnderlyingComplexEventCreditEventQualifiers{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingComplexEventCreditEventsRepeatingGroup is a repeating group, Tag 41716.
type NoUnderlyingComplexEventCreditEventsRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingComplexEventCreditEventsRepeatingGroup returns an initialized, NoUnderlyingComplexEventCreditEventsRepeatingGroup.
func NewNoUnderlyingComplexEventCreditEventsRepeatingGroup() NoUnderlyingComplexEventCreditEventsRepeatingGroup {
	return NoUnderlyingComplexEventCreditEventsRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingComplexEventCreditEvents,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingComplexEventCreditEventType),
				quickfix.GroupElement(tag.UnderlyingComplexEventCreditEventValue),
				quickfix.GroupElement(tag.UnderlyingComplexEventCreditEventCurrency),
				quickfix.GroupElement(tag.UnderlyingComplexEventCreditEventPeriod),
				quickfix.GroupElement(tag.UnderlyingComplexEventCreditEventUnit),
				quickfix.GroupElement(tag.UnderlyingComplexEventCreditEventDayType),
				quickfix.GroupElement(tag.UnderlyingComplexEventCreditEventRateSource),
				NewNoUnderlyingComplexEventCreditEventQualifiersRepeatingGroup(),
			},
		),
	}
}

// Add create and append a new NoUnderlyingComplexEventCreditEvents to this group.
func (m NoUnderlyingComplexEventCreditEventsRepeatingGroup) Add() NoUnderlyingComplexEventCreditEvents {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingComplexEventCreditEvents{g}
}

// Get returns the ith NoUnderlyingComplexEventCreditEvents in the NoUnderlyingComplexEventCreditEventsRepeatinGroup.
func (m NoUnderlyingComplexEventCreditEventsRepeatingGroup) Get(i int) NoUnderlyingComplexEventCreditEvents {
	return NoUnderlyingComplexEventCreditEvents{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingComplexEventsRepeatingGroup is a repeating group, Tag 2045.
type NoUnderlyingComplexEventsRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingComplexEventsRepeatingGroup returns an initialized, NoUnderlyingComplexEventsRepeatingGroup.
func NewNoUnderlyingComplexEventsRepeatingGroup() NoUnderlyingComplexEventsRepeatingGroup {
	return NoUnderlyingComplexEventsRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingComplexEvents,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingComplexEventType),
				quickfix.GroupElement(tag.UnderlyingComplexOptPayoutAmount),
				quickfix.GroupElement(tag.UnderlyingComplexEventPrice),
				quickfix.GroupElement(tag.UnderlyingComplexEventPriceBoundaryMethod),
				quickfix.GroupElement(tag.UnderlyingComplexEventPriceBoundaryPrecision),
				quickfix.GroupElement(tag.UnderlyingComplexEventPriceTimeType),
				quickfix.GroupElement(tag.UnderlyingComplexEventCondition),
				NewNoUnderlyingComplexEventDatesRepeatingGroup(),
				quickfix.GroupElement(tag.UnderlyingComplexOptPayoutPaySide),
				quickfix.GroupElement(tag.UnderlyingComplexOptPayoutReceiveSide),
				quickfix.GroupElement(tag.UnderlyingComplexOptPayoutUnderlier),
				quickfix.GroupElement(tag.UnderlyingComplexOptPayoutPercentage),
				quickfix.GroupElement(tag.UnderlyingComplexOptPayoutTime),
				quickfix.GroupElement(tag.UnderlyingComplexOptPayoutCurrency),
				quickfix.GroupElement(tag.UnderlyingComplexEventPricePercentage),
				quickfix.GroupElement(tag.UnderlyingComplexEventCurrencyOne),
				quickfix.GroupElement(tag.UnderlyingComplexEventCurrencyTwo),
				quickfix.GroupElement(tag.UnderlyingComplexEventQuoteBasis),
				quickfix.GroupElement(tag.UnderlyingComplexEventFixedFXRate),
				quickfix.GroupElement(tag.UnderlyingComplexEventDeterminationMethod),
				quickfix.GroupElement(tag.UnderlyingComplexEventCalculationAgent),
				quickfix.GroupElement(tag.UnderlyingComplexEventStrikePrice),
				quickfix.GroupElement(tag.UnderlyingComplexEventStrikeFactor),
				quickfix.GroupElement(tag.UnderlyingComplexEventStrikeNumberOfOptions),
				NewNoUnderlyingComplexEventRateSourcesRepeatingGroup(),
				quickfix.GroupElement(tag.UnderlyingComplexEventDateUnadjusted),
				quickfix.GroupElement(tag.UnderlyingComplexEventDateRelativeTo),
				quickfix.GroupElement(tag.UnderlyingComplexEventDateOffsetPeriod),
				quickfix.GroupElement(tag.UnderlyingComplexEventDateOffsetUnit),
				quickfix.GroupElement(tag.UnderlyingComplexEventDateOffsetDayType),
				quickfix.GroupElement(tag.UnderlyingComplexEventDateBusinessDayConvention),
				NewNoUnderlyingComplexEventDateBusinessCentersRepeatingGroup(),
				quickfix.GroupElement(tag.UnderlyingComplexEventDateAdjusted),
				quickfix.GroupElement(tag.UnderlyingComplexEventFixingTime),
				quickfix.GroupElement(tag.UnderlyingComplexEventFixingTimeBusinessCenter),
				NewNoUnderlyingComplexEventPeriodsRepeatingGroup(),
				quickfix.GroupElement(tag.UnderlyingComplexEventCreditEventsXIDRef),
				quickfix.GroupElement(tag.UnderlyingComplexEventCreditEventNotifyingParty),
				quickfix.GroupElement(tag.UnderlyingComplexEventCreditEventBusinessCenter),
				quickfix.GroupElement(tag.UnderlyingComplexEventCreditEventStandardSources),
				quickfix.GroupElement(tag.UnderlyingComplexEventCreditEventMinimumSources),
				NewNoUnderlyingComplexEventCreditEventSourcesRepeatingGroup(),
				NewNoUnderlyingComplexEventCreditEventsRepeatingGroup(),
				quickfix.GroupElement(tag.UnderlyingComplexEventXID),
				quickfix.GroupElement(tag.UnderlyingComplexEventXIDRef),
				quickfix.GroupElement(tag.UnderlyingComplexEventSpotRate),
				quickfix.GroupElement(tag.UnderlyingComplexEventForwardPoints),
				quickfix.GroupElement(tag.UnderlyingComplexEventFuturesPriceValuation),
				quickfix.GroupElement(tag.UnderlyingComplexEventOptionsPriceValuation),
				quickfix.GroupElement(tag.UnderlyingComplexEventPVFinalPriceElectionFallback),
			},
		),
	}
}

// Add create and append a new NoUnderlyingComplexEvents to this group.
func (m NoUnderlyingComplexEventsRepeatingGroup) Add() NoUnderlyingComplexEvents {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingComplexEvents{g}
}

// Get returns the ith NoUnderlyingComplexEvents in the NoUnderlyingComplexEventsRepeatinGroup.
func (m NoUnderlyingComplexEventsRepeatingGroup) Get(i int) NoUnderlyingComplexEvents {
	return NoUnderlyingComplexEvents{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingSecondaryAssetClasses is a repeating group element, Tag 2080.
type NoUnderlyingSecondaryAssetClasses struct {
	*quickfix.Group
}

// SetUnderlyingSecondaryAssetClass sets UnderlyingSecondaryAssetClass, Tag 2081.
func (m NoUnderlyingSecondaryAssetClasses) SetUnderlyingSecondaryAssetClass(v int) {
	m.Set(field.NewUnderlyingSecondaryAssetClass(v))
}

// SetUnderlyingSecondaryAssetSubClass sets UnderlyingSecondaryAssetSubClass, Tag 2082.
func (m NoUnderlyingSecondaryAssetClasses) SetUnderlyingSecondaryAssetSubClass(v int) {
	m.Set(field.NewUnderlyingSecondaryAssetSubClass(v))
}

// SetUnderlyingSecondaryAssetType sets UnderlyingSecondaryAssetType, Tag 2083.
func (m NoUnderlyingSecondaryAssetClasses) SetUnderlyingSecondaryAssetType(v string) {
	m.Set(field.NewUnderlyingSecondaryAssetType(v))
}

// SetUnderlyingSecondaryAssetSubType sets UnderlyingSecondaryAssetSubType, Tag 2745.
func (m NoUnderlyingSecondaryAssetClasses) SetUnderlyingSecondaryAssetSubType(v string) {
	m.Set(field.NewUnderlyingSecondaryAssetSubType(v))
}

// GetUnderlyingSecondaryAssetClass gets UnderlyingSecondaryAssetClass, Tag 2081.
func (m NoUnderlyingSecondaryAssetClasses) GetUnderlyingSecondaryAssetClass() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingSecondaryAssetClassField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingSecondaryAssetSubClass gets UnderlyingSecondaryAssetSubClass, Tag 2082.
func (m NoUnderlyingSecondaryAssetClasses) GetUnderlyingSecondaryAssetSubClass() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingSecondaryAssetSubClassField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingSecondaryAssetType gets UnderlyingSecondaryAssetType, Tag 2083.
func (m NoUnderlyingSecondaryAssetClasses) GetUnderlyingSecondaryAssetType() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingSecondaryAssetTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingSecondaryAssetSubType gets UnderlyingSecondaryAssetSubType, Tag 2745.
func (m NoUnderlyingSecondaryAssetClasses) GetUnderlyingSecondaryAssetSubType() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingSecondaryAssetSubTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingSecondaryAssetClass returns true if UnderlyingSecondaryAssetClass is present, Tag 2081.
func (m NoUnderlyingSecondaryAssetClasses) HasUnderlyingSecondaryAssetClass() bool {
	return m.Has(tag.UnderlyingSecondaryAssetClass)
}

// HasUnderlyingSecondaryAssetSubClass returns true if UnderlyingSecondaryAssetSubClass is present, Tag 2082.
func (m NoUnderlyingSecondaryAssetClasses) HasUnderlyingSecondaryAssetSubClass() bool {
	return m.Has(tag.UnderlyingSecondaryAssetSubClass)
}

// HasUnderlyingSecondaryAssetType returns true if UnderlyingSecondaryAssetType is present, Tag 2083.
func (m NoUnderlyingSecondaryAssetClasses) HasUnderlyingSecondaryAssetType() bool {
	return m.Has(tag.UnderlyingSecondaryAssetType)
}

// HasUnderlyingSecondaryAssetSubType returns true if UnderlyingSecondaryAssetSubType is present, Tag 2745.
func (m NoUnderlyingSecondaryAssetClasses) HasUnderlyingSecondaryAssetSubType() bool {
	return m.Has(tag.UnderlyingSecondaryAssetSubType)
}

// NoUnderlyingSecondaryAssetClassesRepeatingGroup is a repeating group, Tag 2080.
type NoUnderlyingSecondaryAssetClassesRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingSecondaryAssetClassesRepeatingGroup returns an initialized, NoUnderlyingSecondaryAssetClassesRepeatingGroup.
func NewNoUnderlyingSecondaryAssetClassesRepeatingGroup() NoUnderlyingSecondaryAssetClassesRepeatingGroup {
	return NoUnderlyingSecondaryAssetClassesRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingSecondaryAssetClasses,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingSecondaryAssetClass),
				quickfix.GroupElement(tag.UnderlyingSecondaryAssetSubClass),
				quickfix.GroupElement(tag.UnderlyingSecondaryAssetType),
				quickfix.GroupElement(tag.UnderlyingSecondaryAssetSubType),
			},
		),
	}
}

// Add create and append a new NoUnderlyingSecondaryAssetClasses to this group.
func (m NoUnderlyingSecondaryAssetClassesRepeatingGroup) Add() NoUnderlyingSecondaryAssetClasses {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingSecondaryAssetClasses{g}
}

// Get returns the ith NoUnderlyingSecondaryAssetClasses in the NoUnderlyingSecondaryAssetClassesRepeatinGroup.
func (m NoUnderlyingSecondaryAssetClassesRepeatingGroup) Get(i int) NoUnderlyingSecondaryAssetClasses {
	return NoUnderlyingSecondaryAssetClasses{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingAssetAttributes is a repeating group element, Tag 2312.
type NoUnderlyingAssetAttributes struct {
	*quickfix.Group
}

// SetUnderlyingAssetAttributeType sets UnderlyingAssetAttributeType, Tag 2313.
func (m NoUnderlyingAssetAttributes) SetUnderlyingAssetAttributeType(v string) {
	m.Set(field.NewUnderlyingAssetAttributeType(v))
}

// SetUnderlyingAssetAttributeValue sets UnderlyingAssetAttributeValue, Tag 2314.
func (m NoUnderlyingAssetAttributes) SetUnderlyingAssetAttributeValue(v string) {
	m.Set(field.NewUnderlyingAssetAttributeValue(v))
}

// SetUnderlyingAssetAttributeLimit sets UnderlyingAssetAttributeLimit, Tag 2315.
func (m NoUnderlyingAssetAttributes) SetUnderlyingAssetAttributeLimit(v string) {
	m.Set(field.NewUnderlyingAssetAttributeLimit(v))
}

// GetUnderlyingAssetAttributeType gets UnderlyingAssetAttributeType, Tag 2313.
func (m NoUnderlyingAssetAttributes) GetUnderlyingAssetAttributeType() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingAssetAttributeTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingAssetAttributeValue gets UnderlyingAssetAttributeValue, Tag 2314.
func (m NoUnderlyingAssetAttributes) GetUnderlyingAssetAttributeValue() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingAssetAttributeValueField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingAssetAttributeLimit gets UnderlyingAssetAttributeLimit, Tag 2315.
func (m NoUnderlyingAssetAttributes) GetUnderlyingAssetAttributeLimit() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingAssetAttributeLimitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingAssetAttributeType returns true if UnderlyingAssetAttributeType is present, Tag 2313.
func (m NoUnderlyingAssetAttributes) HasUnderlyingAssetAttributeType() bool {
	return m.Has(tag.UnderlyingAssetAttributeType)
}

// HasUnderlyingAssetAttributeValue returns true if UnderlyingAssetAttributeValue is present, Tag 2314.
func (m NoUnderlyingAssetAttributes) HasUnderlyingAssetAttributeValue() bool {
	return m.Has(tag.UnderlyingAssetAttributeValue)
}

// HasUnderlyingAssetAttributeLimit returns true if UnderlyingAssetAttributeLimit is present, Tag 2315.
func (m NoUnderlyingAssetAttributes) HasUnderlyingAssetAttributeLimit() bool {
	return m.Has(tag.UnderlyingAssetAttributeLimit)
}

// NoUnderlyingAssetAttributesRepeatingGroup is a repeating group, Tag 2312.
type NoUnderlyingAssetAttributesRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingAssetAttributesRepeatingGroup returns an initialized, NoUnderlyingAssetAttributesRepeatingGroup.
func NewNoUnderlyingAssetAttributesRepeatingGroup() NoUnderlyingAssetAttributesRepeatingGroup {
	return NoUnderlyingAssetAttributesRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingAssetAttributes,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingAssetAttributeType),
				quickfix.GroupElement(tag.UnderlyingAssetAttributeValue),
				quickfix.GroupElement(tag.UnderlyingAssetAttributeLimit),
			},
		),
	}
}

// Add create and append a new NoUnderlyingAssetAttributes to this group.
func (m NoUnderlyingAssetAttributesRepeatingGroup) Add() NoUnderlyingAssetAttributes {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingAssetAttributes{g}
}

// Get returns the ith NoUnderlyingAssetAttributes in the NoUnderlyingAssetAttributesRepeatinGroup.
func (m NoUnderlyingAssetAttributesRepeatingGroup) Get(i int) NoUnderlyingAssetAttributes {
	return NoUnderlyingAssetAttributes{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingStreams is a repeating group element, Tag 40540.
type NoUnderlyingStreams struct {
	*quickfix.Group
}

// SetUnderlyingStreamType sets UnderlyingStreamType, Tag 40541.
func (m NoUnderlyingStreams) SetUnderlyingStreamType(v int) {
	m.Set(field.NewUnderlyingStreamType(v))
}

// SetUnderlyingStreamDesc sets UnderlyingStreamDesc, Tag 40542.
func (m NoUnderlyingStreams) SetUnderlyingStreamDesc(v string) {
	m.Set(field.NewUnderlyingStreamDesc(v))
}

// SetUnderlyingStreamPaySide sets UnderlyingStreamPaySide, Tag 40543.
func (m NoUnderlyingStreams) SetUnderlyingStreamPaySide(v int) {
	m.Set(field.NewUnderlyingStreamPaySide(v))
}

// SetUnderlyingStreamReceiveSide sets UnderlyingStreamReceiveSide, Tag 40544.
func (m NoUnderlyingStreams) SetUnderlyingStreamReceiveSide(v int) {
	m.Set(field.NewUnderlyingStreamReceiveSide(v))
}

// SetUnderlyingStreamNotional sets UnderlyingStreamNotional, Tag 40545.
func (m NoUnderlyingStreams) SetUnderlyingStreamNotional(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingStreamNotional(value, scale))
}

// SetUnderlyingStreamCurrency sets UnderlyingStreamCurrency, Tag 40546.
func (m NoUnderlyingStreams) SetUnderlyingStreamCurrency(v string) {
	m.Set(field.NewUnderlyingStreamCurrency(v))
}

// SetUnderlyingStreamEffectiveDateUnadjusted sets UnderlyingStreamEffectiveDateUnadjusted, Tag 40057.
func (m NoUnderlyingStreams) SetUnderlyingStreamEffectiveDateUnadjusted(v string) {
	m.Set(field.NewUnderlyingStreamEffectiveDateUnadjusted(v))
}

// SetUnderlyingStreamEffectiveDateBusinessDayConvention sets UnderlyingStreamEffectiveDateBusinessDayConvention, Tag 40058.
func (m NoUnderlyingStreams) SetUnderlyingStreamEffectiveDateBusinessDayConvention(v int) {
	m.Set(field.NewUnderlyingStreamEffectiveDateBusinessDayConvention(v))
}

// SetNoUnderlyingStreamEffectiveDateBusinessCenters sets NoUnderlyingStreamEffectiveDateBusinessCenters, Tag 40975.
func (m NoUnderlyingStreams) SetNoUnderlyingStreamEffectiveDateBusinessCenters(f NoUnderlyingStreamEffectiveDateBusinessCentersRepeatingGroup) {
	m.SetGroup(f)
}

// SetUnderlyingStreamEffectiveDateRelativeTo sets UnderlyingStreamEffectiveDateRelativeTo, Tag 40060.
func (m NoUnderlyingStreams) SetUnderlyingStreamEffectiveDateRelativeTo(v int) {
	m.Set(field.NewUnderlyingStreamEffectiveDateRelativeTo(v))
}

// SetUnderlyingStreamEffectiveDateOffsetPeriod sets UnderlyingStreamEffectiveDateOffsetPeriod, Tag 40061.
func (m NoUnderlyingStreams) SetUnderlyingStreamEffectiveDateOffsetPeriod(v int) {
	m.Set(field.NewUnderlyingStreamEffectiveDateOffsetPeriod(v))
}

// SetUnderlyingStreamEffectiveDateOffsetUnit sets UnderlyingStreamEffectiveDateOffsetUnit, Tag 40062.
func (m NoUnderlyingStreams) SetUnderlyingStreamEffectiveDateOffsetUnit(v string) {
	m.Set(field.NewUnderlyingStreamEffectiveDateOffsetUnit(v))
}

// SetUnderlyingStreamEffectiveDateOffsetDayType sets UnderlyingStreamEffectiveDateOffsetDayType, Tag 40063.
func (m NoUnderlyingStreams) SetUnderlyingStreamEffectiveDateOffsetDayType(v int) {
	m.Set(field.NewUnderlyingStreamEffectiveDateOffsetDayType(v))
}

// SetUnderlyingStreamEffectiveDateAdjusted sets UnderlyingStreamEffectiveDateAdjusted, Tag 40064.
func (m NoUnderlyingStreams) SetUnderlyingStreamEffectiveDateAdjusted(v string) {
	m.Set(field.NewUnderlyingStreamEffectiveDateAdjusted(v))
}

// SetUnderlyingStreamTerminationDateUnadjusted sets UnderlyingStreamTerminationDateUnadjusted, Tag 40548.
func (m NoUnderlyingStreams) SetUnderlyingStreamTerminationDateUnadjusted(v string) {
	m.Set(field.NewUnderlyingStreamTerminationDateUnadjusted(v))
}

// SetUnderlyingStreamTerminationDateBusinessDayConvention sets UnderlyingStreamTerminationDateBusinessDayConvention, Tag 40549.
func (m NoUnderlyingStreams) SetUnderlyingStreamTerminationDateBusinessDayConvention(v int) {
	m.Set(field.NewUnderlyingStreamTerminationDateBusinessDayConvention(v))
}

// SetNoUnderlyingStreamTerminationDateBusinessCenters sets NoUnderlyingStreamTerminationDateBusinessCenters, Tag 40976.
func (m NoUnderlyingStreams) SetNoUnderlyingStreamTerminationDateBusinessCenters(f NoUnderlyingStreamTerminationDateBusinessCentersRepeatingGroup) {
	m.SetGroup(f)
}

// SetUnderlyingStreamTerminationDateRelativeTo sets UnderlyingStreamTerminationDateRelativeTo, Tag 40551.
func (m NoUnderlyingStreams) SetUnderlyingStreamTerminationDateRelativeTo(v int) {
	m.Set(field.NewUnderlyingStreamTerminationDateRelativeTo(v))
}

// SetUnderlyingStreamTerminationDateOffsetPeriod sets UnderlyingStreamTerminationDateOffsetPeriod, Tag 40552.
func (m NoUnderlyingStreams) SetUnderlyingStreamTerminationDateOffsetPeriod(v int) {
	m.Set(field.NewUnderlyingStreamTerminationDateOffsetPeriod(v))
}

// SetUnderlyingStreamTerminationDateOffsetUnit sets UnderlyingStreamTerminationDateOffsetUnit, Tag 40553.
func (m NoUnderlyingStreams) SetUnderlyingStreamTerminationDateOffsetUnit(v string) {
	m.Set(field.NewUnderlyingStreamTerminationDateOffsetUnit(v))
}

// SetUnderlyingStreamTerminationDateOffsetDayType sets UnderlyingStreamTerminationDateOffsetDayType, Tag 40554.
func (m NoUnderlyingStreams) SetUnderlyingStreamTerminationDateOffsetDayType(v int) {
	m.Set(field.NewUnderlyingStreamTerminationDateOffsetDayType(v))
}

// SetUnderlyingStreamTerminationDateAdjusted sets UnderlyingStreamTerminationDateAdjusted, Tag 40555.
func (m NoUnderlyingStreams) SetUnderlyingStreamTerminationDateAdjusted(v string) {
	m.Set(field.NewUnderlyingStreamTerminationDateAdjusted(v))
}

// SetUnderlyingStreamCalculationPeriodBusinessDayConvention sets UnderlyingStreamCalculationPeriodBusinessDayConvention, Tag 40556.
func (m NoUnderlyingStreams) SetUnderlyingStreamCalculationPeriodBusinessDayConvention(v int) {
	m.Set(field.NewUnderlyingStreamCalculationPeriodBusinessDayConvention(v))
}

// SetNoUnderlyingStreamCalculationPeriodBusinessCenters sets NoUnderlyingStreamCalculationPeriodBusinessCenters, Tag 40973.
func (m NoUnderlyingStreams) SetNoUnderlyingStreamCalculationPeriodBusinessCenters(f NoUnderlyingStreamCalculationPeriodBusinessCentersRepeatingGroup) {
	m.SetGroup(f)
}

// SetUnderlyingStreamFirstPeriodStartDateUnadjusted sets UnderlyingStreamFirstPeriodStartDateUnadjusted, Tag 40558.
func (m NoUnderlyingStreams) SetUnderlyingStreamFirstPeriodStartDateUnadjusted(v string) {
	m.Set(field.NewUnderlyingStreamFirstPeriodStartDateUnadjusted(v))
}

// SetUnderlyingStreamFirstPeriodStartDateBusinessDayConvention sets UnderlyingStreamFirstPeriodStartDateBusinessDayConvention, Tag 40559.
func (m NoUnderlyingStreams) SetUnderlyingStreamFirstPeriodStartDateBusinessDayConvention(v int) {
	m.Set(field.NewUnderlyingStreamFirstPeriodStartDateBusinessDayConvention(v))
}

// SetNoUnderlyingStreamFirstPeriodStartDateBusinessCenters sets NoUnderlyingStreamFirstPeriodStartDateBusinessCenters, Tag 40974.
func (m NoUnderlyingStreams) SetNoUnderlyingStreamFirstPeriodStartDateBusinessCenters(f NoUnderlyingStreamFirstPeriodStartDateBusinessCentersRepeatingGroup) {
	m.SetGroup(f)
}

// SetUnderlyingStreamFirstPeriodStartDateAdjusted sets UnderlyingStreamFirstPeriodStartDateAdjusted, Tag 40561.
func (m NoUnderlyingStreams) SetUnderlyingStreamFirstPeriodStartDateAdjusted(v string) {
	m.Set(field.NewUnderlyingStreamFirstPeriodStartDateAdjusted(v))
}

// SetUnderlyingStreamFirstRegularPeriodStartDateUnadjusted sets UnderlyingStreamFirstRegularPeriodStartDateUnadjusted, Tag 40562.
func (m NoUnderlyingStreams) SetUnderlyingStreamFirstRegularPeriodStartDateUnadjusted(v string) {
	m.Set(field.NewUnderlyingStreamFirstRegularPeriodStartDateUnadjusted(v))
}

// SetUnderlyingStreamFirstCompoundingPeriodEndDateUnadjusted sets UnderlyingStreamFirstCompoundingPeriodEndDateUnadjusted, Tag 40563.
func (m NoUnderlyingStreams) SetUnderlyingStreamFirstCompoundingPeriodEndDateUnadjusted(v string) {
	m.Set(field.NewUnderlyingStreamFirstCompoundingPeriodEndDateUnadjusted(v))
}

// SetUnderlyingStreamLastRegularPeriodEndDateUnadjusted sets UnderlyingStreamLastRegularPeriodEndDateUnadjusted, Tag 40564.
func (m NoUnderlyingStreams) SetUnderlyingStreamLastRegularPeriodEndDateUnadjusted(v string) {
	m.Set(field.NewUnderlyingStreamLastRegularPeriodEndDateUnadjusted(v))
}

// SetUnderlyingStreamCalculationFrequencyPeriod sets UnderlyingStreamCalculationFrequencyPeriod, Tag 40565.
func (m NoUnderlyingStreams) SetUnderlyingStreamCalculationFrequencyPeriod(v int) {
	m.Set(field.NewUnderlyingStreamCalculationFrequencyPeriod(v))
}

// SetUnderlyingStreamCalculationFrequencyUnit sets UnderlyingStreamCalculationFrequencyUnit, Tag 40566.
func (m NoUnderlyingStreams) SetUnderlyingStreamCalculationFrequencyUnit(v string) {
	m.Set(field.NewUnderlyingStreamCalculationFrequencyUnit(v))
}

// SetUnderlyingStreamCalculationRollConvention sets UnderlyingStreamCalculationRollConvention, Tag 40567.
func (m NoUnderlyingStreams) SetUnderlyingStreamCalculationRollConvention(v string) {
	m.Set(field.NewUnderlyingStreamCalculationRollConvention(v))
}

// SetUnderlyingStreamCalculationPeriodDatesXID sets UnderlyingStreamCalculationPeriodDatesXID, Tag 41957.
func (m NoUnderlyingStreams) SetUnderlyingStreamCalculationPeriodDatesXID(v string) {
	m.Set(field.NewUnderlyingStreamCalculationPeriodDatesXID(v))
}

// SetUnderlyingStreamCalculationPeriodDatesXIDRef sets UnderlyingStreamCalculationPeriodDatesXIDRef, Tag 41958.
func (m NoUnderlyingStreams) SetUnderlyingStreamCalculationPeriodDatesXIDRef(v string) {
	m.Set(field.NewUnderlyingStreamCalculationPeriodDatesXIDRef(v))
}

// SetNoUnderlyingStreamCalculationPeriodDates sets NoUnderlyingStreamCalculationPeriodDates, Tag 41954.
func (m NoUnderlyingStreams) SetNoUnderlyingStreamCalculationPeriodDates(f NoUnderlyingStreamCalculationPeriodDatesRepeatingGroup) {
	m.SetGroup(f)
}

// SetUnderlyingStreamCalculationBalanceOfFirstPeriod sets UnderlyingStreamCalculationBalanceOfFirstPeriod, Tag 41959.
func (m NoUnderlyingStreams) SetUnderlyingStreamCalculationBalanceOfFirstPeriod(v bool) {
	m.Set(field.NewUnderlyingStreamCalculationBalanceOfFirstPeriod(v))
}

// SetUnderlyingStreamCalculationCorrectionPeriod sets UnderlyingStreamCalculationCorrectionPeriod, Tag 41960.
func (m NoUnderlyingStreams) SetUnderlyingStreamCalculationCorrectionPeriod(v int) {
	m.Set(field.NewUnderlyingStreamCalculationCorrectionPeriod(v))
}

// SetUnderlyingStreamCalculationCorrectionUnit sets UnderlyingStreamCalculationCorrectionUnit, Tag 41961.
func (m NoUnderlyingStreams) SetUnderlyingStreamCalculationCorrectionUnit(v string) {
	m.Set(field.NewUnderlyingStreamCalculationCorrectionUnit(v))
}

// SetUnderlyingPaymentStreamType sets UnderlyingPaymentStreamType, Tag 40568.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamType(v int) {
	m.Set(field.NewUnderlyingPaymentStreamType(v))
}

// SetUnderlyingPaymentStreamMarketRate sets UnderlyingPaymentStreamMarketRate, Tag 40569.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamMarketRate(v int) {
	m.Set(field.NewUnderlyingPaymentStreamMarketRate(v))
}

// SetUnderlyingPaymentStreamDelayIndicator sets UnderlyingPaymentStreamDelayIndicator, Tag 40570.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamDelayIndicator(v bool) {
	m.Set(field.NewUnderlyingPaymentStreamDelayIndicator(v))
}

// SetUnderlyingPaymentStreamSettlCurrency sets UnderlyingPaymentStreamSettlCurrency, Tag 40571.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamSettlCurrency(v string) {
	m.Set(field.NewUnderlyingPaymentStreamSettlCurrency(v))
}

// SetUnderlyingPaymentStreamDayCount sets UnderlyingPaymentStreamDayCount, Tag 40572.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamDayCount(v int) {
	m.Set(field.NewUnderlyingPaymentStreamDayCount(v))
}

// SetUnderlyingPaymentStreamAccrualDays sets UnderlyingPaymentStreamAccrualDays, Tag 40573.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamAccrualDays(v int) {
	m.Set(field.NewUnderlyingPaymentStreamAccrualDays(v))
}

// SetUnderlyingPaymentStreamDiscountType sets UnderlyingPaymentStreamDiscountType, Tag 40574.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamDiscountType(v int) {
	m.Set(field.NewUnderlyingPaymentStreamDiscountType(v))
}

// SetUnderlyingPaymentStreamDiscountRate sets UnderlyingPaymentStreamDiscountRate, Tag 40575.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamDiscountRate(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingPaymentStreamDiscountRate(value, scale))
}

// SetUnderlyingPaymentStreamDiscountRateDayCount sets UnderlyingPaymentStreamDiscountRateDayCount, Tag 40576.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamDiscountRateDayCount(v int) {
	m.Set(field.NewUnderlyingPaymentStreamDiscountRateDayCount(v))
}

// SetUnderlyingPaymentStreamCompoundingMethod sets UnderlyingPaymentStreamCompoundingMethod, Tag 40577.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamCompoundingMethod(v int) {
	m.Set(field.NewUnderlyingPaymentStreamCompoundingMethod(v))
}

// SetUnderlyingPaymentStreamInitialPrincipalExchangeIndicator sets UnderlyingPaymentStreamInitialPrincipalExchangeIndicator, Tag 40578.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamInitialPrincipalExchangeIndicator(v bool) {
	m.Set(field.NewUnderlyingPaymentStreamInitialPrincipalExchangeIndicator(v))
}

// SetUnderlyingPaymentStreamInterimPrincipalExchangeIndicator sets UnderlyingPaymentStreamInterimPrincipalExchangeIndicator, Tag 40579.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamInterimPrincipalExchangeIndicator(v bool) {
	m.Set(field.NewUnderlyingPaymentStreamInterimPrincipalExchangeIndicator(v))
}

// SetUnderlyingPaymentStreamFinalPrincipalExchangeIndicator sets UnderlyingPaymentStreamFinalPrincipalExchangeIndicator, Tag 40580.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamFinalPrincipalExchangeIndicator(v bool) {
	m.Set(field.NewUnderlyingPaymentStreamFinalPrincipalExchangeIndicator(v))
}

// SetUnderlyingPaymentStreamPaymentDateBusinessDayConvention sets UnderlyingPaymentStreamPaymentDateBusinessDayConvention, Tag 40581.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamPaymentDateBusinessDayConvention(v int) {
	m.Set(field.NewUnderlyingPaymentStreamPaymentDateBusinessDayConvention(v))
}

// SetNoUnderlyingPaymentStreamPaymentDateBusinessCenters sets NoUnderlyingPaymentStreamPaymentDateBusinessCenters, Tag 40969.
func (m NoUnderlyingStreams) SetNoUnderlyingPaymentStreamPaymentDateBusinessCenters(f NoUnderlyingPaymentStreamPaymentDateBusinessCentersRepeatingGroup) {
	m.SetGroup(f)
}

// SetUnderlyingPaymentStreamPaymentFrequencyPeriod sets UnderlyingPaymentStreamPaymentFrequencyPeriod, Tag 40583.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamPaymentFrequencyPeriod(v int) {
	m.Set(field.NewUnderlyingPaymentStreamPaymentFrequencyPeriod(v))
}

// SetUnderlyingPaymentStreamPaymentFrequencyUnit sets UnderlyingPaymentStreamPaymentFrequencyUnit, Tag 40584.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamPaymentFrequencyUnit(v string) {
	m.Set(field.NewUnderlyingPaymentStreamPaymentFrequencyUnit(v))
}

// SetUnderlyingPaymentStreamPaymentRollConvention sets UnderlyingPaymentStreamPaymentRollConvention, Tag 40585.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamPaymentRollConvention(v string) {
	m.Set(field.NewUnderlyingPaymentStreamPaymentRollConvention(v))
}

// SetUnderlyingPaymentStreamFirstPaymentDateUnadjusted sets UnderlyingPaymentStreamFirstPaymentDateUnadjusted, Tag 40586.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamFirstPaymentDateUnadjusted(v string) {
	m.Set(field.NewUnderlyingPaymentStreamFirstPaymentDateUnadjusted(v))
}

// SetUnderlyingPaymentStreamLastRegularPaymentDateUnadjusted sets UnderlyingPaymentStreamLastRegularPaymentDateUnadjusted, Tag 40587.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamLastRegularPaymentDateUnadjusted(v string) {
	m.Set(field.NewUnderlyingPaymentStreamLastRegularPaymentDateUnadjusted(v))
}

// SetUnderlyingPaymentStreamPaymentDateRelativeTo sets UnderlyingPaymentStreamPaymentDateRelativeTo, Tag 40588.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamPaymentDateRelativeTo(v int) {
	m.Set(field.NewUnderlyingPaymentStreamPaymentDateRelativeTo(v))
}

// SetUnderlyingPaymentStreamPaymentDateOffsetPeriod sets UnderlyingPaymentStreamPaymentDateOffsetPeriod, Tag 40589.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamPaymentDateOffsetPeriod(v int) {
	m.Set(field.NewUnderlyingPaymentStreamPaymentDateOffsetPeriod(v))
}

// SetUnderlyingPaymentStreamPaymentDateOffsetUnit sets UnderlyingPaymentStreamPaymentDateOffsetUnit, Tag 40590.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamPaymentDateOffsetUnit(v string) {
	m.Set(field.NewUnderlyingPaymentStreamPaymentDateOffsetUnit(v))
}

// SetUnderlyingPaymentStreamPaymentDateOffsetDayType sets UnderlyingPaymentStreamPaymentDateOffsetDayType, Tag 40591.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamPaymentDateOffsetDayType(v int) {
	m.Set(field.NewUnderlyingPaymentStreamPaymentDateOffsetDayType(v))
}

// SetNoUnderlyingPaymentStreamPaymentDates sets NoUnderlyingPaymentStreamPaymentDates, Tag 41937.
func (m NoUnderlyingStreams) SetNoUnderlyingPaymentStreamPaymentDates(f NoUnderlyingPaymentStreamPaymentDatesRepeatingGroup) {
	m.SetGroup(f)
}

// SetUnderlyingPaymentStreamMasterAgreementPaymentDatesIndicator sets UnderlyingPaymentStreamMasterAgreementPaymentDatesIndicator, Tag 41940.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamMasterAgreementPaymentDatesIndicator(v bool) {
	m.Set(field.NewUnderlyingPaymentStreamMasterAgreementPaymentDatesIndicator(v))
}

// SetUnderlyingPaymentStreamFinalPricePaymentDateUnadjusted sets UnderlyingPaymentStreamFinalPricePaymentDateUnadjusted, Tag 42949.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamFinalPricePaymentDateUnadjusted(v string) {
	m.Set(field.NewUnderlyingPaymentStreamFinalPricePaymentDateUnadjusted(v))
}

// SetUnderlyingPaymentStreamFinalPricePaymentDateRelativeTo sets UnderlyingPaymentStreamFinalPricePaymentDateRelativeTo, Tag 42950.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamFinalPricePaymentDateRelativeTo(v int) {
	m.Set(field.NewUnderlyingPaymentStreamFinalPricePaymentDateRelativeTo(v))
}

// SetUnderlyingPaymentStreamFinalPricePaymentDateOffsetPeriod sets UnderlyingPaymentStreamFinalPricePaymentDateOffsetPeriod, Tag 42951.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamFinalPricePaymentDateOffsetPeriod(v int) {
	m.Set(field.NewUnderlyingPaymentStreamFinalPricePaymentDateOffsetPeriod(v))
}

// SetUnderlyingPaymentStreamFinalPricePaymentDateOffsetUnit sets UnderlyingPaymentStreamFinalPricePaymentDateOffsetUnit, Tag 42952.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamFinalPricePaymentDateOffsetUnit(v string) {
	m.Set(field.NewUnderlyingPaymentStreamFinalPricePaymentDateOffsetUnit(v))
}

// SetUnderlyingPaymentStreamFinalPricePaymentDateOffsetDayType sets UnderlyingPaymentStreamFinalPricePaymentDateOffsetDayType, Tag 42953.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamFinalPricePaymentDateOffsetDayType(v int) {
	m.Set(field.NewUnderlyingPaymentStreamFinalPricePaymentDateOffsetDayType(v))
}

// SetUnderlyingPaymentStreamFinalPricePaymentDateAdjusted sets UnderlyingPaymentStreamFinalPricePaymentDateAdjusted, Tag 42954.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamFinalPricePaymentDateAdjusted(v string) {
	m.Set(field.NewUnderlyingPaymentStreamFinalPricePaymentDateAdjusted(v))
}

// SetUnderlyingPaymentStreamResetDateRelativeTo sets UnderlyingPaymentStreamResetDateRelativeTo, Tag 40592.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamResetDateRelativeTo(v int) {
	m.Set(field.NewUnderlyingPaymentStreamResetDateRelativeTo(v))
}

// SetUnderlyingPaymentStreamResetDateBusinessDayConvention sets UnderlyingPaymentStreamResetDateBusinessDayConvention, Tag 40593.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamResetDateBusinessDayConvention(v int) {
	m.Set(field.NewUnderlyingPaymentStreamResetDateBusinessDayConvention(v))
}

// SetNoUnderlyingPaymentStreamResetDateBusinessCenters sets NoUnderlyingPaymentStreamResetDateBusinessCenters, Tag 40970.
func (m NoUnderlyingStreams) SetNoUnderlyingPaymentStreamResetDateBusinessCenters(f NoUnderlyingPaymentStreamResetDateBusinessCentersRepeatingGroup) {
	m.SetGroup(f)
}

// SetUnderlyingPaymentStreamResetFrequencyPeriod sets UnderlyingPaymentStreamResetFrequencyPeriod, Tag 40595.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamResetFrequencyPeriod(v int) {
	m.Set(field.NewUnderlyingPaymentStreamResetFrequencyPeriod(v))
}

// SetUnderlyingPaymentStreamResetFrequencyUnit sets UnderlyingPaymentStreamResetFrequencyUnit, Tag 40596.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamResetFrequencyUnit(v string) {
	m.Set(field.NewUnderlyingPaymentStreamResetFrequencyUnit(v))
}

// SetUnderlyingPaymentStreamResetWeeklyRollConvention sets UnderlyingPaymentStreamResetWeeklyRollConvention, Tag 40597.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamResetWeeklyRollConvention(v string) {
	m.Set(field.NewUnderlyingPaymentStreamResetWeeklyRollConvention(v))
}

// SetUnderlyingPaymentStreamInitialFixingDateRelativeTo sets UnderlyingPaymentStreamInitialFixingDateRelativeTo, Tag 40598.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamInitialFixingDateRelativeTo(v int) {
	m.Set(field.NewUnderlyingPaymentStreamInitialFixingDateRelativeTo(v))
}

// SetUnderlyingPaymentStreamInitialFixingDateBusinessDayConvention sets UnderlyingPaymentStreamInitialFixingDateBusinessDayConvention, Tag 40599.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamInitialFixingDateBusinessDayConvention(v int) {
	m.Set(field.NewUnderlyingPaymentStreamInitialFixingDateBusinessDayConvention(v))
}

// SetNoUnderlyingPaymentStreamInitialFixingDateBusinessCenters sets NoUnderlyingPaymentStreamInitialFixingDateBusinessCenters, Tag 40971.
func (m NoUnderlyingStreams) SetNoUnderlyingPaymentStreamInitialFixingDateBusinessCenters(f NoUnderlyingPaymentStreamInitialFixingDateBusinessCentersRepeatingGroup) {
	m.SetGroup(f)
}

// SetUnderlyingPaymentStreamInitialFixingDateOffsetPeriod sets UnderlyingPaymentStreamInitialFixingDateOffsetPeriod, Tag 40601.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamInitialFixingDateOffsetPeriod(v int) {
	m.Set(field.NewUnderlyingPaymentStreamInitialFixingDateOffsetPeriod(v))
}

// SetUnderlyingPaymentStreamInitialFixingDateOffsetUnit sets UnderlyingPaymentStreamInitialFixingDateOffsetUnit, Tag 40602.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamInitialFixingDateOffsetUnit(v string) {
	m.Set(field.NewUnderlyingPaymentStreamInitialFixingDateOffsetUnit(v))
}

// SetUnderlyingPaymentStreamInitialFixingDateOffsetDayType sets UnderlyingPaymentStreamInitialFixingDateOffsetDayType, Tag 40603.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamInitialFixingDateOffsetDayType(v int) {
	m.Set(field.NewUnderlyingPaymentStreamInitialFixingDateOffsetDayType(v))
}

// SetUnderlyingPaymentStreamInitialFixingDateAdjusted sets UnderlyingPaymentStreamInitialFixingDateAdjusted, Tag 40604.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamInitialFixingDateAdjusted(v string) {
	m.Set(field.NewUnderlyingPaymentStreamInitialFixingDateAdjusted(v))
}

// SetUnderlyingPaymentStreamFixingDateRelativeTo sets UnderlyingPaymentStreamFixingDateRelativeTo, Tag 40605.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamFixingDateRelativeTo(v int) {
	m.Set(field.NewUnderlyingPaymentStreamFixingDateRelativeTo(v))
}

// SetUnderlyingPaymentStreamFixingDateBusinessDayConvention sets UnderlyingPaymentStreamFixingDateBusinessDayConvention, Tag 40606.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamFixingDateBusinessDayConvention(v int) {
	m.Set(field.NewUnderlyingPaymentStreamFixingDateBusinessDayConvention(v))
}

// SetNoUnderlyingPaymentStreamFixingDateBusinessCenters sets NoUnderlyingPaymentStreamFixingDateBusinessCenters, Tag 40972.
func (m NoUnderlyingStreams) SetNoUnderlyingPaymentStreamFixingDateBusinessCenters(f NoUnderlyingPaymentStreamFixingDateBusinessCentersRepeatingGroup) {
	m.SetGroup(f)
}

// SetUnderlyingPaymentStreamFixingDateOffsetPeriod sets UnderlyingPaymentStreamFixingDateOffsetPeriod, Tag 40608.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamFixingDateOffsetPeriod(v int) {
	m.Set(field.NewUnderlyingPaymentStreamFixingDateOffsetPeriod(v))
}

// SetUnderlyingPaymentStreamFixingDateOffsetUnit sets UnderlyingPaymentStreamFixingDateOffsetUnit, Tag 40609.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamFixingDateOffsetUnit(v string) {
	m.Set(field.NewUnderlyingPaymentStreamFixingDateOffsetUnit(v))
}

// SetUnderlyingPaymentStreamFixingDateOffsetDayType sets UnderlyingPaymentStreamFixingDateOffsetDayType, Tag 40610.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamFixingDateOffsetDayType(v int) {
	m.Set(field.NewUnderlyingPaymentStreamFixingDateOffsetDayType(v))
}

// SetUnderlyingPaymentStreamFixingDateAdjusted sets UnderlyingPaymentStreamFixingDateAdjusted, Tag 40611.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamFixingDateAdjusted(v string) {
	m.Set(field.NewUnderlyingPaymentStreamFixingDateAdjusted(v))
}

// SetUnderlyingPaymentStreamRateCutoffDateOffsetPeriod sets UnderlyingPaymentStreamRateCutoffDateOffsetPeriod, Tag 40612.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamRateCutoffDateOffsetPeriod(v int) {
	m.Set(field.NewUnderlyingPaymentStreamRateCutoffDateOffsetPeriod(v))
}

// SetUnderlyingPaymentStreamRateCutoffDateOffsetUnit sets UnderlyingPaymentStreamRateCutoffDateOffsetUnit, Tag 40613.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamRateCutoffDateOffsetUnit(v string) {
	m.Set(field.NewUnderlyingPaymentStreamRateCutoffDateOffsetUnit(v))
}

// SetUnderlyingPaymentStreamRateCutoffDateOffsetDayType sets UnderlyingPaymentStreamRateCutoffDateOffsetDayType, Tag 40614.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamRateCutoffDateOffsetDayType(v int) {
	m.Set(field.NewUnderlyingPaymentStreamRateCutoffDateOffsetDayType(v))
}

// SetNoUnderlyingPaymentStreamFixingDates sets NoUnderlyingPaymentStreamFixingDates, Tag 42955.
func (m NoUnderlyingStreams) SetNoUnderlyingPaymentStreamFixingDates(f NoUnderlyingPaymentStreamFixingDatesRepeatingGroup) {
	m.SetGroup(f)
}

// SetUnderlyingPaymentStreamRate sets UnderlyingPaymentStreamRate, Tag 40615.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamRate(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingPaymentStreamRate(value, scale))
}

// SetUnderlyingPaymentStreamFixedAmount sets UnderlyingPaymentStreamFixedAmount, Tag 40616.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamFixedAmount(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingPaymentStreamFixedAmount(value, scale))
}

// SetUnderlyingPaymentStreamRateOrAmountCurrency sets UnderlyingPaymentStreamRateOrAmountCurrency, Tag 40617.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamRateOrAmountCurrency(v string) {
	m.Set(field.NewUnderlyingPaymentStreamRateOrAmountCurrency(v))
}

// SetUnderlyingPaymentStreamFutureValueNotional sets UnderlyingPaymentStreamFutureValueNotional, Tag 40618.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamFutureValueNotional(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingPaymentStreamFutureValueNotional(value, scale))
}

// SetUnderlyingPaymentStreamFutureValueDateAdjusted sets UnderlyingPaymentStreamFutureValueDateAdjusted, Tag 40619.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamFutureValueDateAdjusted(v string) {
	m.Set(field.NewUnderlyingPaymentStreamFutureValueDateAdjusted(v))
}

// SetUnderlyingPaymentStreamFixedAmountUnitOfMeasure sets UnderlyingPaymentStreamFixedAmountUnitOfMeasure, Tag 41904.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamFixedAmountUnitOfMeasure(v string) {
	m.Set(field.NewUnderlyingPaymentStreamFixedAmountUnitOfMeasure(v))
}

// SetUnderlyingPaymentStreamTotalFixedAmount sets UnderlyingPaymentStreamTotalFixedAmount, Tag 41905.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamTotalFixedAmount(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingPaymentStreamTotalFixedAmount(value, scale))
}

// SetUnderlyingPaymentStreamWorldScaleRate sets UnderlyingPaymentStreamWorldScaleRate, Tag 41906.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamWorldScaleRate(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingPaymentStreamWorldScaleRate(value, scale))
}

// SetUnderlyingPaymentStreamContractPrice sets UnderlyingPaymentStreamContractPrice, Tag 41907.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamContractPrice(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingPaymentStreamContractPrice(value, scale))
}

// SetUnderlyingPaymentStreamContractPriceCurrency sets UnderlyingPaymentStreamContractPriceCurrency, Tag 41908.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamContractPriceCurrency(v string) {
	m.Set(field.NewUnderlyingPaymentStreamContractPriceCurrency(v))
}

// SetUnderlyingPaymentStreamRateIndex sets UnderlyingPaymentStreamRateIndex, Tag 40620.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamRateIndex(v string) {
	m.Set(field.NewUnderlyingPaymentStreamRateIndex(v))
}

// SetUnderlyingPaymentStreamRateIndexSource sets UnderlyingPaymentStreamRateIndexSource, Tag 40621.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamRateIndexSource(v int) {
	m.Set(field.NewUnderlyingPaymentStreamRateIndexSource(v))
}

// SetUnderlyingPaymentStreamRateIndexCurveUnit sets UnderlyingPaymentStreamRateIndexCurveUnit, Tag 40622.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamRateIndexCurveUnit(v string) {
	m.Set(field.NewUnderlyingPaymentStreamRateIndexCurveUnit(v))
}

// SetUnderlyingPaymentStreamRateIndexCurvePeriod sets UnderlyingPaymentStreamRateIndexCurvePeriod, Tag 40623.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamRateIndexCurvePeriod(v int) {
	m.Set(field.NewUnderlyingPaymentStreamRateIndexCurvePeriod(v))
}

// SetUnderlyingPaymentStreamRateMultiplier sets UnderlyingPaymentStreamRateMultiplier, Tag 40624.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamRateMultiplier(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingPaymentStreamRateMultiplier(value, scale))
}

// SetUnderlyingPaymentStreamRateSpread sets UnderlyingPaymentStreamRateSpread, Tag 40625.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamRateSpread(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingPaymentStreamRateSpread(value, scale))
}

// SetUnderlyingPaymentStreamRateSpreadPositionType sets UnderlyingPaymentStreamRateSpreadPositionType, Tag 40626.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamRateSpreadPositionType(v int) {
	m.Set(field.NewUnderlyingPaymentStreamRateSpreadPositionType(v))
}

// SetUnderlyingPaymentStreamRateTreatment sets UnderlyingPaymentStreamRateTreatment, Tag 40627.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamRateTreatment(v int) {
	m.Set(field.NewUnderlyingPaymentStreamRateTreatment(v))
}

// SetUnderlyingPaymentStreamCapRate sets UnderlyingPaymentStreamCapRate, Tag 40628.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamCapRate(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingPaymentStreamCapRate(value, scale))
}

// SetUnderlyingPaymentStreamCapRateBuySide sets UnderlyingPaymentStreamCapRateBuySide, Tag 40629.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamCapRateBuySide(v int) {
	m.Set(field.NewUnderlyingPaymentStreamCapRateBuySide(v))
}

// SetUnderlyingPaymentStreamCapRateSellSide sets UnderlyingPaymentStreamCapRateSellSide, Tag 40630.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamCapRateSellSide(v int) {
	m.Set(field.NewUnderlyingPaymentStreamCapRateSellSide(v))
}

// SetUnderlyingPaymentStreamFloorRate sets UnderlyingPaymentStreamFloorRate, Tag 40631.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamFloorRate(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingPaymentStreamFloorRate(value, scale))
}

// SetUnderlyingPaymentStreamFloorRateBuySide sets UnderlyingPaymentStreamFloorRateBuySide, Tag 40632.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamFloorRateBuySide(v int) {
	m.Set(field.NewUnderlyingPaymentStreamFloorRateBuySide(v))
}

// SetUnderlyingPaymentStreamFloorRateSellSide sets UnderlyingPaymentStreamFloorRateSellSide, Tag 40633.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamFloorRateSellSide(v int) {
	m.Set(field.NewUnderlyingPaymentStreamFloorRateSellSide(v))
}

// SetUnderlyingPaymentStreamInitialRate sets UnderlyingPaymentStreamInitialRate, Tag 40634.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamInitialRate(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingPaymentStreamInitialRate(value, scale))
}

// SetUnderlyingPaymentStreamFinalRateRoundingDirection sets UnderlyingPaymentStreamFinalRateRoundingDirection, Tag 40635.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamFinalRateRoundingDirection(v string) {
	m.Set(field.NewUnderlyingPaymentStreamFinalRateRoundingDirection(v))
}

// SetUnderlyingPaymentStreamFinalRatePrecision sets UnderlyingPaymentStreamFinalRatePrecision, Tag 40636.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamFinalRatePrecision(v int) {
	m.Set(field.NewUnderlyingPaymentStreamFinalRatePrecision(v))
}

// SetUnderlyingPaymentStreamAveragingMethod sets UnderlyingPaymentStreamAveragingMethod, Tag 40637.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamAveragingMethod(v int) {
	m.Set(field.NewUnderlyingPaymentStreamAveragingMethod(v))
}

// SetUnderlyingPaymentStreamNegativeRateTreatment sets UnderlyingPaymentStreamNegativeRateTreatment, Tag 40638.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamNegativeRateTreatment(v int) {
	m.Set(field.NewUnderlyingPaymentStreamNegativeRateTreatment(v))
}

// SetUnderlyingPaymentStreamInflationLagPeriod sets UnderlyingPaymentStreamInflationLagPeriod, Tag 40639.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamInflationLagPeriod(v int) {
	m.Set(field.NewUnderlyingPaymentStreamInflationLagPeriod(v))
}

// SetUnderlyingPaymentStreamInflationLagUnit sets UnderlyingPaymentStreamInflationLagUnit, Tag 40640.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamInflationLagUnit(v string) {
	m.Set(field.NewUnderlyingPaymentStreamInflationLagUnit(v))
}

// SetUnderlyingPaymentStreamInflationLagDayType sets UnderlyingPaymentStreamInflationLagDayType, Tag 40641.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamInflationLagDayType(v int) {
	m.Set(field.NewUnderlyingPaymentStreamInflationLagDayType(v))
}

// SetUnderlyingPaymentStreamInflationInterpolationMethod sets UnderlyingPaymentStreamInflationInterpolationMethod, Tag 40642.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamInflationInterpolationMethod(v int) {
	m.Set(field.NewUnderlyingPaymentStreamInflationInterpolationMethod(v))
}

// SetUnderlyingPaymentStreamInflationIndexSource sets UnderlyingPaymentStreamInflationIndexSource, Tag 40643.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamInflationIndexSource(v int) {
	m.Set(field.NewUnderlyingPaymentStreamInflationIndexSource(v))
}

// SetUnderlyingPaymentStreamInflationPublicationSource sets UnderlyingPaymentStreamInflationPublicationSource, Tag 40644.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamInflationPublicationSource(v string) {
	m.Set(field.NewUnderlyingPaymentStreamInflationPublicationSource(v))
}

// SetUnderlyingPaymentStreamInflationInitialIndexLevel sets UnderlyingPaymentStreamInflationInitialIndexLevel, Tag 40645.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamInflationInitialIndexLevel(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingPaymentStreamInflationInitialIndexLevel(value, scale))
}

// SetUnderlyingPaymentStreamInflationFallbackBondApplicable sets UnderlyingPaymentStreamInflationFallbackBondApplicable, Tag 40646.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamInflationFallbackBondApplicable(v bool) {
	m.Set(field.NewUnderlyingPaymentStreamInflationFallbackBondApplicable(v))
}

// SetUnderlyingPaymentStreamFRADiscounting sets UnderlyingPaymentStreamFRADiscounting, Tag 40647.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamFRADiscounting(v int) {
	m.Set(field.NewUnderlyingPaymentStreamFRADiscounting(v))
}

// SetUnderlyingPaymentStreamRateIndex2CurveUnit sets UnderlyingPaymentStreamRateIndex2CurveUnit, Tag 41911.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamRateIndex2CurveUnit(v string) {
	m.Set(field.NewUnderlyingPaymentStreamRateIndex2CurveUnit(v))
}

// SetUnderlyingPaymentStreamRateIndex2CurvePeriod sets UnderlyingPaymentStreamRateIndex2CurvePeriod, Tag 41912.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamRateIndex2CurvePeriod(v int) {
	m.Set(field.NewUnderlyingPaymentStreamRateIndex2CurvePeriod(v))
}

// SetUnderlyingPaymentStreamRateIndexLocation sets UnderlyingPaymentStreamRateIndexLocation, Tag 41913.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamRateIndexLocation(v string) {
	m.Set(field.NewUnderlyingPaymentStreamRateIndexLocation(v))
}

// SetUnderlyingPaymentStreamRateIndexLevel sets UnderlyingPaymentStreamRateIndexLevel, Tag 41914.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamRateIndexLevel(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingPaymentStreamRateIndexLevel(value, scale))
}

// SetUnderlyingPaymentStreamRateIndexUnitOfMeasure sets UnderlyingPaymentStreamRateIndexUnitOfMeasure, Tag 41915.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamRateIndexUnitOfMeasure(v string) {
	m.Set(field.NewUnderlyingPaymentStreamRateIndexUnitOfMeasure(v))
}

// SetUnderlyingPaymentStreamSettlLevel sets UnderlyingPaymentStreamSettlLevel, Tag 41916.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamSettlLevel(v int) {
	m.Set(field.NewUnderlyingPaymentStreamSettlLevel(v))
}

// SetUnderlyingPaymentStreamReferenceLevel sets UnderlyingPaymentStreamReferenceLevel, Tag 41917.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamReferenceLevel(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingPaymentStreamReferenceLevel(value, scale))
}

// SetUnderlyingPaymentStreamReferenceLevelUnitOfMeasure sets UnderlyingPaymentStreamReferenceLevelUnitOfMeasure, Tag 41918.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamReferenceLevelUnitOfMeasure(v string) {
	m.Set(field.NewUnderlyingPaymentStreamReferenceLevelUnitOfMeasure(v))
}

// SetUnderlyingPaymentStreamReferenceLevelEqualsZeroIndicator sets UnderlyingPaymentStreamReferenceLevelEqualsZeroIndicator, Tag 41919.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamReferenceLevelEqualsZeroIndicator(v bool) {
	m.Set(field.NewUnderlyingPaymentStreamReferenceLevelEqualsZeroIndicator(v))
}

// SetUnderlyingPaymentStreamRateSpreadCurrency sets UnderlyingPaymentStreamRateSpreadCurrency, Tag 41920.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamRateSpreadCurrency(v string) {
	m.Set(field.NewUnderlyingPaymentStreamRateSpreadCurrency(v))
}

// SetUnderlyingPaymentStreamRateSpreadUnitOfMeasure sets UnderlyingPaymentStreamRateSpreadUnitOfMeasure, Tag 41921.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamRateSpreadUnitOfMeasure(v string) {
	m.Set(field.NewUnderlyingPaymentStreamRateSpreadUnitOfMeasure(v))
}

// SetUnderlyingPaymentStreamRateConversionFactor sets UnderlyingPaymentStreamRateConversionFactor, Tag 41922.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamRateConversionFactor(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingPaymentStreamRateConversionFactor(value, scale))
}

// SetUnderlyingPaymentStreamRateSpreadType sets UnderlyingPaymentStreamRateSpreadType, Tag 41923.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamRateSpreadType(v int) {
	m.Set(field.NewUnderlyingPaymentStreamRateSpreadType(v))
}

// SetUnderlyingPaymentStreamLastResetRate sets UnderlyingPaymentStreamLastResetRate, Tag 41924.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamLastResetRate(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingPaymentStreamLastResetRate(value, scale))
}

// SetUnderlyingPaymentStreamFinalRate sets UnderlyingPaymentStreamFinalRate, Tag 41925.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamFinalRate(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingPaymentStreamFinalRate(value, scale))
}

// SetUnderlyingPaymentStreamCalculationLagPeriod sets UnderlyingPaymentStreamCalculationLagPeriod, Tag 41926.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamCalculationLagPeriod(v int) {
	m.Set(field.NewUnderlyingPaymentStreamCalculationLagPeriod(v))
}

// SetUnderlyingPaymentStreamCalculationLagUnit sets UnderlyingPaymentStreamCalculationLagUnit, Tag 41927.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamCalculationLagUnit(v string) {
	m.Set(field.NewUnderlyingPaymentStreamCalculationLagUnit(v))
}

// SetUnderlyingPaymentStreamFirstObservationDateOffsetPeriod sets UnderlyingPaymentStreamFirstObservationDateOffsetPeriod, Tag 41928.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamFirstObservationDateOffsetPeriod(v int) {
	m.Set(field.NewUnderlyingPaymentStreamFirstObservationDateOffsetPeriod(v))
}

// SetUnderlyingPaymentStreamFirstObservationDateOffsetUnit sets UnderlyingPaymentStreamFirstObservationDateOffsetUnit, Tag 41929.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamFirstObservationDateOffsetUnit(v string) {
	m.Set(field.NewUnderlyingPaymentStreamFirstObservationDateOffsetUnit(v))
}

// SetUnderlyingPaymentStreamPricingDayType sets UnderlyingPaymentStreamPricingDayType, Tag 41930.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamPricingDayType(v int) {
	m.Set(field.NewUnderlyingPaymentStreamPricingDayType(v))
}

// SetUnderlyingPaymentStreamPricingDayDistribution sets UnderlyingPaymentStreamPricingDayDistribution, Tag 41931.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamPricingDayDistribution(v int) {
	m.Set(field.NewUnderlyingPaymentStreamPricingDayDistribution(v))
}

// SetUnderlyingPaymentStreamPricingDayCount sets UnderlyingPaymentStreamPricingDayCount, Tag 41932.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamPricingDayCount(v int) {
	m.Set(field.NewUnderlyingPaymentStreamPricingDayCount(v))
}

// SetUnderlyingPaymentStreamPricingBusinessCalendar sets UnderlyingPaymentStreamPricingBusinessCalendar, Tag 41933.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamPricingBusinessCalendar(v string) {
	m.Set(field.NewUnderlyingPaymentStreamPricingBusinessCalendar(v))
}

// SetUnderlyingPaymentStreamPricingBusinessDayConvention sets UnderlyingPaymentStreamPricingBusinessDayConvention, Tag 41934.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamPricingBusinessDayConvention(v int) {
	m.Set(field.NewUnderlyingPaymentStreamPricingBusinessDayConvention(v))
}

// SetNoUnderlyingPaymentStreamPricingBusinessCenters sets NoUnderlyingPaymentStreamPricingBusinessCenters, Tag 41909.
func (m NoUnderlyingStreams) SetNoUnderlyingPaymentStreamPricingBusinessCenters(f NoUnderlyingPaymentStreamPricingBusinessCentersRepeatingGroup) {
	m.SetGroup(f)
}

// SetNoUnderlyingPaymentStreamPricingDays sets NoUnderlyingPaymentStreamPricingDays, Tag 41944.
func (m NoUnderlyingStreams) SetNoUnderlyingPaymentStreamPricingDays(f NoUnderlyingPaymentStreamPricingDaysRepeatingGroup) {
	m.SetGroup(f)
}

// SetNoUnderlyingPaymentStreamPricingDates sets NoUnderlyingPaymentStreamPricingDates, Tag 41941.
func (m NoUnderlyingStreams) SetNoUnderlyingPaymentStreamPricingDates(f NoUnderlyingPaymentStreamPricingDatesRepeatingGroup) {
	m.SetGroup(f)
}

// SetUnderlyingPaymentStreamFirstObservationDateUnadjusted sets UnderlyingPaymentStreamFirstObservationDateUnadjusted, Tag 42958.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamFirstObservationDateUnadjusted(v string) {
	m.Set(field.NewUnderlyingPaymentStreamFirstObservationDateUnadjusted(v))
}

// SetUnderlyingPaymentStreamFirstObservationDateRelativeTo sets UnderlyingPaymentStreamFirstObservationDateRelativeTo, Tag 42959.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamFirstObservationDateRelativeTo(v int) {
	m.Set(field.NewUnderlyingPaymentStreamFirstObservationDateRelativeTo(v))
}

// SetUnderlyingPaymentStreamFirstObservationDateOffsetDayType sets UnderlyingPaymentStreamFirstObservationDateOffsetDayType, Tag 42960.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamFirstObservationDateOffsetDayType(v int) {
	m.Set(field.NewUnderlyingPaymentStreamFirstObservationDateOffsetDayType(v))
}

// SetUnderlyingPaymentStreamFirstObservationDateAdjusted sets UnderlyingPaymentStreamFirstObservationDateAdjusted, Tag 42961.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamFirstObservationDateAdjusted(v string) {
	m.Set(field.NewUnderlyingPaymentStreamFirstObservationDateAdjusted(v))
}

// SetUnderlyingPaymentStreamUnderlierRefID sets UnderlyingPaymentStreamUnderlierRefID, Tag 42962.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamUnderlierRefID(v string) {
	m.Set(field.NewUnderlyingPaymentStreamUnderlierRefID(v))
}

// SetUnderlyingPaymentStreamFormulaCurrency sets UnderlyingPaymentStreamFormulaCurrency, Tag 42978.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamFormulaCurrency(v string) {
	m.Set(field.NewUnderlyingPaymentStreamFormulaCurrency(v))
}

// SetUnderlyingPaymentStreamFormulaCurrencyDeterminationMethod sets UnderlyingPaymentStreamFormulaCurrencyDeterminationMethod, Tag 42979.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamFormulaCurrencyDeterminationMethod(v string) {
	m.Set(field.NewUnderlyingPaymentStreamFormulaCurrencyDeterminationMethod(v))
}

// SetUnderlyingPaymentStreamFormulaReferenceAmount sets UnderlyingPaymentStreamFormulaReferenceAmount, Tag 42980.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamFormulaReferenceAmount(v int) {
	m.Set(field.NewUnderlyingPaymentStreamFormulaReferenceAmount(v))
}

// SetNoUnderlyingPaymentStreamFormulas sets NoUnderlyingPaymentStreamFormulas, Tag 42981.
func (m NoUnderlyingStreams) SetNoUnderlyingPaymentStreamFormulas(f NoUnderlyingPaymentStreamFormulasRepeatingGroup) {
	m.SetGroup(f)
}

// SetUnderlyingPaymentStreamFormulaImageLength sets UnderlyingPaymentStreamFormulaImageLength, Tag 42947.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamFormulaImageLength(v int) {
	m.Set(field.NewUnderlyingPaymentStreamFormulaImageLength(v))
}

// SetUnderlyingPaymentStreamFormulaImage sets UnderlyingPaymentStreamFormulaImage, Tag 42948.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamFormulaImage(v string) {
	m.Set(field.NewUnderlyingPaymentStreamFormulaImage(v))
}

// SetUnderlyingDividendReinvestmentIndicator sets UnderlyingDividendReinvestmentIndicator, Tag 42826.
func (m NoUnderlyingStreams) SetUnderlyingDividendReinvestmentIndicator(v bool) {
	m.Set(field.NewUnderlyingDividendReinvestmentIndicator(v))
}

// SetUnderlyingDividendEntitlementEvent sets UnderlyingDividendEntitlementEvent, Tag 42827.
func (m NoUnderlyingStreams) SetUnderlyingDividendEntitlementEvent(v int) {
	m.Set(field.NewUnderlyingDividendEntitlementEvent(v))
}

// SetUnderlyingDividendAmountType sets UnderlyingDividendAmountType, Tag 42828.
func (m NoUnderlyingStreams) SetUnderlyingDividendAmountType(v int) {
	m.Set(field.NewUnderlyingDividendAmountType(v))
}

// SetUnderlyingDividendUnderlierRefID sets UnderlyingDividendUnderlierRefID, Tag 42829.
func (m NoUnderlyingStreams) SetUnderlyingDividendUnderlierRefID(v string) {
	m.Set(field.NewUnderlyingDividendUnderlierRefID(v))
}

// SetNoUnderlyingDividendPeriods sets NoUnderlyingDividendPeriods, Tag 42862.
func (m NoUnderlyingStreams) SetNoUnderlyingDividendPeriods(f NoUnderlyingDividendPeriodsRepeatingGroup) {
	m.SetGroup(f)
}

// SetUnderlyingExtraordinaryDividendPartySide sets UnderlyingExtraordinaryDividendPartySide, Tag 42830.
func (m NoUnderlyingStreams) SetUnderlyingExtraordinaryDividendPartySide(v int) {
	m.Set(field.NewUnderlyingExtraordinaryDividendPartySide(v))
}

// SetUnderlyingExtraordinaryDividendAmountType sets UnderlyingExtraordinaryDividendAmountType, Tag 42831.
func (m NoUnderlyingStreams) SetUnderlyingExtraordinaryDividendAmountType(v int) {
	m.Set(field.NewUnderlyingExtraordinaryDividendAmountType(v))
}

// SetUnderlyingExtraordinaryDividendCurrency sets UnderlyingExtraordinaryDividendCurrency, Tag 42832.
func (m NoUnderlyingStreams) SetUnderlyingExtraordinaryDividendCurrency(v string) {
	m.Set(field.NewUnderlyingExtraordinaryDividendCurrency(v))
}

// SetUnderlyingExtraordinaryDividendDeterminationMethod sets UnderlyingExtraordinaryDividendDeterminationMethod, Tag 42833.
func (m NoUnderlyingStreams) SetUnderlyingExtraordinaryDividendDeterminationMethod(v string) {
	m.Set(field.NewUnderlyingExtraordinaryDividendDeterminationMethod(v))
}

// SetUnderlyingDividendFXTriggerDateRelativeTo sets UnderlyingDividendFXTriggerDateRelativeTo, Tag 42846.
func (m NoUnderlyingStreams) SetUnderlyingDividendFXTriggerDateRelativeTo(v int) {
	m.Set(field.NewUnderlyingDividendFXTriggerDateRelativeTo(v))
}

// SetUnderlyingDividendFXTriggerDateOffsetPeriod sets UnderlyingDividendFXTriggerDateOffsetPeriod, Tag 42847.
func (m NoUnderlyingStreams) SetUnderlyingDividendFXTriggerDateOffsetPeriod(v int) {
	m.Set(field.NewUnderlyingDividendFXTriggerDateOffsetPeriod(v))
}

// SetUnderlyingDividendFXTriggerDateOffsetUnit sets UnderlyingDividendFXTriggerDateOffsetUnit, Tag 42848.
func (m NoUnderlyingStreams) SetUnderlyingDividendFXTriggerDateOffsetUnit(v string) {
	m.Set(field.NewUnderlyingDividendFXTriggerDateOffsetUnit(v))
}

// SetUnderlyingDividendFXTriggerDateOffsetDayType sets UnderlyingDividendFXTriggerDateOffsetDayType, Tag 42849.
func (m NoUnderlyingStreams) SetUnderlyingDividendFXTriggerDateOffsetDayType(v int) {
	m.Set(field.NewUnderlyingDividendFXTriggerDateOffsetDayType(v))
}

// SetUnderlyingDividendFXTriggerDateUnadjusted sets UnderlyingDividendFXTriggerDateUnadjusted, Tag 42850.
func (m NoUnderlyingStreams) SetUnderlyingDividendFXTriggerDateUnadjusted(v string) {
	m.Set(field.NewUnderlyingDividendFXTriggerDateUnadjusted(v))
}

// SetUnderlyingDividendFXTriggerDateBusinessDayConvention sets UnderlyingDividendFXTriggerDateBusinessDayConvention, Tag 42851.
func (m NoUnderlyingStreams) SetUnderlyingDividendFXTriggerDateBusinessDayConvention(v int) {
	m.Set(field.NewUnderlyingDividendFXTriggerDateBusinessDayConvention(v))
}

// SetNoUnderlyingDividendFXTriggerDateBusinessCenters sets NoUnderlyingDividendFXTriggerDateBusinessCenters, Tag 42853.
func (m NoUnderlyingStreams) SetNoUnderlyingDividendFXTriggerDateBusinessCenters(f NoUnderlyingDividendFXTriggerDateBusinessCentersRepeatingGroup) {
	m.SetGroup(f)
}

// SetUnderlyingDividendFXTriggerDateAdjusted sets UnderlyingDividendFXTriggerDateAdjusted, Tag 42852.
func (m NoUnderlyingStreams) SetUnderlyingDividendFXTriggerDateAdjusted(v string) {
	m.Set(field.NewUnderlyingDividendFXTriggerDateAdjusted(v))
}

// SetUnderlyingDividendFloatingRateIndex sets UnderlyingDividendFloatingRateIndex, Tag 42801.
func (m NoUnderlyingStreams) SetUnderlyingDividendFloatingRateIndex(v string) {
	m.Set(field.NewUnderlyingDividendFloatingRateIndex(v))
}

// SetUnderlyingDividendFloatingRateIndexCurvePeriod sets UnderlyingDividendFloatingRateIndexCurvePeriod, Tag 42802.
func (m NoUnderlyingStreams) SetUnderlyingDividendFloatingRateIndexCurvePeriod(v int) {
	m.Set(field.NewUnderlyingDividendFloatingRateIndexCurvePeriod(v))
}

// SetUnderlyingDividendFloatingRateIndexCurveUnit sets UnderlyingDividendFloatingRateIndexCurveUnit, Tag 42803.
func (m NoUnderlyingStreams) SetUnderlyingDividendFloatingRateIndexCurveUnit(v string) {
	m.Set(field.NewUnderlyingDividendFloatingRateIndexCurveUnit(v))
}

// SetUnderlyingDividendFloatingRateMultiplier sets UnderlyingDividendFloatingRateMultiplier, Tag 42804.
func (m NoUnderlyingStreams) SetUnderlyingDividendFloatingRateMultiplier(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingDividendFloatingRateMultiplier(value, scale))
}

// SetUnderlyingDividendFloatingRateSpread sets UnderlyingDividendFloatingRateSpread, Tag 42805.
func (m NoUnderlyingStreams) SetUnderlyingDividendFloatingRateSpread(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingDividendFloatingRateSpread(value, scale))
}

// SetUnderlyingDividendFloatingRateSpreadPositionType sets UnderlyingDividendFloatingRateSpreadPositionType, Tag 42806.
func (m NoUnderlyingStreams) SetUnderlyingDividendFloatingRateSpreadPositionType(v int) {
	m.Set(field.NewUnderlyingDividendFloatingRateSpreadPositionType(v))
}

// SetUnderlyingDividendFloatingRateTreatment sets UnderlyingDividendFloatingRateTreatment, Tag 42807.
func (m NoUnderlyingStreams) SetUnderlyingDividendFloatingRateTreatment(v int) {
	m.Set(field.NewUnderlyingDividendFloatingRateTreatment(v))
}

// SetUnderlyingDividendCapRate sets UnderlyingDividendCapRate, Tag 42808.
func (m NoUnderlyingStreams) SetUnderlyingDividendCapRate(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingDividendCapRate(value, scale))
}

// SetUnderlyingDividendCapRateBuySide sets UnderlyingDividendCapRateBuySide, Tag 42809.
func (m NoUnderlyingStreams) SetUnderlyingDividendCapRateBuySide(v int) {
	m.Set(field.NewUnderlyingDividendCapRateBuySide(v))
}

// SetUnderlyingDividendCapRateSellSide sets UnderlyingDividendCapRateSellSide, Tag 42810.
func (m NoUnderlyingStreams) SetUnderlyingDividendCapRateSellSide(v int) {
	m.Set(field.NewUnderlyingDividendCapRateSellSide(v))
}

// SetUnderlyingDividendFloorRate sets UnderlyingDividendFloorRate, Tag 42811.
func (m NoUnderlyingStreams) SetUnderlyingDividendFloorRate(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingDividendFloorRate(value, scale))
}

// SetUnderlyingDividendFloorRateBuySide sets UnderlyingDividendFloorRateBuySide, Tag 42812.
func (m NoUnderlyingStreams) SetUnderlyingDividendFloorRateBuySide(v int) {
	m.Set(field.NewUnderlyingDividendFloorRateBuySide(v))
}

// SetUnderlyingDividendFloorRateSellSide sets UnderlyingDividendFloorRateSellSide, Tag 42813.
func (m NoUnderlyingStreams) SetUnderlyingDividendFloorRateSellSide(v int) {
	m.Set(field.NewUnderlyingDividendFloorRateSellSide(v))
}

// SetUnderlyingDividendInitialRate sets UnderlyingDividendInitialRate, Tag 42814.
func (m NoUnderlyingStreams) SetUnderlyingDividendInitialRate(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingDividendInitialRate(value, scale))
}

// SetUnderlyingDividendFinalRateRoundingDirection sets UnderlyingDividendFinalRateRoundingDirection, Tag 42815.
func (m NoUnderlyingStreams) SetUnderlyingDividendFinalRateRoundingDirection(v string) {
	m.Set(field.NewUnderlyingDividendFinalRateRoundingDirection(v))
}

// SetUnderlyingDividendFinalRatePrecision sets UnderlyingDividendFinalRatePrecision, Tag 42816.
func (m NoUnderlyingStreams) SetUnderlyingDividendFinalRatePrecision(v int) {
	m.Set(field.NewUnderlyingDividendFinalRatePrecision(v))
}

// SetUnderlyingDividendAveragingMethod sets UnderlyingDividendAveragingMethod, Tag 42817.
func (m NoUnderlyingStreams) SetUnderlyingDividendAveragingMethod(v int) {
	m.Set(field.NewUnderlyingDividendAveragingMethod(v))
}

// SetUnderlyingDividendNegativeRateTreatment sets UnderlyingDividendNegativeRateTreatment, Tag 42818.
func (m NoUnderlyingStreams) SetUnderlyingDividendNegativeRateTreatment(v int) {
	m.Set(field.NewUnderlyingDividendNegativeRateTreatment(v))
}

// SetUnderlyingDividendAccrualFixedRate sets UnderlyingDividendAccrualFixedRate, Tag 42834.
func (m NoUnderlyingStreams) SetUnderlyingDividendAccrualFixedRate(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingDividendAccrualFixedRate(value, scale))
}

// SetUnderlyingDividendAccrualPaymentDateRelativeTo sets UnderlyingDividendAccrualPaymentDateRelativeTo, Tag 42819.
func (m NoUnderlyingStreams) SetUnderlyingDividendAccrualPaymentDateRelativeTo(v int) {
	m.Set(field.NewUnderlyingDividendAccrualPaymentDateRelativeTo(v))
}

// SetUnderlyingDividendAccrualPaymentDateOffsetPeriod sets UnderlyingDividendAccrualPaymentDateOffsetPeriod, Tag 42820.
func (m NoUnderlyingStreams) SetUnderlyingDividendAccrualPaymentDateOffsetPeriod(v int) {
	m.Set(field.NewUnderlyingDividendAccrualPaymentDateOffsetPeriod(v))
}

// SetUnderlyingDividendAccrualPaymentDateOffsetUnit sets UnderlyingDividendAccrualPaymentDateOffsetUnit, Tag 42821.
func (m NoUnderlyingStreams) SetUnderlyingDividendAccrualPaymentDateOffsetUnit(v string) {
	m.Set(field.NewUnderlyingDividendAccrualPaymentDateOffsetUnit(v))
}

// SetUnderlyingDividendAccrualPaymentDateOffsetDayType sets UnderlyingDividendAccrualPaymentDateOffsetDayType, Tag 42822.
func (m NoUnderlyingStreams) SetUnderlyingDividendAccrualPaymentDateOffsetDayType(v int) {
	m.Set(field.NewUnderlyingDividendAccrualPaymentDateOffsetDayType(v))
}

// SetUnderlyingDividendAccrualPaymentDateUnadjusted sets UnderlyingDividendAccrualPaymentDateUnadjusted, Tag 42823.
func (m NoUnderlyingStreams) SetUnderlyingDividendAccrualPaymentDateUnadjusted(v string) {
	m.Set(field.NewUnderlyingDividendAccrualPaymentDateUnadjusted(v))
}

// SetUnderlyingDividendAccrualPaymentDateBusinessDayConvention sets UnderlyingDividendAccrualPaymentDateBusinessDayConvention, Tag 42824.
func (m NoUnderlyingStreams) SetUnderlyingDividendAccrualPaymentDateBusinessDayConvention(v int) {
	m.Set(field.NewUnderlyingDividendAccrualPaymentDateBusinessDayConvention(v))
}

// SetNoUnderlyingDividendAccrualPaymentDateBusinessCenters sets NoUnderlyingDividendAccrualPaymentDateBusinessCenters, Tag 42799.
func (m NoUnderlyingStreams) SetNoUnderlyingDividendAccrualPaymentDateBusinessCenters(f NoUnderlyingDividendAccrualPaymentDateBusinessCentersRepeatingGroup) {
	m.SetGroup(f)
}

// SetUnderlyingDividendAccrualPaymentDateAdjusted sets UnderlyingDividendAccrualPaymentDateAdjusted, Tag 42825.
func (m NoUnderlyingStreams) SetUnderlyingDividendAccrualPaymentDateAdjusted(v string) {
	m.Set(field.NewUnderlyingDividendAccrualPaymentDateAdjusted(v))
}

// SetUnderlyingDividendCompoundingMethod sets UnderlyingDividendCompoundingMethod, Tag 42835.
func (m NoUnderlyingStreams) SetUnderlyingDividendCompoundingMethod(v int) {
	m.Set(field.NewUnderlyingDividendCompoundingMethod(v))
}

// SetUnderlyingDividendNumOfIndexUnits sets UnderlyingDividendNumOfIndexUnits, Tag 42836.
func (m NoUnderlyingStreams) SetUnderlyingDividendNumOfIndexUnits(v int) {
	m.Set(field.NewUnderlyingDividendNumOfIndexUnits(v))
}

// SetUnderlyingDividendCashPercentage sets UnderlyingDividendCashPercentage, Tag 42837.
func (m NoUnderlyingStreams) SetUnderlyingDividendCashPercentage(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingDividendCashPercentage(value, scale))
}

// SetUnderlyingDividendCashEquivalentPercentage sets UnderlyingDividendCashEquivalentPercentage, Tag 42838.
func (m NoUnderlyingStreams) SetUnderlyingDividendCashEquivalentPercentage(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingDividendCashEquivalentPercentage(value, scale))
}

// SetUnderlyingNonCashDividendTreatment sets UnderlyingNonCashDividendTreatment, Tag 42839.
func (m NoUnderlyingStreams) SetUnderlyingNonCashDividendTreatment(v int) {
	m.Set(field.NewUnderlyingNonCashDividendTreatment(v))
}

// SetUnderlyingDividendComposition sets UnderlyingDividendComposition, Tag 42840.
func (m NoUnderlyingStreams) SetUnderlyingDividendComposition(v int) {
	m.Set(field.NewUnderlyingDividendComposition(v))
}

// SetUnderlyingSpecialDividendsIndicator sets UnderlyingSpecialDividendsIndicator, Tag 42841.
func (m NoUnderlyingStreams) SetUnderlyingSpecialDividendsIndicator(v bool) {
	m.Set(field.NewUnderlyingSpecialDividendsIndicator(v))
}

// SetUnderlyingMaterialDividendsIndicator sets UnderlyingMaterialDividendsIndicator, Tag 42842.
func (m NoUnderlyingStreams) SetUnderlyingMaterialDividendsIndicator(v bool) {
	m.Set(field.NewUnderlyingMaterialDividendsIndicator(v))
}

// SetUnderlyingOptionsExchangeDividendsIndicator sets UnderlyingOptionsExchangeDividendsIndicator, Tag 42843.
func (m NoUnderlyingStreams) SetUnderlyingOptionsExchangeDividendsIndicator(v bool) {
	m.Set(field.NewUnderlyingOptionsExchangeDividendsIndicator(v))
}

// SetUnderlyingAdditionalDividendsIndicator sets UnderlyingAdditionalDividendsIndicator, Tag 42844.
func (m NoUnderlyingStreams) SetUnderlyingAdditionalDividendsIndicator(v bool) {
	m.Set(field.NewUnderlyingAdditionalDividendsIndicator(v))
}

// SetUnderlyingAllDividendsIndicator sets UnderlyingAllDividendsIndicator, Tag 42845.
func (m NoUnderlyingStreams) SetUnderlyingAllDividendsIndicator(v bool) {
	m.Set(field.NewUnderlyingAllDividendsIndicator(v))
}

// SetUnderlyingReturnRateNotionalReset sets UnderlyingReturnRateNotionalReset, Tag 42963.
func (m NoUnderlyingStreams) SetUnderlyingReturnRateNotionalReset(v bool) {
	m.Set(field.NewUnderlyingReturnRateNotionalReset(v))
}

// SetNoUnderlyingReturnRates sets NoUnderlyingReturnRates, Tag 43034.
func (m NoUnderlyingStreams) SetNoUnderlyingReturnRates(f NoUnderlyingReturnRatesRepeatingGroup) {
	m.SetGroup(f)
}

// SetUnderlyingPaymentStreamLinkInitialLevel sets UnderlyingPaymentStreamLinkInitialLevel, Tag 42964.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamLinkInitialLevel(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingPaymentStreamLinkInitialLevel(value, scale))
}

// SetUnderlyingPaymentStreamLinkClosingLevelIndicator sets UnderlyingPaymentStreamLinkClosingLevelIndicator, Tag 42965.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamLinkClosingLevelIndicator(v bool) {
	m.Set(field.NewUnderlyingPaymentStreamLinkClosingLevelIndicator(v))
}

// SetUnderlyingPaymentStreamLinkExpiringLevelIndicator sets UnderlyingPaymentStreamLinkExpiringLevelIndicator, Tag 42966.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamLinkExpiringLevelIndicator(v bool) {
	m.Set(field.NewUnderlyingPaymentStreamLinkExpiringLevelIndicator(v))
}

// SetUnderlyingPaymentStreamLinkEstimatedTradingDays sets UnderlyingPaymentStreamLinkEstimatedTradingDays, Tag 42967.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamLinkEstimatedTradingDays(v int) {
	m.Set(field.NewUnderlyingPaymentStreamLinkEstimatedTradingDays(v))
}

// SetUnderlyingPaymentStreamLinkStrikePrice sets UnderlyingPaymentStreamLinkStrikePrice, Tag 42968.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamLinkStrikePrice(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingPaymentStreamLinkStrikePrice(value, scale))
}

// SetUnderlyingPaymentStreamLinkStrikePriceType sets UnderlyingPaymentStreamLinkStrikePriceType, Tag 42969.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamLinkStrikePriceType(v int) {
	m.Set(field.NewUnderlyingPaymentStreamLinkStrikePriceType(v))
}

// SetUnderlyingPaymentStreamLinkMaximumBoundary sets UnderlyingPaymentStreamLinkMaximumBoundary, Tag 42970.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamLinkMaximumBoundary(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingPaymentStreamLinkMaximumBoundary(value, scale))
}

// SetUnderlyingPaymentStreamLinkMinimumBoundary sets UnderlyingPaymentStreamLinkMinimumBoundary, Tag 42971.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamLinkMinimumBoundary(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingPaymentStreamLinkMinimumBoundary(value, scale))
}

// SetUnderlyingPaymentStreamLinkNumberOfDataSeries sets UnderlyingPaymentStreamLinkNumberOfDataSeries, Tag 42972.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamLinkNumberOfDataSeries(v int) {
	m.Set(field.NewUnderlyingPaymentStreamLinkNumberOfDataSeries(v))
}

// SetUnderlyingPaymentStreamVarianceUnadjustedCap sets UnderlyingPaymentStreamVarianceUnadjustedCap, Tag 42973.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamVarianceUnadjustedCap(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingPaymentStreamVarianceUnadjustedCap(value, scale))
}

// SetUnderlyingPaymentStreamRealizedVarianceMethod sets UnderlyingPaymentStreamRealizedVarianceMethod, Tag 42974.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamRealizedVarianceMethod(v int) {
	m.Set(field.NewUnderlyingPaymentStreamRealizedVarianceMethod(v))
}

// SetUnderlyingPaymentStreamDaysAdjustmentIndicator sets UnderlyingPaymentStreamDaysAdjustmentIndicator, Tag 42975.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamDaysAdjustmentIndicator(v bool) {
	m.Set(field.NewUnderlyingPaymentStreamDaysAdjustmentIndicator(v))
}

// SetUnderlyingPaymentStreamNearestExchangeContractRefID sets UnderlyingPaymentStreamNearestExchangeContractRefID, Tag 42976.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamNearestExchangeContractRefID(v string) {
	m.Set(field.NewUnderlyingPaymentStreamNearestExchangeContractRefID(v))
}

// SetUnderlyingPaymentStreamVegaNotionalAmount sets UnderlyingPaymentStreamVegaNotionalAmount, Tag 42977.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamVegaNotionalAmount(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingPaymentStreamVegaNotionalAmount(value, scale))
}

// SetUnderlyingPaymentStreamRateIndexID sets UnderlyingPaymentStreamRateIndexID, Tag 43092.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamRateIndexID(v string) {
	m.Set(field.NewUnderlyingPaymentStreamRateIndexID(v))
}

// SetUnderlyingPaymentStreamRateIndexIDSource sets UnderlyingPaymentStreamRateIndexIDSource, Tag 43093.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamRateIndexIDSource(v string) {
	m.Set(field.NewUnderlyingPaymentStreamRateIndexIDSource(v))
}

// SetUnderlyingPaymentStreamNonDeliverableRefCurrency sets UnderlyingPaymentStreamNonDeliverableRefCurrency, Tag 40648.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamNonDeliverableRefCurrency(v string) {
	m.Set(field.NewUnderlyingPaymentStreamNonDeliverableRefCurrency(v))
}

// SetUnderlyingPaymentStreamNonDeliverableFixingDatesBusinessDayConvention sets UnderlyingPaymentStreamNonDeliverableFixingDatesBusinessDayConvention, Tag 40649.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamNonDeliverableFixingDatesBusinessDayConvention(v int) {
	m.Set(field.NewUnderlyingPaymentStreamNonDeliverableFixingDatesBusinessDayConvention(v))
}

// SetNoUnderlyingPaymentStreamNonDeliverableFixingDatesBusinessCenters sets NoUnderlyingPaymentStreamNonDeliverableFixingDatesBusinessCenters, Tag 40968.
func (m NoUnderlyingStreams) SetNoUnderlyingPaymentStreamNonDeliverableFixingDatesBusinessCenters(f NoUnderlyingPaymentStreamNonDeliverableFixingDatesBusinessCentersRepeatingGroup) {
	m.SetGroup(f)
}

// SetUnderlyingPaymentStreamNonDeliverableFixingDatesRelativeTo sets UnderlyingPaymentStreamNonDeliverableFixingDatesRelativeTo, Tag 40651.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamNonDeliverableFixingDatesRelativeTo(v int) {
	m.Set(field.NewUnderlyingPaymentStreamNonDeliverableFixingDatesRelativeTo(v))
}

// SetUnderlyingPaymentStreamNonDeliverableFixingDatesOffsetPeriod sets UnderlyingPaymentStreamNonDeliverableFixingDatesOffsetPeriod, Tag 40652.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamNonDeliverableFixingDatesOffsetPeriod(v int) {
	m.Set(field.NewUnderlyingPaymentStreamNonDeliverableFixingDatesOffsetPeriod(v))
}

// SetUnderlyingPaymentStreamNonDeliverableFixingDatesOffsetUnit sets UnderlyingPaymentStreamNonDeliverableFixingDatesOffsetUnit, Tag 40653.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamNonDeliverableFixingDatesOffsetUnit(v string) {
	m.Set(field.NewUnderlyingPaymentStreamNonDeliverableFixingDatesOffsetUnit(v))
}

// SetUnderlyingPaymentStreamNonDeliverableFixingDatesOffsetDayType sets UnderlyingPaymentStreamNonDeliverableFixingDatesOffsetDayType, Tag 40654.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamNonDeliverableFixingDatesOffsetDayType(v int) {
	m.Set(field.NewUnderlyingPaymentStreamNonDeliverableFixingDatesOffsetDayType(v))
}

// SetUnderlyingPaymentStreamNonDeliverableSettlRateSource sets UnderlyingPaymentStreamNonDeliverableSettlRateSource, Tag 40661.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamNonDeliverableSettlRateSource(v int) {
	m.Set(field.NewUnderlyingPaymentStreamNonDeliverableSettlRateSource(v))
}

// SetUnderlyingPaymentStreamNonDeliverableSettlReferencePage sets UnderlyingPaymentStreamNonDeliverableSettlReferencePage, Tag 40824.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamNonDeliverableSettlReferencePage(v string) {
	m.Set(field.NewUnderlyingPaymentStreamNonDeliverableSettlReferencePage(v))
}

// SetNoUnderlyingNonDeliverableFixingDates sets NoUnderlyingNonDeliverableFixingDates, Tag 40656.
func (m NoUnderlyingStreams) SetNoUnderlyingNonDeliverableFixingDates(f NoUnderlyingNonDeliverableFixingDatesRepeatingGroup) {
	m.SetGroup(f)
}

// SetNoUnderlyingSettlRateFallbacks sets NoUnderlyingSettlRateFallbacks, Tag 40659.
func (m NoUnderlyingStreams) SetNoUnderlyingSettlRateFallbacks(f NoUnderlyingSettlRateFallbacksRepeatingGroup) {
	m.SetGroup(f)
}

// SetUnderlyingPaymentStreamFlatRateIndicator sets UnderlyingPaymentStreamFlatRateIndicator, Tag 41897.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamFlatRateIndicator(v bool) {
	m.Set(field.NewUnderlyingPaymentStreamFlatRateIndicator(v))
}

// SetUnderlyingPaymentStreamFlatRateAmount sets UnderlyingPaymentStreamFlatRateAmount, Tag 41898.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamFlatRateAmount(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingPaymentStreamFlatRateAmount(value, scale))
}

// SetUnderlyingPaymentStreamFlatRateCurrency sets UnderlyingPaymentStreamFlatRateCurrency, Tag 41899.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamFlatRateCurrency(v string) {
	m.Set(field.NewUnderlyingPaymentStreamFlatRateCurrency(v))
}

// SetUnderlyingPaymentStreamMaximumPaymentAmount sets UnderlyingPaymentStreamMaximumPaymentAmount, Tag 41900.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamMaximumPaymentAmount(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingPaymentStreamMaximumPaymentAmount(value, scale))
}

// SetUnderlyingPaymentStreamMaximumPaymentCurrency sets UnderlyingPaymentStreamMaximumPaymentCurrency, Tag 41901.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamMaximumPaymentCurrency(v string) {
	m.Set(field.NewUnderlyingPaymentStreamMaximumPaymentCurrency(v))
}

// SetUnderlyingPaymentStreamMaximumTransactionAmount sets UnderlyingPaymentStreamMaximumTransactionAmount, Tag 41902.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamMaximumTransactionAmount(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingPaymentStreamMaximumTransactionAmount(value, scale))
}

// SetUnderlyingPaymentStreamMaximumTransactionCurrency sets UnderlyingPaymentStreamMaximumTransactionCurrency, Tag 41903.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamMaximumTransactionCurrency(v string) {
	m.Set(field.NewUnderlyingPaymentStreamMaximumTransactionCurrency(v))
}

// SetUnderlyingPaymentStreamCashSettlIndicator sets UnderlyingPaymentStreamCashSettlIndicator, Tag 42895.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamCashSettlIndicator(v bool) {
	m.Set(field.NewUnderlyingPaymentStreamCashSettlIndicator(v))
}

// SetUnderlyingPaymentStreamCompoundingXIDRef sets UnderlyingPaymentStreamCompoundingXIDRef, Tag 42896.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamCompoundingXIDRef(v string) {
	m.Set(field.NewUnderlyingPaymentStreamCompoundingXIDRef(v))
}

// SetUnderlyingPaymentStreamCompoundingSpread sets UnderlyingPaymentStreamCompoundingSpread, Tag 42897.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamCompoundingSpread(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingPaymentStreamCompoundingSpread(value, scale))
}

// SetUnderlyingPaymentStreamInterpolationMethod sets UnderlyingPaymentStreamInterpolationMethod, Tag 42898.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamInterpolationMethod(v int) {
	m.Set(field.NewUnderlyingPaymentStreamInterpolationMethod(v))
}

// SetUnderlyingPaymentStreamInterpolationPeriod sets UnderlyingPaymentStreamInterpolationPeriod, Tag 42899.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamInterpolationPeriod(v int) {
	m.Set(field.NewUnderlyingPaymentStreamInterpolationPeriod(v))
}

// SetUnderlyingPaymentStreamCompoundingFixedRate sets UnderlyingPaymentStreamCompoundingFixedRate, Tag 42900.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamCompoundingFixedRate(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingPaymentStreamCompoundingFixedRate(value, scale))
}

// SetUnderlyingPaymentStreamCompoundingRateIndex sets UnderlyingPaymentStreamCompoundingRateIndex, Tag 42923.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamCompoundingRateIndex(v string) {
	m.Set(field.NewUnderlyingPaymentStreamCompoundingRateIndex(v))
}

// SetUnderlyingPaymentStreamCompoundingRateIndexCurvePeriod sets UnderlyingPaymentStreamCompoundingRateIndexCurvePeriod, Tag 42924.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamCompoundingRateIndexCurvePeriod(v int) {
	m.Set(field.NewUnderlyingPaymentStreamCompoundingRateIndexCurvePeriod(v))
}

// SetUnderlyingPaymentStreamCompoundingRateIndexCurveUnit sets UnderlyingPaymentStreamCompoundingRateIndexCurveUnit, Tag 42925.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamCompoundingRateIndexCurveUnit(v string) {
	m.Set(field.NewUnderlyingPaymentStreamCompoundingRateIndexCurveUnit(v))
}

// SetUnderlyingPaymentStreamCompoundingRateMultiplier sets UnderlyingPaymentStreamCompoundingRateMultiplier, Tag 42926.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamCompoundingRateMultiplier(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingPaymentStreamCompoundingRateMultiplier(value, scale))
}

// SetUnderlyingPaymentStreamCompoundingRateSpread sets UnderlyingPaymentStreamCompoundingRateSpread, Tag 42927.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamCompoundingRateSpread(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingPaymentStreamCompoundingRateSpread(value, scale))
}

// SetUnderlyingPaymentStreamCompoundingRateSpreadPositionType sets UnderlyingPaymentStreamCompoundingRateSpreadPositionType, Tag 42928.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamCompoundingRateSpreadPositionType(v int) {
	m.Set(field.NewUnderlyingPaymentStreamCompoundingRateSpreadPositionType(v))
}

// SetUnderlyingPaymentStreamCompoundingRateTreatment sets UnderlyingPaymentStreamCompoundingRateTreatment, Tag 42929.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamCompoundingRateTreatment(v int) {
	m.Set(field.NewUnderlyingPaymentStreamCompoundingRateTreatment(v))
}

// SetUnderlyingPaymentStreamCompoundingCapRate sets UnderlyingPaymentStreamCompoundingCapRate, Tag 42930.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamCompoundingCapRate(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingPaymentStreamCompoundingCapRate(value, scale))
}

// SetUnderlyingPaymentStreamCompoundingCapRateBuySide sets UnderlyingPaymentStreamCompoundingCapRateBuySide, Tag 42931.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamCompoundingCapRateBuySide(v int) {
	m.Set(field.NewUnderlyingPaymentStreamCompoundingCapRateBuySide(v))
}

// SetUnderlyingPaymentStreamCompoundingCapRateSellSide sets UnderlyingPaymentStreamCompoundingCapRateSellSide, Tag 42932.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamCompoundingCapRateSellSide(v int) {
	m.Set(field.NewUnderlyingPaymentStreamCompoundingCapRateSellSide(v))
}

// SetUnderlyingPaymentStreamCompoundingFloorRate sets UnderlyingPaymentStreamCompoundingFloorRate, Tag 42933.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamCompoundingFloorRate(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingPaymentStreamCompoundingFloorRate(value, scale))
}

// SetUnderlyingPaymentStreamCompoundingFloorRateBuySide sets UnderlyingPaymentStreamCompoundingFloorRateBuySide, Tag 42934.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamCompoundingFloorRateBuySide(v int) {
	m.Set(field.NewUnderlyingPaymentStreamCompoundingFloorRateBuySide(v))
}

// SetUnderlyingPaymentStreamCompoundingFloorRateSellSide sets UnderlyingPaymentStreamCompoundingFloorRateSellSide, Tag 42935.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamCompoundingFloorRateSellSide(v int) {
	m.Set(field.NewUnderlyingPaymentStreamCompoundingFloorRateSellSide(v))
}

// SetUnderlyingPaymentStreamCompoundingInitialRate sets UnderlyingPaymentStreamCompoundingInitialRate, Tag 42936.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamCompoundingInitialRate(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingPaymentStreamCompoundingInitialRate(value, scale))
}

// SetUnderlyingPaymentStreamCompoundingFinalRateRoundingDirection sets UnderlyingPaymentStreamCompoundingFinalRateRoundingDirection, Tag 42937.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamCompoundingFinalRateRoundingDirection(v string) {
	m.Set(field.NewUnderlyingPaymentStreamCompoundingFinalRateRoundingDirection(v))
}

// SetUnderlyingPaymentStreamCompoundingFinalRatePrecision sets UnderlyingPaymentStreamCompoundingFinalRatePrecision, Tag 42938.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamCompoundingFinalRatePrecision(v int) {
	m.Set(field.NewUnderlyingPaymentStreamCompoundingFinalRatePrecision(v))
}

// SetUnderlyingPaymentStreamCompoundingAveragingMethod sets UnderlyingPaymentStreamCompoundingAveragingMethod, Tag 42939.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamCompoundingAveragingMethod(v int) {
	m.Set(field.NewUnderlyingPaymentStreamCompoundingAveragingMethod(v))
}

// SetUnderlyingPaymentStreamCompoundingNegativeRateTreatment sets UnderlyingPaymentStreamCompoundingNegativeRateTreatment, Tag 42940.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamCompoundingNegativeRateTreatment(v int) {
	m.Set(field.NewUnderlyingPaymentStreamCompoundingNegativeRateTreatment(v))
}

// SetUnderlyingPaymentStreamCompoundingDatesBusinessDayConvention sets UnderlyingPaymentStreamCompoundingDatesBusinessDayConvention, Tag 42904.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamCompoundingDatesBusinessDayConvention(v int) {
	m.Set(field.NewUnderlyingPaymentStreamCompoundingDatesBusinessDayConvention(v))
}

// SetNoUnderlyingPaymentStreamCompoundingDatesBusinessCenters sets NoUnderlyingPaymentStreamCompoundingDatesBusinessCenters, Tag 42915.
func (m NoUnderlyingStreams) SetNoUnderlyingPaymentStreamCompoundingDatesBusinessCenters(f NoUnderlyingPaymentStreamCompoundingDatesBusinessCentersRepeatingGroup) {
	m.SetGroup(f)
}

// SetNoUnderlyingPaymentStreamCompoundingDates sets NoUnderlyingPaymentStreamCompoundingDates, Tag 42901.
func (m NoUnderlyingStreams) SetNoUnderlyingPaymentStreamCompoundingDates(f NoUnderlyingPaymentStreamCompoundingDatesRepeatingGroup) {
	m.SetGroup(f)
}

// SetUnderlyingPaymentStreamCompoundingDatesRelativeTo sets UnderlyingPaymentStreamCompoundingDatesRelativeTo, Tag 42905.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamCompoundingDatesRelativeTo(v int) {
	m.Set(field.NewUnderlyingPaymentStreamCompoundingDatesRelativeTo(v))
}

// SetUnderlyingPaymentStreamCompoundingDatesOffsetPeriod sets UnderlyingPaymentStreamCompoundingDatesOffsetPeriod, Tag 42906.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamCompoundingDatesOffsetPeriod(v int) {
	m.Set(field.NewUnderlyingPaymentStreamCompoundingDatesOffsetPeriod(v))
}

// SetUnderlyingPaymentStreamCompoundingDatesOffsetUnit sets UnderlyingPaymentStreamCompoundingDatesOffsetUnit, Tag 42907.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamCompoundingDatesOffsetUnit(v string) {
	m.Set(field.NewUnderlyingPaymentStreamCompoundingDatesOffsetUnit(v))
}

// SetUnderlyingPaymentStreamCompoundingDatesOffsetDayType sets UnderlyingPaymentStreamCompoundingDatesOffsetDayType, Tag 42908.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamCompoundingDatesOffsetDayType(v int) {
	m.Set(field.NewUnderlyingPaymentStreamCompoundingDatesOffsetDayType(v))
}

// SetUnderlyingPaymentStreamCompoundingPeriodSkip sets UnderlyingPaymentStreamCompoundingPeriodSkip, Tag 42909.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamCompoundingPeriodSkip(v int) {
	m.Set(field.NewUnderlyingPaymentStreamCompoundingPeriodSkip(v))
}

// SetUnderlyingPaymentStreamCompoundingStartDateUnadjusted sets UnderlyingPaymentStreamCompoundingStartDateUnadjusted, Tag 42941.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamCompoundingStartDateUnadjusted(v string) {
	m.Set(field.NewUnderlyingPaymentStreamCompoundingStartDateUnadjusted(v))
}

// SetUnderlyingPaymentStreamCompoundingStartDateRelativeTo sets UnderlyingPaymentStreamCompoundingStartDateRelativeTo, Tag 42942.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamCompoundingStartDateRelativeTo(v int) {
	m.Set(field.NewUnderlyingPaymentStreamCompoundingStartDateRelativeTo(v))
}

// SetUnderlyingPaymentStreamCompoundingStartDateOffsetPeriod sets UnderlyingPaymentStreamCompoundingStartDateOffsetPeriod, Tag 42943.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamCompoundingStartDateOffsetPeriod(v int) {
	m.Set(field.NewUnderlyingPaymentStreamCompoundingStartDateOffsetPeriod(v))
}

// SetUnderlyingPaymentStreamCompoundingStartDateOffsetUnit sets UnderlyingPaymentStreamCompoundingStartDateOffsetUnit, Tag 42944.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamCompoundingStartDateOffsetUnit(v string) {
	m.Set(field.NewUnderlyingPaymentStreamCompoundingStartDateOffsetUnit(v))
}

// SetUnderlyingPaymentStreamCompoundingStartDateOffsetDayType sets UnderlyingPaymentStreamCompoundingStartDateOffsetDayType, Tag 42945.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamCompoundingStartDateOffsetDayType(v int) {
	m.Set(field.NewUnderlyingPaymentStreamCompoundingStartDateOffsetDayType(v))
}

// SetUnderlyingPaymentStreamCompoundingStartDateAdjusted sets UnderlyingPaymentStreamCompoundingStartDateAdjusted, Tag 42946.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamCompoundingStartDateAdjusted(v string) {
	m.Set(field.NewUnderlyingPaymentStreamCompoundingStartDateAdjusted(v))
}

// SetUnderlyingPaymentStreamCompoundingEndDateUnadjusted sets UnderlyingPaymentStreamCompoundingEndDateUnadjusted, Tag 42917.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamCompoundingEndDateUnadjusted(v string) {
	m.Set(field.NewUnderlyingPaymentStreamCompoundingEndDateUnadjusted(v))
}

// SetUnderlyingPaymentStreamCompoundingEndDateRelativeTo sets UnderlyingPaymentStreamCompoundingEndDateRelativeTo, Tag 42918.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamCompoundingEndDateRelativeTo(v int) {
	m.Set(field.NewUnderlyingPaymentStreamCompoundingEndDateRelativeTo(v))
}

// SetUnderlyingPaymentStreamCompoundingEndDateOffsetPeriod sets UnderlyingPaymentStreamCompoundingEndDateOffsetPeriod, Tag 42919.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamCompoundingEndDateOffsetPeriod(v int) {
	m.Set(field.NewUnderlyingPaymentStreamCompoundingEndDateOffsetPeriod(v))
}

// SetUnderlyingPaymentStreamCompoundingEndDateOffsetUnit sets UnderlyingPaymentStreamCompoundingEndDateOffsetUnit, Tag 42920.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamCompoundingEndDateOffsetUnit(v string) {
	m.Set(field.NewUnderlyingPaymentStreamCompoundingEndDateOffsetUnit(v))
}

// SetUnderlyingPaymentStreamCompoundingEndDateOffsetDayType sets UnderlyingPaymentStreamCompoundingEndDateOffsetDayType, Tag 42921.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamCompoundingEndDateOffsetDayType(v int) {
	m.Set(field.NewUnderlyingPaymentStreamCompoundingEndDateOffsetDayType(v))
}

// SetUnderlyingPaymentStreamCompoundingEndDateAdjusted sets UnderlyingPaymentStreamCompoundingEndDateAdjusted, Tag 42922.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamCompoundingEndDateAdjusted(v string) {
	m.Set(field.NewUnderlyingPaymentStreamCompoundingEndDateAdjusted(v))
}

// SetUnderlyingPaymentStreamCompoundingFrequencyPeriod sets UnderlyingPaymentStreamCompoundingFrequencyPeriod, Tag 42910.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamCompoundingFrequencyPeriod(v int) {
	m.Set(field.NewUnderlyingPaymentStreamCompoundingFrequencyPeriod(v))
}

// SetUnderlyingPaymentStreamCompoundingFrequencyUnit sets UnderlyingPaymentStreamCompoundingFrequencyUnit, Tag 42911.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamCompoundingFrequencyUnit(v string) {
	m.Set(field.NewUnderlyingPaymentStreamCompoundingFrequencyUnit(v))
}

// SetUnderlyingPaymentStreamCompoundingRollConvention sets UnderlyingPaymentStreamCompoundingRollConvention, Tag 42912.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamCompoundingRollConvention(v string) {
	m.Set(field.NewUnderlyingPaymentStreamCompoundingRollConvention(v))
}

// SetUnderlyingPaymentStreamBoundsFirstDateUnadjusted sets UnderlyingPaymentStreamBoundsFirstDateUnadjusted, Tag 42913.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamBoundsFirstDateUnadjusted(v string) {
	m.Set(field.NewUnderlyingPaymentStreamBoundsFirstDateUnadjusted(v))
}

// SetUnderlyingPaymentStreamBoundsLastDateUnadjusted sets UnderlyingPaymentStreamBoundsLastDateUnadjusted, Tag 42914.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamBoundsLastDateUnadjusted(v string) {
	m.Set(field.NewUnderlyingPaymentStreamBoundsLastDateUnadjusted(v))
}

// SetUnderlyingPaymentStreamOtherDayCount sets UnderlyingPaymentStreamOtherDayCount, Tag 43107.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamOtherDayCount(v string) {
	m.Set(field.NewUnderlyingPaymentStreamOtherDayCount(v))
}

// SetNoUnderlyingPaymentSchedules sets NoUnderlyingPaymentSchedules, Tag 40664.
func (m NoUnderlyingStreams) SetNoUnderlyingPaymentSchedules(f NoUnderlyingPaymentSchedulesRepeatingGroup) {
	m.SetGroup(f)
}

// SetNoUnderlyingPaymentStubs sets NoUnderlyingPaymentStubs, Tag 40708.
func (m NoUnderlyingStreams) SetNoUnderlyingPaymentStubs(f NoUnderlyingPaymentStubsRepeatingGroup) {
	m.SetGroup(f)
}

// SetUnderlyingStreamText sets UnderlyingStreamText, Tag 40547.
func (m NoUnderlyingStreams) SetUnderlyingStreamText(v string) {
	m.Set(field.NewUnderlyingStreamText(v))
}

// SetEncodedUnderlyingStreamTextLen sets EncodedUnderlyingStreamTextLen, Tag 40988.
func (m NoUnderlyingStreams) SetEncodedUnderlyingStreamTextLen(v int) {
	m.Set(field.NewEncodedUnderlyingStreamTextLen(v))
}

// SetEncodedUnderlyingStreamText sets EncodedUnderlyingStreamText, Tag 40989.
func (m NoUnderlyingStreams) SetEncodedUnderlyingStreamText(v string) {
	m.Set(field.NewEncodedUnderlyingStreamText(v))
}

// SetUnderlyingStreamXID sets UnderlyingStreamXID, Tag 42016.
func (m NoUnderlyingStreams) SetUnderlyingStreamXID(v string) {
	m.Set(field.NewUnderlyingStreamXID(v))
}

// SetUnderlyingStreamNotionalXIDRef sets UnderlyingStreamNotionalXIDRef, Tag 42018.
func (m NoUnderlyingStreams) SetUnderlyingStreamNotionalXIDRef(v string) {
	m.Set(field.NewUnderlyingStreamNotionalXIDRef(v))
}

// SetUnderlyingStreamNotionalFrequencyPeriod sets UnderlyingStreamNotionalFrequencyPeriod, Tag 42019.
func (m NoUnderlyingStreams) SetUnderlyingStreamNotionalFrequencyPeriod(v int) {
	m.Set(field.NewUnderlyingStreamNotionalFrequencyPeriod(v))
}

// SetUnderlyingStreamNotionalFrequencyUnit sets UnderlyingStreamNotionalFrequencyUnit, Tag 42020.
func (m NoUnderlyingStreams) SetUnderlyingStreamNotionalFrequencyUnit(v string) {
	m.Set(field.NewUnderlyingStreamNotionalFrequencyUnit(v))
}

// SetUnderlyingStreamNotionalCommodityFrequency sets UnderlyingStreamNotionalCommodityFrequency, Tag 42021.
func (m NoUnderlyingStreams) SetUnderlyingStreamNotionalCommodityFrequency(v int) {
	m.Set(field.NewUnderlyingStreamNotionalCommodityFrequency(v))
}

// SetUnderlyingStreamNotionalUnitOfMeasure sets UnderlyingStreamNotionalUnitOfMeasure, Tag 42022.
func (m NoUnderlyingStreams) SetUnderlyingStreamNotionalUnitOfMeasure(v string) {
	m.Set(field.NewUnderlyingStreamNotionalUnitOfMeasure(v))
}

// SetUnderlyingStreamTotalNotional sets UnderlyingStreamTotalNotional, Tag 42023.
func (m NoUnderlyingStreams) SetUnderlyingStreamTotalNotional(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingStreamTotalNotional(value, scale))
}

// SetUnderlyingStreamTotalNotionalUnitOfMeasure sets UnderlyingStreamTotalNotionalUnitOfMeasure, Tag 42024.
func (m NoUnderlyingStreams) SetUnderlyingStreamTotalNotionalUnitOfMeasure(v string) {
	m.Set(field.NewUnderlyingStreamTotalNotionalUnitOfMeasure(v))
}

// SetUnderlyingStreamCommodityBase sets UnderlyingStreamCommodityBase, Tag 41964.
func (m NoUnderlyingStreams) SetUnderlyingStreamCommodityBase(v string) {
	m.Set(field.NewUnderlyingStreamCommodityBase(v))
}

// SetUnderlyingStreamCommodityType sets UnderlyingStreamCommodityType, Tag 41965.
func (m NoUnderlyingStreams) SetUnderlyingStreamCommodityType(v string) {
	m.Set(field.NewUnderlyingStreamCommodityType(v))
}

// SetUnderlyingStreamCommoditySecurityID sets UnderlyingStreamCommoditySecurityID, Tag 41966.
func (m NoUnderlyingStreams) SetUnderlyingStreamCommoditySecurityID(v string) {
	m.Set(field.NewUnderlyingStreamCommoditySecurityID(v))
}

// SetUnderlyingStreamCommoditySecurityIDSource sets UnderlyingStreamCommoditySecurityIDSource, Tag 41967.
func (m NoUnderlyingStreams) SetUnderlyingStreamCommoditySecurityIDSource(v string) {
	m.Set(field.NewUnderlyingStreamCommoditySecurityIDSource(v))
}

// SetNoUnderlyingStreamCommodityAltIDs sets NoUnderlyingStreamCommodityAltIDs, Tag 41990.
func (m NoUnderlyingStreams) SetNoUnderlyingStreamCommodityAltIDs(f NoUnderlyingStreamCommodityAltIDsRepeatingGroup) {
	m.SetGroup(f)
}

// SetUnderlyingStreamCommodityDesc sets UnderlyingStreamCommodityDesc, Tag 41968.
func (m NoUnderlyingStreams) SetUnderlyingStreamCommodityDesc(v string) {
	m.Set(field.NewUnderlyingStreamCommodityDesc(v))
}

// SetEncodedUnderlyingStreamCommodityDescLen sets EncodedUnderlyingStreamCommodityDescLen, Tag 41969.
func (m NoUnderlyingStreams) SetEncodedUnderlyingStreamCommodityDescLen(v int) {
	m.Set(field.NewEncodedUnderlyingStreamCommodityDescLen(v))
}

// SetEncodedUnderlyingStreamCommodityDesc sets EncodedUnderlyingStreamCommodityDesc, Tag 41970.
func (m NoUnderlyingStreams) SetEncodedUnderlyingStreamCommodityDesc(v string) {
	m.Set(field.NewEncodedUnderlyingStreamCommodityDesc(v))
}

// SetNoUnderlyingStreamAssetAttributes sets NoUnderlyingStreamAssetAttributes, Tag 41800.
func (m NoUnderlyingStreams) SetNoUnderlyingStreamAssetAttributes(f NoUnderlyingStreamAssetAttributesRepeatingGroup) {
	m.SetGroup(f)
}

// SetUnderlyingStreamCommodityUnitOfMeasure sets UnderlyingStreamCommodityUnitOfMeasure, Tag 41971.
func (m NoUnderlyingStreams) SetUnderlyingStreamCommodityUnitOfMeasure(v string) {
	m.Set(field.NewUnderlyingStreamCommodityUnitOfMeasure(v))
}

// SetUnderlyingStreamCommodityCurrency sets UnderlyingStreamCommodityCurrency, Tag 41972.
func (m NoUnderlyingStreams) SetUnderlyingStreamCommodityCurrency(v string) {
	m.Set(field.NewUnderlyingStreamCommodityCurrency(v))
}

// SetUnderlyingStreamCommodityExchange sets UnderlyingStreamCommodityExchange, Tag 41973.
func (m NoUnderlyingStreams) SetUnderlyingStreamCommodityExchange(v string) {
	m.Set(field.NewUnderlyingStreamCommodityExchange(v))
}

// SetUnderlyingStreamCommodityRateSource sets UnderlyingStreamCommodityRateSource, Tag 41974.
func (m NoUnderlyingStreams) SetUnderlyingStreamCommodityRateSource(v int) {
	m.Set(field.NewUnderlyingStreamCommodityRateSource(v))
}

// SetUnderlyingStreamCommodityRateReferencePage sets UnderlyingStreamCommodityRateReferencePage, Tag 41975.
func (m NoUnderlyingStreams) SetUnderlyingStreamCommodityRateReferencePage(v string) {
	m.Set(field.NewUnderlyingStreamCommodityRateReferencePage(v))
}

// SetUnderlyingStreamCommodityRateReferencePageHeading sets UnderlyingStreamCommodityRateReferencePageHeading, Tag 41976.
func (m NoUnderlyingStreams) SetUnderlyingStreamCommodityRateReferencePageHeading(v string) {
	m.Set(field.NewUnderlyingStreamCommodityRateReferencePageHeading(v))
}

// SetUnderlyingStreamDataProvider sets UnderlyingStreamDataProvider, Tag 41977.
func (m NoUnderlyingStreams) SetUnderlyingStreamDataProvider(v string) {
	m.Set(field.NewUnderlyingStreamDataProvider(v))
}

// SetNoUnderlyingStreamCommodityDataSources sets NoUnderlyingStreamCommodityDataSources, Tag 41993.
func (m NoUnderlyingStreams) SetNoUnderlyingStreamCommodityDataSources(f NoUnderlyingStreamCommodityDataSourcesRepeatingGroup) {
	m.SetGroup(f)
}

// SetUnderlyingStreamCommodityPricingType sets UnderlyingStreamCommodityPricingType, Tag 41978.
func (m NoUnderlyingStreams) SetUnderlyingStreamCommodityPricingType(v string) {
	m.Set(field.NewUnderlyingStreamCommodityPricingType(v))
}

// SetUnderlyingStreamCommodityNearbySettlDayPeriod sets UnderlyingStreamCommodityNearbySettlDayPeriod, Tag 41979.
func (m NoUnderlyingStreams) SetUnderlyingStreamCommodityNearbySettlDayPeriod(v int) {
	m.Set(field.NewUnderlyingStreamCommodityNearbySettlDayPeriod(v))
}

// SetUnderlyingStreamCommodityNearbySettlDayUnit sets UnderlyingStreamCommodityNearbySettlDayUnit, Tag 41980.
func (m NoUnderlyingStreams) SetUnderlyingStreamCommodityNearbySettlDayUnit(v string) {
	m.Set(field.NewUnderlyingStreamCommodityNearbySettlDayUnit(v))
}

// SetUnderlyingStreamCommoditySettlDateUnadjusted sets UnderlyingStreamCommoditySettlDateUnadjusted, Tag 41981.
func (m NoUnderlyingStreams) SetUnderlyingStreamCommoditySettlDateUnadjusted(v string) {
	m.Set(field.NewUnderlyingStreamCommoditySettlDateUnadjusted(v))
}

// SetUnderlyingStreamCommoditySettlDateBusinessDayConvention sets UnderlyingStreamCommoditySettlDateBusinessDayConvention, Tag 41982.
func (m NoUnderlyingStreams) SetUnderlyingStreamCommoditySettlDateBusinessDayConvention(v int) {
	m.Set(field.NewUnderlyingStreamCommoditySettlDateBusinessDayConvention(v))
}

// SetNoUnderlyingStreamCommoditySettlBusinessCenters sets NoUnderlyingStreamCommoditySettlBusinessCenters, Tag 41962.
func (m NoUnderlyingStreams) SetNoUnderlyingStreamCommoditySettlBusinessCenters(f NoUnderlyingStreamCommoditySettlBusinessCentersRepeatingGroup) {
	m.SetGroup(f)
}

// SetUnderlyingStreamCommoditySettlDateAdjusted sets UnderlyingStreamCommoditySettlDateAdjusted, Tag 41983.
func (m NoUnderlyingStreams) SetUnderlyingStreamCommoditySettlDateAdjusted(v string) {
	m.Set(field.NewUnderlyingStreamCommoditySettlDateAdjusted(v))
}

// SetUnderlyingStreamCommoditySettlMonth sets UnderlyingStreamCommoditySettlMonth, Tag 41984.
func (m NoUnderlyingStreams) SetUnderlyingStreamCommoditySettlMonth(v int) {
	m.Set(field.NewUnderlyingStreamCommoditySettlMonth(v))
}

// SetUnderlyingStreamCommoditySettlDateRollPeriod sets UnderlyingStreamCommoditySettlDateRollPeriod, Tag 41985.
func (m NoUnderlyingStreams) SetUnderlyingStreamCommoditySettlDateRollPeriod(v int) {
	m.Set(field.NewUnderlyingStreamCommoditySettlDateRollPeriod(v))
}

// SetUnderlyingStreamCommoditySettlDateRollUnit sets UnderlyingStreamCommoditySettlDateRollUnit, Tag 41986.
func (m NoUnderlyingStreams) SetUnderlyingStreamCommoditySettlDateRollUnit(v string) {
	m.Set(field.NewUnderlyingStreamCommoditySettlDateRollUnit(v))
}

// SetUnderlyingStreamCommoditySettlDayType sets UnderlyingStreamCommoditySettlDayType, Tag 41987.
func (m NoUnderlyingStreams) SetUnderlyingStreamCommoditySettlDayType(v int) {
	m.Set(field.NewUnderlyingStreamCommoditySettlDayType(v))
}

// SetNoUnderlyingStreamCommoditySettlPeriods sets NoUnderlyingStreamCommoditySettlPeriods, Tag 42002.
func (m NoUnderlyingStreams) SetNoUnderlyingStreamCommoditySettlPeriods(f NoUnderlyingStreamCommoditySettlPeriodsRepeatingGroup) {
	m.SetGroup(f)
}

// SetUnderlyingStreamCommodityXID sets UnderlyingStreamCommodityXID, Tag 41988.
func (m NoUnderlyingStreams) SetUnderlyingStreamCommodityXID(v string) {
	m.Set(field.NewUnderlyingStreamCommodityXID(v))
}

// SetUnderlyingStreamCommodityXIDRef sets UnderlyingStreamCommodityXIDRef, Tag 41989.
func (m NoUnderlyingStreams) SetUnderlyingStreamCommodityXIDRef(v string) {
	m.Set(field.NewUnderlyingStreamCommodityXIDRef(v))
}

// SetUnderlyingStreamCommodityDeliveryPricingRegion sets UnderlyingStreamCommodityDeliveryPricingRegion, Tag 42589.
func (m NoUnderlyingStreams) SetUnderlyingStreamCommodityDeliveryPricingRegion(v string) {
	m.Set(field.NewUnderlyingStreamCommodityDeliveryPricingRegion(v))
}

// SetUnderlyingDeliveryStreamType sets UnderlyingDeliveryStreamType, Tag 41777.
func (m NoUnderlyingStreams) SetUnderlyingDeliveryStreamType(v int) {
	m.Set(field.NewUnderlyingDeliveryStreamType(v))
}

// SetNoUnderlyingDeliveryStreamCommoditySources sets NoUnderlyingDeliveryStreamCommoditySources, Tag 41808.
func (m NoUnderlyingStreams) SetNoUnderlyingDeliveryStreamCommoditySources(f NoUnderlyingDeliveryStreamCommoditySourcesRepeatingGroup) {
	m.SetGroup(f)
}

// SetUnderlyingDeliveryStreamPipeline sets UnderlyingDeliveryStreamPipeline, Tag 41778.
func (m NoUnderlyingStreams) SetUnderlyingDeliveryStreamPipeline(v string) {
	m.Set(field.NewUnderlyingDeliveryStreamPipeline(v))
}

// SetUnderlyingDeliveryStreamEntryPoint sets UnderlyingDeliveryStreamEntryPoint, Tag 41779.
func (m NoUnderlyingStreams) SetUnderlyingDeliveryStreamEntryPoint(v string) {
	m.Set(field.NewUnderlyingDeliveryStreamEntryPoint(v))
}

// SetUnderlyingDeliveryStreamWithdrawalPoint sets UnderlyingDeliveryStreamWithdrawalPoint, Tag 41780.
func (m NoUnderlyingStreams) SetUnderlyingDeliveryStreamWithdrawalPoint(v string) {
	m.Set(field.NewUnderlyingDeliveryStreamWithdrawalPoint(v))
}

// SetUnderlyingDeliveryStreamDeliveryPoint sets UnderlyingDeliveryStreamDeliveryPoint, Tag 41781.
func (m NoUnderlyingStreams) SetUnderlyingDeliveryStreamDeliveryPoint(v string) {
	m.Set(field.NewUnderlyingDeliveryStreamDeliveryPoint(v))
}

// SetUnderlyingDeliveryStreamDeliveryRestriction sets UnderlyingDeliveryStreamDeliveryRestriction, Tag 41782.
func (m NoUnderlyingStreams) SetUnderlyingDeliveryStreamDeliveryRestriction(v int) {
	m.Set(field.NewUnderlyingDeliveryStreamDeliveryRestriction(v))
}

// SetUnderlyingDeliveryStreamDeliveryContingency sets UnderlyingDeliveryStreamDeliveryContingency, Tag 41783.
func (m NoUnderlyingStreams) SetUnderlyingDeliveryStreamDeliveryContingency(v string) {
	m.Set(field.NewUnderlyingDeliveryStreamDeliveryContingency(v))
}

// SetUnderlyingDeliveryStreamDeliveryContingentPartySide sets UnderlyingDeliveryStreamDeliveryContingentPartySide, Tag 41784.
func (m NoUnderlyingStreams) SetUnderlyingDeliveryStreamDeliveryContingentPartySide(v int) {
	m.Set(field.NewUnderlyingDeliveryStreamDeliveryContingentPartySide(v))
}

// SetUnderlyingDeliveryStreamDeliverAtSourceIndicator sets UnderlyingDeliveryStreamDeliverAtSourceIndicator, Tag 41785.
func (m NoUnderlyingStreams) SetUnderlyingDeliveryStreamDeliverAtSourceIndicator(v bool) {
	m.Set(field.NewUnderlyingDeliveryStreamDeliverAtSourceIndicator(v))
}

// SetUnderlyingDeliveryStreamRiskApportionment sets UnderlyingDeliveryStreamRiskApportionment, Tag 41786.
func (m NoUnderlyingStreams) SetUnderlyingDeliveryStreamRiskApportionment(v string) {
	m.Set(field.NewUnderlyingDeliveryStreamRiskApportionment(v))
}

// SetUnderlyingDeliveryStreamRiskApportionmentSource sets UnderlyingDeliveryStreamRiskApportionmentSource, Tag 41587.
func (m NoUnderlyingStreams) SetUnderlyingDeliveryStreamRiskApportionmentSource(v string) {
	m.Set(field.NewUnderlyingDeliveryStreamRiskApportionmentSource(v))
}

// SetNoUnderlyingDeliveryStreamCycles sets NoUnderlyingDeliveryStreamCycles, Tag 41804.
func (m NoUnderlyingStreams) SetNoUnderlyingDeliveryStreamCycles(f NoUnderlyingDeliveryStreamCyclesRepeatingGroup) {
	m.SetGroup(f)
}

// SetUnderlyingDeliveryStreamTitleTransferLocation sets UnderlyingDeliveryStreamTitleTransferLocation, Tag 41787.
func (m NoUnderlyingStreams) SetUnderlyingDeliveryStreamTitleTransferLocation(v string) {
	m.Set(field.NewUnderlyingDeliveryStreamTitleTransferLocation(v))
}

// SetUnderlyingDeliveryStreamTitleTransferCondition sets UnderlyingDeliveryStreamTitleTransferCondition, Tag 41788.
func (m NoUnderlyingStreams) SetUnderlyingDeliveryStreamTitleTransferCondition(v int) {
	m.Set(field.NewUnderlyingDeliveryStreamTitleTransferCondition(v))
}

// SetUnderlyingDeliveryStreamImporterOfRecord sets UnderlyingDeliveryStreamImporterOfRecord, Tag 41789.
func (m NoUnderlyingStreams) SetUnderlyingDeliveryStreamImporterOfRecord(v string) {
	m.Set(field.NewUnderlyingDeliveryStreamImporterOfRecord(v))
}

// SetUnderlyingDeliveryStreamNegativeTolerance sets UnderlyingDeliveryStreamNegativeTolerance, Tag 41790.
func (m NoUnderlyingStreams) SetUnderlyingDeliveryStreamNegativeTolerance(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingDeliveryStreamNegativeTolerance(value, scale))
}

// SetUnderlyingDeliveryStreamPositiveTolerance sets UnderlyingDeliveryStreamPositiveTolerance, Tag 41791.
func (m NoUnderlyingStreams) SetUnderlyingDeliveryStreamPositiveTolerance(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingDeliveryStreamPositiveTolerance(value, scale))
}

// SetUnderlyingDeliveryStreamToleranceUnitOfMeasure sets UnderlyingDeliveryStreamToleranceUnitOfMeasure, Tag 41792.
func (m NoUnderlyingStreams) SetUnderlyingDeliveryStreamToleranceUnitOfMeasure(v string) {
	m.Set(field.NewUnderlyingDeliveryStreamToleranceUnitOfMeasure(v))
}

// SetUnderlyingDeliveryStreamToleranceType sets UnderlyingDeliveryStreamToleranceType, Tag 41793.
func (m NoUnderlyingStreams) SetUnderlyingDeliveryStreamToleranceType(v int) {
	m.Set(field.NewUnderlyingDeliveryStreamToleranceType(v))
}

// SetUnderlyingDeliveryStreamToleranceOptionSide sets UnderlyingDeliveryStreamToleranceOptionSide, Tag 41794.
func (m NoUnderlyingStreams) SetUnderlyingDeliveryStreamToleranceOptionSide(v int) {
	m.Set(field.NewUnderlyingDeliveryStreamToleranceOptionSide(v))
}

// SetUnderlyingDeliveryStreamTotalPositiveTolerance sets UnderlyingDeliveryStreamTotalPositiveTolerance, Tag 41795.
func (m NoUnderlyingStreams) SetUnderlyingDeliveryStreamTotalPositiveTolerance(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingDeliveryStreamTotalPositiveTolerance(value, scale))
}

// SetUnderlyingDeliveryStreamTotalNegativeTolerance sets UnderlyingDeliveryStreamTotalNegativeTolerance, Tag 41796.
func (m NoUnderlyingStreams) SetUnderlyingDeliveryStreamTotalNegativeTolerance(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingDeliveryStreamTotalNegativeTolerance(value, scale))
}

// SetUnderlyingDeliveryStreamNotionalConversionFactor sets UnderlyingDeliveryStreamNotionalConversionFactor, Tag 41797.
func (m NoUnderlyingStreams) SetUnderlyingDeliveryStreamNotionalConversionFactor(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingDeliveryStreamNotionalConversionFactor(value, scale))
}

// SetUnderlyingDeliveryStreamTransportEquipment sets UnderlyingDeliveryStreamTransportEquipment, Tag 41798.
func (m NoUnderlyingStreams) SetUnderlyingDeliveryStreamTransportEquipment(v string) {
	m.Set(field.NewUnderlyingDeliveryStreamTransportEquipment(v))
}

// SetUnderlyingDeliveryStreamElectingPartySide sets UnderlyingDeliveryStreamElectingPartySide, Tag 41799.
func (m NoUnderlyingStreams) SetUnderlyingDeliveryStreamElectingPartySide(v int) {
	m.Set(field.NewUnderlyingDeliveryStreamElectingPartySide(v))
}

// SetUnderlyingDeliveryStreamDeliveryPointSource sets UnderlyingDeliveryStreamDeliveryPointSource, Tag 42196.
func (m NoUnderlyingStreams) SetUnderlyingDeliveryStreamDeliveryPointSource(v int) {
	m.Set(field.NewUnderlyingDeliveryStreamDeliveryPointSource(v))
}

// SetUnderlyingDeliveryStreamDeliveryPointDesc sets UnderlyingDeliveryStreamDeliveryPointDesc, Tag 42197.
func (m NoUnderlyingStreams) SetUnderlyingDeliveryStreamDeliveryPointDesc(v string) {
	m.Set(field.NewUnderlyingDeliveryStreamDeliveryPointDesc(v))
}

// SetUnderlyingDeliveryStreamRouteOrCharter sets UnderlyingDeliveryStreamRouteOrCharter, Tag 43096.
func (m NoUnderlyingStreams) SetUnderlyingDeliveryStreamRouteOrCharter(v string) {
	m.Set(field.NewUnderlyingDeliveryStreamRouteOrCharter(v))
}

// SetNoUnderlyingDeliverySchedules sets NoUnderlyingDeliverySchedules, Tag 41756.
func (m NoUnderlyingStreams) SetNoUnderlyingDeliverySchedules(f NoUnderlyingDeliverySchedulesRepeatingGroup) {
	m.SetGroup(f)
}

// SetUnderlyingStreamVersion sets UnderlyingStreamVersion, Tag 43083.
func (m NoUnderlyingStreams) SetUnderlyingStreamVersion(v string) {
	m.Set(field.NewUnderlyingStreamVersion(v))
}

// SetUnderlyingStreamVersionEffectiveDate sets UnderlyingStreamVersionEffectiveDate, Tag 43084.
func (m NoUnderlyingStreams) SetUnderlyingStreamVersionEffectiveDate(v string) {
	m.Set(field.NewUnderlyingStreamVersionEffectiveDate(v))
}

// SetUnderlyingStreamNotionalDeterminationMethod sets UnderlyingStreamNotionalDeterminationMethod, Tag 43085.
func (m NoUnderlyingStreams) SetUnderlyingStreamNotionalDeterminationMethod(v string) {
	m.Set(field.NewUnderlyingStreamNotionalDeterminationMethod(v))
}

// SetUnderlyingStreamNotionalAdjustments sets UnderlyingStreamNotionalAdjustments, Tag 43086.
func (m NoUnderlyingStreams) SetUnderlyingStreamNotionalAdjustments(v int) {
	m.Set(field.NewUnderlyingStreamNotionalAdjustments(v))
}

// GetUnderlyingStreamType gets UnderlyingStreamType, Tag 40541.
func (m NoUnderlyingStreams) GetUnderlyingStreamType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStreamDesc gets UnderlyingStreamDesc, Tag 40542.
func (m NoUnderlyingStreams) GetUnderlyingStreamDesc() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamDescField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStreamPaySide gets UnderlyingStreamPaySide, Tag 40543.
func (m NoUnderlyingStreams) GetUnderlyingStreamPaySide() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamPaySideField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStreamReceiveSide gets UnderlyingStreamReceiveSide, Tag 40544.
func (m NoUnderlyingStreams) GetUnderlyingStreamReceiveSide() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamReceiveSideField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStreamNotional gets UnderlyingStreamNotional, Tag 40545.
func (m NoUnderlyingStreams) GetUnderlyingStreamNotional() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamNotionalField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStreamCurrency gets UnderlyingStreamCurrency, Tag 40546.
func (m NoUnderlyingStreams) GetUnderlyingStreamCurrency() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamCurrencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStreamEffectiveDateUnadjusted gets UnderlyingStreamEffectiveDateUnadjusted, Tag 40057.
func (m NoUnderlyingStreams) GetUnderlyingStreamEffectiveDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamEffectiveDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStreamEffectiveDateBusinessDayConvention gets UnderlyingStreamEffectiveDateBusinessDayConvention, Tag 40058.
func (m NoUnderlyingStreams) GetUnderlyingStreamEffectiveDateBusinessDayConvention() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamEffectiveDateBusinessDayConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUnderlyingStreamEffectiveDateBusinessCenters gets NoUnderlyingStreamEffectiveDateBusinessCenters, Tag 40975.
func (m NoUnderlyingStreams) GetNoUnderlyingStreamEffectiveDateBusinessCenters() (NoUnderlyingStreamEffectiveDateBusinessCentersRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingStreamEffectiveDateBusinessCentersRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetUnderlyingStreamEffectiveDateRelativeTo gets UnderlyingStreamEffectiveDateRelativeTo, Tag 40060.
func (m NoUnderlyingStreams) GetUnderlyingStreamEffectiveDateRelativeTo() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamEffectiveDateRelativeToField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStreamEffectiveDateOffsetPeriod gets UnderlyingStreamEffectiveDateOffsetPeriod, Tag 40061.
func (m NoUnderlyingStreams) GetUnderlyingStreamEffectiveDateOffsetPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamEffectiveDateOffsetPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStreamEffectiveDateOffsetUnit gets UnderlyingStreamEffectiveDateOffsetUnit, Tag 40062.
func (m NoUnderlyingStreams) GetUnderlyingStreamEffectiveDateOffsetUnit() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamEffectiveDateOffsetUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStreamEffectiveDateOffsetDayType gets UnderlyingStreamEffectiveDateOffsetDayType, Tag 40063.
func (m NoUnderlyingStreams) GetUnderlyingStreamEffectiveDateOffsetDayType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamEffectiveDateOffsetDayTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStreamEffectiveDateAdjusted gets UnderlyingStreamEffectiveDateAdjusted, Tag 40064.
func (m NoUnderlyingStreams) GetUnderlyingStreamEffectiveDateAdjusted() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamEffectiveDateAdjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStreamTerminationDateUnadjusted gets UnderlyingStreamTerminationDateUnadjusted, Tag 40548.
func (m NoUnderlyingStreams) GetUnderlyingStreamTerminationDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamTerminationDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStreamTerminationDateBusinessDayConvention gets UnderlyingStreamTerminationDateBusinessDayConvention, Tag 40549.
func (m NoUnderlyingStreams) GetUnderlyingStreamTerminationDateBusinessDayConvention() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamTerminationDateBusinessDayConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUnderlyingStreamTerminationDateBusinessCenters gets NoUnderlyingStreamTerminationDateBusinessCenters, Tag 40976.
func (m NoUnderlyingStreams) GetNoUnderlyingStreamTerminationDateBusinessCenters() (NoUnderlyingStreamTerminationDateBusinessCentersRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingStreamTerminationDateBusinessCentersRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetUnderlyingStreamTerminationDateRelativeTo gets UnderlyingStreamTerminationDateRelativeTo, Tag 40551.
func (m NoUnderlyingStreams) GetUnderlyingStreamTerminationDateRelativeTo() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamTerminationDateRelativeToField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStreamTerminationDateOffsetPeriod gets UnderlyingStreamTerminationDateOffsetPeriod, Tag 40552.
func (m NoUnderlyingStreams) GetUnderlyingStreamTerminationDateOffsetPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamTerminationDateOffsetPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStreamTerminationDateOffsetUnit gets UnderlyingStreamTerminationDateOffsetUnit, Tag 40553.
func (m NoUnderlyingStreams) GetUnderlyingStreamTerminationDateOffsetUnit() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamTerminationDateOffsetUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStreamTerminationDateOffsetDayType gets UnderlyingStreamTerminationDateOffsetDayType, Tag 40554.
func (m NoUnderlyingStreams) GetUnderlyingStreamTerminationDateOffsetDayType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamTerminationDateOffsetDayTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStreamTerminationDateAdjusted gets UnderlyingStreamTerminationDateAdjusted, Tag 40555.
func (m NoUnderlyingStreams) GetUnderlyingStreamTerminationDateAdjusted() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamTerminationDateAdjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStreamCalculationPeriodBusinessDayConvention gets UnderlyingStreamCalculationPeriodBusinessDayConvention, Tag 40556.
func (m NoUnderlyingStreams) GetUnderlyingStreamCalculationPeriodBusinessDayConvention() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamCalculationPeriodBusinessDayConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUnderlyingStreamCalculationPeriodBusinessCenters gets NoUnderlyingStreamCalculationPeriodBusinessCenters, Tag 40973.
func (m NoUnderlyingStreams) GetNoUnderlyingStreamCalculationPeriodBusinessCenters() (NoUnderlyingStreamCalculationPeriodBusinessCentersRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingStreamCalculationPeriodBusinessCentersRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetUnderlyingStreamFirstPeriodStartDateUnadjusted gets UnderlyingStreamFirstPeriodStartDateUnadjusted, Tag 40558.
func (m NoUnderlyingStreams) GetUnderlyingStreamFirstPeriodStartDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamFirstPeriodStartDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStreamFirstPeriodStartDateBusinessDayConvention gets UnderlyingStreamFirstPeriodStartDateBusinessDayConvention, Tag 40559.
func (m NoUnderlyingStreams) GetUnderlyingStreamFirstPeriodStartDateBusinessDayConvention() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamFirstPeriodStartDateBusinessDayConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUnderlyingStreamFirstPeriodStartDateBusinessCenters gets NoUnderlyingStreamFirstPeriodStartDateBusinessCenters, Tag 40974.
func (m NoUnderlyingStreams) GetNoUnderlyingStreamFirstPeriodStartDateBusinessCenters() (NoUnderlyingStreamFirstPeriodStartDateBusinessCentersRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingStreamFirstPeriodStartDateBusinessCentersRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetUnderlyingStreamFirstPeriodStartDateAdjusted gets UnderlyingStreamFirstPeriodStartDateAdjusted, Tag 40561.
func (m NoUnderlyingStreams) GetUnderlyingStreamFirstPeriodStartDateAdjusted() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamFirstPeriodStartDateAdjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStreamFirstRegularPeriodStartDateUnadjusted gets UnderlyingStreamFirstRegularPeriodStartDateUnadjusted, Tag 40562.
func (m NoUnderlyingStreams) GetUnderlyingStreamFirstRegularPeriodStartDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamFirstRegularPeriodStartDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStreamFirstCompoundingPeriodEndDateUnadjusted gets UnderlyingStreamFirstCompoundingPeriodEndDateUnadjusted, Tag 40563.
func (m NoUnderlyingStreams) GetUnderlyingStreamFirstCompoundingPeriodEndDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamFirstCompoundingPeriodEndDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStreamLastRegularPeriodEndDateUnadjusted gets UnderlyingStreamLastRegularPeriodEndDateUnadjusted, Tag 40564.
func (m NoUnderlyingStreams) GetUnderlyingStreamLastRegularPeriodEndDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamLastRegularPeriodEndDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStreamCalculationFrequencyPeriod gets UnderlyingStreamCalculationFrequencyPeriod, Tag 40565.
func (m NoUnderlyingStreams) GetUnderlyingStreamCalculationFrequencyPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamCalculationFrequencyPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStreamCalculationFrequencyUnit gets UnderlyingStreamCalculationFrequencyUnit, Tag 40566.
func (m NoUnderlyingStreams) GetUnderlyingStreamCalculationFrequencyUnit() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamCalculationFrequencyUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStreamCalculationRollConvention gets UnderlyingStreamCalculationRollConvention, Tag 40567.
func (m NoUnderlyingStreams) GetUnderlyingStreamCalculationRollConvention() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamCalculationRollConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStreamCalculationPeriodDatesXID gets UnderlyingStreamCalculationPeriodDatesXID, Tag 41957.
func (m NoUnderlyingStreams) GetUnderlyingStreamCalculationPeriodDatesXID() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamCalculationPeriodDatesXIDField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStreamCalculationPeriodDatesXIDRef gets UnderlyingStreamCalculationPeriodDatesXIDRef, Tag 41958.
func (m NoUnderlyingStreams) GetUnderlyingStreamCalculationPeriodDatesXIDRef() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamCalculationPeriodDatesXIDRefField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUnderlyingStreamCalculationPeriodDates gets NoUnderlyingStreamCalculationPeriodDates, Tag 41954.
func (m NoUnderlyingStreams) GetNoUnderlyingStreamCalculationPeriodDates() (NoUnderlyingStreamCalculationPeriodDatesRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingStreamCalculationPeriodDatesRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetUnderlyingStreamCalculationBalanceOfFirstPeriod gets UnderlyingStreamCalculationBalanceOfFirstPeriod, Tag 41959.
func (m NoUnderlyingStreams) GetUnderlyingStreamCalculationBalanceOfFirstPeriod() (v bool, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamCalculationBalanceOfFirstPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStreamCalculationCorrectionPeriod gets UnderlyingStreamCalculationCorrectionPeriod, Tag 41960.
func (m NoUnderlyingStreams) GetUnderlyingStreamCalculationCorrectionPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamCalculationCorrectionPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStreamCalculationCorrectionUnit gets UnderlyingStreamCalculationCorrectionUnit, Tag 41961.
func (m NoUnderlyingStreams) GetUnderlyingStreamCalculationCorrectionUnit() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamCalculationCorrectionUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamType gets UnderlyingPaymentStreamType, Tag 40568.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamMarketRate gets UnderlyingPaymentStreamMarketRate, Tag 40569.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamMarketRate() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamMarketRateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamDelayIndicator gets UnderlyingPaymentStreamDelayIndicator, Tag 40570.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamDelayIndicator() (v bool, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamDelayIndicatorField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamSettlCurrency gets UnderlyingPaymentStreamSettlCurrency, Tag 40571.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamSettlCurrency() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamSettlCurrencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamDayCount gets UnderlyingPaymentStreamDayCount, Tag 40572.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamDayCount() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamDayCountField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamAccrualDays gets UnderlyingPaymentStreamAccrualDays, Tag 40573.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamAccrualDays() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamAccrualDaysField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamDiscountType gets UnderlyingPaymentStreamDiscountType, Tag 40574.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamDiscountType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamDiscountTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamDiscountRate gets UnderlyingPaymentStreamDiscountRate, Tag 40575.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamDiscountRate() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamDiscountRateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamDiscountRateDayCount gets UnderlyingPaymentStreamDiscountRateDayCount, Tag 40576.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamDiscountRateDayCount() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamDiscountRateDayCountField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamCompoundingMethod gets UnderlyingPaymentStreamCompoundingMethod, Tag 40577.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamCompoundingMethod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamCompoundingMethodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamInitialPrincipalExchangeIndicator gets UnderlyingPaymentStreamInitialPrincipalExchangeIndicator, Tag 40578.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamInitialPrincipalExchangeIndicator() (v bool, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamInitialPrincipalExchangeIndicatorField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamInterimPrincipalExchangeIndicator gets UnderlyingPaymentStreamInterimPrincipalExchangeIndicator, Tag 40579.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamInterimPrincipalExchangeIndicator() (v bool, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamInterimPrincipalExchangeIndicatorField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamFinalPrincipalExchangeIndicator gets UnderlyingPaymentStreamFinalPrincipalExchangeIndicator, Tag 40580.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamFinalPrincipalExchangeIndicator() (v bool, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamFinalPrincipalExchangeIndicatorField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamPaymentDateBusinessDayConvention gets UnderlyingPaymentStreamPaymentDateBusinessDayConvention, Tag 40581.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamPaymentDateBusinessDayConvention() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamPaymentDateBusinessDayConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUnderlyingPaymentStreamPaymentDateBusinessCenters gets NoUnderlyingPaymentStreamPaymentDateBusinessCenters, Tag 40969.
func (m NoUnderlyingStreams) GetNoUnderlyingPaymentStreamPaymentDateBusinessCenters() (NoUnderlyingPaymentStreamPaymentDateBusinessCentersRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingPaymentStreamPaymentDateBusinessCentersRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetUnderlyingPaymentStreamPaymentFrequencyPeriod gets UnderlyingPaymentStreamPaymentFrequencyPeriod, Tag 40583.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamPaymentFrequencyPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamPaymentFrequencyPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamPaymentFrequencyUnit gets UnderlyingPaymentStreamPaymentFrequencyUnit, Tag 40584.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamPaymentFrequencyUnit() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamPaymentFrequencyUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamPaymentRollConvention gets UnderlyingPaymentStreamPaymentRollConvention, Tag 40585.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamPaymentRollConvention() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamPaymentRollConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamFirstPaymentDateUnadjusted gets UnderlyingPaymentStreamFirstPaymentDateUnadjusted, Tag 40586.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamFirstPaymentDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamFirstPaymentDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamLastRegularPaymentDateUnadjusted gets UnderlyingPaymentStreamLastRegularPaymentDateUnadjusted, Tag 40587.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamLastRegularPaymentDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamLastRegularPaymentDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamPaymentDateRelativeTo gets UnderlyingPaymentStreamPaymentDateRelativeTo, Tag 40588.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamPaymentDateRelativeTo() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamPaymentDateRelativeToField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamPaymentDateOffsetPeriod gets UnderlyingPaymentStreamPaymentDateOffsetPeriod, Tag 40589.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamPaymentDateOffsetPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamPaymentDateOffsetPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamPaymentDateOffsetUnit gets UnderlyingPaymentStreamPaymentDateOffsetUnit, Tag 40590.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamPaymentDateOffsetUnit() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamPaymentDateOffsetUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamPaymentDateOffsetDayType gets UnderlyingPaymentStreamPaymentDateOffsetDayType, Tag 40591.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamPaymentDateOffsetDayType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamPaymentDateOffsetDayTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUnderlyingPaymentStreamPaymentDates gets NoUnderlyingPaymentStreamPaymentDates, Tag 41937.
func (m NoUnderlyingStreams) GetNoUnderlyingPaymentStreamPaymentDates() (NoUnderlyingPaymentStreamPaymentDatesRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingPaymentStreamPaymentDatesRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetUnderlyingPaymentStreamMasterAgreementPaymentDatesIndicator gets UnderlyingPaymentStreamMasterAgreementPaymentDatesIndicator, Tag 41940.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamMasterAgreementPaymentDatesIndicator() (v bool, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamMasterAgreementPaymentDatesIndicatorField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamFinalPricePaymentDateUnadjusted gets UnderlyingPaymentStreamFinalPricePaymentDateUnadjusted, Tag 42949.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamFinalPricePaymentDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamFinalPricePaymentDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamFinalPricePaymentDateRelativeTo gets UnderlyingPaymentStreamFinalPricePaymentDateRelativeTo, Tag 42950.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamFinalPricePaymentDateRelativeTo() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamFinalPricePaymentDateRelativeToField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamFinalPricePaymentDateOffsetPeriod gets UnderlyingPaymentStreamFinalPricePaymentDateOffsetPeriod, Tag 42951.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamFinalPricePaymentDateOffsetPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamFinalPricePaymentDateOffsetPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamFinalPricePaymentDateOffsetUnit gets UnderlyingPaymentStreamFinalPricePaymentDateOffsetUnit, Tag 42952.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamFinalPricePaymentDateOffsetUnit() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamFinalPricePaymentDateOffsetUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamFinalPricePaymentDateOffsetDayType gets UnderlyingPaymentStreamFinalPricePaymentDateOffsetDayType, Tag 42953.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamFinalPricePaymentDateOffsetDayType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamFinalPricePaymentDateOffsetDayTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamFinalPricePaymentDateAdjusted gets UnderlyingPaymentStreamFinalPricePaymentDateAdjusted, Tag 42954.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamFinalPricePaymentDateAdjusted() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamFinalPricePaymentDateAdjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamResetDateRelativeTo gets UnderlyingPaymentStreamResetDateRelativeTo, Tag 40592.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamResetDateRelativeTo() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamResetDateRelativeToField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamResetDateBusinessDayConvention gets UnderlyingPaymentStreamResetDateBusinessDayConvention, Tag 40593.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamResetDateBusinessDayConvention() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamResetDateBusinessDayConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUnderlyingPaymentStreamResetDateBusinessCenters gets NoUnderlyingPaymentStreamResetDateBusinessCenters, Tag 40970.
func (m NoUnderlyingStreams) GetNoUnderlyingPaymentStreamResetDateBusinessCenters() (NoUnderlyingPaymentStreamResetDateBusinessCentersRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingPaymentStreamResetDateBusinessCentersRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetUnderlyingPaymentStreamResetFrequencyPeriod gets UnderlyingPaymentStreamResetFrequencyPeriod, Tag 40595.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamResetFrequencyPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamResetFrequencyPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamResetFrequencyUnit gets UnderlyingPaymentStreamResetFrequencyUnit, Tag 40596.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamResetFrequencyUnit() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamResetFrequencyUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamResetWeeklyRollConvention gets UnderlyingPaymentStreamResetWeeklyRollConvention, Tag 40597.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamResetWeeklyRollConvention() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamResetWeeklyRollConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamInitialFixingDateRelativeTo gets UnderlyingPaymentStreamInitialFixingDateRelativeTo, Tag 40598.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamInitialFixingDateRelativeTo() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamInitialFixingDateRelativeToField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamInitialFixingDateBusinessDayConvention gets UnderlyingPaymentStreamInitialFixingDateBusinessDayConvention, Tag 40599.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamInitialFixingDateBusinessDayConvention() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamInitialFixingDateBusinessDayConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUnderlyingPaymentStreamInitialFixingDateBusinessCenters gets NoUnderlyingPaymentStreamInitialFixingDateBusinessCenters, Tag 40971.
func (m NoUnderlyingStreams) GetNoUnderlyingPaymentStreamInitialFixingDateBusinessCenters() (NoUnderlyingPaymentStreamInitialFixingDateBusinessCentersRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingPaymentStreamInitialFixingDateBusinessCentersRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetUnderlyingPaymentStreamInitialFixingDateOffsetPeriod gets UnderlyingPaymentStreamInitialFixingDateOffsetPeriod, Tag 40601.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamInitialFixingDateOffsetPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamInitialFixingDateOffsetPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamInitialFixingDateOffsetUnit gets UnderlyingPaymentStreamInitialFixingDateOffsetUnit, Tag 40602.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamInitialFixingDateOffsetUnit() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamInitialFixingDateOffsetUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamInitialFixingDateOffsetDayType gets UnderlyingPaymentStreamInitialFixingDateOffsetDayType, Tag 40603.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamInitialFixingDateOffsetDayType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamInitialFixingDateOffsetDayTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamInitialFixingDateAdjusted gets UnderlyingPaymentStreamInitialFixingDateAdjusted, Tag 40604.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamInitialFixingDateAdjusted() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamInitialFixingDateAdjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamFixingDateRelativeTo gets UnderlyingPaymentStreamFixingDateRelativeTo, Tag 40605.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamFixingDateRelativeTo() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamFixingDateRelativeToField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamFixingDateBusinessDayConvention gets UnderlyingPaymentStreamFixingDateBusinessDayConvention, Tag 40606.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamFixingDateBusinessDayConvention() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamFixingDateBusinessDayConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUnderlyingPaymentStreamFixingDateBusinessCenters gets NoUnderlyingPaymentStreamFixingDateBusinessCenters, Tag 40972.
func (m NoUnderlyingStreams) GetNoUnderlyingPaymentStreamFixingDateBusinessCenters() (NoUnderlyingPaymentStreamFixingDateBusinessCentersRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingPaymentStreamFixingDateBusinessCentersRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetUnderlyingPaymentStreamFixingDateOffsetPeriod gets UnderlyingPaymentStreamFixingDateOffsetPeriod, Tag 40608.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamFixingDateOffsetPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamFixingDateOffsetPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamFixingDateOffsetUnit gets UnderlyingPaymentStreamFixingDateOffsetUnit, Tag 40609.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamFixingDateOffsetUnit() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamFixingDateOffsetUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamFixingDateOffsetDayType gets UnderlyingPaymentStreamFixingDateOffsetDayType, Tag 40610.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamFixingDateOffsetDayType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamFixingDateOffsetDayTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamFixingDateAdjusted gets UnderlyingPaymentStreamFixingDateAdjusted, Tag 40611.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamFixingDateAdjusted() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamFixingDateAdjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamRateCutoffDateOffsetPeriod gets UnderlyingPaymentStreamRateCutoffDateOffsetPeriod, Tag 40612.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamRateCutoffDateOffsetPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamRateCutoffDateOffsetPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamRateCutoffDateOffsetUnit gets UnderlyingPaymentStreamRateCutoffDateOffsetUnit, Tag 40613.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamRateCutoffDateOffsetUnit() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamRateCutoffDateOffsetUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamRateCutoffDateOffsetDayType gets UnderlyingPaymentStreamRateCutoffDateOffsetDayType, Tag 40614.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamRateCutoffDateOffsetDayType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamRateCutoffDateOffsetDayTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUnderlyingPaymentStreamFixingDates gets NoUnderlyingPaymentStreamFixingDates, Tag 42955.
func (m NoUnderlyingStreams) GetNoUnderlyingPaymentStreamFixingDates() (NoUnderlyingPaymentStreamFixingDatesRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingPaymentStreamFixingDatesRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetUnderlyingPaymentStreamRate gets UnderlyingPaymentStreamRate, Tag 40615.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamRate() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamRateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamFixedAmount gets UnderlyingPaymentStreamFixedAmount, Tag 40616.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamFixedAmount() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamFixedAmountField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamRateOrAmountCurrency gets UnderlyingPaymentStreamRateOrAmountCurrency, Tag 40617.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamRateOrAmountCurrency() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamRateOrAmountCurrencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamFutureValueNotional gets UnderlyingPaymentStreamFutureValueNotional, Tag 40618.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamFutureValueNotional() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamFutureValueNotionalField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamFutureValueDateAdjusted gets UnderlyingPaymentStreamFutureValueDateAdjusted, Tag 40619.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamFutureValueDateAdjusted() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamFutureValueDateAdjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamFixedAmountUnitOfMeasure gets UnderlyingPaymentStreamFixedAmountUnitOfMeasure, Tag 41904.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamFixedAmountUnitOfMeasure() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamFixedAmountUnitOfMeasureField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamTotalFixedAmount gets UnderlyingPaymentStreamTotalFixedAmount, Tag 41905.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamTotalFixedAmount() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamTotalFixedAmountField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamWorldScaleRate gets UnderlyingPaymentStreamWorldScaleRate, Tag 41906.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamWorldScaleRate() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamWorldScaleRateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamContractPrice gets UnderlyingPaymentStreamContractPrice, Tag 41907.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamContractPrice() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamContractPriceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamContractPriceCurrency gets UnderlyingPaymentStreamContractPriceCurrency, Tag 41908.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamContractPriceCurrency() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamContractPriceCurrencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamRateIndex gets UnderlyingPaymentStreamRateIndex, Tag 40620.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamRateIndex() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamRateIndexField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamRateIndexSource gets UnderlyingPaymentStreamRateIndexSource, Tag 40621.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamRateIndexSource() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamRateIndexSourceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamRateIndexCurveUnit gets UnderlyingPaymentStreamRateIndexCurveUnit, Tag 40622.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamRateIndexCurveUnit() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamRateIndexCurveUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamRateIndexCurvePeriod gets UnderlyingPaymentStreamRateIndexCurvePeriod, Tag 40623.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamRateIndexCurvePeriod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamRateIndexCurvePeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamRateMultiplier gets UnderlyingPaymentStreamRateMultiplier, Tag 40624.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamRateMultiplier() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamRateMultiplierField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamRateSpread gets UnderlyingPaymentStreamRateSpread, Tag 40625.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamRateSpread() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamRateSpreadField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamRateSpreadPositionType gets UnderlyingPaymentStreamRateSpreadPositionType, Tag 40626.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamRateSpreadPositionType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamRateSpreadPositionTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamRateTreatment gets UnderlyingPaymentStreamRateTreatment, Tag 40627.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamRateTreatment() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamRateTreatmentField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamCapRate gets UnderlyingPaymentStreamCapRate, Tag 40628.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamCapRate() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamCapRateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamCapRateBuySide gets UnderlyingPaymentStreamCapRateBuySide, Tag 40629.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamCapRateBuySide() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamCapRateBuySideField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamCapRateSellSide gets UnderlyingPaymentStreamCapRateSellSide, Tag 40630.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamCapRateSellSide() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamCapRateSellSideField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamFloorRate gets UnderlyingPaymentStreamFloorRate, Tag 40631.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamFloorRate() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamFloorRateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamFloorRateBuySide gets UnderlyingPaymentStreamFloorRateBuySide, Tag 40632.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamFloorRateBuySide() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamFloorRateBuySideField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamFloorRateSellSide gets UnderlyingPaymentStreamFloorRateSellSide, Tag 40633.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamFloorRateSellSide() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamFloorRateSellSideField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamInitialRate gets UnderlyingPaymentStreamInitialRate, Tag 40634.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamInitialRate() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamInitialRateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamFinalRateRoundingDirection gets UnderlyingPaymentStreamFinalRateRoundingDirection, Tag 40635.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamFinalRateRoundingDirection() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamFinalRateRoundingDirectionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamFinalRatePrecision gets UnderlyingPaymentStreamFinalRatePrecision, Tag 40636.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamFinalRatePrecision() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamFinalRatePrecisionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamAveragingMethod gets UnderlyingPaymentStreamAveragingMethod, Tag 40637.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamAveragingMethod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamAveragingMethodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamNegativeRateTreatment gets UnderlyingPaymentStreamNegativeRateTreatment, Tag 40638.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamNegativeRateTreatment() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamNegativeRateTreatmentField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamInflationLagPeriod gets UnderlyingPaymentStreamInflationLagPeriod, Tag 40639.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamInflationLagPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamInflationLagPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamInflationLagUnit gets UnderlyingPaymentStreamInflationLagUnit, Tag 40640.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamInflationLagUnit() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamInflationLagUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamInflationLagDayType gets UnderlyingPaymentStreamInflationLagDayType, Tag 40641.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamInflationLagDayType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamInflationLagDayTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamInflationInterpolationMethod gets UnderlyingPaymentStreamInflationInterpolationMethod, Tag 40642.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamInflationInterpolationMethod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamInflationInterpolationMethodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamInflationIndexSource gets UnderlyingPaymentStreamInflationIndexSource, Tag 40643.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamInflationIndexSource() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamInflationIndexSourceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamInflationPublicationSource gets UnderlyingPaymentStreamInflationPublicationSource, Tag 40644.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamInflationPublicationSource() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamInflationPublicationSourceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamInflationInitialIndexLevel gets UnderlyingPaymentStreamInflationInitialIndexLevel, Tag 40645.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamInflationInitialIndexLevel() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamInflationInitialIndexLevelField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamInflationFallbackBondApplicable gets UnderlyingPaymentStreamInflationFallbackBondApplicable, Tag 40646.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamInflationFallbackBondApplicable() (v bool, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamInflationFallbackBondApplicableField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamFRADiscounting gets UnderlyingPaymentStreamFRADiscounting, Tag 40647.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamFRADiscounting() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamFRADiscountingField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamRateIndex2CurveUnit gets UnderlyingPaymentStreamRateIndex2CurveUnit, Tag 41911.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamRateIndex2CurveUnit() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamRateIndex2CurveUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamRateIndex2CurvePeriod gets UnderlyingPaymentStreamRateIndex2CurvePeriod, Tag 41912.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamRateIndex2CurvePeriod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamRateIndex2CurvePeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamRateIndexLocation gets UnderlyingPaymentStreamRateIndexLocation, Tag 41913.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamRateIndexLocation() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamRateIndexLocationField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamRateIndexLevel gets UnderlyingPaymentStreamRateIndexLevel, Tag 41914.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamRateIndexLevel() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamRateIndexLevelField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamRateIndexUnitOfMeasure gets UnderlyingPaymentStreamRateIndexUnitOfMeasure, Tag 41915.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamRateIndexUnitOfMeasure() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamRateIndexUnitOfMeasureField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamSettlLevel gets UnderlyingPaymentStreamSettlLevel, Tag 41916.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamSettlLevel() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamSettlLevelField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamReferenceLevel gets UnderlyingPaymentStreamReferenceLevel, Tag 41917.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamReferenceLevel() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamReferenceLevelField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamReferenceLevelUnitOfMeasure gets UnderlyingPaymentStreamReferenceLevelUnitOfMeasure, Tag 41918.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamReferenceLevelUnitOfMeasure() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamReferenceLevelUnitOfMeasureField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamReferenceLevelEqualsZeroIndicator gets UnderlyingPaymentStreamReferenceLevelEqualsZeroIndicator, Tag 41919.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamReferenceLevelEqualsZeroIndicator() (v bool, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamReferenceLevelEqualsZeroIndicatorField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamRateSpreadCurrency gets UnderlyingPaymentStreamRateSpreadCurrency, Tag 41920.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamRateSpreadCurrency() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamRateSpreadCurrencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamRateSpreadUnitOfMeasure gets UnderlyingPaymentStreamRateSpreadUnitOfMeasure, Tag 41921.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamRateSpreadUnitOfMeasure() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamRateSpreadUnitOfMeasureField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamRateConversionFactor gets UnderlyingPaymentStreamRateConversionFactor, Tag 41922.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamRateConversionFactor() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamRateConversionFactorField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamRateSpreadType gets UnderlyingPaymentStreamRateSpreadType, Tag 41923.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamRateSpreadType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamRateSpreadTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamLastResetRate gets UnderlyingPaymentStreamLastResetRate, Tag 41924.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamLastResetRate() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamLastResetRateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamFinalRate gets UnderlyingPaymentStreamFinalRate, Tag 41925.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamFinalRate() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamFinalRateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamCalculationLagPeriod gets UnderlyingPaymentStreamCalculationLagPeriod, Tag 41926.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamCalculationLagPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamCalculationLagPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamCalculationLagUnit gets UnderlyingPaymentStreamCalculationLagUnit, Tag 41927.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamCalculationLagUnit() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamCalculationLagUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamFirstObservationDateOffsetPeriod gets UnderlyingPaymentStreamFirstObservationDateOffsetPeriod, Tag 41928.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamFirstObservationDateOffsetPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamFirstObservationDateOffsetPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamFirstObservationDateOffsetUnit gets UnderlyingPaymentStreamFirstObservationDateOffsetUnit, Tag 41929.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamFirstObservationDateOffsetUnit() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamFirstObservationDateOffsetUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamPricingDayType gets UnderlyingPaymentStreamPricingDayType, Tag 41930.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamPricingDayType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamPricingDayTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamPricingDayDistribution gets UnderlyingPaymentStreamPricingDayDistribution, Tag 41931.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamPricingDayDistribution() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamPricingDayDistributionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamPricingDayCount gets UnderlyingPaymentStreamPricingDayCount, Tag 41932.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamPricingDayCount() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamPricingDayCountField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamPricingBusinessCalendar gets UnderlyingPaymentStreamPricingBusinessCalendar, Tag 41933.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamPricingBusinessCalendar() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamPricingBusinessCalendarField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamPricingBusinessDayConvention gets UnderlyingPaymentStreamPricingBusinessDayConvention, Tag 41934.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamPricingBusinessDayConvention() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamPricingBusinessDayConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUnderlyingPaymentStreamPricingBusinessCenters gets NoUnderlyingPaymentStreamPricingBusinessCenters, Tag 41909.
func (m NoUnderlyingStreams) GetNoUnderlyingPaymentStreamPricingBusinessCenters() (NoUnderlyingPaymentStreamPricingBusinessCentersRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingPaymentStreamPricingBusinessCentersRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetNoUnderlyingPaymentStreamPricingDays gets NoUnderlyingPaymentStreamPricingDays, Tag 41944.
func (m NoUnderlyingStreams) GetNoUnderlyingPaymentStreamPricingDays() (NoUnderlyingPaymentStreamPricingDaysRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingPaymentStreamPricingDaysRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetNoUnderlyingPaymentStreamPricingDates gets NoUnderlyingPaymentStreamPricingDates, Tag 41941.
func (m NoUnderlyingStreams) GetNoUnderlyingPaymentStreamPricingDates() (NoUnderlyingPaymentStreamPricingDatesRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingPaymentStreamPricingDatesRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetUnderlyingPaymentStreamFirstObservationDateUnadjusted gets UnderlyingPaymentStreamFirstObservationDateUnadjusted, Tag 42958.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamFirstObservationDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamFirstObservationDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamFirstObservationDateRelativeTo gets UnderlyingPaymentStreamFirstObservationDateRelativeTo, Tag 42959.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamFirstObservationDateRelativeTo() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamFirstObservationDateRelativeToField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamFirstObservationDateOffsetDayType gets UnderlyingPaymentStreamFirstObservationDateOffsetDayType, Tag 42960.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamFirstObservationDateOffsetDayType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamFirstObservationDateOffsetDayTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamFirstObservationDateAdjusted gets UnderlyingPaymentStreamFirstObservationDateAdjusted, Tag 42961.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamFirstObservationDateAdjusted() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamFirstObservationDateAdjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamUnderlierRefID gets UnderlyingPaymentStreamUnderlierRefID, Tag 42962.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamUnderlierRefID() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamUnderlierRefIDField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamFormulaCurrency gets UnderlyingPaymentStreamFormulaCurrency, Tag 42978.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamFormulaCurrency() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamFormulaCurrencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamFormulaCurrencyDeterminationMethod gets UnderlyingPaymentStreamFormulaCurrencyDeterminationMethod, Tag 42979.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamFormulaCurrencyDeterminationMethod() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamFormulaCurrencyDeterminationMethodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamFormulaReferenceAmount gets UnderlyingPaymentStreamFormulaReferenceAmount, Tag 42980.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamFormulaReferenceAmount() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamFormulaReferenceAmountField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUnderlyingPaymentStreamFormulas gets NoUnderlyingPaymentStreamFormulas, Tag 42981.
func (m NoUnderlyingStreams) GetNoUnderlyingPaymentStreamFormulas() (NoUnderlyingPaymentStreamFormulasRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingPaymentStreamFormulasRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetUnderlyingPaymentStreamFormulaImageLength gets UnderlyingPaymentStreamFormulaImageLength, Tag 42947.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamFormulaImageLength() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamFormulaImageLengthField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamFormulaImage gets UnderlyingPaymentStreamFormulaImage, Tag 42948.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamFormulaImage() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamFormulaImageField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDividendReinvestmentIndicator gets UnderlyingDividendReinvestmentIndicator, Tag 42826.
func (m NoUnderlyingStreams) GetUnderlyingDividendReinvestmentIndicator() (v bool, err quickfix.MessageRejectError) {
	var f field.UnderlyingDividendReinvestmentIndicatorField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDividendEntitlementEvent gets UnderlyingDividendEntitlementEvent, Tag 42827.
func (m NoUnderlyingStreams) GetUnderlyingDividendEntitlementEvent() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingDividendEntitlementEventField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDividendAmountType gets UnderlyingDividendAmountType, Tag 42828.
func (m NoUnderlyingStreams) GetUnderlyingDividendAmountType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingDividendAmountTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDividendUnderlierRefID gets UnderlyingDividendUnderlierRefID, Tag 42829.
func (m NoUnderlyingStreams) GetUnderlyingDividendUnderlierRefID() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingDividendUnderlierRefIDField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUnderlyingDividendPeriods gets NoUnderlyingDividendPeriods, Tag 42862.
func (m NoUnderlyingStreams) GetNoUnderlyingDividendPeriods() (NoUnderlyingDividendPeriodsRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingDividendPeriodsRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetUnderlyingExtraordinaryDividendPartySide gets UnderlyingExtraordinaryDividendPartySide, Tag 42830.
func (m NoUnderlyingStreams) GetUnderlyingExtraordinaryDividendPartySide() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingExtraordinaryDividendPartySideField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingExtraordinaryDividendAmountType gets UnderlyingExtraordinaryDividendAmountType, Tag 42831.
func (m NoUnderlyingStreams) GetUnderlyingExtraordinaryDividendAmountType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingExtraordinaryDividendAmountTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingExtraordinaryDividendCurrency gets UnderlyingExtraordinaryDividendCurrency, Tag 42832.
func (m NoUnderlyingStreams) GetUnderlyingExtraordinaryDividendCurrency() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingExtraordinaryDividendCurrencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingExtraordinaryDividendDeterminationMethod gets UnderlyingExtraordinaryDividendDeterminationMethod, Tag 42833.
func (m NoUnderlyingStreams) GetUnderlyingExtraordinaryDividendDeterminationMethod() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingExtraordinaryDividendDeterminationMethodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDividendFXTriggerDateRelativeTo gets UnderlyingDividendFXTriggerDateRelativeTo, Tag 42846.
func (m NoUnderlyingStreams) GetUnderlyingDividendFXTriggerDateRelativeTo() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingDividendFXTriggerDateRelativeToField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDividendFXTriggerDateOffsetPeriod gets UnderlyingDividendFXTriggerDateOffsetPeriod, Tag 42847.
func (m NoUnderlyingStreams) GetUnderlyingDividendFXTriggerDateOffsetPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingDividendFXTriggerDateOffsetPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDividendFXTriggerDateOffsetUnit gets UnderlyingDividendFXTriggerDateOffsetUnit, Tag 42848.
func (m NoUnderlyingStreams) GetUnderlyingDividendFXTriggerDateOffsetUnit() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingDividendFXTriggerDateOffsetUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDividendFXTriggerDateOffsetDayType gets UnderlyingDividendFXTriggerDateOffsetDayType, Tag 42849.
func (m NoUnderlyingStreams) GetUnderlyingDividendFXTriggerDateOffsetDayType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingDividendFXTriggerDateOffsetDayTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDividendFXTriggerDateUnadjusted gets UnderlyingDividendFXTriggerDateUnadjusted, Tag 42850.
func (m NoUnderlyingStreams) GetUnderlyingDividendFXTriggerDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingDividendFXTriggerDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDividendFXTriggerDateBusinessDayConvention gets UnderlyingDividendFXTriggerDateBusinessDayConvention, Tag 42851.
func (m NoUnderlyingStreams) GetUnderlyingDividendFXTriggerDateBusinessDayConvention() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingDividendFXTriggerDateBusinessDayConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUnderlyingDividendFXTriggerDateBusinessCenters gets NoUnderlyingDividendFXTriggerDateBusinessCenters, Tag 42853.
func (m NoUnderlyingStreams) GetNoUnderlyingDividendFXTriggerDateBusinessCenters() (NoUnderlyingDividendFXTriggerDateBusinessCentersRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingDividendFXTriggerDateBusinessCentersRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetUnderlyingDividendFXTriggerDateAdjusted gets UnderlyingDividendFXTriggerDateAdjusted, Tag 42852.
func (m NoUnderlyingStreams) GetUnderlyingDividendFXTriggerDateAdjusted() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingDividendFXTriggerDateAdjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDividendFloatingRateIndex gets UnderlyingDividendFloatingRateIndex, Tag 42801.
func (m NoUnderlyingStreams) GetUnderlyingDividendFloatingRateIndex() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingDividendFloatingRateIndexField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDividendFloatingRateIndexCurvePeriod gets UnderlyingDividendFloatingRateIndexCurvePeriod, Tag 42802.
func (m NoUnderlyingStreams) GetUnderlyingDividendFloatingRateIndexCurvePeriod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingDividendFloatingRateIndexCurvePeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDividendFloatingRateIndexCurveUnit gets UnderlyingDividendFloatingRateIndexCurveUnit, Tag 42803.
func (m NoUnderlyingStreams) GetUnderlyingDividendFloatingRateIndexCurveUnit() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingDividendFloatingRateIndexCurveUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDividendFloatingRateMultiplier gets UnderlyingDividendFloatingRateMultiplier, Tag 42804.
func (m NoUnderlyingStreams) GetUnderlyingDividendFloatingRateMultiplier() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingDividendFloatingRateMultiplierField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDividendFloatingRateSpread gets UnderlyingDividendFloatingRateSpread, Tag 42805.
func (m NoUnderlyingStreams) GetUnderlyingDividendFloatingRateSpread() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingDividendFloatingRateSpreadField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDividendFloatingRateSpreadPositionType gets UnderlyingDividendFloatingRateSpreadPositionType, Tag 42806.
func (m NoUnderlyingStreams) GetUnderlyingDividendFloatingRateSpreadPositionType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingDividendFloatingRateSpreadPositionTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDividendFloatingRateTreatment gets UnderlyingDividendFloatingRateTreatment, Tag 42807.
func (m NoUnderlyingStreams) GetUnderlyingDividendFloatingRateTreatment() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingDividendFloatingRateTreatmentField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDividendCapRate gets UnderlyingDividendCapRate, Tag 42808.
func (m NoUnderlyingStreams) GetUnderlyingDividendCapRate() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingDividendCapRateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDividendCapRateBuySide gets UnderlyingDividendCapRateBuySide, Tag 42809.
func (m NoUnderlyingStreams) GetUnderlyingDividendCapRateBuySide() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingDividendCapRateBuySideField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDividendCapRateSellSide gets UnderlyingDividendCapRateSellSide, Tag 42810.
func (m NoUnderlyingStreams) GetUnderlyingDividendCapRateSellSide() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingDividendCapRateSellSideField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDividendFloorRate gets UnderlyingDividendFloorRate, Tag 42811.
func (m NoUnderlyingStreams) GetUnderlyingDividendFloorRate() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingDividendFloorRateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDividendFloorRateBuySide gets UnderlyingDividendFloorRateBuySide, Tag 42812.
func (m NoUnderlyingStreams) GetUnderlyingDividendFloorRateBuySide() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingDividendFloorRateBuySideField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDividendFloorRateSellSide gets UnderlyingDividendFloorRateSellSide, Tag 42813.
func (m NoUnderlyingStreams) GetUnderlyingDividendFloorRateSellSide() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingDividendFloorRateSellSideField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDividendInitialRate gets UnderlyingDividendInitialRate, Tag 42814.
func (m NoUnderlyingStreams) GetUnderlyingDividendInitialRate() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingDividendInitialRateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDividendFinalRateRoundingDirection gets UnderlyingDividendFinalRateRoundingDirection, Tag 42815.
func (m NoUnderlyingStreams) GetUnderlyingDividendFinalRateRoundingDirection() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingDividendFinalRateRoundingDirectionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDividendFinalRatePrecision gets UnderlyingDividendFinalRatePrecision, Tag 42816.
func (m NoUnderlyingStreams) GetUnderlyingDividendFinalRatePrecision() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingDividendFinalRatePrecisionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDividendAveragingMethod gets UnderlyingDividendAveragingMethod, Tag 42817.
func (m NoUnderlyingStreams) GetUnderlyingDividendAveragingMethod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingDividendAveragingMethodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDividendNegativeRateTreatment gets UnderlyingDividendNegativeRateTreatment, Tag 42818.
func (m NoUnderlyingStreams) GetUnderlyingDividendNegativeRateTreatment() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingDividendNegativeRateTreatmentField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDividendAccrualFixedRate gets UnderlyingDividendAccrualFixedRate, Tag 42834.
func (m NoUnderlyingStreams) GetUnderlyingDividendAccrualFixedRate() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingDividendAccrualFixedRateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDividendAccrualPaymentDateRelativeTo gets UnderlyingDividendAccrualPaymentDateRelativeTo, Tag 42819.
func (m NoUnderlyingStreams) GetUnderlyingDividendAccrualPaymentDateRelativeTo() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingDividendAccrualPaymentDateRelativeToField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDividendAccrualPaymentDateOffsetPeriod gets UnderlyingDividendAccrualPaymentDateOffsetPeriod, Tag 42820.
func (m NoUnderlyingStreams) GetUnderlyingDividendAccrualPaymentDateOffsetPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingDividendAccrualPaymentDateOffsetPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDividendAccrualPaymentDateOffsetUnit gets UnderlyingDividendAccrualPaymentDateOffsetUnit, Tag 42821.
func (m NoUnderlyingStreams) GetUnderlyingDividendAccrualPaymentDateOffsetUnit() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingDividendAccrualPaymentDateOffsetUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDividendAccrualPaymentDateOffsetDayType gets UnderlyingDividendAccrualPaymentDateOffsetDayType, Tag 42822.
func (m NoUnderlyingStreams) GetUnderlyingDividendAccrualPaymentDateOffsetDayType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingDividendAccrualPaymentDateOffsetDayTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDividendAccrualPaymentDateUnadjusted gets UnderlyingDividendAccrualPaymentDateUnadjusted, Tag 42823.
func (m NoUnderlyingStreams) GetUnderlyingDividendAccrualPaymentDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingDividendAccrualPaymentDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDividendAccrualPaymentDateBusinessDayConvention gets UnderlyingDividendAccrualPaymentDateBusinessDayConvention, Tag 42824.
func (m NoUnderlyingStreams) GetUnderlyingDividendAccrualPaymentDateBusinessDayConvention() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingDividendAccrualPaymentDateBusinessDayConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUnderlyingDividendAccrualPaymentDateBusinessCenters gets NoUnderlyingDividendAccrualPaymentDateBusinessCenters, Tag 42799.
func (m NoUnderlyingStreams) GetNoUnderlyingDividendAccrualPaymentDateBusinessCenters() (NoUnderlyingDividendAccrualPaymentDateBusinessCentersRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingDividendAccrualPaymentDateBusinessCentersRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetUnderlyingDividendAccrualPaymentDateAdjusted gets UnderlyingDividendAccrualPaymentDateAdjusted, Tag 42825.
func (m NoUnderlyingStreams) GetUnderlyingDividendAccrualPaymentDateAdjusted() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingDividendAccrualPaymentDateAdjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDividendCompoundingMethod gets UnderlyingDividendCompoundingMethod, Tag 42835.
func (m NoUnderlyingStreams) GetUnderlyingDividendCompoundingMethod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingDividendCompoundingMethodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDividendNumOfIndexUnits gets UnderlyingDividendNumOfIndexUnits, Tag 42836.
func (m NoUnderlyingStreams) GetUnderlyingDividendNumOfIndexUnits() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingDividendNumOfIndexUnitsField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDividendCashPercentage gets UnderlyingDividendCashPercentage, Tag 42837.
func (m NoUnderlyingStreams) GetUnderlyingDividendCashPercentage() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingDividendCashPercentageField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDividendCashEquivalentPercentage gets UnderlyingDividendCashEquivalentPercentage, Tag 42838.
func (m NoUnderlyingStreams) GetUnderlyingDividendCashEquivalentPercentage() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingDividendCashEquivalentPercentageField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingNonCashDividendTreatment gets UnderlyingNonCashDividendTreatment, Tag 42839.
func (m NoUnderlyingStreams) GetUnderlyingNonCashDividendTreatment() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingNonCashDividendTreatmentField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDividendComposition gets UnderlyingDividendComposition, Tag 42840.
func (m NoUnderlyingStreams) GetUnderlyingDividendComposition() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingDividendCompositionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingSpecialDividendsIndicator gets UnderlyingSpecialDividendsIndicator, Tag 42841.
func (m NoUnderlyingStreams) GetUnderlyingSpecialDividendsIndicator() (v bool, err quickfix.MessageRejectError) {
	var f field.UnderlyingSpecialDividendsIndicatorField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingMaterialDividendsIndicator gets UnderlyingMaterialDividendsIndicator, Tag 42842.
func (m NoUnderlyingStreams) GetUnderlyingMaterialDividendsIndicator() (v bool, err quickfix.MessageRejectError) {
	var f field.UnderlyingMaterialDividendsIndicatorField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingOptionsExchangeDividendsIndicator gets UnderlyingOptionsExchangeDividendsIndicator, Tag 42843.
func (m NoUnderlyingStreams) GetUnderlyingOptionsExchangeDividendsIndicator() (v bool, err quickfix.MessageRejectError) {
	var f field.UnderlyingOptionsExchangeDividendsIndicatorField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingAdditionalDividendsIndicator gets UnderlyingAdditionalDividendsIndicator, Tag 42844.
func (m NoUnderlyingStreams) GetUnderlyingAdditionalDividendsIndicator() (v bool, err quickfix.MessageRejectError) {
	var f field.UnderlyingAdditionalDividendsIndicatorField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingAllDividendsIndicator gets UnderlyingAllDividendsIndicator, Tag 42845.
func (m NoUnderlyingStreams) GetUnderlyingAllDividendsIndicator() (v bool, err quickfix.MessageRejectError) {
	var f field.UnderlyingAllDividendsIndicatorField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingReturnRateNotionalReset gets UnderlyingReturnRateNotionalReset, Tag 42963.
func (m NoUnderlyingStreams) GetUnderlyingReturnRateNotionalReset() (v bool, err quickfix.MessageRejectError) {
	var f field.UnderlyingReturnRateNotionalResetField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUnderlyingReturnRates gets NoUnderlyingReturnRates, Tag 43034.
func (m NoUnderlyingStreams) GetNoUnderlyingReturnRates() (NoUnderlyingReturnRatesRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingReturnRatesRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetUnderlyingPaymentStreamLinkInitialLevel gets UnderlyingPaymentStreamLinkInitialLevel, Tag 42964.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamLinkInitialLevel() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamLinkInitialLevelField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamLinkClosingLevelIndicator gets UnderlyingPaymentStreamLinkClosingLevelIndicator, Tag 42965.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamLinkClosingLevelIndicator() (v bool, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamLinkClosingLevelIndicatorField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamLinkExpiringLevelIndicator gets UnderlyingPaymentStreamLinkExpiringLevelIndicator, Tag 42966.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamLinkExpiringLevelIndicator() (v bool, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamLinkExpiringLevelIndicatorField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamLinkEstimatedTradingDays gets UnderlyingPaymentStreamLinkEstimatedTradingDays, Tag 42967.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamLinkEstimatedTradingDays() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamLinkEstimatedTradingDaysField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamLinkStrikePrice gets UnderlyingPaymentStreamLinkStrikePrice, Tag 42968.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamLinkStrikePrice() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamLinkStrikePriceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamLinkStrikePriceType gets UnderlyingPaymentStreamLinkStrikePriceType, Tag 42969.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamLinkStrikePriceType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamLinkStrikePriceTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamLinkMaximumBoundary gets UnderlyingPaymentStreamLinkMaximumBoundary, Tag 42970.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamLinkMaximumBoundary() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamLinkMaximumBoundaryField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamLinkMinimumBoundary gets UnderlyingPaymentStreamLinkMinimumBoundary, Tag 42971.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamLinkMinimumBoundary() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamLinkMinimumBoundaryField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamLinkNumberOfDataSeries gets UnderlyingPaymentStreamLinkNumberOfDataSeries, Tag 42972.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamLinkNumberOfDataSeries() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamLinkNumberOfDataSeriesField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamVarianceUnadjustedCap gets UnderlyingPaymentStreamVarianceUnadjustedCap, Tag 42973.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamVarianceUnadjustedCap() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamVarianceUnadjustedCapField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamRealizedVarianceMethod gets UnderlyingPaymentStreamRealizedVarianceMethod, Tag 42974.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamRealizedVarianceMethod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamRealizedVarianceMethodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamDaysAdjustmentIndicator gets UnderlyingPaymentStreamDaysAdjustmentIndicator, Tag 42975.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamDaysAdjustmentIndicator() (v bool, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamDaysAdjustmentIndicatorField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamNearestExchangeContractRefID gets UnderlyingPaymentStreamNearestExchangeContractRefID, Tag 42976.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamNearestExchangeContractRefID() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamNearestExchangeContractRefIDField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamVegaNotionalAmount gets UnderlyingPaymentStreamVegaNotionalAmount, Tag 42977.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamVegaNotionalAmount() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamVegaNotionalAmountField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamRateIndexID gets UnderlyingPaymentStreamRateIndexID, Tag 43092.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamRateIndexID() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamRateIndexIDField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamRateIndexIDSource gets UnderlyingPaymentStreamRateIndexIDSource, Tag 43093.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamRateIndexIDSource() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamRateIndexIDSourceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamNonDeliverableRefCurrency gets UnderlyingPaymentStreamNonDeliverableRefCurrency, Tag 40648.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamNonDeliverableRefCurrency() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamNonDeliverableRefCurrencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamNonDeliverableFixingDatesBusinessDayConvention gets UnderlyingPaymentStreamNonDeliverableFixingDatesBusinessDayConvention, Tag 40649.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamNonDeliverableFixingDatesBusinessDayConvention() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamNonDeliverableFixingDatesBusinessDayConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUnderlyingPaymentStreamNonDeliverableFixingDatesBusinessCenters gets NoUnderlyingPaymentStreamNonDeliverableFixingDatesBusinessCenters, Tag 40968.
func (m NoUnderlyingStreams) GetNoUnderlyingPaymentStreamNonDeliverableFixingDatesBusinessCenters() (NoUnderlyingPaymentStreamNonDeliverableFixingDatesBusinessCentersRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingPaymentStreamNonDeliverableFixingDatesBusinessCentersRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetUnderlyingPaymentStreamNonDeliverableFixingDatesRelativeTo gets UnderlyingPaymentStreamNonDeliverableFixingDatesRelativeTo, Tag 40651.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamNonDeliverableFixingDatesRelativeTo() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamNonDeliverableFixingDatesRelativeToField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamNonDeliverableFixingDatesOffsetPeriod gets UnderlyingPaymentStreamNonDeliverableFixingDatesOffsetPeriod, Tag 40652.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamNonDeliverableFixingDatesOffsetPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamNonDeliverableFixingDatesOffsetPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamNonDeliverableFixingDatesOffsetUnit gets UnderlyingPaymentStreamNonDeliverableFixingDatesOffsetUnit, Tag 40653.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamNonDeliverableFixingDatesOffsetUnit() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamNonDeliverableFixingDatesOffsetUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamNonDeliverableFixingDatesOffsetDayType gets UnderlyingPaymentStreamNonDeliverableFixingDatesOffsetDayType, Tag 40654.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamNonDeliverableFixingDatesOffsetDayType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamNonDeliverableFixingDatesOffsetDayTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamNonDeliverableSettlRateSource gets UnderlyingPaymentStreamNonDeliverableSettlRateSource, Tag 40661.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamNonDeliverableSettlRateSource() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamNonDeliverableSettlRateSourceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamNonDeliverableSettlReferencePage gets UnderlyingPaymentStreamNonDeliverableSettlReferencePage, Tag 40824.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamNonDeliverableSettlReferencePage() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamNonDeliverableSettlReferencePageField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUnderlyingNonDeliverableFixingDates gets NoUnderlyingNonDeliverableFixingDates, Tag 40656.
func (m NoUnderlyingStreams) GetNoUnderlyingNonDeliverableFixingDates() (NoUnderlyingNonDeliverableFixingDatesRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingNonDeliverableFixingDatesRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetNoUnderlyingSettlRateFallbacks gets NoUnderlyingSettlRateFallbacks, Tag 40659.
func (m NoUnderlyingStreams) GetNoUnderlyingSettlRateFallbacks() (NoUnderlyingSettlRateFallbacksRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingSettlRateFallbacksRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetUnderlyingPaymentStreamFlatRateIndicator gets UnderlyingPaymentStreamFlatRateIndicator, Tag 41897.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamFlatRateIndicator() (v bool, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamFlatRateIndicatorField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamFlatRateAmount gets UnderlyingPaymentStreamFlatRateAmount, Tag 41898.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamFlatRateAmount() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamFlatRateAmountField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamFlatRateCurrency gets UnderlyingPaymentStreamFlatRateCurrency, Tag 41899.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamFlatRateCurrency() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamFlatRateCurrencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamMaximumPaymentAmount gets UnderlyingPaymentStreamMaximumPaymentAmount, Tag 41900.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamMaximumPaymentAmount() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamMaximumPaymentAmountField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamMaximumPaymentCurrency gets UnderlyingPaymentStreamMaximumPaymentCurrency, Tag 41901.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamMaximumPaymentCurrency() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamMaximumPaymentCurrencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamMaximumTransactionAmount gets UnderlyingPaymentStreamMaximumTransactionAmount, Tag 41902.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamMaximumTransactionAmount() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamMaximumTransactionAmountField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamMaximumTransactionCurrency gets UnderlyingPaymentStreamMaximumTransactionCurrency, Tag 41903.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamMaximumTransactionCurrency() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamMaximumTransactionCurrencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamCashSettlIndicator gets UnderlyingPaymentStreamCashSettlIndicator, Tag 42895.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamCashSettlIndicator() (v bool, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamCashSettlIndicatorField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamCompoundingXIDRef gets UnderlyingPaymentStreamCompoundingXIDRef, Tag 42896.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamCompoundingXIDRef() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamCompoundingXIDRefField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamCompoundingSpread gets UnderlyingPaymentStreamCompoundingSpread, Tag 42897.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamCompoundingSpread() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamCompoundingSpreadField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamInterpolationMethod gets UnderlyingPaymentStreamInterpolationMethod, Tag 42898.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamInterpolationMethod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamInterpolationMethodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamInterpolationPeriod gets UnderlyingPaymentStreamInterpolationPeriod, Tag 42899.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamInterpolationPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamInterpolationPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamCompoundingFixedRate gets UnderlyingPaymentStreamCompoundingFixedRate, Tag 42900.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamCompoundingFixedRate() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamCompoundingFixedRateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamCompoundingRateIndex gets UnderlyingPaymentStreamCompoundingRateIndex, Tag 42923.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamCompoundingRateIndex() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamCompoundingRateIndexField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamCompoundingRateIndexCurvePeriod gets UnderlyingPaymentStreamCompoundingRateIndexCurvePeriod, Tag 42924.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamCompoundingRateIndexCurvePeriod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamCompoundingRateIndexCurvePeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamCompoundingRateIndexCurveUnit gets UnderlyingPaymentStreamCompoundingRateIndexCurveUnit, Tag 42925.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamCompoundingRateIndexCurveUnit() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamCompoundingRateIndexCurveUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamCompoundingRateMultiplier gets UnderlyingPaymentStreamCompoundingRateMultiplier, Tag 42926.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamCompoundingRateMultiplier() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamCompoundingRateMultiplierField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamCompoundingRateSpread gets UnderlyingPaymentStreamCompoundingRateSpread, Tag 42927.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamCompoundingRateSpread() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamCompoundingRateSpreadField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamCompoundingRateSpreadPositionType gets UnderlyingPaymentStreamCompoundingRateSpreadPositionType, Tag 42928.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamCompoundingRateSpreadPositionType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamCompoundingRateSpreadPositionTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamCompoundingRateTreatment gets UnderlyingPaymentStreamCompoundingRateTreatment, Tag 42929.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamCompoundingRateTreatment() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamCompoundingRateTreatmentField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamCompoundingCapRate gets UnderlyingPaymentStreamCompoundingCapRate, Tag 42930.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamCompoundingCapRate() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamCompoundingCapRateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamCompoundingCapRateBuySide gets UnderlyingPaymentStreamCompoundingCapRateBuySide, Tag 42931.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamCompoundingCapRateBuySide() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamCompoundingCapRateBuySideField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamCompoundingCapRateSellSide gets UnderlyingPaymentStreamCompoundingCapRateSellSide, Tag 42932.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamCompoundingCapRateSellSide() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamCompoundingCapRateSellSideField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamCompoundingFloorRate gets UnderlyingPaymentStreamCompoundingFloorRate, Tag 42933.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamCompoundingFloorRate() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamCompoundingFloorRateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamCompoundingFloorRateBuySide gets UnderlyingPaymentStreamCompoundingFloorRateBuySide, Tag 42934.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamCompoundingFloorRateBuySide() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamCompoundingFloorRateBuySideField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamCompoundingFloorRateSellSide gets UnderlyingPaymentStreamCompoundingFloorRateSellSide, Tag 42935.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamCompoundingFloorRateSellSide() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamCompoundingFloorRateSellSideField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamCompoundingInitialRate gets UnderlyingPaymentStreamCompoundingInitialRate, Tag 42936.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamCompoundingInitialRate() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamCompoundingInitialRateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamCompoundingFinalRateRoundingDirection gets UnderlyingPaymentStreamCompoundingFinalRateRoundingDirection, Tag 42937.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamCompoundingFinalRateRoundingDirection() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamCompoundingFinalRateRoundingDirectionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamCompoundingFinalRatePrecision gets UnderlyingPaymentStreamCompoundingFinalRatePrecision, Tag 42938.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamCompoundingFinalRatePrecision() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamCompoundingFinalRatePrecisionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamCompoundingAveragingMethod gets UnderlyingPaymentStreamCompoundingAveragingMethod, Tag 42939.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamCompoundingAveragingMethod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamCompoundingAveragingMethodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamCompoundingNegativeRateTreatment gets UnderlyingPaymentStreamCompoundingNegativeRateTreatment, Tag 42940.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamCompoundingNegativeRateTreatment() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamCompoundingNegativeRateTreatmentField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamCompoundingDatesBusinessDayConvention gets UnderlyingPaymentStreamCompoundingDatesBusinessDayConvention, Tag 42904.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamCompoundingDatesBusinessDayConvention() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamCompoundingDatesBusinessDayConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUnderlyingPaymentStreamCompoundingDatesBusinessCenters gets NoUnderlyingPaymentStreamCompoundingDatesBusinessCenters, Tag 42915.
func (m NoUnderlyingStreams) GetNoUnderlyingPaymentStreamCompoundingDatesBusinessCenters() (NoUnderlyingPaymentStreamCompoundingDatesBusinessCentersRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingPaymentStreamCompoundingDatesBusinessCentersRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetNoUnderlyingPaymentStreamCompoundingDates gets NoUnderlyingPaymentStreamCompoundingDates, Tag 42901.
func (m NoUnderlyingStreams) GetNoUnderlyingPaymentStreamCompoundingDates() (NoUnderlyingPaymentStreamCompoundingDatesRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingPaymentStreamCompoundingDatesRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetUnderlyingPaymentStreamCompoundingDatesRelativeTo gets UnderlyingPaymentStreamCompoundingDatesRelativeTo, Tag 42905.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamCompoundingDatesRelativeTo() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamCompoundingDatesRelativeToField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamCompoundingDatesOffsetPeriod gets UnderlyingPaymentStreamCompoundingDatesOffsetPeriod, Tag 42906.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamCompoundingDatesOffsetPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamCompoundingDatesOffsetPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamCompoundingDatesOffsetUnit gets UnderlyingPaymentStreamCompoundingDatesOffsetUnit, Tag 42907.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamCompoundingDatesOffsetUnit() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamCompoundingDatesOffsetUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamCompoundingDatesOffsetDayType gets UnderlyingPaymentStreamCompoundingDatesOffsetDayType, Tag 42908.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamCompoundingDatesOffsetDayType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamCompoundingDatesOffsetDayTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamCompoundingPeriodSkip gets UnderlyingPaymentStreamCompoundingPeriodSkip, Tag 42909.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamCompoundingPeriodSkip() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamCompoundingPeriodSkipField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamCompoundingStartDateUnadjusted gets UnderlyingPaymentStreamCompoundingStartDateUnadjusted, Tag 42941.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamCompoundingStartDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamCompoundingStartDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamCompoundingStartDateRelativeTo gets UnderlyingPaymentStreamCompoundingStartDateRelativeTo, Tag 42942.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamCompoundingStartDateRelativeTo() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamCompoundingStartDateRelativeToField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamCompoundingStartDateOffsetPeriod gets UnderlyingPaymentStreamCompoundingStartDateOffsetPeriod, Tag 42943.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamCompoundingStartDateOffsetPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamCompoundingStartDateOffsetPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamCompoundingStartDateOffsetUnit gets UnderlyingPaymentStreamCompoundingStartDateOffsetUnit, Tag 42944.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamCompoundingStartDateOffsetUnit() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamCompoundingStartDateOffsetUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamCompoundingStartDateOffsetDayType gets UnderlyingPaymentStreamCompoundingStartDateOffsetDayType, Tag 42945.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamCompoundingStartDateOffsetDayType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamCompoundingStartDateOffsetDayTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamCompoundingStartDateAdjusted gets UnderlyingPaymentStreamCompoundingStartDateAdjusted, Tag 42946.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamCompoundingStartDateAdjusted() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamCompoundingStartDateAdjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamCompoundingEndDateUnadjusted gets UnderlyingPaymentStreamCompoundingEndDateUnadjusted, Tag 42917.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamCompoundingEndDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamCompoundingEndDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamCompoundingEndDateRelativeTo gets UnderlyingPaymentStreamCompoundingEndDateRelativeTo, Tag 42918.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamCompoundingEndDateRelativeTo() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamCompoundingEndDateRelativeToField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamCompoundingEndDateOffsetPeriod gets UnderlyingPaymentStreamCompoundingEndDateOffsetPeriod, Tag 42919.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamCompoundingEndDateOffsetPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamCompoundingEndDateOffsetPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamCompoundingEndDateOffsetUnit gets UnderlyingPaymentStreamCompoundingEndDateOffsetUnit, Tag 42920.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamCompoundingEndDateOffsetUnit() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamCompoundingEndDateOffsetUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamCompoundingEndDateOffsetDayType gets UnderlyingPaymentStreamCompoundingEndDateOffsetDayType, Tag 42921.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamCompoundingEndDateOffsetDayType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamCompoundingEndDateOffsetDayTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamCompoundingEndDateAdjusted gets UnderlyingPaymentStreamCompoundingEndDateAdjusted, Tag 42922.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamCompoundingEndDateAdjusted() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamCompoundingEndDateAdjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamCompoundingFrequencyPeriod gets UnderlyingPaymentStreamCompoundingFrequencyPeriod, Tag 42910.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamCompoundingFrequencyPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamCompoundingFrequencyPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamCompoundingFrequencyUnit gets UnderlyingPaymentStreamCompoundingFrequencyUnit, Tag 42911.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamCompoundingFrequencyUnit() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamCompoundingFrequencyUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamCompoundingRollConvention gets UnderlyingPaymentStreamCompoundingRollConvention, Tag 42912.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamCompoundingRollConvention() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamCompoundingRollConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamBoundsFirstDateUnadjusted gets UnderlyingPaymentStreamBoundsFirstDateUnadjusted, Tag 42913.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamBoundsFirstDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamBoundsFirstDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamBoundsLastDateUnadjusted gets UnderlyingPaymentStreamBoundsLastDateUnadjusted, Tag 42914.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamBoundsLastDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamBoundsLastDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamOtherDayCount gets UnderlyingPaymentStreamOtherDayCount, Tag 43107.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamOtherDayCount() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamOtherDayCountField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUnderlyingPaymentSchedules gets NoUnderlyingPaymentSchedules, Tag 40664.
func (m NoUnderlyingStreams) GetNoUnderlyingPaymentSchedules() (NoUnderlyingPaymentSchedulesRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingPaymentSchedulesRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetNoUnderlyingPaymentStubs gets NoUnderlyingPaymentStubs, Tag 40708.
func (m NoUnderlyingStreams) GetNoUnderlyingPaymentStubs() (NoUnderlyingPaymentStubsRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingPaymentStubsRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetUnderlyingStreamText gets UnderlyingStreamText, Tag 40547.
func (m NoUnderlyingStreams) GetUnderlyingStreamText() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamTextField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetEncodedUnderlyingStreamTextLen gets EncodedUnderlyingStreamTextLen, Tag 40988.
func (m NoUnderlyingStreams) GetEncodedUnderlyingStreamTextLen() (v int, err quickfix.MessageRejectError) {
	var f field.EncodedUnderlyingStreamTextLenField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetEncodedUnderlyingStreamText gets EncodedUnderlyingStreamText, Tag 40989.
func (m NoUnderlyingStreams) GetEncodedUnderlyingStreamText() (v string, err quickfix.MessageRejectError) {
	var f field.EncodedUnderlyingStreamTextField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStreamXID gets UnderlyingStreamXID, Tag 42016.
func (m NoUnderlyingStreams) GetUnderlyingStreamXID() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamXIDField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStreamNotionalXIDRef gets UnderlyingStreamNotionalXIDRef, Tag 42018.
func (m NoUnderlyingStreams) GetUnderlyingStreamNotionalXIDRef() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamNotionalXIDRefField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStreamNotionalFrequencyPeriod gets UnderlyingStreamNotionalFrequencyPeriod, Tag 42019.
func (m NoUnderlyingStreams) GetUnderlyingStreamNotionalFrequencyPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamNotionalFrequencyPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStreamNotionalFrequencyUnit gets UnderlyingStreamNotionalFrequencyUnit, Tag 42020.
func (m NoUnderlyingStreams) GetUnderlyingStreamNotionalFrequencyUnit() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamNotionalFrequencyUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStreamNotionalCommodityFrequency gets UnderlyingStreamNotionalCommodityFrequency, Tag 42021.
func (m NoUnderlyingStreams) GetUnderlyingStreamNotionalCommodityFrequency() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamNotionalCommodityFrequencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStreamNotionalUnitOfMeasure gets UnderlyingStreamNotionalUnitOfMeasure, Tag 42022.
func (m NoUnderlyingStreams) GetUnderlyingStreamNotionalUnitOfMeasure() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamNotionalUnitOfMeasureField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStreamTotalNotional gets UnderlyingStreamTotalNotional, Tag 42023.
func (m NoUnderlyingStreams) GetUnderlyingStreamTotalNotional() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamTotalNotionalField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStreamTotalNotionalUnitOfMeasure gets UnderlyingStreamTotalNotionalUnitOfMeasure, Tag 42024.
func (m NoUnderlyingStreams) GetUnderlyingStreamTotalNotionalUnitOfMeasure() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamTotalNotionalUnitOfMeasureField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStreamCommodityBase gets UnderlyingStreamCommodityBase, Tag 41964.
func (m NoUnderlyingStreams) GetUnderlyingStreamCommodityBase() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamCommodityBaseField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStreamCommodityType gets UnderlyingStreamCommodityType, Tag 41965.
func (m NoUnderlyingStreams) GetUnderlyingStreamCommodityType() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamCommodityTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStreamCommoditySecurityID gets UnderlyingStreamCommoditySecurityID, Tag 41966.
func (m NoUnderlyingStreams) GetUnderlyingStreamCommoditySecurityID() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamCommoditySecurityIDField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStreamCommoditySecurityIDSource gets UnderlyingStreamCommoditySecurityIDSource, Tag 41967.
func (m NoUnderlyingStreams) GetUnderlyingStreamCommoditySecurityIDSource() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamCommoditySecurityIDSourceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUnderlyingStreamCommodityAltIDs gets NoUnderlyingStreamCommodityAltIDs, Tag 41990.
func (m NoUnderlyingStreams) GetNoUnderlyingStreamCommodityAltIDs() (NoUnderlyingStreamCommodityAltIDsRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingStreamCommodityAltIDsRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetUnderlyingStreamCommodityDesc gets UnderlyingStreamCommodityDesc, Tag 41968.
func (m NoUnderlyingStreams) GetUnderlyingStreamCommodityDesc() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamCommodityDescField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetEncodedUnderlyingStreamCommodityDescLen gets EncodedUnderlyingStreamCommodityDescLen, Tag 41969.
func (m NoUnderlyingStreams) GetEncodedUnderlyingStreamCommodityDescLen() (v int, err quickfix.MessageRejectError) {
	var f field.EncodedUnderlyingStreamCommodityDescLenField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetEncodedUnderlyingStreamCommodityDesc gets EncodedUnderlyingStreamCommodityDesc, Tag 41970.
func (m NoUnderlyingStreams) GetEncodedUnderlyingStreamCommodityDesc() (v string, err quickfix.MessageRejectError) {
	var f field.EncodedUnderlyingStreamCommodityDescField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUnderlyingStreamAssetAttributes gets NoUnderlyingStreamAssetAttributes, Tag 41800.
func (m NoUnderlyingStreams) GetNoUnderlyingStreamAssetAttributes() (NoUnderlyingStreamAssetAttributesRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingStreamAssetAttributesRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetUnderlyingStreamCommodityUnitOfMeasure gets UnderlyingStreamCommodityUnitOfMeasure, Tag 41971.
func (m NoUnderlyingStreams) GetUnderlyingStreamCommodityUnitOfMeasure() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamCommodityUnitOfMeasureField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStreamCommodityCurrency gets UnderlyingStreamCommodityCurrency, Tag 41972.
func (m NoUnderlyingStreams) GetUnderlyingStreamCommodityCurrency() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamCommodityCurrencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStreamCommodityExchange gets UnderlyingStreamCommodityExchange, Tag 41973.
func (m NoUnderlyingStreams) GetUnderlyingStreamCommodityExchange() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamCommodityExchangeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStreamCommodityRateSource gets UnderlyingStreamCommodityRateSource, Tag 41974.
func (m NoUnderlyingStreams) GetUnderlyingStreamCommodityRateSource() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamCommodityRateSourceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStreamCommodityRateReferencePage gets UnderlyingStreamCommodityRateReferencePage, Tag 41975.
func (m NoUnderlyingStreams) GetUnderlyingStreamCommodityRateReferencePage() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamCommodityRateReferencePageField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStreamCommodityRateReferencePageHeading gets UnderlyingStreamCommodityRateReferencePageHeading, Tag 41976.
func (m NoUnderlyingStreams) GetUnderlyingStreamCommodityRateReferencePageHeading() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamCommodityRateReferencePageHeadingField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStreamDataProvider gets UnderlyingStreamDataProvider, Tag 41977.
func (m NoUnderlyingStreams) GetUnderlyingStreamDataProvider() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamDataProviderField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUnderlyingStreamCommodityDataSources gets NoUnderlyingStreamCommodityDataSources, Tag 41993.
func (m NoUnderlyingStreams) GetNoUnderlyingStreamCommodityDataSources() (NoUnderlyingStreamCommodityDataSourcesRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingStreamCommodityDataSourcesRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetUnderlyingStreamCommodityPricingType gets UnderlyingStreamCommodityPricingType, Tag 41978.
func (m NoUnderlyingStreams) GetUnderlyingStreamCommodityPricingType() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamCommodityPricingTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStreamCommodityNearbySettlDayPeriod gets UnderlyingStreamCommodityNearbySettlDayPeriod, Tag 41979.
func (m NoUnderlyingStreams) GetUnderlyingStreamCommodityNearbySettlDayPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamCommodityNearbySettlDayPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStreamCommodityNearbySettlDayUnit gets UnderlyingStreamCommodityNearbySettlDayUnit, Tag 41980.
func (m NoUnderlyingStreams) GetUnderlyingStreamCommodityNearbySettlDayUnit() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamCommodityNearbySettlDayUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStreamCommoditySettlDateUnadjusted gets UnderlyingStreamCommoditySettlDateUnadjusted, Tag 41981.
func (m NoUnderlyingStreams) GetUnderlyingStreamCommoditySettlDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamCommoditySettlDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStreamCommoditySettlDateBusinessDayConvention gets UnderlyingStreamCommoditySettlDateBusinessDayConvention, Tag 41982.
func (m NoUnderlyingStreams) GetUnderlyingStreamCommoditySettlDateBusinessDayConvention() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamCommoditySettlDateBusinessDayConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUnderlyingStreamCommoditySettlBusinessCenters gets NoUnderlyingStreamCommoditySettlBusinessCenters, Tag 41962.
func (m NoUnderlyingStreams) GetNoUnderlyingStreamCommoditySettlBusinessCenters() (NoUnderlyingStreamCommoditySettlBusinessCentersRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingStreamCommoditySettlBusinessCentersRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetUnderlyingStreamCommoditySettlDateAdjusted gets UnderlyingStreamCommoditySettlDateAdjusted, Tag 41983.
func (m NoUnderlyingStreams) GetUnderlyingStreamCommoditySettlDateAdjusted() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamCommoditySettlDateAdjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStreamCommoditySettlMonth gets UnderlyingStreamCommoditySettlMonth, Tag 41984.
func (m NoUnderlyingStreams) GetUnderlyingStreamCommoditySettlMonth() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamCommoditySettlMonthField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStreamCommoditySettlDateRollPeriod gets UnderlyingStreamCommoditySettlDateRollPeriod, Tag 41985.
func (m NoUnderlyingStreams) GetUnderlyingStreamCommoditySettlDateRollPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamCommoditySettlDateRollPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStreamCommoditySettlDateRollUnit gets UnderlyingStreamCommoditySettlDateRollUnit, Tag 41986.
func (m NoUnderlyingStreams) GetUnderlyingStreamCommoditySettlDateRollUnit() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamCommoditySettlDateRollUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStreamCommoditySettlDayType gets UnderlyingStreamCommoditySettlDayType, Tag 41987.
func (m NoUnderlyingStreams) GetUnderlyingStreamCommoditySettlDayType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamCommoditySettlDayTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUnderlyingStreamCommoditySettlPeriods gets NoUnderlyingStreamCommoditySettlPeriods, Tag 42002.
func (m NoUnderlyingStreams) GetNoUnderlyingStreamCommoditySettlPeriods() (NoUnderlyingStreamCommoditySettlPeriodsRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingStreamCommoditySettlPeriodsRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetUnderlyingStreamCommodityXID gets UnderlyingStreamCommodityXID, Tag 41988.
func (m NoUnderlyingStreams) GetUnderlyingStreamCommodityXID() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamCommodityXIDField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStreamCommodityXIDRef gets UnderlyingStreamCommodityXIDRef, Tag 41989.
func (m NoUnderlyingStreams) GetUnderlyingStreamCommodityXIDRef() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamCommodityXIDRefField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStreamCommodityDeliveryPricingRegion gets UnderlyingStreamCommodityDeliveryPricingRegion, Tag 42589.
func (m NoUnderlyingStreams) GetUnderlyingStreamCommodityDeliveryPricingRegion() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamCommodityDeliveryPricingRegionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDeliveryStreamType gets UnderlyingDeliveryStreamType, Tag 41777.
func (m NoUnderlyingStreams) GetUnderlyingDeliveryStreamType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingDeliveryStreamTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUnderlyingDeliveryStreamCommoditySources gets NoUnderlyingDeliveryStreamCommoditySources, Tag 41808.
func (m NoUnderlyingStreams) GetNoUnderlyingDeliveryStreamCommoditySources() (NoUnderlyingDeliveryStreamCommoditySourcesRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingDeliveryStreamCommoditySourcesRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetUnderlyingDeliveryStreamPipeline gets UnderlyingDeliveryStreamPipeline, Tag 41778.
func (m NoUnderlyingStreams) GetUnderlyingDeliveryStreamPipeline() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingDeliveryStreamPipelineField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDeliveryStreamEntryPoint gets UnderlyingDeliveryStreamEntryPoint, Tag 41779.
func (m NoUnderlyingStreams) GetUnderlyingDeliveryStreamEntryPoint() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingDeliveryStreamEntryPointField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDeliveryStreamWithdrawalPoint gets UnderlyingDeliveryStreamWithdrawalPoint, Tag 41780.
func (m NoUnderlyingStreams) GetUnderlyingDeliveryStreamWithdrawalPoint() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingDeliveryStreamWithdrawalPointField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDeliveryStreamDeliveryPoint gets UnderlyingDeliveryStreamDeliveryPoint, Tag 41781.
func (m NoUnderlyingStreams) GetUnderlyingDeliveryStreamDeliveryPoint() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingDeliveryStreamDeliveryPointField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDeliveryStreamDeliveryRestriction gets UnderlyingDeliveryStreamDeliveryRestriction, Tag 41782.
func (m NoUnderlyingStreams) GetUnderlyingDeliveryStreamDeliveryRestriction() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingDeliveryStreamDeliveryRestrictionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDeliveryStreamDeliveryContingency gets UnderlyingDeliveryStreamDeliveryContingency, Tag 41783.
func (m NoUnderlyingStreams) GetUnderlyingDeliveryStreamDeliveryContingency() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingDeliveryStreamDeliveryContingencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDeliveryStreamDeliveryContingentPartySide gets UnderlyingDeliveryStreamDeliveryContingentPartySide, Tag 41784.
func (m NoUnderlyingStreams) GetUnderlyingDeliveryStreamDeliveryContingentPartySide() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingDeliveryStreamDeliveryContingentPartySideField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDeliveryStreamDeliverAtSourceIndicator gets UnderlyingDeliveryStreamDeliverAtSourceIndicator, Tag 41785.
func (m NoUnderlyingStreams) GetUnderlyingDeliveryStreamDeliverAtSourceIndicator() (v bool, err quickfix.MessageRejectError) {
	var f field.UnderlyingDeliveryStreamDeliverAtSourceIndicatorField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDeliveryStreamRiskApportionment gets UnderlyingDeliveryStreamRiskApportionment, Tag 41786.
func (m NoUnderlyingStreams) GetUnderlyingDeliveryStreamRiskApportionment() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingDeliveryStreamRiskApportionmentField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDeliveryStreamRiskApportionmentSource gets UnderlyingDeliveryStreamRiskApportionmentSource, Tag 41587.
func (m NoUnderlyingStreams) GetUnderlyingDeliveryStreamRiskApportionmentSource() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingDeliveryStreamRiskApportionmentSourceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUnderlyingDeliveryStreamCycles gets NoUnderlyingDeliveryStreamCycles, Tag 41804.
func (m NoUnderlyingStreams) GetNoUnderlyingDeliveryStreamCycles() (NoUnderlyingDeliveryStreamCyclesRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingDeliveryStreamCyclesRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetUnderlyingDeliveryStreamTitleTransferLocation gets UnderlyingDeliveryStreamTitleTransferLocation, Tag 41787.
func (m NoUnderlyingStreams) GetUnderlyingDeliveryStreamTitleTransferLocation() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingDeliveryStreamTitleTransferLocationField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDeliveryStreamTitleTransferCondition gets UnderlyingDeliveryStreamTitleTransferCondition, Tag 41788.
func (m NoUnderlyingStreams) GetUnderlyingDeliveryStreamTitleTransferCondition() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingDeliveryStreamTitleTransferConditionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDeliveryStreamImporterOfRecord gets UnderlyingDeliveryStreamImporterOfRecord, Tag 41789.
func (m NoUnderlyingStreams) GetUnderlyingDeliveryStreamImporterOfRecord() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingDeliveryStreamImporterOfRecordField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDeliveryStreamNegativeTolerance gets UnderlyingDeliveryStreamNegativeTolerance, Tag 41790.
func (m NoUnderlyingStreams) GetUnderlyingDeliveryStreamNegativeTolerance() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingDeliveryStreamNegativeToleranceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDeliveryStreamPositiveTolerance gets UnderlyingDeliveryStreamPositiveTolerance, Tag 41791.
func (m NoUnderlyingStreams) GetUnderlyingDeliveryStreamPositiveTolerance() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingDeliveryStreamPositiveToleranceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDeliveryStreamToleranceUnitOfMeasure gets UnderlyingDeliveryStreamToleranceUnitOfMeasure, Tag 41792.
func (m NoUnderlyingStreams) GetUnderlyingDeliveryStreamToleranceUnitOfMeasure() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingDeliveryStreamToleranceUnitOfMeasureField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDeliveryStreamToleranceType gets UnderlyingDeliveryStreamToleranceType, Tag 41793.
func (m NoUnderlyingStreams) GetUnderlyingDeliveryStreamToleranceType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingDeliveryStreamToleranceTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDeliveryStreamToleranceOptionSide gets UnderlyingDeliveryStreamToleranceOptionSide, Tag 41794.
func (m NoUnderlyingStreams) GetUnderlyingDeliveryStreamToleranceOptionSide() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingDeliveryStreamToleranceOptionSideField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDeliveryStreamTotalPositiveTolerance gets UnderlyingDeliveryStreamTotalPositiveTolerance, Tag 41795.
func (m NoUnderlyingStreams) GetUnderlyingDeliveryStreamTotalPositiveTolerance() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingDeliveryStreamTotalPositiveToleranceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDeliveryStreamTotalNegativeTolerance gets UnderlyingDeliveryStreamTotalNegativeTolerance, Tag 41796.
func (m NoUnderlyingStreams) GetUnderlyingDeliveryStreamTotalNegativeTolerance() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingDeliveryStreamTotalNegativeToleranceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDeliveryStreamNotionalConversionFactor gets UnderlyingDeliveryStreamNotionalConversionFactor, Tag 41797.
func (m NoUnderlyingStreams) GetUnderlyingDeliveryStreamNotionalConversionFactor() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingDeliveryStreamNotionalConversionFactorField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDeliveryStreamTransportEquipment gets UnderlyingDeliveryStreamTransportEquipment, Tag 41798.
func (m NoUnderlyingStreams) GetUnderlyingDeliveryStreamTransportEquipment() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingDeliveryStreamTransportEquipmentField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDeliveryStreamElectingPartySide gets UnderlyingDeliveryStreamElectingPartySide, Tag 41799.
func (m NoUnderlyingStreams) GetUnderlyingDeliveryStreamElectingPartySide() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingDeliveryStreamElectingPartySideField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDeliveryStreamDeliveryPointSource gets UnderlyingDeliveryStreamDeliveryPointSource, Tag 42196.
func (m NoUnderlyingStreams) GetUnderlyingDeliveryStreamDeliveryPointSource() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingDeliveryStreamDeliveryPointSourceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDeliveryStreamDeliveryPointDesc gets UnderlyingDeliveryStreamDeliveryPointDesc, Tag 42197.
func (m NoUnderlyingStreams) GetUnderlyingDeliveryStreamDeliveryPointDesc() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingDeliveryStreamDeliveryPointDescField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDeliveryStreamRouteOrCharter gets UnderlyingDeliveryStreamRouteOrCharter, Tag 43096.
func (m NoUnderlyingStreams) GetUnderlyingDeliveryStreamRouteOrCharter() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingDeliveryStreamRouteOrCharterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUnderlyingDeliverySchedules gets NoUnderlyingDeliverySchedules, Tag 41756.
func (m NoUnderlyingStreams) GetNoUnderlyingDeliverySchedules() (NoUnderlyingDeliverySchedulesRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingDeliverySchedulesRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetUnderlyingStreamVersion gets UnderlyingStreamVersion, Tag 43083.
func (m NoUnderlyingStreams) GetUnderlyingStreamVersion() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamVersionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStreamVersionEffectiveDate gets UnderlyingStreamVersionEffectiveDate, Tag 43084.
func (m NoUnderlyingStreams) GetUnderlyingStreamVersionEffectiveDate() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamVersionEffectiveDateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStreamNotionalDeterminationMethod gets UnderlyingStreamNotionalDeterminationMethod, Tag 43085.
func (m NoUnderlyingStreams) GetUnderlyingStreamNotionalDeterminationMethod() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamNotionalDeterminationMethodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStreamNotionalAdjustments gets UnderlyingStreamNotionalAdjustments, Tag 43086.
func (m NoUnderlyingStreams) GetUnderlyingStreamNotionalAdjustments() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamNotionalAdjustmentsField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingStreamType returns true if UnderlyingStreamType is present, Tag 40541.
func (m NoUnderlyingStreams) HasUnderlyingStreamType() bool {
	return m.Has(tag.UnderlyingStreamType)
}

// HasUnderlyingStreamDesc returns true if UnderlyingStreamDesc is present, Tag 40542.
func (m NoUnderlyingStreams) HasUnderlyingStreamDesc() bool {
	return m.Has(tag.UnderlyingStreamDesc)
}

// HasUnderlyingStreamPaySide returns true if UnderlyingStreamPaySide is present, Tag 40543.
func (m NoUnderlyingStreams) HasUnderlyingStreamPaySide() bool {
	return m.Has(tag.UnderlyingStreamPaySide)
}

// HasUnderlyingStreamReceiveSide returns true if UnderlyingStreamReceiveSide is present, Tag 40544.
func (m NoUnderlyingStreams) HasUnderlyingStreamReceiveSide() bool {
	return m.Has(tag.UnderlyingStreamReceiveSide)
}

// HasUnderlyingStreamNotional returns true if UnderlyingStreamNotional is present, Tag 40545.
func (m NoUnderlyingStreams) HasUnderlyingStreamNotional() bool {
	return m.Has(tag.UnderlyingStreamNotional)
}

// HasUnderlyingStreamCurrency returns true if UnderlyingStreamCurrency is present, Tag 40546.
func (m NoUnderlyingStreams) HasUnderlyingStreamCurrency() bool {
	return m.Has(tag.UnderlyingStreamCurrency)
}

// HasUnderlyingStreamEffectiveDateUnadjusted returns true if UnderlyingStreamEffectiveDateUnadjusted is present, Tag 40057.
func (m NoUnderlyingStreams) HasUnderlyingStreamEffectiveDateUnadjusted() bool {
	return m.Has(tag.UnderlyingStreamEffectiveDateUnadjusted)
}

// HasUnderlyingStreamEffectiveDateBusinessDayConvention returns true if UnderlyingStreamEffectiveDateBusinessDayConvention is present, Tag 40058.
func (m NoUnderlyingStreams) HasUnderlyingStreamEffectiveDateBusinessDayConvention() bool {
	return m.Has(tag.UnderlyingStreamEffectiveDateBusinessDayConvention)
}

// HasNoUnderlyingStreamEffectiveDateBusinessCenters returns true if NoUnderlyingStreamEffectiveDateBusinessCenters is present, Tag 40975.
func (m NoUnderlyingStreams) HasNoUnderlyingStreamEffectiveDateBusinessCenters() bool {
	return m.Has(tag.NoUnderlyingStreamEffectiveDateBusinessCenters)
}

// HasUnderlyingStreamEffectiveDateRelativeTo returns true if UnderlyingStreamEffectiveDateRelativeTo is present, Tag 40060.
func (m NoUnderlyingStreams) HasUnderlyingStreamEffectiveDateRelativeTo() bool {
	return m.Has(tag.UnderlyingStreamEffectiveDateRelativeTo)
}

// HasUnderlyingStreamEffectiveDateOffsetPeriod returns true if UnderlyingStreamEffectiveDateOffsetPeriod is present, Tag 40061.
func (m NoUnderlyingStreams) HasUnderlyingStreamEffectiveDateOffsetPeriod() bool {
	return m.Has(tag.UnderlyingStreamEffectiveDateOffsetPeriod)
}

// HasUnderlyingStreamEffectiveDateOffsetUnit returns true if UnderlyingStreamEffectiveDateOffsetUnit is present, Tag 40062.
func (m NoUnderlyingStreams) HasUnderlyingStreamEffectiveDateOffsetUnit() bool {
	return m.Has(tag.UnderlyingStreamEffectiveDateOffsetUnit)
}

// HasUnderlyingStreamEffectiveDateOffsetDayType returns true if UnderlyingStreamEffectiveDateOffsetDayType is present, Tag 40063.
func (m NoUnderlyingStreams) HasUnderlyingStreamEffectiveDateOffsetDayType() bool {
	return m.Has(tag.UnderlyingStreamEffectiveDateOffsetDayType)
}

// HasUnderlyingStreamEffectiveDateAdjusted returns true if UnderlyingStreamEffectiveDateAdjusted is present, Tag 40064.
func (m NoUnderlyingStreams) HasUnderlyingStreamEffectiveDateAdjusted() bool {
	return m.Has(tag.UnderlyingStreamEffectiveDateAdjusted)
}

// HasUnderlyingStreamTerminationDateUnadjusted returns true if UnderlyingStreamTerminationDateUnadjusted is present, Tag 40548.
func (m NoUnderlyingStreams) HasUnderlyingStreamTerminationDateUnadjusted() bool {
	return m.Has(tag.UnderlyingStreamTerminationDateUnadjusted)
}

// HasUnderlyingStreamTerminationDateBusinessDayConvention returns true if UnderlyingStreamTerminationDateBusinessDayConvention is present, Tag 40549.
func (m NoUnderlyingStreams) HasUnderlyingStreamTerminationDateBusinessDayConvention() bool {
	return m.Has(tag.UnderlyingStreamTerminationDateBusinessDayConvention)
}

// HasNoUnderlyingStreamTerminationDateBusinessCenters returns true if NoUnderlyingStreamTerminationDateBusinessCenters is present, Tag 40976.
func (m NoUnderlyingStreams) HasNoUnderlyingStreamTerminationDateBusinessCenters() bool {
	return m.Has(tag.NoUnderlyingStreamTerminationDateBusinessCenters)
}

// HasUnderlyingStreamTerminationDateRelativeTo returns true if UnderlyingStreamTerminationDateRelativeTo is present, Tag 40551.
func (m NoUnderlyingStreams) HasUnderlyingStreamTerminationDateRelativeTo() bool {
	return m.Has(tag.UnderlyingStreamTerminationDateRelativeTo)
}

// HasUnderlyingStreamTerminationDateOffsetPeriod returns true if UnderlyingStreamTerminationDateOffsetPeriod is present, Tag 40552.
func (m NoUnderlyingStreams) HasUnderlyingStreamTerminationDateOffsetPeriod() bool {
	return m.Has(tag.UnderlyingStreamTerminationDateOffsetPeriod)
}

// HasUnderlyingStreamTerminationDateOffsetUnit returns true if UnderlyingStreamTerminationDateOffsetUnit is present, Tag 40553.
func (m NoUnderlyingStreams) HasUnderlyingStreamTerminationDateOffsetUnit() bool {
	return m.Has(tag.UnderlyingStreamTerminationDateOffsetUnit)
}

// HasUnderlyingStreamTerminationDateOffsetDayType returns true if UnderlyingStreamTerminationDateOffsetDayType is present, Tag 40554.
func (m NoUnderlyingStreams) HasUnderlyingStreamTerminationDateOffsetDayType() bool {
	return m.Has(tag.UnderlyingStreamTerminationDateOffsetDayType)
}

// HasUnderlyingStreamTerminationDateAdjusted returns true if UnderlyingStreamTerminationDateAdjusted is present, Tag 40555.
func (m NoUnderlyingStreams) HasUnderlyingStreamTerminationDateAdjusted() bool {
	return m.Has(tag.UnderlyingStreamTerminationDateAdjusted)
}

// HasUnderlyingStreamCalculationPeriodBusinessDayConvention returns true if UnderlyingStreamCalculationPeriodBusinessDayConvention is present, Tag 40556.
func (m NoUnderlyingStreams) HasUnderlyingStreamCalculationPeriodBusinessDayConvention() bool {
	return m.Has(tag.UnderlyingStreamCalculationPeriodBusinessDayConvention)
}

// HasNoUnderlyingStreamCalculationPeriodBusinessCenters returns true if NoUnderlyingStreamCalculationPeriodBusinessCenters is present, Tag 40973.
func (m NoUnderlyingStreams) HasNoUnderlyingStreamCalculationPeriodBusinessCenters() bool {
	return m.Has(tag.NoUnderlyingStreamCalculationPeriodBusinessCenters)
}

// HasUnderlyingStreamFirstPeriodStartDateUnadjusted returns true if UnderlyingStreamFirstPeriodStartDateUnadjusted is present, Tag 40558.
func (m NoUnderlyingStreams) HasUnderlyingStreamFirstPeriodStartDateUnadjusted() bool {
	return m.Has(tag.UnderlyingStreamFirstPeriodStartDateUnadjusted)
}

// HasUnderlyingStreamFirstPeriodStartDateBusinessDayConvention returns true if UnderlyingStreamFirstPeriodStartDateBusinessDayConvention is present, Tag 40559.
func (m NoUnderlyingStreams) HasUnderlyingStreamFirstPeriodStartDateBusinessDayConvention() bool {
	return m.Has(tag.UnderlyingStreamFirstPeriodStartDateBusinessDayConvention)
}

// HasNoUnderlyingStreamFirstPeriodStartDateBusinessCenters returns true if NoUnderlyingStreamFirstPeriodStartDateBusinessCenters is present, Tag 40974.
func (m NoUnderlyingStreams) HasNoUnderlyingStreamFirstPeriodStartDateBusinessCenters() bool {
	return m.Has(tag.NoUnderlyingStreamFirstPeriodStartDateBusinessCenters)
}

// HasUnderlyingStreamFirstPeriodStartDateAdjusted returns true if UnderlyingStreamFirstPeriodStartDateAdjusted is present, Tag 40561.
func (m NoUnderlyingStreams) HasUnderlyingStreamFirstPeriodStartDateAdjusted() bool {
	return m.Has(tag.UnderlyingStreamFirstPeriodStartDateAdjusted)
}

// HasUnderlyingStreamFirstRegularPeriodStartDateUnadjusted returns true if UnderlyingStreamFirstRegularPeriodStartDateUnadjusted is present, Tag 40562.
func (m NoUnderlyingStreams) HasUnderlyingStreamFirstRegularPeriodStartDateUnadjusted() bool {
	return m.Has(tag.UnderlyingStreamFirstRegularPeriodStartDateUnadjusted)
}

// HasUnderlyingStreamFirstCompoundingPeriodEndDateUnadjusted returns true if UnderlyingStreamFirstCompoundingPeriodEndDateUnadjusted is present, Tag 40563.
func (m NoUnderlyingStreams) HasUnderlyingStreamFirstCompoundingPeriodEndDateUnadjusted() bool {
	return m.Has(tag.UnderlyingStreamFirstCompoundingPeriodEndDateUnadjusted)
}

// HasUnderlyingStreamLastRegularPeriodEndDateUnadjusted returns true if UnderlyingStreamLastRegularPeriodEndDateUnadjusted is present, Tag 40564.
func (m NoUnderlyingStreams) HasUnderlyingStreamLastRegularPeriodEndDateUnadjusted() bool {
	return m.Has(tag.UnderlyingStreamLastRegularPeriodEndDateUnadjusted)
}

// HasUnderlyingStreamCalculationFrequencyPeriod returns true if UnderlyingStreamCalculationFrequencyPeriod is present, Tag 40565.
func (m NoUnderlyingStreams) HasUnderlyingStreamCalculationFrequencyPeriod() bool {
	return m.Has(tag.UnderlyingStreamCalculationFrequencyPeriod)
}

// HasUnderlyingStreamCalculationFrequencyUnit returns true if UnderlyingStreamCalculationFrequencyUnit is present, Tag 40566.
func (m NoUnderlyingStreams) HasUnderlyingStreamCalculationFrequencyUnit() bool {
	return m.Has(tag.UnderlyingStreamCalculationFrequencyUnit)
}

// HasUnderlyingStreamCalculationRollConvention returns true if UnderlyingStreamCalculationRollConvention is present, Tag 40567.
func (m NoUnderlyingStreams) HasUnderlyingStreamCalculationRollConvention() bool {
	return m.Has(tag.UnderlyingStreamCalculationRollConvention)
}

// HasUnderlyingStreamCalculationPeriodDatesXID returns true if UnderlyingStreamCalculationPeriodDatesXID is present, Tag 41957.
func (m NoUnderlyingStreams) HasUnderlyingStreamCalculationPeriodDatesXID() bool {
	return m.Has(tag.UnderlyingStreamCalculationPeriodDatesXID)
}

// HasUnderlyingStreamCalculationPeriodDatesXIDRef returns true if UnderlyingStreamCalculationPeriodDatesXIDRef is present, Tag 41958.
func (m NoUnderlyingStreams) HasUnderlyingStreamCalculationPeriodDatesXIDRef() bool {
	return m.Has(tag.UnderlyingStreamCalculationPeriodDatesXIDRef)
}

// HasNoUnderlyingStreamCalculationPeriodDates returns true if NoUnderlyingStreamCalculationPeriodDates is present, Tag 41954.
func (m NoUnderlyingStreams) HasNoUnderlyingStreamCalculationPeriodDates() bool {
	return m.Has(tag.NoUnderlyingStreamCalculationPeriodDates)
}

// HasUnderlyingStreamCalculationBalanceOfFirstPeriod returns true if UnderlyingStreamCalculationBalanceOfFirstPeriod is present, Tag 41959.
func (m NoUnderlyingStreams) HasUnderlyingStreamCalculationBalanceOfFirstPeriod() bool {
	return m.Has(tag.UnderlyingStreamCalculationBalanceOfFirstPeriod)
}

// HasUnderlyingStreamCalculationCorrectionPeriod returns true if UnderlyingStreamCalculationCorrectionPeriod is present, Tag 41960.
func (m NoUnderlyingStreams) HasUnderlyingStreamCalculationCorrectionPeriod() bool {
	return m.Has(tag.UnderlyingStreamCalculationCorrectionPeriod)
}

// HasUnderlyingStreamCalculationCorrectionUnit returns true if UnderlyingStreamCalculationCorrectionUnit is present, Tag 41961.
func (m NoUnderlyingStreams) HasUnderlyingStreamCalculationCorrectionUnit() bool {
	return m.Has(tag.UnderlyingStreamCalculationCorrectionUnit)
}

// HasUnderlyingPaymentStreamType returns true if UnderlyingPaymentStreamType is present, Tag 40568.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamType() bool {
	return m.Has(tag.UnderlyingPaymentStreamType)
}

// HasUnderlyingPaymentStreamMarketRate returns true if UnderlyingPaymentStreamMarketRate is present, Tag 40569.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamMarketRate() bool {
	return m.Has(tag.UnderlyingPaymentStreamMarketRate)
}

// HasUnderlyingPaymentStreamDelayIndicator returns true if UnderlyingPaymentStreamDelayIndicator is present, Tag 40570.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamDelayIndicator() bool {
	return m.Has(tag.UnderlyingPaymentStreamDelayIndicator)
}

// HasUnderlyingPaymentStreamSettlCurrency returns true if UnderlyingPaymentStreamSettlCurrency is present, Tag 40571.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamSettlCurrency() bool {
	return m.Has(tag.UnderlyingPaymentStreamSettlCurrency)
}

// HasUnderlyingPaymentStreamDayCount returns true if UnderlyingPaymentStreamDayCount is present, Tag 40572.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamDayCount() bool {
	return m.Has(tag.UnderlyingPaymentStreamDayCount)
}

// HasUnderlyingPaymentStreamAccrualDays returns true if UnderlyingPaymentStreamAccrualDays is present, Tag 40573.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamAccrualDays() bool {
	return m.Has(tag.UnderlyingPaymentStreamAccrualDays)
}

// HasUnderlyingPaymentStreamDiscountType returns true if UnderlyingPaymentStreamDiscountType is present, Tag 40574.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamDiscountType() bool {
	return m.Has(tag.UnderlyingPaymentStreamDiscountType)
}

// HasUnderlyingPaymentStreamDiscountRate returns true if UnderlyingPaymentStreamDiscountRate is present, Tag 40575.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamDiscountRate() bool {
	return m.Has(tag.UnderlyingPaymentStreamDiscountRate)
}

// HasUnderlyingPaymentStreamDiscountRateDayCount returns true if UnderlyingPaymentStreamDiscountRateDayCount is present, Tag 40576.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamDiscountRateDayCount() bool {
	return m.Has(tag.UnderlyingPaymentStreamDiscountRateDayCount)
}

// HasUnderlyingPaymentStreamCompoundingMethod returns true if UnderlyingPaymentStreamCompoundingMethod is present, Tag 40577.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamCompoundingMethod() bool {
	return m.Has(tag.UnderlyingPaymentStreamCompoundingMethod)
}

// HasUnderlyingPaymentStreamInitialPrincipalExchangeIndicator returns true if UnderlyingPaymentStreamInitialPrincipalExchangeIndicator is present, Tag 40578.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamInitialPrincipalExchangeIndicator() bool {
	return m.Has(tag.UnderlyingPaymentStreamInitialPrincipalExchangeIndicator)
}

// HasUnderlyingPaymentStreamInterimPrincipalExchangeIndicator returns true if UnderlyingPaymentStreamInterimPrincipalExchangeIndicator is present, Tag 40579.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamInterimPrincipalExchangeIndicator() bool {
	return m.Has(tag.UnderlyingPaymentStreamInterimPrincipalExchangeIndicator)
}

// HasUnderlyingPaymentStreamFinalPrincipalExchangeIndicator returns true if UnderlyingPaymentStreamFinalPrincipalExchangeIndicator is present, Tag 40580.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamFinalPrincipalExchangeIndicator() bool {
	return m.Has(tag.UnderlyingPaymentStreamFinalPrincipalExchangeIndicator)
}

// HasUnderlyingPaymentStreamPaymentDateBusinessDayConvention returns true if UnderlyingPaymentStreamPaymentDateBusinessDayConvention is present, Tag 40581.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamPaymentDateBusinessDayConvention() bool {
	return m.Has(tag.UnderlyingPaymentStreamPaymentDateBusinessDayConvention)
}

// HasNoUnderlyingPaymentStreamPaymentDateBusinessCenters returns true if NoUnderlyingPaymentStreamPaymentDateBusinessCenters is present, Tag 40969.
func (m NoUnderlyingStreams) HasNoUnderlyingPaymentStreamPaymentDateBusinessCenters() bool {
	return m.Has(tag.NoUnderlyingPaymentStreamPaymentDateBusinessCenters)
}

// HasUnderlyingPaymentStreamPaymentFrequencyPeriod returns true if UnderlyingPaymentStreamPaymentFrequencyPeriod is present, Tag 40583.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamPaymentFrequencyPeriod() bool {
	return m.Has(tag.UnderlyingPaymentStreamPaymentFrequencyPeriod)
}

// HasUnderlyingPaymentStreamPaymentFrequencyUnit returns true if UnderlyingPaymentStreamPaymentFrequencyUnit is present, Tag 40584.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamPaymentFrequencyUnit() bool {
	return m.Has(tag.UnderlyingPaymentStreamPaymentFrequencyUnit)
}

// HasUnderlyingPaymentStreamPaymentRollConvention returns true if UnderlyingPaymentStreamPaymentRollConvention is present, Tag 40585.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamPaymentRollConvention() bool {
	return m.Has(tag.UnderlyingPaymentStreamPaymentRollConvention)
}

// HasUnderlyingPaymentStreamFirstPaymentDateUnadjusted returns true if UnderlyingPaymentStreamFirstPaymentDateUnadjusted is present, Tag 40586.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamFirstPaymentDateUnadjusted() bool {
	return m.Has(tag.UnderlyingPaymentStreamFirstPaymentDateUnadjusted)
}

// HasUnderlyingPaymentStreamLastRegularPaymentDateUnadjusted returns true if UnderlyingPaymentStreamLastRegularPaymentDateUnadjusted is present, Tag 40587.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamLastRegularPaymentDateUnadjusted() bool {
	return m.Has(tag.UnderlyingPaymentStreamLastRegularPaymentDateUnadjusted)
}

// HasUnderlyingPaymentStreamPaymentDateRelativeTo returns true if UnderlyingPaymentStreamPaymentDateRelativeTo is present, Tag 40588.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamPaymentDateRelativeTo() bool {
	return m.Has(tag.UnderlyingPaymentStreamPaymentDateRelativeTo)
}

// HasUnderlyingPaymentStreamPaymentDateOffsetPeriod returns true if UnderlyingPaymentStreamPaymentDateOffsetPeriod is present, Tag 40589.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamPaymentDateOffsetPeriod() bool {
	return m.Has(tag.UnderlyingPaymentStreamPaymentDateOffsetPeriod)
}

// HasUnderlyingPaymentStreamPaymentDateOffsetUnit returns true if UnderlyingPaymentStreamPaymentDateOffsetUnit is present, Tag 40590.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamPaymentDateOffsetUnit() bool {
	return m.Has(tag.UnderlyingPaymentStreamPaymentDateOffsetUnit)
}

// HasUnderlyingPaymentStreamPaymentDateOffsetDayType returns true if UnderlyingPaymentStreamPaymentDateOffsetDayType is present, Tag 40591.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamPaymentDateOffsetDayType() bool {
	return m.Has(tag.UnderlyingPaymentStreamPaymentDateOffsetDayType)
}

// HasNoUnderlyingPaymentStreamPaymentDates returns true if NoUnderlyingPaymentStreamPaymentDates is present, Tag 41937.
func (m NoUnderlyingStreams) HasNoUnderlyingPaymentStreamPaymentDates() bool {
	return m.Has(tag.NoUnderlyingPaymentStreamPaymentDates)
}

// HasUnderlyingPaymentStreamMasterAgreementPaymentDatesIndicator returns true if UnderlyingPaymentStreamMasterAgreementPaymentDatesIndicator is present, Tag 41940.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamMasterAgreementPaymentDatesIndicator() bool {
	return m.Has(tag.UnderlyingPaymentStreamMasterAgreementPaymentDatesIndicator)
}

// HasUnderlyingPaymentStreamFinalPricePaymentDateUnadjusted returns true if UnderlyingPaymentStreamFinalPricePaymentDateUnadjusted is present, Tag 42949.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamFinalPricePaymentDateUnadjusted() bool {
	return m.Has(tag.UnderlyingPaymentStreamFinalPricePaymentDateUnadjusted)
}

// HasUnderlyingPaymentStreamFinalPricePaymentDateRelativeTo returns true if UnderlyingPaymentStreamFinalPricePaymentDateRelativeTo is present, Tag 42950.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamFinalPricePaymentDateRelativeTo() bool {
	return m.Has(tag.UnderlyingPaymentStreamFinalPricePaymentDateRelativeTo)
}

// HasUnderlyingPaymentStreamFinalPricePaymentDateOffsetPeriod returns true if UnderlyingPaymentStreamFinalPricePaymentDateOffsetPeriod is present, Tag 42951.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamFinalPricePaymentDateOffsetPeriod() bool {
	return m.Has(tag.UnderlyingPaymentStreamFinalPricePaymentDateOffsetPeriod)
}

// HasUnderlyingPaymentStreamFinalPricePaymentDateOffsetUnit returns true if UnderlyingPaymentStreamFinalPricePaymentDateOffsetUnit is present, Tag 42952.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamFinalPricePaymentDateOffsetUnit() bool {
	return m.Has(tag.UnderlyingPaymentStreamFinalPricePaymentDateOffsetUnit)
}

// HasUnderlyingPaymentStreamFinalPricePaymentDateOffsetDayType returns true if UnderlyingPaymentStreamFinalPricePaymentDateOffsetDayType is present, Tag 42953.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamFinalPricePaymentDateOffsetDayType() bool {
	return m.Has(tag.UnderlyingPaymentStreamFinalPricePaymentDateOffsetDayType)
}

// HasUnderlyingPaymentStreamFinalPricePaymentDateAdjusted returns true if UnderlyingPaymentStreamFinalPricePaymentDateAdjusted is present, Tag 42954.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamFinalPricePaymentDateAdjusted() bool {
	return m.Has(tag.UnderlyingPaymentStreamFinalPricePaymentDateAdjusted)
}

// HasUnderlyingPaymentStreamResetDateRelativeTo returns true if UnderlyingPaymentStreamResetDateRelativeTo is present, Tag 40592.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamResetDateRelativeTo() bool {
	return m.Has(tag.UnderlyingPaymentStreamResetDateRelativeTo)
}

// HasUnderlyingPaymentStreamResetDateBusinessDayConvention returns true if UnderlyingPaymentStreamResetDateBusinessDayConvention is present, Tag 40593.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamResetDateBusinessDayConvention() bool {
	return m.Has(tag.UnderlyingPaymentStreamResetDateBusinessDayConvention)
}

// HasNoUnderlyingPaymentStreamResetDateBusinessCenters returns true if NoUnderlyingPaymentStreamResetDateBusinessCenters is present, Tag 40970.
func (m NoUnderlyingStreams) HasNoUnderlyingPaymentStreamResetDateBusinessCenters() bool {
	return m.Has(tag.NoUnderlyingPaymentStreamResetDateBusinessCenters)
}

// HasUnderlyingPaymentStreamResetFrequencyPeriod returns true if UnderlyingPaymentStreamResetFrequencyPeriod is present, Tag 40595.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamResetFrequencyPeriod() bool {
	return m.Has(tag.UnderlyingPaymentStreamResetFrequencyPeriod)
}

// HasUnderlyingPaymentStreamResetFrequencyUnit returns true if UnderlyingPaymentStreamResetFrequencyUnit is present, Tag 40596.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamResetFrequencyUnit() bool {
	return m.Has(tag.UnderlyingPaymentStreamResetFrequencyUnit)
}

// HasUnderlyingPaymentStreamResetWeeklyRollConvention returns true if UnderlyingPaymentStreamResetWeeklyRollConvention is present, Tag 40597.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamResetWeeklyRollConvention() bool {
	return m.Has(tag.UnderlyingPaymentStreamResetWeeklyRollConvention)
}

// HasUnderlyingPaymentStreamInitialFixingDateRelativeTo returns true if UnderlyingPaymentStreamInitialFixingDateRelativeTo is present, Tag 40598.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamInitialFixingDateRelativeTo() bool {
	return m.Has(tag.UnderlyingPaymentStreamInitialFixingDateRelativeTo)
}

// HasUnderlyingPaymentStreamInitialFixingDateBusinessDayConvention returns true if UnderlyingPaymentStreamInitialFixingDateBusinessDayConvention is present, Tag 40599.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamInitialFixingDateBusinessDayConvention() bool {
	return m.Has(tag.UnderlyingPaymentStreamInitialFixingDateBusinessDayConvention)
}

// HasNoUnderlyingPaymentStreamInitialFixingDateBusinessCenters returns true if NoUnderlyingPaymentStreamInitialFixingDateBusinessCenters is present, Tag 40971.
func (m NoUnderlyingStreams) HasNoUnderlyingPaymentStreamInitialFixingDateBusinessCenters() bool {
	return m.Has(tag.NoUnderlyingPaymentStreamInitialFixingDateBusinessCenters)
}

// HasUnderlyingPaymentStreamInitialFixingDateOffsetPeriod returns true if UnderlyingPaymentStreamInitialFixingDateOffsetPeriod is present, Tag 40601.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamInitialFixingDateOffsetPeriod() bool {
	return m.Has(tag.UnderlyingPaymentStreamInitialFixingDateOffsetPeriod)
}

// HasUnderlyingPaymentStreamInitialFixingDateOffsetUnit returns true if UnderlyingPaymentStreamInitialFixingDateOffsetUnit is present, Tag 40602.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamInitialFixingDateOffsetUnit() bool {
	return m.Has(tag.UnderlyingPaymentStreamInitialFixingDateOffsetUnit)
}

// HasUnderlyingPaymentStreamInitialFixingDateOffsetDayType returns true if UnderlyingPaymentStreamInitialFixingDateOffsetDayType is present, Tag 40603.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamInitialFixingDateOffsetDayType() bool {
	return m.Has(tag.UnderlyingPaymentStreamInitialFixingDateOffsetDayType)
}

// HasUnderlyingPaymentStreamInitialFixingDateAdjusted returns true if UnderlyingPaymentStreamInitialFixingDateAdjusted is present, Tag 40604.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamInitialFixingDateAdjusted() bool {
	return m.Has(tag.UnderlyingPaymentStreamInitialFixingDateAdjusted)
}

// HasUnderlyingPaymentStreamFixingDateRelativeTo returns true if UnderlyingPaymentStreamFixingDateRelativeTo is present, Tag 40605.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamFixingDateRelativeTo() bool {
	return m.Has(tag.UnderlyingPaymentStreamFixingDateRelativeTo)
}

// HasUnderlyingPaymentStreamFixingDateBusinessDayConvention returns true if UnderlyingPaymentStreamFixingDateBusinessDayConvention is present, Tag 40606.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamFixingDateBusinessDayConvention() bool {
	return m.Has(tag.UnderlyingPaymentStreamFixingDateBusinessDayConvention)
}

// HasNoUnderlyingPaymentStreamFixingDateBusinessCenters returns true if NoUnderlyingPaymentStreamFixingDateBusinessCenters is present, Tag 40972.
func (m NoUnderlyingStreams) HasNoUnderlyingPaymentStreamFixingDateBusinessCenters() bool {
	return m.Has(tag.NoUnderlyingPaymentStreamFixingDateBusinessCenters)
}

// HasUnderlyingPaymentStreamFixingDateOffsetPeriod returns true if UnderlyingPaymentStreamFixingDateOffsetPeriod is present, Tag 40608.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamFixingDateOffsetPeriod() bool {
	return m.Has(tag.UnderlyingPaymentStreamFixingDateOffsetPeriod)
}

// HasUnderlyingPaymentStreamFixingDateOffsetUnit returns true if UnderlyingPaymentStreamFixingDateOffsetUnit is present, Tag 40609.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamFixingDateOffsetUnit() bool {
	return m.Has(tag.UnderlyingPaymentStreamFixingDateOffsetUnit)
}

// HasUnderlyingPaymentStreamFixingDateOffsetDayType returns true if UnderlyingPaymentStreamFixingDateOffsetDayType is present, Tag 40610.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamFixingDateOffsetDayType() bool {
	return m.Has(tag.UnderlyingPaymentStreamFixingDateOffsetDayType)
}

// HasUnderlyingPaymentStreamFixingDateAdjusted returns true if UnderlyingPaymentStreamFixingDateAdjusted is present, Tag 40611.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamFixingDateAdjusted() bool {
	return m.Has(tag.UnderlyingPaymentStreamFixingDateAdjusted)
}

// HasUnderlyingPaymentStreamRateCutoffDateOffsetPeriod returns true if UnderlyingPaymentStreamRateCutoffDateOffsetPeriod is present, Tag 40612.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamRateCutoffDateOffsetPeriod() bool {
	return m.Has(tag.UnderlyingPaymentStreamRateCutoffDateOffsetPeriod)
}

// HasUnderlyingPaymentStreamRateCutoffDateOffsetUnit returns true if UnderlyingPaymentStreamRateCutoffDateOffsetUnit is present, Tag 40613.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamRateCutoffDateOffsetUnit() bool {
	return m.Has(tag.UnderlyingPaymentStreamRateCutoffDateOffsetUnit)
}

// HasUnderlyingPaymentStreamRateCutoffDateOffsetDayType returns true if UnderlyingPaymentStreamRateCutoffDateOffsetDayType is present, Tag 40614.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamRateCutoffDateOffsetDayType() bool {
	return m.Has(tag.UnderlyingPaymentStreamRateCutoffDateOffsetDayType)
}

// HasNoUnderlyingPaymentStreamFixingDates returns true if NoUnderlyingPaymentStreamFixingDates is present, Tag 42955.
func (m NoUnderlyingStreams) HasNoUnderlyingPaymentStreamFixingDates() bool {
	return m.Has(tag.NoUnderlyingPaymentStreamFixingDates)
}

// HasUnderlyingPaymentStreamRate returns true if UnderlyingPaymentStreamRate is present, Tag 40615.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamRate() bool {
	return m.Has(tag.UnderlyingPaymentStreamRate)
}

// HasUnderlyingPaymentStreamFixedAmount returns true if UnderlyingPaymentStreamFixedAmount is present, Tag 40616.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamFixedAmount() bool {
	return m.Has(tag.UnderlyingPaymentStreamFixedAmount)
}

// HasUnderlyingPaymentStreamRateOrAmountCurrency returns true if UnderlyingPaymentStreamRateOrAmountCurrency is present, Tag 40617.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamRateOrAmountCurrency() bool {
	return m.Has(tag.UnderlyingPaymentStreamRateOrAmountCurrency)
}

// HasUnderlyingPaymentStreamFutureValueNotional returns true if UnderlyingPaymentStreamFutureValueNotional is present, Tag 40618.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamFutureValueNotional() bool {
	return m.Has(tag.UnderlyingPaymentStreamFutureValueNotional)
}

// HasUnderlyingPaymentStreamFutureValueDateAdjusted returns true if UnderlyingPaymentStreamFutureValueDateAdjusted is present, Tag 40619.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamFutureValueDateAdjusted() bool {
	return m.Has(tag.UnderlyingPaymentStreamFutureValueDateAdjusted)
}

// HasUnderlyingPaymentStreamFixedAmountUnitOfMeasure returns true if UnderlyingPaymentStreamFixedAmountUnitOfMeasure is present, Tag 41904.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamFixedAmountUnitOfMeasure() bool {
	return m.Has(tag.UnderlyingPaymentStreamFixedAmountUnitOfMeasure)
}

// HasUnderlyingPaymentStreamTotalFixedAmount returns true if UnderlyingPaymentStreamTotalFixedAmount is present, Tag 41905.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamTotalFixedAmount() bool {
	return m.Has(tag.UnderlyingPaymentStreamTotalFixedAmount)
}

// HasUnderlyingPaymentStreamWorldScaleRate returns true if UnderlyingPaymentStreamWorldScaleRate is present, Tag 41906.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamWorldScaleRate() bool {
	return m.Has(tag.UnderlyingPaymentStreamWorldScaleRate)
}

// HasUnderlyingPaymentStreamContractPrice returns true if UnderlyingPaymentStreamContractPrice is present, Tag 41907.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamContractPrice() bool {
	return m.Has(tag.UnderlyingPaymentStreamContractPrice)
}

// HasUnderlyingPaymentStreamContractPriceCurrency returns true if UnderlyingPaymentStreamContractPriceCurrency is present, Tag 41908.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamContractPriceCurrency() bool {
	return m.Has(tag.UnderlyingPaymentStreamContractPriceCurrency)
}

// HasUnderlyingPaymentStreamRateIndex returns true if UnderlyingPaymentStreamRateIndex is present, Tag 40620.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamRateIndex() bool {
	return m.Has(tag.UnderlyingPaymentStreamRateIndex)
}

// HasUnderlyingPaymentStreamRateIndexSource returns true if UnderlyingPaymentStreamRateIndexSource is present, Tag 40621.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamRateIndexSource() bool {
	return m.Has(tag.UnderlyingPaymentStreamRateIndexSource)
}

// HasUnderlyingPaymentStreamRateIndexCurveUnit returns true if UnderlyingPaymentStreamRateIndexCurveUnit is present, Tag 40622.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamRateIndexCurveUnit() bool {
	return m.Has(tag.UnderlyingPaymentStreamRateIndexCurveUnit)
}

// HasUnderlyingPaymentStreamRateIndexCurvePeriod returns true if UnderlyingPaymentStreamRateIndexCurvePeriod is present, Tag 40623.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamRateIndexCurvePeriod() bool {
	return m.Has(tag.UnderlyingPaymentStreamRateIndexCurvePeriod)
}

// HasUnderlyingPaymentStreamRateMultiplier returns true if UnderlyingPaymentStreamRateMultiplier is present, Tag 40624.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamRateMultiplier() bool {
	return m.Has(tag.UnderlyingPaymentStreamRateMultiplier)
}

// HasUnderlyingPaymentStreamRateSpread returns true if UnderlyingPaymentStreamRateSpread is present, Tag 40625.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamRateSpread() bool {
	return m.Has(tag.UnderlyingPaymentStreamRateSpread)
}

// HasUnderlyingPaymentStreamRateSpreadPositionType returns true if UnderlyingPaymentStreamRateSpreadPositionType is present, Tag 40626.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamRateSpreadPositionType() bool {
	return m.Has(tag.UnderlyingPaymentStreamRateSpreadPositionType)
}

// HasUnderlyingPaymentStreamRateTreatment returns true if UnderlyingPaymentStreamRateTreatment is present, Tag 40627.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamRateTreatment() bool {
	return m.Has(tag.UnderlyingPaymentStreamRateTreatment)
}

// HasUnderlyingPaymentStreamCapRate returns true if UnderlyingPaymentStreamCapRate is present, Tag 40628.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamCapRate() bool {
	return m.Has(tag.UnderlyingPaymentStreamCapRate)
}

// HasUnderlyingPaymentStreamCapRateBuySide returns true if UnderlyingPaymentStreamCapRateBuySide is present, Tag 40629.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamCapRateBuySide() bool {
	return m.Has(tag.UnderlyingPaymentStreamCapRateBuySide)
}

// HasUnderlyingPaymentStreamCapRateSellSide returns true if UnderlyingPaymentStreamCapRateSellSide is present, Tag 40630.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamCapRateSellSide() bool {
	return m.Has(tag.UnderlyingPaymentStreamCapRateSellSide)
}

// HasUnderlyingPaymentStreamFloorRate returns true if UnderlyingPaymentStreamFloorRate is present, Tag 40631.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamFloorRate() bool {
	return m.Has(tag.UnderlyingPaymentStreamFloorRate)
}

// HasUnderlyingPaymentStreamFloorRateBuySide returns true if UnderlyingPaymentStreamFloorRateBuySide is present, Tag 40632.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamFloorRateBuySide() bool {
	return m.Has(tag.UnderlyingPaymentStreamFloorRateBuySide)
}

// HasUnderlyingPaymentStreamFloorRateSellSide returns true if UnderlyingPaymentStreamFloorRateSellSide is present, Tag 40633.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamFloorRateSellSide() bool {
	return m.Has(tag.UnderlyingPaymentStreamFloorRateSellSide)
}

// HasUnderlyingPaymentStreamInitialRate returns true if UnderlyingPaymentStreamInitialRate is present, Tag 40634.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamInitialRate() bool {
	return m.Has(tag.UnderlyingPaymentStreamInitialRate)
}

// HasUnderlyingPaymentStreamFinalRateRoundingDirection returns true if UnderlyingPaymentStreamFinalRateRoundingDirection is present, Tag 40635.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamFinalRateRoundingDirection() bool {
	return m.Has(tag.UnderlyingPaymentStreamFinalRateRoundingDirection)
}

// HasUnderlyingPaymentStreamFinalRatePrecision returns true if UnderlyingPaymentStreamFinalRatePrecision is present, Tag 40636.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamFinalRatePrecision() bool {
	return m.Has(tag.UnderlyingPaymentStreamFinalRatePrecision)
}

// HasUnderlyingPaymentStreamAveragingMethod returns true if UnderlyingPaymentStreamAveragingMethod is present, Tag 40637.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamAveragingMethod() bool {
	return m.Has(tag.UnderlyingPaymentStreamAveragingMethod)
}

// HasUnderlyingPaymentStreamNegativeRateTreatment returns true if UnderlyingPaymentStreamNegativeRateTreatment is present, Tag 40638.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamNegativeRateTreatment() bool {
	return m.Has(tag.UnderlyingPaymentStreamNegativeRateTreatment)
}

// HasUnderlyingPaymentStreamInflationLagPeriod returns true if UnderlyingPaymentStreamInflationLagPeriod is present, Tag 40639.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamInflationLagPeriod() bool {
	return m.Has(tag.UnderlyingPaymentStreamInflationLagPeriod)
}

// HasUnderlyingPaymentStreamInflationLagUnit returns true if UnderlyingPaymentStreamInflationLagUnit is present, Tag 40640.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamInflationLagUnit() bool {
	return m.Has(tag.UnderlyingPaymentStreamInflationLagUnit)
}

// HasUnderlyingPaymentStreamInflationLagDayType returns true if UnderlyingPaymentStreamInflationLagDayType is present, Tag 40641.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamInflationLagDayType() bool {
	return m.Has(tag.UnderlyingPaymentStreamInflationLagDayType)
}

// HasUnderlyingPaymentStreamInflationInterpolationMethod returns true if UnderlyingPaymentStreamInflationInterpolationMethod is present, Tag 40642.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamInflationInterpolationMethod() bool {
	return m.Has(tag.UnderlyingPaymentStreamInflationInterpolationMethod)
}

// HasUnderlyingPaymentStreamInflationIndexSource returns true if UnderlyingPaymentStreamInflationIndexSource is present, Tag 40643.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamInflationIndexSource() bool {
	return m.Has(tag.UnderlyingPaymentStreamInflationIndexSource)
}

// HasUnderlyingPaymentStreamInflationPublicationSource returns true if UnderlyingPaymentStreamInflationPublicationSource is present, Tag 40644.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamInflationPublicationSource() bool {
	return m.Has(tag.UnderlyingPaymentStreamInflationPublicationSource)
}

// HasUnderlyingPaymentStreamInflationInitialIndexLevel returns true if UnderlyingPaymentStreamInflationInitialIndexLevel is present, Tag 40645.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamInflationInitialIndexLevel() bool {
	return m.Has(tag.UnderlyingPaymentStreamInflationInitialIndexLevel)
}

// HasUnderlyingPaymentStreamInflationFallbackBondApplicable returns true if UnderlyingPaymentStreamInflationFallbackBondApplicable is present, Tag 40646.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamInflationFallbackBondApplicable() bool {
	return m.Has(tag.UnderlyingPaymentStreamInflationFallbackBondApplicable)
}

// HasUnderlyingPaymentStreamFRADiscounting returns true if UnderlyingPaymentStreamFRADiscounting is present, Tag 40647.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamFRADiscounting() bool {
	return m.Has(tag.UnderlyingPaymentStreamFRADiscounting)
}

// HasUnderlyingPaymentStreamRateIndex2CurveUnit returns true if UnderlyingPaymentStreamRateIndex2CurveUnit is present, Tag 41911.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamRateIndex2CurveUnit() bool {
	return m.Has(tag.UnderlyingPaymentStreamRateIndex2CurveUnit)
}

// HasUnderlyingPaymentStreamRateIndex2CurvePeriod returns true if UnderlyingPaymentStreamRateIndex2CurvePeriod is present, Tag 41912.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamRateIndex2CurvePeriod() bool {
	return m.Has(tag.UnderlyingPaymentStreamRateIndex2CurvePeriod)
}

// HasUnderlyingPaymentStreamRateIndexLocation returns true if UnderlyingPaymentStreamRateIndexLocation is present, Tag 41913.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamRateIndexLocation() bool {
	return m.Has(tag.UnderlyingPaymentStreamRateIndexLocation)
}

// HasUnderlyingPaymentStreamRateIndexLevel returns true if UnderlyingPaymentStreamRateIndexLevel is present, Tag 41914.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamRateIndexLevel() bool {
	return m.Has(tag.UnderlyingPaymentStreamRateIndexLevel)
}

// HasUnderlyingPaymentStreamRateIndexUnitOfMeasure returns true if UnderlyingPaymentStreamRateIndexUnitOfMeasure is present, Tag 41915.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamRateIndexUnitOfMeasure() bool {
	return m.Has(tag.UnderlyingPaymentStreamRateIndexUnitOfMeasure)
}

// HasUnderlyingPaymentStreamSettlLevel returns true if UnderlyingPaymentStreamSettlLevel is present, Tag 41916.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamSettlLevel() bool {
	return m.Has(tag.UnderlyingPaymentStreamSettlLevel)
}

// HasUnderlyingPaymentStreamReferenceLevel returns true if UnderlyingPaymentStreamReferenceLevel is present, Tag 41917.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamReferenceLevel() bool {
	return m.Has(tag.UnderlyingPaymentStreamReferenceLevel)
}

// HasUnderlyingPaymentStreamReferenceLevelUnitOfMeasure returns true if UnderlyingPaymentStreamReferenceLevelUnitOfMeasure is present, Tag 41918.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamReferenceLevelUnitOfMeasure() bool {
	return m.Has(tag.UnderlyingPaymentStreamReferenceLevelUnitOfMeasure)
}

// HasUnderlyingPaymentStreamReferenceLevelEqualsZeroIndicator returns true if UnderlyingPaymentStreamReferenceLevelEqualsZeroIndicator is present, Tag 41919.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamReferenceLevelEqualsZeroIndicator() bool {
	return m.Has(tag.UnderlyingPaymentStreamReferenceLevelEqualsZeroIndicator)
}

// HasUnderlyingPaymentStreamRateSpreadCurrency returns true if UnderlyingPaymentStreamRateSpreadCurrency is present, Tag 41920.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamRateSpreadCurrency() bool {
	return m.Has(tag.UnderlyingPaymentStreamRateSpreadCurrency)
}

// HasUnderlyingPaymentStreamRateSpreadUnitOfMeasure returns true if UnderlyingPaymentStreamRateSpreadUnitOfMeasure is present, Tag 41921.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamRateSpreadUnitOfMeasure() bool {
	return m.Has(tag.UnderlyingPaymentStreamRateSpreadUnitOfMeasure)
}

// HasUnderlyingPaymentStreamRateConversionFactor returns true if UnderlyingPaymentStreamRateConversionFactor is present, Tag 41922.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamRateConversionFactor() bool {
	return m.Has(tag.UnderlyingPaymentStreamRateConversionFactor)
}

// HasUnderlyingPaymentStreamRateSpreadType returns true if UnderlyingPaymentStreamRateSpreadType is present, Tag 41923.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamRateSpreadType() bool {
	return m.Has(tag.UnderlyingPaymentStreamRateSpreadType)
}

// HasUnderlyingPaymentStreamLastResetRate returns true if UnderlyingPaymentStreamLastResetRate is present, Tag 41924.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamLastResetRate() bool {
	return m.Has(tag.UnderlyingPaymentStreamLastResetRate)
}

// HasUnderlyingPaymentStreamFinalRate returns true if UnderlyingPaymentStreamFinalRate is present, Tag 41925.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamFinalRate() bool {
	return m.Has(tag.UnderlyingPaymentStreamFinalRate)
}

// HasUnderlyingPaymentStreamCalculationLagPeriod returns true if UnderlyingPaymentStreamCalculationLagPeriod is present, Tag 41926.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamCalculationLagPeriod() bool {
	return m.Has(tag.UnderlyingPaymentStreamCalculationLagPeriod)
}

// HasUnderlyingPaymentStreamCalculationLagUnit returns true if UnderlyingPaymentStreamCalculationLagUnit is present, Tag 41927.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamCalculationLagUnit() bool {
	return m.Has(tag.UnderlyingPaymentStreamCalculationLagUnit)
}

// HasUnderlyingPaymentStreamFirstObservationDateOffsetPeriod returns true if UnderlyingPaymentStreamFirstObservationDateOffsetPeriod is present, Tag 41928.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamFirstObservationDateOffsetPeriod() bool {
	return m.Has(tag.UnderlyingPaymentStreamFirstObservationDateOffsetPeriod)
}

// HasUnderlyingPaymentStreamFirstObservationDateOffsetUnit returns true if UnderlyingPaymentStreamFirstObservationDateOffsetUnit is present, Tag 41929.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamFirstObservationDateOffsetUnit() bool {
	return m.Has(tag.UnderlyingPaymentStreamFirstObservationDateOffsetUnit)
}

// HasUnderlyingPaymentStreamPricingDayType returns true if UnderlyingPaymentStreamPricingDayType is present, Tag 41930.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamPricingDayType() bool {
	return m.Has(tag.UnderlyingPaymentStreamPricingDayType)
}

// HasUnderlyingPaymentStreamPricingDayDistribution returns true if UnderlyingPaymentStreamPricingDayDistribution is present, Tag 41931.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamPricingDayDistribution() bool {
	return m.Has(tag.UnderlyingPaymentStreamPricingDayDistribution)
}

// HasUnderlyingPaymentStreamPricingDayCount returns true if UnderlyingPaymentStreamPricingDayCount is present, Tag 41932.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamPricingDayCount() bool {
	return m.Has(tag.UnderlyingPaymentStreamPricingDayCount)
}

// HasUnderlyingPaymentStreamPricingBusinessCalendar returns true if UnderlyingPaymentStreamPricingBusinessCalendar is present, Tag 41933.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamPricingBusinessCalendar() bool {
	return m.Has(tag.UnderlyingPaymentStreamPricingBusinessCalendar)
}

// HasUnderlyingPaymentStreamPricingBusinessDayConvention returns true if UnderlyingPaymentStreamPricingBusinessDayConvention is present, Tag 41934.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamPricingBusinessDayConvention() bool {
	return m.Has(tag.UnderlyingPaymentStreamPricingBusinessDayConvention)
}

// HasNoUnderlyingPaymentStreamPricingBusinessCenters returns true if NoUnderlyingPaymentStreamPricingBusinessCenters is present, Tag 41909.
func (m NoUnderlyingStreams) HasNoUnderlyingPaymentStreamPricingBusinessCenters() bool {
	return m.Has(tag.NoUnderlyingPaymentStreamPricingBusinessCenters)
}

// HasNoUnderlyingPaymentStreamPricingDays returns true if NoUnderlyingPaymentStreamPricingDays is present, Tag 41944.
func (m NoUnderlyingStreams) HasNoUnderlyingPaymentStreamPricingDays() bool {
	return m.Has(tag.NoUnderlyingPaymentStreamPricingDays)
}

// HasNoUnderlyingPaymentStreamPricingDates returns true if NoUnderlyingPaymentStreamPricingDates is present, Tag 41941.
func (m NoUnderlyingStreams) HasNoUnderlyingPaymentStreamPricingDates() bool {
	return m.Has(tag.NoUnderlyingPaymentStreamPricingDates)
}

// HasUnderlyingPaymentStreamFirstObservationDateUnadjusted returns true if UnderlyingPaymentStreamFirstObservationDateUnadjusted is present, Tag 42958.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamFirstObservationDateUnadjusted() bool {
	return m.Has(tag.UnderlyingPaymentStreamFirstObservationDateUnadjusted)
}

// HasUnderlyingPaymentStreamFirstObservationDateRelativeTo returns true if UnderlyingPaymentStreamFirstObservationDateRelativeTo is present, Tag 42959.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamFirstObservationDateRelativeTo() bool {
	return m.Has(tag.UnderlyingPaymentStreamFirstObservationDateRelativeTo)
}

// HasUnderlyingPaymentStreamFirstObservationDateOffsetDayType returns true if UnderlyingPaymentStreamFirstObservationDateOffsetDayType is present, Tag 42960.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamFirstObservationDateOffsetDayType() bool {
	return m.Has(tag.UnderlyingPaymentStreamFirstObservationDateOffsetDayType)
}

// HasUnderlyingPaymentStreamFirstObservationDateAdjusted returns true if UnderlyingPaymentStreamFirstObservationDateAdjusted is present, Tag 42961.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamFirstObservationDateAdjusted() bool {
	return m.Has(tag.UnderlyingPaymentStreamFirstObservationDateAdjusted)
}

// HasUnderlyingPaymentStreamUnderlierRefID returns true if UnderlyingPaymentStreamUnderlierRefID is present, Tag 42962.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamUnderlierRefID() bool {
	return m.Has(tag.UnderlyingPaymentStreamUnderlierRefID)
}

// HasUnderlyingPaymentStreamFormulaCurrency returns true if UnderlyingPaymentStreamFormulaCurrency is present, Tag 42978.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamFormulaCurrency() bool {
	return m.Has(tag.UnderlyingPaymentStreamFormulaCurrency)
}

// HasUnderlyingPaymentStreamFormulaCurrencyDeterminationMethod returns true if UnderlyingPaymentStreamFormulaCurrencyDeterminationMethod is present, Tag 42979.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamFormulaCurrencyDeterminationMethod() bool {
	return m.Has(tag.UnderlyingPaymentStreamFormulaCurrencyDeterminationMethod)
}

// HasUnderlyingPaymentStreamFormulaReferenceAmount returns true if UnderlyingPaymentStreamFormulaReferenceAmount is present, Tag 42980.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamFormulaReferenceAmount() bool {
	return m.Has(tag.UnderlyingPaymentStreamFormulaReferenceAmount)
}

// HasNoUnderlyingPaymentStreamFormulas returns true if NoUnderlyingPaymentStreamFormulas is present, Tag 42981.
func (m NoUnderlyingStreams) HasNoUnderlyingPaymentStreamFormulas() bool {
	return m.Has(tag.NoUnderlyingPaymentStreamFormulas)
}

// HasUnderlyingPaymentStreamFormulaImageLength returns true if UnderlyingPaymentStreamFormulaImageLength is present, Tag 42947.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamFormulaImageLength() bool {
	return m.Has(tag.UnderlyingPaymentStreamFormulaImageLength)
}

// HasUnderlyingPaymentStreamFormulaImage returns true if UnderlyingPaymentStreamFormulaImage is present, Tag 42948.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamFormulaImage() bool {
	return m.Has(tag.UnderlyingPaymentStreamFormulaImage)
}

// HasUnderlyingDividendReinvestmentIndicator returns true if UnderlyingDividendReinvestmentIndicator is present, Tag 42826.
func (m NoUnderlyingStreams) HasUnderlyingDividendReinvestmentIndicator() bool {
	return m.Has(tag.UnderlyingDividendReinvestmentIndicator)
}

// HasUnderlyingDividendEntitlementEvent returns true if UnderlyingDividendEntitlementEvent is present, Tag 42827.
func (m NoUnderlyingStreams) HasUnderlyingDividendEntitlementEvent() bool {
	return m.Has(tag.UnderlyingDividendEntitlementEvent)
}

// HasUnderlyingDividendAmountType returns true if UnderlyingDividendAmountType is present, Tag 42828.
func (m NoUnderlyingStreams) HasUnderlyingDividendAmountType() bool {
	return m.Has(tag.UnderlyingDividendAmountType)
}

// HasUnderlyingDividendUnderlierRefID returns true if UnderlyingDividendUnderlierRefID is present, Tag 42829.
func (m NoUnderlyingStreams) HasUnderlyingDividendUnderlierRefID() bool {
	return m.Has(tag.UnderlyingDividendUnderlierRefID)
}

// HasNoUnderlyingDividendPeriods returns true if NoUnderlyingDividendPeriods is present, Tag 42862.
func (m NoUnderlyingStreams) HasNoUnderlyingDividendPeriods() bool {
	return m.Has(tag.NoUnderlyingDividendPeriods)
}

// HasUnderlyingExtraordinaryDividendPartySide returns true if UnderlyingExtraordinaryDividendPartySide is present, Tag 42830.
func (m NoUnderlyingStreams) HasUnderlyingExtraordinaryDividendPartySide() bool {
	return m.Has(tag.UnderlyingExtraordinaryDividendPartySide)
}

// HasUnderlyingExtraordinaryDividendAmountType returns true if UnderlyingExtraordinaryDividendAmountType is present, Tag 42831.
func (m NoUnderlyingStreams) HasUnderlyingExtraordinaryDividendAmountType() bool {
	return m.Has(tag.UnderlyingExtraordinaryDividendAmountType)
}

// HasUnderlyingExtraordinaryDividendCurrency returns true if UnderlyingExtraordinaryDividendCurrency is present, Tag 42832.
func (m NoUnderlyingStreams) HasUnderlyingExtraordinaryDividendCurrency() bool {
	return m.Has(tag.UnderlyingExtraordinaryDividendCurrency)
}

// HasUnderlyingExtraordinaryDividendDeterminationMethod returns true if UnderlyingExtraordinaryDividendDeterminationMethod is present, Tag 42833.
func (m NoUnderlyingStreams) HasUnderlyingExtraordinaryDividendDeterminationMethod() bool {
	return m.Has(tag.UnderlyingExtraordinaryDividendDeterminationMethod)
}

// HasUnderlyingDividendFXTriggerDateRelativeTo returns true if UnderlyingDividendFXTriggerDateRelativeTo is present, Tag 42846.
func (m NoUnderlyingStreams) HasUnderlyingDividendFXTriggerDateRelativeTo() bool {
	return m.Has(tag.UnderlyingDividendFXTriggerDateRelativeTo)
}

// HasUnderlyingDividendFXTriggerDateOffsetPeriod returns true if UnderlyingDividendFXTriggerDateOffsetPeriod is present, Tag 42847.
func (m NoUnderlyingStreams) HasUnderlyingDividendFXTriggerDateOffsetPeriod() bool {
	return m.Has(tag.UnderlyingDividendFXTriggerDateOffsetPeriod)
}

// HasUnderlyingDividendFXTriggerDateOffsetUnit returns true if UnderlyingDividendFXTriggerDateOffsetUnit is present, Tag 42848.
func (m NoUnderlyingStreams) HasUnderlyingDividendFXTriggerDateOffsetUnit() bool {
	return m.Has(tag.UnderlyingDividendFXTriggerDateOffsetUnit)
}

// HasUnderlyingDividendFXTriggerDateOffsetDayType returns true if UnderlyingDividendFXTriggerDateOffsetDayType is present, Tag 42849.
func (m NoUnderlyingStreams) HasUnderlyingDividendFXTriggerDateOffsetDayType() bool {
	return m.Has(tag.UnderlyingDividendFXTriggerDateOffsetDayType)
}

// HasUnderlyingDividendFXTriggerDateUnadjusted returns true if UnderlyingDividendFXTriggerDateUnadjusted is present, Tag 42850.
func (m NoUnderlyingStreams) HasUnderlyingDividendFXTriggerDateUnadjusted() bool {
	return m.Has(tag.UnderlyingDividendFXTriggerDateUnadjusted)
}

// HasUnderlyingDividendFXTriggerDateBusinessDayConvention returns true if UnderlyingDividendFXTriggerDateBusinessDayConvention is present, Tag 42851.
func (m NoUnderlyingStreams) HasUnderlyingDividendFXTriggerDateBusinessDayConvention() bool {
	return m.Has(tag.UnderlyingDividendFXTriggerDateBusinessDayConvention)
}

// HasNoUnderlyingDividendFXTriggerDateBusinessCenters returns true if NoUnderlyingDividendFXTriggerDateBusinessCenters is present, Tag 42853.
func (m NoUnderlyingStreams) HasNoUnderlyingDividendFXTriggerDateBusinessCenters() bool {
	return m.Has(tag.NoUnderlyingDividendFXTriggerDateBusinessCenters)
}

// HasUnderlyingDividendFXTriggerDateAdjusted returns true if UnderlyingDividendFXTriggerDateAdjusted is present, Tag 42852.
func (m NoUnderlyingStreams) HasUnderlyingDividendFXTriggerDateAdjusted() bool {
	return m.Has(tag.UnderlyingDividendFXTriggerDateAdjusted)
}

// HasUnderlyingDividendFloatingRateIndex returns true if UnderlyingDividendFloatingRateIndex is present, Tag 42801.
func (m NoUnderlyingStreams) HasUnderlyingDividendFloatingRateIndex() bool {
	return m.Has(tag.UnderlyingDividendFloatingRateIndex)
}

// HasUnderlyingDividendFloatingRateIndexCurvePeriod returns true if UnderlyingDividendFloatingRateIndexCurvePeriod is present, Tag 42802.
func (m NoUnderlyingStreams) HasUnderlyingDividendFloatingRateIndexCurvePeriod() bool {
	return m.Has(tag.UnderlyingDividendFloatingRateIndexCurvePeriod)
}

// HasUnderlyingDividendFloatingRateIndexCurveUnit returns true if UnderlyingDividendFloatingRateIndexCurveUnit is present, Tag 42803.
func (m NoUnderlyingStreams) HasUnderlyingDividendFloatingRateIndexCurveUnit() bool {
	return m.Has(tag.UnderlyingDividendFloatingRateIndexCurveUnit)
}

// HasUnderlyingDividendFloatingRateMultiplier returns true if UnderlyingDividendFloatingRateMultiplier is present, Tag 42804.
func (m NoUnderlyingStreams) HasUnderlyingDividendFloatingRateMultiplier() bool {
	return m.Has(tag.UnderlyingDividendFloatingRateMultiplier)
}

// HasUnderlyingDividendFloatingRateSpread returns true if UnderlyingDividendFloatingRateSpread is present, Tag 42805.
func (m NoUnderlyingStreams) HasUnderlyingDividendFloatingRateSpread() bool {
	return m.Has(tag.UnderlyingDividendFloatingRateSpread)
}

// HasUnderlyingDividendFloatingRateSpreadPositionType returns true if UnderlyingDividendFloatingRateSpreadPositionType is present, Tag 42806.
func (m NoUnderlyingStreams) HasUnderlyingDividendFloatingRateSpreadPositionType() bool {
	return m.Has(tag.UnderlyingDividendFloatingRateSpreadPositionType)
}

// HasUnderlyingDividendFloatingRateTreatment returns true if UnderlyingDividendFloatingRateTreatment is present, Tag 42807.
func (m NoUnderlyingStreams) HasUnderlyingDividendFloatingRateTreatment() bool {
	return m.Has(tag.UnderlyingDividendFloatingRateTreatment)
}

// HasUnderlyingDividendCapRate returns true if UnderlyingDividendCapRate is present, Tag 42808.
func (m NoUnderlyingStreams) HasUnderlyingDividendCapRate() bool {
	return m.Has(tag.UnderlyingDividendCapRate)
}

// HasUnderlyingDividendCapRateBuySide returns true if UnderlyingDividendCapRateBuySide is present, Tag 42809.
func (m NoUnderlyingStreams) HasUnderlyingDividendCapRateBuySide() bool {
	return m.Has(tag.UnderlyingDividendCapRateBuySide)
}

// HasUnderlyingDividendCapRateSellSide returns true if UnderlyingDividendCapRateSellSide is present, Tag 42810.
func (m NoUnderlyingStreams) HasUnderlyingDividendCapRateSellSide() bool {
	return m.Has(tag.UnderlyingDividendCapRateSellSide)
}

// HasUnderlyingDividendFloorRate returns true if UnderlyingDividendFloorRate is present, Tag 42811.
func (m NoUnderlyingStreams) HasUnderlyingDividendFloorRate() bool {
	return m.Has(tag.UnderlyingDividendFloorRate)
}

// HasUnderlyingDividendFloorRateBuySide returns true if UnderlyingDividendFloorRateBuySide is present, Tag 42812.
func (m NoUnderlyingStreams) HasUnderlyingDividendFloorRateBuySide() bool {
	return m.Has(tag.UnderlyingDividendFloorRateBuySide)
}

// HasUnderlyingDividendFloorRateSellSide returns true if UnderlyingDividendFloorRateSellSide is present, Tag 42813.
func (m NoUnderlyingStreams) HasUnderlyingDividendFloorRateSellSide() bool {
	return m.Has(tag.UnderlyingDividendFloorRateSellSide)
}

// HasUnderlyingDividendInitialRate returns true if UnderlyingDividendInitialRate is present, Tag 42814.
func (m NoUnderlyingStreams) HasUnderlyingDividendInitialRate() bool {
	return m.Has(tag.UnderlyingDividendInitialRate)
}

// HasUnderlyingDividendFinalRateRoundingDirection returns true if UnderlyingDividendFinalRateRoundingDirection is present, Tag 42815.
func (m NoUnderlyingStreams) HasUnderlyingDividendFinalRateRoundingDirection() bool {
	return m.Has(tag.UnderlyingDividendFinalRateRoundingDirection)
}

// HasUnderlyingDividendFinalRatePrecision returns true if UnderlyingDividendFinalRatePrecision is present, Tag 42816.
func (m NoUnderlyingStreams) HasUnderlyingDividendFinalRatePrecision() bool {
	return m.Has(tag.UnderlyingDividendFinalRatePrecision)
}

// HasUnderlyingDividendAveragingMethod returns true if UnderlyingDividendAveragingMethod is present, Tag 42817.
func (m NoUnderlyingStreams) HasUnderlyingDividendAveragingMethod() bool {
	return m.Has(tag.UnderlyingDividendAveragingMethod)
}

// HasUnderlyingDividendNegativeRateTreatment returns true if UnderlyingDividendNegativeRateTreatment is present, Tag 42818.
func (m NoUnderlyingStreams) HasUnderlyingDividendNegativeRateTreatment() bool {
	return m.Has(tag.UnderlyingDividendNegativeRateTreatment)
}

// HasUnderlyingDividendAccrualFixedRate returns true if UnderlyingDividendAccrualFixedRate is present, Tag 42834.
func (m NoUnderlyingStreams) HasUnderlyingDividendAccrualFixedRate() bool {
	return m.Has(tag.UnderlyingDividendAccrualFixedRate)
}

// HasUnderlyingDividendAccrualPaymentDateRelativeTo returns true if UnderlyingDividendAccrualPaymentDateRelativeTo is present, Tag 42819.
func (m NoUnderlyingStreams) HasUnderlyingDividendAccrualPaymentDateRelativeTo() bool {
	return m.Has(tag.UnderlyingDividendAccrualPaymentDateRelativeTo)
}

// HasUnderlyingDividendAccrualPaymentDateOffsetPeriod returns true if UnderlyingDividendAccrualPaymentDateOffsetPeriod is present, Tag 42820.
func (m NoUnderlyingStreams) HasUnderlyingDividendAccrualPaymentDateOffsetPeriod() bool {
	return m.Has(tag.UnderlyingDividendAccrualPaymentDateOffsetPeriod)
}

// HasUnderlyingDividendAccrualPaymentDateOffsetUnit returns true if UnderlyingDividendAccrualPaymentDateOffsetUnit is present, Tag 42821.
func (m NoUnderlyingStreams) HasUnderlyingDividendAccrualPaymentDateOffsetUnit() bool {
	return m.Has(tag.UnderlyingDividendAccrualPaymentDateOffsetUnit)
}

// HasUnderlyingDividendAccrualPaymentDateOffsetDayType returns true if UnderlyingDividendAccrualPaymentDateOffsetDayType is present, Tag 42822.
func (m NoUnderlyingStreams) HasUnderlyingDividendAccrualPaymentDateOffsetDayType() bool {
	return m.Has(tag.UnderlyingDividendAccrualPaymentDateOffsetDayType)
}

// HasUnderlyingDividendAccrualPaymentDateUnadjusted returns true if UnderlyingDividendAccrualPaymentDateUnadjusted is present, Tag 42823.
func (m NoUnderlyingStreams) HasUnderlyingDividendAccrualPaymentDateUnadjusted() bool {
	return m.Has(tag.UnderlyingDividendAccrualPaymentDateUnadjusted)
}

// HasUnderlyingDividendAccrualPaymentDateBusinessDayConvention returns true if UnderlyingDividendAccrualPaymentDateBusinessDayConvention is present, Tag 42824.
func (m NoUnderlyingStreams) HasUnderlyingDividendAccrualPaymentDateBusinessDayConvention() bool {
	return m.Has(tag.UnderlyingDividendAccrualPaymentDateBusinessDayConvention)
}

// HasNoUnderlyingDividendAccrualPaymentDateBusinessCenters returns true if NoUnderlyingDividendAccrualPaymentDateBusinessCenters is present, Tag 42799.
func (m NoUnderlyingStreams) HasNoUnderlyingDividendAccrualPaymentDateBusinessCenters() bool {
	return m.Has(tag.NoUnderlyingDividendAccrualPaymentDateBusinessCenters)
}

// HasUnderlyingDividendAccrualPaymentDateAdjusted returns true if UnderlyingDividendAccrualPaymentDateAdjusted is present, Tag 42825.
func (m NoUnderlyingStreams) HasUnderlyingDividendAccrualPaymentDateAdjusted() bool {
	return m.Has(tag.UnderlyingDividendAccrualPaymentDateAdjusted)
}

// HasUnderlyingDividendCompoundingMethod returns true if UnderlyingDividendCompoundingMethod is present, Tag 42835.
func (m NoUnderlyingStreams) HasUnderlyingDividendCompoundingMethod() bool {
	return m.Has(tag.UnderlyingDividendCompoundingMethod)
}

// HasUnderlyingDividendNumOfIndexUnits returns true if UnderlyingDividendNumOfIndexUnits is present, Tag 42836.
func (m NoUnderlyingStreams) HasUnderlyingDividendNumOfIndexUnits() bool {
	return m.Has(tag.UnderlyingDividendNumOfIndexUnits)
}

// HasUnderlyingDividendCashPercentage returns true if UnderlyingDividendCashPercentage is present, Tag 42837.
func (m NoUnderlyingStreams) HasUnderlyingDividendCashPercentage() bool {
	return m.Has(tag.UnderlyingDividendCashPercentage)
}

// HasUnderlyingDividendCashEquivalentPercentage returns true if UnderlyingDividendCashEquivalentPercentage is present, Tag 42838.
func (m NoUnderlyingStreams) HasUnderlyingDividendCashEquivalentPercentage() bool {
	return m.Has(tag.UnderlyingDividendCashEquivalentPercentage)
}

// HasUnderlyingNonCashDividendTreatment returns true if UnderlyingNonCashDividendTreatment is present, Tag 42839.
func (m NoUnderlyingStreams) HasUnderlyingNonCashDividendTreatment() bool {
	return m.Has(tag.UnderlyingNonCashDividendTreatment)
}

// HasUnderlyingDividendComposition returns true if UnderlyingDividendComposition is present, Tag 42840.
func (m NoUnderlyingStreams) HasUnderlyingDividendComposition() bool {
	return m.Has(tag.UnderlyingDividendComposition)
}

// HasUnderlyingSpecialDividendsIndicator returns true if UnderlyingSpecialDividendsIndicator is present, Tag 42841.
func (m NoUnderlyingStreams) HasUnderlyingSpecialDividendsIndicator() bool {
	return m.Has(tag.UnderlyingSpecialDividendsIndicator)
}

// HasUnderlyingMaterialDividendsIndicator returns true if UnderlyingMaterialDividendsIndicator is present, Tag 42842.
func (m NoUnderlyingStreams) HasUnderlyingMaterialDividendsIndicator() bool {
	return m.Has(tag.UnderlyingMaterialDividendsIndicator)
}

// HasUnderlyingOptionsExchangeDividendsIndicator returns true if UnderlyingOptionsExchangeDividendsIndicator is present, Tag 42843.
func (m NoUnderlyingStreams) HasUnderlyingOptionsExchangeDividendsIndicator() bool {
	return m.Has(tag.UnderlyingOptionsExchangeDividendsIndicator)
}

// HasUnderlyingAdditionalDividendsIndicator returns true if UnderlyingAdditionalDividendsIndicator is present, Tag 42844.
func (m NoUnderlyingStreams) HasUnderlyingAdditionalDividendsIndicator() bool {
	return m.Has(tag.UnderlyingAdditionalDividendsIndicator)
}

// HasUnderlyingAllDividendsIndicator returns true if UnderlyingAllDividendsIndicator is present, Tag 42845.
func (m NoUnderlyingStreams) HasUnderlyingAllDividendsIndicator() bool {
	return m.Has(tag.UnderlyingAllDividendsIndicator)
}

// HasUnderlyingReturnRateNotionalReset returns true if UnderlyingReturnRateNotionalReset is present, Tag 42963.
func (m NoUnderlyingStreams) HasUnderlyingReturnRateNotionalReset() bool {
	return m.Has(tag.UnderlyingReturnRateNotionalReset)
}

// HasNoUnderlyingReturnRates returns true if NoUnderlyingReturnRates is present, Tag 43034.
func (m NoUnderlyingStreams) HasNoUnderlyingReturnRates() bool {
	return m.Has(tag.NoUnderlyingReturnRates)
}

// HasUnderlyingPaymentStreamLinkInitialLevel returns true if UnderlyingPaymentStreamLinkInitialLevel is present, Tag 42964.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamLinkInitialLevel() bool {
	return m.Has(tag.UnderlyingPaymentStreamLinkInitialLevel)
}

// HasUnderlyingPaymentStreamLinkClosingLevelIndicator returns true if UnderlyingPaymentStreamLinkClosingLevelIndicator is present, Tag 42965.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamLinkClosingLevelIndicator() bool {
	return m.Has(tag.UnderlyingPaymentStreamLinkClosingLevelIndicator)
}

// HasUnderlyingPaymentStreamLinkExpiringLevelIndicator returns true if UnderlyingPaymentStreamLinkExpiringLevelIndicator is present, Tag 42966.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamLinkExpiringLevelIndicator() bool {
	return m.Has(tag.UnderlyingPaymentStreamLinkExpiringLevelIndicator)
}

// HasUnderlyingPaymentStreamLinkEstimatedTradingDays returns true if UnderlyingPaymentStreamLinkEstimatedTradingDays is present, Tag 42967.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamLinkEstimatedTradingDays() bool {
	return m.Has(tag.UnderlyingPaymentStreamLinkEstimatedTradingDays)
}

// HasUnderlyingPaymentStreamLinkStrikePrice returns true if UnderlyingPaymentStreamLinkStrikePrice is present, Tag 42968.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamLinkStrikePrice() bool {
	return m.Has(tag.UnderlyingPaymentStreamLinkStrikePrice)
}

// HasUnderlyingPaymentStreamLinkStrikePriceType returns true if UnderlyingPaymentStreamLinkStrikePriceType is present, Tag 42969.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamLinkStrikePriceType() bool {
	return m.Has(tag.UnderlyingPaymentStreamLinkStrikePriceType)
}

// HasUnderlyingPaymentStreamLinkMaximumBoundary returns true if UnderlyingPaymentStreamLinkMaximumBoundary is present, Tag 42970.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamLinkMaximumBoundary() bool {
	return m.Has(tag.UnderlyingPaymentStreamLinkMaximumBoundary)
}

// HasUnderlyingPaymentStreamLinkMinimumBoundary returns true if UnderlyingPaymentStreamLinkMinimumBoundary is present, Tag 42971.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamLinkMinimumBoundary() bool {
	return m.Has(tag.UnderlyingPaymentStreamLinkMinimumBoundary)
}

// HasUnderlyingPaymentStreamLinkNumberOfDataSeries returns true if UnderlyingPaymentStreamLinkNumberOfDataSeries is present, Tag 42972.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamLinkNumberOfDataSeries() bool {
	return m.Has(tag.UnderlyingPaymentStreamLinkNumberOfDataSeries)
}

// HasUnderlyingPaymentStreamVarianceUnadjustedCap returns true if UnderlyingPaymentStreamVarianceUnadjustedCap is present, Tag 42973.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamVarianceUnadjustedCap() bool {
	return m.Has(tag.UnderlyingPaymentStreamVarianceUnadjustedCap)
}

// HasUnderlyingPaymentStreamRealizedVarianceMethod returns true if UnderlyingPaymentStreamRealizedVarianceMethod is present, Tag 42974.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamRealizedVarianceMethod() bool {
	return m.Has(tag.UnderlyingPaymentStreamRealizedVarianceMethod)
}

// HasUnderlyingPaymentStreamDaysAdjustmentIndicator returns true if UnderlyingPaymentStreamDaysAdjustmentIndicator is present, Tag 42975.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamDaysAdjustmentIndicator() bool {
	return m.Has(tag.UnderlyingPaymentStreamDaysAdjustmentIndicator)
}

// HasUnderlyingPaymentStreamNearestExchangeContractRefID returns true if UnderlyingPaymentStreamNearestExchangeContractRefID is present, Tag 42976.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamNearestExchangeContractRefID() bool {
	return m.Has(tag.UnderlyingPaymentStreamNearestExchangeContractRefID)
}

// HasUnderlyingPaymentStreamVegaNotionalAmount returns true if UnderlyingPaymentStreamVegaNotionalAmount is present, Tag 42977.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamVegaNotionalAmount() bool {
	return m.Has(tag.UnderlyingPaymentStreamVegaNotionalAmount)
}

// HasUnderlyingPaymentStreamRateIndexID returns true if UnderlyingPaymentStreamRateIndexID is present, Tag 43092.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamRateIndexID() bool {
	return m.Has(tag.UnderlyingPaymentStreamRateIndexID)
}

// HasUnderlyingPaymentStreamRateIndexIDSource returns true if UnderlyingPaymentStreamRateIndexIDSource is present, Tag 43093.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamRateIndexIDSource() bool {
	return m.Has(tag.UnderlyingPaymentStreamRateIndexIDSource)
}

// HasUnderlyingPaymentStreamNonDeliverableRefCurrency returns true if UnderlyingPaymentStreamNonDeliverableRefCurrency is present, Tag 40648.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamNonDeliverableRefCurrency() bool {
	return m.Has(tag.UnderlyingPaymentStreamNonDeliverableRefCurrency)
}

// HasUnderlyingPaymentStreamNonDeliverableFixingDatesBusinessDayConvention returns true if UnderlyingPaymentStreamNonDeliverableFixingDatesBusinessDayConvention is present, Tag 40649.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamNonDeliverableFixingDatesBusinessDayConvention() bool {
	return m.Has(tag.UnderlyingPaymentStreamNonDeliverableFixingDatesBusinessDayConvention)
}

// HasNoUnderlyingPaymentStreamNonDeliverableFixingDatesBusinessCenters returns true if NoUnderlyingPaymentStreamNonDeliverableFixingDatesBusinessCenters is present, Tag 40968.
func (m NoUnderlyingStreams) HasNoUnderlyingPaymentStreamNonDeliverableFixingDatesBusinessCenters() bool {
	return m.Has(tag.NoUnderlyingPaymentStreamNonDeliverableFixingDatesBusinessCenters)
}

// HasUnderlyingPaymentStreamNonDeliverableFixingDatesRelativeTo returns true if UnderlyingPaymentStreamNonDeliverableFixingDatesRelativeTo is present, Tag 40651.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamNonDeliverableFixingDatesRelativeTo() bool {
	return m.Has(tag.UnderlyingPaymentStreamNonDeliverableFixingDatesRelativeTo)
}

// HasUnderlyingPaymentStreamNonDeliverableFixingDatesOffsetPeriod returns true if UnderlyingPaymentStreamNonDeliverableFixingDatesOffsetPeriod is present, Tag 40652.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamNonDeliverableFixingDatesOffsetPeriod() bool {
	return m.Has(tag.UnderlyingPaymentStreamNonDeliverableFixingDatesOffsetPeriod)
}

// HasUnderlyingPaymentStreamNonDeliverableFixingDatesOffsetUnit returns true if UnderlyingPaymentStreamNonDeliverableFixingDatesOffsetUnit is present, Tag 40653.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamNonDeliverableFixingDatesOffsetUnit() bool {
	return m.Has(tag.UnderlyingPaymentStreamNonDeliverableFixingDatesOffsetUnit)
}

// HasUnderlyingPaymentStreamNonDeliverableFixingDatesOffsetDayType returns true if UnderlyingPaymentStreamNonDeliverableFixingDatesOffsetDayType is present, Tag 40654.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamNonDeliverableFixingDatesOffsetDayType() bool {
	return m.Has(tag.UnderlyingPaymentStreamNonDeliverableFixingDatesOffsetDayType)
}

// HasUnderlyingPaymentStreamNonDeliverableSettlRateSource returns true if UnderlyingPaymentStreamNonDeliverableSettlRateSource is present, Tag 40661.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamNonDeliverableSettlRateSource() bool {
	return m.Has(tag.UnderlyingPaymentStreamNonDeliverableSettlRateSource)
}

// HasUnderlyingPaymentStreamNonDeliverableSettlReferencePage returns true if UnderlyingPaymentStreamNonDeliverableSettlReferencePage is present, Tag 40824.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamNonDeliverableSettlReferencePage() bool {
	return m.Has(tag.UnderlyingPaymentStreamNonDeliverableSettlReferencePage)
}

// HasNoUnderlyingNonDeliverableFixingDates returns true if NoUnderlyingNonDeliverableFixingDates is present, Tag 40656.
func (m NoUnderlyingStreams) HasNoUnderlyingNonDeliverableFixingDates() bool {
	return m.Has(tag.NoUnderlyingNonDeliverableFixingDates)
}

// HasNoUnderlyingSettlRateFallbacks returns true if NoUnderlyingSettlRateFallbacks is present, Tag 40659.
func (m NoUnderlyingStreams) HasNoUnderlyingSettlRateFallbacks() bool {
	return m.Has(tag.NoUnderlyingSettlRateFallbacks)
}

// HasUnderlyingPaymentStreamFlatRateIndicator returns true if UnderlyingPaymentStreamFlatRateIndicator is present, Tag 41897.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamFlatRateIndicator() bool {
	return m.Has(tag.UnderlyingPaymentStreamFlatRateIndicator)
}

// HasUnderlyingPaymentStreamFlatRateAmount returns true if UnderlyingPaymentStreamFlatRateAmount is present, Tag 41898.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamFlatRateAmount() bool {
	return m.Has(tag.UnderlyingPaymentStreamFlatRateAmount)
}

// HasUnderlyingPaymentStreamFlatRateCurrency returns true if UnderlyingPaymentStreamFlatRateCurrency is present, Tag 41899.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamFlatRateCurrency() bool {
	return m.Has(tag.UnderlyingPaymentStreamFlatRateCurrency)
}

// HasUnderlyingPaymentStreamMaximumPaymentAmount returns true if UnderlyingPaymentStreamMaximumPaymentAmount is present, Tag 41900.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamMaximumPaymentAmount() bool {
	return m.Has(tag.UnderlyingPaymentStreamMaximumPaymentAmount)
}

// HasUnderlyingPaymentStreamMaximumPaymentCurrency returns true if UnderlyingPaymentStreamMaximumPaymentCurrency is present, Tag 41901.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamMaximumPaymentCurrency() bool {
	return m.Has(tag.UnderlyingPaymentStreamMaximumPaymentCurrency)
}

// HasUnderlyingPaymentStreamMaximumTransactionAmount returns true if UnderlyingPaymentStreamMaximumTransactionAmount is present, Tag 41902.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamMaximumTransactionAmount() bool {
	return m.Has(tag.UnderlyingPaymentStreamMaximumTransactionAmount)
}

// HasUnderlyingPaymentStreamMaximumTransactionCurrency returns true if UnderlyingPaymentStreamMaximumTransactionCurrency is present, Tag 41903.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamMaximumTransactionCurrency() bool {
	return m.Has(tag.UnderlyingPaymentStreamMaximumTransactionCurrency)
}

// HasUnderlyingPaymentStreamCashSettlIndicator returns true if UnderlyingPaymentStreamCashSettlIndicator is present, Tag 42895.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamCashSettlIndicator() bool {
	return m.Has(tag.UnderlyingPaymentStreamCashSettlIndicator)
}

// HasUnderlyingPaymentStreamCompoundingXIDRef returns true if UnderlyingPaymentStreamCompoundingXIDRef is present, Tag 42896.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamCompoundingXIDRef() bool {
	return m.Has(tag.UnderlyingPaymentStreamCompoundingXIDRef)
}

// HasUnderlyingPaymentStreamCompoundingSpread returns true if UnderlyingPaymentStreamCompoundingSpread is present, Tag 42897.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamCompoundingSpread() bool {
	return m.Has(tag.UnderlyingPaymentStreamCompoundingSpread)
}

// HasUnderlyingPaymentStreamInterpolationMethod returns true if UnderlyingPaymentStreamInterpolationMethod is present, Tag 42898.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamInterpolationMethod() bool {
	return m.Has(tag.UnderlyingPaymentStreamInterpolationMethod)
}

// HasUnderlyingPaymentStreamInterpolationPeriod returns true if UnderlyingPaymentStreamInterpolationPeriod is present, Tag 42899.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamInterpolationPeriod() bool {
	return m.Has(tag.UnderlyingPaymentStreamInterpolationPeriod)
}

// HasUnderlyingPaymentStreamCompoundingFixedRate returns true if UnderlyingPaymentStreamCompoundingFixedRate is present, Tag 42900.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamCompoundingFixedRate() bool {
	return m.Has(tag.UnderlyingPaymentStreamCompoundingFixedRate)
}

// HasUnderlyingPaymentStreamCompoundingRateIndex returns true if UnderlyingPaymentStreamCompoundingRateIndex is present, Tag 42923.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamCompoundingRateIndex() bool {
	return m.Has(tag.UnderlyingPaymentStreamCompoundingRateIndex)
}

// HasUnderlyingPaymentStreamCompoundingRateIndexCurvePeriod returns true if UnderlyingPaymentStreamCompoundingRateIndexCurvePeriod is present, Tag 42924.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamCompoundingRateIndexCurvePeriod() bool {
	return m.Has(tag.UnderlyingPaymentStreamCompoundingRateIndexCurvePeriod)
}

// HasUnderlyingPaymentStreamCompoundingRateIndexCurveUnit returns true if UnderlyingPaymentStreamCompoundingRateIndexCurveUnit is present, Tag 42925.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamCompoundingRateIndexCurveUnit() bool {
	return m.Has(tag.UnderlyingPaymentStreamCompoundingRateIndexCurveUnit)
}

// HasUnderlyingPaymentStreamCompoundingRateMultiplier returns true if UnderlyingPaymentStreamCompoundingRateMultiplier is present, Tag 42926.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamCompoundingRateMultiplier() bool {
	return m.Has(tag.UnderlyingPaymentStreamCompoundingRateMultiplier)
}

// HasUnderlyingPaymentStreamCompoundingRateSpread returns true if UnderlyingPaymentStreamCompoundingRateSpread is present, Tag 42927.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamCompoundingRateSpread() bool {
	return m.Has(tag.UnderlyingPaymentStreamCompoundingRateSpread)
}

// HasUnderlyingPaymentStreamCompoundingRateSpreadPositionType returns true if UnderlyingPaymentStreamCompoundingRateSpreadPositionType is present, Tag 42928.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamCompoundingRateSpreadPositionType() bool {
	return m.Has(tag.UnderlyingPaymentStreamCompoundingRateSpreadPositionType)
}

// HasUnderlyingPaymentStreamCompoundingRateTreatment returns true if UnderlyingPaymentStreamCompoundingRateTreatment is present, Tag 42929.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamCompoundingRateTreatment() bool {
	return m.Has(tag.UnderlyingPaymentStreamCompoundingRateTreatment)
}

// HasUnderlyingPaymentStreamCompoundingCapRate returns true if UnderlyingPaymentStreamCompoundingCapRate is present, Tag 42930.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamCompoundingCapRate() bool {
	return m.Has(tag.UnderlyingPaymentStreamCompoundingCapRate)
}

// HasUnderlyingPaymentStreamCompoundingCapRateBuySide returns true if UnderlyingPaymentStreamCompoundingCapRateBuySide is present, Tag 42931.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamCompoundingCapRateBuySide() bool {
	return m.Has(tag.UnderlyingPaymentStreamCompoundingCapRateBuySide)
}

// HasUnderlyingPaymentStreamCompoundingCapRateSellSide returns true if UnderlyingPaymentStreamCompoundingCapRateSellSide is present, Tag 42932.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamCompoundingCapRateSellSide() bool {
	return m.Has(tag.UnderlyingPaymentStreamCompoundingCapRateSellSide)
}

// HasUnderlyingPaymentStreamCompoundingFloorRate returns true if UnderlyingPaymentStreamCompoundingFloorRate is present, Tag 42933.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamCompoundingFloorRate() bool {
	return m.Has(tag.UnderlyingPaymentStreamCompoundingFloorRate)
}

// HasUnderlyingPaymentStreamCompoundingFloorRateBuySide returns true if UnderlyingPaymentStreamCompoundingFloorRateBuySide is present, Tag 42934.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamCompoundingFloorRateBuySide() bool {
	return m.Has(tag.UnderlyingPaymentStreamCompoundingFloorRateBuySide)
}

// HasUnderlyingPaymentStreamCompoundingFloorRateSellSide returns true if UnderlyingPaymentStreamCompoundingFloorRateSellSide is present, Tag 42935.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamCompoundingFloorRateSellSide() bool {
	return m.Has(tag.UnderlyingPaymentStreamCompoundingFloorRateSellSide)
}

// HasUnderlyingPaymentStreamCompoundingInitialRate returns true if UnderlyingPaymentStreamCompoundingInitialRate is present, Tag 42936.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamCompoundingInitialRate() bool {
	return m.Has(tag.UnderlyingPaymentStreamCompoundingInitialRate)
}

// HasUnderlyingPaymentStreamCompoundingFinalRateRoundingDirection returns true if UnderlyingPaymentStreamCompoundingFinalRateRoundingDirection is present, Tag 42937.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamCompoundingFinalRateRoundingDirection() bool {
	return m.Has(tag.UnderlyingPaymentStreamCompoundingFinalRateRoundingDirection)
}

// HasUnderlyingPaymentStreamCompoundingFinalRatePrecision returns true if UnderlyingPaymentStreamCompoundingFinalRatePrecision is present, Tag 42938.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamCompoundingFinalRatePrecision() bool {
	return m.Has(tag.UnderlyingPaymentStreamCompoundingFinalRatePrecision)
}

// HasUnderlyingPaymentStreamCompoundingAveragingMethod returns true if UnderlyingPaymentStreamCompoundingAveragingMethod is present, Tag 42939.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamCompoundingAveragingMethod() bool {
	return m.Has(tag.UnderlyingPaymentStreamCompoundingAveragingMethod)
}

// HasUnderlyingPaymentStreamCompoundingNegativeRateTreatment returns true if UnderlyingPaymentStreamCompoundingNegativeRateTreatment is present, Tag 42940.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamCompoundingNegativeRateTreatment() bool {
	return m.Has(tag.UnderlyingPaymentStreamCompoundingNegativeRateTreatment)
}

// HasUnderlyingPaymentStreamCompoundingDatesBusinessDayConvention returns true if UnderlyingPaymentStreamCompoundingDatesBusinessDayConvention is present, Tag 42904.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamCompoundingDatesBusinessDayConvention() bool {
	return m.Has(tag.UnderlyingPaymentStreamCompoundingDatesBusinessDayConvention)
}

// HasNoUnderlyingPaymentStreamCompoundingDatesBusinessCenters returns true if NoUnderlyingPaymentStreamCompoundingDatesBusinessCenters is present, Tag 42915.
func (m NoUnderlyingStreams) HasNoUnderlyingPaymentStreamCompoundingDatesBusinessCenters() bool {
	return m.Has(tag.NoUnderlyingPaymentStreamCompoundingDatesBusinessCenters)
}

// HasNoUnderlyingPaymentStreamCompoundingDates returns true if NoUnderlyingPaymentStreamCompoundingDates is present, Tag 42901.
func (m NoUnderlyingStreams) HasNoUnderlyingPaymentStreamCompoundingDates() bool {
	return m.Has(tag.NoUnderlyingPaymentStreamCompoundingDates)
}

// HasUnderlyingPaymentStreamCompoundingDatesRelativeTo returns true if UnderlyingPaymentStreamCompoundingDatesRelativeTo is present, Tag 42905.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamCompoundingDatesRelativeTo() bool {
	return m.Has(tag.UnderlyingPaymentStreamCompoundingDatesRelativeTo)
}

// HasUnderlyingPaymentStreamCompoundingDatesOffsetPeriod returns true if UnderlyingPaymentStreamCompoundingDatesOffsetPeriod is present, Tag 42906.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamCompoundingDatesOffsetPeriod() bool {
	return m.Has(tag.UnderlyingPaymentStreamCompoundingDatesOffsetPeriod)
}

// HasUnderlyingPaymentStreamCompoundingDatesOffsetUnit returns true if UnderlyingPaymentStreamCompoundingDatesOffsetUnit is present, Tag 42907.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamCompoundingDatesOffsetUnit() bool {
	return m.Has(tag.UnderlyingPaymentStreamCompoundingDatesOffsetUnit)
}

// HasUnderlyingPaymentStreamCompoundingDatesOffsetDayType returns true if UnderlyingPaymentStreamCompoundingDatesOffsetDayType is present, Tag 42908.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamCompoundingDatesOffsetDayType() bool {
	return m.Has(tag.UnderlyingPaymentStreamCompoundingDatesOffsetDayType)
}

// HasUnderlyingPaymentStreamCompoundingPeriodSkip returns true if UnderlyingPaymentStreamCompoundingPeriodSkip is present, Tag 42909.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamCompoundingPeriodSkip() bool {
	return m.Has(tag.UnderlyingPaymentStreamCompoundingPeriodSkip)
}

// HasUnderlyingPaymentStreamCompoundingStartDateUnadjusted returns true if UnderlyingPaymentStreamCompoundingStartDateUnadjusted is present, Tag 42941.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamCompoundingStartDateUnadjusted() bool {
	return m.Has(tag.UnderlyingPaymentStreamCompoundingStartDateUnadjusted)
}

// HasUnderlyingPaymentStreamCompoundingStartDateRelativeTo returns true if UnderlyingPaymentStreamCompoundingStartDateRelativeTo is present, Tag 42942.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamCompoundingStartDateRelativeTo() bool {
	return m.Has(tag.UnderlyingPaymentStreamCompoundingStartDateRelativeTo)
}

// HasUnderlyingPaymentStreamCompoundingStartDateOffsetPeriod returns true if UnderlyingPaymentStreamCompoundingStartDateOffsetPeriod is present, Tag 42943.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamCompoundingStartDateOffsetPeriod() bool {
	return m.Has(tag.UnderlyingPaymentStreamCompoundingStartDateOffsetPeriod)
}

// HasUnderlyingPaymentStreamCompoundingStartDateOffsetUnit returns true if UnderlyingPaymentStreamCompoundingStartDateOffsetUnit is present, Tag 42944.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamCompoundingStartDateOffsetUnit() bool {
	return m.Has(tag.UnderlyingPaymentStreamCompoundingStartDateOffsetUnit)
}

// HasUnderlyingPaymentStreamCompoundingStartDateOffsetDayType returns true if UnderlyingPaymentStreamCompoundingStartDateOffsetDayType is present, Tag 42945.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamCompoundingStartDateOffsetDayType() bool {
	return m.Has(tag.UnderlyingPaymentStreamCompoundingStartDateOffsetDayType)
}

// HasUnderlyingPaymentStreamCompoundingStartDateAdjusted returns true if UnderlyingPaymentStreamCompoundingStartDateAdjusted is present, Tag 42946.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamCompoundingStartDateAdjusted() bool {
	return m.Has(tag.UnderlyingPaymentStreamCompoundingStartDateAdjusted)
}

// HasUnderlyingPaymentStreamCompoundingEndDateUnadjusted returns true if UnderlyingPaymentStreamCompoundingEndDateUnadjusted is present, Tag 42917.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamCompoundingEndDateUnadjusted() bool {
	return m.Has(tag.UnderlyingPaymentStreamCompoundingEndDateUnadjusted)
}

// HasUnderlyingPaymentStreamCompoundingEndDateRelativeTo returns true if UnderlyingPaymentStreamCompoundingEndDateRelativeTo is present, Tag 42918.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamCompoundingEndDateRelativeTo() bool {
	return m.Has(tag.UnderlyingPaymentStreamCompoundingEndDateRelativeTo)
}

// HasUnderlyingPaymentStreamCompoundingEndDateOffsetPeriod returns true if UnderlyingPaymentStreamCompoundingEndDateOffsetPeriod is present, Tag 42919.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamCompoundingEndDateOffsetPeriod() bool {
	return m.Has(tag.UnderlyingPaymentStreamCompoundingEndDateOffsetPeriod)
}

// HasUnderlyingPaymentStreamCompoundingEndDateOffsetUnit returns true if UnderlyingPaymentStreamCompoundingEndDateOffsetUnit is present, Tag 42920.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamCompoundingEndDateOffsetUnit() bool {
	return m.Has(tag.UnderlyingPaymentStreamCompoundingEndDateOffsetUnit)
}

// HasUnderlyingPaymentStreamCompoundingEndDateOffsetDayType returns true if UnderlyingPaymentStreamCompoundingEndDateOffsetDayType is present, Tag 42921.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamCompoundingEndDateOffsetDayType() bool {
	return m.Has(tag.UnderlyingPaymentStreamCompoundingEndDateOffsetDayType)
}

// HasUnderlyingPaymentStreamCompoundingEndDateAdjusted returns true if UnderlyingPaymentStreamCompoundingEndDateAdjusted is present, Tag 42922.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamCompoundingEndDateAdjusted() bool {
	return m.Has(tag.UnderlyingPaymentStreamCompoundingEndDateAdjusted)
}

// HasUnderlyingPaymentStreamCompoundingFrequencyPeriod returns true if UnderlyingPaymentStreamCompoundingFrequencyPeriod is present, Tag 42910.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamCompoundingFrequencyPeriod() bool {
	return m.Has(tag.UnderlyingPaymentStreamCompoundingFrequencyPeriod)
}

// HasUnderlyingPaymentStreamCompoundingFrequencyUnit returns true if UnderlyingPaymentStreamCompoundingFrequencyUnit is present, Tag 42911.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamCompoundingFrequencyUnit() bool {
	return m.Has(tag.UnderlyingPaymentStreamCompoundingFrequencyUnit)
}

// HasUnderlyingPaymentStreamCompoundingRollConvention returns true if UnderlyingPaymentStreamCompoundingRollConvention is present, Tag 42912.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamCompoundingRollConvention() bool {
	return m.Has(tag.UnderlyingPaymentStreamCompoundingRollConvention)
}

// HasUnderlyingPaymentStreamBoundsFirstDateUnadjusted returns true if UnderlyingPaymentStreamBoundsFirstDateUnadjusted is present, Tag 42913.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamBoundsFirstDateUnadjusted() bool {
	return m.Has(tag.UnderlyingPaymentStreamBoundsFirstDateUnadjusted)
}

// HasUnderlyingPaymentStreamBoundsLastDateUnadjusted returns true if UnderlyingPaymentStreamBoundsLastDateUnadjusted is present, Tag 42914.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamBoundsLastDateUnadjusted() bool {
	return m.Has(tag.UnderlyingPaymentStreamBoundsLastDateUnadjusted)
}

// HasUnderlyingPaymentStreamOtherDayCount returns true if UnderlyingPaymentStreamOtherDayCount is present, Tag 43107.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamOtherDayCount() bool {
	return m.Has(tag.UnderlyingPaymentStreamOtherDayCount)
}

// HasNoUnderlyingPaymentSchedules returns true if NoUnderlyingPaymentSchedules is present, Tag 40664.
func (m NoUnderlyingStreams) HasNoUnderlyingPaymentSchedules() bool {
	return m.Has(tag.NoUnderlyingPaymentSchedules)
}

// HasNoUnderlyingPaymentStubs returns true if NoUnderlyingPaymentStubs is present, Tag 40708.
func (m NoUnderlyingStreams) HasNoUnderlyingPaymentStubs() bool {
	return m.Has(tag.NoUnderlyingPaymentStubs)
}

// HasUnderlyingStreamText returns true if UnderlyingStreamText is present, Tag 40547.
func (m NoUnderlyingStreams) HasUnderlyingStreamText() bool {
	return m.Has(tag.UnderlyingStreamText)
}

// HasEncodedUnderlyingStreamTextLen returns true if EncodedUnderlyingStreamTextLen is present, Tag 40988.
func (m NoUnderlyingStreams) HasEncodedUnderlyingStreamTextLen() bool {
	return m.Has(tag.EncodedUnderlyingStreamTextLen)
}

// HasEncodedUnderlyingStreamText returns true if EncodedUnderlyingStreamText is present, Tag 40989.
func (m NoUnderlyingStreams) HasEncodedUnderlyingStreamText() bool {
	return m.Has(tag.EncodedUnderlyingStreamText)
}

// HasUnderlyingStreamXID returns true if UnderlyingStreamXID is present, Tag 42016.
func (m NoUnderlyingStreams) HasUnderlyingStreamXID() bool {
	return m.Has(tag.UnderlyingStreamXID)
}

// HasUnderlyingStreamNotionalXIDRef returns true if UnderlyingStreamNotionalXIDRef is present, Tag 42018.
func (m NoUnderlyingStreams) HasUnderlyingStreamNotionalXIDRef() bool {
	return m.Has(tag.UnderlyingStreamNotionalXIDRef)
}

// HasUnderlyingStreamNotionalFrequencyPeriod returns true if UnderlyingStreamNotionalFrequencyPeriod is present, Tag 42019.
func (m NoUnderlyingStreams) HasUnderlyingStreamNotionalFrequencyPeriod() bool {
	return m.Has(tag.UnderlyingStreamNotionalFrequencyPeriod)
}

// HasUnderlyingStreamNotionalFrequencyUnit returns true if UnderlyingStreamNotionalFrequencyUnit is present, Tag 42020.
func (m NoUnderlyingStreams) HasUnderlyingStreamNotionalFrequencyUnit() bool {
	return m.Has(tag.UnderlyingStreamNotionalFrequencyUnit)
}

// HasUnderlyingStreamNotionalCommodityFrequency returns true if UnderlyingStreamNotionalCommodityFrequency is present, Tag 42021.
func (m NoUnderlyingStreams) HasUnderlyingStreamNotionalCommodityFrequency() bool {
	return m.Has(tag.UnderlyingStreamNotionalCommodityFrequency)
}

// HasUnderlyingStreamNotionalUnitOfMeasure returns true if UnderlyingStreamNotionalUnitOfMeasure is present, Tag 42022.
func (m NoUnderlyingStreams) HasUnderlyingStreamNotionalUnitOfMeasure() bool {
	return m.Has(tag.UnderlyingStreamNotionalUnitOfMeasure)
}

// HasUnderlyingStreamTotalNotional returns true if UnderlyingStreamTotalNotional is present, Tag 42023.
func (m NoUnderlyingStreams) HasUnderlyingStreamTotalNotional() bool {
	return m.Has(tag.UnderlyingStreamTotalNotional)
}

// HasUnderlyingStreamTotalNotionalUnitOfMeasure returns true if UnderlyingStreamTotalNotionalUnitOfMeasure is present, Tag 42024.
func (m NoUnderlyingStreams) HasUnderlyingStreamTotalNotionalUnitOfMeasure() bool {
	return m.Has(tag.UnderlyingStreamTotalNotionalUnitOfMeasure)
}

// HasUnderlyingStreamCommodityBase returns true if UnderlyingStreamCommodityBase is present, Tag 41964.
func (m NoUnderlyingStreams) HasUnderlyingStreamCommodityBase() bool {
	return m.Has(tag.UnderlyingStreamCommodityBase)
}

// HasUnderlyingStreamCommodityType returns true if UnderlyingStreamCommodityType is present, Tag 41965.
func (m NoUnderlyingStreams) HasUnderlyingStreamCommodityType() bool {
	return m.Has(tag.UnderlyingStreamCommodityType)
}

// HasUnderlyingStreamCommoditySecurityID returns true if UnderlyingStreamCommoditySecurityID is present, Tag 41966.
func (m NoUnderlyingStreams) HasUnderlyingStreamCommoditySecurityID() bool {
	return m.Has(tag.UnderlyingStreamCommoditySecurityID)
}

// HasUnderlyingStreamCommoditySecurityIDSource returns true if UnderlyingStreamCommoditySecurityIDSource is present, Tag 41967.
func (m NoUnderlyingStreams) HasUnderlyingStreamCommoditySecurityIDSource() bool {
	return m.Has(tag.UnderlyingStreamCommoditySecurityIDSource)
}

// HasNoUnderlyingStreamCommodityAltIDs returns true if NoUnderlyingStreamCommodityAltIDs is present, Tag 41990.
func (m NoUnderlyingStreams) HasNoUnderlyingStreamCommodityAltIDs() bool {
	return m.Has(tag.NoUnderlyingStreamCommodityAltIDs)
}

// HasUnderlyingStreamCommodityDesc returns true if UnderlyingStreamCommodityDesc is present, Tag 41968.
func (m NoUnderlyingStreams) HasUnderlyingStreamCommodityDesc() bool {
	return m.Has(tag.UnderlyingStreamCommodityDesc)
}

// HasEncodedUnderlyingStreamCommodityDescLen returns true if EncodedUnderlyingStreamCommodityDescLen is present, Tag 41969.
func (m NoUnderlyingStreams) HasEncodedUnderlyingStreamCommodityDescLen() bool {
	return m.Has(tag.EncodedUnderlyingStreamCommodityDescLen)
}

// HasEncodedUnderlyingStreamCommodityDesc returns true if EncodedUnderlyingStreamCommodityDesc is present, Tag 41970.
func (m NoUnderlyingStreams) HasEncodedUnderlyingStreamCommodityDesc() bool {
	return m.Has(tag.EncodedUnderlyingStreamCommodityDesc)
}

// HasNoUnderlyingStreamAssetAttributes returns true if NoUnderlyingStreamAssetAttributes is present, Tag 41800.
func (m NoUnderlyingStreams) HasNoUnderlyingStreamAssetAttributes() bool {
	return m.Has(tag.NoUnderlyingStreamAssetAttributes)
}

// HasUnderlyingStreamCommodityUnitOfMeasure returns true if UnderlyingStreamCommodityUnitOfMeasure is present, Tag 41971.
func (m NoUnderlyingStreams) HasUnderlyingStreamCommodityUnitOfMeasure() bool {
	return m.Has(tag.UnderlyingStreamCommodityUnitOfMeasure)
}

// HasUnderlyingStreamCommodityCurrency returns true if UnderlyingStreamCommodityCurrency is present, Tag 41972.
func (m NoUnderlyingStreams) HasUnderlyingStreamCommodityCurrency() bool {
	return m.Has(tag.UnderlyingStreamCommodityCurrency)
}

// HasUnderlyingStreamCommodityExchange returns true if UnderlyingStreamCommodityExchange is present, Tag 41973.
func (m NoUnderlyingStreams) HasUnderlyingStreamCommodityExchange() bool {
	return m.Has(tag.UnderlyingStreamCommodityExchange)
}

// HasUnderlyingStreamCommodityRateSource returns true if UnderlyingStreamCommodityRateSource is present, Tag 41974.
func (m NoUnderlyingStreams) HasUnderlyingStreamCommodityRateSource() bool {
	return m.Has(tag.UnderlyingStreamCommodityRateSource)
}

// HasUnderlyingStreamCommodityRateReferencePage returns true if UnderlyingStreamCommodityRateReferencePage is present, Tag 41975.
func (m NoUnderlyingStreams) HasUnderlyingStreamCommodityRateReferencePage() bool {
	return m.Has(tag.UnderlyingStreamCommodityRateReferencePage)
}

// HasUnderlyingStreamCommodityRateReferencePageHeading returns true if UnderlyingStreamCommodityRateReferencePageHeading is present, Tag 41976.
func (m NoUnderlyingStreams) HasUnderlyingStreamCommodityRateReferencePageHeading() bool {
	return m.Has(tag.UnderlyingStreamCommodityRateReferencePageHeading)
}

// HasUnderlyingStreamDataProvider returns true if UnderlyingStreamDataProvider is present, Tag 41977.
func (m NoUnderlyingStreams) HasUnderlyingStreamDataProvider() bool {
	return m.Has(tag.UnderlyingStreamDataProvider)
}

// HasNoUnderlyingStreamCommodityDataSources returns true if NoUnderlyingStreamCommodityDataSources is present, Tag 41993.
func (m NoUnderlyingStreams) HasNoUnderlyingStreamCommodityDataSources() bool {
	return m.Has(tag.NoUnderlyingStreamCommodityDataSources)
}

// HasUnderlyingStreamCommodityPricingType returns true if UnderlyingStreamCommodityPricingType is present, Tag 41978.
func (m NoUnderlyingStreams) HasUnderlyingStreamCommodityPricingType() bool {
	return m.Has(tag.UnderlyingStreamCommodityPricingType)
}

// HasUnderlyingStreamCommodityNearbySettlDayPeriod returns true if UnderlyingStreamCommodityNearbySettlDayPeriod is present, Tag 41979.
func (m NoUnderlyingStreams) HasUnderlyingStreamCommodityNearbySettlDayPeriod() bool {
	return m.Has(tag.UnderlyingStreamCommodityNearbySettlDayPeriod)
}

// HasUnderlyingStreamCommodityNearbySettlDayUnit returns true if UnderlyingStreamCommodityNearbySettlDayUnit is present, Tag 41980.
func (m NoUnderlyingStreams) HasUnderlyingStreamCommodityNearbySettlDayUnit() bool {
	return m.Has(tag.UnderlyingStreamCommodityNearbySettlDayUnit)
}

// HasUnderlyingStreamCommoditySettlDateUnadjusted returns true if UnderlyingStreamCommoditySettlDateUnadjusted is present, Tag 41981.
func (m NoUnderlyingStreams) HasUnderlyingStreamCommoditySettlDateUnadjusted() bool {
	return m.Has(tag.UnderlyingStreamCommoditySettlDateUnadjusted)
}

// HasUnderlyingStreamCommoditySettlDateBusinessDayConvention returns true if UnderlyingStreamCommoditySettlDateBusinessDayConvention is present, Tag 41982.
func (m NoUnderlyingStreams) HasUnderlyingStreamCommoditySettlDateBusinessDayConvention() bool {
	return m.Has(tag.UnderlyingStreamCommoditySettlDateBusinessDayConvention)
}

// HasNoUnderlyingStreamCommoditySettlBusinessCenters returns true if NoUnderlyingStreamCommoditySettlBusinessCenters is present, Tag 41962.
func (m NoUnderlyingStreams) HasNoUnderlyingStreamCommoditySettlBusinessCenters() bool {
	return m.Has(tag.NoUnderlyingStreamCommoditySettlBusinessCenters)
}

// HasUnderlyingStreamCommoditySettlDateAdjusted returns true if UnderlyingStreamCommoditySettlDateAdjusted is present, Tag 41983.
func (m NoUnderlyingStreams) HasUnderlyingStreamCommoditySettlDateAdjusted() bool {
	return m.Has(tag.UnderlyingStreamCommoditySettlDateAdjusted)
}

// HasUnderlyingStreamCommoditySettlMonth returns true if UnderlyingStreamCommoditySettlMonth is present, Tag 41984.
func (m NoUnderlyingStreams) HasUnderlyingStreamCommoditySettlMonth() bool {
	return m.Has(tag.UnderlyingStreamCommoditySettlMonth)
}

// HasUnderlyingStreamCommoditySettlDateRollPeriod returns true if UnderlyingStreamCommoditySettlDateRollPeriod is present, Tag 41985.
func (m NoUnderlyingStreams) HasUnderlyingStreamCommoditySettlDateRollPeriod() bool {
	return m.Has(tag.UnderlyingStreamCommoditySettlDateRollPeriod)
}

// HasUnderlyingStreamCommoditySettlDateRollUnit returns true if UnderlyingStreamCommoditySettlDateRollUnit is present, Tag 41986.
func (m NoUnderlyingStreams) HasUnderlyingStreamCommoditySettlDateRollUnit() bool {
	return m.Has(tag.UnderlyingStreamCommoditySettlDateRollUnit)
}

// HasUnderlyingStreamCommoditySettlDayType returns true if UnderlyingStreamCommoditySettlDayType is present, Tag 41987.
func (m NoUnderlyingStreams) HasUnderlyingStreamCommoditySettlDayType() bool {
	return m.Has(tag.UnderlyingStreamCommoditySettlDayType)
}

// HasNoUnderlyingStreamCommoditySettlPeriods returns true if NoUnderlyingStreamCommoditySettlPeriods is present, Tag 42002.
func (m NoUnderlyingStreams) HasNoUnderlyingStreamCommoditySettlPeriods() bool {
	return m.Has(tag.NoUnderlyingStreamCommoditySettlPeriods)
}

// HasUnderlyingStreamCommodityXID returns true if UnderlyingStreamCommodityXID is present, Tag 41988.
func (m NoUnderlyingStreams) HasUnderlyingStreamCommodityXID() bool {
	return m.Has(tag.UnderlyingStreamCommodityXID)
}

// HasUnderlyingStreamCommodityXIDRef returns true if UnderlyingStreamCommodityXIDRef is present, Tag 41989.
func (m NoUnderlyingStreams) HasUnderlyingStreamCommodityXIDRef() bool {
	return m.Has(tag.UnderlyingStreamCommodityXIDRef)
}

// HasUnderlyingStreamCommodityDeliveryPricingRegion returns true if UnderlyingStreamCommodityDeliveryPricingRegion is present, Tag 42589.
func (m NoUnderlyingStreams) HasUnderlyingStreamCommodityDeliveryPricingRegion() bool {
	return m.Has(tag.UnderlyingStreamCommodityDeliveryPricingRegion)
}

// HasUnderlyingDeliveryStreamType returns true if UnderlyingDeliveryStreamType is present, Tag 41777.
func (m NoUnderlyingStreams) HasUnderlyingDeliveryStreamType() bool {
	return m.Has(tag.UnderlyingDeliveryStreamType)
}

// HasNoUnderlyingDeliveryStreamCommoditySources returns true if NoUnderlyingDeliveryStreamCommoditySources is present, Tag 41808.
func (m NoUnderlyingStreams) HasNoUnderlyingDeliveryStreamCommoditySources() bool {
	return m.Has(tag.NoUnderlyingDeliveryStreamCommoditySources)
}

// HasUnderlyingDeliveryStreamPipeline returns true if UnderlyingDeliveryStreamPipeline is present, Tag 41778.
func (m NoUnderlyingStreams) HasUnderlyingDeliveryStreamPipeline() bool {
	return m.Has(tag.UnderlyingDeliveryStreamPipeline)
}

// HasUnderlyingDeliveryStreamEntryPoint returns true if UnderlyingDeliveryStreamEntryPoint is present, Tag 41779.
func (m NoUnderlyingStreams) HasUnderlyingDeliveryStreamEntryPoint() bool {
	return m.Has(tag.UnderlyingDeliveryStreamEntryPoint)
}

// HasUnderlyingDeliveryStreamWithdrawalPoint returns true if UnderlyingDeliveryStreamWithdrawalPoint is present, Tag 41780.
func (m NoUnderlyingStreams) HasUnderlyingDeliveryStreamWithdrawalPoint() bool {
	return m.Has(tag.UnderlyingDeliveryStreamWithdrawalPoint)
}

// HasUnderlyingDeliveryStreamDeliveryPoint returns true if UnderlyingDeliveryStreamDeliveryPoint is present, Tag 41781.
func (m NoUnderlyingStreams) HasUnderlyingDeliveryStreamDeliveryPoint() bool {
	return m.Has(tag.UnderlyingDeliveryStreamDeliveryPoint)
}

// HasUnderlyingDeliveryStreamDeliveryRestriction returns true if UnderlyingDeliveryStreamDeliveryRestriction is present, Tag 41782.
func (m NoUnderlyingStreams) HasUnderlyingDeliveryStreamDeliveryRestriction() bool {
	return m.Has(tag.UnderlyingDeliveryStreamDeliveryRestriction)
}

// HasUnderlyingDeliveryStreamDeliveryContingency returns true if UnderlyingDeliveryStreamDeliveryContingency is present, Tag 41783.
func (m NoUnderlyingStreams) HasUnderlyingDeliveryStreamDeliveryContingency() bool {
	return m.Has(tag.UnderlyingDeliveryStreamDeliveryContingency)
}

// HasUnderlyingDeliveryStreamDeliveryContingentPartySide returns true if UnderlyingDeliveryStreamDeliveryContingentPartySide is present, Tag 41784.
func (m NoUnderlyingStreams) HasUnderlyingDeliveryStreamDeliveryContingentPartySide() bool {
	return m.Has(tag.UnderlyingDeliveryStreamDeliveryContingentPartySide)
}

// HasUnderlyingDeliveryStreamDeliverAtSourceIndicator returns true if UnderlyingDeliveryStreamDeliverAtSourceIndicator is present, Tag 41785.
func (m NoUnderlyingStreams) HasUnderlyingDeliveryStreamDeliverAtSourceIndicator() bool {
	return m.Has(tag.UnderlyingDeliveryStreamDeliverAtSourceIndicator)
}

// HasUnderlyingDeliveryStreamRiskApportionment returns true if UnderlyingDeliveryStreamRiskApportionment is present, Tag 41786.
func (m NoUnderlyingStreams) HasUnderlyingDeliveryStreamRiskApportionment() bool {
	return m.Has(tag.UnderlyingDeliveryStreamRiskApportionment)
}

// HasUnderlyingDeliveryStreamRiskApportionmentSource returns true if UnderlyingDeliveryStreamRiskApportionmentSource is present, Tag 41587.
func (m NoUnderlyingStreams) HasUnderlyingDeliveryStreamRiskApportionmentSource() bool {
	return m.Has(tag.UnderlyingDeliveryStreamRiskApportionmentSource)
}

// HasNoUnderlyingDeliveryStreamCycles returns true if NoUnderlyingDeliveryStreamCycles is present, Tag 41804.
func (m NoUnderlyingStreams) HasNoUnderlyingDeliveryStreamCycles() bool {
	return m.Has(tag.NoUnderlyingDeliveryStreamCycles)
}

// HasUnderlyingDeliveryStreamTitleTransferLocation returns true if UnderlyingDeliveryStreamTitleTransferLocation is present, Tag 41787.
func (m NoUnderlyingStreams) HasUnderlyingDeliveryStreamTitleTransferLocation() bool {
	return m.Has(tag.UnderlyingDeliveryStreamTitleTransferLocation)
}

// HasUnderlyingDeliveryStreamTitleTransferCondition returns true if UnderlyingDeliveryStreamTitleTransferCondition is present, Tag 41788.
func (m NoUnderlyingStreams) HasUnderlyingDeliveryStreamTitleTransferCondition() bool {
	return m.Has(tag.UnderlyingDeliveryStreamTitleTransferCondition)
}

// HasUnderlyingDeliveryStreamImporterOfRecord returns true if UnderlyingDeliveryStreamImporterOfRecord is present, Tag 41789.
func (m NoUnderlyingStreams) HasUnderlyingDeliveryStreamImporterOfRecord() bool {
	return m.Has(tag.UnderlyingDeliveryStreamImporterOfRecord)
}

// HasUnderlyingDeliveryStreamNegativeTolerance returns true if UnderlyingDeliveryStreamNegativeTolerance is present, Tag 41790.
func (m NoUnderlyingStreams) HasUnderlyingDeliveryStreamNegativeTolerance() bool {
	return m.Has(tag.UnderlyingDeliveryStreamNegativeTolerance)
}

// HasUnderlyingDeliveryStreamPositiveTolerance returns true if UnderlyingDeliveryStreamPositiveTolerance is present, Tag 41791.
func (m NoUnderlyingStreams) HasUnderlyingDeliveryStreamPositiveTolerance() bool {
	return m.Has(tag.UnderlyingDeliveryStreamPositiveTolerance)
}

// HasUnderlyingDeliveryStreamToleranceUnitOfMeasure returns true if UnderlyingDeliveryStreamToleranceUnitOfMeasure is present, Tag 41792.
func (m NoUnderlyingStreams) HasUnderlyingDeliveryStreamToleranceUnitOfMeasure() bool {
	return m.Has(tag.UnderlyingDeliveryStreamToleranceUnitOfMeasure)
}

// HasUnderlyingDeliveryStreamToleranceType returns true if UnderlyingDeliveryStreamToleranceType is present, Tag 41793.
func (m NoUnderlyingStreams) HasUnderlyingDeliveryStreamToleranceType() bool {
	return m.Has(tag.UnderlyingDeliveryStreamToleranceType)
}

// HasUnderlyingDeliveryStreamToleranceOptionSide returns true if UnderlyingDeliveryStreamToleranceOptionSide is present, Tag 41794.
func (m NoUnderlyingStreams) HasUnderlyingDeliveryStreamToleranceOptionSide() bool {
	return m.Has(tag.UnderlyingDeliveryStreamToleranceOptionSide)
}

// HasUnderlyingDeliveryStreamTotalPositiveTolerance returns true if UnderlyingDeliveryStreamTotalPositiveTolerance is present, Tag 41795.
func (m NoUnderlyingStreams) HasUnderlyingDeliveryStreamTotalPositiveTolerance() bool {
	return m.Has(tag.UnderlyingDeliveryStreamTotalPositiveTolerance)
}

// HasUnderlyingDeliveryStreamTotalNegativeTolerance returns true if UnderlyingDeliveryStreamTotalNegativeTolerance is present, Tag 41796.
func (m NoUnderlyingStreams) HasUnderlyingDeliveryStreamTotalNegativeTolerance() bool {
	return m.Has(tag.UnderlyingDeliveryStreamTotalNegativeTolerance)
}

// HasUnderlyingDeliveryStreamNotionalConversionFactor returns true if UnderlyingDeliveryStreamNotionalConversionFactor is present, Tag 41797.
func (m NoUnderlyingStreams) HasUnderlyingDeliveryStreamNotionalConversionFactor() bool {
	return m.Has(tag.UnderlyingDeliveryStreamNotionalConversionFactor)
}

// HasUnderlyingDeliveryStreamTransportEquipment returns true if UnderlyingDeliveryStreamTransportEquipment is present, Tag 41798.
func (m NoUnderlyingStreams) HasUnderlyingDeliveryStreamTransportEquipment() bool {
	return m.Has(tag.UnderlyingDeliveryStreamTransportEquipment)
}

// HasUnderlyingDeliveryStreamElectingPartySide returns true if UnderlyingDeliveryStreamElectingPartySide is present, Tag 41799.
func (m NoUnderlyingStreams) HasUnderlyingDeliveryStreamElectingPartySide() bool {
	return m.Has(tag.UnderlyingDeliveryStreamElectingPartySide)
}

// HasUnderlyingDeliveryStreamDeliveryPointSource returns true if UnderlyingDeliveryStreamDeliveryPointSource is present, Tag 42196.
func (m NoUnderlyingStreams) HasUnderlyingDeliveryStreamDeliveryPointSource() bool {
	return m.Has(tag.UnderlyingDeliveryStreamDeliveryPointSource)
}

// HasUnderlyingDeliveryStreamDeliveryPointDesc returns true if UnderlyingDeliveryStreamDeliveryPointDesc is present, Tag 42197.
func (m NoUnderlyingStreams) HasUnderlyingDeliveryStreamDeliveryPointDesc() bool {
	return m.Has(tag.UnderlyingDeliveryStreamDeliveryPointDesc)
}

// HasUnderlyingDeliveryStreamRouteOrCharter returns true if UnderlyingDeliveryStreamRouteOrCharter is present, Tag 43096.
func (m NoUnderlyingStreams) HasUnderlyingDeliveryStreamRouteOrCharter() bool {
	return m.Has(tag.UnderlyingDeliveryStreamRouteOrCharter)
}

// HasNoUnderlyingDeliverySchedules returns true if NoUnderlyingDeliverySchedules is present, Tag 41756.
func (m NoUnderlyingStreams) HasNoUnderlyingDeliverySchedules() bool {
	return m.Has(tag.NoUnderlyingDeliverySchedules)
}

// HasUnderlyingStreamVersion returns true if UnderlyingStreamVersion is present, Tag 43083.
func (m NoUnderlyingStreams) HasUnderlyingStreamVersion() bool {
	return m.Has(tag.UnderlyingStreamVersion)
}

// HasUnderlyingStreamVersionEffectiveDate returns true if UnderlyingStreamVersionEffectiveDate is present, Tag 43084.
func (m NoUnderlyingStreams) HasUnderlyingStreamVersionEffectiveDate() bool {
	return m.Has(tag.UnderlyingStreamVersionEffectiveDate)
}

// HasUnderlyingStreamNotionalDeterminationMethod returns true if UnderlyingStreamNotionalDeterminationMethod is present, Tag 43085.
func (m NoUnderlyingStreams) HasUnderlyingStreamNotionalDeterminationMethod() bool {
	return m.Has(tag.UnderlyingStreamNotionalDeterminationMethod)
}

// HasUnderlyingStreamNotionalAdjustments returns true if UnderlyingStreamNotionalAdjustments is present, Tag 43086.
func (m NoUnderlyingStreams) HasUnderlyingStreamNotionalAdjustments() bool {
	return m.Has(tag.UnderlyingStreamNotionalAdjustments)
}

// NoUnderlyingStreamEffectiveDateBusinessCenters is a repeating group element, Tag 40975.
type NoUnderlyingStreamEffectiveDateBusinessCenters struct {
	*quickfix.Group
}

// SetUnderlyingStreamEffectiveDateBusinessCenter sets UnderlyingStreamEffectiveDateBusinessCenter, Tag 40059.
func (m NoUnderlyingStreamEffectiveDateBusinessCenters) SetUnderlyingStreamEffectiveDateBusinessCenter(v string) {
	m.Set(field.NewUnderlyingStreamEffectiveDateBusinessCenter(v))
}

// GetUnderlyingStreamEffectiveDateBusinessCenter gets UnderlyingStreamEffectiveDateBusinessCenter, Tag 40059.
func (m NoUnderlyingStreamEffectiveDateBusinessCenters) GetUnderlyingStreamEffectiveDateBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamEffectiveDateBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingStreamEffectiveDateBusinessCenter returns true if UnderlyingStreamEffectiveDateBusinessCenter is present, Tag 40059.
func (m NoUnderlyingStreamEffectiveDateBusinessCenters) HasUnderlyingStreamEffectiveDateBusinessCenter() bool {
	return m.Has(tag.UnderlyingStreamEffectiveDateBusinessCenter)
}

// NoUnderlyingStreamEffectiveDateBusinessCentersRepeatingGroup is a repeating group, Tag 40975.
type NoUnderlyingStreamEffectiveDateBusinessCentersRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingStreamEffectiveDateBusinessCentersRepeatingGroup returns an initialized, NoUnderlyingStreamEffectiveDateBusinessCentersRepeatingGroup.
func NewNoUnderlyingStreamEffectiveDateBusinessCentersRepeatingGroup() NoUnderlyingStreamEffectiveDateBusinessCentersRepeatingGroup {
	return NoUnderlyingStreamEffectiveDateBusinessCentersRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingStreamEffectiveDateBusinessCenters,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingStreamEffectiveDateBusinessCenter),
			},
		),
	}
}

// Add create and append a new NoUnderlyingStreamEffectiveDateBusinessCenters to this group.
func (m NoUnderlyingStreamEffectiveDateBusinessCentersRepeatingGroup) Add() NoUnderlyingStreamEffectiveDateBusinessCenters {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingStreamEffectiveDateBusinessCenters{g}
}

// Get returns the ith NoUnderlyingStreamEffectiveDateBusinessCenters in the NoUnderlyingStreamEffectiveDateBusinessCentersRepeatinGroup.
func (m NoUnderlyingStreamEffectiveDateBusinessCentersRepeatingGroup) Get(i int) NoUnderlyingStreamEffectiveDateBusinessCenters {
	return NoUnderlyingStreamEffectiveDateBusinessCenters{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingStreamTerminationDateBusinessCenters is a repeating group element, Tag 40976.
type NoUnderlyingStreamTerminationDateBusinessCenters struct {
	*quickfix.Group
}

// SetUnderlyingStreamTerminationDateBusinessCenter sets UnderlyingStreamTerminationDateBusinessCenter, Tag 40550.
func (m NoUnderlyingStreamTerminationDateBusinessCenters) SetUnderlyingStreamTerminationDateBusinessCenter(v string) {
	m.Set(field.NewUnderlyingStreamTerminationDateBusinessCenter(v))
}

// GetUnderlyingStreamTerminationDateBusinessCenter gets UnderlyingStreamTerminationDateBusinessCenter, Tag 40550.
func (m NoUnderlyingStreamTerminationDateBusinessCenters) GetUnderlyingStreamTerminationDateBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamTerminationDateBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingStreamTerminationDateBusinessCenter returns true if UnderlyingStreamTerminationDateBusinessCenter is present, Tag 40550.
func (m NoUnderlyingStreamTerminationDateBusinessCenters) HasUnderlyingStreamTerminationDateBusinessCenter() bool {
	return m.Has(tag.UnderlyingStreamTerminationDateBusinessCenter)
}

// NoUnderlyingStreamTerminationDateBusinessCentersRepeatingGroup is a repeating group, Tag 40976.
type NoUnderlyingStreamTerminationDateBusinessCentersRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingStreamTerminationDateBusinessCentersRepeatingGroup returns an initialized, NoUnderlyingStreamTerminationDateBusinessCentersRepeatingGroup.
func NewNoUnderlyingStreamTerminationDateBusinessCentersRepeatingGroup() NoUnderlyingStreamTerminationDateBusinessCentersRepeatingGroup {
	return NoUnderlyingStreamTerminationDateBusinessCentersRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingStreamTerminationDateBusinessCenters,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingStreamTerminationDateBusinessCenter),
			},
		),
	}
}

// Add create and append a new NoUnderlyingStreamTerminationDateBusinessCenters to this group.
func (m NoUnderlyingStreamTerminationDateBusinessCentersRepeatingGroup) Add() NoUnderlyingStreamTerminationDateBusinessCenters {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingStreamTerminationDateBusinessCenters{g}
}

// Get returns the ith NoUnderlyingStreamTerminationDateBusinessCenters in the NoUnderlyingStreamTerminationDateBusinessCentersRepeatinGroup.
func (m NoUnderlyingStreamTerminationDateBusinessCentersRepeatingGroup) Get(i int) NoUnderlyingStreamTerminationDateBusinessCenters {
	return NoUnderlyingStreamTerminationDateBusinessCenters{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingStreamCalculationPeriodBusinessCenters is a repeating group element, Tag 40973.
type NoUnderlyingStreamCalculationPeriodBusinessCenters struct {
	*quickfix.Group
}

// SetUnderlyingStreamCalculationPeriodBusinessCenter sets UnderlyingStreamCalculationPeriodBusinessCenter, Tag 40557.
func (m NoUnderlyingStreamCalculationPeriodBusinessCenters) SetUnderlyingStreamCalculationPeriodBusinessCenter(v string) {
	m.Set(field.NewUnderlyingStreamCalculationPeriodBusinessCenter(v))
}

// GetUnderlyingStreamCalculationPeriodBusinessCenter gets UnderlyingStreamCalculationPeriodBusinessCenter, Tag 40557.
func (m NoUnderlyingStreamCalculationPeriodBusinessCenters) GetUnderlyingStreamCalculationPeriodBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamCalculationPeriodBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingStreamCalculationPeriodBusinessCenter returns true if UnderlyingStreamCalculationPeriodBusinessCenter is present, Tag 40557.
func (m NoUnderlyingStreamCalculationPeriodBusinessCenters) HasUnderlyingStreamCalculationPeriodBusinessCenter() bool {
	return m.Has(tag.UnderlyingStreamCalculationPeriodBusinessCenter)
}

// NoUnderlyingStreamCalculationPeriodBusinessCentersRepeatingGroup is a repeating group, Tag 40973.
type NoUnderlyingStreamCalculationPeriodBusinessCentersRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingStreamCalculationPeriodBusinessCentersRepeatingGroup returns an initialized, NoUnderlyingStreamCalculationPeriodBusinessCentersRepeatingGroup.
func NewNoUnderlyingStreamCalculationPeriodBusinessCentersRepeatingGroup() NoUnderlyingStreamCalculationPeriodBusinessCentersRepeatingGroup {
	return NoUnderlyingStreamCalculationPeriodBusinessCentersRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingStreamCalculationPeriodBusinessCenters,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingStreamCalculationPeriodBusinessCenter),
			},
		),
	}
}

// Add create and append a new NoUnderlyingStreamCalculationPeriodBusinessCenters to this group.
func (m NoUnderlyingStreamCalculationPeriodBusinessCentersRepeatingGroup) Add() NoUnderlyingStreamCalculationPeriodBusinessCenters {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingStreamCalculationPeriodBusinessCenters{g}
}

// Get returns the ith NoUnderlyingStreamCalculationPeriodBusinessCenters in the NoUnderlyingStreamCalculationPeriodBusinessCentersRepeatinGroup.
func (m NoUnderlyingStreamCalculationPeriodBusinessCentersRepeatingGroup) Get(i int) NoUnderlyingStreamCalculationPeriodBusinessCenters {
	return NoUnderlyingStreamCalculationPeriodBusinessCenters{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingStreamFirstPeriodStartDateBusinessCenters is a repeating group element, Tag 40974.
type NoUnderlyingStreamFirstPeriodStartDateBusinessCenters struct {
	*quickfix.Group
}

// SetUnderlyingStreamFirstPeriodStartDateBusinessCenter sets UnderlyingStreamFirstPeriodStartDateBusinessCenter, Tag 40560.
func (m NoUnderlyingStreamFirstPeriodStartDateBusinessCenters) SetUnderlyingStreamFirstPeriodStartDateBusinessCenter(v string) {
	m.Set(field.NewUnderlyingStreamFirstPeriodStartDateBusinessCenter(v))
}

// GetUnderlyingStreamFirstPeriodStartDateBusinessCenter gets UnderlyingStreamFirstPeriodStartDateBusinessCenter, Tag 40560.
func (m NoUnderlyingStreamFirstPeriodStartDateBusinessCenters) GetUnderlyingStreamFirstPeriodStartDateBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamFirstPeriodStartDateBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingStreamFirstPeriodStartDateBusinessCenter returns true if UnderlyingStreamFirstPeriodStartDateBusinessCenter is present, Tag 40560.
func (m NoUnderlyingStreamFirstPeriodStartDateBusinessCenters) HasUnderlyingStreamFirstPeriodStartDateBusinessCenter() bool {
	return m.Has(tag.UnderlyingStreamFirstPeriodStartDateBusinessCenter)
}

// NoUnderlyingStreamFirstPeriodStartDateBusinessCentersRepeatingGroup is a repeating group, Tag 40974.
type NoUnderlyingStreamFirstPeriodStartDateBusinessCentersRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingStreamFirstPeriodStartDateBusinessCentersRepeatingGroup returns an initialized, NoUnderlyingStreamFirstPeriodStartDateBusinessCentersRepeatingGroup.
func NewNoUnderlyingStreamFirstPeriodStartDateBusinessCentersRepeatingGroup() NoUnderlyingStreamFirstPeriodStartDateBusinessCentersRepeatingGroup {
	return NoUnderlyingStreamFirstPeriodStartDateBusinessCentersRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingStreamFirstPeriodStartDateBusinessCenters,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingStreamFirstPeriodStartDateBusinessCenter),
			},
		),
	}
}

// Add create and append a new NoUnderlyingStreamFirstPeriodStartDateBusinessCenters to this group.
func (m NoUnderlyingStreamFirstPeriodStartDateBusinessCentersRepeatingGroup) Add() NoUnderlyingStreamFirstPeriodStartDateBusinessCenters {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingStreamFirstPeriodStartDateBusinessCenters{g}
}

// Get returns the ith NoUnderlyingStreamFirstPeriodStartDateBusinessCenters in the NoUnderlyingStreamFirstPeriodStartDateBusinessCentersRepeatinGroup.
func (m NoUnderlyingStreamFirstPeriodStartDateBusinessCentersRepeatingGroup) Get(i int) NoUnderlyingStreamFirstPeriodStartDateBusinessCenters {
	return NoUnderlyingStreamFirstPeriodStartDateBusinessCenters{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingStreamCalculationPeriodDates is a repeating group element, Tag 41954.
type NoUnderlyingStreamCalculationPeriodDates struct {
	*quickfix.Group
}

// SetUnderlyingStreamCalculationPeriodDate sets UnderlyingStreamCalculationPeriodDate, Tag 41955.
func (m NoUnderlyingStreamCalculationPeriodDates) SetUnderlyingStreamCalculationPeriodDate(v string) {
	m.Set(field.NewUnderlyingStreamCalculationPeriodDate(v))
}

// SetUnderlyingStreamCalculationPeriodDateType sets UnderlyingStreamCalculationPeriodDateType, Tag 41956.
func (m NoUnderlyingStreamCalculationPeriodDates) SetUnderlyingStreamCalculationPeriodDateType(v int) {
	m.Set(field.NewUnderlyingStreamCalculationPeriodDateType(v))
}

// GetUnderlyingStreamCalculationPeriodDate gets UnderlyingStreamCalculationPeriodDate, Tag 41955.
func (m NoUnderlyingStreamCalculationPeriodDates) GetUnderlyingStreamCalculationPeriodDate() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamCalculationPeriodDateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStreamCalculationPeriodDateType gets UnderlyingStreamCalculationPeriodDateType, Tag 41956.
func (m NoUnderlyingStreamCalculationPeriodDates) GetUnderlyingStreamCalculationPeriodDateType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamCalculationPeriodDateTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingStreamCalculationPeriodDate returns true if UnderlyingStreamCalculationPeriodDate is present, Tag 41955.
func (m NoUnderlyingStreamCalculationPeriodDates) HasUnderlyingStreamCalculationPeriodDate() bool {
	return m.Has(tag.UnderlyingStreamCalculationPeriodDate)
}

// HasUnderlyingStreamCalculationPeriodDateType returns true if UnderlyingStreamCalculationPeriodDateType is present, Tag 41956.
func (m NoUnderlyingStreamCalculationPeriodDates) HasUnderlyingStreamCalculationPeriodDateType() bool {
	return m.Has(tag.UnderlyingStreamCalculationPeriodDateType)
}

// NoUnderlyingStreamCalculationPeriodDatesRepeatingGroup is a repeating group, Tag 41954.
type NoUnderlyingStreamCalculationPeriodDatesRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingStreamCalculationPeriodDatesRepeatingGroup returns an initialized, NoUnderlyingStreamCalculationPeriodDatesRepeatingGroup.
func NewNoUnderlyingStreamCalculationPeriodDatesRepeatingGroup() NoUnderlyingStreamCalculationPeriodDatesRepeatingGroup {
	return NoUnderlyingStreamCalculationPeriodDatesRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingStreamCalculationPeriodDates,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingStreamCalculationPeriodDate),
				quickfix.GroupElement(tag.UnderlyingStreamCalculationPeriodDateType),
			},
		),
	}
}

// Add create and append a new NoUnderlyingStreamCalculationPeriodDates to this group.
func (m NoUnderlyingStreamCalculationPeriodDatesRepeatingGroup) Add() NoUnderlyingStreamCalculationPeriodDates {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingStreamCalculationPeriodDates{g}
}

// Get returns the ith NoUnderlyingStreamCalculationPeriodDates in the NoUnderlyingStreamCalculationPeriodDatesRepeatinGroup.
func (m NoUnderlyingStreamCalculationPeriodDatesRepeatingGroup) Get(i int) NoUnderlyingStreamCalculationPeriodDates {
	return NoUnderlyingStreamCalculationPeriodDates{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingPaymentStreamPaymentDateBusinessCenters is a repeating group element, Tag 40969.
type NoUnderlyingPaymentStreamPaymentDateBusinessCenters struct {
	*quickfix.Group
}

// SetUnderlyingPaymentStreamPaymentDateBusinessCenter sets UnderlyingPaymentStreamPaymentDateBusinessCenter, Tag 40582.
func (m NoUnderlyingPaymentStreamPaymentDateBusinessCenters) SetUnderlyingPaymentStreamPaymentDateBusinessCenter(v string) {
	m.Set(field.NewUnderlyingPaymentStreamPaymentDateBusinessCenter(v))
}

// GetUnderlyingPaymentStreamPaymentDateBusinessCenter gets UnderlyingPaymentStreamPaymentDateBusinessCenter, Tag 40582.
func (m NoUnderlyingPaymentStreamPaymentDateBusinessCenters) GetUnderlyingPaymentStreamPaymentDateBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamPaymentDateBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingPaymentStreamPaymentDateBusinessCenter returns true if UnderlyingPaymentStreamPaymentDateBusinessCenter is present, Tag 40582.
func (m NoUnderlyingPaymentStreamPaymentDateBusinessCenters) HasUnderlyingPaymentStreamPaymentDateBusinessCenter() bool {
	return m.Has(tag.UnderlyingPaymentStreamPaymentDateBusinessCenter)
}

// NoUnderlyingPaymentStreamPaymentDateBusinessCentersRepeatingGroup is a repeating group, Tag 40969.
type NoUnderlyingPaymentStreamPaymentDateBusinessCentersRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingPaymentStreamPaymentDateBusinessCentersRepeatingGroup returns an initialized, NoUnderlyingPaymentStreamPaymentDateBusinessCentersRepeatingGroup.
func NewNoUnderlyingPaymentStreamPaymentDateBusinessCentersRepeatingGroup() NoUnderlyingPaymentStreamPaymentDateBusinessCentersRepeatingGroup {
	return NoUnderlyingPaymentStreamPaymentDateBusinessCentersRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingPaymentStreamPaymentDateBusinessCenters,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingPaymentStreamPaymentDateBusinessCenter),
			},
		),
	}
}

// Add create and append a new NoUnderlyingPaymentStreamPaymentDateBusinessCenters to this group.
func (m NoUnderlyingPaymentStreamPaymentDateBusinessCentersRepeatingGroup) Add() NoUnderlyingPaymentStreamPaymentDateBusinessCenters {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingPaymentStreamPaymentDateBusinessCenters{g}
}

// Get returns the ith NoUnderlyingPaymentStreamPaymentDateBusinessCenters in the NoUnderlyingPaymentStreamPaymentDateBusinessCentersRepeatinGroup.
func (m NoUnderlyingPaymentStreamPaymentDateBusinessCentersRepeatingGroup) Get(i int) NoUnderlyingPaymentStreamPaymentDateBusinessCenters {
	return NoUnderlyingPaymentStreamPaymentDateBusinessCenters{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingPaymentStreamPaymentDates is a repeating group element, Tag 41937.
type NoUnderlyingPaymentStreamPaymentDates struct {
	*quickfix.Group
}

// SetUnderlyingPaymentStreamPaymentDate sets UnderlyingPaymentStreamPaymentDate, Tag 41938.
func (m NoUnderlyingPaymentStreamPaymentDates) SetUnderlyingPaymentStreamPaymentDate(v string) {
	m.Set(field.NewUnderlyingPaymentStreamPaymentDate(v))
}

// SetUnderlyingPaymentStreamPaymentDateType sets UnderlyingPaymentStreamPaymentDateType, Tag 41939.
func (m NoUnderlyingPaymentStreamPaymentDates) SetUnderlyingPaymentStreamPaymentDateType(v int) {
	m.Set(field.NewUnderlyingPaymentStreamPaymentDateType(v))
}

// GetUnderlyingPaymentStreamPaymentDate gets UnderlyingPaymentStreamPaymentDate, Tag 41938.
func (m NoUnderlyingPaymentStreamPaymentDates) GetUnderlyingPaymentStreamPaymentDate() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamPaymentDateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamPaymentDateType gets UnderlyingPaymentStreamPaymentDateType, Tag 41939.
func (m NoUnderlyingPaymentStreamPaymentDates) GetUnderlyingPaymentStreamPaymentDateType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamPaymentDateTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingPaymentStreamPaymentDate returns true if UnderlyingPaymentStreamPaymentDate is present, Tag 41938.
func (m NoUnderlyingPaymentStreamPaymentDates) HasUnderlyingPaymentStreamPaymentDate() bool {
	return m.Has(tag.UnderlyingPaymentStreamPaymentDate)
}

// HasUnderlyingPaymentStreamPaymentDateType returns true if UnderlyingPaymentStreamPaymentDateType is present, Tag 41939.
func (m NoUnderlyingPaymentStreamPaymentDates) HasUnderlyingPaymentStreamPaymentDateType() bool {
	return m.Has(tag.UnderlyingPaymentStreamPaymentDateType)
}

// NoUnderlyingPaymentStreamPaymentDatesRepeatingGroup is a repeating group, Tag 41937.
type NoUnderlyingPaymentStreamPaymentDatesRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingPaymentStreamPaymentDatesRepeatingGroup returns an initialized, NoUnderlyingPaymentStreamPaymentDatesRepeatingGroup.
func NewNoUnderlyingPaymentStreamPaymentDatesRepeatingGroup() NoUnderlyingPaymentStreamPaymentDatesRepeatingGroup {
	return NoUnderlyingPaymentStreamPaymentDatesRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingPaymentStreamPaymentDates,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingPaymentStreamPaymentDate),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamPaymentDateType),
			},
		),
	}
}

// Add create and append a new NoUnderlyingPaymentStreamPaymentDates to this group.
func (m NoUnderlyingPaymentStreamPaymentDatesRepeatingGroup) Add() NoUnderlyingPaymentStreamPaymentDates {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingPaymentStreamPaymentDates{g}
}

// Get returns the ith NoUnderlyingPaymentStreamPaymentDates in the NoUnderlyingPaymentStreamPaymentDatesRepeatinGroup.
func (m NoUnderlyingPaymentStreamPaymentDatesRepeatingGroup) Get(i int) NoUnderlyingPaymentStreamPaymentDates {
	return NoUnderlyingPaymentStreamPaymentDates{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingPaymentStreamResetDateBusinessCenters is a repeating group element, Tag 40970.
type NoUnderlyingPaymentStreamResetDateBusinessCenters struct {
	*quickfix.Group
}

// SetUnderlyingPaymentStreamResetDateBusinessCenter sets UnderlyingPaymentStreamResetDateBusinessCenter, Tag 40594.
func (m NoUnderlyingPaymentStreamResetDateBusinessCenters) SetUnderlyingPaymentStreamResetDateBusinessCenter(v string) {
	m.Set(field.NewUnderlyingPaymentStreamResetDateBusinessCenter(v))
}

// GetUnderlyingPaymentStreamResetDateBusinessCenter gets UnderlyingPaymentStreamResetDateBusinessCenter, Tag 40594.
func (m NoUnderlyingPaymentStreamResetDateBusinessCenters) GetUnderlyingPaymentStreamResetDateBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamResetDateBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingPaymentStreamResetDateBusinessCenter returns true if UnderlyingPaymentStreamResetDateBusinessCenter is present, Tag 40594.
func (m NoUnderlyingPaymentStreamResetDateBusinessCenters) HasUnderlyingPaymentStreamResetDateBusinessCenter() bool {
	return m.Has(tag.UnderlyingPaymentStreamResetDateBusinessCenter)
}

// NoUnderlyingPaymentStreamResetDateBusinessCentersRepeatingGroup is a repeating group, Tag 40970.
type NoUnderlyingPaymentStreamResetDateBusinessCentersRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingPaymentStreamResetDateBusinessCentersRepeatingGroup returns an initialized, NoUnderlyingPaymentStreamResetDateBusinessCentersRepeatingGroup.
func NewNoUnderlyingPaymentStreamResetDateBusinessCentersRepeatingGroup() NoUnderlyingPaymentStreamResetDateBusinessCentersRepeatingGroup {
	return NoUnderlyingPaymentStreamResetDateBusinessCentersRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingPaymentStreamResetDateBusinessCenters,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingPaymentStreamResetDateBusinessCenter),
			},
		),
	}
}

// Add create and append a new NoUnderlyingPaymentStreamResetDateBusinessCenters to this group.
func (m NoUnderlyingPaymentStreamResetDateBusinessCentersRepeatingGroup) Add() NoUnderlyingPaymentStreamResetDateBusinessCenters {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingPaymentStreamResetDateBusinessCenters{g}
}

// Get returns the ith NoUnderlyingPaymentStreamResetDateBusinessCenters in the NoUnderlyingPaymentStreamResetDateBusinessCentersRepeatinGroup.
func (m NoUnderlyingPaymentStreamResetDateBusinessCentersRepeatingGroup) Get(i int) NoUnderlyingPaymentStreamResetDateBusinessCenters {
	return NoUnderlyingPaymentStreamResetDateBusinessCenters{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingPaymentStreamInitialFixingDateBusinessCenters is a repeating group element, Tag 40971.
type NoUnderlyingPaymentStreamInitialFixingDateBusinessCenters struct {
	*quickfix.Group
}

// SetUnderlyingPaymentStreamInitialFixingDateBusinessCenter sets UnderlyingPaymentStreamInitialFixingDateBusinessCenter, Tag 40600.
func (m NoUnderlyingPaymentStreamInitialFixingDateBusinessCenters) SetUnderlyingPaymentStreamInitialFixingDateBusinessCenter(v string) {
	m.Set(field.NewUnderlyingPaymentStreamInitialFixingDateBusinessCenter(v))
}

// GetUnderlyingPaymentStreamInitialFixingDateBusinessCenter gets UnderlyingPaymentStreamInitialFixingDateBusinessCenter, Tag 40600.
func (m NoUnderlyingPaymentStreamInitialFixingDateBusinessCenters) GetUnderlyingPaymentStreamInitialFixingDateBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamInitialFixingDateBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingPaymentStreamInitialFixingDateBusinessCenter returns true if UnderlyingPaymentStreamInitialFixingDateBusinessCenter is present, Tag 40600.
func (m NoUnderlyingPaymentStreamInitialFixingDateBusinessCenters) HasUnderlyingPaymentStreamInitialFixingDateBusinessCenter() bool {
	return m.Has(tag.UnderlyingPaymentStreamInitialFixingDateBusinessCenter)
}

// NoUnderlyingPaymentStreamInitialFixingDateBusinessCentersRepeatingGroup is a repeating group, Tag 40971.
type NoUnderlyingPaymentStreamInitialFixingDateBusinessCentersRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingPaymentStreamInitialFixingDateBusinessCentersRepeatingGroup returns an initialized, NoUnderlyingPaymentStreamInitialFixingDateBusinessCentersRepeatingGroup.
func NewNoUnderlyingPaymentStreamInitialFixingDateBusinessCentersRepeatingGroup() NoUnderlyingPaymentStreamInitialFixingDateBusinessCentersRepeatingGroup {
	return NoUnderlyingPaymentStreamInitialFixingDateBusinessCentersRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingPaymentStreamInitialFixingDateBusinessCenters,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingPaymentStreamInitialFixingDateBusinessCenter),
			},
		),
	}
}

// Add create and append a new NoUnderlyingPaymentStreamInitialFixingDateBusinessCenters to this group.
func (m NoUnderlyingPaymentStreamInitialFixingDateBusinessCentersRepeatingGroup) Add() NoUnderlyingPaymentStreamInitialFixingDateBusinessCenters {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingPaymentStreamInitialFixingDateBusinessCenters{g}
}

// Get returns the ith NoUnderlyingPaymentStreamInitialFixingDateBusinessCenters in the NoUnderlyingPaymentStreamInitialFixingDateBusinessCentersRepeatinGroup.
func (m NoUnderlyingPaymentStreamInitialFixingDateBusinessCentersRepeatingGroup) Get(i int) NoUnderlyingPaymentStreamInitialFixingDateBusinessCenters {
	return NoUnderlyingPaymentStreamInitialFixingDateBusinessCenters{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingPaymentStreamFixingDateBusinessCenters is a repeating group element, Tag 40972.
type NoUnderlyingPaymentStreamFixingDateBusinessCenters struct {
	*quickfix.Group
}

// SetUnderlyingPaymentStreamFixingDateBusinessCenter sets UnderlyingPaymentStreamFixingDateBusinessCenter, Tag 40607.
func (m NoUnderlyingPaymentStreamFixingDateBusinessCenters) SetUnderlyingPaymentStreamFixingDateBusinessCenter(v string) {
	m.Set(field.NewUnderlyingPaymentStreamFixingDateBusinessCenter(v))
}

// GetUnderlyingPaymentStreamFixingDateBusinessCenter gets UnderlyingPaymentStreamFixingDateBusinessCenter, Tag 40607.
func (m NoUnderlyingPaymentStreamFixingDateBusinessCenters) GetUnderlyingPaymentStreamFixingDateBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamFixingDateBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingPaymentStreamFixingDateBusinessCenter returns true if UnderlyingPaymentStreamFixingDateBusinessCenter is present, Tag 40607.
func (m NoUnderlyingPaymentStreamFixingDateBusinessCenters) HasUnderlyingPaymentStreamFixingDateBusinessCenter() bool {
	return m.Has(tag.UnderlyingPaymentStreamFixingDateBusinessCenter)
}

// NoUnderlyingPaymentStreamFixingDateBusinessCentersRepeatingGroup is a repeating group, Tag 40972.
type NoUnderlyingPaymentStreamFixingDateBusinessCentersRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingPaymentStreamFixingDateBusinessCentersRepeatingGroup returns an initialized, NoUnderlyingPaymentStreamFixingDateBusinessCentersRepeatingGroup.
func NewNoUnderlyingPaymentStreamFixingDateBusinessCentersRepeatingGroup() NoUnderlyingPaymentStreamFixingDateBusinessCentersRepeatingGroup {
	return NoUnderlyingPaymentStreamFixingDateBusinessCentersRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingPaymentStreamFixingDateBusinessCenters,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingPaymentStreamFixingDateBusinessCenter),
			},
		),
	}
}

// Add create and append a new NoUnderlyingPaymentStreamFixingDateBusinessCenters to this group.
func (m NoUnderlyingPaymentStreamFixingDateBusinessCentersRepeatingGroup) Add() NoUnderlyingPaymentStreamFixingDateBusinessCenters {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingPaymentStreamFixingDateBusinessCenters{g}
}

// Get returns the ith NoUnderlyingPaymentStreamFixingDateBusinessCenters in the NoUnderlyingPaymentStreamFixingDateBusinessCentersRepeatinGroup.
func (m NoUnderlyingPaymentStreamFixingDateBusinessCentersRepeatingGroup) Get(i int) NoUnderlyingPaymentStreamFixingDateBusinessCenters {
	return NoUnderlyingPaymentStreamFixingDateBusinessCenters{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingPaymentStreamFixingDates is a repeating group element, Tag 42955.
type NoUnderlyingPaymentStreamFixingDates struct {
	*quickfix.Group
}

// SetUnderlyingPaymentStreamFixingDate sets UnderlyingPaymentStreamFixingDate, Tag 42956.
func (m NoUnderlyingPaymentStreamFixingDates) SetUnderlyingPaymentStreamFixingDate(v string) {
	m.Set(field.NewUnderlyingPaymentStreamFixingDate(v))
}

// SetUnderlyingPaymentStreamFixingDateType sets UnderlyingPaymentStreamFixingDateType, Tag 42957.
func (m NoUnderlyingPaymentStreamFixingDates) SetUnderlyingPaymentStreamFixingDateType(v int) {
	m.Set(field.NewUnderlyingPaymentStreamFixingDateType(v))
}

// GetUnderlyingPaymentStreamFixingDate gets UnderlyingPaymentStreamFixingDate, Tag 42956.
func (m NoUnderlyingPaymentStreamFixingDates) GetUnderlyingPaymentStreamFixingDate() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamFixingDateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamFixingDateType gets UnderlyingPaymentStreamFixingDateType, Tag 42957.
func (m NoUnderlyingPaymentStreamFixingDates) GetUnderlyingPaymentStreamFixingDateType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamFixingDateTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingPaymentStreamFixingDate returns true if UnderlyingPaymentStreamFixingDate is present, Tag 42956.
func (m NoUnderlyingPaymentStreamFixingDates) HasUnderlyingPaymentStreamFixingDate() bool {
	return m.Has(tag.UnderlyingPaymentStreamFixingDate)
}

// HasUnderlyingPaymentStreamFixingDateType returns true if UnderlyingPaymentStreamFixingDateType is present, Tag 42957.
func (m NoUnderlyingPaymentStreamFixingDates) HasUnderlyingPaymentStreamFixingDateType() bool {
	return m.Has(tag.UnderlyingPaymentStreamFixingDateType)
}

// NoUnderlyingPaymentStreamFixingDatesRepeatingGroup is a repeating group, Tag 42955.
type NoUnderlyingPaymentStreamFixingDatesRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingPaymentStreamFixingDatesRepeatingGroup returns an initialized, NoUnderlyingPaymentStreamFixingDatesRepeatingGroup.
func NewNoUnderlyingPaymentStreamFixingDatesRepeatingGroup() NoUnderlyingPaymentStreamFixingDatesRepeatingGroup {
	return NoUnderlyingPaymentStreamFixingDatesRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingPaymentStreamFixingDates,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingPaymentStreamFixingDate),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamFixingDateType),
			},
		),
	}
}

// Add create and append a new NoUnderlyingPaymentStreamFixingDates to this group.
func (m NoUnderlyingPaymentStreamFixingDatesRepeatingGroup) Add() NoUnderlyingPaymentStreamFixingDates {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingPaymentStreamFixingDates{g}
}

// Get returns the ith NoUnderlyingPaymentStreamFixingDates in the NoUnderlyingPaymentStreamFixingDatesRepeatinGroup.
func (m NoUnderlyingPaymentStreamFixingDatesRepeatingGroup) Get(i int) NoUnderlyingPaymentStreamFixingDates {
	return NoUnderlyingPaymentStreamFixingDates{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingPaymentStreamPricingBusinessCenters is a repeating group element, Tag 41909.
type NoUnderlyingPaymentStreamPricingBusinessCenters struct {
	*quickfix.Group
}

// SetUnderlyingPaymentStreamPricingBusinessCenter sets UnderlyingPaymentStreamPricingBusinessCenter, Tag 41910.
func (m NoUnderlyingPaymentStreamPricingBusinessCenters) SetUnderlyingPaymentStreamPricingBusinessCenter(v string) {
	m.Set(field.NewUnderlyingPaymentStreamPricingBusinessCenter(v))
}

// GetUnderlyingPaymentStreamPricingBusinessCenter gets UnderlyingPaymentStreamPricingBusinessCenter, Tag 41910.
func (m NoUnderlyingPaymentStreamPricingBusinessCenters) GetUnderlyingPaymentStreamPricingBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamPricingBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingPaymentStreamPricingBusinessCenter returns true if UnderlyingPaymentStreamPricingBusinessCenter is present, Tag 41910.
func (m NoUnderlyingPaymentStreamPricingBusinessCenters) HasUnderlyingPaymentStreamPricingBusinessCenter() bool {
	return m.Has(tag.UnderlyingPaymentStreamPricingBusinessCenter)
}

// NoUnderlyingPaymentStreamPricingBusinessCentersRepeatingGroup is a repeating group, Tag 41909.
type NoUnderlyingPaymentStreamPricingBusinessCentersRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingPaymentStreamPricingBusinessCentersRepeatingGroup returns an initialized, NoUnderlyingPaymentStreamPricingBusinessCentersRepeatingGroup.
func NewNoUnderlyingPaymentStreamPricingBusinessCentersRepeatingGroup() NoUnderlyingPaymentStreamPricingBusinessCentersRepeatingGroup {
	return NoUnderlyingPaymentStreamPricingBusinessCentersRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingPaymentStreamPricingBusinessCenters,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingPaymentStreamPricingBusinessCenter),
			},
		),
	}
}

// Add create and append a new NoUnderlyingPaymentStreamPricingBusinessCenters to this group.
func (m NoUnderlyingPaymentStreamPricingBusinessCentersRepeatingGroup) Add() NoUnderlyingPaymentStreamPricingBusinessCenters {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingPaymentStreamPricingBusinessCenters{g}
}

// Get returns the ith NoUnderlyingPaymentStreamPricingBusinessCenters in the NoUnderlyingPaymentStreamPricingBusinessCentersRepeatinGroup.
func (m NoUnderlyingPaymentStreamPricingBusinessCentersRepeatingGroup) Get(i int) NoUnderlyingPaymentStreamPricingBusinessCenters {
	return NoUnderlyingPaymentStreamPricingBusinessCenters{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingPaymentStreamPricingDays is a repeating group element, Tag 41944.
type NoUnderlyingPaymentStreamPricingDays struct {
	*quickfix.Group
}

// SetUnderlyingPaymentStreamPricingDayOfWeek sets UnderlyingPaymentStreamPricingDayOfWeek, Tag 41945.
func (m NoUnderlyingPaymentStreamPricingDays) SetUnderlyingPaymentStreamPricingDayOfWeek(v int) {
	m.Set(field.NewUnderlyingPaymentStreamPricingDayOfWeek(v))
}

// SetUnderlyingPaymentStreamPricingDayNumber sets UnderlyingPaymentStreamPricingDayNumber, Tag 41946.
func (m NoUnderlyingPaymentStreamPricingDays) SetUnderlyingPaymentStreamPricingDayNumber(v int) {
	m.Set(field.NewUnderlyingPaymentStreamPricingDayNumber(v))
}

// GetUnderlyingPaymentStreamPricingDayOfWeek gets UnderlyingPaymentStreamPricingDayOfWeek, Tag 41945.
func (m NoUnderlyingPaymentStreamPricingDays) GetUnderlyingPaymentStreamPricingDayOfWeek() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamPricingDayOfWeekField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamPricingDayNumber gets UnderlyingPaymentStreamPricingDayNumber, Tag 41946.
func (m NoUnderlyingPaymentStreamPricingDays) GetUnderlyingPaymentStreamPricingDayNumber() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamPricingDayNumberField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingPaymentStreamPricingDayOfWeek returns true if UnderlyingPaymentStreamPricingDayOfWeek is present, Tag 41945.
func (m NoUnderlyingPaymentStreamPricingDays) HasUnderlyingPaymentStreamPricingDayOfWeek() bool {
	return m.Has(tag.UnderlyingPaymentStreamPricingDayOfWeek)
}

// HasUnderlyingPaymentStreamPricingDayNumber returns true if UnderlyingPaymentStreamPricingDayNumber is present, Tag 41946.
func (m NoUnderlyingPaymentStreamPricingDays) HasUnderlyingPaymentStreamPricingDayNumber() bool {
	return m.Has(tag.UnderlyingPaymentStreamPricingDayNumber)
}

// NoUnderlyingPaymentStreamPricingDaysRepeatingGroup is a repeating group, Tag 41944.
type NoUnderlyingPaymentStreamPricingDaysRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingPaymentStreamPricingDaysRepeatingGroup returns an initialized, NoUnderlyingPaymentStreamPricingDaysRepeatingGroup.
func NewNoUnderlyingPaymentStreamPricingDaysRepeatingGroup() NoUnderlyingPaymentStreamPricingDaysRepeatingGroup {
	return NoUnderlyingPaymentStreamPricingDaysRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingPaymentStreamPricingDays,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingPaymentStreamPricingDayOfWeek),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamPricingDayNumber),
			},
		),
	}
}

// Add create and append a new NoUnderlyingPaymentStreamPricingDays to this group.
func (m NoUnderlyingPaymentStreamPricingDaysRepeatingGroup) Add() NoUnderlyingPaymentStreamPricingDays {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingPaymentStreamPricingDays{g}
}

// Get returns the ith NoUnderlyingPaymentStreamPricingDays in the NoUnderlyingPaymentStreamPricingDaysRepeatinGroup.
func (m NoUnderlyingPaymentStreamPricingDaysRepeatingGroup) Get(i int) NoUnderlyingPaymentStreamPricingDays {
	return NoUnderlyingPaymentStreamPricingDays{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingPaymentStreamPricingDates is a repeating group element, Tag 41941.
type NoUnderlyingPaymentStreamPricingDates struct {
	*quickfix.Group
}

// SetUnderlyingPaymentStreamPricingDate sets UnderlyingPaymentStreamPricingDate, Tag 41942.
func (m NoUnderlyingPaymentStreamPricingDates) SetUnderlyingPaymentStreamPricingDate(v string) {
	m.Set(field.NewUnderlyingPaymentStreamPricingDate(v))
}

// SetUnderlyingPaymentStreamPricingDateType sets UnderlyingPaymentStreamPricingDateType, Tag 41943.
func (m NoUnderlyingPaymentStreamPricingDates) SetUnderlyingPaymentStreamPricingDateType(v int) {
	m.Set(field.NewUnderlyingPaymentStreamPricingDateType(v))
}

// GetUnderlyingPaymentStreamPricingDate gets UnderlyingPaymentStreamPricingDate, Tag 41942.
func (m NoUnderlyingPaymentStreamPricingDates) GetUnderlyingPaymentStreamPricingDate() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamPricingDateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamPricingDateType gets UnderlyingPaymentStreamPricingDateType, Tag 41943.
func (m NoUnderlyingPaymentStreamPricingDates) GetUnderlyingPaymentStreamPricingDateType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamPricingDateTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingPaymentStreamPricingDate returns true if UnderlyingPaymentStreamPricingDate is present, Tag 41942.
func (m NoUnderlyingPaymentStreamPricingDates) HasUnderlyingPaymentStreamPricingDate() bool {
	return m.Has(tag.UnderlyingPaymentStreamPricingDate)
}

// HasUnderlyingPaymentStreamPricingDateType returns true if UnderlyingPaymentStreamPricingDateType is present, Tag 41943.
func (m NoUnderlyingPaymentStreamPricingDates) HasUnderlyingPaymentStreamPricingDateType() bool {
	return m.Has(tag.UnderlyingPaymentStreamPricingDateType)
}

// NoUnderlyingPaymentStreamPricingDatesRepeatingGroup is a repeating group, Tag 41941.
type NoUnderlyingPaymentStreamPricingDatesRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingPaymentStreamPricingDatesRepeatingGroup returns an initialized, NoUnderlyingPaymentStreamPricingDatesRepeatingGroup.
func NewNoUnderlyingPaymentStreamPricingDatesRepeatingGroup() NoUnderlyingPaymentStreamPricingDatesRepeatingGroup {
	return NoUnderlyingPaymentStreamPricingDatesRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingPaymentStreamPricingDates,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingPaymentStreamPricingDate),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamPricingDateType),
			},
		),
	}
}

// Add create and append a new NoUnderlyingPaymentStreamPricingDates to this group.
func (m NoUnderlyingPaymentStreamPricingDatesRepeatingGroup) Add() NoUnderlyingPaymentStreamPricingDates {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingPaymentStreamPricingDates{g}
}

// Get returns the ith NoUnderlyingPaymentStreamPricingDates in the NoUnderlyingPaymentStreamPricingDatesRepeatinGroup.
func (m NoUnderlyingPaymentStreamPricingDatesRepeatingGroup) Get(i int) NoUnderlyingPaymentStreamPricingDates {
	return NoUnderlyingPaymentStreamPricingDates{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingPaymentStreamFormulas is a repeating group element, Tag 42981.
type NoUnderlyingPaymentStreamFormulas struct {
	*quickfix.Group
}

// SetUnderlyingPaymentStreamFormula sets UnderlyingPaymentStreamFormula, Tag 42982.
func (m NoUnderlyingPaymentStreamFormulas) SetUnderlyingPaymentStreamFormula(v string) {
	m.Set(field.NewUnderlyingPaymentStreamFormula(v))
}

// SetUnderlyingPaymentStreamFormulaDesc sets UnderlyingPaymentStreamFormulaDesc, Tag 42983.
func (m NoUnderlyingPaymentStreamFormulas) SetUnderlyingPaymentStreamFormulaDesc(v string) {
	m.Set(field.NewUnderlyingPaymentStreamFormulaDesc(v))
}

// SetUnderlyingPaymentStreamFormulaLength sets UnderlyingPaymentStreamFormulaLength, Tag 43111.
func (m NoUnderlyingPaymentStreamFormulas) SetUnderlyingPaymentStreamFormulaLength(v int) {
	m.Set(field.NewUnderlyingPaymentStreamFormulaLength(v))
}

// GetUnderlyingPaymentStreamFormula gets UnderlyingPaymentStreamFormula, Tag 42982.
func (m NoUnderlyingPaymentStreamFormulas) GetUnderlyingPaymentStreamFormula() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamFormulaField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamFormulaDesc gets UnderlyingPaymentStreamFormulaDesc, Tag 42983.
func (m NoUnderlyingPaymentStreamFormulas) GetUnderlyingPaymentStreamFormulaDesc() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamFormulaDescField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamFormulaLength gets UnderlyingPaymentStreamFormulaLength, Tag 43111.
func (m NoUnderlyingPaymentStreamFormulas) GetUnderlyingPaymentStreamFormulaLength() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamFormulaLengthField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingPaymentStreamFormula returns true if UnderlyingPaymentStreamFormula is present, Tag 42982.
func (m NoUnderlyingPaymentStreamFormulas) HasUnderlyingPaymentStreamFormula() bool {
	return m.Has(tag.UnderlyingPaymentStreamFormula)
}

// HasUnderlyingPaymentStreamFormulaDesc returns true if UnderlyingPaymentStreamFormulaDesc is present, Tag 42983.
func (m NoUnderlyingPaymentStreamFormulas) HasUnderlyingPaymentStreamFormulaDesc() bool {
	return m.Has(tag.UnderlyingPaymentStreamFormulaDesc)
}

// HasUnderlyingPaymentStreamFormulaLength returns true if UnderlyingPaymentStreamFormulaLength is present, Tag 43111.
func (m NoUnderlyingPaymentStreamFormulas) HasUnderlyingPaymentStreamFormulaLength() bool {
	return m.Has(tag.UnderlyingPaymentStreamFormulaLength)
}

// NoUnderlyingPaymentStreamFormulasRepeatingGroup is a repeating group, Tag 42981.
type NoUnderlyingPaymentStreamFormulasRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingPaymentStreamFormulasRepeatingGroup returns an initialized, NoUnderlyingPaymentStreamFormulasRepeatingGroup.
func NewNoUnderlyingPaymentStreamFormulasRepeatingGroup() NoUnderlyingPaymentStreamFormulasRepeatingGroup {
	return NoUnderlyingPaymentStreamFormulasRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingPaymentStreamFormulas,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingPaymentStreamFormula),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamFormulaDesc),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamFormulaLength),
			},
		),
	}
}

// Add create and append a new NoUnderlyingPaymentStreamFormulas to this group.
func (m NoUnderlyingPaymentStreamFormulasRepeatingGroup) Add() NoUnderlyingPaymentStreamFormulas {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingPaymentStreamFormulas{g}
}

// Get returns the ith NoUnderlyingPaymentStreamFormulas in the NoUnderlyingPaymentStreamFormulasRepeatinGroup.
func (m NoUnderlyingPaymentStreamFormulasRepeatingGroup) Get(i int) NoUnderlyingPaymentStreamFormulas {
	return NoUnderlyingPaymentStreamFormulas{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingDividendPeriods is a repeating group element, Tag 42862.
type NoUnderlyingDividendPeriods struct {
	*quickfix.Group
}

// SetUnderlyingDividendPeriodSequence sets UnderlyingDividendPeriodSequence, Tag 42863.
func (m NoUnderlyingDividendPeriods) SetUnderlyingDividendPeriodSequence(v int) {
	m.Set(field.NewUnderlyingDividendPeriodSequence(v))
}

// SetUnderlyingDividendPeriodStartDateUnadjusted sets UnderlyingDividendPeriodStartDateUnadjusted, Tag 42864.
func (m NoUnderlyingDividendPeriods) SetUnderlyingDividendPeriodStartDateUnadjusted(v string) {
	m.Set(field.NewUnderlyingDividendPeriodStartDateUnadjusted(v))
}

// SetUnderlyingDividendPeriodEndDateUnadjusted sets UnderlyingDividendPeriodEndDateUnadjusted, Tag 42865.
func (m NoUnderlyingDividendPeriods) SetUnderlyingDividendPeriodEndDateUnadjusted(v string) {
	m.Set(field.NewUnderlyingDividendPeriodEndDateUnadjusted(v))
}

// SetUnderlyingDividendPeriodUnderlierRefID sets UnderlyingDividendPeriodUnderlierRefID, Tag 42866.
func (m NoUnderlyingDividendPeriods) SetUnderlyingDividendPeriodUnderlierRefID(v string) {
	m.Set(field.NewUnderlyingDividendPeriodUnderlierRefID(v))
}

// SetUnderlyingDividendPeriodStrikePrice sets UnderlyingDividendPeriodStrikePrice, Tag 42867.
func (m NoUnderlyingDividendPeriods) SetUnderlyingDividendPeriodStrikePrice(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingDividendPeriodStrikePrice(value, scale))
}

// SetUnderlyingDividendPeriodBusinessDayConvention sets UnderlyingDividendPeriodBusinessDayConvention, Tag 42868.
func (m NoUnderlyingDividendPeriods) SetUnderlyingDividendPeriodBusinessDayConvention(v int) {
	m.Set(field.NewUnderlyingDividendPeriodBusinessDayConvention(v))
}

// SetNoUnderlyingDividendPeriodBusinessCenters sets NoUnderlyingDividendPeriodBusinessCenters, Tag 42882.
func (m NoUnderlyingDividendPeriods) SetNoUnderlyingDividendPeriodBusinessCenters(f NoUnderlyingDividendPeriodBusinessCentersRepeatingGroup) {
	m.SetGroup(f)
}

// SetUnderlyingDividendPeriodValuationDateUnadjusted sets UnderlyingDividendPeriodValuationDateUnadjusted, Tag 42869.
func (m NoUnderlyingDividendPeriods) SetUnderlyingDividendPeriodValuationDateUnadjusted(v string) {
	m.Set(field.NewUnderlyingDividendPeriodValuationDateUnadjusted(v))
}

// SetUnderlyingDividendPeriodValuationDateRelativeTo sets UnderlyingDividendPeriodValuationDateRelativeTo, Tag 42870.
func (m NoUnderlyingDividendPeriods) SetUnderlyingDividendPeriodValuationDateRelativeTo(v int) {
	m.Set(field.NewUnderlyingDividendPeriodValuationDateRelativeTo(v))
}

// SetUnderlyingDividendPeriodValuationDateOffsetPeriod sets UnderlyingDividendPeriodValuationDateOffsetPeriod, Tag 42871.
func (m NoUnderlyingDividendPeriods) SetUnderlyingDividendPeriodValuationDateOffsetPeriod(v int) {
	m.Set(field.NewUnderlyingDividendPeriodValuationDateOffsetPeriod(v))
}

// SetUnderlyingDividendPeriodValuationDateOffsetUnit sets UnderlyingDividendPeriodValuationDateOffsetUnit, Tag 42872.
func (m NoUnderlyingDividendPeriods) SetUnderlyingDividendPeriodValuationDateOffsetUnit(v string) {
	m.Set(field.NewUnderlyingDividendPeriodValuationDateOffsetUnit(v))
}

// SetUnderlyingDividendPeriodValuationDateOffsetDayType sets UnderlyingDividendPeriodValuationDateOffsetDayType, Tag 42873.
func (m NoUnderlyingDividendPeriods) SetUnderlyingDividendPeriodValuationDateOffsetDayType(v int) {
	m.Set(field.NewUnderlyingDividendPeriodValuationDateOffsetDayType(v))
}

// SetUnderlyingDividendPeriodValuationDateAdjusted sets UnderlyingDividendPeriodValuationDateAdjusted, Tag 42874.
func (m NoUnderlyingDividendPeriods) SetUnderlyingDividendPeriodValuationDateAdjusted(v string) {
	m.Set(field.NewUnderlyingDividendPeriodValuationDateAdjusted(v))
}

// SetUnderlyingDividendPeriodPaymentDateUnadjusted sets UnderlyingDividendPeriodPaymentDateUnadjusted, Tag 42875.
func (m NoUnderlyingDividendPeriods) SetUnderlyingDividendPeriodPaymentDateUnadjusted(v string) {
	m.Set(field.NewUnderlyingDividendPeriodPaymentDateUnadjusted(v))
}

// SetUnderlyingDividendPeriodPaymentDateRelativeTo sets UnderlyingDividendPeriodPaymentDateRelativeTo, Tag 42876.
func (m NoUnderlyingDividendPeriods) SetUnderlyingDividendPeriodPaymentDateRelativeTo(v int) {
	m.Set(field.NewUnderlyingDividendPeriodPaymentDateRelativeTo(v))
}

// SetUnderlyingDividendPeriodPaymentDateOffsetPeriod sets UnderlyingDividendPeriodPaymentDateOffsetPeriod, Tag 42877.
func (m NoUnderlyingDividendPeriods) SetUnderlyingDividendPeriodPaymentDateOffsetPeriod(v int) {
	m.Set(field.NewUnderlyingDividendPeriodPaymentDateOffsetPeriod(v))
}

// SetUnderlyingDividendPeriodPaymentDateOffsetUnit sets UnderlyingDividendPeriodPaymentDateOffsetUnit, Tag 42878.
func (m NoUnderlyingDividendPeriods) SetUnderlyingDividendPeriodPaymentDateOffsetUnit(v string) {
	m.Set(field.NewUnderlyingDividendPeriodPaymentDateOffsetUnit(v))
}

// SetUnderlyingDividendPeriodPaymentDateOffsetDayType sets UnderlyingDividendPeriodPaymentDateOffsetDayType, Tag 42879.
func (m NoUnderlyingDividendPeriods) SetUnderlyingDividendPeriodPaymentDateOffsetDayType(v int) {
	m.Set(field.NewUnderlyingDividendPeriodPaymentDateOffsetDayType(v))
}

// SetUnderlyingDividendPeriodPaymentDateAdjusted sets UnderlyingDividendPeriodPaymentDateAdjusted, Tag 42880.
func (m NoUnderlyingDividendPeriods) SetUnderlyingDividendPeriodPaymentDateAdjusted(v string) {
	m.Set(field.NewUnderlyingDividendPeriodPaymentDateAdjusted(v))
}

// SetUnderlyingDividendPeriodXID sets UnderlyingDividendPeriodXID, Tag 42881.
func (m NoUnderlyingDividendPeriods) SetUnderlyingDividendPeriodXID(v string) {
	m.Set(field.NewUnderlyingDividendPeriodXID(v))
}

// GetUnderlyingDividendPeriodSequence gets UnderlyingDividendPeriodSequence, Tag 42863.
func (m NoUnderlyingDividendPeriods) GetUnderlyingDividendPeriodSequence() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingDividendPeriodSequenceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDividendPeriodStartDateUnadjusted gets UnderlyingDividendPeriodStartDateUnadjusted, Tag 42864.
func (m NoUnderlyingDividendPeriods) GetUnderlyingDividendPeriodStartDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingDividendPeriodStartDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDividendPeriodEndDateUnadjusted gets UnderlyingDividendPeriodEndDateUnadjusted, Tag 42865.
func (m NoUnderlyingDividendPeriods) GetUnderlyingDividendPeriodEndDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingDividendPeriodEndDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDividendPeriodUnderlierRefID gets UnderlyingDividendPeriodUnderlierRefID, Tag 42866.
func (m NoUnderlyingDividendPeriods) GetUnderlyingDividendPeriodUnderlierRefID() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingDividendPeriodUnderlierRefIDField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDividendPeriodStrikePrice gets UnderlyingDividendPeriodStrikePrice, Tag 42867.
func (m NoUnderlyingDividendPeriods) GetUnderlyingDividendPeriodStrikePrice() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingDividendPeriodStrikePriceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDividendPeriodBusinessDayConvention gets UnderlyingDividendPeriodBusinessDayConvention, Tag 42868.
func (m NoUnderlyingDividendPeriods) GetUnderlyingDividendPeriodBusinessDayConvention() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingDividendPeriodBusinessDayConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUnderlyingDividendPeriodBusinessCenters gets NoUnderlyingDividendPeriodBusinessCenters, Tag 42882.
func (m NoUnderlyingDividendPeriods) GetNoUnderlyingDividendPeriodBusinessCenters() (NoUnderlyingDividendPeriodBusinessCentersRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingDividendPeriodBusinessCentersRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetUnderlyingDividendPeriodValuationDateUnadjusted gets UnderlyingDividendPeriodValuationDateUnadjusted, Tag 42869.
func (m NoUnderlyingDividendPeriods) GetUnderlyingDividendPeriodValuationDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingDividendPeriodValuationDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDividendPeriodValuationDateRelativeTo gets UnderlyingDividendPeriodValuationDateRelativeTo, Tag 42870.
func (m NoUnderlyingDividendPeriods) GetUnderlyingDividendPeriodValuationDateRelativeTo() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingDividendPeriodValuationDateRelativeToField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDividendPeriodValuationDateOffsetPeriod gets UnderlyingDividendPeriodValuationDateOffsetPeriod, Tag 42871.
func (m NoUnderlyingDividendPeriods) GetUnderlyingDividendPeriodValuationDateOffsetPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingDividendPeriodValuationDateOffsetPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDividendPeriodValuationDateOffsetUnit gets UnderlyingDividendPeriodValuationDateOffsetUnit, Tag 42872.
func (m NoUnderlyingDividendPeriods) GetUnderlyingDividendPeriodValuationDateOffsetUnit() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingDividendPeriodValuationDateOffsetUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDividendPeriodValuationDateOffsetDayType gets UnderlyingDividendPeriodValuationDateOffsetDayType, Tag 42873.
func (m NoUnderlyingDividendPeriods) GetUnderlyingDividendPeriodValuationDateOffsetDayType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingDividendPeriodValuationDateOffsetDayTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDividendPeriodValuationDateAdjusted gets UnderlyingDividendPeriodValuationDateAdjusted, Tag 42874.
func (m NoUnderlyingDividendPeriods) GetUnderlyingDividendPeriodValuationDateAdjusted() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingDividendPeriodValuationDateAdjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDividendPeriodPaymentDateUnadjusted gets UnderlyingDividendPeriodPaymentDateUnadjusted, Tag 42875.
func (m NoUnderlyingDividendPeriods) GetUnderlyingDividendPeriodPaymentDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingDividendPeriodPaymentDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDividendPeriodPaymentDateRelativeTo gets UnderlyingDividendPeriodPaymentDateRelativeTo, Tag 42876.
func (m NoUnderlyingDividendPeriods) GetUnderlyingDividendPeriodPaymentDateRelativeTo() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingDividendPeriodPaymentDateRelativeToField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDividendPeriodPaymentDateOffsetPeriod gets UnderlyingDividendPeriodPaymentDateOffsetPeriod, Tag 42877.
func (m NoUnderlyingDividendPeriods) GetUnderlyingDividendPeriodPaymentDateOffsetPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingDividendPeriodPaymentDateOffsetPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDividendPeriodPaymentDateOffsetUnit gets UnderlyingDividendPeriodPaymentDateOffsetUnit, Tag 42878.
func (m NoUnderlyingDividendPeriods) GetUnderlyingDividendPeriodPaymentDateOffsetUnit() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingDividendPeriodPaymentDateOffsetUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDividendPeriodPaymentDateOffsetDayType gets UnderlyingDividendPeriodPaymentDateOffsetDayType, Tag 42879.
func (m NoUnderlyingDividendPeriods) GetUnderlyingDividendPeriodPaymentDateOffsetDayType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingDividendPeriodPaymentDateOffsetDayTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDividendPeriodPaymentDateAdjusted gets UnderlyingDividendPeriodPaymentDateAdjusted, Tag 42880.
func (m NoUnderlyingDividendPeriods) GetUnderlyingDividendPeriodPaymentDateAdjusted() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingDividendPeriodPaymentDateAdjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDividendPeriodXID gets UnderlyingDividendPeriodXID, Tag 42881.
func (m NoUnderlyingDividendPeriods) GetUnderlyingDividendPeriodXID() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingDividendPeriodXIDField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingDividendPeriodSequence returns true if UnderlyingDividendPeriodSequence is present, Tag 42863.
func (m NoUnderlyingDividendPeriods) HasUnderlyingDividendPeriodSequence() bool {
	return m.Has(tag.UnderlyingDividendPeriodSequence)
}

// HasUnderlyingDividendPeriodStartDateUnadjusted returns true if UnderlyingDividendPeriodStartDateUnadjusted is present, Tag 42864.
func (m NoUnderlyingDividendPeriods) HasUnderlyingDividendPeriodStartDateUnadjusted() bool {
	return m.Has(tag.UnderlyingDividendPeriodStartDateUnadjusted)
}

// HasUnderlyingDividendPeriodEndDateUnadjusted returns true if UnderlyingDividendPeriodEndDateUnadjusted is present, Tag 42865.
func (m NoUnderlyingDividendPeriods) HasUnderlyingDividendPeriodEndDateUnadjusted() bool {
	return m.Has(tag.UnderlyingDividendPeriodEndDateUnadjusted)
}

// HasUnderlyingDividendPeriodUnderlierRefID returns true if UnderlyingDividendPeriodUnderlierRefID is present, Tag 42866.
func (m NoUnderlyingDividendPeriods) HasUnderlyingDividendPeriodUnderlierRefID() bool {
	return m.Has(tag.UnderlyingDividendPeriodUnderlierRefID)
}

// HasUnderlyingDividendPeriodStrikePrice returns true if UnderlyingDividendPeriodStrikePrice is present, Tag 42867.
func (m NoUnderlyingDividendPeriods) HasUnderlyingDividendPeriodStrikePrice() bool {
	return m.Has(tag.UnderlyingDividendPeriodStrikePrice)
}

// HasUnderlyingDividendPeriodBusinessDayConvention returns true if UnderlyingDividendPeriodBusinessDayConvention is present, Tag 42868.
func (m NoUnderlyingDividendPeriods) HasUnderlyingDividendPeriodBusinessDayConvention() bool {
	return m.Has(tag.UnderlyingDividendPeriodBusinessDayConvention)
}

// HasNoUnderlyingDividendPeriodBusinessCenters returns true if NoUnderlyingDividendPeriodBusinessCenters is present, Tag 42882.
func (m NoUnderlyingDividendPeriods) HasNoUnderlyingDividendPeriodBusinessCenters() bool {
	return m.Has(tag.NoUnderlyingDividendPeriodBusinessCenters)
}

// HasUnderlyingDividendPeriodValuationDateUnadjusted returns true if UnderlyingDividendPeriodValuationDateUnadjusted is present, Tag 42869.
func (m NoUnderlyingDividendPeriods) HasUnderlyingDividendPeriodValuationDateUnadjusted() bool {
	return m.Has(tag.UnderlyingDividendPeriodValuationDateUnadjusted)
}

// HasUnderlyingDividendPeriodValuationDateRelativeTo returns true if UnderlyingDividendPeriodValuationDateRelativeTo is present, Tag 42870.
func (m NoUnderlyingDividendPeriods) HasUnderlyingDividendPeriodValuationDateRelativeTo() bool {
	return m.Has(tag.UnderlyingDividendPeriodValuationDateRelativeTo)
}

// HasUnderlyingDividendPeriodValuationDateOffsetPeriod returns true if UnderlyingDividendPeriodValuationDateOffsetPeriod is present, Tag 42871.
func (m NoUnderlyingDividendPeriods) HasUnderlyingDividendPeriodValuationDateOffsetPeriod() bool {
	return m.Has(tag.UnderlyingDividendPeriodValuationDateOffsetPeriod)
}

// HasUnderlyingDividendPeriodValuationDateOffsetUnit returns true if UnderlyingDividendPeriodValuationDateOffsetUnit is present, Tag 42872.
func (m NoUnderlyingDividendPeriods) HasUnderlyingDividendPeriodValuationDateOffsetUnit() bool {
	return m.Has(tag.UnderlyingDividendPeriodValuationDateOffsetUnit)
}

// HasUnderlyingDividendPeriodValuationDateOffsetDayType returns true if UnderlyingDividendPeriodValuationDateOffsetDayType is present, Tag 42873.
func (m NoUnderlyingDividendPeriods) HasUnderlyingDividendPeriodValuationDateOffsetDayType() bool {
	return m.Has(tag.UnderlyingDividendPeriodValuationDateOffsetDayType)
}

// HasUnderlyingDividendPeriodValuationDateAdjusted returns true if UnderlyingDividendPeriodValuationDateAdjusted is present, Tag 42874.
func (m NoUnderlyingDividendPeriods) HasUnderlyingDividendPeriodValuationDateAdjusted() bool {
	return m.Has(tag.UnderlyingDividendPeriodValuationDateAdjusted)
}

// HasUnderlyingDividendPeriodPaymentDateUnadjusted returns true if UnderlyingDividendPeriodPaymentDateUnadjusted is present, Tag 42875.
func (m NoUnderlyingDividendPeriods) HasUnderlyingDividendPeriodPaymentDateUnadjusted() bool {
	return m.Has(tag.UnderlyingDividendPeriodPaymentDateUnadjusted)
}

// HasUnderlyingDividendPeriodPaymentDateRelativeTo returns true if UnderlyingDividendPeriodPaymentDateRelativeTo is present, Tag 42876.
func (m NoUnderlyingDividendPeriods) HasUnderlyingDividendPeriodPaymentDateRelativeTo() bool {
	return m.Has(tag.UnderlyingDividendPeriodPaymentDateRelativeTo)
}

// HasUnderlyingDividendPeriodPaymentDateOffsetPeriod returns true if UnderlyingDividendPeriodPaymentDateOffsetPeriod is present, Tag 42877.
func (m NoUnderlyingDividendPeriods) HasUnderlyingDividendPeriodPaymentDateOffsetPeriod() bool {
	return m.Has(tag.UnderlyingDividendPeriodPaymentDateOffsetPeriod)
}

// HasUnderlyingDividendPeriodPaymentDateOffsetUnit returns true if UnderlyingDividendPeriodPaymentDateOffsetUnit is present, Tag 42878.
func (m NoUnderlyingDividendPeriods) HasUnderlyingDividendPeriodPaymentDateOffsetUnit() bool {
	return m.Has(tag.UnderlyingDividendPeriodPaymentDateOffsetUnit)
}

// HasUnderlyingDividendPeriodPaymentDateOffsetDayType returns true if UnderlyingDividendPeriodPaymentDateOffsetDayType is present, Tag 42879.
func (m NoUnderlyingDividendPeriods) HasUnderlyingDividendPeriodPaymentDateOffsetDayType() bool {
	return m.Has(tag.UnderlyingDividendPeriodPaymentDateOffsetDayType)
}

// HasUnderlyingDividendPeriodPaymentDateAdjusted returns true if UnderlyingDividendPeriodPaymentDateAdjusted is present, Tag 42880.
func (m NoUnderlyingDividendPeriods) HasUnderlyingDividendPeriodPaymentDateAdjusted() bool {
	return m.Has(tag.UnderlyingDividendPeriodPaymentDateAdjusted)
}

// HasUnderlyingDividendPeriodXID returns true if UnderlyingDividendPeriodXID is present, Tag 42881.
func (m NoUnderlyingDividendPeriods) HasUnderlyingDividendPeriodXID() bool {
	return m.Has(tag.UnderlyingDividendPeriodXID)
}

// NoUnderlyingDividendPeriodBusinessCenters is a repeating group element, Tag 42882.
type NoUnderlyingDividendPeriodBusinessCenters struct {
	*quickfix.Group
}

// SetUnderlyingDividendPeriodBusinessCenter sets UnderlyingDividendPeriodBusinessCenter, Tag 42883.
func (m NoUnderlyingDividendPeriodBusinessCenters) SetUnderlyingDividendPeriodBusinessCenter(v string) {
	m.Set(field.NewUnderlyingDividendPeriodBusinessCenter(v))
}

// GetUnderlyingDividendPeriodBusinessCenter gets UnderlyingDividendPeriodBusinessCenter, Tag 42883.
func (m NoUnderlyingDividendPeriodBusinessCenters) GetUnderlyingDividendPeriodBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingDividendPeriodBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingDividendPeriodBusinessCenter returns true if UnderlyingDividendPeriodBusinessCenter is present, Tag 42883.
func (m NoUnderlyingDividendPeriodBusinessCenters) HasUnderlyingDividendPeriodBusinessCenter() bool {
	return m.Has(tag.UnderlyingDividendPeriodBusinessCenter)
}

// NoUnderlyingDividendPeriodBusinessCentersRepeatingGroup is a repeating group, Tag 42882.
type NoUnderlyingDividendPeriodBusinessCentersRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingDividendPeriodBusinessCentersRepeatingGroup returns an initialized, NoUnderlyingDividendPeriodBusinessCentersRepeatingGroup.
func NewNoUnderlyingDividendPeriodBusinessCentersRepeatingGroup() NoUnderlyingDividendPeriodBusinessCentersRepeatingGroup {
	return NoUnderlyingDividendPeriodBusinessCentersRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingDividendPeriodBusinessCenters,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingDividendPeriodBusinessCenter),
			},
		),
	}
}

// Add create and append a new NoUnderlyingDividendPeriodBusinessCenters to this group.
func (m NoUnderlyingDividendPeriodBusinessCentersRepeatingGroup) Add() NoUnderlyingDividendPeriodBusinessCenters {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingDividendPeriodBusinessCenters{g}
}

// Get returns the ith NoUnderlyingDividendPeriodBusinessCenters in the NoUnderlyingDividendPeriodBusinessCentersRepeatinGroup.
func (m NoUnderlyingDividendPeriodBusinessCentersRepeatingGroup) Get(i int) NoUnderlyingDividendPeriodBusinessCenters {
	return NoUnderlyingDividendPeriodBusinessCenters{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingDividendPeriodsRepeatingGroup is a repeating group, Tag 42862.
type NoUnderlyingDividendPeriodsRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingDividendPeriodsRepeatingGroup returns an initialized, NoUnderlyingDividendPeriodsRepeatingGroup.
func NewNoUnderlyingDividendPeriodsRepeatingGroup() NoUnderlyingDividendPeriodsRepeatingGroup {
	return NoUnderlyingDividendPeriodsRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingDividendPeriods,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingDividendPeriodSequence),
				quickfix.GroupElement(tag.UnderlyingDividendPeriodStartDateUnadjusted),
				quickfix.GroupElement(tag.UnderlyingDividendPeriodEndDateUnadjusted),
				quickfix.GroupElement(tag.UnderlyingDividendPeriodUnderlierRefID),
				quickfix.GroupElement(tag.UnderlyingDividendPeriodStrikePrice),
				quickfix.GroupElement(tag.UnderlyingDividendPeriodBusinessDayConvention),
				NewNoUnderlyingDividendPeriodBusinessCentersRepeatingGroup(),
				quickfix.GroupElement(tag.UnderlyingDividendPeriodValuationDateUnadjusted),
				quickfix.GroupElement(tag.UnderlyingDividendPeriodValuationDateRelativeTo),
				quickfix.GroupElement(tag.UnderlyingDividendPeriodValuationDateOffsetPeriod),
				quickfix.GroupElement(tag.UnderlyingDividendPeriodValuationDateOffsetUnit),
				quickfix.GroupElement(tag.UnderlyingDividendPeriodValuationDateOffsetDayType),
				quickfix.GroupElement(tag.UnderlyingDividendPeriodValuationDateAdjusted),
				quickfix.GroupElement(tag.UnderlyingDividendPeriodPaymentDateUnadjusted),
				quickfix.GroupElement(tag.UnderlyingDividendPeriodPaymentDateRelativeTo),
				quickfix.GroupElement(tag.UnderlyingDividendPeriodPaymentDateOffsetPeriod),
				quickfix.GroupElement(tag.UnderlyingDividendPeriodPaymentDateOffsetUnit),
				quickfix.GroupElement(tag.UnderlyingDividendPeriodPaymentDateOffsetDayType),
				quickfix.GroupElement(tag.UnderlyingDividendPeriodPaymentDateAdjusted),
				quickfix.GroupElement(tag.UnderlyingDividendPeriodXID),
			},
		),
	}
}

// Add create and append a new NoUnderlyingDividendPeriods to this group.
func (m NoUnderlyingDividendPeriodsRepeatingGroup) Add() NoUnderlyingDividendPeriods {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingDividendPeriods{g}
}

// Get returns the ith NoUnderlyingDividendPeriods in the NoUnderlyingDividendPeriodsRepeatinGroup.
func (m NoUnderlyingDividendPeriodsRepeatingGroup) Get(i int) NoUnderlyingDividendPeriods {
	return NoUnderlyingDividendPeriods{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingDividendFXTriggerDateBusinessCenters is a repeating group element, Tag 42853.
type NoUnderlyingDividendFXTriggerDateBusinessCenters struct {
	*quickfix.Group
}

// SetUnderlyingDividendFXTriggerDateBusinessCenter sets UnderlyingDividendFXTriggerDateBusinessCenter, Tag 42854.
func (m NoUnderlyingDividendFXTriggerDateBusinessCenters) SetUnderlyingDividendFXTriggerDateBusinessCenter(v string) {
	m.Set(field.NewUnderlyingDividendFXTriggerDateBusinessCenter(v))
}

// GetUnderlyingDividendFXTriggerDateBusinessCenter gets UnderlyingDividendFXTriggerDateBusinessCenter, Tag 42854.
func (m NoUnderlyingDividendFXTriggerDateBusinessCenters) GetUnderlyingDividendFXTriggerDateBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingDividendFXTriggerDateBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingDividendFXTriggerDateBusinessCenter returns true if UnderlyingDividendFXTriggerDateBusinessCenter is present, Tag 42854.
func (m NoUnderlyingDividendFXTriggerDateBusinessCenters) HasUnderlyingDividendFXTriggerDateBusinessCenter() bool {
	return m.Has(tag.UnderlyingDividendFXTriggerDateBusinessCenter)
}

// NoUnderlyingDividendFXTriggerDateBusinessCentersRepeatingGroup is a repeating group, Tag 42853.
type NoUnderlyingDividendFXTriggerDateBusinessCentersRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingDividendFXTriggerDateBusinessCentersRepeatingGroup returns an initialized, NoUnderlyingDividendFXTriggerDateBusinessCentersRepeatingGroup.
func NewNoUnderlyingDividendFXTriggerDateBusinessCentersRepeatingGroup() NoUnderlyingDividendFXTriggerDateBusinessCentersRepeatingGroup {
	return NoUnderlyingDividendFXTriggerDateBusinessCentersRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingDividendFXTriggerDateBusinessCenters,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingDividendFXTriggerDateBusinessCenter),
			},
		),
	}
}

// Add create and append a new NoUnderlyingDividendFXTriggerDateBusinessCenters to this group.
func (m NoUnderlyingDividendFXTriggerDateBusinessCentersRepeatingGroup) Add() NoUnderlyingDividendFXTriggerDateBusinessCenters {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingDividendFXTriggerDateBusinessCenters{g}
}

// Get returns the ith NoUnderlyingDividendFXTriggerDateBusinessCenters in the NoUnderlyingDividendFXTriggerDateBusinessCentersRepeatinGroup.
func (m NoUnderlyingDividendFXTriggerDateBusinessCentersRepeatingGroup) Get(i int) NoUnderlyingDividendFXTriggerDateBusinessCenters {
	return NoUnderlyingDividendFXTriggerDateBusinessCenters{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingDividendAccrualPaymentDateBusinessCenters is a repeating group element, Tag 42799.
type NoUnderlyingDividendAccrualPaymentDateBusinessCenters struct {
	*quickfix.Group
}

// SetUnderlyingDividendAccrualPaymentDateBusinessCenter sets UnderlyingDividendAccrualPaymentDateBusinessCenter, Tag 42800.
func (m NoUnderlyingDividendAccrualPaymentDateBusinessCenters) SetUnderlyingDividendAccrualPaymentDateBusinessCenter(v string) {
	m.Set(field.NewUnderlyingDividendAccrualPaymentDateBusinessCenter(v))
}

// GetUnderlyingDividendAccrualPaymentDateBusinessCenter gets UnderlyingDividendAccrualPaymentDateBusinessCenter, Tag 42800.
func (m NoUnderlyingDividendAccrualPaymentDateBusinessCenters) GetUnderlyingDividendAccrualPaymentDateBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingDividendAccrualPaymentDateBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingDividendAccrualPaymentDateBusinessCenter returns true if UnderlyingDividendAccrualPaymentDateBusinessCenter is present, Tag 42800.
func (m NoUnderlyingDividendAccrualPaymentDateBusinessCenters) HasUnderlyingDividendAccrualPaymentDateBusinessCenter() bool {
	return m.Has(tag.UnderlyingDividendAccrualPaymentDateBusinessCenter)
}

// NoUnderlyingDividendAccrualPaymentDateBusinessCentersRepeatingGroup is a repeating group, Tag 42799.
type NoUnderlyingDividendAccrualPaymentDateBusinessCentersRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingDividendAccrualPaymentDateBusinessCentersRepeatingGroup returns an initialized, NoUnderlyingDividendAccrualPaymentDateBusinessCentersRepeatingGroup.
func NewNoUnderlyingDividendAccrualPaymentDateBusinessCentersRepeatingGroup() NoUnderlyingDividendAccrualPaymentDateBusinessCentersRepeatingGroup {
	return NoUnderlyingDividendAccrualPaymentDateBusinessCentersRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingDividendAccrualPaymentDateBusinessCenters,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingDividendAccrualPaymentDateBusinessCenter),
			},
		),
	}
}

// Add create and append a new NoUnderlyingDividendAccrualPaymentDateBusinessCenters to this group.
func (m NoUnderlyingDividendAccrualPaymentDateBusinessCentersRepeatingGroup) Add() NoUnderlyingDividendAccrualPaymentDateBusinessCenters {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingDividendAccrualPaymentDateBusinessCenters{g}
}

// Get returns the ith NoUnderlyingDividendAccrualPaymentDateBusinessCenters in the NoUnderlyingDividendAccrualPaymentDateBusinessCentersRepeatinGroup.
func (m NoUnderlyingDividendAccrualPaymentDateBusinessCentersRepeatingGroup) Get(i int) NoUnderlyingDividendAccrualPaymentDateBusinessCenters {
	return NoUnderlyingDividendAccrualPaymentDateBusinessCenters{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingReturnRates is a repeating group element, Tag 43034.
type NoUnderlyingReturnRates struct {
	*quickfix.Group
}

// SetUnderlyingReturnRatePriceSequence sets UnderlyingReturnRatePriceSequence, Tag 43035.
func (m NoUnderlyingReturnRates) SetUnderlyingReturnRatePriceSequence(v int) {
	m.Set(field.NewUnderlyingReturnRatePriceSequence(v))
}

// SetUnderlyingReturnRateCommissionBasis sets UnderlyingReturnRateCommissionBasis, Tag 43036.
func (m NoUnderlyingReturnRates) SetUnderlyingReturnRateCommissionBasis(v string) {
	m.Set(field.NewUnderlyingReturnRateCommissionBasis(v))
}

// SetUnderlyingReturnRateCommissionAmount sets UnderlyingReturnRateCommissionAmount, Tag 43037.
func (m NoUnderlyingReturnRates) SetUnderlyingReturnRateCommissionAmount(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingReturnRateCommissionAmount(value, scale))
}

// SetUnderlyingReturnRateCommissionCurrency sets UnderlyingReturnRateCommissionCurrency, Tag 43038.
func (m NoUnderlyingReturnRates) SetUnderlyingReturnRateCommissionCurrency(v string) {
	m.Set(field.NewUnderlyingReturnRateCommissionCurrency(v))
}

// SetUnderlyingReturnRateTotalCommissionPerTrade sets UnderlyingReturnRateTotalCommissionPerTrade, Tag 43039.
func (m NoUnderlyingReturnRates) SetUnderlyingReturnRateTotalCommissionPerTrade(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingReturnRateTotalCommissionPerTrade(value, scale))
}

// SetUnderlyingReturnRateDeterminationMethod sets UnderlyingReturnRateDeterminationMethod, Tag 43040.
func (m NoUnderlyingReturnRates) SetUnderlyingReturnRateDeterminationMethod(v string) {
	m.Set(field.NewUnderlyingReturnRateDeterminationMethod(v))
}

// SetNoUnderlyingReturnRatePrices sets NoUnderlyingReturnRatePrices, Tag 43064.
func (m NoUnderlyingReturnRates) SetNoUnderlyingReturnRatePrices(f NoUnderlyingReturnRatePricesRepeatingGroup) {
	m.SetGroup(f)
}

// SetNoUnderlyingReturnRateFXConversions sets NoUnderlyingReturnRateFXConversions, Tag 43030.
func (m NoUnderlyingReturnRates) SetNoUnderlyingReturnRateFXConversions(f NoUnderlyingReturnRateFXConversionsRepeatingGroup) {
	m.SetGroup(f)
}

// SetUnderlyingReturnRateAmountRelativeTo sets UnderlyingReturnRateAmountRelativeTo, Tag 43041.
func (m NoUnderlyingReturnRates) SetUnderlyingReturnRateAmountRelativeTo(v int) {
	m.Set(field.NewUnderlyingReturnRateAmountRelativeTo(v))
}

// SetUnderlyingReturnRateQuoteMeasureType sets UnderlyingReturnRateQuoteMeasureType, Tag 43042.
func (m NoUnderlyingReturnRates) SetUnderlyingReturnRateQuoteMeasureType(v string) {
	m.Set(field.NewUnderlyingReturnRateQuoteMeasureType(v))
}

// SetUnderlyingReturnRateQuoteUnits sets UnderlyingReturnRateQuoteUnits, Tag 43043.
func (m NoUnderlyingReturnRates) SetUnderlyingReturnRateQuoteUnits(v string) {
	m.Set(field.NewUnderlyingReturnRateQuoteUnits(v))
}

// SetUnderlyingReturnRateQuoteMethod sets UnderlyingReturnRateQuoteMethod, Tag 43044.
func (m NoUnderlyingReturnRates) SetUnderlyingReturnRateQuoteMethod(v int) {
	m.Set(field.NewUnderlyingReturnRateQuoteMethod(v))
}

// SetUnderlyingReturnRateQuoteCurrency sets UnderlyingReturnRateQuoteCurrency, Tag 43045.
func (m NoUnderlyingReturnRates) SetUnderlyingReturnRateQuoteCurrency(v string) {
	m.Set(field.NewUnderlyingReturnRateQuoteCurrency(v))
}

// SetUnderlyingReturnRateQuoteCurrencyType sets UnderlyingReturnRateQuoteCurrencyType, Tag 43046.
func (m NoUnderlyingReturnRates) SetUnderlyingReturnRateQuoteCurrencyType(v string) {
	m.Set(field.NewUnderlyingReturnRateQuoteCurrencyType(v))
}

// SetUnderlyingReturnRateQuoteTimeType sets UnderlyingReturnRateQuoteTimeType, Tag 43047.
func (m NoUnderlyingReturnRates) SetUnderlyingReturnRateQuoteTimeType(v int) {
	m.Set(field.NewUnderlyingReturnRateQuoteTimeType(v))
}

// SetUnderlyingReturnRateQuoteTime sets UnderlyingReturnRateQuoteTime, Tag 43048.
func (m NoUnderlyingReturnRates) SetUnderlyingReturnRateQuoteTime(v string) {
	m.Set(field.NewUnderlyingReturnRateQuoteTime(v))
}

// SetUnderlyingReturnRateQuoteDate sets UnderlyingReturnRateQuoteDate, Tag 43049.
func (m NoUnderlyingReturnRates) SetUnderlyingReturnRateQuoteDate(v string) {
	m.Set(field.NewUnderlyingReturnRateQuoteDate(v))
}

// SetUnderlyingReturnRateQuoteExpirationTime sets UnderlyingReturnRateQuoteExpirationTime, Tag 43050.
func (m NoUnderlyingReturnRates) SetUnderlyingReturnRateQuoteExpirationTime(v string) {
	m.Set(field.NewUnderlyingReturnRateQuoteExpirationTime(v))
}

// SetUnderlyingReturnRateQuoteBusinessCenter sets UnderlyingReturnRateQuoteBusinessCenter, Tag 43051.
func (m NoUnderlyingReturnRates) SetUnderlyingReturnRateQuoteBusinessCenter(v string) {
	m.Set(field.NewUnderlyingReturnRateQuoteBusinessCenter(v))
}

// SetUnderlyingReturnRateQuoteExchange sets UnderlyingReturnRateQuoteExchange, Tag 43052.
func (m NoUnderlyingReturnRates) SetUnderlyingReturnRateQuoteExchange(v string) {
	m.Set(field.NewUnderlyingReturnRateQuoteExchange(v))
}

// SetNoUnderlyingReturnRateInformationSources sets NoUnderlyingReturnRateInformationSources, Tag 43060.
func (m NoUnderlyingReturnRates) SetNoUnderlyingReturnRateInformationSources(f NoUnderlyingReturnRateInformationSourcesRepeatingGroup) {
	m.SetGroup(f)
}

// SetUnderlyingReturnRateQuotePricingModel sets UnderlyingReturnRateQuotePricingModel, Tag 43053.
func (m NoUnderlyingReturnRates) SetUnderlyingReturnRateQuotePricingModel(v string) {
	m.Set(field.NewUnderlyingReturnRateQuotePricingModel(v))
}

// SetUnderlyingReturnRateCashFlowType sets UnderlyingReturnRateCashFlowType, Tag 43054.
func (m NoUnderlyingReturnRates) SetUnderlyingReturnRateCashFlowType(v string) {
	m.Set(field.NewUnderlyingReturnRateCashFlowType(v))
}

// SetNoUnderlyingReturnRateDates sets NoUnderlyingReturnRateDates, Tag 43008.
func (m NoUnderlyingReturnRates) SetNoUnderlyingReturnRateDates(f NoUnderlyingReturnRateDatesRepeatingGroup) {
	m.SetGroup(f)
}

// SetUnderlyingReturnRateValuationTimeType sets UnderlyingReturnRateValuationTimeType, Tag 43055.
func (m NoUnderlyingReturnRates) SetUnderlyingReturnRateValuationTimeType(v int) {
	m.Set(field.NewUnderlyingReturnRateValuationTimeType(v))
}

// SetUnderlyingReturnRateValuationTime sets UnderlyingReturnRateValuationTime, Tag 43056.
func (m NoUnderlyingReturnRates) SetUnderlyingReturnRateValuationTime(v string) {
	m.Set(field.NewUnderlyingReturnRateValuationTime(v))
}

// SetUnderlyingReturnRateValuationTimeBusinessCenter sets UnderlyingReturnRateValuationTimeBusinessCenter, Tag 43057.
func (m NoUnderlyingReturnRates) SetUnderlyingReturnRateValuationTimeBusinessCenter(v string) {
	m.Set(field.NewUnderlyingReturnRateValuationTimeBusinessCenter(v))
}

// SetUnderlyingReturnRateValuationPriceOption sets UnderlyingReturnRateValuationPriceOption, Tag 43058.
func (m NoUnderlyingReturnRates) SetUnderlyingReturnRateValuationPriceOption(v int) {
	m.Set(field.NewUnderlyingReturnRateValuationPriceOption(v))
}

// SetUnderlyingReturnRateFinalPriceFallback sets UnderlyingReturnRateFinalPriceFallback, Tag 43059.
func (m NoUnderlyingReturnRates) SetUnderlyingReturnRateFinalPriceFallback(v int) {
	m.Set(field.NewUnderlyingReturnRateFinalPriceFallback(v))
}

// GetUnderlyingReturnRatePriceSequence gets UnderlyingReturnRatePriceSequence, Tag 43035.
func (m NoUnderlyingReturnRates) GetUnderlyingReturnRatePriceSequence() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingReturnRatePriceSequenceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingReturnRateCommissionBasis gets UnderlyingReturnRateCommissionBasis, Tag 43036.
func (m NoUnderlyingReturnRates) GetUnderlyingReturnRateCommissionBasis() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingReturnRateCommissionBasisField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingReturnRateCommissionAmount gets UnderlyingReturnRateCommissionAmount, Tag 43037.
func (m NoUnderlyingReturnRates) GetUnderlyingReturnRateCommissionAmount() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingReturnRateCommissionAmountField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingReturnRateCommissionCurrency gets UnderlyingReturnRateCommissionCurrency, Tag 43038.
func (m NoUnderlyingReturnRates) GetUnderlyingReturnRateCommissionCurrency() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingReturnRateCommissionCurrencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingReturnRateTotalCommissionPerTrade gets UnderlyingReturnRateTotalCommissionPerTrade, Tag 43039.
func (m NoUnderlyingReturnRates) GetUnderlyingReturnRateTotalCommissionPerTrade() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingReturnRateTotalCommissionPerTradeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingReturnRateDeterminationMethod gets UnderlyingReturnRateDeterminationMethod, Tag 43040.
func (m NoUnderlyingReturnRates) GetUnderlyingReturnRateDeterminationMethod() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingReturnRateDeterminationMethodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUnderlyingReturnRatePrices gets NoUnderlyingReturnRatePrices, Tag 43064.
func (m NoUnderlyingReturnRates) GetNoUnderlyingReturnRatePrices() (NoUnderlyingReturnRatePricesRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingReturnRatePricesRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetNoUnderlyingReturnRateFXConversions gets NoUnderlyingReturnRateFXConversions, Tag 43030.
func (m NoUnderlyingReturnRates) GetNoUnderlyingReturnRateFXConversions() (NoUnderlyingReturnRateFXConversionsRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingReturnRateFXConversionsRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetUnderlyingReturnRateAmountRelativeTo gets UnderlyingReturnRateAmountRelativeTo, Tag 43041.
func (m NoUnderlyingReturnRates) GetUnderlyingReturnRateAmountRelativeTo() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingReturnRateAmountRelativeToField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingReturnRateQuoteMeasureType gets UnderlyingReturnRateQuoteMeasureType, Tag 43042.
func (m NoUnderlyingReturnRates) GetUnderlyingReturnRateQuoteMeasureType() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingReturnRateQuoteMeasureTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingReturnRateQuoteUnits gets UnderlyingReturnRateQuoteUnits, Tag 43043.
func (m NoUnderlyingReturnRates) GetUnderlyingReturnRateQuoteUnits() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingReturnRateQuoteUnitsField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingReturnRateQuoteMethod gets UnderlyingReturnRateQuoteMethod, Tag 43044.
func (m NoUnderlyingReturnRates) GetUnderlyingReturnRateQuoteMethod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingReturnRateQuoteMethodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingReturnRateQuoteCurrency gets UnderlyingReturnRateQuoteCurrency, Tag 43045.
func (m NoUnderlyingReturnRates) GetUnderlyingReturnRateQuoteCurrency() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingReturnRateQuoteCurrencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingReturnRateQuoteCurrencyType gets UnderlyingReturnRateQuoteCurrencyType, Tag 43046.
func (m NoUnderlyingReturnRates) GetUnderlyingReturnRateQuoteCurrencyType() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingReturnRateQuoteCurrencyTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingReturnRateQuoteTimeType gets UnderlyingReturnRateQuoteTimeType, Tag 43047.
func (m NoUnderlyingReturnRates) GetUnderlyingReturnRateQuoteTimeType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingReturnRateQuoteTimeTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingReturnRateQuoteTime gets UnderlyingReturnRateQuoteTime, Tag 43048.
func (m NoUnderlyingReturnRates) GetUnderlyingReturnRateQuoteTime() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingReturnRateQuoteTimeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingReturnRateQuoteDate gets UnderlyingReturnRateQuoteDate, Tag 43049.
func (m NoUnderlyingReturnRates) GetUnderlyingReturnRateQuoteDate() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingReturnRateQuoteDateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingReturnRateQuoteExpirationTime gets UnderlyingReturnRateQuoteExpirationTime, Tag 43050.
func (m NoUnderlyingReturnRates) GetUnderlyingReturnRateQuoteExpirationTime() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingReturnRateQuoteExpirationTimeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingReturnRateQuoteBusinessCenter gets UnderlyingReturnRateQuoteBusinessCenter, Tag 43051.
func (m NoUnderlyingReturnRates) GetUnderlyingReturnRateQuoteBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingReturnRateQuoteBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingReturnRateQuoteExchange gets UnderlyingReturnRateQuoteExchange, Tag 43052.
func (m NoUnderlyingReturnRates) GetUnderlyingReturnRateQuoteExchange() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingReturnRateQuoteExchangeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUnderlyingReturnRateInformationSources gets NoUnderlyingReturnRateInformationSources, Tag 43060.
func (m NoUnderlyingReturnRates) GetNoUnderlyingReturnRateInformationSources() (NoUnderlyingReturnRateInformationSourcesRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingReturnRateInformationSourcesRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetUnderlyingReturnRateQuotePricingModel gets UnderlyingReturnRateQuotePricingModel, Tag 43053.
func (m NoUnderlyingReturnRates) GetUnderlyingReturnRateQuotePricingModel() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingReturnRateQuotePricingModelField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingReturnRateCashFlowType gets UnderlyingReturnRateCashFlowType, Tag 43054.
func (m NoUnderlyingReturnRates) GetUnderlyingReturnRateCashFlowType() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingReturnRateCashFlowTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUnderlyingReturnRateDates gets NoUnderlyingReturnRateDates, Tag 43008.
func (m NoUnderlyingReturnRates) GetNoUnderlyingReturnRateDates() (NoUnderlyingReturnRateDatesRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingReturnRateDatesRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetUnderlyingReturnRateValuationTimeType gets UnderlyingReturnRateValuationTimeType, Tag 43055.
func (m NoUnderlyingReturnRates) GetUnderlyingReturnRateValuationTimeType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingReturnRateValuationTimeTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingReturnRateValuationTime gets UnderlyingReturnRateValuationTime, Tag 43056.
func (m NoUnderlyingReturnRates) GetUnderlyingReturnRateValuationTime() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingReturnRateValuationTimeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingReturnRateValuationTimeBusinessCenter gets UnderlyingReturnRateValuationTimeBusinessCenter, Tag 43057.
func (m NoUnderlyingReturnRates) GetUnderlyingReturnRateValuationTimeBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingReturnRateValuationTimeBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingReturnRateValuationPriceOption gets UnderlyingReturnRateValuationPriceOption, Tag 43058.
func (m NoUnderlyingReturnRates) GetUnderlyingReturnRateValuationPriceOption() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingReturnRateValuationPriceOptionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingReturnRateFinalPriceFallback gets UnderlyingReturnRateFinalPriceFallback, Tag 43059.
func (m NoUnderlyingReturnRates) GetUnderlyingReturnRateFinalPriceFallback() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingReturnRateFinalPriceFallbackField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingReturnRatePriceSequence returns true if UnderlyingReturnRatePriceSequence is present, Tag 43035.
func (m NoUnderlyingReturnRates) HasUnderlyingReturnRatePriceSequence() bool {
	return m.Has(tag.UnderlyingReturnRatePriceSequence)
}

// HasUnderlyingReturnRateCommissionBasis returns true if UnderlyingReturnRateCommissionBasis is present, Tag 43036.
func (m NoUnderlyingReturnRates) HasUnderlyingReturnRateCommissionBasis() bool {
	return m.Has(tag.UnderlyingReturnRateCommissionBasis)
}

// HasUnderlyingReturnRateCommissionAmount returns true if UnderlyingReturnRateCommissionAmount is present, Tag 43037.
func (m NoUnderlyingReturnRates) HasUnderlyingReturnRateCommissionAmount() bool {
	return m.Has(tag.UnderlyingReturnRateCommissionAmount)
}

// HasUnderlyingReturnRateCommissionCurrency returns true if UnderlyingReturnRateCommissionCurrency is present, Tag 43038.
func (m NoUnderlyingReturnRates) HasUnderlyingReturnRateCommissionCurrency() bool {
	return m.Has(tag.UnderlyingReturnRateCommissionCurrency)
}

// HasUnderlyingReturnRateTotalCommissionPerTrade returns true if UnderlyingReturnRateTotalCommissionPerTrade is present, Tag 43039.
func (m NoUnderlyingReturnRates) HasUnderlyingReturnRateTotalCommissionPerTrade() bool {
	return m.Has(tag.UnderlyingReturnRateTotalCommissionPerTrade)
}

// HasUnderlyingReturnRateDeterminationMethod returns true if UnderlyingReturnRateDeterminationMethod is present, Tag 43040.
func (m NoUnderlyingReturnRates) HasUnderlyingReturnRateDeterminationMethod() bool {
	return m.Has(tag.UnderlyingReturnRateDeterminationMethod)
}

// HasNoUnderlyingReturnRatePrices returns true if NoUnderlyingReturnRatePrices is present, Tag 43064.
func (m NoUnderlyingReturnRates) HasNoUnderlyingReturnRatePrices() bool {
	return m.Has(tag.NoUnderlyingReturnRatePrices)
}

// HasNoUnderlyingReturnRateFXConversions returns true if NoUnderlyingReturnRateFXConversions is present, Tag 43030.
func (m NoUnderlyingReturnRates) HasNoUnderlyingReturnRateFXConversions() bool {
	return m.Has(tag.NoUnderlyingReturnRateFXConversions)
}

// HasUnderlyingReturnRateAmountRelativeTo returns true if UnderlyingReturnRateAmountRelativeTo is present, Tag 43041.
func (m NoUnderlyingReturnRates) HasUnderlyingReturnRateAmountRelativeTo() bool {
	return m.Has(tag.UnderlyingReturnRateAmountRelativeTo)
}

// HasUnderlyingReturnRateQuoteMeasureType returns true if UnderlyingReturnRateQuoteMeasureType is present, Tag 43042.
func (m NoUnderlyingReturnRates) HasUnderlyingReturnRateQuoteMeasureType() bool {
	return m.Has(tag.UnderlyingReturnRateQuoteMeasureType)
}

// HasUnderlyingReturnRateQuoteUnits returns true if UnderlyingReturnRateQuoteUnits is present, Tag 43043.
func (m NoUnderlyingReturnRates) HasUnderlyingReturnRateQuoteUnits() bool {
	return m.Has(tag.UnderlyingReturnRateQuoteUnits)
}

// HasUnderlyingReturnRateQuoteMethod returns true if UnderlyingReturnRateQuoteMethod is present, Tag 43044.
func (m NoUnderlyingReturnRates) HasUnderlyingReturnRateQuoteMethod() bool {
	return m.Has(tag.UnderlyingReturnRateQuoteMethod)
}

// HasUnderlyingReturnRateQuoteCurrency returns true if UnderlyingReturnRateQuoteCurrency is present, Tag 43045.
func (m NoUnderlyingReturnRates) HasUnderlyingReturnRateQuoteCurrency() bool {
	return m.Has(tag.UnderlyingReturnRateQuoteCurrency)
}

// HasUnderlyingReturnRateQuoteCurrencyType returns true if UnderlyingReturnRateQuoteCurrencyType is present, Tag 43046.
func (m NoUnderlyingReturnRates) HasUnderlyingReturnRateQuoteCurrencyType() bool {
	return m.Has(tag.UnderlyingReturnRateQuoteCurrencyType)
}

// HasUnderlyingReturnRateQuoteTimeType returns true if UnderlyingReturnRateQuoteTimeType is present, Tag 43047.
func (m NoUnderlyingReturnRates) HasUnderlyingReturnRateQuoteTimeType() bool {
	return m.Has(tag.UnderlyingReturnRateQuoteTimeType)
}

// HasUnderlyingReturnRateQuoteTime returns true if UnderlyingReturnRateQuoteTime is present, Tag 43048.
func (m NoUnderlyingReturnRates) HasUnderlyingReturnRateQuoteTime() bool {
	return m.Has(tag.UnderlyingReturnRateQuoteTime)
}

// HasUnderlyingReturnRateQuoteDate returns true if UnderlyingReturnRateQuoteDate is present, Tag 43049.
func (m NoUnderlyingReturnRates) HasUnderlyingReturnRateQuoteDate() bool {
	return m.Has(tag.UnderlyingReturnRateQuoteDate)
}

// HasUnderlyingReturnRateQuoteExpirationTime returns true if UnderlyingReturnRateQuoteExpirationTime is present, Tag 43050.
func (m NoUnderlyingReturnRates) HasUnderlyingReturnRateQuoteExpirationTime() bool {
	return m.Has(tag.UnderlyingReturnRateQuoteExpirationTime)
}

// HasUnderlyingReturnRateQuoteBusinessCenter returns true if UnderlyingReturnRateQuoteBusinessCenter is present, Tag 43051.
func (m NoUnderlyingReturnRates) HasUnderlyingReturnRateQuoteBusinessCenter() bool {
	return m.Has(tag.UnderlyingReturnRateQuoteBusinessCenter)
}

// HasUnderlyingReturnRateQuoteExchange returns true if UnderlyingReturnRateQuoteExchange is present, Tag 43052.
func (m NoUnderlyingReturnRates) HasUnderlyingReturnRateQuoteExchange() bool {
	return m.Has(tag.UnderlyingReturnRateQuoteExchange)
}

// HasNoUnderlyingReturnRateInformationSources returns true if NoUnderlyingReturnRateInformationSources is present, Tag 43060.
func (m NoUnderlyingReturnRates) HasNoUnderlyingReturnRateInformationSources() bool {
	return m.Has(tag.NoUnderlyingReturnRateInformationSources)
}

// HasUnderlyingReturnRateQuotePricingModel returns true if UnderlyingReturnRateQuotePricingModel is present, Tag 43053.
func (m NoUnderlyingReturnRates) HasUnderlyingReturnRateQuotePricingModel() bool {
	return m.Has(tag.UnderlyingReturnRateQuotePricingModel)
}

// HasUnderlyingReturnRateCashFlowType returns true if UnderlyingReturnRateCashFlowType is present, Tag 43054.
func (m NoUnderlyingReturnRates) HasUnderlyingReturnRateCashFlowType() bool {
	return m.Has(tag.UnderlyingReturnRateCashFlowType)
}

// HasNoUnderlyingReturnRateDates returns true if NoUnderlyingReturnRateDates is present, Tag 43008.
func (m NoUnderlyingReturnRates) HasNoUnderlyingReturnRateDates() bool {
	return m.Has(tag.NoUnderlyingReturnRateDates)
}

// HasUnderlyingReturnRateValuationTimeType returns true if UnderlyingReturnRateValuationTimeType is present, Tag 43055.
func (m NoUnderlyingReturnRates) HasUnderlyingReturnRateValuationTimeType() bool {
	return m.Has(tag.UnderlyingReturnRateValuationTimeType)
}

// HasUnderlyingReturnRateValuationTime returns true if UnderlyingReturnRateValuationTime is present, Tag 43056.
func (m NoUnderlyingReturnRates) HasUnderlyingReturnRateValuationTime() bool {
	return m.Has(tag.UnderlyingReturnRateValuationTime)
}

// HasUnderlyingReturnRateValuationTimeBusinessCenter returns true if UnderlyingReturnRateValuationTimeBusinessCenter is present, Tag 43057.
func (m NoUnderlyingReturnRates) HasUnderlyingReturnRateValuationTimeBusinessCenter() bool {
	return m.Has(tag.UnderlyingReturnRateValuationTimeBusinessCenter)
}

// HasUnderlyingReturnRateValuationPriceOption returns true if UnderlyingReturnRateValuationPriceOption is present, Tag 43058.
func (m NoUnderlyingReturnRates) HasUnderlyingReturnRateValuationPriceOption() bool {
	return m.Has(tag.UnderlyingReturnRateValuationPriceOption)
}

// HasUnderlyingReturnRateFinalPriceFallback returns true if UnderlyingReturnRateFinalPriceFallback is present, Tag 43059.
func (m NoUnderlyingReturnRates) HasUnderlyingReturnRateFinalPriceFallback() bool {
	return m.Has(tag.UnderlyingReturnRateFinalPriceFallback)
}

// NoUnderlyingReturnRatePrices is a repeating group element, Tag 43064.
type NoUnderlyingReturnRatePrices struct {
	*quickfix.Group
}

// SetUnderlyingReturnRatePriceBasis sets UnderlyingReturnRatePriceBasis, Tag 43065.
func (m NoUnderlyingReturnRatePrices) SetUnderlyingReturnRatePriceBasis(v int) {
	m.Set(field.NewUnderlyingReturnRatePriceBasis(v))
}

// SetUnderlyingReturnRatePrice sets UnderlyingReturnRatePrice, Tag 43066.
func (m NoUnderlyingReturnRatePrices) SetUnderlyingReturnRatePrice(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingReturnRatePrice(value, scale))
}

// SetUnderlyingReturnRatePriceCurrency sets UnderlyingReturnRatePriceCurrency, Tag 43067.
func (m NoUnderlyingReturnRatePrices) SetUnderlyingReturnRatePriceCurrency(v string) {
	m.Set(field.NewUnderlyingReturnRatePriceCurrency(v))
}

// SetUnderlyingReturnRatePriceType sets UnderlyingReturnRatePriceType, Tag 43068.
func (m NoUnderlyingReturnRatePrices) SetUnderlyingReturnRatePriceType(v int) {
	m.Set(field.NewUnderlyingReturnRatePriceType(v))
}

// GetUnderlyingReturnRatePriceBasis gets UnderlyingReturnRatePriceBasis, Tag 43065.
func (m NoUnderlyingReturnRatePrices) GetUnderlyingReturnRatePriceBasis() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingReturnRatePriceBasisField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingReturnRatePrice gets UnderlyingReturnRatePrice, Tag 43066.
func (m NoUnderlyingReturnRatePrices) GetUnderlyingReturnRatePrice() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingReturnRatePriceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingReturnRatePriceCurrency gets UnderlyingReturnRatePriceCurrency, Tag 43067.
func (m NoUnderlyingReturnRatePrices) GetUnderlyingReturnRatePriceCurrency() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingReturnRatePriceCurrencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingReturnRatePriceType gets UnderlyingReturnRatePriceType, Tag 43068.
func (m NoUnderlyingReturnRatePrices) GetUnderlyingReturnRatePriceType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingReturnRatePriceTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingReturnRatePriceBasis returns true if UnderlyingReturnRatePriceBasis is present, Tag 43065.
func (m NoUnderlyingReturnRatePrices) HasUnderlyingReturnRatePriceBasis() bool {
	return m.Has(tag.UnderlyingReturnRatePriceBasis)
}

// HasUnderlyingReturnRatePrice returns true if UnderlyingReturnRatePrice is present, Tag 43066.
func (m NoUnderlyingReturnRatePrices) HasUnderlyingReturnRatePrice() bool {
	return m.Has(tag.UnderlyingReturnRatePrice)
}

// HasUnderlyingReturnRatePriceCurrency returns true if UnderlyingReturnRatePriceCurrency is present, Tag 43067.
func (m NoUnderlyingReturnRatePrices) HasUnderlyingReturnRatePriceCurrency() bool {
	return m.Has(tag.UnderlyingReturnRatePriceCurrency)
}

// HasUnderlyingReturnRatePriceType returns true if UnderlyingReturnRatePriceType is present, Tag 43068.
func (m NoUnderlyingReturnRatePrices) HasUnderlyingReturnRatePriceType() bool {
	return m.Has(tag.UnderlyingReturnRatePriceType)
}

// NoUnderlyingReturnRatePricesRepeatingGroup is a repeating group, Tag 43064.
type NoUnderlyingReturnRatePricesRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingReturnRatePricesRepeatingGroup returns an initialized, NoUnderlyingReturnRatePricesRepeatingGroup.
func NewNoUnderlyingReturnRatePricesRepeatingGroup() NoUnderlyingReturnRatePricesRepeatingGroup {
	return NoUnderlyingReturnRatePricesRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingReturnRatePrices,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingReturnRatePriceBasis),
				quickfix.GroupElement(tag.UnderlyingReturnRatePrice),
				quickfix.GroupElement(tag.UnderlyingReturnRatePriceCurrency),
				quickfix.GroupElement(tag.UnderlyingReturnRatePriceType),
			},
		),
	}
}

// Add create and append a new NoUnderlyingReturnRatePrices to this group.
func (m NoUnderlyingReturnRatePricesRepeatingGroup) Add() NoUnderlyingReturnRatePrices {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingReturnRatePrices{g}
}

// Get returns the ith NoUnderlyingReturnRatePrices in the NoUnderlyingReturnRatePricesRepeatinGroup.
func (m NoUnderlyingReturnRatePricesRepeatingGroup) Get(i int) NoUnderlyingReturnRatePrices {
	return NoUnderlyingReturnRatePrices{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingReturnRateFXConversions is a repeating group element, Tag 43030.
type NoUnderlyingReturnRateFXConversions struct {
	*quickfix.Group
}

// SetUnderlyingReturnRateFXCurrencySymbol sets UnderlyingReturnRateFXCurrencySymbol, Tag 43031.
func (m NoUnderlyingReturnRateFXConversions) SetUnderlyingReturnRateFXCurrencySymbol(v string) {
	m.Set(field.NewUnderlyingReturnRateFXCurrencySymbol(v))
}

// SetUnderlyingReturnRateFXRate sets UnderlyingReturnRateFXRate, Tag 43032.
func (m NoUnderlyingReturnRateFXConversions) SetUnderlyingReturnRateFXRate(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingReturnRateFXRate(value, scale))
}

// SetUnderlyingReturnRateFXRateCalc sets UnderlyingReturnRateFXRateCalc, Tag 43033.
func (m NoUnderlyingReturnRateFXConversions) SetUnderlyingReturnRateFXRateCalc(v string) {
	m.Set(field.NewUnderlyingReturnRateFXRateCalc(v))
}

// GetUnderlyingReturnRateFXCurrencySymbol gets UnderlyingReturnRateFXCurrencySymbol, Tag 43031.
func (m NoUnderlyingReturnRateFXConversions) GetUnderlyingReturnRateFXCurrencySymbol() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingReturnRateFXCurrencySymbolField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingReturnRateFXRate gets UnderlyingReturnRateFXRate, Tag 43032.
func (m NoUnderlyingReturnRateFXConversions) GetUnderlyingReturnRateFXRate() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingReturnRateFXRateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingReturnRateFXRateCalc gets UnderlyingReturnRateFXRateCalc, Tag 43033.
func (m NoUnderlyingReturnRateFXConversions) GetUnderlyingReturnRateFXRateCalc() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingReturnRateFXRateCalcField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingReturnRateFXCurrencySymbol returns true if UnderlyingReturnRateFXCurrencySymbol is present, Tag 43031.
func (m NoUnderlyingReturnRateFXConversions) HasUnderlyingReturnRateFXCurrencySymbol() bool {
	return m.Has(tag.UnderlyingReturnRateFXCurrencySymbol)
}

// HasUnderlyingReturnRateFXRate returns true if UnderlyingReturnRateFXRate is present, Tag 43032.
func (m NoUnderlyingReturnRateFXConversions) HasUnderlyingReturnRateFXRate() bool {
	return m.Has(tag.UnderlyingReturnRateFXRate)
}

// HasUnderlyingReturnRateFXRateCalc returns true if UnderlyingReturnRateFXRateCalc is present, Tag 43033.
func (m NoUnderlyingReturnRateFXConversions) HasUnderlyingReturnRateFXRateCalc() bool {
	return m.Has(tag.UnderlyingReturnRateFXRateCalc)
}

// NoUnderlyingReturnRateFXConversionsRepeatingGroup is a repeating group, Tag 43030.
type NoUnderlyingReturnRateFXConversionsRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingReturnRateFXConversionsRepeatingGroup returns an initialized, NoUnderlyingReturnRateFXConversionsRepeatingGroup.
func NewNoUnderlyingReturnRateFXConversionsRepeatingGroup() NoUnderlyingReturnRateFXConversionsRepeatingGroup {
	return NoUnderlyingReturnRateFXConversionsRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingReturnRateFXConversions,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingReturnRateFXCurrencySymbol),
				quickfix.GroupElement(tag.UnderlyingReturnRateFXRate),
				quickfix.GroupElement(tag.UnderlyingReturnRateFXRateCalc),
			},
		),
	}
}

// Add create and append a new NoUnderlyingReturnRateFXConversions to this group.
func (m NoUnderlyingReturnRateFXConversionsRepeatingGroup) Add() NoUnderlyingReturnRateFXConversions {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingReturnRateFXConversions{g}
}

// Get returns the ith NoUnderlyingReturnRateFXConversions in the NoUnderlyingReturnRateFXConversionsRepeatinGroup.
func (m NoUnderlyingReturnRateFXConversionsRepeatingGroup) Get(i int) NoUnderlyingReturnRateFXConversions {
	return NoUnderlyingReturnRateFXConversions{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingReturnRateInformationSources is a repeating group element, Tag 43060.
type NoUnderlyingReturnRateInformationSources struct {
	*quickfix.Group
}

// SetUnderlyingReturnRateInformationSource sets UnderlyingReturnRateInformationSource, Tag 43061.
func (m NoUnderlyingReturnRateInformationSources) SetUnderlyingReturnRateInformationSource(v int) {
	m.Set(field.NewUnderlyingReturnRateInformationSource(v))
}

// SetUnderlyingReturnRateReferencePage sets UnderlyingReturnRateReferencePage, Tag 43062.
func (m NoUnderlyingReturnRateInformationSources) SetUnderlyingReturnRateReferencePage(v string) {
	m.Set(field.NewUnderlyingReturnRateReferencePage(v))
}

// SetUnderlyingReturnRateReferencePageHeading sets UnderlyingReturnRateReferencePageHeading, Tag 43063.
func (m NoUnderlyingReturnRateInformationSources) SetUnderlyingReturnRateReferencePageHeading(v string) {
	m.Set(field.NewUnderlyingReturnRateReferencePageHeading(v))
}

// GetUnderlyingReturnRateInformationSource gets UnderlyingReturnRateInformationSource, Tag 43061.
func (m NoUnderlyingReturnRateInformationSources) GetUnderlyingReturnRateInformationSource() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingReturnRateInformationSourceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingReturnRateReferencePage gets UnderlyingReturnRateReferencePage, Tag 43062.
func (m NoUnderlyingReturnRateInformationSources) GetUnderlyingReturnRateReferencePage() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingReturnRateReferencePageField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingReturnRateReferencePageHeading gets UnderlyingReturnRateReferencePageHeading, Tag 43063.
func (m NoUnderlyingReturnRateInformationSources) GetUnderlyingReturnRateReferencePageHeading() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingReturnRateReferencePageHeadingField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingReturnRateInformationSource returns true if UnderlyingReturnRateInformationSource is present, Tag 43061.
func (m NoUnderlyingReturnRateInformationSources) HasUnderlyingReturnRateInformationSource() bool {
	return m.Has(tag.UnderlyingReturnRateInformationSource)
}

// HasUnderlyingReturnRateReferencePage returns true if UnderlyingReturnRateReferencePage is present, Tag 43062.
func (m NoUnderlyingReturnRateInformationSources) HasUnderlyingReturnRateReferencePage() bool {
	return m.Has(tag.UnderlyingReturnRateReferencePage)
}

// HasUnderlyingReturnRateReferencePageHeading returns true if UnderlyingReturnRateReferencePageHeading is present, Tag 43063.
func (m NoUnderlyingReturnRateInformationSources) HasUnderlyingReturnRateReferencePageHeading() bool {
	return m.Has(tag.UnderlyingReturnRateReferencePageHeading)
}

// NoUnderlyingReturnRateInformationSourcesRepeatingGroup is a repeating group, Tag 43060.
type NoUnderlyingReturnRateInformationSourcesRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingReturnRateInformationSourcesRepeatingGroup returns an initialized, NoUnderlyingReturnRateInformationSourcesRepeatingGroup.
func NewNoUnderlyingReturnRateInformationSourcesRepeatingGroup() NoUnderlyingReturnRateInformationSourcesRepeatingGroup {
	return NoUnderlyingReturnRateInformationSourcesRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingReturnRateInformationSources,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingReturnRateInformationSource),
				quickfix.GroupElement(tag.UnderlyingReturnRateReferencePage),
				quickfix.GroupElement(tag.UnderlyingReturnRateReferencePageHeading),
			},
		),
	}
}

// Add create and append a new NoUnderlyingReturnRateInformationSources to this group.
func (m NoUnderlyingReturnRateInformationSourcesRepeatingGroup) Add() NoUnderlyingReturnRateInformationSources {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingReturnRateInformationSources{g}
}

// Get returns the ith NoUnderlyingReturnRateInformationSources in the NoUnderlyingReturnRateInformationSourcesRepeatinGroup.
func (m NoUnderlyingReturnRateInformationSourcesRepeatingGroup) Get(i int) NoUnderlyingReturnRateInformationSources {
	return NoUnderlyingReturnRateInformationSources{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingReturnRateDates is a repeating group element, Tag 43008.
type NoUnderlyingReturnRateDates struct {
	*quickfix.Group
}

// SetUnderlyingReturnRateDateMode sets UnderlyingReturnRateDateMode, Tag 43009.
func (m NoUnderlyingReturnRateDates) SetUnderlyingReturnRateDateMode(v int) {
	m.Set(field.NewUnderlyingReturnRateDateMode(v))
}

// SetNoUnderlyingReturnRateValuationDates sets NoUnderlyingReturnRateValuationDates, Tag 43071.
func (m NoUnderlyingReturnRateDates) SetNoUnderlyingReturnRateValuationDates(f NoUnderlyingReturnRateValuationDatesRepeatingGroup) {
	m.SetGroup(f)
}

// SetUnderlyingReturnRateValuationDateRelativeTo sets UnderlyingReturnRateValuationDateRelativeTo, Tag 43010.
func (m NoUnderlyingReturnRateDates) SetUnderlyingReturnRateValuationDateRelativeTo(v int) {
	m.Set(field.NewUnderlyingReturnRateValuationDateRelativeTo(v))
}

// SetUnderlyingReturnRateValuationDateOffsetPeriod sets UnderlyingReturnRateValuationDateOffsetPeriod, Tag 43011.
func (m NoUnderlyingReturnRateDates) SetUnderlyingReturnRateValuationDateOffsetPeriod(v int) {
	m.Set(field.NewUnderlyingReturnRateValuationDateOffsetPeriod(v))
}

// SetUnderlyingReturnRateValuationDateOffsetUnit sets UnderlyingReturnRateValuationDateOffsetUnit, Tag 43012.
func (m NoUnderlyingReturnRateDates) SetUnderlyingReturnRateValuationDateOffsetUnit(v string) {
	m.Set(field.NewUnderlyingReturnRateValuationDateOffsetUnit(v))
}

// SetUnderlyingReturnRateValuationDateOffsetDayType sets UnderlyingReturnRateValuationDateOffsetDayType, Tag 43013.
func (m NoUnderlyingReturnRateDates) SetUnderlyingReturnRateValuationDateOffsetDayType(v int) {
	m.Set(field.NewUnderlyingReturnRateValuationDateOffsetDayType(v))
}

// SetUnderlyingReturnRateValuationStartDateUnadjusted sets UnderlyingReturnRateValuationStartDateUnadjusted, Tag 43014.
func (m NoUnderlyingReturnRateDates) SetUnderlyingReturnRateValuationStartDateUnadjusted(v string) {
	m.Set(field.NewUnderlyingReturnRateValuationStartDateUnadjusted(v))
}

// SetUnderlyingReturnRateValuationStartDateRelativeTo sets UnderlyingReturnRateValuationStartDateRelativeTo, Tag 43015.
func (m NoUnderlyingReturnRateDates) SetUnderlyingReturnRateValuationStartDateRelativeTo(v int) {
	m.Set(field.NewUnderlyingReturnRateValuationStartDateRelativeTo(v))
}

// SetUnderlyingReturnRateValuationStartDateOffsetPeriod sets UnderlyingReturnRateValuationStartDateOffsetPeriod, Tag 43016.
func (m NoUnderlyingReturnRateDates) SetUnderlyingReturnRateValuationStartDateOffsetPeriod(v int) {
	m.Set(field.NewUnderlyingReturnRateValuationStartDateOffsetPeriod(v))
}

// SetUnderlyingReturnRateValuationStartDateOffsetUnit sets UnderlyingReturnRateValuationStartDateOffsetUnit, Tag 43017.
func (m NoUnderlyingReturnRateDates) SetUnderlyingReturnRateValuationStartDateOffsetUnit(v string) {
	m.Set(field.NewUnderlyingReturnRateValuationStartDateOffsetUnit(v))
}

// SetUnderlyingReturnRateValuationStartDateOffsetDayType sets UnderlyingReturnRateValuationStartDateOffsetDayType, Tag 43018.
func (m NoUnderlyingReturnRateDates) SetUnderlyingReturnRateValuationStartDateOffsetDayType(v int) {
	m.Set(field.NewUnderlyingReturnRateValuationStartDateOffsetDayType(v))
}

// SetUnderlyingReturnRateValuationStartDateAdjusted sets UnderlyingReturnRateValuationStartDateAdjusted, Tag 43019.
func (m NoUnderlyingReturnRateDates) SetUnderlyingReturnRateValuationStartDateAdjusted(v string) {
	m.Set(field.NewUnderlyingReturnRateValuationStartDateAdjusted(v))
}

// SetUnderlyingReturnRateValuationEndDateUnadjusted sets UnderlyingReturnRateValuationEndDateUnadjusted, Tag 43020.
func (m NoUnderlyingReturnRateDates) SetUnderlyingReturnRateValuationEndDateUnadjusted(v string) {
	m.Set(field.NewUnderlyingReturnRateValuationEndDateUnadjusted(v))
}

// SetUnderlyingReturnRateValuationEndDateRelativeTo sets UnderlyingReturnRateValuationEndDateRelativeTo, Tag 43021.
func (m NoUnderlyingReturnRateDates) SetUnderlyingReturnRateValuationEndDateRelativeTo(v int) {
	m.Set(field.NewUnderlyingReturnRateValuationEndDateRelativeTo(v))
}

// SetUnderlyingReturnRateValuationEndDateOffsetPeriod sets UnderlyingReturnRateValuationEndDateOffsetPeriod, Tag 43022.
func (m NoUnderlyingReturnRateDates) SetUnderlyingReturnRateValuationEndDateOffsetPeriod(v int) {
	m.Set(field.NewUnderlyingReturnRateValuationEndDateOffsetPeriod(v))
}

// SetUnderlyingReturnRateValuationEndDateOffsetUnit sets UnderlyingReturnRateValuationEndDateOffsetUnit, Tag 43023.
func (m NoUnderlyingReturnRateDates) SetUnderlyingReturnRateValuationEndDateOffsetUnit(v string) {
	m.Set(field.NewUnderlyingReturnRateValuationEndDateOffsetUnit(v))
}

// SetUnderlyingReturnRateValuationEndDateOffsetDayType sets UnderlyingReturnRateValuationEndDateOffsetDayType, Tag 43024.
func (m NoUnderlyingReturnRateDates) SetUnderlyingReturnRateValuationEndDateOffsetDayType(v int) {
	m.Set(field.NewUnderlyingReturnRateValuationEndDateOffsetDayType(v))
}

// SetUnderlyingReturnRateValuationEndDateAdjusted sets UnderlyingReturnRateValuationEndDateAdjusted, Tag 43025.
func (m NoUnderlyingReturnRateDates) SetUnderlyingReturnRateValuationEndDateAdjusted(v string) {
	m.Set(field.NewUnderlyingReturnRateValuationEndDateAdjusted(v))
}

// SetUnderlyingReturnRateValuationFrequencyPeriod sets UnderlyingReturnRateValuationFrequencyPeriod, Tag 43026.
func (m NoUnderlyingReturnRateDates) SetUnderlyingReturnRateValuationFrequencyPeriod(v int) {
	m.Set(field.NewUnderlyingReturnRateValuationFrequencyPeriod(v))
}

// SetUnderlyingReturnRateValuationFrequencyUnit sets UnderlyingReturnRateValuationFrequencyUnit, Tag 43027.
func (m NoUnderlyingReturnRateDates) SetUnderlyingReturnRateValuationFrequencyUnit(v string) {
	m.Set(field.NewUnderlyingReturnRateValuationFrequencyUnit(v))
}

// SetUnderlyingReturnRateValuationFrequencyRollConvention sets UnderlyingReturnRateValuationFrequencyRollConvention, Tag 43028.
func (m NoUnderlyingReturnRateDates) SetUnderlyingReturnRateValuationFrequencyRollConvention(v string) {
	m.Set(field.NewUnderlyingReturnRateValuationFrequencyRollConvention(v))
}

// SetUnderlyingReturnRateValuationDateBusinessDayConvention sets UnderlyingReturnRateValuationDateBusinessDayConvention, Tag 43029.
func (m NoUnderlyingReturnRateDates) SetUnderlyingReturnRateValuationDateBusinessDayConvention(v int) {
	m.Set(field.NewUnderlyingReturnRateValuationDateBusinessDayConvention(v))
}

// SetNoUnderlyingReturnRateValuationDateBusinessCenters sets NoUnderlyingReturnRateValuationDateBusinessCenters, Tag 43069.
func (m NoUnderlyingReturnRateDates) SetNoUnderlyingReturnRateValuationDateBusinessCenters(f NoUnderlyingReturnRateValuationDateBusinessCentersRepeatingGroup) {
	m.SetGroup(f)
}

// GetUnderlyingReturnRateDateMode gets UnderlyingReturnRateDateMode, Tag 43009.
func (m NoUnderlyingReturnRateDates) GetUnderlyingReturnRateDateMode() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingReturnRateDateModeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUnderlyingReturnRateValuationDates gets NoUnderlyingReturnRateValuationDates, Tag 43071.
func (m NoUnderlyingReturnRateDates) GetNoUnderlyingReturnRateValuationDates() (NoUnderlyingReturnRateValuationDatesRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingReturnRateValuationDatesRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetUnderlyingReturnRateValuationDateRelativeTo gets UnderlyingReturnRateValuationDateRelativeTo, Tag 43010.
func (m NoUnderlyingReturnRateDates) GetUnderlyingReturnRateValuationDateRelativeTo() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingReturnRateValuationDateRelativeToField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingReturnRateValuationDateOffsetPeriod gets UnderlyingReturnRateValuationDateOffsetPeriod, Tag 43011.
func (m NoUnderlyingReturnRateDates) GetUnderlyingReturnRateValuationDateOffsetPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingReturnRateValuationDateOffsetPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingReturnRateValuationDateOffsetUnit gets UnderlyingReturnRateValuationDateOffsetUnit, Tag 43012.
func (m NoUnderlyingReturnRateDates) GetUnderlyingReturnRateValuationDateOffsetUnit() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingReturnRateValuationDateOffsetUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingReturnRateValuationDateOffsetDayType gets UnderlyingReturnRateValuationDateOffsetDayType, Tag 43013.
func (m NoUnderlyingReturnRateDates) GetUnderlyingReturnRateValuationDateOffsetDayType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingReturnRateValuationDateOffsetDayTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingReturnRateValuationStartDateUnadjusted gets UnderlyingReturnRateValuationStartDateUnadjusted, Tag 43014.
func (m NoUnderlyingReturnRateDates) GetUnderlyingReturnRateValuationStartDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingReturnRateValuationStartDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingReturnRateValuationStartDateRelativeTo gets UnderlyingReturnRateValuationStartDateRelativeTo, Tag 43015.
func (m NoUnderlyingReturnRateDates) GetUnderlyingReturnRateValuationStartDateRelativeTo() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingReturnRateValuationStartDateRelativeToField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingReturnRateValuationStartDateOffsetPeriod gets UnderlyingReturnRateValuationStartDateOffsetPeriod, Tag 43016.
func (m NoUnderlyingReturnRateDates) GetUnderlyingReturnRateValuationStartDateOffsetPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingReturnRateValuationStartDateOffsetPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingReturnRateValuationStartDateOffsetUnit gets UnderlyingReturnRateValuationStartDateOffsetUnit, Tag 43017.
func (m NoUnderlyingReturnRateDates) GetUnderlyingReturnRateValuationStartDateOffsetUnit() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingReturnRateValuationStartDateOffsetUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingReturnRateValuationStartDateOffsetDayType gets UnderlyingReturnRateValuationStartDateOffsetDayType, Tag 43018.
func (m NoUnderlyingReturnRateDates) GetUnderlyingReturnRateValuationStartDateOffsetDayType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingReturnRateValuationStartDateOffsetDayTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingReturnRateValuationStartDateAdjusted gets UnderlyingReturnRateValuationStartDateAdjusted, Tag 43019.
func (m NoUnderlyingReturnRateDates) GetUnderlyingReturnRateValuationStartDateAdjusted() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingReturnRateValuationStartDateAdjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingReturnRateValuationEndDateUnadjusted gets UnderlyingReturnRateValuationEndDateUnadjusted, Tag 43020.
func (m NoUnderlyingReturnRateDates) GetUnderlyingReturnRateValuationEndDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingReturnRateValuationEndDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingReturnRateValuationEndDateRelativeTo gets UnderlyingReturnRateValuationEndDateRelativeTo, Tag 43021.
func (m NoUnderlyingReturnRateDates) GetUnderlyingReturnRateValuationEndDateRelativeTo() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingReturnRateValuationEndDateRelativeToField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingReturnRateValuationEndDateOffsetPeriod gets UnderlyingReturnRateValuationEndDateOffsetPeriod, Tag 43022.
func (m NoUnderlyingReturnRateDates) GetUnderlyingReturnRateValuationEndDateOffsetPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingReturnRateValuationEndDateOffsetPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingReturnRateValuationEndDateOffsetUnit gets UnderlyingReturnRateValuationEndDateOffsetUnit, Tag 43023.
func (m NoUnderlyingReturnRateDates) GetUnderlyingReturnRateValuationEndDateOffsetUnit() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingReturnRateValuationEndDateOffsetUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingReturnRateValuationEndDateOffsetDayType gets UnderlyingReturnRateValuationEndDateOffsetDayType, Tag 43024.
func (m NoUnderlyingReturnRateDates) GetUnderlyingReturnRateValuationEndDateOffsetDayType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingReturnRateValuationEndDateOffsetDayTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingReturnRateValuationEndDateAdjusted gets UnderlyingReturnRateValuationEndDateAdjusted, Tag 43025.
func (m NoUnderlyingReturnRateDates) GetUnderlyingReturnRateValuationEndDateAdjusted() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingReturnRateValuationEndDateAdjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingReturnRateValuationFrequencyPeriod gets UnderlyingReturnRateValuationFrequencyPeriod, Tag 43026.
func (m NoUnderlyingReturnRateDates) GetUnderlyingReturnRateValuationFrequencyPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingReturnRateValuationFrequencyPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingReturnRateValuationFrequencyUnit gets UnderlyingReturnRateValuationFrequencyUnit, Tag 43027.
func (m NoUnderlyingReturnRateDates) GetUnderlyingReturnRateValuationFrequencyUnit() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingReturnRateValuationFrequencyUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingReturnRateValuationFrequencyRollConvention gets UnderlyingReturnRateValuationFrequencyRollConvention, Tag 43028.
func (m NoUnderlyingReturnRateDates) GetUnderlyingReturnRateValuationFrequencyRollConvention() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingReturnRateValuationFrequencyRollConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingReturnRateValuationDateBusinessDayConvention gets UnderlyingReturnRateValuationDateBusinessDayConvention, Tag 43029.
func (m NoUnderlyingReturnRateDates) GetUnderlyingReturnRateValuationDateBusinessDayConvention() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingReturnRateValuationDateBusinessDayConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUnderlyingReturnRateValuationDateBusinessCenters gets NoUnderlyingReturnRateValuationDateBusinessCenters, Tag 43069.
func (m NoUnderlyingReturnRateDates) GetNoUnderlyingReturnRateValuationDateBusinessCenters() (NoUnderlyingReturnRateValuationDateBusinessCentersRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingReturnRateValuationDateBusinessCentersRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// HasUnderlyingReturnRateDateMode returns true if UnderlyingReturnRateDateMode is present, Tag 43009.
func (m NoUnderlyingReturnRateDates) HasUnderlyingReturnRateDateMode() bool {
	return m.Has(tag.UnderlyingReturnRateDateMode)
}

// HasNoUnderlyingReturnRateValuationDates returns true if NoUnderlyingReturnRateValuationDates is present, Tag 43071.
func (m NoUnderlyingReturnRateDates) HasNoUnderlyingReturnRateValuationDates() bool {
	return m.Has(tag.NoUnderlyingReturnRateValuationDates)
}

// HasUnderlyingReturnRateValuationDateRelativeTo returns true if UnderlyingReturnRateValuationDateRelativeTo is present, Tag 43010.
func (m NoUnderlyingReturnRateDates) HasUnderlyingReturnRateValuationDateRelativeTo() bool {
	return m.Has(tag.UnderlyingReturnRateValuationDateRelativeTo)
}

// HasUnderlyingReturnRateValuationDateOffsetPeriod returns true if UnderlyingReturnRateValuationDateOffsetPeriod is present, Tag 43011.
func (m NoUnderlyingReturnRateDates) HasUnderlyingReturnRateValuationDateOffsetPeriod() bool {
	return m.Has(tag.UnderlyingReturnRateValuationDateOffsetPeriod)
}

// HasUnderlyingReturnRateValuationDateOffsetUnit returns true if UnderlyingReturnRateValuationDateOffsetUnit is present, Tag 43012.
func (m NoUnderlyingReturnRateDates) HasUnderlyingReturnRateValuationDateOffsetUnit() bool {
	return m.Has(tag.UnderlyingReturnRateValuationDateOffsetUnit)
}

// HasUnderlyingReturnRateValuationDateOffsetDayType returns true if UnderlyingReturnRateValuationDateOffsetDayType is present, Tag 43013.
func (m NoUnderlyingReturnRateDates) HasUnderlyingReturnRateValuationDateOffsetDayType() bool {
	return m.Has(tag.UnderlyingReturnRateValuationDateOffsetDayType)
}

// HasUnderlyingReturnRateValuationStartDateUnadjusted returns true if UnderlyingReturnRateValuationStartDateUnadjusted is present, Tag 43014.
func (m NoUnderlyingReturnRateDates) HasUnderlyingReturnRateValuationStartDateUnadjusted() bool {
	return m.Has(tag.UnderlyingReturnRateValuationStartDateUnadjusted)
}

// HasUnderlyingReturnRateValuationStartDateRelativeTo returns true if UnderlyingReturnRateValuationStartDateRelativeTo is present, Tag 43015.
func (m NoUnderlyingReturnRateDates) HasUnderlyingReturnRateValuationStartDateRelativeTo() bool {
	return m.Has(tag.UnderlyingReturnRateValuationStartDateRelativeTo)
}

// HasUnderlyingReturnRateValuationStartDateOffsetPeriod returns true if UnderlyingReturnRateValuationStartDateOffsetPeriod is present, Tag 43016.
func (m NoUnderlyingReturnRateDates) HasUnderlyingReturnRateValuationStartDateOffsetPeriod() bool {
	return m.Has(tag.UnderlyingReturnRateValuationStartDateOffsetPeriod)
}

// HasUnderlyingReturnRateValuationStartDateOffsetUnit returns true if UnderlyingReturnRateValuationStartDateOffsetUnit is present, Tag 43017.
func (m NoUnderlyingReturnRateDates) HasUnderlyingReturnRateValuationStartDateOffsetUnit() bool {
	return m.Has(tag.UnderlyingReturnRateValuationStartDateOffsetUnit)
}

// HasUnderlyingReturnRateValuationStartDateOffsetDayType returns true if UnderlyingReturnRateValuationStartDateOffsetDayType is present, Tag 43018.
func (m NoUnderlyingReturnRateDates) HasUnderlyingReturnRateValuationStartDateOffsetDayType() bool {
	return m.Has(tag.UnderlyingReturnRateValuationStartDateOffsetDayType)
}

// HasUnderlyingReturnRateValuationStartDateAdjusted returns true if UnderlyingReturnRateValuationStartDateAdjusted is present, Tag 43019.
func (m NoUnderlyingReturnRateDates) HasUnderlyingReturnRateValuationStartDateAdjusted() bool {
	return m.Has(tag.UnderlyingReturnRateValuationStartDateAdjusted)
}

// HasUnderlyingReturnRateValuationEndDateUnadjusted returns true if UnderlyingReturnRateValuationEndDateUnadjusted is present, Tag 43020.
func (m NoUnderlyingReturnRateDates) HasUnderlyingReturnRateValuationEndDateUnadjusted() bool {
	return m.Has(tag.UnderlyingReturnRateValuationEndDateUnadjusted)
}

// HasUnderlyingReturnRateValuationEndDateRelativeTo returns true if UnderlyingReturnRateValuationEndDateRelativeTo is present, Tag 43021.
func (m NoUnderlyingReturnRateDates) HasUnderlyingReturnRateValuationEndDateRelativeTo() bool {
	return m.Has(tag.UnderlyingReturnRateValuationEndDateRelativeTo)
}

// HasUnderlyingReturnRateValuationEndDateOffsetPeriod returns true if UnderlyingReturnRateValuationEndDateOffsetPeriod is present, Tag 43022.
func (m NoUnderlyingReturnRateDates) HasUnderlyingReturnRateValuationEndDateOffsetPeriod() bool {
	return m.Has(tag.UnderlyingReturnRateValuationEndDateOffsetPeriod)
}

// HasUnderlyingReturnRateValuationEndDateOffsetUnit returns true if UnderlyingReturnRateValuationEndDateOffsetUnit is present, Tag 43023.
func (m NoUnderlyingReturnRateDates) HasUnderlyingReturnRateValuationEndDateOffsetUnit() bool {
	return m.Has(tag.UnderlyingReturnRateValuationEndDateOffsetUnit)
}

// HasUnderlyingReturnRateValuationEndDateOffsetDayType returns true if UnderlyingReturnRateValuationEndDateOffsetDayType is present, Tag 43024.
func (m NoUnderlyingReturnRateDates) HasUnderlyingReturnRateValuationEndDateOffsetDayType() bool {
	return m.Has(tag.UnderlyingReturnRateValuationEndDateOffsetDayType)
}

// HasUnderlyingReturnRateValuationEndDateAdjusted returns true if UnderlyingReturnRateValuationEndDateAdjusted is present, Tag 43025.
func (m NoUnderlyingReturnRateDates) HasUnderlyingReturnRateValuationEndDateAdjusted() bool {
	return m.Has(tag.UnderlyingReturnRateValuationEndDateAdjusted)
}

// HasUnderlyingReturnRateValuationFrequencyPeriod returns true if UnderlyingReturnRateValuationFrequencyPeriod is present, Tag 43026.
func (m NoUnderlyingReturnRateDates) HasUnderlyingReturnRateValuationFrequencyPeriod() bool {
	return m.Has(tag.UnderlyingReturnRateValuationFrequencyPeriod)
}

// HasUnderlyingReturnRateValuationFrequencyUnit returns true if UnderlyingReturnRateValuationFrequencyUnit is present, Tag 43027.
func (m NoUnderlyingReturnRateDates) HasUnderlyingReturnRateValuationFrequencyUnit() bool {
	return m.Has(tag.UnderlyingReturnRateValuationFrequencyUnit)
}

// HasUnderlyingReturnRateValuationFrequencyRollConvention returns true if UnderlyingReturnRateValuationFrequencyRollConvention is present, Tag 43028.
func (m NoUnderlyingReturnRateDates) HasUnderlyingReturnRateValuationFrequencyRollConvention() bool {
	return m.Has(tag.UnderlyingReturnRateValuationFrequencyRollConvention)
}

// HasUnderlyingReturnRateValuationDateBusinessDayConvention returns true if UnderlyingReturnRateValuationDateBusinessDayConvention is present, Tag 43029.
func (m NoUnderlyingReturnRateDates) HasUnderlyingReturnRateValuationDateBusinessDayConvention() bool {
	return m.Has(tag.UnderlyingReturnRateValuationDateBusinessDayConvention)
}

// HasNoUnderlyingReturnRateValuationDateBusinessCenters returns true if NoUnderlyingReturnRateValuationDateBusinessCenters is present, Tag 43069.
func (m NoUnderlyingReturnRateDates) HasNoUnderlyingReturnRateValuationDateBusinessCenters() bool {
	return m.Has(tag.NoUnderlyingReturnRateValuationDateBusinessCenters)
}

// NoUnderlyingReturnRateValuationDates is a repeating group element, Tag 43071.
type NoUnderlyingReturnRateValuationDates struct {
	*quickfix.Group
}

// SetUnderlyingReturnRateValuationDate sets UnderlyingReturnRateValuationDate, Tag 43072.
func (m NoUnderlyingReturnRateValuationDates) SetUnderlyingReturnRateValuationDate(v string) {
	m.Set(field.NewUnderlyingReturnRateValuationDate(v))
}

// SetUnderlyingReturnRateValuationDateType sets UnderlyingReturnRateValuationDateType, Tag 43073.
func (m NoUnderlyingReturnRateValuationDates) SetUnderlyingReturnRateValuationDateType(v int) {
	m.Set(field.NewUnderlyingReturnRateValuationDateType(v))
}

// GetUnderlyingReturnRateValuationDate gets UnderlyingReturnRateValuationDate, Tag 43072.
func (m NoUnderlyingReturnRateValuationDates) GetUnderlyingReturnRateValuationDate() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingReturnRateValuationDateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingReturnRateValuationDateType gets UnderlyingReturnRateValuationDateType, Tag 43073.
func (m NoUnderlyingReturnRateValuationDates) GetUnderlyingReturnRateValuationDateType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingReturnRateValuationDateTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingReturnRateValuationDate returns true if UnderlyingReturnRateValuationDate is present, Tag 43072.
func (m NoUnderlyingReturnRateValuationDates) HasUnderlyingReturnRateValuationDate() bool {
	return m.Has(tag.UnderlyingReturnRateValuationDate)
}

// HasUnderlyingReturnRateValuationDateType returns true if UnderlyingReturnRateValuationDateType is present, Tag 43073.
func (m NoUnderlyingReturnRateValuationDates) HasUnderlyingReturnRateValuationDateType() bool {
	return m.Has(tag.UnderlyingReturnRateValuationDateType)
}

// NoUnderlyingReturnRateValuationDatesRepeatingGroup is a repeating group, Tag 43071.
type NoUnderlyingReturnRateValuationDatesRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingReturnRateValuationDatesRepeatingGroup returns an initialized, NoUnderlyingReturnRateValuationDatesRepeatingGroup.
func NewNoUnderlyingReturnRateValuationDatesRepeatingGroup() NoUnderlyingReturnRateValuationDatesRepeatingGroup {
	return NoUnderlyingReturnRateValuationDatesRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingReturnRateValuationDates,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingReturnRateValuationDate),
				quickfix.GroupElement(tag.UnderlyingReturnRateValuationDateType),
			},
		),
	}
}

// Add create and append a new NoUnderlyingReturnRateValuationDates to this group.
func (m NoUnderlyingReturnRateValuationDatesRepeatingGroup) Add() NoUnderlyingReturnRateValuationDates {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingReturnRateValuationDates{g}
}

// Get returns the ith NoUnderlyingReturnRateValuationDates in the NoUnderlyingReturnRateValuationDatesRepeatinGroup.
func (m NoUnderlyingReturnRateValuationDatesRepeatingGroup) Get(i int) NoUnderlyingReturnRateValuationDates {
	return NoUnderlyingReturnRateValuationDates{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingReturnRateValuationDateBusinessCenters is a repeating group element, Tag 43069.
type NoUnderlyingReturnRateValuationDateBusinessCenters struct {
	*quickfix.Group
}

// SetUnderlyingReturnRateValuationDateBusinessCenter sets UnderlyingReturnRateValuationDateBusinessCenter, Tag 43070.
func (m NoUnderlyingReturnRateValuationDateBusinessCenters) SetUnderlyingReturnRateValuationDateBusinessCenter(v string) {
	m.Set(field.NewUnderlyingReturnRateValuationDateBusinessCenter(v))
}

// GetUnderlyingReturnRateValuationDateBusinessCenter gets UnderlyingReturnRateValuationDateBusinessCenter, Tag 43070.
func (m NoUnderlyingReturnRateValuationDateBusinessCenters) GetUnderlyingReturnRateValuationDateBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingReturnRateValuationDateBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingReturnRateValuationDateBusinessCenter returns true if UnderlyingReturnRateValuationDateBusinessCenter is present, Tag 43070.
func (m NoUnderlyingReturnRateValuationDateBusinessCenters) HasUnderlyingReturnRateValuationDateBusinessCenter() bool {
	return m.Has(tag.UnderlyingReturnRateValuationDateBusinessCenter)
}

// NoUnderlyingReturnRateValuationDateBusinessCentersRepeatingGroup is a repeating group, Tag 43069.
type NoUnderlyingReturnRateValuationDateBusinessCentersRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingReturnRateValuationDateBusinessCentersRepeatingGroup returns an initialized, NoUnderlyingReturnRateValuationDateBusinessCentersRepeatingGroup.
func NewNoUnderlyingReturnRateValuationDateBusinessCentersRepeatingGroup() NoUnderlyingReturnRateValuationDateBusinessCentersRepeatingGroup {
	return NoUnderlyingReturnRateValuationDateBusinessCentersRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingReturnRateValuationDateBusinessCenters,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingReturnRateValuationDateBusinessCenter),
			},
		),
	}
}

// Add create and append a new NoUnderlyingReturnRateValuationDateBusinessCenters to this group.
func (m NoUnderlyingReturnRateValuationDateBusinessCentersRepeatingGroup) Add() NoUnderlyingReturnRateValuationDateBusinessCenters {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingReturnRateValuationDateBusinessCenters{g}
}

// Get returns the ith NoUnderlyingReturnRateValuationDateBusinessCenters in the NoUnderlyingReturnRateValuationDateBusinessCentersRepeatinGroup.
func (m NoUnderlyingReturnRateValuationDateBusinessCentersRepeatingGroup) Get(i int) NoUnderlyingReturnRateValuationDateBusinessCenters {
	return NoUnderlyingReturnRateValuationDateBusinessCenters{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingReturnRateDatesRepeatingGroup is a repeating group, Tag 43008.
type NoUnderlyingReturnRateDatesRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingReturnRateDatesRepeatingGroup returns an initialized, NoUnderlyingReturnRateDatesRepeatingGroup.
func NewNoUnderlyingReturnRateDatesRepeatingGroup() NoUnderlyingReturnRateDatesRepeatingGroup {
	return NoUnderlyingReturnRateDatesRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingReturnRateDates,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingReturnRateDateMode),
				NewNoUnderlyingReturnRateValuationDatesRepeatingGroup(),
				quickfix.GroupElement(tag.UnderlyingReturnRateValuationDateRelativeTo),
				quickfix.GroupElement(tag.UnderlyingReturnRateValuationDateOffsetPeriod),
				quickfix.GroupElement(tag.UnderlyingReturnRateValuationDateOffsetUnit),
				quickfix.GroupElement(tag.UnderlyingReturnRateValuationDateOffsetDayType),
				quickfix.GroupElement(tag.UnderlyingReturnRateValuationStartDateUnadjusted),
				quickfix.GroupElement(tag.UnderlyingReturnRateValuationStartDateRelativeTo),
				quickfix.GroupElement(tag.UnderlyingReturnRateValuationStartDateOffsetPeriod),
				quickfix.GroupElement(tag.UnderlyingReturnRateValuationStartDateOffsetUnit),
				quickfix.GroupElement(tag.UnderlyingReturnRateValuationStartDateOffsetDayType),
				quickfix.GroupElement(tag.UnderlyingReturnRateValuationStartDateAdjusted),
				quickfix.GroupElement(tag.UnderlyingReturnRateValuationEndDateUnadjusted),
				quickfix.GroupElement(tag.UnderlyingReturnRateValuationEndDateRelativeTo),
				quickfix.GroupElement(tag.UnderlyingReturnRateValuationEndDateOffsetPeriod),
				quickfix.GroupElement(tag.UnderlyingReturnRateValuationEndDateOffsetUnit),
				quickfix.GroupElement(tag.UnderlyingReturnRateValuationEndDateOffsetDayType),
				quickfix.GroupElement(tag.UnderlyingReturnRateValuationEndDateAdjusted),
				quickfix.GroupElement(tag.UnderlyingReturnRateValuationFrequencyPeriod),
				quickfix.GroupElement(tag.UnderlyingReturnRateValuationFrequencyUnit),
				quickfix.GroupElement(tag.UnderlyingReturnRateValuationFrequencyRollConvention),
				quickfix.GroupElement(tag.UnderlyingReturnRateValuationDateBusinessDayConvention),
				NewNoUnderlyingReturnRateValuationDateBusinessCentersRepeatingGroup(),
			},
		),
	}
}

// Add create and append a new NoUnderlyingReturnRateDates to this group.
func (m NoUnderlyingReturnRateDatesRepeatingGroup) Add() NoUnderlyingReturnRateDates {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingReturnRateDates{g}
}

// Get returns the ith NoUnderlyingReturnRateDates in the NoUnderlyingReturnRateDatesRepeatinGroup.
func (m NoUnderlyingReturnRateDatesRepeatingGroup) Get(i int) NoUnderlyingReturnRateDates {
	return NoUnderlyingReturnRateDates{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingReturnRatesRepeatingGroup is a repeating group, Tag 43034.
type NoUnderlyingReturnRatesRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingReturnRatesRepeatingGroup returns an initialized, NoUnderlyingReturnRatesRepeatingGroup.
func NewNoUnderlyingReturnRatesRepeatingGroup() NoUnderlyingReturnRatesRepeatingGroup {
	return NoUnderlyingReturnRatesRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingReturnRates,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingReturnRatePriceSequence),
				quickfix.GroupElement(tag.UnderlyingReturnRateCommissionBasis),
				quickfix.GroupElement(tag.UnderlyingReturnRateCommissionAmount),
				quickfix.GroupElement(tag.UnderlyingReturnRateCommissionCurrency),
				quickfix.GroupElement(tag.UnderlyingReturnRateTotalCommissionPerTrade),
				quickfix.GroupElement(tag.UnderlyingReturnRateDeterminationMethod),
				NewNoUnderlyingReturnRatePricesRepeatingGroup(),
				NewNoUnderlyingReturnRateFXConversionsRepeatingGroup(),
				quickfix.GroupElement(tag.UnderlyingReturnRateAmountRelativeTo),
				quickfix.GroupElement(tag.UnderlyingReturnRateQuoteMeasureType),
				quickfix.GroupElement(tag.UnderlyingReturnRateQuoteUnits),
				quickfix.GroupElement(tag.UnderlyingReturnRateQuoteMethod),
				quickfix.GroupElement(tag.UnderlyingReturnRateQuoteCurrency),
				quickfix.GroupElement(tag.UnderlyingReturnRateQuoteCurrencyType),
				quickfix.GroupElement(tag.UnderlyingReturnRateQuoteTimeType),
				quickfix.GroupElement(tag.UnderlyingReturnRateQuoteTime),
				quickfix.GroupElement(tag.UnderlyingReturnRateQuoteDate),
				quickfix.GroupElement(tag.UnderlyingReturnRateQuoteExpirationTime),
				quickfix.GroupElement(tag.UnderlyingReturnRateQuoteBusinessCenter),
				quickfix.GroupElement(tag.UnderlyingReturnRateQuoteExchange),
				NewNoUnderlyingReturnRateInformationSourcesRepeatingGroup(),
				quickfix.GroupElement(tag.UnderlyingReturnRateQuotePricingModel),
				quickfix.GroupElement(tag.UnderlyingReturnRateCashFlowType),
				NewNoUnderlyingReturnRateDatesRepeatingGroup(),
				quickfix.GroupElement(tag.UnderlyingReturnRateValuationTimeType),
				quickfix.GroupElement(tag.UnderlyingReturnRateValuationTime),
				quickfix.GroupElement(tag.UnderlyingReturnRateValuationTimeBusinessCenter),
				quickfix.GroupElement(tag.UnderlyingReturnRateValuationPriceOption),
				quickfix.GroupElement(tag.UnderlyingReturnRateFinalPriceFallback),
			},
		),
	}
}

// Add create and append a new NoUnderlyingReturnRates to this group.
func (m NoUnderlyingReturnRatesRepeatingGroup) Add() NoUnderlyingReturnRates {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingReturnRates{g}
}

// Get returns the ith NoUnderlyingReturnRates in the NoUnderlyingReturnRatesRepeatinGroup.
func (m NoUnderlyingReturnRatesRepeatingGroup) Get(i int) NoUnderlyingReturnRates {
	return NoUnderlyingReturnRates{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingPaymentStreamNonDeliverableFixingDatesBusinessCenters is a repeating group element, Tag 40968.
type NoUnderlyingPaymentStreamNonDeliverableFixingDatesBusinessCenters struct {
	*quickfix.Group
}

// SetUnderlyingPaymentStreamNonDeliverableFixingDatesBusinessCenter sets UnderlyingPaymentStreamNonDeliverableFixingDatesBusinessCenter, Tag 40650.
func (m NoUnderlyingPaymentStreamNonDeliverableFixingDatesBusinessCenters) SetUnderlyingPaymentStreamNonDeliverableFixingDatesBusinessCenter(v string) {
	m.Set(field.NewUnderlyingPaymentStreamNonDeliverableFixingDatesBusinessCenter(v))
}

// GetUnderlyingPaymentStreamNonDeliverableFixingDatesBusinessCenter gets UnderlyingPaymentStreamNonDeliverableFixingDatesBusinessCenter, Tag 40650.
func (m NoUnderlyingPaymentStreamNonDeliverableFixingDatesBusinessCenters) GetUnderlyingPaymentStreamNonDeliverableFixingDatesBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamNonDeliverableFixingDatesBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingPaymentStreamNonDeliverableFixingDatesBusinessCenter returns true if UnderlyingPaymentStreamNonDeliverableFixingDatesBusinessCenter is present, Tag 40650.
func (m NoUnderlyingPaymentStreamNonDeliverableFixingDatesBusinessCenters) HasUnderlyingPaymentStreamNonDeliverableFixingDatesBusinessCenter() bool {
	return m.Has(tag.UnderlyingPaymentStreamNonDeliverableFixingDatesBusinessCenter)
}

// NoUnderlyingPaymentStreamNonDeliverableFixingDatesBusinessCentersRepeatingGroup is a repeating group, Tag 40968.
type NoUnderlyingPaymentStreamNonDeliverableFixingDatesBusinessCentersRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingPaymentStreamNonDeliverableFixingDatesBusinessCentersRepeatingGroup returns an initialized, NoUnderlyingPaymentStreamNonDeliverableFixingDatesBusinessCentersRepeatingGroup.
func NewNoUnderlyingPaymentStreamNonDeliverableFixingDatesBusinessCentersRepeatingGroup() NoUnderlyingPaymentStreamNonDeliverableFixingDatesBusinessCentersRepeatingGroup {
	return NoUnderlyingPaymentStreamNonDeliverableFixingDatesBusinessCentersRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingPaymentStreamNonDeliverableFixingDatesBusinessCenters,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingPaymentStreamNonDeliverableFixingDatesBusinessCenter),
			},
		),
	}
}

// Add create and append a new NoUnderlyingPaymentStreamNonDeliverableFixingDatesBusinessCenters to this group.
func (m NoUnderlyingPaymentStreamNonDeliverableFixingDatesBusinessCentersRepeatingGroup) Add() NoUnderlyingPaymentStreamNonDeliverableFixingDatesBusinessCenters {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingPaymentStreamNonDeliverableFixingDatesBusinessCenters{g}
}

// Get returns the ith NoUnderlyingPaymentStreamNonDeliverableFixingDatesBusinessCenters in the NoUnderlyingPaymentStreamNonDeliverableFixingDatesBusinessCentersRepeatinGroup.
func (m NoUnderlyingPaymentStreamNonDeliverableFixingDatesBusinessCentersRepeatingGroup) Get(i int) NoUnderlyingPaymentStreamNonDeliverableFixingDatesBusinessCenters {
	return NoUnderlyingPaymentStreamNonDeliverableFixingDatesBusinessCenters{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingNonDeliverableFixingDates is a repeating group element, Tag 40656.
type NoUnderlyingNonDeliverableFixingDates struct {
	*quickfix.Group
}

// SetUnderlyingNonDeliverableFixingDate sets UnderlyingNonDeliverableFixingDate, Tag 40657.
func (m NoUnderlyingNonDeliverableFixingDates) SetUnderlyingNonDeliverableFixingDate(v string) {
	m.Set(field.NewUnderlyingNonDeliverableFixingDate(v))
}

// SetUnderlyingNonDeliverableFixingDateType sets UnderlyingNonDeliverableFixingDateType, Tag 40658.
func (m NoUnderlyingNonDeliverableFixingDates) SetUnderlyingNonDeliverableFixingDateType(v int) {
	m.Set(field.NewUnderlyingNonDeliverableFixingDateType(v))
}

// GetUnderlyingNonDeliverableFixingDate gets UnderlyingNonDeliverableFixingDate, Tag 40657.
func (m NoUnderlyingNonDeliverableFixingDates) GetUnderlyingNonDeliverableFixingDate() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingNonDeliverableFixingDateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingNonDeliverableFixingDateType gets UnderlyingNonDeliverableFixingDateType, Tag 40658.
func (m NoUnderlyingNonDeliverableFixingDates) GetUnderlyingNonDeliverableFixingDateType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingNonDeliverableFixingDateTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingNonDeliverableFixingDate returns true if UnderlyingNonDeliverableFixingDate is present, Tag 40657.
func (m NoUnderlyingNonDeliverableFixingDates) HasUnderlyingNonDeliverableFixingDate() bool {
	return m.Has(tag.UnderlyingNonDeliverableFixingDate)
}

// HasUnderlyingNonDeliverableFixingDateType returns true if UnderlyingNonDeliverableFixingDateType is present, Tag 40658.
func (m NoUnderlyingNonDeliverableFixingDates) HasUnderlyingNonDeliverableFixingDateType() bool {
	return m.Has(tag.UnderlyingNonDeliverableFixingDateType)
}

// NoUnderlyingNonDeliverableFixingDatesRepeatingGroup is a repeating group, Tag 40656.
type NoUnderlyingNonDeliverableFixingDatesRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingNonDeliverableFixingDatesRepeatingGroup returns an initialized, NoUnderlyingNonDeliverableFixingDatesRepeatingGroup.
func NewNoUnderlyingNonDeliverableFixingDatesRepeatingGroup() NoUnderlyingNonDeliverableFixingDatesRepeatingGroup {
	return NoUnderlyingNonDeliverableFixingDatesRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingNonDeliverableFixingDates,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingNonDeliverableFixingDate),
				quickfix.GroupElement(tag.UnderlyingNonDeliverableFixingDateType),
			},
		),
	}
}

// Add create and append a new NoUnderlyingNonDeliverableFixingDates to this group.
func (m NoUnderlyingNonDeliverableFixingDatesRepeatingGroup) Add() NoUnderlyingNonDeliverableFixingDates {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingNonDeliverableFixingDates{g}
}

// Get returns the ith NoUnderlyingNonDeliverableFixingDates in the NoUnderlyingNonDeliverableFixingDatesRepeatinGroup.
func (m NoUnderlyingNonDeliverableFixingDatesRepeatingGroup) Get(i int) NoUnderlyingNonDeliverableFixingDates {
	return NoUnderlyingNonDeliverableFixingDates{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingSettlRateFallbacks is a repeating group element, Tag 40659.
type NoUnderlyingSettlRateFallbacks struct {
	*quickfix.Group
}

// SetUnderlyingSettlRatePostponementMaximumDays sets UnderlyingSettlRatePostponementMaximumDays, Tag 40660.
func (m NoUnderlyingSettlRateFallbacks) SetUnderlyingSettlRatePostponementMaximumDays(v int) {
	m.Set(field.NewUnderlyingSettlRatePostponementMaximumDays(v))
}

// SetUnderlyingSettlRateFallbackRateSource sets UnderlyingSettlRateFallbackRateSource, Tag 40904.
func (m NoUnderlyingSettlRateFallbacks) SetUnderlyingSettlRateFallbackRateSource(v int) {
	m.Set(field.NewUnderlyingSettlRateFallbackRateSource(v))
}

// SetUnderlyingSettlRateFallbackReferencePage sets UnderlyingSettlRateFallbackReferencePage, Tag 40915.
func (m NoUnderlyingSettlRateFallbacks) SetUnderlyingSettlRateFallbackReferencePage(v string) {
	m.Set(field.NewUnderlyingSettlRateFallbackReferencePage(v))
}

// SetUnderlyingSettlRatePostponementSurvey sets UnderlyingSettlRatePostponementSurvey, Tag 40662.
func (m NoUnderlyingSettlRateFallbacks) SetUnderlyingSettlRatePostponementSurvey(v bool) {
	m.Set(field.NewUnderlyingSettlRatePostponementSurvey(v))
}

// SetUnderlyingSettlRatePostponementCalculationAgent sets UnderlyingSettlRatePostponementCalculationAgent, Tag 40663.
func (m NoUnderlyingSettlRateFallbacks) SetUnderlyingSettlRatePostponementCalculationAgent(v int) {
	m.Set(field.NewUnderlyingSettlRatePostponementCalculationAgent(v))
}

// GetUnderlyingSettlRatePostponementMaximumDays gets UnderlyingSettlRatePostponementMaximumDays, Tag 40660.
func (m NoUnderlyingSettlRateFallbacks) GetUnderlyingSettlRatePostponementMaximumDays() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingSettlRatePostponementMaximumDaysField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingSettlRateFallbackRateSource gets UnderlyingSettlRateFallbackRateSource, Tag 40904.
func (m NoUnderlyingSettlRateFallbacks) GetUnderlyingSettlRateFallbackRateSource() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingSettlRateFallbackRateSourceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingSettlRateFallbackReferencePage gets UnderlyingSettlRateFallbackReferencePage, Tag 40915.
func (m NoUnderlyingSettlRateFallbacks) GetUnderlyingSettlRateFallbackReferencePage() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingSettlRateFallbackReferencePageField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingSettlRatePostponementSurvey gets UnderlyingSettlRatePostponementSurvey, Tag 40662.
func (m NoUnderlyingSettlRateFallbacks) GetUnderlyingSettlRatePostponementSurvey() (v bool, err quickfix.MessageRejectError) {
	var f field.UnderlyingSettlRatePostponementSurveyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingSettlRatePostponementCalculationAgent gets UnderlyingSettlRatePostponementCalculationAgent, Tag 40663.
func (m NoUnderlyingSettlRateFallbacks) GetUnderlyingSettlRatePostponementCalculationAgent() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingSettlRatePostponementCalculationAgentField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingSettlRatePostponementMaximumDays returns true if UnderlyingSettlRatePostponementMaximumDays is present, Tag 40660.
func (m NoUnderlyingSettlRateFallbacks) HasUnderlyingSettlRatePostponementMaximumDays() bool {
	return m.Has(tag.UnderlyingSettlRatePostponementMaximumDays)
}

// HasUnderlyingSettlRateFallbackRateSource returns true if UnderlyingSettlRateFallbackRateSource is present, Tag 40904.
func (m NoUnderlyingSettlRateFallbacks) HasUnderlyingSettlRateFallbackRateSource() bool {
	return m.Has(tag.UnderlyingSettlRateFallbackRateSource)
}

// HasUnderlyingSettlRateFallbackReferencePage returns true if UnderlyingSettlRateFallbackReferencePage is present, Tag 40915.
func (m NoUnderlyingSettlRateFallbacks) HasUnderlyingSettlRateFallbackReferencePage() bool {
	return m.Has(tag.UnderlyingSettlRateFallbackReferencePage)
}

// HasUnderlyingSettlRatePostponementSurvey returns true if UnderlyingSettlRatePostponementSurvey is present, Tag 40662.
func (m NoUnderlyingSettlRateFallbacks) HasUnderlyingSettlRatePostponementSurvey() bool {
	return m.Has(tag.UnderlyingSettlRatePostponementSurvey)
}

// HasUnderlyingSettlRatePostponementCalculationAgent returns true if UnderlyingSettlRatePostponementCalculationAgent is present, Tag 40663.
func (m NoUnderlyingSettlRateFallbacks) HasUnderlyingSettlRatePostponementCalculationAgent() bool {
	return m.Has(tag.UnderlyingSettlRatePostponementCalculationAgent)
}

// NoUnderlyingSettlRateFallbacksRepeatingGroup is a repeating group, Tag 40659.
type NoUnderlyingSettlRateFallbacksRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingSettlRateFallbacksRepeatingGroup returns an initialized, NoUnderlyingSettlRateFallbacksRepeatingGroup.
func NewNoUnderlyingSettlRateFallbacksRepeatingGroup() NoUnderlyingSettlRateFallbacksRepeatingGroup {
	return NoUnderlyingSettlRateFallbacksRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingSettlRateFallbacks,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingSettlRatePostponementMaximumDays),
				quickfix.GroupElement(tag.UnderlyingSettlRateFallbackRateSource),
				quickfix.GroupElement(tag.UnderlyingSettlRateFallbackReferencePage),
				quickfix.GroupElement(tag.UnderlyingSettlRatePostponementSurvey),
				quickfix.GroupElement(tag.UnderlyingSettlRatePostponementCalculationAgent),
			},
		),
	}
}

// Add create and append a new NoUnderlyingSettlRateFallbacks to this group.
func (m NoUnderlyingSettlRateFallbacksRepeatingGroup) Add() NoUnderlyingSettlRateFallbacks {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingSettlRateFallbacks{g}
}

// Get returns the ith NoUnderlyingSettlRateFallbacks in the NoUnderlyingSettlRateFallbacksRepeatinGroup.
func (m NoUnderlyingSettlRateFallbacksRepeatingGroup) Get(i int) NoUnderlyingSettlRateFallbacks {
	return NoUnderlyingSettlRateFallbacks{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingPaymentStreamCompoundingDatesBusinessCenters is a repeating group element, Tag 42915.
type NoUnderlyingPaymentStreamCompoundingDatesBusinessCenters struct {
	*quickfix.Group
}

// SetUnderlyingPaymentStreamCompoundingDatesBusinessCenter sets UnderlyingPaymentStreamCompoundingDatesBusinessCenter, Tag 42916.
func (m NoUnderlyingPaymentStreamCompoundingDatesBusinessCenters) SetUnderlyingPaymentStreamCompoundingDatesBusinessCenter(v string) {
	m.Set(field.NewUnderlyingPaymentStreamCompoundingDatesBusinessCenter(v))
}

// GetUnderlyingPaymentStreamCompoundingDatesBusinessCenter gets UnderlyingPaymentStreamCompoundingDatesBusinessCenter, Tag 42916.
func (m NoUnderlyingPaymentStreamCompoundingDatesBusinessCenters) GetUnderlyingPaymentStreamCompoundingDatesBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamCompoundingDatesBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingPaymentStreamCompoundingDatesBusinessCenter returns true if UnderlyingPaymentStreamCompoundingDatesBusinessCenter is present, Tag 42916.
func (m NoUnderlyingPaymentStreamCompoundingDatesBusinessCenters) HasUnderlyingPaymentStreamCompoundingDatesBusinessCenter() bool {
	return m.Has(tag.UnderlyingPaymentStreamCompoundingDatesBusinessCenter)
}

// NoUnderlyingPaymentStreamCompoundingDatesBusinessCentersRepeatingGroup is a repeating group, Tag 42915.
type NoUnderlyingPaymentStreamCompoundingDatesBusinessCentersRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingPaymentStreamCompoundingDatesBusinessCentersRepeatingGroup returns an initialized, NoUnderlyingPaymentStreamCompoundingDatesBusinessCentersRepeatingGroup.
func NewNoUnderlyingPaymentStreamCompoundingDatesBusinessCentersRepeatingGroup() NoUnderlyingPaymentStreamCompoundingDatesBusinessCentersRepeatingGroup {
	return NoUnderlyingPaymentStreamCompoundingDatesBusinessCentersRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingPaymentStreamCompoundingDatesBusinessCenters,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingPaymentStreamCompoundingDatesBusinessCenter),
			},
		),
	}
}

// Add create and append a new NoUnderlyingPaymentStreamCompoundingDatesBusinessCenters to this group.
func (m NoUnderlyingPaymentStreamCompoundingDatesBusinessCentersRepeatingGroup) Add() NoUnderlyingPaymentStreamCompoundingDatesBusinessCenters {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingPaymentStreamCompoundingDatesBusinessCenters{g}
}

// Get returns the ith NoUnderlyingPaymentStreamCompoundingDatesBusinessCenters in the NoUnderlyingPaymentStreamCompoundingDatesBusinessCentersRepeatinGroup.
func (m NoUnderlyingPaymentStreamCompoundingDatesBusinessCentersRepeatingGroup) Get(i int) NoUnderlyingPaymentStreamCompoundingDatesBusinessCenters {
	return NoUnderlyingPaymentStreamCompoundingDatesBusinessCenters{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingPaymentStreamCompoundingDates is a repeating group element, Tag 42901.
type NoUnderlyingPaymentStreamCompoundingDates struct {
	*quickfix.Group
}

// SetUnderlyingPaymentStreamCompoundingDate sets UnderlyingPaymentStreamCompoundingDate, Tag 42902.
func (m NoUnderlyingPaymentStreamCompoundingDates) SetUnderlyingPaymentStreamCompoundingDate(v string) {
	m.Set(field.NewUnderlyingPaymentStreamCompoundingDate(v))
}

// SetUnderlyingPaymentStreamCompoundingDateType sets UnderlyingPaymentStreamCompoundingDateType, Tag 42903.
func (m NoUnderlyingPaymentStreamCompoundingDates) SetUnderlyingPaymentStreamCompoundingDateType(v int) {
	m.Set(field.NewUnderlyingPaymentStreamCompoundingDateType(v))
}

// GetUnderlyingPaymentStreamCompoundingDate gets UnderlyingPaymentStreamCompoundingDate, Tag 42902.
func (m NoUnderlyingPaymentStreamCompoundingDates) GetUnderlyingPaymentStreamCompoundingDate() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamCompoundingDateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamCompoundingDateType gets UnderlyingPaymentStreamCompoundingDateType, Tag 42903.
func (m NoUnderlyingPaymentStreamCompoundingDates) GetUnderlyingPaymentStreamCompoundingDateType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamCompoundingDateTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingPaymentStreamCompoundingDate returns true if UnderlyingPaymentStreamCompoundingDate is present, Tag 42902.
func (m NoUnderlyingPaymentStreamCompoundingDates) HasUnderlyingPaymentStreamCompoundingDate() bool {
	return m.Has(tag.UnderlyingPaymentStreamCompoundingDate)
}

// HasUnderlyingPaymentStreamCompoundingDateType returns true if UnderlyingPaymentStreamCompoundingDateType is present, Tag 42903.
func (m NoUnderlyingPaymentStreamCompoundingDates) HasUnderlyingPaymentStreamCompoundingDateType() bool {
	return m.Has(tag.UnderlyingPaymentStreamCompoundingDateType)
}

// NoUnderlyingPaymentStreamCompoundingDatesRepeatingGroup is a repeating group, Tag 42901.
type NoUnderlyingPaymentStreamCompoundingDatesRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingPaymentStreamCompoundingDatesRepeatingGroup returns an initialized, NoUnderlyingPaymentStreamCompoundingDatesRepeatingGroup.
func NewNoUnderlyingPaymentStreamCompoundingDatesRepeatingGroup() NoUnderlyingPaymentStreamCompoundingDatesRepeatingGroup {
	return NoUnderlyingPaymentStreamCompoundingDatesRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingPaymentStreamCompoundingDates,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingPaymentStreamCompoundingDate),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamCompoundingDateType),
			},
		),
	}
}

// Add create and append a new NoUnderlyingPaymentStreamCompoundingDates to this group.
func (m NoUnderlyingPaymentStreamCompoundingDatesRepeatingGroup) Add() NoUnderlyingPaymentStreamCompoundingDates {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingPaymentStreamCompoundingDates{g}
}

// Get returns the ith NoUnderlyingPaymentStreamCompoundingDates in the NoUnderlyingPaymentStreamCompoundingDatesRepeatinGroup.
func (m NoUnderlyingPaymentStreamCompoundingDatesRepeatingGroup) Get(i int) NoUnderlyingPaymentStreamCompoundingDates {
	return NoUnderlyingPaymentStreamCompoundingDates{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingPaymentSchedules is a repeating group element, Tag 40664.
type NoUnderlyingPaymentSchedules struct {
	*quickfix.Group
}

// SetUnderlyingPaymentScheduleType sets UnderlyingPaymentScheduleType, Tag 40665.
func (m NoUnderlyingPaymentSchedules) SetUnderlyingPaymentScheduleType(v int) {
	m.Set(field.NewUnderlyingPaymentScheduleType(v))
}

// SetUnderlyingPaymentScheduleStubType sets UnderlyingPaymentScheduleStubType, Tag 40666.
func (m NoUnderlyingPaymentSchedules) SetUnderlyingPaymentScheduleStubType(v int) {
	m.Set(field.NewUnderlyingPaymentScheduleStubType(v))
}

// SetUnderlyingPaymentScheduleStartDateUnadjusted sets UnderlyingPaymentScheduleStartDateUnadjusted, Tag 40667.
func (m NoUnderlyingPaymentSchedules) SetUnderlyingPaymentScheduleStartDateUnadjusted(v string) {
	m.Set(field.NewUnderlyingPaymentScheduleStartDateUnadjusted(v))
}

// SetUnderlyingPaymentScheduleEndDateUnadjusted sets UnderlyingPaymentScheduleEndDateUnadjusted, Tag 40668.
func (m NoUnderlyingPaymentSchedules) SetUnderlyingPaymentScheduleEndDateUnadjusted(v string) {
	m.Set(field.NewUnderlyingPaymentScheduleEndDateUnadjusted(v))
}

// SetUnderlyingPaymentSchedulePaySide sets UnderlyingPaymentSchedulePaySide, Tag 40669.
func (m NoUnderlyingPaymentSchedules) SetUnderlyingPaymentSchedulePaySide(v int) {
	m.Set(field.NewUnderlyingPaymentSchedulePaySide(v))
}

// SetUnderlyingPaymentScheduleReceiveSide sets UnderlyingPaymentScheduleReceiveSide, Tag 40670.
func (m NoUnderlyingPaymentSchedules) SetUnderlyingPaymentScheduleReceiveSide(v int) {
	m.Set(field.NewUnderlyingPaymentScheduleReceiveSide(v))
}

// SetUnderlyingPaymentScheduleNotional sets UnderlyingPaymentScheduleNotional, Tag 40671.
func (m NoUnderlyingPaymentSchedules) SetUnderlyingPaymentScheduleNotional(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingPaymentScheduleNotional(value, scale))
}

// SetUnderlyingPaymentScheduleCurrency sets UnderlyingPaymentScheduleCurrency, Tag 40672.
func (m NoUnderlyingPaymentSchedules) SetUnderlyingPaymentScheduleCurrency(v string) {
	m.Set(field.NewUnderlyingPaymentScheduleCurrency(v))
}

// SetUnderlyingPaymentScheduleRate sets UnderlyingPaymentScheduleRate, Tag 40673.
func (m NoUnderlyingPaymentSchedules) SetUnderlyingPaymentScheduleRate(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingPaymentScheduleRate(value, scale))
}

// SetUnderlyingPaymentScheduleRateMultiplier sets UnderlyingPaymentScheduleRateMultiplier, Tag 40674.
func (m NoUnderlyingPaymentSchedules) SetUnderlyingPaymentScheduleRateMultiplier(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingPaymentScheduleRateMultiplier(value, scale))
}

// SetUnderlyingPaymentScheduleRateSpread sets UnderlyingPaymentScheduleRateSpread, Tag 40675.
func (m NoUnderlyingPaymentSchedules) SetUnderlyingPaymentScheduleRateSpread(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingPaymentScheduleRateSpread(value, scale))
}

// SetUnderlyingPaymentScheduleRateSpreadPositionType sets UnderlyingPaymentScheduleRateSpreadPositionType, Tag 40676.
func (m NoUnderlyingPaymentSchedules) SetUnderlyingPaymentScheduleRateSpreadPositionType(v int) {
	m.Set(field.NewUnderlyingPaymentScheduleRateSpreadPositionType(v))
}

// SetUnderlyingPaymentScheduleFixedAmount sets UnderlyingPaymentScheduleFixedAmount, Tag 40678.
func (m NoUnderlyingPaymentSchedules) SetUnderlyingPaymentScheduleFixedAmount(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingPaymentScheduleFixedAmount(value, scale))
}

// SetUnderlyingPaymentScheduleFixedCurrency sets UnderlyingPaymentScheduleFixedCurrency, Tag 40679.
func (m NoUnderlyingPaymentSchedules) SetUnderlyingPaymentScheduleFixedCurrency(v string) {
	m.Set(field.NewUnderlyingPaymentScheduleFixedCurrency(v))
}

// SetUnderlyingPaymentScheduleStepFrequencyPeriod sets UnderlyingPaymentScheduleStepFrequencyPeriod, Tag 40680.
func (m NoUnderlyingPaymentSchedules) SetUnderlyingPaymentScheduleStepFrequencyPeriod(v int) {
	m.Set(field.NewUnderlyingPaymentScheduleStepFrequencyPeriod(v))
}

// SetUnderlyingPaymentScheduleStepFrequencyUnit sets UnderlyingPaymentScheduleStepFrequencyUnit, Tag 40681.
func (m NoUnderlyingPaymentSchedules) SetUnderlyingPaymentScheduleStepFrequencyUnit(v string) {
	m.Set(field.NewUnderlyingPaymentScheduleStepFrequencyUnit(v))
}

// SetUnderlyingPaymentScheduleStepOffsetValue sets UnderlyingPaymentScheduleStepOffsetValue, Tag 40682.
func (m NoUnderlyingPaymentSchedules) SetUnderlyingPaymentScheduleStepOffsetValue(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingPaymentScheduleStepOffsetValue(value, scale))
}

// SetUnderlyingPaymentScheduleStepRate sets UnderlyingPaymentScheduleStepRate, Tag 40683.
func (m NoUnderlyingPaymentSchedules) SetUnderlyingPaymentScheduleStepRate(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingPaymentScheduleStepRate(value, scale))
}

// SetUnderlyingPaymentScheduleStepOffsetRate sets UnderlyingPaymentScheduleStepOffsetRate, Tag 40684.
func (m NoUnderlyingPaymentSchedules) SetUnderlyingPaymentScheduleStepOffsetRate(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingPaymentScheduleStepOffsetRate(value, scale))
}

// SetUnderlyingPaymentScheduleStepRelativeTo sets UnderlyingPaymentScheduleStepRelativeTo, Tag 40685.
func (m NoUnderlyingPaymentSchedules) SetUnderlyingPaymentScheduleStepRelativeTo(v int) {
	m.Set(field.NewUnderlyingPaymentScheduleStepRelativeTo(v))
}

// SetNoUnderlyingPaymentScheduleRateSources sets NoUnderlyingPaymentScheduleRateSources, Tag 40704.
func (m NoUnderlyingPaymentSchedules) SetNoUnderlyingPaymentScheduleRateSources(f NoUnderlyingPaymentScheduleRateSourcesRepeatingGroup) {
	m.SetGroup(f)
}

// SetUnderlyingPaymentScheduleFixingDateUnadjusted sets UnderlyingPaymentScheduleFixingDateUnadjusted, Tag 40686.
func (m NoUnderlyingPaymentSchedules) SetUnderlyingPaymentScheduleFixingDateUnadjusted(v string) {
	m.Set(field.NewUnderlyingPaymentScheduleFixingDateUnadjusted(v))
}

// SetUnderlyingPaymentScheduleWeight sets UnderlyingPaymentScheduleWeight, Tag 40687.
func (m NoUnderlyingPaymentSchedules) SetUnderlyingPaymentScheduleWeight(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingPaymentScheduleWeight(value, scale))
}

// SetUnderlyingPaymentScheduleFixingDateRelativeTo sets UnderlyingPaymentScheduleFixingDateRelativeTo, Tag 40688.
func (m NoUnderlyingPaymentSchedules) SetUnderlyingPaymentScheduleFixingDateRelativeTo(v int) {
	m.Set(field.NewUnderlyingPaymentScheduleFixingDateRelativeTo(v))
}

// SetUnderlyingPaymentScheduleFixingDateBusinessDayCnvtn sets UnderlyingPaymentScheduleFixingDateBusinessDayCnvtn, Tag 40689.
func (m NoUnderlyingPaymentSchedules) SetUnderlyingPaymentScheduleFixingDateBusinessDayCnvtn(v int) {
	m.Set(field.NewUnderlyingPaymentScheduleFixingDateBusinessDayCnvtn(v))
}

// SetNoUnderlyingPaymentScheduleFixingDateBusinessCenters sets NoUnderlyingPaymentScheduleFixingDateBusinessCenters, Tag 40966.
func (m NoUnderlyingPaymentSchedules) SetNoUnderlyingPaymentScheduleFixingDateBusinessCenters(f NoUnderlyingPaymentScheduleFixingDateBusinessCentersRepeatingGroup) {
	m.SetGroup(f)
}

// SetUnderlyingPaymentScheduleFixingDateOffsetPeriod sets UnderlyingPaymentScheduleFixingDateOffsetPeriod, Tag 40691.
func (m NoUnderlyingPaymentSchedules) SetUnderlyingPaymentScheduleFixingDateOffsetPeriod(v int) {
	m.Set(field.NewUnderlyingPaymentScheduleFixingDateOffsetPeriod(v))
}

// SetUnderlyingPaymentScheduleFixingDateOffsetUnit sets UnderlyingPaymentScheduleFixingDateOffsetUnit, Tag 40692.
func (m NoUnderlyingPaymentSchedules) SetUnderlyingPaymentScheduleFixingDateOffsetUnit(v string) {
	m.Set(field.NewUnderlyingPaymentScheduleFixingDateOffsetUnit(v))
}

// SetUnderlyingPaymentScheduleFixingDateOffsetDayType sets UnderlyingPaymentScheduleFixingDateOffsetDayType, Tag 40693.
func (m NoUnderlyingPaymentSchedules) SetUnderlyingPaymentScheduleFixingDateOffsetDayType(v int) {
	m.Set(field.NewUnderlyingPaymentScheduleFixingDateOffsetDayType(v))
}

// SetUnderlyingPaymentScheduleFixingDateAdjusted sets UnderlyingPaymentScheduleFixingDateAdjusted, Tag 40694.
func (m NoUnderlyingPaymentSchedules) SetUnderlyingPaymentScheduleFixingDateAdjusted(v string) {
	m.Set(field.NewUnderlyingPaymentScheduleFixingDateAdjusted(v))
}

// SetUnderlyingPaymentScheduleFixingTime sets UnderlyingPaymentScheduleFixingTime, Tag 40695.
func (m NoUnderlyingPaymentSchedules) SetUnderlyingPaymentScheduleFixingTime(v string) {
	m.Set(field.NewUnderlyingPaymentScheduleFixingTime(v))
}

// SetUnderlyingPaymentScheduleFixingTimeBusinessCenter sets UnderlyingPaymentScheduleFixingTimeBusinessCenter, Tag 40696.
func (m NoUnderlyingPaymentSchedules) SetUnderlyingPaymentScheduleFixingTimeBusinessCenter(v string) {
	m.Set(field.NewUnderlyingPaymentScheduleFixingTimeBusinessCenter(v))
}

// SetUnderlyingPaymentScheduleInterimExchangePaymentDateRelativeTo sets UnderlyingPaymentScheduleInterimExchangePaymentDateRelativeTo, Tag 40697.
func (m NoUnderlyingPaymentSchedules) SetUnderlyingPaymentScheduleInterimExchangePaymentDateRelativeTo(v int) {
	m.Set(field.NewUnderlyingPaymentScheduleInterimExchangePaymentDateRelativeTo(v))
}

// SetUnderlyingPaymentScheduleInterimExchangeDatesBusinessDayConvention sets UnderlyingPaymentScheduleInterimExchangeDatesBusinessDayConvention, Tag 40698.
func (m NoUnderlyingPaymentSchedules) SetUnderlyingPaymentScheduleInterimExchangeDatesBusinessDayConvention(v int) {
	m.Set(field.NewUnderlyingPaymentScheduleInterimExchangeDatesBusinessDayConvention(v))
}

// SetNoUnderlyingPaymentScheduleInterimExchangeDateBusinessCenters sets NoUnderlyingPaymentScheduleInterimExchangeDateBusinessCenters, Tag 40967.
func (m NoUnderlyingPaymentSchedules) SetNoUnderlyingPaymentScheduleInterimExchangeDateBusinessCenters(f NoUnderlyingPaymentScheduleInterimExchangeDateBusinessCentersRepeatingGroup) {
	m.SetGroup(f)
}

// SetUnderlyingPaymentScheduleInterimExchangeDatesOffsetPeriod sets UnderlyingPaymentScheduleInterimExchangeDatesOffsetPeriod, Tag 40700.
func (m NoUnderlyingPaymentSchedules) SetUnderlyingPaymentScheduleInterimExchangeDatesOffsetPeriod(v int) {
	m.Set(field.NewUnderlyingPaymentScheduleInterimExchangeDatesOffsetPeriod(v))
}

// SetUnderlyingPaymentScheduleInterimExchangeDatesOffsetUnit sets UnderlyingPaymentScheduleInterimExchangeDatesOffsetUnit, Tag 40701.
func (m NoUnderlyingPaymentSchedules) SetUnderlyingPaymentScheduleInterimExchangeDatesOffsetUnit(v string) {
	m.Set(field.NewUnderlyingPaymentScheduleInterimExchangeDatesOffsetUnit(v))
}

// SetUnderlyingPaymentScheduleInterimExchangeDatesOffsetDayType sets UnderlyingPaymentScheduleInterimExchangeDatesOffsetDayType, Tag 40702.
func (m NoUnderlyingPaymentSchedules) SetUnderlyingPaymentScheduleInterimExchangeDatesOffsetDayType(v int) {
	m.Set(field.NewUnderlyingPaymentScheduleInterimExchangeDatesOffsetDayType(v))
}

// SetUnderlyingPaymentScheduleInterimExchangeDateAdjusted sets UnderlyingPaymentScheduleInterimExchangeDateAdjusted, Tag 40703.
func (m NoUnderlyingPaymentSchedules) SetUnderlyingPaymentScheduleInterimExchangeDateAdjusted(v string) {
	m.Set(field.NewUnderlyingPaymentScheduleInterimExchangeDateAdjusted(v))
}

// SetUnderlyingPaymentScheduleXID sets UnderlyingPaymentScheduleXID, Tag 41881.
func (m NoUnderlyingPaymentSchedules) SetUnderlyingPaymentScheduleXID(v string) {
	m.Set(field.NewUnderlyingPaymentScheduleXID(v))
}

// SetUnderlyingPaymentScheduleXIDRef sets UnderlyingPaymentScheduleXIDRef, Tag 41882.
func (m NoUnderlyingPaymentSchedules) SetUnderlyingPaymentScheduleXIDRef(v string) {
	m.Set(field.NewUnderlyingPaymentScheduleXIDRef(v))
}

// SetUnderlyingPaymentScheduleRateCurrency sets UnderlyingPaymentScheduleRateCurrency, Tag 41883.
func (m NoUnderlyingPaymentSchedules) SetUnderlyingPaymentScheduleRateCurrency(v string) {
	m.Set(field.NewUnderlyingPaymentScheduleRateCurrency(v))
}

// SetUnderlyingPaymentScheduleRateUnitOfMeasure sets UnderlyingPaymentScheduleRateUnitOfMeasure, Tag 41884.
func (m NoUnderlyingPaymentSchedules) SetUnderlyingPaymentScheduleRateUnitOfMeasure(v string) {
	m.Set(field.NewUnderlyingPaymentScheduleRateUnitOfMeasure(v))
}

// SetUnderlyingPaymentScheduleRateConversionFactor sets UnderlyingPaymentScheduleRateConversionFactor, Tag 41885.
func (m NoUnderlyingPaymentSchedules) SetUnderlyingPaymentScheduleRateConversionFactor(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingPaymentScheduleRateConversionFactor(value, scale))
}

// SetUnderlyingPaymentScheduleRateSpreadType sets UnderlyingPaymentScheduleRateSpreadType, Tag 41886.
func (m NoUnderlyingPaymentSchedules) SetUnderlyingPaymentScheduleRateSpreadType(v int) {
	m.Set(field.NewUnderlyingPaymentScheduleRateSpreadType(v))
}

// SetUnderlyingPaymentScheduleSettlPeriodPrice sets UnderlyingPaymentScheduleSettlPeriodPrice, Tag 41887.
func (m NoUnderlyingPaymentSchedules) SetUnderlyingPaymentScheduleSettlPeriodPrice(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingPaymentScheduleSettlPeriodPrice(value, scale))
}

// SetUnderlyingPaymentScheduleSettlPeriodPriceCurrency sets UnderlyingPaymentScheduleSettlPeriodPriceCurrency, Tag 41888.
func (m NoUnderlyingPaymentSchedules) SetUnderlyingPaymentScheduleSettlPeriodPriceCurrency(v string) {
	m.Set(field.NewUnderlyingPaymentScheduleSettlPeriodPriceCurrency(v))
}

// SetUnderlyingPaymentScheduleSettlPeriodPriceUnitOfMeasure sets UnderlyingPaymentScheduleSettlPeriodPriceUnitOfMeasure, Tag 41889.
func (m NoUnderlyingPaymentSchedules) SetUnderlyingPaymentScheduleSettlPeriodPriceUnitOfMeasure(v string) {
	m.Set(field.NewUnderlyingPaymentScheduleSettlPeriodPriceUnitOfMeasure(v))
}

// SetUnderlyingPaymentScheduleStepUnitOfMeasure sets UnderlyingPaymentScheduleStepUnitOfMeasure, Tag 41890.
func (m NoUnderlyingPaymentSchedules) SetUnderlyingPaymentScheduleStepUnitOfMeasure(v string) {
	m.Set(field.NewUnderlyingPaymentScheduleStepUnitOfMeasure(v))
}

// SetUnderlyingPaymentScheduleFixingDayDistribution sets UnderlyingPaymentScheduleFixingDayDistribution, Tag 41891.
func (m NoUnderlyingPaymentSchedules) SetUnderlyingPaymentScheduleFixingDayDistribution(v int) {
	m.Set(field.NewUnderlyingPaymentScheduleFixingDayDistribution(v))
}

// SetUnderlyingPaymentScheduleFixingDayCount sets UnderlyingPaymentScheduleFixingDayCount, Tag 41892.
func (m NoUnderlyingPaymentSchedules) SetUnderlyingPaymentScheduleFixingDayCount(v int) {
	m.Set(field.NewUnderlyingPaymentScheduleFixingDayCount(v))
}

// SetNoUnderlyingPaymentScheduleFixingDays sets NoUnderlyingPaymentScheduleFixingDays, Tag 41878.
func (m NoUnderlyingPaymentSchedules) SetNoUnderlyingPaymentScheduleFixingDays(f NoUnderlyingPaymentScheduleFixingDaysRepeatingGroup) {
	m.SetGroup(f)
}

// SetUnderlyingPaymentScheduleFixingLagPeriod sets UnderlyingPaymentScheduleFixingLagPeriod, Tag 41893.
func (m NoUnderlyingPaymentSchedules) SetUnderlyingPaymentScheduleFixingLagPeriod(v int) {
	m.Set(field.NewUnderlyingPaymentScheduleFixingLagPeriod(v))
}

// SetUnderlyingPaymentScheduleFixingLagUnit sets UnderlyingPaymentScheduleFixingLagUnit, Tag 41894.
func (m NoUnderlyingPaymentSchedules) SetUnderlyingPaymentScheduleFixingLagUnit(v string) {
	m.Set(field.NewUnderlyingPaymentScheduleFixingLagUnit(v))
}

// SetUnderlyingPaymentScheduleFixingFirstObservationDateOffsetPeriod sets UnderlyingPaymentScheduleFixingFirstObservationDateOffsetPeriod, Tag 41895.
func (m NoUnderlyingPaymentSchedules) SetUnderlyingPaymentScheduleFixingFirstObservationDateOffsetPeriod(v int) {
	m.Set(field.NewUnderlyingPaymentScheduleFixingFirstObservationDateOffsetPeriod(v))
}

// SetUnderlyingPaymentScheduleFixingFirstObservationDateOffsetUnit sets UnderlyingPaymentScheduleFixingFirstObservationDateOffsetUnit, Tag 41896.
func (m NoUnderlyingPaymentSchedules) SetUnderlyingPaymentScheduleFixingFirstObservationDateOffsetUnit(v string) {
	m.Set(field.NewUnderlyingPaymentScheduleFixingFirstObservationDateOffsetUnit(v))
}

// SetUnderlyingPaymentScheduleRateTreatment sets UnderlyingPaymentScheduleRateTreatment, Tag 40677.
func (m NoUnderlyingPaymentSchedules) SetUnderlyingPaymentScheduleRateTreatment(v int) {
	m.Set(field.NewUnderlyingPaymentScheduleRateTreatment(v))
}

// GetUnderlyingPaymentScheduleType gets UnderlyingPaymentScheduleType, Tag 40665.
func (m NoUnderlyingPaymentSchedules) GetUnderlyingPaymentScheduleType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentScheduleTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentScheduleStubType gets UnderlyingPaymentScheduleStubType, Tag 40666.
func (m NoUnderlyingPaymentSchedules) GetUnderlyingPaymentScheduleStubType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentScheduleStubTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentScheduleStartDateUnadjusted gets UnderlyingPaymentScheduleStartDateUnadjusted, Tag 40667.
func (m NoUnderlyingPaymentSchedules) GetUnderlyingPaymentScheduleStartDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentScheduleStartDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentScheduleEndDateUnadjusted gets UnderlyingPaymentScheduleEndDateUnadjusted, Tag 40668.
func (m NoUnderlyingPaymentSchedules) GetUnderlyingPaymentScheduleEndDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentScheduleEndDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentSchedulePaySide gets UnderlyingPaymentSchedulePaySide, Tag 40669.
func (m NoUnderlyingPaymentSchedules) GetUnderlyingPaymentSchedulePaySide() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentSchedulePaySideField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentScheduleReceiveSide gets UnderlyingPaymentScheduleReceiveSide, Tag 40670.
func (m NoUnderlyingPaymentSchedules) GetUnderlyingPaymentScheduleReceiveSide() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentScheduleReceiveSideField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentScheduleNotional gets UnderlyingPaymentScheduleNotional, Tag 40671.
func (m NoUnderlyingPaymentSchedules) GetUnderlyingPaymentScheduleNotional() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentScheduleNotionalField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentScheduleCurrency gets UnderlyingPaymentScheduleCurrency, Tag 40672.
func (m NoUnderlyingPaymentSchedules) GetUnderlyingPaymentScheduleCurrency() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentScheduleCurrencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentScheduleRate gets UnderlyingPaymentScheduleRate, Tag 40673.
func (m NoUnderlyingPaymentSchedules) GetUnderlyingPaymentScheduleRate() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentScheduleRateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentScheduleRateMultiplier gets UnderlyingPaymentScheduleRateMultiplier, Tag 40674.
func (m NoUnderlyingPaymentSchedules) GetUnderlyingPaymentScheduleRateMultiplier() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentScheduleRateMultiplierField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentScheduleRateSpread gets UnderlyingPaymentScheduleRateSpread, Tag 40675.
func (m NoUnderlyingPaymentSchedules) GetUnderlyingPaymentScheduleRateSpread() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentScheduleRateSpreadField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentScheduleRateSpreadPositionType gets UnderlyingPaymentScheduleRateSpreadPositionType, Tag 40676.
func (m NoUnderlyingPaymentSchedules) GetUnderlyingPaymentScheduleRateSpreadPositionType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentScheduleRateSpreadPositionTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentScheduleFixedAmount gets UnderlyingPaymentScheduleFixedAmount, Tag 40678.
func (m NoUnderlyingPaymentSchedules) GetUnderlyingPaymentScheduleFixedAmount() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentScheduleFixedAmountField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentScheduleFixedCurrency gets UnderlyingPaymentScheduleFixedCurrency, Tag 40679.
func (m NoUnderlyingPaymentSchedules) GetUnderlyingPaymentScheduleFixedCurrency() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentScheduleFixedCurrencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentScheduleStepFrequencyPeriod gets UnderlyingPaymentScheduleStepFrequencyPeriod, Tag 40680.
func (m NoUnderlyingPaymentSchedules) GetUnderlyingPaymentScheduleStepFrequencyPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentScheduleStepFrequencyPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentScheduleStepFrequencyUnit gets UnderlyingPaymentScheduleStepFrequencyUnit, Tag 40681.
func (m NoUnderlyingPaymentSchedules) GetUnderlyingPaymentScheduleStepFrequencyUnit() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentScheduleStepFrequencyUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentScheduleStepOffsetValue gets UnderlyingPaymentScheduleStepOffsetValue, Tag 40682.
func (m NoUnderlyingPaymentSchedules) GetUnderlyingPaymentScheduleStepOffsetValue() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentScheduleStepOffsetValueField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentScheduleStepRate gets UnderlyingPaymentScheduleStepRate, Tag 40683.
func (m NoUnderlyingPaymentSchedules) GetUnderlyingPaymentScheduleStepRate() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentScheduleStepRateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentScheduleStepOffsetRate gets UnderlyingPaymentScheduleStepOffsetRate, Tag 40684.
func (m NoUnderlyingPaymentSchedules) GetUnderlyingPaymentScheduleStepOffsetRate() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentScheduleStepOffsetRateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentScheduleStepRelativeTo gets UnderlyingPaymentScheduleStepRelativeTo, Tag 40685.
func (m NoUnderlyingPaymentSchedules) GetUnderlyingPaymentScheduleStepRelativeTo() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentScheduleStepRelativeToField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUnderlyingPaymentScheduleRateSources gets NoUnderlyingPaymentScheduleRateSources, Tag 40704.
func (m NoUnderlyingPaymentSchedules) GetNoUnderlyingPaymentScheduleRateSources() (NoUnderlyingPaymentScheduleRateSourcesRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingPaymentScheduleRateSourcesRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetUnderlyingPaymentScheduleFixingDateUnadjusted gets UnderlyingPaymentScheduleFixingDateUnadjusted, Tag 40686.
func (m NoUnderlyingPaymentSchedules) GetUnderlyingPaymentScheduleFixingDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentScheduleFixingDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentScheduleWeight gets UnderlyingPaymentScheduleWeight, Tag 40687.
func (m NoUnderlyingPaymentSchedules) GetUnderlyingPaymentScheduleWeight() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentScheduleWeightField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentScheduleFixingDateRelativeTo gets UnderlyingPaymentScheduleFixingDateRelativeTo, Tag 40688.
func (m NoUnderlyingPaymentSchedules) GetUnderlyingPaymentScheduleFixingDateRelativeTo() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentScheduleFixingDateRelativeToField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentScheduleFixingDateBusinessDayCnvtn gets UnderlyingPaymentScheduleFixingDateBusinessDayCnvtn, Tag 40689.
func (m NoUnderlyingPaymentSchedules) GetUnderlyingPaymentScheduleFixingDateBusinessDayCnvtn() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentScheduleFixingDateBusinessDayCnvtnField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUnderlyingPaymentScheduleFixingDateBusinessCenters gets NoUnderlyingPaymentScheduleFixingDateBusinessCenters, Tag 40966.
func (m NoUnderlyingPaymentSchedules) GetNoUnderlyingPaymentScheduleFixingDateBusinessCenters() (NoUnderlyingPaymentScheduleFixingDateBusinessCentersRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingPaymentScheduleFixingDateBusinessCentersRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetUnderlyingPaymentScheduleFixingDateOffsetPeriod gets UnderlyingPaymentScheduleFixingDateOffsetPeriod, Tag 40691.
func (m NoUnderlyingPaymentSchedules) GetUnderlyingPaymentScheduleFixingDateOffsetPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentScheduleFixingDateOffsetPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentScheduleFixingDateOffsetUnit gets UnderlyingPaymentScheduleFixingDateOffsetUnit, Tag 40692.
func (m NoUnderlyingPaymentSchedules) GetUnderlyingPaymentScheduleFixingDateOffsetUnit() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentScheduleFixingDateOffsetUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentScheduleFixingDateOffsetDayType gets UnderlyingPaymentScheduleFixingDateOffsetDayType, Tag 40693.
func (m NoUnderlyingPaymentSchedules) GetUnderlyingPaymentScheduleFixingDateOffsetDayType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentScheduleFixingDateOffsetDayTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentScheduleFixingDateAdjusted gets UnderlyingPaymentScheduleFixingDateAdjusted, Tag 40694.
func (m NoUnderlyingPaymentSchedules) GetUnderlyingPaymentScheduleFixingDateAdjusted() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentScheduleFixingDateAdjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentScheduleFixingTime gets UnderlyingPaymentScheduleFixingTime, Tag 40695.
func (m NoUnderlyingPaymentSchedules) GetUnderlyingPaymentScheduleFixingTime() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentScheduleFixingTimeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentScheduleFixingTimeBusinessCenter gets UnderlyingPaymentScheduleFixingTimeBusinessCenter, Tag 40696.
func (m NoUnderlyingPaymentSchedules) GetUnderlyingPaymentScheduleFixingTimeBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentScheduleFixingTimeBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentScheduleInterimExchangePaymentDateRelativeTo gets UnderlyingPaymentScheduleInterimExchangePaymentDateRelativeTo, Tag 40697.
func (m NoUnderlyingPaymentSchedules) GetUnderlyingPaymentScheduleInterimExchangePaymentDateRelativeTo() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentScheduleInterimExchangePaymentDateRelativeToField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentScheduleInterimExchangeDatesBusinessDayConvention gets UnderlyingPaymentScheduleInterimExchangeDatesBusinessDayConvention, Tag 40698.
func (m NoUnderlyingPaymentSchedules) GetUnderlyingPaymentScheduleInterimExchangeDatesBusinessDayConvention() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentScheduleInterimExchangeDatesBusinessDayConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUnderlyingPaymentScheduleInterimExchangeDateBusinessCenters gets NoUnderlyingPaymentScheduleInterimExchangeDateBusinessCenters, Tag 40967.
func (m NoUnderlyingPaymentSchedules) GetNoUnderlyingPaymentScheduleInterimExchangeDateBusinessCenters() (NoUnderlyingPaymentScheduleInterimExchangeDateBusinessCentersRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingPaymentScheduleInterimExchangeDateBusinessCentersRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetUnderlyingPaymentScheduleInterimExchangeDatesOffsetPeriod gets UnderlyingPaymentScheduleInterimExchangeDatesOffsetPeriod, Tag 40700.
func (m NoUnderlyingPaymentSchedules) GetUnderlyingPaymentScheduleInterimExchangeDatesOffsetPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentScheduleInterimExchangeDatesOffsetPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentScheduleInterimExchangeDatesOffsetUnit gets UnderlyingPaymentScheduleInterimExchangeDatesOffsetUnit, Tag 40701.
func (m NoUnderlyingPaymentSchedules) GetUnderlyingPaymentScheduleInterimExchangeDatesOffsetUnit() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentScheduleInterimExchangeDatesOffsetUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentScheduleInterimExchangeDatesOffsetDayType gets UnderlyingPaymentScheduleInterimExchangeDatesOffsetDayType, Tag 40702.
func (m NoUnderlyingPaymentSchedules) GetUnderlyingPaymentScheduleInterimExchangeDatesOffsetDayType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentScheduleInterimExchangeDatesOffsetDayTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentScheduleInterimExchangeDateAdjusted gets UnderlyingPaymentScheduleInterimExchangeDateAdjusted, Tag 40703.
func (m NoUnderlyingPaymentSchedules) GetUnderlyingPaymentScheduleInterimExchangeDateAdjusted() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentScheduleInterimExchangeDateAdjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentScheduleXID gets UnderlyingPaymentScheduleXID, Tag 41881.
func (m NoUnderlyingPaymentSchedules) GetUnderlyingPaymentScheduleXID() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentScheduleXIDField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentScheduleXIDRef gets UnderlyingPaymentScheduleXIDRef, Tag 41882.
func (m NoUnderlyingPaymentSchedules) GetUnderlyingPaymentScheduleXIDRef() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentScheduleXIDRefField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentScheduleRateCurrency gets UnderlyingPaymentScheduleRateCurrency, Tag 41883.
func (m NoUnderlyingPaymentSchedules) GetUnderlyingPaymentScheduleRateCurrency() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentScheduleRateCurrencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentScheduleRateUnitOfMeasure gets UnderlyingPaymentScheduleRateUnitOfMeasure, Tag 41884.
func (m NoUnderlyingPaymentSchedules) GetUnderlyingPaymentScheduleRateUnitOfMeasure() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentScheduleRateUnitOfMeasureField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentScheduleRateConversionFactor gets UnderlyingPaymentScheduleRateConversionFactor, Tag 41885.
func (m NoUnderlyingPaymentSchedules) GetUnderlyingPaymentScheduleRateConversionFactor() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentScheduleRateConversionFactorField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentScheduleRateSpreadType gets UnderlyingPaymentScheduleRateSpreadType, Tag 41886.
func (m NoUnderlyingPaymentSchedules) GetUnderlyingPaymentScheduleRateSpreadType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentScheduleRateSpreadTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentScheduleSettlPeriodPrice gets UnderlyingPaymentScheduleSettlPeriodPrice, Tag 41887.
func (m NoUnderlyingPaymentSchedules) GetUnderlyingPaymentScheduleSettlPeriodPrice() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentScheduleSettlPeriodPriceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentScheduleSettlPeriodPriceCurrency gets UnderlyingPaymentScheduleSettlPeriodPriceCurrency, Tag 41888.
func (m NoUnderlyingPaymentSchedules) GetUnderlyingPaymentScheduleSettlPeriodPriceCurrency() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentScheduleSettlPeriodPriceCurrencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentScheduleSettlPeriodPriceUnitOfMeasure gets UnderlyingPaymentScheduleSettlPeriodPriceUnitOfMeasure, Tag 41889.
func (m NoUnderlyingPaymentSchedules) GetUnderlyingPaymentScheduleSettlPeriodPriceUnitOfMeasure() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentScheduleSettlPeriodPriceUnitOfMeasureField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentScheduleStepUnitOfMeasure gets UnderlyingPaymentScheduleStepUnitOfMeasure, Tag 41890.
func (m NoUnderlyingPaymentSchedules) GetUnderlyingPaymentScheduleStepUnitOfMeasure() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentScheduleStepUnitOfMeasureField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentScheduleFixingDayDistribution gets UnderlyingPaymentScheduleFixingDayDistribution, Tag 41891.
func (m NoUnderlyingPaymentSchedules) GetUnderlyingPaymentScheduleFixingDayDistribution() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentScheduleFixingDayDistributionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentScheduleFixingDayCount gets UnderlyingPaymentScheduleFixingDayCount, Tag 41892.
func (m NoUnderlyingPaymentSchedules) GetUnderlyingPaymentScheduleFixingDayCount() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentScheduleFixingDayCountField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUnderlyingPaymentScheduleFixingDays gets NoUnderlyingPaymentScheduleFixingDays, Tag 41878.
func (m NoUnderlyingPaymentSchedules) GetNoUnderlyingPaymentScheduleFixingDays() (NoUnderlyingPaymentScheduleFixingDaysRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingPaymentScheduleFixingDaysRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetUnderlyingPaymentScheduleFixingLagPeriod gets UnderlyingPaymentScheduleFixingLagPeriod, Tag 41893.
func (m NoUnderlyingPaymentSchedules) GetUnderlyingPaymentScheduleFixingLagPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentScheduleFixingLagPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentScheduleFixingLagUnit gets UnderlyingPaymentScheduleFixingLagUnit, Tag 41894.
func (m NoUnderlyingPaymentSchedules) GetUnderlyingPaymentScheduleFixingLagUnit() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentScheduleFixingLagUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentScheduleFixingFirstObservationDateOffsetPeriod gets UnderlyingPaymentScheduleFixingFirstObservationDateOffsetPeriod, Tag 41895.
func (m NoUnderlyingPaymentSchedules) GetUnderlyingPaymentScheduleFixingFirstObservationDateOffsetPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentScheduleFixingFirstObservationDateOffsetPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentScheduleFixingFirstObservationDateOffsetUnit gets UnderlyingPaymentScheduleFixingFirstObservationDateOffsetUnit, Tag 41896.
func (m NoUnderlyingPaymentSchedules) GetUnderlyingPaymentScheduleFixingFirstObservationDateOffsetUnit() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentScheduleFixingFirstObservationDateOffsetUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentScheduleRateTreatment gets UnderlyingPaymentScheduleRateTreatment, Tag 40677.
func (m NoUnderlyingPaymentSchedules) GetUnderlyingPaymentScheduleRateTreatment() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentScheduleRateTreatmentField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingPaymentScheduleType returns true if UnderlyingPaymentScheduleType is present, Tag 40665.
func (m NoUnderlyingPaymentSchedules) HasUnderlyingPaymentScheduleType() bool {
	return m.Has(tag.UnderlyingPaymentScheduleType)
}

// HasUnderlyingPaymentScheduleStubType returns true if UnderlyingPaymentScheduleStubType is present, Tag 40666.
func (m NoUnderlyingPaymentSchedules) HasUnderlyingPaymentScheduleStubType() bool {
	return m.Has(tag.UnderlyingPaymentScheduleStubType)
}

// HasUnderlyingPaymentScheduleStartDateUnadjusted returns true if UnderlyingPaymentScheduleStartDateUnadjusted is present, Tag 40667.
func (m NoUnderlyingPaymentSchedules) HasUnderlyingPaymentScheduleStartDateUnadjusted() bool {
	return m.Has(tag.UnderlyingPaymentScheduleStartDateUnadjusted)
}

// HasUnderlyingPaymentScheduleEndDateUnadjusted returns true if UnderlyingPaymentScheduleEndDateUnadjusted is present, Tag 40668.
func (m NoUnderlyingPaymentSchedules) HasUnderlyingPaymentScheduleEndDateUnadjusted() bool {
	return m.Has(tag.UnderlyingPaymentScheduleEndDateUnadjusted)
}

// HasUnderlyingPaymentSchedulePaySide returns true if UnderlyingPaymentSchedulePaySide is present, Tag 40669.
func (m NoUnderlyingPaymentSchedules) HasUnderlyingPaymentSchedulePaySide() bool {
	return m.Has(tag.UnderlyingPaymentSchedulePaySide)
}

// HasUnderlyingPaymentScheduleReceiveSide returns true if UnderlyingPaymentScheduleReceiveSide is present, Tag 40670.
func (m NoUnderlyingPaymentSchedules) HasUnderlyingPaymentScheduleReceiveSide() bool {
	return m.Has(tag.UnderlyingPaymentScheduleReceiveSide)
}

// HasUnderlyingPaymentScheduleNotional returns true if UnderlyingPaymentScheduleNotional is present, Tag 40671.
func (m NoUnderlyingPaymentSchedules) HasUnderlyingPaymentScheduleNotional() bool {
	return m.Has(tag.UnderlyingPaymentScheduleNotional)
}

// HasUnderlyingPaymentScheduleCurrency returns true if UnderlyingPaymentScheduleCurrency is present, Tag 40672.
func (m NoUnderlyingPaymentSchedules) HasUnderlyingPaymentScheduleCurrency() bool {
	return m.Has(tag.UnderlyingPaymentScheduleCurrency)
}

// HasUnderlyingPaymentScheduleRate returns true if UnderlyingPaymentScheduleRate is present, Tag 40673.
func (m NoUnderlyingPaymentSchedules) HasUnderlyingPaymentScheduleRate() bool {
	return m.Has(tag.UnderlyingPaymentScheduleRate)
}

// HasUnderlyingPaymentScheduleRateMultiplier returns true if UnderlyingPaymentScheduleRateMultiplier is present, Tag 40674.
func (m NoUnderlyingPaymentSchedules) HasUnderlyingPaymentScheduleRateMultiplier() bool {
	return m.Has(tag.UnderlyingPaymentScheduleRateMultiplier)
}

// HasUnderlyingPaymentScheduleRateSpread returns true if UnderlyingPaymentScheduleRateSpread is present, Tag 40675.
func (m NoUnderlyingPaymentSchedules) HasUnderlyingPaymentScheduleRateSpread() bool {
	return m.Has(tag.UnderlyingPaymentScheduleRateSpread)
}

// HasUnderlyingPaymentScheduleRateSpreadPositionType returns true if UnderlyingPaymentScheduleRateSpreadPositionType is present, Tag 40676.
func (m NoUnderlyingPaymentSchedules) HasUnderlyingPaymentScheduleRateSpreadPositionType() bool {
	return m.Has(tag.UnderlyingPaymentScheduleRateSpreadPositionType)
}

// HasUnderlyingPaymentScheduleFixedAmount returns true if UnderlyingPaymentScheduleFixedAmount is present, Tag 40678.
func (m NoUnderlyingPaymentSchedules) HasUnderlyingPaymentScheduleFixedAmount() bool {
	return m.Has(tag.UnderlyingPaymentScheduleFixedAmount)
}

// HasUnderlyingPaymentScheduleFixedCurrency returns true if UnderlyingPaymentScheduleFixedCurrency is present, Tag 40679.
func (m NoUnderlyingPaymentSchedules) HasUnderlyingPaymentScheduleFixedCurrency() bool {
	return m.Has(tag.UnderlyingPaymentScheduleFixedCurrency)
}

// HasUnderlyingPaymentScheduleStepFrequencyPeriod returns true if UnderlyingPaymentScheduleStepFrequencyPeriod is present, Tag 40680.
func (m NoUnderlyingPaymentSchedules) HasUnderlyingPaymentScheduleStepFrequencyPeriod() bool {
	return m.Has(tag.UnderlyingPaymentScheduleStepFrequencyPeriod)
}

// HasUnderlyingPaymentScheduleStepFrequencyUnit returns true if UnderlyingPaymentScheduleStepFrequencyUnit is present, Tag 40681.
func (m NoUnderlyingPaymentSchedules) HasUnderlyingPaymentScheduleStepFrequencyUnit() bool {
	return m.Has(tag.UnderlyingPaymentScheduleStepFrequencyUnit)
}

// HasUnderlyingPaymentScheduleStepOffsetValue returns true if UnderlyingPaymentScheduleStepOffsetValue is present, Tag 40682.
func (m NoUnderlyingPaymentSchedules) HasUnderlyingPaymentScheduleStepOffsetValue() bool {
	return m.Has(tag.UnderlyingPaymentScheduleStepOffsetValue)
}

// HasUnderlyingPaymentScheduleStepRate returns true if UnderlyingPaymentScheduleStepRate is present, Tag 40683.
func (m NoUnderlyingPaymentSchedules) HasUnderlyingPaymentScheduleStepRate() bool {
	return m.Has(tag.UnderlyingPaymentScheduleStepRate)
}

// HasUnderlyingPaymentScheduleStepOffsetRate returns true if UnderlyingPaymentScheduleStepOffsetRate is present, Tag 40684.
func (m NoUnderlyingPaymentSchedules) HasUnderlyingPaymentScheduleStepOffsetRate() bool {
	return m.Has(tag.UnderlyingPaymentScheduleStepOffsetRate)
}

// HasUnderlyingPaymentScheduleStepRelativeTo returns true if UnderlyingPaymentScheduleStepRelativeTo is present, Tag 40685.
func (m NoUnderlyingPaymentSchedules) HasUnderlyingPaymentScheduleStepRelativeTo() bool {
	return m.Has(tag.UnderlyingPaymentScheduleStepRelativeTo)
}

// HasNoUnderlyingPaymentScheduleRateSources returns true if NoUnderlyingPaymentScheduleRateSources is present, Tag 40704.
func (m NoUnderlyingPaymentSchedules) HasNoUnderlyingPaymentScheduleRateSources() bool {
	return m.Has(tag.NoUnderlyingPaymentScheduleRateSources)
}

// HasUnderlyingPaymentScheduleFixingDateUnadjusted returns true if UnderlyingPaymentScheduleFixingDateUnadjusted is present, Tag 40686.
func (m NoUnderlyingPaymentSchedules) HasUnderlyingPaymentScheduleFixingDateUnadjusted() bool {
	return m.Has(tag.UnderlyingPaymentScheduleFixingDateUnadjusted)
}

// HasUnderlyingPaymentScheduleWeight returns true if UnderlyingPaymentScheduleWeight is present, Tag 40687.
func (m NoUnderlyingPaymentSchedules) HasUnderlyingPaymentScheduleWeight() bool {
	return m.Has(tag.UnderlyingPaymentScheduleWeight)
}

// HasUnderlyingPaymentScheduleFixingDateRelativeTo returns true if UnderlyingPaymentScheduleFixingDateRelativeTo is present, Tag 40688.
func (m NoUnderlyingPaymentSchedules) HasUnderlyingPaymentScheduleFixingDateRelativeTo() bool {
	return m.Has(tag.UnderlyingPaymentScheduleFixingDateRelativeTo)
}

// HasUnderlyingPaymentScheduleFixingDateBusinessDayCnvtn returns true if UnderlyingPaymentScheduleFixingDateBusinessDayCnvtn is present, Tag 40689.
func (m NoUnderlyingPaymentSchedules) HasUnderlyingPaymentScheduleFixingDateBusinessDayCnvtn() bool {
	return m.Has(tag.UnderlyingPaymentScheduleFixingDateBusinessDayCnvtn)
}

// HasNoUnderlyingPaymentScheduleFixingDateBusinessCenters returns true if NoUnderlyingPaymentScheduleFixingDateBusinessCenters is present, Tag 40966.
func (m NoUnderlyingPaymentSchedules) HasNoUnderlyingPaymentScheduleFixingDateBusinessCenters() bool {
	return m.Has(tag.NoUnderlyingPaymentScheduleFixingDateBusinessCenters)
}

// HasUnderlyingPaymentScheduleFixingDateOffsetPeriod returns true if UnderlyingPaymentScheduleFixingDateOffsetPeriod is present, Tag 40691.
func (m NoUnderlyingPaymentSchedules) HasUnderlyingPaymentScheduleFixingDateOffsetPeriod() bool {
	return m.Has(tag.UnderlyingPaymentScheduleFixingDateOffsetPeriod)
}

// HasUnderlyingPaymentScheduleFixingDateOffsetUnit returns true if UnderlyingPaymentScheduleFixingDateOffsetUnit is present, Tag 40692.
func (m NoUnderlyingPaymentSchedules) HasUnderlyingPaymentScheduleFixingDateOffsetUnit() bool {
	return m.Has(tag.UnderlyingPaymentScheduleFixingDateOffsetUnit)
}

// HasUnderlyingPaymentScheduleFixingDateOffsetDayType returns true if UnderlyingPaymentScheduleFixingDateOffsetDayType is present, Tag 40693.
func (m NoUnderlyingPaymentSchedules) HasUnderlyingPaymentScheduleFixingDateOffsetDayType() bool {
	return m.Has(tag.UnderlyingPaymentScheduleFixingDateOffsetDayType)
}

// HasUnderlyingPaymentScheduleFixingDateAdjusted returns true if UnderlyingPaymentScheduleFixingDateAdjusted is present, Tag 40694.
func (m NoUnderlyingPaymentSchedules) HasUnderlyingPaymentScheduleFixingDateAdjusted() bool {
	return m.Has(tag.UnderlyingPaymentScheduleFixingDateAdjusted)
}

// HasUnderlyingPaymentScheduleFixingTime returns true if UnderlyingPaymentScheduleFixingTime is present, Tag 40695.
func (m NoUnderlyingPaymentSchedules) HasUnderlyingPaymentScheduleFixingTime() bool {
	return m.Has(tag.UnderlyingPaymentScheduleFixingTime)
}

// HasUnderlyingPaymentScheduleFixingTimeBusinessCenter returns true if UnderlyingPaymentScheduleFixingTimeBusinessCenter is present, Tag 40696.
func (m NoUnderlyingPaymentSchedules) HasUnderlyingPaymentScheduleFixingTimeBusinessCenter() bool {
	return m.Has(tag.UnderlyingPaymentScheduleFixingTimeBusinessCenter)
}

// HasUnderlyingPaymentScheduleInterimExchangePaymentDateRelativeTo returns true if UnderlyingPaymentScheduleInterimExchangePaymentDateRelativeTo is present, Tag 40697.
func (m NoUnderlyingPaymentSchedules) HasUnderlyingPaymentScheduleInterimExchangePaymentDateRelativeTo() bool {
	return m.Has(tag.UnderlyingPaymentScheduleInterimExchangePaymentDateRelativeTo)
}

// HasUnderlyingPaymentScheduleInterimExchangeDatesBusinessDayConvention returns true if UnderlyingPaymentScheduleInterimExchangeDatesBusinessDayConvention is present, Tag 40698.
func (m NoUnderlyingPaymentSchedules) HasUnderlyingPaymentScheduleInterimExchangeDatesBusinessDayConvention() bool {
	return m.Has(tag.UnderlyingPaymentScheduleInterimExchangeDatesBusinessDayConvention)
}

// HasNoUnderlyingPaymentScheduleInterimExchangeDateBusinessCenters returns true if NoUnderlyingPaymentScheduleInterimExchangeDateBusinessCenters is present, Tag 40967.
func (m NoUnderlyingPaymentSchedules) HasNoUnderlyingPaymentScheduleInterimExchangeDateBusinessCenters() bool {
	return m.Has(tag.NoUnderlyingPaymentScheduleInterimExchangeDateBusinessCenters)
}

// HasUnderlyingPaymentScheduleInterimExchangeDatesOffsetPeriod returns true if UnderlyingPaymentScheduleInterimExchangeDatesOffsetPeriod is present, Tag 40700.
func (m NoUnderlyingPaymentSchedules) HasUnderlyingPaymentScheduleInterimExchangeDatesOffsetPeriod() bool {
	return m.Has(tag.UnderlyingPaymentScheduleInterimExchangeDatesOffsetPeriod)
}

// HasUnderlyingPaymentScheduleInterimExchangeDatesOffsetUnit returns true if UnderlyingPaymentScheduleInterimExchangeDatesOffsetUnit is present, Tag 40701.
func (m NoUnderlyingPaymentSchedules) HasUnderlyingPaymentScheduleInterimExchangeDatesOffsetUnit() bool {
	return m.Has(tag.UnderlyingPaymentScheduleInterimExchangeDatesOffsetUnit)
}

// HasUnderlyingPaymentScheduleInterimExchangeDatesOffsetDayType returns true if UnderlyingPaymentScheduleInterimExchangeDatesOffsetDayType is present, Tag 40702.
func (m NoUnderlyingPaymentSchedules) HasUnderlyingPaymentScheduleInterimExchangeDatesOffsetDayType() bool {
	return m.Has(tag.UnderlyingPaymentScheduleInterimExchangeDatesOffsetDayType)
}

// HasUnderlyingPaymentScheduleInterimExchangeDateAdjusted returns true if UnderlyingPaymentScheduleInterimExchangeDateAdjusted is present, Tag 40703.
func (m NoUnderlyingPaymentSchedules) HasUnderlyingPaymentScheduleInterimExchangeDateAdjusted() bool {
	return m.Has(tag.UnderlyingPaymentScheduleInterimExchangeDateAdjusted)
}

// HasUnderlyingPaymentScheduleXID returns true if UnderlyingPaymentScheduleXID is present, Tag 41881.
func (m NoUnderlyingPaymentSchedules) HasUnderlyingPaymentScheduleXID() bool {
	return m.Has(tag.UnderlyingPaymentScheduleXID)
}

// HasUnderlyingPaymentScheduleXIDRef returns true if UnderlyingPaymentScheduleXIDRef is present, Tag 41882.
func (m NoUnderlyingPaymentSchedules) HasUnderlyingPaymentScheduleXIDRef() bool {
	return m.Has(tag.UnderlyingPaymentScheduleXIDRef)
}

// HasUnderlyingPaymentScheduleRateCurrency returns true if UnderlyingPaymentScheduleRateCurrency is present, Tag 41883.
func (m NoUnderlyingPaymentSchedules) HasUnderlyingPaymentScheduleRateCurrency() bool {
	return m.Has(tag.UnderlyingPaymentScheduleRateCurrency)
}

// HasUnderlyingPaymentScheduleRateUnitOfMeasure returns true if UnderlyingPaymentScheduleRateUnitOfMeasure is present, Tag 41884.
func (m NoUnderlyingPaymentSchedules) HasUnderlyingPaymentScheduleRateUnitOfMeasure() bool {
	return m.Has(tag.UnderlyingPaymentScheduleRateUnitOfMeasure)
}

// HasUnderlyingPaymentScheduleRateConversionFactor returns true if UnderlyingPaymentScheduleRateConversionFactor is present, Tag 41885.
func (m NoUnderlyingPaymentSchedules) HasUnderlyingPaymentScheduleRateConversionFactor() bool {
	return m.Has(tag.UnderlyingPaymentScheduleRateConversionFactor)
}

// HasUnderlyingPaymentScheduleRateSpreadType returns true if UnderlyingPaymentScheduleRateSpreadType is present, Tag 41886.
func (m NoUnderlyingPaymentSchedules) HasUnderlyingPaymentScheduleRateSpreadType() bool {
	return m.Has(tag.UnderlyingPaymentScheduleRateSpreadType)
}

// HasUnderlyingPaymentScheduleSettlPeriodPrice returns true if UnderlyingPaymentScheduleSettlPeriodPrice is present, Tag 41887.
func (m NoUnderlyingPaymentSchedules) HasUnderlyingPaymentScheduleSettlPeriodPrice() bool {
	return m.Has(tag.UnderlyingPaymentScheduleSettlPeriodPrice)
}

// HasUnderlyingPaymentScheduleSettlPeriodPriceCurrency returns true if UnderlyingPaymentScheduleSettlPeriodPriceCurrency is present, Tag 41888.
func (m NoUnderlyingPaymentSchedules) HasUnderlyingPaymentScheduleSettlPeriodPriceCurrency() bool {
	return m.Has(tag.UnderlyingPaymentScheduleSettlPeriodPriceCurrency)
}

// HasUnderlyingPaymentScheduleSettlPeriodPriceUnitOfMeasure returns true if UnderlyingPaymentScheduleSettlPeriodPriceUnitOfMeasure is present, Tag 41889.
func (m NoUnderlyingPaymentSchedules) HasUnderlyingPaymentScheduleSettlPeriodPriceUnitOfMeasure() bool {
	return m.Has(tag.UnderlyingPaymentScheduleSettlPeriodPriceUnitOfMeasure)
}

// HasUnderlyingPaymentScheduleStepUnitOfMeasure returns true if UnderlyingPaymentScheduleStepUnitOfMeasure is present, Tag 41890.
func (m NoUnderlyingPaymentSchedules) HasUnderlyingPaymentScheduleStepUnitOfMeasure() bool {
	return m.Has(tag.UnderlyingPaymentScheduleStepUnitOfMeasure)
}

// HasUnderlyingPaymentScheduleFixingDayDistribution returns true if UnderlyingPaymentScheduleFixingDayDistribution is present, Tag 41891.
func (m NoUnderlyingPaymentSchedules) HasUnderlyingPaymentScheduleFixingDayDistribution() bool {
	return m.Has(tag.UnderlyingPaymentScheduleFixingDayDistribution)
}

// HasUnderlyingPaymentScheduleFixingDayCount returns true if UnderlyingPaymentScheduleFixingDayCount is present, Tag 41892.
func (m NoUnderlyingPaymentSchedules) HasUnderlyingPaymentScheduleFixingDayCount() bool {
	return m.Has(tag.UnderlyingPaymentScheduleFixingDayCount)
}

// HasNoUnderlyingPaymentScheduleFixingDays returns true if NoUnderlyingPaymentScheduleFixingDays is present, Tag 41878.
func (m NoUnderlyingPaymentSchedules) HasNoUnderlyingPaymentScheduleFixingDays() bool {
	return m.Has(tag.NoUnderlyingPaymentScheduleFixingDays)
}

// HasUnderlyingPaymentScheduleFixingLagPeriod returns true if UnderlyingPaymentScheduleFixingLagPeriod is present, Tag 41893.
func (m NoUnderlyingPaymentSchedules) HasUnderlyingPaymentScheduleFixingLagPeriod() bool {
	return m.Has(tag.UnderlyingPaymentScheduleFixingLagPeriod)
}

// HasUnderlyingPaymentScheduleFixingLagUnit returns true if UnderlyingPaymentScheduleFixingLagUnit is present, Tag 41894.
func (m NoUnderlyingPaymentSchedules) HasUnderlyingPaymentScheduleFixingLagUnit() bool {
	return m.Has(tag.UnderlyingPaymentScheduleFixingLagUnit)
}

// HasUnderlyingPaymentScheduleFixingFirstObservationDateOffsetPeriod returns true if UnderlyingPaymentScheduleFixingFirstObservationDateOffsetPeriod is present, Tag 41895.
func (m NoUnderlyingPaymentSchedules) HasUnderlyingPaymentScheduleFixingFirstObservationDateOffsetPeriod() bool {
	return m.Has(tag.UnderlyingPaymentScheduleFixingFirstObservationDateOffsetPeriod)
}

// HasUnderlyingPaymentScheduleFixingFirstObservationDateOffsetUnit returns true if UnderlyingPaymentScheduleFixingFirstObservationDateOffsetUnit is present, Tag 41896.
func (m NoUnderlyingPaymentSchedules) HasUnderlyingPaymentScheduleFixingFirstObservationDateOffsetUnit() bool {
	return m.Has(tag.UnderlyingPaymentScheduleFixingFirstObservationDateOffsetUnit)
}

// HasUnderlyingPaymentScheduleRateTreatment returns true if UnderlyingPaymentScheduleRateTreatment is present, Tag 40677.
func (m NoUnderlyingPaymentSchedules) HasUnderlyingPaymentScheduleRateTreatment() bool {
	return m.Has(tag.UnderlyingPaymentScheduleRateTreatment)
}

// NoUnderlyingPaymentScheduleRateSources is a repeating group element, Tag 40704.
type NoUnderlyingPaymentScheduleRateSources struct {
	*quickfix.Group
}

// SetUnderlyingPaymentScheduleRateSource sets UnderlyingPaymentScheduleRateSource, Tag 40705.
func (m NoUnderlyingPaymentScheduleRateSources) SetUnderlyingPaymentScheduleRateSource(v int) {
	m.Set(field.NewUnderlyingPaymentScheduleRateSource(v))
}

// SetUnderlyingPaymentScheduleRateSourceType sets UnderlyingPaymentScheduleRateSourceType, Tag 40706.
func (m NoUnderlyingPaymentScheduleRateSources) SetUnderlyingPaymentScheduleRateSourceType(v int) {
	m.Set(field.NewUnderlyingPaymentScheduleRateSourceType(v))
}

// SetUnderlyingPaymentScheduleReferencePage sets UnderlyingPaymentScheduleReferencePage, Tag 40707.
func (m NoUnderlyingPaymentScheduleRateSources) SetUnderlyingPaymentScheduleReferencePage(v string) {
	m.Set(field.NewUnderlyingPaymentScheduleReferencePage(v))
}

// GetUnderlyingPaymentScheduleRateSource gets UnderlyingPaymentScheduleRateSource, Tag 40705.
func (m NoUnderlyingPaymentScheduleRateSources) GetUnderlyingPaymentScheduleRateSource() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentScheduleRateSourceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentScheduleRateSourceType gets UnderlyingPaymentScheduleRateSourceType, Tag 40706.
func (m NoUnderlyingPaymentScheduleRateSources) GetUnderlyingPaymentScheduleRateSourceType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentScheduleRateSourceTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentScheduleReferencePage gets UnderlyingPaymentScheduleReferencePage, Tag 40707.
func (m NoUnderlyingPaymentScheduleRateSources) GetUnderlyingPaymentScheduleReferencePage() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentScheduleReferencePageField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingPaymentScheduleRateSource returns true if UnderlyingPaymentScheduleRateSource is present, Tag 40705.
func (m NoUnderlyingPaymentScheduleRateSources) HasUnderlyingPaymentScheduleRateSource() bool {
	return m.Has(tag.UnderlyingPaymentScheduleRateSource)
}

// HasUnderlyingPaymentScheduleRateSourceType returns true if UnderlyingPaymentScheduleRateSourceType is present, Tag 40706.
func (m NoUnderlyingPaymentScheduleRateSources) HasUnderlyingPaymentScheduleRateSourceType() bool {
	return m.Has(tag.UnderlyingPaymentScheduleRateSourceType)
}

// HasUnderlyingPaymentScheduleReferencePage returns true if UnderlyingPaymentScheduleReferencePage is present, Tag 40707.
func (m NoUnderlyingPaymentScheduleRateSources) HasUnderlyingPaymentScheduleReferencePage() bool {
	return m.Has(tag.UnderlyingPaymentScheduleReferencePage)
}

// NoUnderlyingPaymentScheduleRateSourcesRepeatingGroup is a repeating group, Tag 40704.
type NoUnderlyingPaymentScheduleRateSourcesRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingPaymentScheduleRateSourcesRepeatingGroup returns an initialized, NoUnderlyingPaymentScheduleRateSourcesRepeatingGroup.
func NewNoUnderlyingPaymentScheduleRateSourcesRepeatingGroup() NoUnderlyingPaymentScheduleRateSourcesRepeatingGroup {
	return NoUnderlyingPaymentScheduleRateSourcesRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingPaymentScheduleRateSources,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingPaymentScheduleRateSource),
				quickfix.GroupElement(tag.UnderlyingPaymentScheduleRateSourceType),
				quickfix.GroupElement(tag.UnderlyingPaymentScheduleReferencePage),
			},
		),
	}
}

// Add create and append a new NoUnderlyingPaymentScheduleRateSources to this group.
func (m NoUnderlyingPaymentScheduleRateSourcesRepeatingGroup) Add() NoUnderlyingPaymentScheduleRateSources {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingPaymentScheduleRateSources{g}
}

// Get returns the ith NoUnderlyingPaymentScheduleRateSources in the NoUnderlyingPaymentScheduleRateSourcesRepeatinGroup.
func (m NoUnderlyingPaymentScheduleRateSourcesRepeatingGroup) Get(i int) NoUnderlyingPaymentScheduleRateSources {
	return NoUnderlyingPaymentScheduleRateSources{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingPaymentScheduleFixingDateBusinessCenters is a repeating group element, Tag 40966.
type NoUnderlyingPaymentScheduleFixingDateBusinessCenters struct {
	*quickfix.Group
}

// SetUnderlyingPaymentScheduleFixingDateBusinessCenter sets UnderlyingPaymentScheduleFixingDateBusinessCenter, Tag 40690.
func (m NoUnderlyingPaymentScheduleFixingDateBusinessCenters) SetUnderlyingPaymentScheduleFixingDateBusinessCenter(v string) {
	m.Set(field.NewUnderlyingPaymentScheduleFixingDateBusinessCenter(v))
}

// GetUnderlyingPaymentScheduleFixingDateBusinessCenter gets UnderlyingPaymentScheduleFixingDateBusinessCenter, Tag 40690.
func (m NoUnderlyingPaymentScheduleFixingDateBusinessCenters) GetUnderlyingPaymentScheduleFixingDateBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentScheduleFixingDateBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingPaymentScheduleFixingDateBusinessCenter returns true if UnderlyingPaymentScheduleFixingDateBusinessCenter is present, Tag 40690.
func (m NoUnderlyingPaymentScheduleFixingDateBusinessCenters) HasUnderlyingPaymentScheduleFixingDateBusinessCenter() bool {
	return m.Has(tag.UnderlyingPaymentScheduleFixingDateBusinessCenter)
}

// NoUnderlyingPaymentScheduleFixingDateBusinessCentersRepeatingGroup is a repeating group, Tag 40966.
type NoUnderlyingPaymentScheduleFixingDateBusinessCentersRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingPaymentScheduleFixingDateBusinessCentersRepeatingGroup returns an initialized, NoUnderlyingPaymentScheduleFixingDateBusinessCentersRepeatingGroup.
func NewNoUnderlyingPaymentScheduleFixingDateBusinessCentersRepeatingGroup() NoUnderlyingPaymentScheduleFixingDateBusinessCentersRepeatingGroup {
	return NoUnderlyingPaymentScheduleFixingDateBusinessCentersRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingPaymentScheduleFixingDateBusinessCenters,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingPaymentScheduleFixingDateBusinessCenter),
			},
		),
	}
}

// Add create and append a new NoUnderlyingPaymentScheduleFixingDateBusinessCenters to this group.
func (m NoUnderlyingPaymentScheduleFixingDateBusinessCentersRepeatingGroup) Add() NoUnderlyingPaymentScheduleFixingDateBusinessCenters {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingPaymentScheduleFixingDateBusinessCenters{g}
}

// Get returns the ith NoUnderlyingPaymentScheduleFixingDateBusinessCenters in the NoUnderlyingPaymentScheduleFixingDateBusinessCentersRepeatinGroup.
func (m NoUnderlyingPaymentScheduleFixingDateBusinessCentersRepeatingGroup) Get(i int) NoUnderlyingPaymentScheduleFixingDateBusinessCenters {
	return NoUnderlyingPaymentScheduleFixingDateBusinessCenters{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingPaymentScheduleInterimExchangeDateBusinessCenters is a repeating group element, Tag 40967.
type NoUnderlyingPaymentScheduleInterimExchangeDateBusinessCenters struct {
	*quickfix.Group
}

// SetUnderlyingPaymentScheduleInterimExchangeDatesBusinessCenter sets UnderlyingPaymentScheduleInterimExchangeDatesBusinessCenter, Tag 40699.
func (m NoUnderlyingPaymentScheduleInterimExchangeDateBusinessCenters) SetUnderlyingPaymentScheduleInterimExchangeDatesBusinessCenter(v string) {
	m.Set(field.NewUnderlyingPaymentScheduleInterimExchangeDatesBusinessCenter(v))
}

// GetUnderlyingPaymentScheduleInterimExchangeDatesBusinessCenter gets UnderlyingPaymentScheduleInterimExchangeDatesBusinessCenter, Tag 40699.
func (m NoUnderlyingPaymentScheduleInterimExchangeDateBusinessCenters) GetUnderlyingPaymentScheduleInterimExchangeDatesBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentScheduleInterimExchangeDatesBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingPaymentScheduleInterimExchangeDatesBusinessCenter returns true if UnderlyingPaymentScheduleInterimExchangeDatesBusinessCenter is present, Tag 40699.
func (m NoUnderlyingPaymentScheduleInterimExchangeDateBusinessCenters) HasUnderlyingPaymentScheduleInterimExchangeDatesBusinessCenter() bool {
	return m.Has(tag.UnderlyingPaymentScheduleInterimExchangeDatesBusinessCenter)
}

// NoUnderlyingPaymentScheduleInterimExchangeDateBusinessCentersRepeatingGroup is a repeating group, Tag 40967.
type NoUnderlyingPaymentScheduleInterimExchangeDateBusinessCentersRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingPaymentScheduleInterimExchangeDateBusinessCentersRepeatingGroup returns an initialized, NoUnderlyingPaymentScheduleInterimExchangeDateBusinessCentersRepeatingGroup.
func NewNoUnderlyingPaymentScheduleInterimExchangeDateBusinessCentersRepeatingGroup() NoUnderlyingPaymentScheduleInterimExchangeDateBusinessCentersRepeatingGroup {
	return NoUnderlyingPaymentScheduleInterimExchangeDateBusinessCentersRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingPaymentScheduleInterimExchangeDateBusinessCenters,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingPaymentScheduleInterimExchangeDatesBusinessCenter),
			},
		),
	}
}

// Add create and append a new NoUnderlyingPaymentScheduleInterimExchangeDateBusinessCenters to this group.
func (m NoUnderlyingPaymentScheduleInterimExchangeDateBusinessCentersRepeatingGroup) Add() NoUnderlyingPaymentScheduleInterimExchangeDateBusinessCenters {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingPaymentScheduleInterimExchangeDateBusinessCenters{g}
}

// Get returns the ith NoUnderlyingPaymentScheduleInterimExchangeDateBusinessCenters in the NoUnderlyingPaymentScheduleInterimExchangeDateBusinessCentersRepeatinGroup.
func (m NoUnderlyingPaymentScheduleInterimExchangeDateBusinessCentersRepeatingGroup) Get(i int) NoUnderlyingPaymentScheduleInterimExchangeDateBusinessCenters {
	return NoUnderlyingPaymentScheduleInterimExchangeDateBusinessCenters{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingPaymentScheduleFixingDays is a repeating group element, Tag 41878.
type NoUnderlyingPaymentScheduleFixingDays struct {
	*quickfix.Group
}

// SetUnderlyingPaymentScheduleFixingDayOfWeek sets UnderlyingPaymentScheduleFixingDayOfWeek, Tag 41879.
func (m NoUnderlyingPaymentScheduleFixingDays) SetUnderlyingPaymentScheduleFixingDayOfWeek(v int) {
	m.Set(field.NewUnderlyingPaymentScheduleFixingDayOfWeek(v))
}

// SetUnderlyingPaymentScheduleFixingDayNumber sets UnderlyingPaymentScheduleFixingDayNumber, Tag 41880.
func (m NoUnderlyingPaymentScheduleFixingDays) SetUnderlyingPaymentScheduleFixingDayNumber(v int) {
	m.Set(field.NewUnderlyingPaymentScheduleFixingDayNumber(v))
}

// GetUnderlyingPaymentScheduleFixingDayOfWeek gets UnderlyingPaymentScheduleFixingDayOfWeek, Tag 41879.
func (m NoUnderlyingPaymentScheduleFixingDays) GetUnderlyingPaymentScheduleFixingDayOfWeek() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentScheduleFixingDayOfWeekField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentScheduleFixingDayNumber gets UnderlyingPaymentScheduleFixingDayNumber, Tag 41880.
func (m NoUnderlyingPaymentScheduleFixingDays) GetUnderlyingPaymentScheduleFixingDayNumber() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentScheduleFixingDayNumberField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingPaymentScheduleFixingDayOfWeek returns true if UnderlyingPaymentScheduleFixingDayOfWeek is present, Tag 41879.
func (m NoUnderlyingPaymentScheduleFixingDays) HasUnderlyingPaymentScheduleFixingDayOfWeek() bool {
	return m.Has(tag.UnderlyingPaymentScheduleFixingDayOfWeek)
}

// HasUnderlyingPaymentScheduleFixingDayNumber returns true if UnderlyingPaymentScheduleFixingDayNumber is present, Tag 41880.
func (m NoUnderlyingPaymentScheduleFixingDays) HasUnderlyingPaymentScheduleFixingDayNumber() bool {
	return m.Has(tag.UnderlyingPaymentScheduleFixingDayNumber)
}

// NoUnderlyingPaymentScheduleFixingDaysRepeatingGroup is a repeating group, Tag 41878.
type NoUnderlyingPaymentScheduleFixingDaysRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingPaymentScheduleFixingDaysRepeatingGroup returns an initialized, NoUnderlyingPaymentScheduleFixingDaysRepeatingGroup.
func NewNoUnderlyingPaymentScheduleFixingDaysRepeatingGroup() NoUnderlyingPaymentScheduleFixingDaysRepeatingGroup {
	return NoUnderlyingPaymentScheduleFixingDaysRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingPaymentScheduleFixingDays,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingPaymentScheduleFixingDayOfWeek),
				quickfix.GroupElement(tag.UnderlyingPaymentScheduleFixingDayNumber),
			},
		),
	}
}

// Add create and append a new NoUnderlyingPaymentScheduleFixingDays to this group.
func (m NoUnderlyingPaymentScheduleFixingDaysRepeatingGroup) Add() NoUnderlyingPaymentScheduleFixingDays {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingPaymentScheduleFixingDays{g}
}

// Get returns the ith NoUnderlyingPaymentScheduleFixingDays in the NoUnderlyingPaymentScheduleFixingDaysRepeatinGroup.
func (m NoUnderlyingPaymentScheduleFixingDaysRepeatingGroup) Get(i int) NoUnderlyingPaymentScheduleFixingDays {
	return NoUnderlyingPaymentScheduleFixingDays{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingPaymentSchedulesRepeatingGroup is a repeating group, Tag 40664.
type NoUnderlyingPaymentSchedulesRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingPaymentSchedulesRepeatingGroup returns an initialized, NoUnderlyingPaymentSchedulesRepeatingGroup.
func NewNoUnderlyingPaymentSchedulesRepeatingGroup() NoUnderlyingPaymentSchedulesRepeatingGroup {
	return NoUnderlyingPaymentSchedulesRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingPaymentSchedules,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingPaymentScheduleType),
				quickfix.GroupElement(tag.UnderlyingPaymentScheduleStubType),
				quickfix.GroupElement(tag.UnderlyingPaymentScheduleStartDateUnadjusted),
				quickfix.GroupElement(tag.UnderlyingPaymentScheduleEndDateUnadjusted),
				quickfix.GroupElement(tag.UnderlyingPaymentSchedulePaySide),
				quickfix.GroupElement(tag.UnderlyingPaymentScheduleReceiveSide),
				quickfix.GroupElement(tag.UnderlyingPaymentScheduleNotional),
				quickfix.GroupElement(tag.UnderlyingPaymentScheduleCurrency),
				quickfix.GroupElement(tag.UnderlyingPaymentScheduleRate),
				quickfix.GroupElement(tag.UnderlyingPaymentScheduleRateMultiplier),
				quickfix.GroupElement(tag.UnderlyingPaymentScheduleRateSpread),
				quickfix.GroupElement(tag.UnderlyingPaymentScheduleRateSpreadPositionType),
				quickfix.GroupElement(tag.UnderlyingPaymentScheduleFixedAmount),
				quickfix.GroupElement(tag.UnderlyingPaymentScheduleFixedCurrency),
				quickfix.GroupElement(tag.UnderlyingPaymentScheduleStepFrequencyPeriod),
				quickfix.GroupElement(tag.UnderlyingPaymentScheduleStepFrequencyUnit),
				quickfix.GroupElement(tag.UnderlyingPaymentScheduleStepOffsetValue),
				quickfix.GroupElement(tag.UnderlyingPaymentScheduleStepRate),
				quickfix.GroupElement(tag.UnderlyingPaymentScheduleStepOffsetRate),
				quickfix.GroupElement(tag.UnderlyingPaymentScheduleStepRelativeTo),
				NewNoUnderlyingPaymentScheduleRateSourcesRepeatingGroup(),
				quickfix.GroupElement(tag.UnderlyingPaymentScheduleFixingDateUnadjusted),
				quickfix.GroupElement(tag.UnderlyingPaymentScheduleWeight),
				quickfix.GroupElement(tag.UnderlyingPaymentScheduleFixingDateRelativeTo),
				quickfix.GroupElement(tag.UnderlyingPaymentScheduleFixingDateBusinessDayCnvtn),
				NewNoUnderlyingPaymentScheduleFixingDateBusinessCentersRepeatingGroup(),
				quickfix.GroupElement(tag.UnderlyingPaymentScheduleFixingDateOffsetPeriod),
				quickfix.GroupElement(tag.UnderlyingPaymentScheduleFixingDateOffsetUnit),
				quickfix.GroupElement(tag.UnderlyingPaymentScheduleFixingDateOffsetDayType),
				quickfix.GroupElement(tag.UnderlyingPaymentScheduleFixingDateAdjusted),
				quickfix.GroupElement(tag.UnderlyingPaymentScheduleFixingTime),
				quickfix.GroupElement(tag.UnderlyingPaymentScheduleFixingTimeBusinessCenter),
				quickfix.GroupElement(tag.UnderlyingPaymentScheduleInterimExchangePaymentDateRelativeTo),
				quickfix.GroupElement(tag.UnderlyingPaymentScheduleInterimExchangeDatesBusinessDayConvention),
				NewNoUnderlyingPaymentScheduleInterimExchangeDateBusinessCentersRepeatingGroup(),
				quickfix.GroupElement(tag.UnderlyingPaymentScheduleInterimExchangeDatesOffsetPeriod),
				quickfix.GroupElement(tag.UnderlyingPaymentScheduleInterimExchangeDatesOffsetUnit),
				quickfix.GroupElement(tag.UnderlyingPaymentScheduleInterimExchangeDatesOffsetDayType),
				quickfix.GroupElement(tag.UnderlyingPaymentScheduleInterimExchangeDateAdjusted),
				quickfix.GroupElement(tag.UnderlyingPaymentScheduleXID),
				quickfix.GroupElement(tag.UnderlyingPaymentScheduleXIDRef),
				quickfix.GroupElement(tag.UnderlyingPaymentScheduleRateCurrency),
				quickfix.GroupElement(tag.UnderlyingPaymentScheduleRateUnitOfMeasure),
				quickfix.GroupElement(tag.UnderlyingPaymentScheduleRateConversionFactor),
				quickfix.GroupElement(tag.UnderlyingPaymentScheduleRateSpreadType),
				quickfix.GroupElement(tag.UnderlyingPaymentScheduleSettlPeriodPrice),
				quickfix.GroupElement(tag.UnderlyingPaymentScheduleSettlPeriodPriceCurrency),
				quickfix.GroupElement(tag.UnderlyingPaymentScheduleSettlPeriodPriceUnitOfMeasure),
				quickfix.GroupElement(tag.UnderlyingPaymentScheduleStepUnitOfMeasure),
				quickfix.GroupElement(tag.UnderlyingPaymentScheduleFixingDayDistribution),
				quickfix.GroupElement(tag.UnderlyingPaymentScheduleFixingDayCount),
				NewNoUnderlyingPaymentScheduleFixingDaysRepeatingGroup(),
				quickfix.GroupElement(tag.UnderlyingPaymentScheduleFixingLagPeriod),
				quickfix.GroupElement(tag.UnderlyingPaymentScheduleFixingLagUnit),
				quickfix.GroupElement(tag.UnderlyingPaymentScheduleFixingFirstObservationDateOffsetPeriod),
				quickfix.GroupElement(tag.UnderlyingPaymentScheduleFixingFirstObservationDateOffsetUnit),
				quickfix.GroupElement(tag.UnderlyingPaymentScheduleRateTreatment),
			},
		),
	}
}

// Add create and append a new NoUnderlyingPaymentSchedules to this group.
func (m NoUnderlyingPaymentSchedulesRepeatingGroup) Add() NoUnderlyingPaymentSchedules {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingPaymentSchedules{g}
}

// Get returns the ith NoUnderlyingPaymentSchedules in the NoUnderlyingPaymentSchedulesRepeatinGroup.
func (m NoUnderlyingPaymentSchedulesRepeatingGroup) Get(i int) NoUnderlyingPaymentSchedules {
	return NoUnderlyingPaymentSchedules{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingPaymentStubs is a repeating group element, Tag 40708.
type NoUnderlyingPaymentStubs struct {
	*quickfix.Group
}

// SetUnderlyingPaymentStubType sets UnderlyingPaymentStubType, Tag 40709.
func (m NoUnderlyingPaymentStubs) SetUnderlyingPaymentStubType(v int) {
	m.Set(field.NewUnderlyingPaymentStubType(v))
}

// SetUnderlyingPaymentStubLength sets UnderlyingPaymentStubLength, Tag 40710.
func (m NoUnderlyingPaymentStubs) SetUnderlyingPaymentStubLength(v int) {
	m.Set(field.NewUnderlyingPaymentStubLength(v))
}

// SetUnderlyingPaymentStubRate sets UnderlyingPaymentStubRate, Tag 40711.
func (m NoUnderlyingPaymentStubs) SetUnderlyingPaymentStubRate(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingPaymentStubRate(value, scale))
}

// SetUnderlyingPaymentStubFixedAmount sets UnderlyingPaymentStubFixedAmount, Tag 40712.
func (m NoUnderlyingPaymentStubs) SetUnderlyingPaymentStubFixedAmount(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingPaymentStubFixedAmount(value, scale))
}

// SetUnderlyingPaymentStubFixedCurrency sets UnderlyingPaymentStubFixedCurrency, Tag 40713.
func (m NoUnderlyingPaymentStubs) SetUnderlyingPaymentStubFixedCurrency(v string) {
	m.Set(field.NewUnderlyingPaymentStubFixedCurrency(v))
}

// SetUnderlyingPaymentStubIndex sets UnderlyingPaymentStubIndex, Tag 40714.
func (m NoUnderlyingPaymentStubs) SetUnderlyingPaymentStubIndex(v string) {
	m.Set(field.NewUnderlyingPaymentStubIndex(v))
}

// SetUnderlyingPaymentStubIndexSource sets UnderlyingPaymentStubIndexSource, Tag 40715.
func (m NoUnderlyingPaymentStubs) SetUnderlyingPaymentStubIndexSource(v int) {
	m.Set(field.NewUnderlyingPaymentStubIndexSource(v))
}

// SetUnderlyingPaymentStubIndexCurvePeriod sets UnderlyingPaymentStubIndexCurvePeriod, Tag 40716.
func (m NoUnderlyingPaymentStubs) SetUnderlyingPaymentStubIndexCurvePeriod(v int) {
	m.Set(field.NewUnderlyingPaymentStubIndexCurvePeriod(v))
}

// SetUnderlyingPaymentStubIndexCurveUnit sets UnderlyingPaymentStubIndexCurveUnit, Tag 40717.
func (m NoUnderlyingPaymentStubs) SetUnderlyingPaymentStubIndexCurveUnit(v string) {
	m.Set(field.NewUnderlyingPaymentStubIndexCurveUnit(v))
}

// SetUnderlyingPaymentStubIndexRateMultiplier sets UnderlyingPaymentStubIndexRateMultiplier, Tag 40718.
func (m NoUnderlyingPaymentStubs) SetUnderlyingPaymentStubIndexRateMultiplier(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingPaymentStubIndexRateMultiplier(value, scale))
}

// SetUnderlyingPaymentStubIndexRateSpread sets UnderlyingPaymentStubIndexRateSpread, Tag 40719.
func (m NoUnderlyingPaymentStubs) SetUnderlyingPaymentStubIndexRateSpread(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingPaymentStubIndexRateSpread(value, scale))
}

// SetUnderlyingPaymentStubIndexRateSpreadPositionType sets UnderlyingPaymentStubIndexRateSpreadPositionType, Tag 40720.
func (m NoUnderlyingPaymentStubs) SetUnderlyingPaymentStubIndexRateSpreadPositionType(v int) {
	m.Set(field.NewUnderlyingPaymentStubIndexRateSpreadPositionType(v))
}

// SetUnderlyingPaymentStubIndexRateTreatment sets UnderlyingPaymentStubIndexRateTreatment, Tag 40721.
func (m NoUnderlyingPaymentStubs) SetUnderlyingPaymentStubIndexRateTreatment(v int) {
	m.Set(field.NewUnderlyingPaymentStubIndexRateTreatment(v))
}

// SetUnderlyingPaymentStubIndexCapRate sets UnderlyingPaymentStubIndexCapRate, Tag 40722.
func (m NoUnderlyingPaymentStubs) SetUnderlyingPaymentStubIndexCapRate(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingPaymentStubIndexCapRate(value, scale))
}

// SetUnderlyingPaymentStubIndexCapRateBuySide sets UnderlyingPaymentStubIndexCapRateBuySide, Tag 40723.
func (m NoUnderlyingPaymentStubs) SetUnderlyingPaymentStubIndexCapRateBuySide(v int) {
	m.Set(field.NewUnderlyingPaymentStubIndexCapRateBuySide(v))
}

// SetUnderlyingPaymentStubIndexCapRateSellSide sets UnderlyingPaymentStubIndexCapRateSellSide, Tag 40724.
func (m NoUnderlyingPaymentStubs) SetUnderlyingPaymentStubIndexCapRateSellSide(v int) {
	m.Set(field.NewUnderlyingPaymentStubIndexCapRateSellSide(v))
}

// SetUnderlyingPaymentStubIndexFloorRate sets UnderlyingPaymentStubIndexFloorRate, Tag 40725.
func (m NoUnderlyingPaymentStubs) SetUnderlyingPaymentStubIndexFloorRate(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingPaymentStubIndexFloorRate(value, scale))
}

// SetUnderlyingPaymentStubIndexFloorRateBuySide sets UnderlyingPaymentStubIndexFloorRateBuySide, Tag 40726.
func (m NoUnderlyingPaymentStubs) SetUnderlyingPaymentStubIndexFloorRateBuySide(v int) {
	m.Set(field.NewUnderlyingPaymentStubIndexFloorRateBuySide(v))
}

// SetUnderlyingPaymentStubIndexFloorRateSellSide sets UnderlyingPaymentStubIndexFloorRateSellSide, Tag 40727.
func (m NoUnderlyingPaymentStubs) SetUnderlyingPaymentStubIndexFloorRateSellSide(v int) {
	m.Set(field.NewUnderlyingPaymentStubIndexFloorRateSellSide(v))
}

// SetUnderlyingPaymentStubIndex2 sets UnderlyingPaymentStubIndex2, Tag 40728.
func (m NoUnderlyingPaymentStubs) SetUnderlyingPaymentStubIndex2(v string) {
	m.Set(field.NewUnderlyingPaymentStubIndex2(v))
}

// SetUnderlyingPaymentStubIndex2Source sets UnderlyingPaymentStubIndex2Source, Tag 40729.
func (m NoUnderlyingPaymentStubs) SetUnderlyingPaymentStubIndex2Source(v int) {
	m.Set(field.NewUnderlyingPaymentStubIndex2Source(v))
}

// SetUnderlyingPaymentStubIndex2CurvePeriod sets UnderlyingPaymentStubIndex2CurvePeriod, Tag 40730.
func (m NoUnderlyingPaymentStubs) SetUnderlyingPaymentStubIndex2CurvePeriod(v int) {
	m.Set(field.NewUnderlyingPaymentStubIndex2CurvePeriod(v))
}

// SetUnderlyingPaymentStubIndex2CurveUnit sets UnderlyingPaymentStubIndex2CurveUnit, Tag 40731.
func (m NoUnderlyingPaymentStubs) SetUnderlyingPaymentStubIndex2CurveUnit(v string) {
	m.Set(field.NewUnderlyingPaymentStubIndex2CurveUnit(v))
}

// SetUnderlyingPaymentStubIndex2RateMultiplier sets UnderlyingPaymentStubIndex2RateMultiplier, Tag 40732.
func (m NoUnderlyingPaymentStubs) SetUnderlyingPaymentStubIndex2RateMultiplier(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingPaymentStubIndex2RateMultiplier(value, scale))
}

// SetUnderlyingPaymentStubIndex2RateSpread sets UnderlyingPaymentStubIndex2RateSpread, Tag 40733.
func (m NoUnderlyingPaymentStubs) SetUnderlyingPaymentStubIndex2RateSpread(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingPaymentStubIndex2RateSpread(value, scale))
}

// SetUnderlyingPaymentStubIndex2RateSpreadPositionType sets UnderlyingPaymentStubIndex2RateSpreadPositionType, Tag 40734.
func (m NoUnderlyingPaymentStubs) SetUnderlyingPaymentStubIndex2RateSpreadPositionType(v int) {
	m.Set(field.NewUnderlyingPaymentStubIndex2RateSpreadPositionType(v))
}

// SetUnderlyingPaymentStubIndex2RateTreatment sets UnderlyingPaymentStubIndex2RateTreatment, Tag 40735.
func (m NoUnderlyingPaymentStubs) SetUnderlyingPaymentStubIndex2RateTreatment(v int) {
	m.Set(field.NewUnderlyingPaymentStubIndex2RateTreatment(v))
}

// SetUnderlyingPaymentStubIndex2CapRate sets UnderlyingPaymentStubIndex2CapRate, Tag 40736.
func (m NoUnderlyingPaymentStubs) SetUnderlyingPaymentStubIndex2CapRate(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingPaymentStubIndex2CapRate(value, scale))
}

// SetUnderlyingPaymentStubIndex2FloorRate sets UnderlyingPaymentStubIndex2FloorRate, Tag 40737.
func (m NoUnderlyingPaymentStubs) SetUnderlyingPaymentStubIndex2FloorRate(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingPaymentStubIndex2FloorRate(value, scale))
}

// SetUnderlyingPaymentStubStartDateUnadjusted sets UnderlyingPaymentStubStartDateUnadjusted, Tag 42993.
func (m NoUnderlyingPaymentStubs) SetUnderlyingPaymentStubStartDateUnadjusted(v string) {
	m.Set(field.NewUnderlyingPaymentStubStartDateUnadjusted(v))
}

// SetUnderlyingPaymentStubStartDateBusinessDayConvention sets UnderlyingPaymentStubStartDateBusinessDayConvention, Tag 42994.
func (m NoUnderlyingPaymentStubs) SetUnderlyingPaymentStubStartDateBusinessDayConvention(v int) {
	m.Set(field.NewUnderlyingPaymentStubStartDateBusinessDayConvention(v))
}

// SetNoUnderlyingPaymentStubStartDateBusinessCenters sets NoUnderlyingPaymentStubStartDateBusinessCenters, Tag 43000.
func (m NoUnderlyingPaymentStubs) SetNoUnderlyingPaymentStubStartDateBusinessCenters(f NoUnderlyingPaymentStubStartDateBusinessCentersRepeatingGroup) {
	m.SetGroup(f)
}

// SetUnderlyingPaymentStubStartDateRelativeTo sets UnderlyingPaymentStubStartDateRelativeTo, Tag 42995.
func (m NoUnderlyingPaymentStubs) SetUnderlyingPaymentStubStartDateRelativeTo(v int) {
	m.Set(field.NewUnderlyingPaymentStubStartDateRelativeTo(v))
}

// SetUnderlyingPaymentStubStartDateOffsetPeriod sets UnderlyingPaymentStubStartDateOffsetPeriod, Tag 42996.
func (m NoUnderlyingPaymentStubs) SetUnderlyingPaymentStubStartDateOffsetPeriod(v int) {
	m.Set(field.NewUnderlyingPaymentStubStartDateOffsetPeriod(v))
}

// SetUnderlyingPaymentStubStartDateOffsetUnit sets UnderlyingPaymentStubStartDateOffsetUnit, Tag 42997.
func (m NoUnderlyingPaymentStubs) SetUnderlyingPaymentStubStartDateOffsetUnit(v string) {
	m.Set(field.NewUnderlyingPaymentStubStartDateOffsetUnit(v))
}

// SetUnderlyingPaymentStubStartDateOffsetDayType sets UnderlyingPaymentStubStartDateOffsetDayType, Tag 42998.
func (m NoUnderlyingPaymentStubs) SetUnderlyingPaymentStubStartDateOffsetDayType(v int) {
	m.Set(field.NewUnderlyingPaymentStubStartDateOffsetDayType(v))
}

// SetUnderlyingPaymentStubStartDateAdjusted sets UnderlyingPaymentStubStartDateAdjusted, Tag 42999.
func (m NoUnderlyingPaymentStubs) SetUnderlyingPaymentStubStartDateAdjusted(v string) {
	m.Set(field.NewUnderlyingPaymentStubStartDateAdjusted(v))
}

// SetUnderlyingPaymentStubEndDateUnadjusted sets UnderlyingPaymentStubEndDateUnadjusted, Tag 42984.
func (m NoUnderlyingPaymentStubs) SetUnderlyingPaymentStubEndDateUnadjusted(v string) {
	m.Set(field.NewUnderlyingPaymentStubEndDateUnadjusted(v))
}

// SetUnderlyingPaymentStubEndDateBusinessDayConvention sets UnderlyingPaymentStubEndDateBusinessDayConvention, Tag 42985.
func (m NoUnderlyingPaymentStubs) SetUnderlyingPaymentStubEndDateBusinessDayConvention(v int) {
	m.Set(field.NewUnderlyingPaymentStubEndDateBusinessDayConvention(v))
}

// SetNoUnderlyingPaymentStubEndDateBusinessCenters sets NoUnderlyingPaymentStubEndDateBusinessCenters, Tag 42991.
func (m NoUnderlyingPaymentStubs) SetNoUnderlyingPaymentStubEndDateBusinessCenters(f NoUnderlyingPaymentStubEndDateBusinessCentersRepeatingGroup) {
	m.SetGroup(f)
}

// SetUnderlyingPaymentStubEndDateRelativeTo sets UnderlyingPaymentStubEndDateRelativeTo, Tag 42986.
func (m NoUnderlyingPaymentStubs) SetUnderlyingPaymentStubEndDateRelativeTo(v int) {
	m.Set(field.NewUnderlyingPaymentStubEndDateRelativeTo(v))
}

// SetUnderlyingPaymentStubEndDateOffsetPeriod sets UnderlyingPaymentStubEndDateOffsetPeriod, Tag 42987.
func (m NoUnderlyingPaymentStubs) SetUnderlyingPaymentStubEndDateOffsetPeriod(v int) {
	m.Set(field.NewUnderlyingPaymentStubEndDateOffsetPeriod(v))
}

// SetUnderlyingPaymentStubEndDateOffsetUnit sets UnderlyingPaymentStubEndDateOffsetUnit, Tag 42988.
func (m NoUnderlyingPaymentStubs) SetUnderlyingPaymentStubEndDateOffsetUnit(v string) {
	m.Set(field.NewUnderlyingPaymentStubEndDateOffsetUnit(v))
}

// SetUnderlyingPaymentStubEndDateOffsetDayType sets UnderlyingPaymentStubEndDateOffsetDayType, Tag 42989.
func (m NoUnderlyingPaymentStubs) SetUnderlyingPaymentStubEndDateOffsetDayType(v int) {
	m.Set(field.NewUnderlyingPaymentStubEndDateOffsetDayType(v))
}

// SetUnderlyingPaymentStubEndDateAdjusted sets UnderlyingPaymentStubEndDateAdjusted, Tag 42990.
func (m NoUnderlyingPaymentStubs) SetUnderlyingPaymentStubEndDateAdjusted(v string) {
	m.Set(field.NewUnderlyingPaymentStubEndDateAdjusted(v))
}

// GetUnderlyingPaymentStubType gets UnderlyingPaymentStubType, Tag 40709.
func (m NoUnderlyingPaymentStubs) GetUnderlyingPaymentStubType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStubTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStubLength gets UnderlyingPaymentStubLength, Tag 40710.
func (m NoUnderlyingPaymentStubs) GetUnderlyingPaymentStubLength() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStubLengthField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStubRate gets UnderlyingPaymentStubRate, Tag 40711.
func (m NoUnderlyingPaymentStubs) GetUnderlyingPaymentStubRate() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStubRateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStubFixedAmount gets UnderlyingPaymentStubFixedAmount, Tag 40712.
func (m NoUnderlyingPaymentStubs) GetUnderlyingPaymentStubFixedAmount() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStubFixedAmountField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStubFixedCurrency gets UnderlyingPaymentStubFixedCurrency, Tag 40713.
func (m NoUnderlyingPaymentStubs) GetUnderlyingPaymentStubFixedCurrency() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStubFixedCurrencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStubIndex gets UnderlyingPaymentStubIndex, Tag 40714.
func (m NoUnderlyingPaymentStubs) GetUnderlyingPaymentStubIndex() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStubIndexField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStubIndexSource gets UnderlyingPaymentStubIndexSource, Tag 40715.
func (m NoUnderlyingPaymentStubs) GetUnderlyingPaymentStubIndexSource() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStubIndexSourceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStubIndexCurvePeriod gets UnderlyingPaymentStubIndexCurvePeriod, Tag 40716.
func (m NoUnderlyingPaymentStubs) GetUnderlyingPaymentStubIndexCurvePeriod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStubIndexCurvePeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStubIndexCurveUnit gets UnderlyingPaymentStubIndexCurveUnit, Tag 40717.
func (m NoUnderlyingPaymentStubs) GetUnderlyingPaymentStubIndexCurveUnit() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStubIndexCurveUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStubIndexRateMultiplier gets UnderlyingPaymentStubIndexRateMultiplier, Tag 40718.
func (m NoUnderlyingPaymentStubs) GetUnderlyingPaymentStubIndexRateMultiplier() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStubIndexRateMultiplierField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStubIndexRateSpread gets UnderlyingPaymentStubIndexRateSpread, Tag 40719.
func (m NoUnderlyingPaymentStubs) GetUnderlyingPaymentStubIndexRateSpread() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStubIndexRateSpreadField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStubIndexRateSpreadPositionType gets UnderlyingPaymentStubIndexRateSpreadPositionType, Tag 40720.
func (m NoUnderlyingPaymentStubs) GetUnderlyingPaymentStubIndexRateSpreadPositionType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStubIndexRateSpreadPositionTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStubIndexRateTreatment gets UnderlyingPaymentStubIndexRateTreatment, Tag 40721.
func (m NoUnderlyingPaymentStubs) GetUnderlyingPaymentStubIndexRateTreatment() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStubIndexRateTreatmentField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStubIndexCapRate gets UnderlyingPaymentStubIndexCapRate, Tag 40722.
func (m NoUnderlyingPaymentStubs) GetUnderlyingPaymentStubIndexCapRate() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStubIndexCapRateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStubIndexCapRateBuySide gets UnderlyingPaymentStubIndexCapRateBuySide, Tag 40723.
func (m NoUnderlyingPaymentStubs) GetUnderlyingPaymentStubIndexCapRateBuySide() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStubIndexCapRateBuySideField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStubIndexCapRateSellSide gets UnderlyingPaymentStubIndexCapRateSellSide, Tag 40724.
func (m NoUnderlyingPaymentStubs) GetUnderlyingPaymentStubIndexCapRateSellSide() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStubIndexCapRateSellSideField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStubIndexFloorRate gets UnderlyingPaymentStubIndexFloorRate, Tag 40725.
func (m NoUnderlyingPaymentStubs) GetUnderlyingPaymentStubIndexFloorRate() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStubIndexFloorRateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStubIndexFloorRateBuySide gets UnderlyingPaymentStubIndexFloorRateBuySide, Tag 40726.
func (m NoUnderlyingPaymentStubs) GetUnderlyingPaymentStubIndexFloorRateBuySide() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStubIndexFloorRateBuySideField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStubIndexFloorRateSellSide gets UnderlyingPaymentStubIndexFloorRateSellSide, Tag 40727.
func (m NoUnderlyingPaymentStubs) GetUnderlyingPaymentStubIndexFloorRateSellSide() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStubIndexFloorRateSellSideField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStubIndex2 gets UnderlyingPaymentStubIndex2, Tag 40728.
func (m NoUnderlyingPaymentStubs) GetUnderlyingPaymentStubIndex2() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStubIndex2Field
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStubIndex2Source gets UnderlyingPaymentStubIndex2Source, Tag 40729.
func (m NoUnderlyingPaymentStubs) GetUnderlyingPaymentStubIndex2Source() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStubIndex2SourceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStubIndex2CurvePeriod gets UnderlyingPaymentStubIndex2CurvePeriod, Tag 40730.
func (m NoUnderlyingPaymentStubs) GetUnderlyingPaymentStubIndex2CurvePeriod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStubIndex2CurvePeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStubIndex2CurveUnit gets UnderlyingPaymentStubIndex2CurveUnit, Tag 40731.
func (m NoUnderlyingPaymentStubs) GetUnderlyingPaymentStubIndex2CurveUnit() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStubIndex2CurveUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStubIndex2RateMultiplier gets UnderlyingPaymentStubIndex2RateMultiplier, Tag 40732.
func (m NoUnderlyingPaymentStubs) GetUnderlyingPaymentStubIndex2RateMultiplier() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStubIndex2RateMultiplierField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStubIndex2RateSpread gets UnderlyingPaymentStubIndex2RateSpread, Tag 40733.
func (m NoUnderlyingPaymentStubs) GetUnderlyingPaymentStubIndex2RateSpread() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStubIndex2RateSpreadField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStubIndex2RateSpreadPositionType gets UnderlyingPaymentStubIndex2RateSpreadPositionType, Tag 40734.
func (m NoUnderlyingPaymentStubs) GetUnderlyingPaymentStubIndex2RateSpreadPositionType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStubIndex2RateSpreadPositionTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStubIndex2RateTreatment gets UnderlyingPaymentStubIndex2RateTreatment, Tag 40735.
func (m NoUnderlyingPaymentStubs) GetUnderlyingPaymentStubIndex2RateTreatment() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStubIndex2RateTreatmentField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStubIndex2CapRate gets UnderlyingPaymentStubIndex2CapRate, Tag 40736.
func (m NoUnderlyingPaymentStubs) GetUnderlyingPaymentStubIndex2CapRate() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStubIndex2CapRateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStubIndex2FloorRate gets UnderlyingPaymentStubIndex2FloorRate, Tag 40737.
func (m NoUnderlyingPaymentStubs) GetUnderlyingPaymentStubIndex2FloorRate() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStubIndex2FloorRateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStubStartDateUnadjusted gets UnderlyingPaymentStubStartDateUnadjusted, Tag 42993.
func (m NoUnderlyingPaymentStubs) GetUnderlyingPaymentStubStartDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStubStartDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStubStartDateBusinessDayConvention gets UnderlyingPaymentStubStartDateBusinessDayConvention, Tag 42994.
func (m NoUnderlyingPaymentStubs) GetUnderlyingPaymentStubStartDateBusinessDayConvention() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStubStartDateBusinessDayConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUnderlyingPaymentStubStartDateBusinessCenters gets NoUnderlyingPaymentStubStartDateBusinessCenters, Tag 43000.
func (m NoUnderlyingPaymentStubs) GetNoUnderlyingPaymentStubStartDateBusinessCenters() (NoUnderlyingPaymentStubStartDateBusinessCentersRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingPaymentStubStartDateBusinessCentersRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetUnderlyingPaymentStubStartDateRelativeTo gets UnderlyingPaymentStubStartDateRelativeTo, Tag 42995.
func (m NoUnderlyingPaymentStubs) GetUnderlyingPaymentStubStartDateRelativeTo() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStubStartDateRelativeToField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStubStartDateOffsetPeriod gets UnderlyingPaymentStubStartDateOffsetPeriod, Tag 42996.
func (m NoUnderlyingPaymentStubs) GetUnderlyingPaymentStubStartDateOffsetPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStubStartDateOffsetPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStubStartDateOffsetUnit gets UnderlyingPaymentStubStartDateOffsetUnit, Tag 42997.
func (m NoUnderlyingPaymentStubs) GetUnderlyingPaymentStubStartDateOffsetUnit() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStubStartDateOffsetUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStubStartDateOffsetDayType gets UnderlyingPaymentStubStartDateOffsetDayType, Tag 42998.
func (m NoUnderlyingPaymentStubs) GetUnderlyingPaymentStubStartDateOffsetDayType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStubStartDateOffsetDayTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStubStartDateAdjusted gets UnderlyingPaymentStubStartDateAdjusted, Tag 42999.
func (m NoUnderlyingPaymentStubs) GetUnderlyingPaymentStubStartDateAdjusted() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStubStartDateAdjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStubEndDateUnadjusted gets UnderlyingPaymentStubEndDateUnadjusted, Tag 42984.
func (m NoUnderlyingPaymentStubs) GetUnderlyingPaymentStubEndDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStubEndDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStubEndDateBusinessDayConvention gets UnderlyingPaymentStubEndDateBusinessDayConvention, Tag 42985.
func (m NoUnderlyingPaymentStubs) GetUnderlyingPaymentStubEndDateBusinessDayConvention() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStubEndDateBusinessDayConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUnderlyingPaymentStubEndDateBusinessCenters gets NoUnderlyingPaymentStubEndDateBusinessCenters, Tag 42991.
func (m NoUnderlyingPaymentStubs) GetNoUnderlyingPaymentStubEndDateBusinessCenters() (NoUnderlyingPaymentStubEndDateBusinessCentersRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingPaymentStubEndDateBusinessCentersRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetUnderlyingPaymentStubEndDateRelativeTo gets UnderlyingPaymentStubEndDateRelativeTo, Tag 42986.
func (m NoUnderlyingPaymentStubs) GetUnderlyingPaymentStubEndDateRelativeTo() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStubEndDateRelativeToField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStubEndDateOffsetPeriod gets UnderlyingPaymentStubEndDateOffsetPeriod, Tag 42987.
func (m NoUnderlyingPaymentStubs) GetUnderlyingPaymentStubEndDateOffsetPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStubEndDateOffsetPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStubEndDateOffsetUnit gets UnderlyingPaymentStubEndDateOffsetUnit, Tag 42988.
func (m NoUnderlyingPaymentStubs) GetUnderlyingPaymentStubEndDateOffsetUnit() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStubEndDateOffsetUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStubEndDateOffsetDayType gets UnderlyingPaymentStubEndDateOffsetDayType, Tag 42989.
func (m NoUnderlyingPaymentStubs) GetUnderlyingPaymentStubEndDateOffsetDayType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStubEndDateOffsetDayTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStubEndDateAdjusted gets UnderlyingPaymentStubEndDateAdjusted, Tag 42990.
func (m NoUnderlyingPaymentStubs) GetUnderlyingPaymentStubEndDateAdjusted() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStubEndDateAdjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingPaymentStubType returns true if UnderlyingPaymentStubType is present, Tag 40709.
func (m NoUnderlyingPaymentStubs) HasUnderlyingPaymentStubType() bool {
	return m.Has(tag.UnderlyingPaymentStubType)
}

// HasUnderlyingPaymentStubLength returns true if UnderlyingPaymentStubLength is present, Tag 40710.
func (m NoUnderlyingPaymentStubs) HasUnderlyingPaymentStubLength() bool {
	return m.Has(tag.UnderlyingPaymentStubLength)
}

// HasUnderlyingPaymentStubRate returns true if UnderlyingPaymentStubRate is present, Tag 40711.
func (m NoUnderlyingPaymentStubs) HasUnderlyingPaymentStubRate() bool {
	return m.Has(tag.UnderlyingPaymentStubRate)
}

// HasUnderlyingPaymentStubFixedAmount returns true if UnderlyingPaymentStubFixedAmount is present, Tag 40712.
func (m NoUnderlyingPaymentStubs) HasUnderlyingPaymentStubFixedAmount() bool {
	return m.Has(tag.UnderlyingPaymentStubFixedAmount)
}

// HasUnderlyingPaymentStubFixedCurrency returns true if UnderlyingPaymentStubFixedCurrency is present, Tag 40713.
func (m NoUnderlyingPaymentStubs) HasUnderlyingPaymentStubFixedCurrency() bool {
	return m.Has(tag.UnderlyingPaymentStubFixedCurrency)
}

// HasUnderlyingPaymentStubIndex returns true if UnderlyingPaymentStubIndex is present, Tag 40714.
func (m NoUnderlyingPaymentStubs) HasUnderlyingPaymentStubIndex() bool {
	return m.Has(tag.UnderlyingPaymentStubIndex)
}

// HasUnderlyingPaymentStubIndexSource returns true if UnderlyingPaymentStubIndexSource is present, Tag 40715.
func (m NoUnderlyingPaymentStubs) HasUnderlyingPaymentStubIndexSource() bool {
	return m.Has(tag.UnderlyingPaymentStubIndexSource)
}

// HasUnderlyingPaymentStubIndexCurvePeriod returns true if UnderlyingPaymentStubIndexCurvePeriod is present, Tag 40716.
func (m NoUnderlyingPaymentStubs) HasUnderlyingPaymentStubIndexCurvePeriod() bool {
	return m.Has(tag.UnderlyingPaymentStubIndexCurvePeriod)
}

// HasUnderlyingPaymentStubIndexCurveUnit returns true if UnderlyingPaymentStubIndexCurveUnit is present, Tag 40717.
func (m NoUnderlyingPaymentStubs) HasUnderlyingPaymentStubIndexCurveUnit() bool {
	return m.Has(tag.UnderlyingPaymentStubIndexCurveUnit)
}

// HasUnderlyingPaymentStubIndexRateMultiplier returns true if UnderlyingPaymentStubIndexRateMultiplier is present, Tag 40718.
func (m NoUnderlyingPaymentStubs) HasUnderlyingPaymentStubIndexRateMultiplier() bool {
	return m.Has(tag.UnderlyingPaymentStubIndexRateMultiplier)
}

// HasUnderlyingPaymentStubIndexRateSpread returns true if UnderlyingPaymentStubIndexRateSpread is present, Tag 40719.
func (m NoUnderlyingPaymentStubs) HasUnderlyingPaymentStubIndexRateSpread() bool {
	return m.Has(tag.UnderlyingPaymentStubIndexRateSpread)
}

// HasUnderlyingPaymentStubIndexRateSpreadPositionType returns true if UnderlyingPaymentStubIndexRateSpreadPositionType is present, Tag 40720.
func (m NoUnderlyingPaymentStubs) HasUnderlyingPaymentStubIndexRateSpreadPositionType() bool {
	return m.Has(tag.UnderlyingPaymentStubIndexRateSpreadPositionType)
}

// HasUnderlyingPaymentStubIndexRateTreatment returns true if UnderlyingPaymentStubIndexRateTreatment is present, Tag 40721.
func (m NoUnderlyingPaymentStubs) HasUnderlyingPaymentStubIndexRateTreatment() bool {
	return m.Has(tag.UnderlyingPaymentStubIndexRateTreatment)
}

// HasUnderlyingPaymentStubIndexCapRate returns true if UnderlyingPaymentStubIndexCapRate is present, Tag 40722.
func (m NoUnderlyingPaymentStubs) HasUnderlyingPaymentStubIndexCapRate() bool {
	return m.Has(tag.UnderlyingPaymentStubIndexCapRate)
}

// HasUnderlyingPaymentStubIndexCapRateBuySide returns true if UnderlyingPaymentStubIndexCapRateBuySide is present, Tag 40723.
func (m NoUnderlyingPaymentStubs) HasUnderlyingPaymentStubIndexCapRateBuySide() bool {
	return m.Has(tag.UnderlyingPaymentStubIndexCapRateBuySide)
}

// HasUnderlyingPaymentStubIndexCapRateSellSide returns true if UnderlyingPaymentStubIndexCapRateSellSide is present, Tag 40724.
func (m NoUnderlyingPaymentStubs) HasUnderlyingPaymentStubIndexCapRateSellSide() bool {
	return m.Has(tag.UnderlyingPaymentStubIndexCapRateSellSide)
}

// HasUnderlyingPaymentStubIndexFloorRate returns true if UnderlyingPaymentStubIndexFloorRate is present, Tag 40725.
func (m NoUnderlyingPaymentStubs) HasUnderlyingPaymentStubIndexFloorRate() bool {
	return m.Has(tag.UnderlyingPaymentStubIndexFloorRate)
}

// HasUnderlyingPaymentStubIndexFloorRateBuySide returns true if UnderlyingPaymentStubIndexFloorRateBuySide is present, Tag 40726.
func (m NoUnderlyingPaymentStubs) HasUnderlyingPaymentStubIndexFloorRateBuySide() bool {
	return m.Has(tag.UnderlyingPaymentStubIndexFloorRateBuySide)
}

// HasUnderlyingPaymentStubIndexFloorRateSellSide returns true if UnderlyingPaymentStubIndexFloorRateSellSide is present, Tag 40727.
func (m NoUnderlyingPaymentStubs) HasUnderlyingPaymentStubIndexFloorRateSellSide() bool {
	return m.Has(tag.UnderlyingPaymentStubIndexFloorRateSellSide)
}

// HasUnderlyingPaymentStubIndex2 returns true if UnderlyingPaymentStubIndex2 is present, Tag 40728.
func (m NoUnderlyingPaymentStubs) HasUnderlyingPaymentStubIndex2() bool {
	return m.Has(tag.UnderlyingPaymentStubIndex2)
}

// HasUnderlyingPaymentStubIndex2Source returns true if UnderlyingPaymentStubIndex2Source is present, Tag 40729.
func (m NoUnderlyingPaymentStubs) HasUnderlyingPaymentStubIndex2Source() bool {
	return m.Has(tag.UnderlyingPaymentStubIndex2Source)
}

// HasUnderlyingPaymentStubIndex2CurvePeriod returns true if UnderlyingPaymentStubIndex2CurvePeriod is present, Tag 40730.
func (m NoUnderlyingPaymentStubs) HasUnderlyingPaymentStubIndex2CurvePeriod() bool {
	return m.Has(tag.UnderlyingPaymentStubIndex2CurvePeriod)
}

// HasUnderlyingPaymentStubIndex2CurveUnit returns true if UnderlyingPaymentStubIndex2CurveUnit is present, Tag 40731.
func (m NoUnderlyingPaymentStubs) HasUnderlyingPaymentStubIndex2CurveUnit() bool {
	return m.Has(tag.UnderlyingPaymentStubIndex2CurveUnit)
}

// HasUnderlyingPaymentStubIndex2RateMultiplier returns true if UnderlyingPaymentStubIndex2RateMultiplier is present, Tag 40732.
func (m NoUnderlyingPaymentStubs) HasUnderlyingPaymentStubIndex2RateMultiplier() bool {
	return m.Has(tag.UnderlyingPaymentStubIndex2RateMultiplier)
}

// HasUnderlyingPaymentStubIndex2RateSpread returns true if UnderlyingPaymentStubIndex2RateSpread is present, Tag 40733.
func (m NoUnderlyingPaymentStubs) HasUnderlyingPaymentStubIndex2RateSpread() bool {
	return m.Has(tag.UnderlyingPaymentStubIndex2RateSpread)
}

// HasUnderlyingPaymentStubIndex2RateSpreadPositionType returns true if UnderlyingPaymentStubIndex2RateSpreadPositionType is present, Tag 40734.
func (m NoUnderlyingPaymentStubs) HasUnderlyingPaymentStubIndex2RateSpreadPositionType() bool {
	return m.Has(tag.UnderlyingPaymentStubIndex2RateSpreadPositionType)
}

// HasUnderlyingPaymentStubIndex2RateTreatment returns true if UnderlyingPaymentStubIndex2RateTreatment is present, Tag 40735.
func (m NoUnderlyingPaymentStubs) HasUnderlyingPaymentStubIndex2RateTreatment() bool {
	return m.Has(tag.UnderlyingPaymentStubIndex2RateTreatment)
}

// HasUnderlyingPaymentStubIndex2CapRate returns true if UnderlyingPaymentStubIndex2CapRate is present, Tag 40736.
func (m NoUnderlyingPaymentStubs) HasUnderlyingPaymentStubIndex2CapRate() bool {
	return m.Has(tag.UnderlyingPaymentStubIndex2CapRate)
}

// HasUnderlyingPaymentStubIndex2FloorRate returns true if UnderlyingPaymentStubIndex2FloorRate is present, Tag 40737.
func (m NoUnderlyingPaymentStubs) HasUnderlyingPaymentStubIndex2FloorRate() bool {
	return m.Has(tag.UnderlyingPaymentStubIndex2FloorRate)
}

// HasUnderlyingPaymentStubStartDateUnadjusted returns true if UnderlyingPaymentStubStartDateUnadjusted is present, Tag 42993.
func (m NoUnderlyingPaymentStubs) HasUnderlyingPaymentStubStartDateUnadjusted() bool {
	return m.Has(tag.UnderlyingPaymentStubStartDateUnadjusted)
}

// HasUnderlyingPaymentStubStartDateBusinessDayConvention returns true if UnderlyingPaymentStubStartDateBusinessDayConvention is present, Tag 42994.
func (m NoUnderlyingPaymentStubs) HasUnderlyingPaymentStubStartDateBusinessDayConvention() bool {
	return m.Has(tag.UnderlyingPaymentStubStartDateBusinessDayConvention)
}

// HasNoUnderlyingPaymentStubStartDateBusinessCenters returns true if NoUnderlyingPaymentStubStartDateBusinessCenters is present, Tag 43000.
func (m NoUnderlyingPaymentStubs) HasNoUnderlyingPaymentStubStartDateBusinessCenters() bool {
	return m.Has(tag.NoUnderlyingPaymentStubStartDateBusinessCenters)
}

// HasUnderlyingPaymentStubStartDateRelativeTo returns true if UnderlyingPaymentStubStartDateRelativeTo is present, Tag 42995.
func (m NoUnderlyingPaymentStubs) HasUnderlyingPaymentStubStartDateRelativeTo() bool {
	return m.Has(tag.UnderlyingPaymentStubStartDateRelativeTo)
}

// HasUnderlyingPaymentStubStartDateOffsetPeriod returns true if UnderlyingPaymentStubStartDateOffsetPeriod is present, Tag 42996.
func (m NoUnderlyingPaymentStubs) HasUnderlyingPaymentStubStartDateOffsetPeriod() bool {
	return m.Has(tag.UnderlyingPaymentStubStartDateOffsetPeriod)
}

// HasUnderlyingPaymentStubStartDateOffsetUnit returns true if UnderlyingPaymentStubStartDateOffsetUnit is present, Tag 42997.
func (m NoUnderlyingPaymentStubs) HasUnderlyingPaymentStubStartDateOffsetUnit() bool {
	return m.Has(tag.UnderlyingPaymentStubStartDateOffsetUnit)
}

// HasUnderlyingPaymentStubStartDateOffsetDayType returns true if UnderlyingPaymentStubStartDateOffsetDayType is present, Tag 42998.
func (m NoUnderlyingPaymentStubs) HasUnderlyingPaymentStubStartDateOffsetDayType() bool {
	return m.Has(tag.UnderlyingPaymentStubStartDateOffsetDayType)
}

// HasUnderlyingPaymentStubStartDateAdjusted returns true if UnderlyingPaymentStubStartDateAdjusted is present, Tag 42999.
func (m NoUnderlyingPaymentStubs) HasUnderlyingPaymentStubStartDateAdjusted() bool {
	return m.Has(tag.UnderlyingPaymentStubStartDateAdjusted)
}

// HasUnderlyingPaymentStubEndDateUnadjusted returns true if UnderlyingPaymentStubEndDateUnadjusted is present, Tag 42984.
func (m NoUnderlyingPaymentStubs) HasUnderlyingPaymentStubEndDateUnadjusted() bool {
	return m.Has(tag.UnderlyingPaymentStubEndDateUnadjusted)
}

// HasUnderlyingPaymentStubEndDateBusinessDayConvention returns true if UnderlyingPaymentStubEndDateBusinessDayConvention is present, Tag 42985.
func (m NoUnderlyingPaymentStubs) HasUnderlyingPaymentStubEndDateBusinessDayConvention() bool {
	return m.Has(tag.UnderlyingPaymentStubEndDateBusinessDayConvention)
}

// HasNoUnderlyingPaymentStubEndDateBusinessCenters returns true if NoUnderlyingPaymentStubEndDateBusinessCenters is present, Tag 42991.
func (m NoUnderlyingPaymentStubs) HasNoUnderlyingPaymentStubEndDateBusinessCenters() bool {
	return m.Has(tag.NoUnderlyingPaymentStubEndDateBusinessCenters)
}

// HasUnderlyingPaymentStubEndDateRelativeTo returns true if UnderlyingPaymentStubEndDateRelativeTo is present, Tag 42986.
func (m NoUnderlyingPaymentStubs) HasUnderlyingPaymentStubEndDateRelativeTo() bool {
	return m.Has(tag.UnderlyingPaymentStubEndDateRelativeTo)
}

// HasUnderlyingPaymentStubEndDateOffsetPeriod returns true if UnderlyingPaymentStubEndDateOffsetPeriod is present, Tag 42987.
func (m NoUnderlyingPaymentStubs) HasUnderlyingPaymentStubEndDateOffsetPeriod() bool {
	return m.Has(tag.UnderlyingPaymentStubEndDateOffsetPeriod)
}

// HasUnderlyingPaymentStubEndDateOffsetUnit returns true if UnderlyingPaymentStubEndDateOffsetUnit is present, Tag 42988.
func (m NoUnderlyingPaymentStubs) HasUnderlyingPaymentStubEndDateOffsetUnit() bool {
	return m.Has(tag.UnderlyingPaymentStubEndDateOffsetUnit)
}

// HasUnderlyingPaymentStubEndDateOffsetDayType returns true if UnderlyingPaymentStubEndDateOffsetDayType is present, Tag 42989.
func (m NoUnderlyingPaymentStubs) HasUnderlyingPaymentStubEndDateOffsetDayType() bool {
	return m.Has(tag.UnderlyingPaymentStubEndDateOffsetDayType)
}

// HasUnderlyingPaymentStubEndDateAdjusted returns true if UnderlyingPaymentStubEndDateAdjusted is present, Tag 42990.
func (m NoUnderlyingPaymentStubs) HasUnderlyingPaymentStubEndDateAdjusted() bool {
	return m.Has(tag.UnderlyingPaymentStubEndDateAdjusted)
}

// NoUnderlyingPaymentStubStartDateBusinessCenters is a repeating group element, Tag 43000.
type NoUnderlyingPaymentStubStartDateBusinessCenters struct {
	*quickfix.Group
}

// SetUnderlyingPaymentStubStartDateBusinessCenter sets UnderlyingPaymentStubStartDateBusinessCenter, Tag 43001.
func (m NoUnderlyingPaymentStubStartDateBusinessCenters) SetUnderlyingPaymentStubStartDateBusinessCenter(v string) {
	m.Set(field.NewUnderlyingPaymentStubStartDateBusinessCenter(v))
}

// GetUnderlyingPaymentStubStartDateBusinessCenter gets UnderlyingPaymentStubStartDateBusinessCenter, Tag 43001.
func (m NoUnderlyingPaymentStubStartDateBusinessCenters) GetUnderlyingPaymentStubStartDateBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStubStartDateBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingPaymentStubStartDateBusinessCenter returns true if UnderlyingPaymentStubStartDateBusinessCenter is present, Tag 43001.
func (m NoUnderlyingPaymentStubStartDateBusinessCenters) HasUnderlyingPaymentStubStartDateBusinessCenter() bool {
	return m.Has(tag.UnderlyingPaymentStubStartDateBusinessCenter)
}

// NoUnderlyingPaymentStubStartDateBusinessCentersRepeatingGroup is a repeating group, Tag 43000.
type NoUnderlyingPaymentStubStartDateBusinessCentersRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingPaymentStubStartDateBusinessCentersRepeatingGroup returns an initialized, NoUnderlyingPaymentStubStartDateBusinessCentersRepeatingGroup.
func NewNoUnderlyingPaymentStubStartDateBusinessCentersRepeatingGroup() NoUnderlyingPaymentStubStartDateBusinessCentersRepeatingGroup {
	return NoUnderlyingPaymentStubStartDateBusinessCentersRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingPaymentStubStartDateBusinessCenters,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingPaymentStubStartDateBusinessCenter),
			},
		),
	}
}

// Add create and append a new NoUnderlyingPaymentStubStartDateBusinessCenters to this group.
func (m NoUnderlyingPaymentStubStartDateBusinessCentersRepeatingGroup) Add() NoUnderlyingPaymentStubStartDateBusinessCenters {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingPaymentStubStartDateBusinessCenters{g}
}

// Get returns the ith NoUnderlyingPaymentStubStartDateBusinessCenters in the NoUnderlyingPaymentStubStartDateBusinessCentersRepeatinGroup.
func (m NoUnderlyingPaymentStubStartDateBusinessCentersRepeatingGroup) Get(i int) NoUnderlyingPaymentStubStartDateBusinessCenters {
	return NoUnderlyingPaymentStubStartDateBusinessCenters{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingPaymentStubEndDateBusinessCenters is a repeating group element, Tag 42991.
type NoUnderlyingPaymentStubEndDateBusinessCenters struct {
	*quickfix.Group
}

// SetUnderlyingPaymentStubEndDateBusinessCenter sets UnderlyingPaymentStubEndDateBusinessCenter, Tag 42992.
func (m NoUnderlyingPaymentStubEndDateBusinessCenters) SetUnderlyingPaymentStubEndDateBusinessCenter(v string) {
	m.Set(field.NewUnderlyingPaymentStubEndDateBusinessCenter(v))
}

// GetUnderlyingPaymentStubEndDateBusinessCenter gets UnderlyingPaymentStubEndDateBusinessCenter, Tag 42992.
func (m NoUnderlyingPaymentStubEndDateBusinessCenters) GetUnderlyingPaymentStubEndDateBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStubEndDateBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingPaymentStubEndDateBusinessCenter returns true if UnderlyingPaymentStubEndDateBusinessCenter is present, Tag 42992.
func (m NoUnderlyingPaymentStubEndDateBusinessCenters) HasUnderlyingPaymentStubEndDateBusinessCenter() bool {
	return m.Has(tag.UnderlyingPaymentStubEndDateBusinessCenter)
}

// NoUnderlyingPaymentStubEndDateBusinessCentersRepeatingGroup is a repeating group, Tag 42991.
type NoUnderlyingPaymentStubEndDateBusinessCentersRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingPaymentStubEndDateBusinessCentersRepeatingGroup returns an initialized, NoUnderlyingPaymentStubEndDateBusinessCentersRepeatingGroup.
func NewNoUnderlyingPaymentStubEndDateBusinessCentersRepeatingGroup() NoUnderlyingPaymentStubEndDateBusinessCentersRepeatingGroup {
	return NoUnderlyingPaymentStubEndDateBusinessCentersRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingPaymentStubEndDateBusinessCenters,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingPaymentStubEndDateBusinessCenter),
			},
		),
	}
}

// Add create and append a new NoUnderlyingPaymentStubEndDateBusinessCenters to this group.
func (m NoUnderlyingPaymentStubEndDateBusinessCentersRepeatingGroup) Add() NoUnderlyingPaymentStubEndDateBusinessCenters {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingPaymentStubEndDateBusinessCenters{g}
}

// Get returns the ith NoUnderlyingPaymentStubEndDateBusinessCenters in the NoUnderlyingPaymentStubEndDateBusinessCentersRepeatinGroup.
func (m NoUnderlyingPaymentStubEndDateBusinessCentersRepeatingGroup) Get(i int) NoUnderlyingPaymentStubEndDateBusinessCenters {
	return NoUnderlyingPaymentStubEndDateBusinessCenters{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingPaymentStubsRepeatingGroup is a repeating group, Tag 40708.
type NoUnderlyingPaymentStubsRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingPaymentStubsRepeatingGroup returns an initialized, NoUnderlyingPaymentStubsRepeatingGroup.
func NewNoUnderlyingPaymentStubsRepeatingGroup() NoUnderlyingPaymentStubsRepeatingGroup {
	return NoUnderlyingPaymentStubsRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingPaymentStubs,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingPaymentStubType),
				quickfix.GroupElement(tag.UnderlyingPaymentStubLength),
				quickfix.GroupElement(tag.UnderlyingPaymentStubRate),
				quickfix.GroupElement(tag.UnderlyingPaymentStubFixedAmount),
				quickfix.GroupElement(tag.UnderlyingPaymentStubFixedCurrency),
				quickfix.GroupElement(tag.UnderlyingPaymentStubIndex),
				quickfix.GroupElement(tag.UnderlyingPaymentStubIndexSource),
				quickfix.GroupElement(tag.UnderlyingPaymentStubIndexCurvePeriod),
				quickfix.GroupElement(tag.UnderlyingPaymentStubIndexCurveUnit),
				quickfix.GroupElement(tag.UnderlyingPaymentStubIndexRateMultiplier),
				quickfix.GroupElement(tag.UnderlyingPaymentStubIndexRateSpread),
				quickfix.GroupElement(tag.UnderlyingPaymentStubIndexRateSpreadPositionType),
				quickfix.GroupElement(tag.UnderlyingPaymentStubIndexRateTreatment),
				quickfix.GroupElement(tag.UnderlyingPaymentStubIndexCapRate),
				quickfix.GroupElement(tag.UnderlyingPaymentStubIndexCapRateBuySide),
				quickfix.GroupElement(tag.UnderlyingPaymentStubIndexCapRateSellSide),
				quickfix.GroupElement(tag.UnderlyingPaymentStubIndexFloorRate),
				quickfix.GroupElement(tag.UnderlyingPaymentStubIndexFloorRateBuySide),
				quickfix.GroupElement(tag.UnderlyingPaymentStubIndexFloorRateSellSide),
				quickfix.GroupElement(tag.UnderlyingPaymentStubIndex2),
				quickfix.GroupElement(tag.UnderlyingPaymentStubIndex2Source),
				quickfix.GroupElement(tag.UnderlyingPaymentStubIndex2CurvePeriod),
				quickfix.GroupElement(tag.UnderlyingPaymentStubIndex2CurveUnit),
				quickfix.GroupElement(tag.UnderlyingPaymentStubIndex2RateMultiplier),
				quickfix.GroupElement(tag.UnderlyingPaymentStubIndex2RateSpread),
				quickfix.GroupElement(tag.UnderlyingPaymentStubIndex2RateSpreadPositionType),
				quickfix.GroupElement(tag.UnderlyingPaymentStubIndex2RateTreatment),
				quickfix.GroupElement(tag.UnderlyingPaymentStubIndex2CapRate),
				quickfix.GroupElement(tag.UnderlyingPaymentStubIndex2FloorRate),
				quickfix.GroupElement(tag.UnderlyingPaymentStubStartDateUnadjusted),
				quickfix.GroupElement(tag.UnderlyingPaymentStubStartDateBusinessDayConvention),
				NewNoUnderlyingPaymentStubStartDateBusinessCentersRepeatingGroup(),
				quickfix.GroupElement(tag.UnderlyingPaymentStubStartDateRelativeTo),
				quickfix.GroupElement(tag.UnderlyingPaymentStubStartDateOffsetPeriod),
				quickfix.GroupElement(tag.UnderlyingPaymentStubStartDateOffsetUnit),
				quickfix.GroupElement(tag.UnderlyingPaymentStubStartDateOffsetDayType),
				quickfix.GroupElement(tag.UnderlyingPaymentStubStartDateAdjusted),
				quickfix.GroupElement(tag.UnderlyingPaymentStubEndDateUnadjusted),
				quickfix.GroupElement(tag.UnderlyingPaymentStubEndDateBusinessDayConvention),
				NewNoUnderlyingPaymentStubEndDateBusinessCentersRepeatingGroup(),
				quickfix.GroupElement(tag.UnderlyingPaymentStubEndDateRelativeTo),
				quickfix.GroupElement(tag.UnderlyingPaymentStubEndDateOffsetPeriod),
				quickfix.GroupElement(tag.UnderlyingPaymentStubEndDateOffsetUnit),
				quickfix.GroupElement(tag.UnderlyingPaymentStubEndDateOffsetDayType),
				quickfix.GroupElement(tag.UnderlyingPaymentStubEndDateAdjusted),
			},
		),
	}
}

// Add create and append a new NoUnderlyingPaymentStubs to this group.
func (m NoUnderlyingPaymentStubsRepeatingGroup) Add() NoUnderlyingPaymentStubs {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingPaymentStubs{g}
}

// Get returns the ith NoUnderlyingPaymentStubs in the NoUnderlyingPaymentStubsRepeatinGroup.
func (m NoUnderlyingPaymentStubsRepeatingGroup) Get(i int) NoUnderlyingPaymentStubs {
	return NoUnderlyingPaymentStubs{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingStreamCommodityAltIDs is a repeating group element, Tag 41990.
type NoUnderlyingStreamCommodityAltIDs struct {
	*quickfix.Group
}

// SetUnderlyingStreamCommodityAltID sets UnderlyingStreamCommodityAltID, Tag 41991.
func (m NoUnderlyingStreamCommodityAltIDs) SetUnderlyingStreamCommodityAltID(v string) {
	m.Set(field.NewUnderlyingStreamCommodityAltID(v))
}

// SetUnderlyingStreamCommodityAltIDSource sets UnderlyingStreamCommodityAltIDSource, Tag 41992.
func (m NoUnderlyingStreamCommodityAltIDs) SetUnderlyingStreamCommodityAltIDSource(v string) {
	m.Set(field.NewUnderlyingStreamCommodityAltIDSource(v))
}

// GetUnderlyingStreamCommodityAltID gets UnderlyingStreamCommodityAltID, Tag 41991.
func (m NoUnderlyingStreamCommodityAltIDs) GetUnderlyingStreamCommodityAltID() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamCommodityAltIDField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStreamCommodityAltIDSource gets UnderlyingStreamCommodityAltIDSource, Tag 41992.
func (m NoUnderlyingStreamCommodityAltIDs) GetUnderlyingStreamCommodityAltIDSource() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamCommodityAltIDSourceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingStreamCommodityAltID returns true if UnderlyingStreamCommodityAltID is present, Tag 41991.
func (m NoUnderlyingStreamCommodityAltIDs) HasUnderlyingStreamCommodityAltID() bool {
	return m.Has(tag.UnderlyingStreamCommodityAltID)
}

// HasUnderlyingStreamCommodityAltIDSource returns true if UnderlyingStreamCommodityAltIDSource is present, Tag 41992.
func (m NoUnderlyingStreamCommodityAltIDs) HasUnderlyingStreamCommodityAltIDSource() bool {
	return m.Has(tag.UnderlyingStreamCommodityAltIDSource)
}

// NoUnderlyingStreamCommodityAltIDsRepeatingGroup is a repeating group, Tag 41990.
type NoUnderlyingStreamCommodityAltIDsRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingStreamCommodityAltIDsRepeatingGroup returns an initialized, NoUnderlyingStreamCommodityAltIDsRepeatingGroup.
func NewNoUnderlyingStreamCommodityAltIDsRepeatingGroup() NoUnderlyingStreamCommodityAltIDsRepeatingGroup {
	return NoUnderlyingStreamCommodityAltIDsRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingStreamCommodityAltIDs,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingStreamCommodityAltID),
				quickfix.GroupElement(tag.UnderlyingStreamCommodityAltIDSource),
			},
		),
	}
}

// Add create and append a new NoUnderlyingStreamCommodityAltIDs to this group.
func (m NoUnderlyingStreamCommodityAltIDsRepeatingGroup) Add() NoUnderlyingStreamCommodityAltIDs {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingStreamCommodityAltIDs{g}
}

// Get returns the ith NoUnderlyingStreamCommodityAltIDs in the NoUnderlyingStreamCommodityAltIDsRepeatinGroup.
func (m NoUnderlyingStreamCommodityAltIDsRepeatingGroup) Get(i int) NoUnderlyingStreamCommodityAltIDs {
	return NoUnderlyingStreamCommodityAltIDs{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingStreamAssetAttributes is a repeating group element, Tag 41800.
type NoUnderlyingStreamAssetAttributes struct {
	*quickfix.Group
}

// SetUnderlyingStreamAssetAttributeType sets UnderlyingStreamAssetAttributeType, Tag 41801.
func (m NoUnderlyingStreamAssetAttributes) SetUnderlyingStreamAssetAttributeType(v string) {
	m.Set(field.NewUnderlyingStreamAssetAttributeType(v))
}

// SetUnderlyingStreamAssetAttributeValue sets UnderlyingStreamAssetAttributeValue, Tag 41802.
func (m NoUnderlyingStreamAssetAttributes) SetUnderlyingStreamAssetAttributeValue(v string) {
	m.Set(field.NewUnderlyingStreamAssetAttributeValue(v))
}

// SetUnderlyingStreamAssetAttributeLimit sets UnderlyingStreamAssetAttributeLimit, Tag 41803.
func (m NoUnderlyingStreamAssetAttributes) SetUnderlyingStreamAssetAttributeLimit(v string) {
	m.Set(field.NewUnderlyingStreamAssetAttributeLimit(v))
}

// GetUnderlyingStreamAssetAttributeType gets UnderlyingStreamAssetAttributeType, Tag 41801.
func (m NoUnderlyingStreamAssetAttributes) GetUnderlyingStreamAssetAttributeType() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamAssetAttributeTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStreamAssetAttributeValue gets UnderlyingStreamAssetAttributeValue, Tag 41802.
func (m NoUnderlyingStreamAssetAttributes) GetUnderlyingStreamAssetAttributeValue() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamAssetAttributeValueField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStreamAssetAttributeLimit gets UnderlyingStreamAssetAttributeLimit, Tag 41803.
func (m NoUnderlyingStreamAssetAttributes) GetUnderlyingStreamAssetAttributeLimit() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamAssetAttributeLimitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingStreamAssetAttributeType returns true if UnderlyingStreamAssetAttributeType is present, Tag 41801.
func (m NoUnderlyingStreamAssetAttributes) HasUnderlyingStreamAssetAttributeType() bool {
	return m.Has(tag.UnderlyingStreamAssetAttributeType)
}

// HasUnderlyingStreamAssetAttributeValue returns true if UnderlyingStreamAssetAttributeValue is present, Tag 41802.
func (m NoUnderlyingStreamAssetAttributes) HasUnderlyingStreamAssetAttributeValue() bool {
	return m.Has(tag.UnderlyingStreamAssetAttributeValue)
}

// HasUnderlyingStreamAssetAttributeLimit returns true if UnderlyingStreamAssetAttributeLimit is present, Tag 41803.
func (m NoUnderlyingStreamAssetAttributes) HasUnderlyingStreamAssetAttributeLimit() bool {
	return m.Has(tag.UnderlyingStreamAssetAttributeLimit)
}

// NoUnderlyingStreamAssetAttributesRepeatingGroup is a repeating group, Tag 41800.
type NoUnderlyingStreamAssetAttributesRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingStreamAssetAttributesRepeatingGroup returns an initialized, NoUnderlyingStreamAssetAttributesRepeatingGroup.
func NewNoUnderlyingStreamAssetAttributesRepeatingGroup() NoUnderlyingStreamAssetAttributesRepeatingGroup {
	return NoUnderlyingStreamAssetAttributesRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingStreamAssetAttributes,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingStreamAssetAttributeType),
				quickfix.GroupElement(tag.UnderlyingStreamAssetAttributeValue),
				quickfix.GroupElement(tag.UnderlyingStreamAssetAttributeLimit),
			},
		),
	}
}

// Add create and append a new NoUnderlyingStreamAssetAttributes to this group.
func (m NoUnderlyingStreamAssetAttributesRepeatingGroup) Add() NoUnderlyingStreamAssetAttributes {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingStreamAssetAttributes{g}
}

// Get returns the ith NoUnderlyingStreamAssetAttributes in the NoUnderlyingStreamAssetAttributesRepeatinGroup.
func (m NoUnderlyingStreamAssetAttributesRepeatingGroup) Get(i int) NoUnderlyingStreamAssetAttributes {
	return NoUnderlyingStreamAssetAttributes{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingStreamCommodityDataSources is a repeating group element, Tag 41993.
type NoUnderlyingStreamCommodityDataSources struct {
	*quickfix.Group
}

// SetUnderlyingStreamCommodityDataSourceID sets UnderlyingStreamCommodityDataSourceID, Tag 41994.
func (m NoUnderlyingStreamCommodityDataSources) SetUnderlyingStreamCommodityDataSourceID(v string) {
	m.Set(field.NewUnderlyingStreamCommodityDataSourceID(v))
}

// SetUnderlyingStreamCommodityDataSourceIDType sets UnderlyingStreamCommodityDataSourceIDType, Tag 41995.
func (m NoUnderlyingStreamCommodityDataSources) SetUnderlyingStreamCommodityDataSourceIDType(v int) {
	m.Set(field.NewUnderlyingStreamCommodityDataSourceIDType(v))
}

// GetUnderlyingStreamCommodityDataSourceID gets UnderlyingStreamCommodityDataSourceID, Tag 41994.
func (m NoUnderlyingStreamCommodityDataSources) GetUnderlyingStreamCommodityDataSourceID() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamCommodityDataSourceIDField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStreamCommodityDataSourceIDType gets UnderlyingStreamCommodityDataSourceIDType, Tag 41995.
func (m NoUnderlyingStreamCommodityDataSources) GetUnderlyingStreamCommodityDataSourceIDType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamCommodityDataSourceIDTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingStreamCommodityDataSourceID returns true if UnderlyingStreamCommodityDataSourceID is present, Tag 41994.
func (m NoUnderlyingStreamCommodityDataSources) HasUnderlyingStreamCommodityDataSourceID() bool {
	return m.Has(tag.UnderlyingStreamCommodityDataSourceID)
}

// HasUnderlyingStreamCommodityDataSourceIDType returns true if UnderlyingStreamCommodityDataSourceIDType is present, Tag 41995.
func (m NoUnderlyingStreamCommodityDataSources) HasUnderlyingStreamCommodityDataSourceIDType() bool {
	return m.Has(tag.UnderlyingStreamCommodityDataSourceIDType)
}

// NoUnderlyingStreamCommodityDataSourcesRepeatingGroup is a repeating group, Tag 41993.
type NoUnderlyingStreamCommodityDataSourcesRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingStreamCommodityDataSourcesRepeatingGroup returns an initialized, NoUnderlyingStreamCommodityDataSourcesRepeatingGroup.
func NewNoUnderlyingStreamCommodityDataSourcesRepeatingGroup() NoUnderlyingStreamCommodityDataSourcesRepeatingGroup {
	return NoUnderlyingStreamCommodityDataSourcesRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingStreamCommodityDataSources,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingStreamCommodityDataSourceID),
				quickfix.GroupElement(tag.UnderlyingStreamCommodityDataSourceIDType),
			},
		),
	}
}

// Add create and append a new NoUnderlyingStreamCommodityDataSources to this group.
func (m NoUnderlyingStreamCommodityDataSourcesRepeatingGroup) Add() NoUnderlyingStreamCommodityDataSources {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingStreamCommodityDataSources{g}
}

// Get returns the ith NoUnderlyingStreamCommodityDataSources in the NoUnderlyingStreamCommodityDataSourcesRepeatinGroup.
func (m NoUnderlyingStreamCommodityDataSourcesRepeatingGroup) Get(i int) NoUnderlyingStreamCommodityDataSources {
	return NoUnderlyingStreamCommodityDataSources{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingStreamCommoditySettlBusinessCenters is a repeating group element, Tag 41962.
type NoUnderlyingStreamCommoditySettlBusinessCenters struct {
	*quickfix.Group
}

// SetUnderlyingStreamCommoditySettlBusinessCenter sets UnderlyingStreamCommoditySettlBusinessCenter, Tag 41963.
func (m NoUnderlyingStreamCommoditySettlBusinessCenters) SetUnderlyingStreamCommoditySettlBusinessCenter(v string) {
	m.Set(field.NewUnderlyingStreamCommoditySettlBusinessCenter(v))
}

// GetUnderlyingStreamCommoditySettlBusinessCenter gets UnderlyingStreamCommoditySettlBusinessCenter, Tag 41963.
func (m NoUnderlyingStreamCommoditySettlBusinessCenters) GetUnderlyingStreamCommoditySettlBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamCommoditySettlBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingStreamCommoditySettlBusinessCenter returns true if UnderlyingStreamCommoditySettlBusinessCenter is present, Tag 41963.
func (m NoUnderlyingStreamCommoditySettlBusinessCenters) HasUnderlyingStreamCommoditySettlBusinessCenter() bool {
	return m.Has(tag.UnderlyingStreamCommoditySettlBusinessCenter)
}

// NoUnderlyingStreamCommoditySettlBusinessCentersRepeatingGroup is a repeating group, Tag 41962.
type NoUnderlyingStreamCommoditySettlBusinessCentersRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingStreamCommoditySettlBusinessCentersRepeatingGroup returns an initialized, NoUnderlyingStreamCommoditySettlBusinessCentersRepeatingGroup.
func NewNoUnderlyingStreamCommoditySettlBusinessCentersRepeatingGroup() NoUnderlyingStreamCommoditySettlBusinessCentersRepeatingGroup {
	return NoUnderlyingStreamCommoditySettlBusinessCentersRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingStreamCommoditySettlBusinessCenters,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingStreamCommoditySettlBusinessCenter),
			},
		),
	}
}

// Add create and append a new NoUnderlyingStreamCommoditySettlBusinessCenters to this group.
func (m NoUnderlyingStreamCommoditySettlBusinessCentersRepeatingGroup) Add() NoUnderlyingStreamCommoditySettlBusinessCenters {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingStreamCommoditySettlBusinessCenters{g}
}

// Get returns the ith NoUnderlyingStreamCommoditySettlBusinessCenters in the NoUnderlyingStreamCommoditySettlBusinessCentersRepeatinGroup.
func (m NoUnderlyingStreamCommoditySettlBusinessCentersRepeatingGroup) Get(i int) NoUnderlyingStreamCommoditySettlBusinessCenters {
	return NoUnderlyingStreamCommoditySettlBusinessCenters{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingStreamCommoditySettlPeriods is a repeating group element, Tag 42002.
type NoUnderlyingStreamCommoditySettlPeriods struct {
	*quickfix.Group
}

// SetUnderlyingStreamCommoditySettlCountry sets UnderlyingStreamCommoditySettlCountry, Tag 42003.
func (m NoUnderlyingStreamCommoditySettlPeriods) SetUnderlyingStreamCommoditySettlCountry(v string) {
	m.Set(field.NewUnderlyingStreamCommoditySettlCountry(v))
}

// SetUnderlyingStreamCommoditySettlTimeZone sets UnderlyingStreamCommoditySettlTimeZone, Tag 42004.
func (m NoUnderlyingStreamCommoditySettlPeriods) SetUnderlyingStreamCommoditySettlTimeZone(v string) {
	m.Set(field.NewUnderlyingStreamCommoditySettlTimeZone(v))
}

// SetUnderlyingStreamCommoditySettlFlowType sets UnderlyingStreamCommoditySettlFlowType, Tag 42005.
func (m NoUnderlyingStreamCommoditySettlPeriods) SetUnderlyingStreamCommoditySettlFlowType(v int) {
	m.Set(field.NewUnderlyingStreamCommoditySettlFlowType(v))
}

// SetUnderlyingStreamCommoditySettlPeriodNotional sets UnderlyingStreamCommoditySettlPeriodNotional, Tag 42006.
func (m NoUnderlyingStreamCommoditySettlPeriods) SetUnderlyingStreamCommoditySettlPeriodNotional(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingStreamCommoditySettlPeriodNotional(value, scale))
}

// SetUnderlyingStreamCommoditySettlPeriodNotionalUnitOfMeasure sets UnderlyingStreamCommoditySettlPeriodNotionalUnitOfMeasure, Tag 42007.
func (m NoUnderlyingStreamCommoditySettlPeriods) SetUnderlyingStreamCommoditySettlPeriodNotionalUnitOfMeasure(v string) {
	m.Set(field.NewUnderlyingStreamCommoditySettlPeriodNotionalUnitOfMeasure(v))
}

// SetUnderlyingStreamCommoditySettlPeriodFrequencyPeriod sets UnderlyingStreamCommoditySettlPeriodFrequencyPeriod, Tag 42008.
func (m NoUnderlyingStreamCommoditySettlPeriods) SetUnderlyingStreamCommoditySettlPeriodFrequencyPeriod(v int) {
	m.Set(field.NewUnderlyingStreamCommoditySettlPeriodFrequencyPeriod(v))
}

// SetUnderlyingStreamCommoditySettlPeriodFrequencyUnit sets UnderlyingStreamCommoditySettlPeriodFrequencyUnit, Tag 42009.
func (m NoUnderlyingStreamCommoditySettlPeriods) SetUnderlyingStreamCommoditySettlPeriodFrequencyUnit(v string) {
	m.Set(field.NewUnderlyingStreamCommoditySettlPeriodFrequencyUnit(v))
}

// SetUnderlyingStreamCommoditySettlPeriodPrice sets UnderlyingStreamCommoditySettlPeriodPrice, Tag 42010.
func (m NoUnderlyingStreamCommoditySettlPeriods) SetUnderlyingStreamCommoditySettlPeriodPrice(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingStreamCommoditySettlPeriodPrice(value, scale))
}

// SetUnderlyingStreamCommoditySettlPeriodPriceUnitOfMeasure sets UnderlyingStreamCommoditySettlPeriodPriceUnitOfMeasure, Tag 42011.
func (m NoUnderlyingStreamCommoditySettlPeriods) SetUnderlyingStreamCommoditySettlPeriodPriceUnitOfMeasure(v string) {
	m.Set(field.NewUnderlyingStreamCommoditySettlPeriodPriceUnitOfMeasure(v))
}

// SetUnderlyingStreamCommoditySettlPeriodPriceCurrency sets UnderlyingStreamCommoditySettlPeriodPriceCurrency, Tag 42012.
func (m NoUnderlyingStreamCommoditySettlPeriods) SetUnderlyingStreamCommoditySettlPeriodPriceCurrency(v string) {
	m.Set(field.NewUnderlyingStreamCommoditySettlPeriodPriceCurrency(v))
}

// SetUnderlyingStreamCommoditySettlHolidaysProcessingInstruction sets UnderlyingStreamCommoditySettlHolidaysProcessingInstruction, Tag 42013.
func (m NoUnderlyingStreamCommoditySettlPeriods) SetUnderlyingStreamCommoditySettlHolidaysProcessingInstruction(v int) {
	m.Set(field.NewUnderlyingStreamCommoditySettlHolidaysProcessingInstruction(v))
}

// SetNoUnderlyingStreamCommoditySettlDays sets NoUnderlyingStreamCommoditySettlDays, Tag 41996.
func (m NoUnderlyingStreamCommoditySettlPeriods) SetNoUnderlyingStreamCommoditySettlDays(f NoUnderlyingStreamCommoditySettlDaysRepeatingGroup) {
	m.SetGroup(f)
}

// SetUnderlyingStreamCommoditySettlPeriodXID sets UnderlyingStreamCommoditySettlPeriodXID, Tag 42014.
func (m NoUnderlyingStreamCommoditySettlPeriods) SetUnderlyingStreamCommoditySettlPeriodXID(v string) {
	m.Set(field.NewUnderlyingStreamCommoditySettlPeriodXID(v))
}

// SetUnderlyingStreamCommoditySettlPeriodXIDRef sets UnderlyingStreamCommoditySettlPeriodXIDRef, Tag 42015.
func (m NoUnderlyingStreamCommoditySettlPeriods) SetUnderlyingStreamCommoditySettlPeriodXIDRef(v string) {
	m.Set(field.NewUnderlyingStreamCommoditySettlPeriodXIDRef(v))
}

// GetUnderlyingStreamCommoditySettlCountry gets UnderlyingStreamCommoditySettlCountry, Tag 42003.
func (m NoUnderlyingStreamCommoditySettlPeriods) GetUnderlyingStreamCommoditySettlCountry() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamCommoditySettlCountryField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStreamCommoditySettlTimeZone gets UnderlyingStreamCommoditySettlTimeZone, Tag 42004.
func (m NoUnderlyingStreamCommoditySettlPeriods) GetUnderlyingStreamCommoditySettlTimeZone() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamCommoditySettlTimeZoneField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStreamCommoditySettlFlowType gets UnderlyingStreamCommoditySettlFlowType, Tag 42005.
func (m NoUnderlyingStreamCommoditySettlPeriods) GetUnderlyingStreamCommoditySettlFlowType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamCommoditySettlFlowTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStreamCommoditySettlPeriodNotional gets UnderlyingStreamCommoditySettlPeriodNotional, Tag 42006.
func (m NoUnderlyingStreamCommoditySettlPeriods) GetUnderlyingStreamCommoditySettlPeriodNotional() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamCommoditySettlPeriodNotionalField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStreamCommoditySettlPeriodNotionalUnitOfMeasure gets UnderlyingStreamCommoditySettlPeriodNotionalUnitOfMeasure, Tag 42007.
func (m NoUnderlyingStreamCommoditySettlPeriods) GetUnderlyingStreamCommoditySettlPeriodNotionalUnitOfMeasure() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamCommoditySettlPeriodNotionalUnitOfMeasureField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStreamCommoditySettlPeriodFrequencyPeriod gets UnderlyingStreamCommoditySettlPeriodFrequencyPeriod, Tag 42008.
func (m NoUnderlyingStreamCommoditySettlPeriods) GetUnderlyingStreamCommoditySettlPeriodFrequencyPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamCommoditySettlPeriodFrequencyPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStreamCommoditySettlPeriodFrequencyUnit gets UnderlyingStreamCommoditySettlPeriodFrequencyUnit, Tag 42009.
func (m NoUnderlyingStreamCommoditySettlPeriods) GetUnderlyingStreamCommoditySettlPeriodFrequencyUnit() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamCommoditySettlPeriodFrequencyUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStreamCommoditySettlPeriodPrice gets UnderlyingStreamCommoditySettlPeriodPrice, Tag 42010.
func (m NoUnderlyingStreamCommoditySettlPeriods) GetUnderlyingStreamCommoditySettlPeriodPrice() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamCommoditySettlPeriodPriceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStreamCommoditySettlPeriodPriceUnitOfMeasure gets UnderlyingStreamCommoditySettlPeriodPriceUnitOfMeasure, Tag 42011.
func (m NoUnderlyingStreamCommoditySettlPeriods) GetUnderlyingStreamCommoditySettlPeriodPriceUnitOfMeasure() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamCommoditySettlPeriodPriceUnitOfMeasureField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStreamCommoditySettlPeriodPriceCurrency gets UnderlyingStreamCommoditySettlPeriodPriceCurrency, Tag 42012.
func (m NoUnderlyingStreamCommoditySettlPeriods) GetUnderlyingStreamCommoditySettlPeriodPriceCurrency() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamCommoditySettlPeriodPriceCurrencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStreamCommoditySettlHolidaysProcessingInstruction gets UnderlyingStreamCommoditySettlHolidaysProcessingInstruction, Tag 42013.
func (m NoUnderlyingStreamCommoditySettlPeriods) GetUnderlyingStreamCommoditySettlHolidaysProcessingInstruction() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamCommoditySettlHolidaysProcessingInstructionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUnderlyingStreamCommoditySettlDays gets NoUnderlyingStreamCommoditySettlDays, Tag 41996.
func (m NoUnderlyingStreamCommoditySettlPeriods) GetNoUnderlyingStreamCommoditySettlDays() (NoUnderlyingStreamCommoditySettlDaysRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingStreamCommoditySettlDaysRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetUnderlyingStreamCommoditySettlPeriodXID gets UnderlyingStreamCommoditySettlPeriodXID, Tag 42014.
func (m NoUnderlyingStreamCommoditySettlPeriods) GetUnderlyingStreamCommoditySettlPeriodXID() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamCommoditySettlPeriodXIDField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStreamCommoditySettlPeriodXIDRef gets UnderlyingStreamCommoditySettlPeriodXIDRef, Tag 42015.
func (m NoUnderlyingStreamCommoditySettlPeriods) GetUnderlyingStreamCommoditySettlPeriodXIDRef() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamCommoditySettlPeriodXIDRefField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingStreamCommoditySettlCountry returns true if UnderlyingStreamCommoditySettlCountry is present, Tag 42003.
func (m NoUnderlyingStreamCommoditySettlPeriods) HasUnderlyingStreamCommoditySettlCountry() bool {
	return m.Has(tag.UnderlyingStreamCommoditySettlCountry)
}

// HasUnderlyingStreamCommoditySettlTimeZone returns true if UnderlyingStreamCommoditySettlTimeZone is present, Tag 42004.
func (m NoUnderlyingStreamCommoditySettlPeriods) HasUnderlyingStreamCommoditySettlTimeZone() bool {
	return m.Has(tag.UnderlyingStreamCommoditySettlTimeZone)
}

// HasUnderlyingStreamCommoditySettlFlowType returns true if UnderlyingStreamCommoditySettlFlowType is present, Tag 42005.
func (m NoUnderlyingStreamCommoditySettlPeriods) HasUnderlyingStreamCommoditySettlFlowType() bool {
	return m.Has(tag.UnderlyingStreamCommoditySettlFlowType)
}

// HasUnderlyingStreamCommoditySettlPeriodNotional returns true if UnderlyingStreamCommoditySettlPeriodNotional is present, Tag 42006.
func (m NoUnderlyingStreamCommoditySettlPeriods) HasUnderlyingStreamCommoditySettlPeriodNotional() bool {
	return m.Has(tag.UnderlyingStreamCommoditySettlPeriodNotional)
}

// HasUnderlyingStreamCommoditySettlPeriodNotionalUnitOfMeasure returns true if UnderlyingStreamCommoditySettlPeriodNotionalUnitOfMeasure is present, Tag 42007.
func (m NoUnderlyingStreamCommoditySettlPeriods) HasUnderlyingStreamCommoditySettlPeriodNotionalUnitOfMeasure() bool {
	return m.Has(tag.UnderlyingStreamCommoditySettlPeriodNotionalUnitOfMeasure)
}

// HasUnderlyingStreamCommoditySettlPeriodFrequencyPeriod returns true if UnderlyingStreamCommoditySettlPeriodFrequencyPeriod is present, Tag 42008.
func (m NoUnderlyingStreamCommoditySettlPeriods) HasUnderlyingStreamCommoditySettlPeriodFrequencyPeriod() bool {
	return m.Has(tag.UnderlyingStreamCommoditySettlPeriodFrequencyPeriod)
}

// HasUnderlyingStreamCommoditySettlPeriodFrequencyUnit returns true if UnderlyingStreamCommoditySettlPeriodFrequencyUnit is present, Tag 42009.
func (m NoUnderlyingStreamCommoditySettlPeriods) HasUnderlyingStreamCommoditySettlPeriodFrequencyUnit() bool {
	return m.Has(tag.UnderlyingStreamCommoditySettlPeriodFrequencyUnit)
}

// HasUnderlyingStreamCommoditySettlPeriodPrice returns true if UnderlyingStreamCommoditySettlPeriodPrice is present, Tag 42010.
func (m NoUnderlyingStreamCommoditySettlPeriods) HasUnderlyingStreamCommoditySettlPeriodPrice() bool {
	return m.Has(tag.UnderlyingStreamCommoditySettlPeriodPrice)
}

// HasUnderlyingStreamCommoditySettlPeriodPriceUnitOfMeasure returns true if UnderlyingStreamCommoditySettlPeriodPriceUnitOfMeasure is present, Tag 42011.
func (m NoUnderlyingStreamCommoditySettlPeriods) HasUnderlyingStreamCommoditySettlPeriodPriceUnitOfMeasure() bool {
	return m.Has(tag.UnderlyingStreamCommoditySettlPeriodPriceUnitOfMeasure)
}

// HasUnderlyingStreamCommoditySettlPeriodPriceCurrency returns true if UnderlyingStreamCommoditySettlPeriodPriceCurrency is present, Tag 42012.
func (m NoUnderlyingStreamCommoditySettlPeriods) HasUnderlyingStreamCommoditySettlPeriodPriceCurrency() bool {
	return m.Has(tag.UnderlyingStreamCommoditySettlPeriodPriceCurrency)
}

// HasUnderlyingStreamCommoditySettlHolidaysProcessingInstruction returns true if UnderlyingStreamCommoditySettlHolidaysProcessingInstruction is present, Tag 42013.
func (m NoUnderlyingStreamCommoditySettlPeriods) HasUnderlyingStreamCommoditySettlHolidaysProcessingInstruction() bool {
	return m.Has(tag.UnderlyingStreamCommoditySettlHolidaysProcessingInstruction)
}

// HasNoUnderlyingStreamCommoditySettlDays returns true if NoUnderlyingStreamCommoditySettlDays is present, Tag 41996.
func (m NoUnderlyingStreamCommoditySettlPeriods) HasNoUnderlyingStreamCommoditySettlDays() bool {
	return m.Has(tag.NoUnderlyingStreamCommoditySettlDays)
}

// HasUnderlyingStreamCommoditySettlPeriodXID returns true if UnderlyingStreamCommoditySettlPeriodXID is present, Tag 42014.
func (m NoUnderlyingStreamCommoditySettlPeriods) HasUnderlyingStreamCommoditySettlPeriodXID() bool {
	return m.Has(tag.UnderlyingStreamCommoditySettlPeriodXID)
}

// HasUnderlyingStreamCommoditySettlPeriodXIDRef returns true if UnderlyingStreamCommoditySettlPeriodXIDRef is present, Tag 42015.
func (m NoUnderlyingStreamCommoditySettlPeriods) HasUnderlyingStreamCommoditySettlPeriodXIDRef() bool {
	return m.Has(tag.UnderlyingStreamCommoditySettlPeriodXIDRef)
}

// NoUnderlyingStreamCommoditySettlDays is a repeating group element, Tag 41996.
type NoUnderlyingStreamCommoditySettlDays struct {
	*quickfix.Group
}

// SetUnderlyingStreamCommoditySettlDay sets UnderlyingStreamCommoditySettlDay, Tag 41997.
func (m NoUnderlyingStreamCommoditySettlDays) SetUnderlyingStreamCommoditySettlDay(v int) {
	m.Set(field.NewUnderlyingStreamCommoditySettlDay(v))
}

// SetUnderlyingStreamCommoditySettlTotalHours sets UnderlyingStreamCommoditySettlTotalHours, Tag 41998.
func (m NoUnderlyingStreamCommoditySettlDays) SetUnderlyingStreamCommoditySettlTotalHours(v int) {
	m.Set(field.NewUnderlyingStreamCommoditySettlTotalHours(v))
}

// SetNoUnderlyingStreamCommoditySettlTimes sets NoUnderlyingStreamCommoditySettlTimes, Tag 41999.
func (m NoUnderlyingStreamCommoditySettlDays) SetNoUnderlyingStreamCommoditySettlTimes(f NoUnderlyingStreamCommoditySettlTimesRepeatingGroup) {
	m.SetGroup(f)
}

// GetUnderlyingStreamCommoditySettlDay gets UnderlyingStreamCommoditySettlDay, Tag 41997.
func (m NoUnderlyingStreamCommoditySettlDays) GetUnderlyingStreamCommoditySettlDay() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamCommoditySettlDayField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStreamCommoditySettlTotalHours gets UnderlyingStreamCommoditySettlTotalHours, Tag 41998.
func (m NoUnderlyingStreamCommoditySettlDays) GetUnderlyingStreamCommoditySettlTotalHours() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamCommoditySettlTotalHoursField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUnderlyingStreamCommoditySettlTimes gets NoUnderlyingStreamCommoditySettlTimes, Tag 41999.
func (m NoUnderlyingStreamCommoditySettlDays) GetNoUnderlyingStreamCommoditySettlTimes() (NoUnderlyingStreamCommoditySettlTimesRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingStreamCommoditySettlTimesRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// HasUnderlyingStreamCommoditySettlDay returns true if UnderlyingStreamCommoditySettlDay is present, Tag 41997.
func (m NoUnderlyingStreamCommoditySettlDays) HasUnderlyingStreamCommoditySettlDay() bool {
	return m.Has(tag.UnderlyingStreamCommoditySettlDay)
}

// HasUnderlyingStreamCommoditySettlTotalHours returns true if UnderlyingStreamCommoditySettlTotalHours is present, Tag 41998.
func (m NoUnderlyingStreamCommoditySettlDays) HasUnderlyingStreamCommoditySettlTotalHours() bool {
	return m.Has(tag.UnderlyingStreamCommoditySettlTotalHours)
}

// HasNoUnderlyingStreamCommoditySettlTimes returns true if NoUnderlyingStreamCommoditySettlTimes is present, Tag 41999.
func (m NoUnderlyingStreamCommoditySettlDays) HasNoUnderlyingStreamCommoditySettlTimes() bool {
	return m.Has(tag.NoUnderlyingStreamCommoditySettlTimes)
}

// NoUnderlyingStreamCommoditySettlTimes is a repeating group element, Tag 41999.
type NoUnderlyingStreamCommoditySettlTimes struct {
	*quickfix.Group
}

// SetUnderlyingStreamCommoditySettlStart sets UnderlyingStreamCommoditySettlStart, Tag 42000.
func (m NoUnderlyingStreamCommoditySettlTimes) SetUnderlyingStreamCommoditySettlStart(v string) {
	m.Set(field.NewUnderlyingStreamCommoditySettlStart(v))
}

// SetUnderlyingStreamCommoditySettlEnd sets UnderlyingStreamCommoditySettlEnd, Tag 42001.
func (m NoUnderlyingStreamCommoditySettlTimes) SetUnderlyingStreamCommoditySettlEnd(v string) {
	m.Set(field.NewUnderlyingStreamCommoditySettlEnd(v))
}

// SetUnderlyingStreamCommoditySettlTimeType sets UnderlyingStreamCommoditySettlTimeType, Tag 41936.
func (m NoUnderlyingStreamCommoditySettlTimes) SetUnderlyingStreamCommoditySettlTimeType(v int) {
	m.Set(field.NewUnderlyingStreamCommoditySettlTimeType(v))
}

// GetUnderlyingStreamCommoditySettlStart gets UnderlyingStreamCommoditySettlStart, Tag 42000.
func (m NoUnderlyingStreamCommoditySettlTimes) GetUnderlyingStreamCommoditySettlStart() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamCommoditySettlStartField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStreamCommoditySettlEnd gets UnderlyingStreamCommoditySettlEnd, Tag 42001.
func (m NoUnderlyingStreamCommoditySettlTimes) GetUnderlyingStreamCommoditySettlEnd() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamCommoditySettlEndField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStreamCommoditySettlTimeType gets UnderlyingStreamCommoditySettlTimeType, Tag 41936.
func (m NoUnderlyingStreamCommoditySettlTimes) GetUnderlyingStreamCommoditySettlTimeType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamCommoditySettlTimeTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingStreamCommoditySettlStart returns true if UnderlyingStreamCommoditySettlStart is present, Tag 42000.
func (m NoUnderlyingStreamCommoditySettlTimes) HasUnderlyingStreamCommoditySettlStart() bool {
	return m.Has(tag.UnderlyingStreamCommoditySettlStart)
}

// HasUnderlyingStreamCommoditySettlEnd returns true if UnderlyingStreamCommoditySettlEnd is present, Tag 42001.
func (m NoUnderlyingStreamCommoditySettlTimes) HasUnderlyingStreamCommoditySettlEnd() bool {
	return m.Has(tag.UnderlyingStreamCommoditySettlEnd)
}

// HasUnderlyingStreamCommoditySettlTimeType returns true if UnderlyingStreamCommoditySettlTimeType is present, Tag 41936.
func (m NoUnderlyingStreamCommoditySettlTimes) HasUnderlyingStreamCommoditySettlTimeType() bool {
	return m.Has(tag.UnderlyingStreamCommoditySettlTimeType)
}

// NoUnderlyingStreamCommoditySettlTimesRepeatingGroup is a repeating group, Tag 41999.
type NoUnderlyingStreamCommoditySettlTimesRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingStreamCommoditySettlTimesRepeatingGroup returns an initialized, NoUnderlyingStreamCommoditySettlTimesRepeatingGroup.
func NewNoUnderlyingStreamCommoditySettlTimesRepeatingGroup() NoUnderlyingStreamCommoditySettlTimesRepeatingGroup {
	return NoUnderlyingStreamCommoditySettlTimesRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingStreamCommoditySettlTimes,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingStreamCommoditySettlStart),
				quickfix.GroupElement(tag.UnderlyingStreamCommoditySettlEnd),
				quickfix.GroupElement(tag.UnderlyingStreamCommoditySettlTimeType),
			},
		),
	}
}

// Add create and append a new NoUnderlyingStreamCommoditySettlTimes to this group.
func (m NoUnderlyingStreamCommoditySettlTimesRepeatingGroup) Add() NoUnderlyingStreamCommoditySettlTimes {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingStreamCommoditySettlTimes{g}
}

// Get returns the ith NoUnderlyingStreamCommoditySettlTimes in the NoUnderlyingStreamCommoditySettlTimesRepeatinGroup.
func (m NoUnderlyingStreamCommoditySettlTimesRepeatingGroup) Get(i int) NoUnderlyingStreamCommoditySettlTimes {
	return NoUnderlyingStreamCommoditySettlTimes{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingStreamCommoditySettlDaysRepeatingGroup is a repeating group, Tag 41996.
type NoUnderlyingStreamCommoditySettlDaysRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingStreamCommoditySettlDaysRepeatingGroup returns an initialized, NoUnderlyingStreamCommoditySettlDaysRepeatingGroup.
func NewNoUnderlyingStreamCommoditySettlDaysRepeatingGroup() NoUnderlyingStreamCommoditySettlDaysRepeatingGroup {
	return NoUnderlyingStreamCommoditySettlDaysRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingStreamCommoditySettlDays,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingStreamCommoditySettlDay),
				quickfix.GroupElement(tag.UnderlyingStreamCommoditySettlTotalHours),
				NewNoUnderlyingStreamCommoditySettlTimesRepeatingGroup(),
			},
		),
	}
}

// Add create and append a new NoUnderlyingStreamCommoditySettlDays to this group.
func (m NoUnderlyingStreamCommoditySettlDaysRepeatingGroup) Add() NoUnderlyingStreamCommoditySettlDays {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingStreamCommoditySettlDays{g}
}

// Get returns the ith NoUnderlyingStreamCommoditySettlDays in the NoUnderlyingStreamCommoditySettlDaysRepeatinGroup.
func (m NoUnderlyingStreamCommoditySettlDaysRepeatingGroup) Get(i int) NoUnderlyingStreamCommoditySettlDays {
	return NoUnderlyingStreamCommoditySettlDays{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingStreamCommoditySettlPeriodsRepeatingGroup is a repeating group, Tag 42002.
type NoUnderlyingStreamCommoditySettlPeriodsRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingStreamCommoditySettlPeriodsRepeatingGroup returns an initialized, NoUnderlyingStreamCommoditySettlPeriodsRepeatingGroup.
func NewNoUnderlyingStreamCommoditySettlPeriodsRepeatingGroup() NoUnderlyingStreamCommoditySettlPeriodsRepeatingGroup {
	return NoUnderlyingStreamCommoditySettlPeriodsRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingStreamCommoditySettlPeriods,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingStreamCommoditySettlCountry),
				quickfix.GroupElement(tag.UnderlyingStreamCommoditySettlTimeZone),
				quickfix.GroupElement(tag.UnderlyingStreamCommoditySettlFlowType),
				quickfix.GroupElement(tag.UnderlyingStreamCommoditySettlPeriodNotional),
				quickfix.GroupElement(tag.UnderlyingStreamCommoditySettlPeriodNotionalUnitOfMeasure),
				quickfix.GroupElement(tag.UnderlyingStreamCommoditySettlPeriodFrequencyPeriod),
				quickfix.GroupElement(tag.UnderlyingStreamCommoditySettlPeriodFrequencyUnit),
				quickfix.GroupElement(tag.UnderlyingStreamCommoditySettlPeriodPrice),
				quickfix.GroupElement(tag.UnderlyingStreamCommoditySettlPeriodPriceUnitOfMeasure),
				quickfix.GroupElement(tag.UnderlyingStreamCommoditySettlPeriodPriceCurrency),
				quickfix.GroupElement(tag.UnderlyingStreamCommoditySettlHolidaysProcessingInstruction),
				NewNoUnderlyingStreamCommoditySettlDaysRepeatingGroup(),
				quickfix.GroupElement(tag.UnderlyingStreamCommoditySettlPeriodXID),
				quickfix.GroupElement(tag.UnderlyingStreamCommoditySettlPeriodXIDRef),
			},
		),
	}
}

// Add create and append a new NoUnderlyingStreamCommoditySettlPeriods to this group.
func (m NoUnderlyingStreamCommoditySettlPeriodsRepeatingGroup) Add() NoUnderlyingStreamCommoditySettlPeriods {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingStreamCommoditySettlPeriods{g}
}

// Get returns the ith NoUnderlyingStreamCommoditySettlPeriods in the NoUnderlyingStreamCommoditySettlPeriodsRepeatinGroup.
func (m NoUnderlyingStreamCommoditySettlPeriodsRepeatingGroup) Get(i int) NoUnderlyingStreamCommoditySettlPeriods {
	return NoUnderlyingStreamCommoditySettlPeriods{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingDeliveryStreamCommoditySources is a repeating group element, Tag 41808.
type NoUnderlyingDeliveryStreamCommoditySources struct {
	*quickfix.Group
}

// SetUnderlyingDeliveryStreamCommoditySource sets UnderlyingDeliveryStreamCommoditySource, Tag 41809.
func (m NoUnderlyingDeliveryStreamCommoditySources) SetUnderlyingDeliveryStreamCommoditySource(v string) {
	m.Set(field.NewUnderlyingDeliveryStreamCommoditySource(v))
}

// GetUnderlyingDeliveryStreamCommoditySource gets UnderlyingDeliveryStreamCommoditySource, Tag 41809.
func (m NoUnderlyingDeliveryStreamCommoditySources) GetUnderlyingDeliveryStreamCommoditySource() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingDeliveryStreamCommoditySourceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingDeliveryStreamCommoditySource returns true if UnderlyingDeliveryStreamCommoditySource is present, Tag 41809.
func (m NoUnderlyingDeliveryStreamCommoditySources) HasUnderlyingDeliveryStreamCommoditySource() bool {
	return m.Has(tag.UnderlyingDeliveryStreamCommoditySource)
}

// NoUnderlyingDeliveryStreamCommoditySourcesRepeatingGroup is a repeating group, Tag 41808.
type NoUnderlyingDeliveryStreamCommoditySourcesRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingDeliveryStreamCommoditySourcesRepeatingGroup returns an initialized, NoUnderlyingDeliveryStreamCommoditySourcesRepeatingGroup.
func NewNoUnderlyingDeliveryStreamCommoditySourcesRepeatingGroup() NoUnderlyingDeliveryStreamCommoditySourcesRepeatingGroup {
	return NoUnderlyingDeliveryStreamCommoditySourcesRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingDeliveryStreamCommoditySources,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingDeliveryStreamCommoditySource),
			},
		),
	}
}

// Add create and append a new NoUnderlyingDeliveryStreamCommoditySources to this group.
func (m NoUnderlyingDeliveryStreamCommoditySourcesRepeatingGroup) Add() NoUnderlyingDeliveryStreamCommoditySources {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingDeliveryStreamCommoditySources{g}
}

// Get returns the ith NoUnderlyingDeliveryStreamCommoditySources in the NoUnderlyingDeliveryStreamCommoditySourcesRepeatinGroup.
func (m NoUnderlyingDeliveryStreamCommoditySourcesRepeatingGroup) Get(i int) NoUnderlyingDeliveryStreamCommoditySources {
	return NoUnderlyingDeliveryStreamCommoditySources{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingDeliveryStreamCycles is a repeating group element, Tag 41804.
type NoUnderlyingDeliveryStreamCycles struct {
	*quickfix.Group
}

// SetUnderlyingDeliveryStreamCycleDesc sets UnderlyingDeliveryStreamCycleDesc, Tag 41805.
func (m NoUnderlyingDeliveryStreamCycles) SetUnderlyingDeliveryStreamCycleDesc(v string) {
	m.Set(field.NewUnderlyingDeliveryStreamCycleDesc(v))
}

// SetEncodedUnderlyingDeliveryStreamCycleDescLen sets EncodedUnderlyingDeliveryStreamCycleDescLen, Tag 41806.
func (m NoUnderlyingDeliveryStreamCycles) SetEncodedUnderlyingDeliveryStreamCycleDescLen(v int) {
	m.Set(field.NewEncodedUnderlyingDeliveryStreamCycleDescLen(v))
}

// SetEncodedUnderlyingDeliveryStreamCycleDesc sets EncodedUnderlyingDeliveryStreamCycleDesc, Tag 41807.
func (m NoUnderlyingDeliveryStreamCycles) SetEncodedUnderlyingDeliveryStreamCycleDesc(v string) {
	m.Set(field.NewEncodedUnderlyingDeliveryStreamCycleDesc(v))
}

// GetUnderlyingDeliveryStreamCycleDesc gets UnderlyingDeliveryStreamCycleDesc, Tag 41805.
func (m NoUnderlyingDeliveryStreamCycles) GetUnderlyingDeliveryStreamCycleDesc() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingDeliveryStreamCycleDescField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetEncodedUnderlyingDeliveryStreamCycleDescLen gets EncodedUnderlyingDeliveryStreamCycleDescLen, Tag 41806.
func (m NoUnderlyingDeliveryStreamCycles) GetEncodedUnderlyingDeliveryStreamCycleDescLen() (v int, err quickfix.MessageRejectError) {
	var f field.EncodedUnderlyingDeliveryStreamCycleDescLenField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetEncodedUnderlyingDeliveryStreamCycleDesc gets EncodedUnderlyingDeliveryStreamCycleDesc, Tag 41807.
func (m NoUnderlyingDeliveryStreamCycles) GetEncodedUnderlyingDeliveryStreamCycleDesc() (v string, err quickfix.MessageRejectError) {
	var f field.EncodedUnderlyingDeliveryStreamCycleDescField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingDeliveryStreamCycleDesc returns true if UnderlyingDeliveryStreamCycleDesc is present, Tag 41805.
func (m NoUnderlyingDeliveryStreamCycles) HasUnderlyingDeliveryStreamCycleDesc() bool {
	return m.Has(tag.UnderlyingDeliveryStreamCycleDesc)
}

// HasEncodedUnderlyingDeliveryStreamCycleDescLen returns true if EncodedUnderlyingDeliveryStreamCycleDescLen is present, Tag 41806.
func (m NoUnderlyingDeliveryStreamCycles) HasEncodedUnderlyingDeliveryStreamCycleDescLen() bool {
	return m.Has(tag.EncodedUnderlyingDeliveryStreamCycleDescLen)
}

// HasEncodedUnderlyingDeliveryStreamCycleDesc returns true if EncodedUnderlyingDeliveryStreamCycleDesc is present, Tag 41807.
func (m NoUnderlyingDeliveryStreamCycles) HasEncodedUnderlyingDeliveryStreamCycleDesc() bool {
	return m.Has(tag.EncodedUnderlyingDeliveryStreamCycleDesc)
}

// NoUnderlyingDeliveryStreamCyclesRepeatingGroup is a repeating group, Tag 41804.
type NoUnderlyingDeliveryStreamCyclesRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingDeliveryStreamCyclesRepeatingGroup returns an initialized, NoUnderlyingDeliveryStreamCyclesRepeatingGroup.
func NewNoUnderlyingDeliveryStreamCyclesRepeatingGroup() NoUnderlyingDeliveryStreamCyclesRepeatingGroup {
	return NoUnderlyingDeliveryStreamCyclesRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingDeliveryStreamCycles,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingDeliveryStreamCycleDesc),
				quickfix.GroupElement(tag.EncodedUnderlyingDeliveryStreamCycleDescLen),
				quickfix.GroupElement(tag.EncodedUnderlyingDeliveryStreamCycleDesc),
			},
		),
	}
}

// Add create and append a new NoUnderlyingDeliveryStreamCycles to this group.
func (m NoUnderlyingDeliveryStreamCyclesRepeatingGroup) Add() NoUnderlyingDeliveryStreamCycles {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingDeliveryStreamCycles{g}
}

// Get returns the ith NoUnderlyingDeliveryStreamCycles in the NoUnderlyingDeliveryStreamCyclesRepeatinGroup.
func (m NoUnderlyingDeliveryStreamCyclesRepeatingGroup) Get(i int) NoUnderlyingDeliveryStreamCycles {
	return NoUnderlyingDeliveryStreamCycles{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingDeliverySchedules is a repeating group element, Tag 41756.
type NoUnderlyingDeliverySchedules struct {
	*quickfix.Group
}

// SetUnderlyingDeliveryScheduleType sets UnderlyingDeliveryScheduleType, Tag 41757.
func (m NoUnderlyingDeliverySchedules) SetUnderlyingDeliveryScheduleType(v int) {
	m.Set(field.NewUnderlyingDeliveryScheduleType(v))
}

// SetUnderlyingDeliveryScheduleXID sets UnderlyingDeliveryScheduleXID, Tag 41758.
func (m NoUnderlyingDeliverySchedules) SetUnderlyingDeliveryScheduleXID(v string) {
	m.Set(field.NewUnderlyingDeliveryScheduleXID(v))
}

// SetUnderlyingDeliveryScheduleNotional sets UnderlyingDeliveryScheduleNotional, Tag 41759.
func (m NoUnderlyingDeliverySchedules) SetUnderlyingDeliveryScheduleNotional(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingDeliveryScheduleNotional(value, scale))
}

// SetUnderlyingDeliveryScheduleNotionalUnitOfMeasure sets UnderlyingDeliveryScheduleNotionalUnitOfMeasure, Tag 41760.
func (m NoUnderlyingDeliverySchedules) SetUnderlyingDeliveryScheduleNotionalUnitOfMeasure(v string) {
	m.Set(field.NewUnderlyingDeliveryScheduleNotionalUnitOfMeasure(v))
}

// SetUnderlyingDeliveryScheduleNotionalCommodityFrequency sets UnderlyingDeliveryScheduleNotionalCommodityFrequency, Tag 41761.
func (m NoUnderlyingDeliverySchedules) SetUnderlyingDeliveryScheduleNotionalCommodityFrequency(v int) {
	m.Set(field.NewUnderlyingDeliveryScheduleNotionalCommodityFrequency(v))
}

// SetUnderlyingDeliveryScheduleNegativeTolerance sets UnderlyingDeliveryScheduleNegativeTolerance, Tag 41762.
func (m NoUnderlyingDeliverySchedules) SetUnderlyingDeliveryScheduleNegativeTolerance(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingDeliveryScheduleNegativeTolerance(value, scale))
}

// SetUnderlyingDeliverySchedulePositiveTolerance sets UnderlyingDeliverySchedulePositiveTolerance, Tag 41763.
func (m NoUnderlyingDeliverySchedules) SetUnderlyingDeliverySchedulePositiveTolerance(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingDeliverySchedulePositiveTolerance(value, scale))
}

// SetUnderlyingDeliveryScheduleToleranceUnitOfMeasure sets UnderlyingDeliveryScheduleToleranceUnitOfMeasure, Tag 41764.
func (m NoUnderlyingDeliverySchedules) SetUnderlyingDeliveryScheduleToleranceUnitOfMeasure(v string) {
	m.Set(field.NewUnderlyingDeliveryScheduleToleranceUnitOfMeasure(v))
}

// SetUnderlyingDeliveryScheduleToleranceType sets UnderlyingDeliveryScheduleToleranceType, Tag 41765.
func (m NoUnderlyingDeliverySchedules) SetUnderlyingDeliveryScheduleToleranceType(v int) {
	m.Set(field.NewUnderlyingDeliveryScheduleToleranceType(v))
}

// SetUnderlyingDeliveryScheduleSettlCountry sets UnderlyingDeliveryScheduleSettlCountry, Tag 41766.
func (m NoUnderlyingDeliverySchedules) SetUnderlyingDeliveryScheduleSettlCountry(v string) {
	m.Set(field.NewUnderlyingDeliveryScheduleSettlCountry(v))
}

// SetUnderlyingDeliveryScheduleSettlTimeZone sets UnderlyingDeliveryScheduleSettlTimeZone, Tag 41767.
func (m NoUnderlyingDeliverySchedules) SetUnderlyingDeliveryScheduleSettlTimeZone(v string) {
	m.Set(field.NewUnderlyingDeliveryScheduleSettlTimeZone(v))
}

// SetUnderlyingDeliveryScheduleSettlFlowType sets UnderlyingDeliveryScheduleSettlFlowType, Tag 41768.
func (m NoUnderlyingDeliverySchedules) SetUnderlyingDeliveryScheduleSettlFlowType(v int) {
	m.Set(field.NewUnderlyingDeliveryScheduleSettlFlowType(v))
}

// SetUnderlyingDeliveryScheduleSettlHolidaysProcessingInstruction sets UnderlyingDeliveryScheduleSettlHolidaysProcessingInstruction, Tag 41769.
func (m NoUnderlyingDeliverySchedules) SetUnderlyingDeliveryScheduleSettlHolidaysProcessingInstruction(v int) {
	m.Set(field.NewUnderlyingDeliveryScheduleSettlHolidaysProcessingInstruction(v))
}

// SetNoUnderlyingDeliveryScheduleSettlDays sets NoUnderlyingDeliveryScheduleSettlDays, Tag 41770.
func (m NoUnderlyingDeliverySchedules) SetNoUnderlyingDeliveryScheduleSettlDays(f NoUnderlyingDeliveryScheduleSettlDaysRepeatingGroup) {
	m.SetGroup(f)
}

// GetUnderlyingDeliveryScheduleType gets UnderlyingDeliveryScheduleType, Tag 41757.
func (m NoUnderlyingDeliverySchedules) GetUnderlyingDeliveryScheduleType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingDeliveryScheduleTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDeliveryScheduleXID gets UnderlyingDeliveryScheduleXID, Tag 41758.
func (m NoUnderlyingDeliverySchedules) GetUnderlyingDeliveryScheduleXID() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingDeliveryScheduleXIDField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDeliveryScheduleNotional gets UnderlyingDeliveryScheduleNotional, Tag 41759.
func (m NoUnderlyingDeliverySchedules) GetUnderlyingDeliveryScheduleNotional() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingDeliveryScheduleNotionalField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDeliveryScheduleNotionalUnitOfMeasure gets UnderlyingDeliveryScheduleNotionalUnitOfMeasure, Tag 41760.
func (m NoUnderlyingDeliverySchedules) GetUnderlyingDeliveryScheduleNotionalUnitOfMeasure() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingDeliveryScheduleNotionalUnitOfMeasureField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDeliveryScheduleNotionalCommodityFrequency gets UnderlyingDeliveryScheduleNotionalCommodityFrequency, Tag 41761.
func (m NoUnderlyingDeliverySchedules) GetUnderlyingDeliveryScheduleNotionalCommodityFrequency() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingDeliveryScheduleNotionalCommodityFrequencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDeliveryScheduleNegativeTolerance gets UnderlyingDeliveryScheduleNegativeTolerance, Tag 41762.
func (m NoUnderlyingDeliverySchedules) GetUnderlyingDeliveryScheduleNegativeTolerance() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingDeliveryScheduleNegativeToleranceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDeliverySchedulePositiveTolerance gets UnderlyingDeliverySchedulePositiveTolerance, Tag 41763.
func (m NoUnderlyingDeliverySchedules) GetUnderlyingDeliverySchedulePositiveTolerance() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingDeliverySchedulePositiveToleranceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDeliveryScheduleToleranceUnitOfMeasure gets UnderlyingDeliveryScheduleToleranceUnitOfMeasure, Tag 41764.
func (m NoUnderlyingDeliverySchedules) GetUnderlyingDeliveryScheduleToleranceUnitOfMeasure() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingDeliveryScheduleToleranceUnitOfMeasureField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDeliveryScheduleToleranceType gets UnderlyingDeliveryScheduleToleranceType, Tag 41765.
func (m NoUnderlyingDeliverySchedules) GetUnderlyingDeliveryScheduleToleranceType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingDeliveryScheduleToleranceTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDeliveryScheduleSettlCountry gets UnderlyingDeliveryScheduleSettlCountry, Tag 41766.
func (m NoUnderlyingDeliverySchedules) GetUnderlyingDeliveryScheduleSettlCountry() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingDeliveryScheduleSettlCountryField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDeliveryScheduleSettlTimeZone gets UnderlyingDeliveryScheduleSettlTimeZone, Tag 41767.
func (m NoUnderlyingDeliverySchedules) GetUnderlyingDeliveryScheduleSettlTimeZone() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingDeliveryScheduleSettlTimeZoneField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDeliveryScheduleSettlFlowType gets UnderlyingDeliveryScheduleSettlFlowType, Tag 41768.
func (m NoUnderlyingDeliverySchedules) GetUnderlyingDeliveryScheduleSettlFlowType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingDeliveryScheduleSettlFlowTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDeliveryScheduleSettlHolidaysProcessingInstruction gets UnderlyingDeliveryScheduleSettlHolidaysProcessingInstruction, Tag 41769.
func (m NoUnderlyingDeliverySchedules) GetUnderlyingDeliveryScheduleSettlHolidaysProcessingInstruction() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingDeliveryScheduleSettlHolidaysProcessingInstructionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUnderlyingDeliveryScheduleSettlDays gets NoUnderlyingDeliveryScheduleSettlDays, Tag 41770.
func (m NoUnderlyingDeliverySchedules) GetNoUnderlyingDeliveryScheduleSettlDays() (NoUnderlyingDeliveryScheduleSettlDaysRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingDeliveryScheduleSettlDaysRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// HasUnderlyingDeliveryScheduleType returns true if UnderlyingDeliveryScheduleType is present, Tag 41757.
func (m NoUnderlyingDeliverySchedules) HasUnderlyingDeliveryScheduleType() bool {
	return m.Has(tag.UnderlyingDeliveryScheduleType)
}

// HasUnderlyingDeliveryScheduleXID returns true if UnderlyingDeliveryScheduleXID is present, Tag 41758.
func (m NoUnderlyingDeliverySchedules) HasUnderlyingDeliveryScheduleXID() bool {
	return m.Has(tag.UnderlyingDeliveryScheduleXID)
}

// HasUnderlyingDeliveryScheduleNotional returns true if UnderlyingDeliveryScheduleNotional is present, Tag 41759.
func (m NoUnderlyingDeliverySchedules) HasUnderlyingDeliveryScheduleNotional() bool {
	return m.Has(tag.UnderlyingDeliveryScheduleNotional)
}

// HasUnderlyingDeliveryScheduleNotionalUnitOfMeasure returns true if UnderlyingDeliveryScheduleNotionalUnitOfMeasure is present, Tag 41760.
func (m NoUnderlyingDeliverySchedules) HasUnderlyingDeliveryScheduleNotionalUnitOfMeasure() bool {
	return m.Has(tag.UnderlyingDeliveryScheduleNotionalUnitOfMeasure)
}

// HasUnderlyingDeliveryScheduleNotionalCommodityFrequency returns true if UnderlyingDeliveryScheduleNotionalCommodityFrequency is present, Tag 41761.
func (m NoUnderlyingDeliverySchedules) HasUnderlyingDeliveryScheduleNotionalCommodityFrequency() bool {
	return m.Has(tag.UnderlyingDeliveryScheduleNotionalCommodityFrequency)
}

// HasUnderlyingDeliveryScheduleNegativeTolerance returns true if UnderlyingDeliveryScheduleNegativeTolerance is present, Tag 41762.
func (m NoUnderlyingDeliverySchedules) HasUnderlyingDeliveryScheduleNegativeTolerance() bool {
	return m.Has(tag.UnderlyingDeliveryScheduleNegativeTolerance)
}

// HasUnderlyingDeliverySchedulePositiveTolerance returns true if UnderlyingDeliverySchedulePositiveTolerance is present, Tag 41763.
func (m NoUnderlyingDeliverySchedules) HasUnderlyingDeliverySchedulePositiveTolerance() bool {
	return m.Has(tag.UnderlyingDeliverySchedulePositiveTolerance)
}

// HasUnderlyingDeliveryScheduleToleranceUnitOfMeasure returns true if UnderlyingDeliveryScheduleToleranceUnitOfMeasure is present, Tag 41764.
func (m NoUnderlyingDeliverySchedules) HasUnderlyingDeliveryScheduleToleranceUnitOfMeasure() bool {
	return m.Has(tag.UnderlyingDeliveryScheduleToleranceUnitOfMeasure)
}

// HasUnderlyingDeliveryScheduleToleranceType returns true if UnderlyingDeliveryScheduleToleranceType is present, Tag 41765.
func (m NoUnderlyingDeliverySchedules) HasUnderlyingDeliveryScheduleToleranceType() bool {
	return m.Has(tag.UnderlyingDeliveryScheduleToleranceType)
}

// HasUnderlyingDeliveryScheduleSettlCountry returns true if UnderlyingDeliveryScheduleSettlCountry is present, Tag 41766.
func (m NoUnderlyingDeliverySchedules) HasUnderlyingDeliveryScheduleSettlCountry() bool {
	return m.Has(tag.UnderlyingDeliveryScheduleSettlCountry)
}

// HasUnderlyingDeliveryScheduleSettlTimeZone returns true if UnderlyingDeliveryScheduleSettlTimeZone is present, Tag 41767.
func (m NoUnderlyingDeliverySchedules) HasUnderlyingDeliveryScheduleSettlTimeZone() bool {
	return m.Has(tag.UnderlyingDeliveryScheduleSettlTimeZone)
}

// HasUnderlyingDeliveryScheduleSettlFlowType returns true if UnderlyingDeliveryScheduleSettlFlowType is present, Tag 41768.
func (m NoUnderlyingDeliverySchedules) HasUnderlyingDeliveryScheduleSettlFlowType() bool {
	return m.Has(tag.UnderlyingDeliveryScheduleSettlFlowType)
}

// HasUnderlyingDeliveryScheduleSettlHolidaysProcessingInstruction returns true if UnderlyingDeliveryScheduleSettlHolidaysProcessingInstruction is present, Tag 41769.
func (m NoUnderlyingDeliverySchedules) HasUnderlyingDeliveryScheduleSettlHolidaysProcessingInstruction() bool {
	return m.Has(tag.UnderlyingDeliveryScheduleSettlHolidaysProcessingInstruction)
}

// HasNoUnderlyingDeliveryScheduleSettlDays returns true if NoUnderlyingDeliveryScheduleSettlDays is present, Tag 41770.
func (m NoUnderlyingDeliverySchedules) HasNoUnderlyingDeliveryScheduleSettlDays() bool {
	return m.Has(tag.NoUnderlyingDeliveryScheduleSettlDays)
}

// NoUnderlyingDeliveryScheduleSettlDays is a repeating group element, Tag 41770.
type NoUnderlyingDeliveryScheduleSettlDays struct {
	*quickfix.Group
}

// SetUnderlyingDeliveryScheduleSettlDay sets UnderlyingDeliveryScheduleSettlDay, Tag 41771.
func (m NoUnderlyingDeliveryScheduleSettlDays) SetUnderlyingDeliveryScheduleSettlDay(v int) {
	m.Set(field.NewUnderlyingDeliveryScheduleSettlDay(v))
}

// SetUnderlyingDeliveryScheduleSettlTotalHours sets UnderlyingDeliveryScheduleSettlTotalHours, Tag 41772.
func (m NoUnderlyingDeliveryScheduleSettlDays) SetUnderlyingDeliveryScheduleSettlTotalHours(v int) {
	m.Set(field.NewUnderlyingDeliveryScheduleSettlTotalHours(v))
}

// SetNoUnderlyingDeliveryScheduleSettlTimes sets NoUnderlyingDeliveryScheduleSettlTimes, Tag 41773.
func (m NoUnderlyingDeliveryScheduleSettlDays) SetNoUnderlyingDeliveryScheduleSettlTimes(f NoUnderlyingDeliveryScheduleSettlTimesRepeatingGroup) {
	m.SetGroup(f)
}

// GetUnderlyingDeliveryScheduleSettlDay gets UnderlyingDeliveryScheduleSettlDay, Tag 41771.
func (m NoUnderlyingDeliveryScheduleSettlDays) GetUnderlyingDeliveryScheduleSettlDay() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingDeliveryScheduleSettlDayField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDeliveryScheduleSettlTotalHours gets UnderlyingDeliveryScheduleSettlTotalHours, Tag 41772.
func (m NoUnderlyingDeliveryScheduleSettlDays) GetUnderlyingDeliveryScheduleSettlTotalHours() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingDeliveryScheduleSettlTotalHoursField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUnderlyingDeliveryScheduleSettlTimes gets NoUnderlyingDeliveryScheduleSettlTimes, Tag 41773.
func (m NoUnderlyingDeliveryScheduleSettlDays) GetNoUnderlyingDeliveryScheduleSettlTimes() (NoUnderlyingDeliveryScheduleSettlTimesRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingDeliveryScheduleSettlTimesRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// HasUnderlyingDeliveryScheduleSettlDay returns true if UnderlyingDeliveryScheduleSettlDay is present, Tag 41771.
func (m NoUnderlyingDeliveryScheduleSettlDays) HasUnderlyingDeliveryScheduleSettlDay() bool {
	return m.Has(tag.UnderlyingDeliveryScheduleSettlDay)
}

// HasUnderlyingDeliveryScheduleSettlTotalHours returns true if UnderlyingDeliveryScheduleSettlTotalHours is present, Tag 41772.
func (m NoUnderlyingDeliveryScheduleSettlDays) HasUnderlyingDeliveryScheduleSettlTotalHours() bool {
	return m.Has(tag.UnderlyingDeliveryScheduleSettlTotalHours)
}

// HasNoUnderlyingDeliveryScheduleSettlTimes returns true if NoUnderlyingDeliveryScheduleSettlTimes is present, Tag 41773.
func (m NoUnderlyingDeliveryScheduleSettlDays) HasNoUnderlyingDeliveryScheduleSettlTimes() bool {
	return m.Has(tag.NoUnderlyingDeliveryScheduleSettlTimes)
}

// NoUnderlyingDeliveryScheduleSettlTimes is a repeating group element, Tag 41773.
type NoUnderlyingDeliveryScheduleSettlTimes struct {
	*quickfix.Group
}

// SetUnderlyingDeliveryScheduleSettlStart sets UnderlyingDeliveryScheduleSettlStart, Tag 41774.
func (m NoUnderlyingDeliveryScheduleSettlTimes) SetUnderlyingDeliveryScheduleSettlStart(v string) {
	m.Set(field.NewUnderlyingDeliveryScheduleSettlStart(v))
}

// SetUnderlyingDeliveryScheduleSettlEnd sets UnderlyingDeliveryScheduleSettlEnd, Tag 41775.
func (m NoUnderlyingDeliveryScheduleSettlTimes) SetUnderlyingDeliveryScheduleSettlEnd(v string) {
	m.Set(field.NewUnderlyingDeliveryScheduleSettlEnd(v))
}

// SetUnderlyingDeliveryScheduleSettlTimeType sets UnderlyingDeliveryScheduleSettlTimeType, Tag 41776.
func (m NoUnderlyingDeliveryScheduleSettlTimes) SetUnderlyingDeliveryScheduleSettlTimeType(v int) {
	m.Set(field.NewUnderlyingDeliveryScheduleSettlTimeType(v))
}

// GetUnderlyingDeliveryScheduleSettlStart gets UnderlyingDeliveryScheduleSettlStart, Tag 41774.
func (m NoUnderlyingDeliveryScheduleSettlTimes) GetUnderlyingDeliveryScheduleSettlStart() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingDeliveryScheduleSettlStartField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDeliveryScheduleSettlEnd gets UnderlyingDeliveryScheduleSettlEnd, Tag 41775.
func (m NoUnderlyingDeliveryScheduleSettlTimes) GetUnderlyingDeliveryScheduleSettlEnd() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingDeliveryScheduleSettlEndField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDeliveryScheduleSettlTimeType gets UnderlyingDeliveryScheduleSettlTimeType, Tag 41776.
func (m NoUnderlyingDeliveryScheduleSettlTimes) GetUnderlyingDeliveryScheduleSettlTimeType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingDeliveryScheduleSettlTimeTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingDeliveryScheduleSettlStart returns true if UnderlyingDeliveryScheduleSettlStart is present, Tag 41774.
func (m NoUnderlyingDeliveryScheduleSettlTimes) HasUnderlyingDeliveryScheduleSettlStart() bool {
	return m.Has(tag.UnderlyingDeliveryScheduleSettlStart)
}

// HasUnderlyingDeliveryScheduleSettlEnd returns true if UnderlyingDeliveryScheduleSettlEnd is present, Tag 41775.
func (m NoUnderlyingDeliveryScheduleSettlTimes) HasUnderlyingDeliveryScheduleSettlEnd() bool {
	return m.Has(tag.UnderlyingDeliveryScheduleSettlEnd)
}

// HasUnderlyingDeliveryScheduleSettlTimeType returns true if UnderlyingDeliveryScheduleSettlTimeType is present, Tag 41776.
func (m NoUnderlyingDeliveryScheduleSettlTimes) HasUnderlyingDeliveryScheduleSettlTimeType() bool {
	return m.Has(tag.UnderlyingDeliveryScheduleSettlTimeType)
}

// NoUnderlyingDeliveryScheduleSettlTimesRepeatingGroup is a repeating group, Tag 41773.
type NoUnderlyingDeliveryScheduleSettlTimesRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingDeliveryScheduleSettlTimesRepeatingGroup returns an initialized, NoUnderlyingDeliveryScheduleSettlTimesRepeatingGroup.
func NewNoUnderlyingDeliveryScheduleSettlTimesRepeatingGroup() NoUnderlyingDeliveryScheduleSettlTimesRepeatingGroup {
	return NoUnderlyingDeliveryScheduleSettlTimesRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingDeliveryScheduleSettlTimes,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingDeliveryScheduleSettlStart),
				quickfix.GroupElement(tag.UnderlyingDeliveryScheduleSettlEnd),
				quickfix.GroupElement(tag.UnderlyingDeliveryScheduleSettlTimeType),
			},
		),
	}
}

// Add create and append a new NoUnderlyingDeliveryScheduleSettlTimes to this group.
func (m NoUnderlyingDeliveryScheduleSettlTimesRepeatingGroup) Add() NoUnderlyingDeliveryScheduleSettlTimes {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingDeliveryScheduleSettlTimes{g}
}

// Get returns the ith NoUnderlyingDeliveryScheduleSettlTimes in the NoUnderlyingDeliveryScheduleSettlTimesRepeatinGroup.
func (m NoUnderlyingDeliveryScheduleSettlTimesRepeatingGroup) Get(i int) NoUnderlyingDeliveryScheduleSettlTimes {
	return NoUnderlyingDeliveryScheduleSettlTimes{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingDeliveryScheduleSettlDaysRepeatingGroup is a repeating group, Tag 41770.
type NoUnderlyingDeliveryScheduleSettlDaysRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingDeliveryScheduleSettlDaysRepeatingGroup returns an initialized, NoUnderlyingDeliveryScheduleSettlDaysRepeatingGroup.
func NewNoUnderlyingDeliveryScheduleSettlDaysRepeatingGroup() NoUnderlyingDeliveryScheduleSettlDaysRepeatingGroup {
	return NoUnderlyingDeliveryScheduleSettlDaysRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingDeliveryScheduleSettlDays,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingDeliveryScheduleSettlDay),
				quickfix.GroupElement(tag.UnderlyingDeliveryScheduleSettlTotalHours),
				NewNoUnderlyingDeliveryScheduleSettlTimesRepeatingGroup(),
			},
		),
	}
}

// Add create and append a new NoUnderlyingDeliveryScheduleSettlDays to this group.
func (m NoUnderlyingDeliveryScheduleSettlDaysRepeatingGroup) Add() NoUnderlyingDeliveryScheduleSettlDays {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingDeliveryScheduleSettlDays{g}
}

// Get returns the ith NoUnderlyingDeliveryScheduleSettlDays in the NoUnderlyingDeliveryScheduleSettlDaysRepeatinGroup.
func (m NoUnderlyingDeliveryScheduleSettlDaysRepeatingGroup) Get(i int) NoUnderlyingDeliveryScheduleSettlDays {
	return NoUnderlyingDeliveryScheduleSettlDays{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingDeliverySchedulesRepeatingGroup is a repeating group, Tag 41756.
type NoUnderlyingDeliverySchedulesRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingDeliverySchedulesRepeatingGroup returns an initialized, NoUnderlyingDeliverySchedulesRepeatingGroup.
func NewNoUnderlyingDeliverySchedulesRepeatingGroup() NoUnderlyingDeliverySchedulesRepeatingGroup {
	return NoUnderlyingDeliverySchedulesRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingDeliverySchedules,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingDeliveryScheduleType),
				quickfix.GroupElement(tag.UnderlyingDeliveryScheduleXID),
				quickfix.GroupElement(tag.UnderlyingDeliveryScheduleNotional),
				quickfix.GroupElement(tag.UnderlyingDeliveryScheduleNotionalUnitOfMeasure),
				quickfix.GroupElement(tag.UnderlyingDeliveryScheduleNotionalCommodityFrequency),
				quickfix.GroupElement(tag.UnderlyingDeliveryScheduleNegativeTolerance),
				quickfix.GroupElement(tag.UnderlyingDeliverySchedulePositiveTolerance),
				quickfix.GroupElement(tag.UnderlyingDeliveryScheduleToleranceUnitOfMeasure),
				quickfix.GroupElement(tag.UnderlyingDeliveryScheduleToleranceType),
				quickfix.GroupElement(tag.UnderlyingDeliveryScheduleSettlCountry),
				quickfix.GroupElement(tag.UnderlyingDeliveryScheduleSettlTimeZone),
				quickfix.GroupElement(tag.UnderlyingDeliveryScheduleSettlFlowType),
				quickfix.GroupElement(tag.UnderlyingDeliveryScheduleSettlHolidaysProcessingInstruction),
				NewNoUnderlyingDeliveryScheduleSettlDaysRepeatingGroup(),
			},
		),
	}
}

// Add create and append a new NoUnderlyingDeliverySchedules to this group.
func (m NoUnderlyingDeliverySchedulesRepeatingGroup) Add() NoUnderlyingDeliverySchedules {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingDeliverySchedules{g}
}

// Get returns the ith NoUnderlyingDeliverySchedules in the NoUnderlyingDeliverySchedulesRepeatinGroup.
func (m NoUnderlyingDeliverySchedulesRepeatingGroup) Get(i int) NoUnderlyingDeliverySchedules {
	return NoUnderlyingDeliverySchedules{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingStreamsRepeatingGroup is a repeating group, Tag 40540.
type NoUnderlyingStreamsRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingStreamsRepeatingGroup returns an initialized, NoUnderlyingStreamsRepeatingGroup.
func NewNoUnderlyingStreamsRepeatingGroup() NoUnderlyingStreamsRepeatingGroup {
	return NoUnderlyingStreamsRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingStreams,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingStreamType),
				quickfix.GroupElement(tag.UnderlyingStreamDesc),
				quickfix.GroupElement(tag.UnderlyingStreamPaySide),
				quickfix.GroupElement(tag.UnderlyingStreamReceiveSide),
				quickfix.GroupElement(tag.UnderlyingStreamNotional),
				quickfix.GroupElement(tag.UnderlyingStreamCurrency),
				quickfix.GroupElement(tag.UnderlyingStreamEffectiveDateUnadjusted),
				quickfix.GroupElement(tag.UnderlyingStreamEffectiveDateBusinessDayConvention),
				NewNoUnderlyingStreamEffectiveDateBusinessCentersRepeatingGroup(),
				quickfix.GroupElement(tag.UnderlyingStreamEffectiveDateRelativeTo),
				quickfix.GroupElement(tag.UnderlyingStreamEffectiveDateOffsetPeriod),
				quickfix.GroupElement(tag.UnderlyingStreamEffectiveDateOffsetUnit),
				quickfix.GroupElement(tag.UnderlyingStreamEffectiveDateOffsetDayType),
				quickfix.GroupElement(tag.UnderlyingStreamEffectiveDateAdjusted),
				quickfix.GroupElement(tag.UnderlyingStreamTerminationDateUnadjusted),
				quickfix.GroupElement(tag.UnderlyingStreamTerminationDateBusinessDayConvention),
				NewNoUnderlyingStreamTerminationDateBusinessCentersRepeatingGroup(),
				quickfix.GroupElement(tag.UnderlyingStreamTerminationDateRelativeTo),
				quickfix.GroupElement(tag.UnderlyingStreamTerminationDateOffsetPeriod),
				quickfix.GroupElement(tag.UnderlyingStreamTerminationDateOffsetUnit),
				quickfix.GroupElement(tag.UnderlyingStreamTerminationDateOffsetDayType),
				quickfix.GroupElement(tag.UnderlyingStreamTerminationDateAdjusted),
				quickfix.GroupElement(tag.UnderlyingStreamCalculationPeriodBusinessDayConvention),
				NewNoUnderlyingStreamCalculationPeriodBusinessCentersRepeatingGroup(),
				quickfix.GroupElement(tag.UnderlyingStreamFirstPeriodStartDateUnadjusted),
				quickfix.GroupElement(tag.UnderlyingStreamFirstPeriodStartDateBusinessDayConvention),
				NewNoUnderlyingStreamFirstPeriodStartDateBusinessCentersRepeatingGroup(),
				quickfix.GroupElement(tag.UnderlyingStreamFirstPeriodStartDateAdjusted),
				quickfix.GroupElement(tag.UnderlyingStreamFirstRegularPeriodStartDateUnadjusted),
				quickfix.GroupElement(tag.UnderlyingStreamFirstCompoundingPeriodEndDateUnadjusted),
				quickfix.GroupElement(tag.UnderlyingStreamLastRegularPeriodEndDateUnadjusted),
				quickfix.GroupElement(tag.UnderlyingStreamCalculationFrequencyPeriod),
				quickfix.GroupElement(tag.UnderlyingStreamCalculationFrequencyUnit),
				quickfix.GroupElement(tag.UnderlyingStreamCalculationRollConvention),
				quickfix.GroupElement(tag.UnderlyingStreamCalculationPeriodDatesXID),
				quickfix.GroupElement(tag.UnderlyingStreamCalculationPeriodDatesXIDRef),
				NewNoUnderlyingStreamCalculationPeriodDatesRepeatingGroup(),
				quickfix.GroupElement(tag.UnderlyingStreamCalculationBalanceOfFirstPeriod),
				quickfix.GroupElement(tag.UnderlyingStreamCalculationCorrectionPeriod),
				quickfix.GroupElement(tag.UnderlyingStreamCalculationCorrectionUnit),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamType),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamMarketRate),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamDelayIndicator),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamSettlCurrency),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamDayCount),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamAccrualDays),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamDiscountType),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamDiscountRate),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamDiscountRateDayCount),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamCompoundingMethod),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamInitialPrincipalExchangeIndicator),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamInterimPrincipalExchangeIndicator),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamFinalPrincipalExchangeIndicator),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamPaymentDateBusinessDayConvention),
				NewNoUnderlyingPaymentStreamPaymentDateBusinessCentersRepeatingGroup(),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamPaymentFrequencyPeriod),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamPaymentFrequencyUnit),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamPaymentRollConvention),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamFirstPaymentDateUnadjusted),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamLastRegularPaymentDateUnadjusted),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamPaymentDateRelativeTo),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamPaymentDateOffsetPeriod),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamPaymentDateOffsetUnit),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamPaymentDateOffsetDayType),
				NewNoUnderlyingPaymentStreamPaymentDatesRepeatingGroup(),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamMasterAgreementPaymentDatesIndicator),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamFinalPricePaymentDateUnadjusted),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamFinalPricePaymentDateRelativeTo),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamFinalPricePaymentDateOffsetPeriod),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamFinalPricePaymentDateOffsetUnit),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamFinalPricePaymentDateOffsetDayType),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamFinalPricePaymentDateAdjusted),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamResetDateRelativeTo),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamResetDateBusinessDayConvention),
				NewNoUnderlyingPaymentStreamResetDateBusinessCentersRepeatingGroup(),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamResetFrequencyPeriod),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamResetFrequencyUnit),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamResetWeeklyRollConvention),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamInitialFixingDateRelativeTo),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamInitialFixingDateBusinessDayConvention),
				NewNoUnderlyingPaymentStreamInitialFixingDateBusinessCentersRepeatingGroup(),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamInitialFixingDateOffsetPeriod),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamInitialFixingDateOffsetUnit),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamInitialFixingDateOffsetDayType),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamInitialFixingDateAdjusted),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamFixingDateRelativeTo),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamFixingDateBusinessDayConvention),
				NewNoUnderlyingPaymentStreamFixingDateBusinessCentersRepeatingGroup(),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamFixingDateOffsetPeriod),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamFixingDateOffsetUnit),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamFixingDateOffsetDayType),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamFixingDateAdjusted),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamRateCutoffDateOffsetPeriod),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamRateCutoffDateOffsetUnit),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamRateCutoffDateOffsetDayType),
				NewNoUnderlyingPaymentStreamFixingDatesRepeatingGroup(),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamRate),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamFixedAmount),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamRateOrAmountCurrency),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamFutureValueNotional),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamFutureValueDateAdjusted),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamFixedAmountUnitOfMeasure),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamTotalFixedAmount),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamWorldScaleRate),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamContractPrice),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamContractPriceCurrency),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamRateIndex),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamRateIndexSource),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamRateIndexCurveUnit),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamRateIndexCurvePeriod),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamRateMultiplier),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamRateSpread),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamRateSpreadPositionType),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamRateTreatment),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamCapRate),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamCapRateBuySide),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamCapRateSellSide),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamFloorRate),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamFloorRateBuySide),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamFloorRateSellSide),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamInitialRate),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamFinalRateRoundingDirection),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamFinalRatePrecision),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamAveragingMethod),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamNegativeRateTreatment),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamInflationLagPeriod),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamInflationLagUnit),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamInflationLagDayType),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamInflationInterpolationMethod),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamInflationIndexSource),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamInflationPublicationSource),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamInflationInitialIndexLevel),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamInflationFallbackBondApplicable),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamFRADiscounting),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamRateIndex2CurveUnit),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamRateIndex2CurvePeriod),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamRateIndexLocation),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamRateIndexLevel),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamRateIndexUnitOfMeasure),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamSettlLevel),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamReferenceLevel),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamReferenceLevelUnitOfMeasure),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamReferenceLevelEqualsZeroIndicator),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamRateSpreadCurrency),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamRateSpreadUnitOfMeasure),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamRateConversionFactor),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamRateSpreadType),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamLastResetRate),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamFinalRate),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamCalculationLagPeriod),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamCalculationLagUnit),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamFirstObservationDateOffsetPeriod),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamFirstObservationDateOffsetUnit),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamPricingDayType),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamPricingDayDistribution),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamPricingDayCount),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamPricingBusinessCalendar),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamPricingBusinessDayConvention),
				NewNoUnderlyingPaymentStreamPricingBusinessCentersRepeatingGroup(),
				NewNoUnderlyingPaymentStreamPricingDaysRepeatingGroup(),
				NewNoUnderlyingPaymentStreamPricingDatesRepeatingGroup(),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamFirstObservationDateUnadjusted),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamFirstObservationDateRelativeTo),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamFirstObservationDateOffsetDayType),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamFirstObservationDateAdjusted),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamUnderlierRefID),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamFormulaCurrency),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamFormulaCurrencyDeterminationMethod),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamFormulaReferenceAmount),
				NewNoUnderlyingPaymentStreamFormulasRepeatingGroup(),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamFormulaImageLength),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamFormulaImage),
				quickfix.GroupElement(tag.UnderlyingDividendReinvestmentIndicator),
				quickfix.GroupElement(tag.UnderlyingDividendEntitlementEvent),
				quickfix.GroupElement(tag.UnderlyingDividendAmountType),
				quickfix.GroupElement(tag.UnderlyingDividendUnderlierRefID),
				NewNoUnderlyingDividendPeriodsRepeatingGroup(),
				quickfix.GroupElement(tag.UnderlyingExtraordinaryDividendPartySide),
				quickfix.GroupElement(tag.UnderlyingExtraordinaryDividendAmountType),
				quickfix.GroupElement(tag.UnderlyingExtraordinaryDividendCurrency),
				quickfix.GroupElement(tag.UnderlyingExtraordinaryDividendDeterminationMethod),
				quickfix.GroupElement(tag.UnderlyingDividendFXTriggerDateRelativeTo),
				quickfix.GroupElement(tag.UnderlyingDividendFXTriggerDateOffsetPeriod),
				quickfix.GroupElement(tag.UnderlyingDividendFXTriggerDateOffsetUnit),
				quickfix.GroupElement(tag.UnderlyingDividendFXTriggerDateOffsetDayType),
				quickfix.GroupElement(tag.UnderlyingDividendFXTriggerDateUnadjusted),
				quickfix.GroupElement(tag.UnderlyingDividendFXTriggerDateBusinessDayConvention),
				NewNoUnderlyingDividendFXTriggerDateBusinessCentersRepeatingGroup(),
				quickfix.GroupElement(tag.UnderlyingDividendFXTriggerDateAdjusted),
				quickfix.GroupElement(tag.UnderlyingDividendFloatingRateIndex),
				quickfix.GroupElement(tag.UnderlyingDividendFloatingRateIndexCurvePeriod),
				quickfix.GroupElement(tag.UnderlyingDividendFloatingRateIndexCurveUnit),
				quickfix.GroupElement(tag.UnderlyingDividendFloatingRateMultiplier),
				quickfix.GroupElement(tag.UnderlyingDividendFloatingRateSpread),
				quickfix.GroupElement(tag.UnderlyingDividendFloatingRateSpreadPositionType),
				quickfix.GroupElement(tag.UnderlyingDividendFloatingRateTreatment),
				quickfix.GroupElement(tag.UnderlyingDividendCapRate),
				quickfix.GroupElement(tag.UnderlyingDividendCapRateBuySide),
				quickfix.GroupElement(tag.UnderlyingDividendCapRateSellSide),
				quickfix.GroupElement(tag.UnderlyingDividendFloorRate),
				quickfix.GroupElement(tag.UnderlyingDividendFloorRateBuySide),
				quickfix.GroupElement(tag.UnderlyingDividendFloorRateSellSide),
				quickfix.GroupElement(tag.UnderlyingDividendInitialRate),
				quickfix.GroupElement(tag.UnderlyingDividendFinalRateRoundingDirection),
				quickfix.GroupElement(tag.UnderlyingDividendFinalRatePrecision),
				quickfix.GroupElement(tag.UnderlyingDividendAveragingMethod),
				quickfix.GroupElement(tag.UnderlyingDividendNegativeRateTreatment),
				quickfix.GroupElement(tag.UnderlyingDividendAccrualFixedRate),
				quickfix.GroupElement(tag.UnderlyingDividendAccrualPaymentDateRelativeTo),
				quickfix.GroupElement(tag.UnderlyingDividendAccrualPaymentDateOffsetPeriod),
				quickfix.GroupElement(tag.UnderlyingDividendAccrualPaymentDateOffsetUnit),
				quickfix.GroupElement(tag.UnderlyingDividendAccrualPaymentDateOffsetDayType),
				quickfix.GroupElement(tag.UnderlyingDividendAccrualPaymentDateUnadjusted),
				quickfix.GroupElement(tag.UnderlyingDividendAccrualPaymentDateBusinessDayConvention),
				NewNoUnderlyingDividendAccrualPaymentDateBusinessCentersRepeatingGroup(),
				quickfix.GroupElement(tag.UnderlyingDividendAccrualPaymentDateAdjusted),
				quickfix.GroupElement(tag.UnderlyingDividendCompoundingMethod),
				quickfix.GroupElement(tag.UnderlyingDividendNumOfIndexUnits),
				quickfix.GroupElement(tag.UnderlyingDividendCashPercentage),
				quickfix.GroupElement(tag.UnderlyingDividendCashEquivalentPercentage),
				quickfix.GroupElement(tag.UnderlyingNonCashDividendTreatment),
				quickfix.GroupElement(tag.UnderlyingDividendComposition),
				quickfix.GroupElement(tag.UnderlyingSpecialDividendsIndicator),
				quickfix.GroupElement(tag.UnderlyingMaterialDividendsIndicator),
				quickfix.GroupElement(tag.UnderlyingOptionsExchangeDividendsIndicator),
				quickfix.GroupElement(tag.UnderlyingAdditionalDividendsIndicator),
				quickfix.GroupElement(tag.UnderlyingAllDividendsIndicator),
				quickfix.GroupElement(tag.UnderlyingReturnRateNotionalReset),
				NewNoUnderlyingReturnRatesRepeatingGroup(),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamLinkInitialLevel),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamLinkClosingLevelIndicator),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamLinkExpiringLevelIndicator),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamLinkEstimatedTradingDays),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamLinkStrikePrice),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamLinkStrikePriceType),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamLinkMaximumBoundary),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamLinkMinimumBoundary),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamLinkNumberOfDataSeries),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamVarianceUnadjustedCap),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamRealizedVarianceMethod),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamDaysAdjustmentIndicator),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamNearestExchangeContractRefID),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamVegaNotionalAmount),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamRateIndexID),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamRateIndexIDSource),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamNonDeliverableRefCurrency),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamNonDeliverableFixingDatesBusinessDayConvention),
				NewNoUnderlyingPaymentStreamNonDeliverableFixingDatesBusinessCentersRepeatingGroup(),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamNonDeliverableFixingDatesRelativeTo),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamNonDeliverableFixingDatesOffsetPeriod),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamNonDeliverableFixingDatesOffsetUnit),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamNonDeliverableFixingDatesOffsetDayType),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamNonDeliverableSettlRateSource),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamNonDeliverableSettlReferencePage),
				NewNoUnderlyingNonDeliverableFixingDatesRepeatingGroup(),
				NewNoUnderlyingSettlRateFallbacksRepeatingGroup(),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamFlatRateIndicator),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamFlatRateAmount),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamFlatRateCurrency),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamMaximumPaymentAmount),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamMaximumPaymentCurrency),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamMaximumTransactionAmount),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamMaximumTransactionCurrency),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamCashSettlIndicator),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamCompoundingXIDRef),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamCompoundingSpread),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamInterpolationMethod),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamInterpolationPeriod),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamCompoundingFixedRate),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamCompoundingRateIndex),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamCompoundingRateIndexCurvePeriod),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamCompoundingRateIndexCurveUnit),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamCompoundingRateMultiplier),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamCompoundingRateSpread),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamCompoundingRateSpreadPositionType),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamCompoundingRateTreatment),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamCompoundingCapRate),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamCompoundingCapRateBuySide),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamCompoundingCapRateSellSide),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamCompoundingFloorRate),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamCompoundingFloorRateBuySide),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamCompoundingFloorRateSellSide),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamCompoundingInitialRate),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamCompoundingFinalRateRoundingDirection),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamCompoundingFinalRatePrecision),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamCompoundingAveragingMethod),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamCompoundingNegativeRateTreatment),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamCompoundingDatesBusinessDayConvention),
				NewNoUnderlyingPaymentStreamCompoundingDatesBusinessCentersRepeatingGroup(),
				NewNoUnderlyingPaymentStreamCompoundingDatesRepeatingGroup(),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamCompoundingDatesRelativeTo),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamCompoundingDatesOffsetPeriod),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamCompoundingDatesOffsetUnit),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamCompoundingDatesOffsetDayType),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamCompoundingPeriodSkip),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamCompoundingStartDateUnadjusted),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamCompoundingStartDateRelativeTo),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamCompoundingStartDateOffsetPeriod),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamCompoundingStartDateOffsetUnit),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamCompoundingStartDateOffsetDayType),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamCompoundingStartDateAdjusted),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamCompoundingEndDateUnadjusted),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamCompoundingEndDateRelativeTo),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamCompoundingEndDateOffsetPeriod),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamCompoundingEndDateOffsetUnit),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamCompoundingEndDateOffsetDayType),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamCompoundingEndDateAdjusted),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamCompoundingFrequencyPeriod),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamCompoundingFrequencyUnit),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamCompoundingRollConvention),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamBoundsFirstDateUnadjusted),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamBoundsLastDateUnadjusted),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamOtherDayCount),
				NewNoUnderlyingPaymentSchedulesRepeatingGroup(),
				NewNoUnderlyingPaymentStubsRepeatingGroup(),
				quickfix.GroupElement(tag.UnderlyingStreamText),
				quickfix.GroupElement(tag.EncodedUnderlyingStreamTextLen),
				quickfix.GroupElement(tag.EncodedUnderlyingStreamText),
				quickfix.GroupElement(tag.UnderlyingStreamXID),
				quickfix.GroupElement(tag.UnderlyingStreamNotionalXIDRef),
				quickfix.GroupElement(tag.UnderlyingStreamNotionalFrequencyPeriod),
				quickfix.GroupElement(tag.UnderlyingStreamNotionalFrequencyUnit),
				quickfix.GroupElement(tag.UnderlyingStreamNotionalCommodityFrequency),
				quickfix.GroupElement(tag.UnderlyingStreamNotionalUnitOfMeasure),
				quickfix.GroupElement(tag.UnderlyingStreamTotalNotional),
				quickfix.GroupElement(tag.UnderlyingStreamTotalNotionalUnitOfMeasure),
				quickfix.GroupElement(tag.UnderlyingStreamCommodityBase),
				quickfix.GroupElement(tag.UnderlyingStreamCommodityType),
				quickfix.GroupElement(tag.UnderlyingStreamCommoditySecurityID),
				quickfix.GroupElement(tag.UnderlyingStreamCommoditySecurityIDSource),
				NewNoUnderlyingStreamCommodityAltIDsRepeatingGroup(),
				quickfix.GroupElement(tag.UnderlyingStreamCommodityDesc),
				quickfix.GroupElement(tag.EncodedUnderlyingStreamCommodityDescLen),
				quickfix.GroupElement(tag.EncodedUnderlyingStreamCommodityDesc),
				NewNoUnderlyingStreamAssetAttributesRepeatingGroup(),
				quickfix.GroupElement(tag.UnderlyingStreamCommodityUnitOfMeasure),
				quickfix.GroupElement(tag.UnderlyingStreamCommodityCurrency),
				quickfix.GroupElement(tag.UnderlyingStreamCommodityExchange),
				quickfix.GroupElement(tag.UnderlyingStreamCommodityRateSource),
				quickfix.GroupElement(tag.UnderlyingStreamCommodityRateReferencePage),
				quickfix.GroupElement(tag.UnderlyingStreamCommodityRateReferencePageHeading),
				quickfix.GroupElement(tag.UnderlyingStreamDataProvider),
				NewNoUnderlyingStreamCommodityDataSourcesRepeatingGroup(),
				quickfix.GroupElement(tag.UnderlyingStreamCommodityPricingType),
				quickfix.GroupElement(tag.UnderlyingStreamCommodityNearbySettlDayPeriod),
				quickfix.GroupElement(tag.UnderlyingStreamCommodityNearbySettlDayUnit),
				quickfix.GroupElement(tag.UnderlyingStreamCommoditySettlDateUnadjusted),
				quickfix.GroupElement(tag.UnderlyingStreamCommoditySettlDateBusinessDayConvention),
				NewNoUnderlyingStreamCommoditySettlBusinessCentersRepeatingGroup(),
				quickfix.GroupElement(tag.UnderlyingStreamCommoditySettlDateAdjusted),
				quickfix.GroupElement(tag.UnderlyingStreamCommoditySettlMonth),
				quickfix.GroupElement(tag.UnderlyingStreamCommoditySettlDateRollPeriod),
				quickfix.GroupElement(tag.UnderlyingStreamCommoditySettlDateRollUnit),
				quickfix.GroupElement(tag.UnderlyingStreamCommoditySettlDayType),
				NewNoUnderlyingStreamCommoditySettlPeriodsRepeatingGroup(),
				quickfix.GroupElement(tag.UnderlyingStreamCommodityXID),
				quickfix.GroupElement(tag.UnderlyingStreamCommodityXIDRef),
				quickfix.GroupElement(tag.UnderlyingStreamCommodityDeliveryPricingRegion),
				quickfix.GroupElement(tag.UnderlyingDeliveryStreamType),
				NewNoUnderlyingDeliveryStreamCommoditySourcesRepeatingGroup(),
				quickfix.GroupElement(tag.UnderlyingDeliveryStreamPipeline),
				quickfix.GroupElement(tag.UnderlyingDeliveryStreamEntryPoint),
				quickfix.GroupElement(tag.UnderlyingDeliveryStreamWithdrawalPoint),
				quickfix.GroupElement(tag.UnderlyingDeliveryStreamDeliveryPoint),
				quickfix.GroupElement(tag.UnderlyingDeliveryStreamDeliveryRestriction),
				quickfix.GroupElement(tag.UnderlyingDeliveryStreamDeliveryContingency),
				quickfix.GroupElement(tag.UnderlyingDeliveryStreamDeliveryContingentPartySide),
				quickfix.GroupElement(tag.UnderlyingDeliveryStreamDeliverAtSourceIndicator),
				quickfix.GroupElement(tag.UnderlyingDeliveryStreamRiskApportionment),
				quickfix.GroupElement(tag.UnderlyingDeliveryStreamRiskApportionmentSource),
				NewNoUnderlyingDeliveryStreamCyclesRepeatingGroup(),
				quickfix.GroupElement(tag.UnderlyingDeliveryStreamTitleTransferLocation),
				quickfix.GroupElement(tag.UnderlyingDeliveryStreamTitleTransferCondition),
				quickfix.GroupElement(tag.UnderlyingDeliveryStreamImporterOfRecord),
				quickfix.GroupElement(tag.UnderlyingDeliveryStreamNegativeTolerance),
				quickfix.GroupElement(tag.UnderlyingDeliveryStreamPositiveTolerance),
				quickfix.GroupElement(tag.UnderlyingDeliveryStreamToleranceUnitOfMeasure),
				quickfix.GroupElement(tag.UnderlyingDeliveryStreamToleranceType),
				quickfix.GroupElement(tag.UnderlyingDeliveryStreamToleranceOptionSide),
				quickfix.GroupElement(tag.UnderlyingDeliveryStreamTotalPositiveTolerance),
				quickfix.GroupElement(tag.UnderlyingDeliveryStreamTotalNegativeTolerance),
				quickfix.GroupElement(tag.UnderlyingDeliveryStreamNotionalConversionFactor),
				quickfix.GroupElement(tag.UnderlyingDeliveryStreamTransportEquipment),
				quickfix.GroupElement(tag.UnderlyingDeliveryStreamElectingPartySide),
				quickfix.GroupElement(tag.UnderlyingDeliveryStreamDeliveryPointSource),
				quickfix.GroupElement(tag.UnderlyingDeliveryStreamDeliveryPointDesc),
				quickfix.GroupElement(tag.UnderlyingDeliveryStreamRouteOrCharter),
				NewNoUnderlyingDeliverySchedulesRepeatingGroup(),
				quickfix.GroupElement(tag.UnderlyingStreamVersion),
				quickfix.GroupElement(tag.UnderlyingStreamVersionEffectiveDate),
				quickfix.GroupElement(tag.UnderlyingStreamNotionalDeterminationMethod),
				quickfix.GroupElement(tag.UnderlyingStreamNotionalAdjustments),
			},
		),
	}
}

// Add create and append a new NoUnderlyingStreams to this group.
func (m NoUnderlyingStreamsRepeatingGroup) Add() NoUnderlyingStreams {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingStreams{g}
}

// Get returns the ith NoUnderlyingStreams in the NoUnderlyingStreamsRepeatinGroup.
func (m NoUnderlyingStreamsRepeatingGroup) Get(i int) NoUnderlyingStreams {
	return NoUnderlyingStreams{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingBusinessCenters is a repeating group element, Tag 40962.
type NoUnderlyingBusinessCenters struct {
	*quickfix.Group
}

// SetUnderlyingBusinessCenter sets UnderlyingBusinessCenter, Tag 40963.
func (m NoUnderlyingBusinessCenters) SetUnderlyingBusinessCenter(v string) {
	m.Set(field.NewUnderlyingBusinessCenter(v))
}

// GetUnderlyingBusinessCenter gets UnderlyingBusinessCenter, Tag 40963.
func (m NoUnderlyingBusinessCenters) GetUnderlyingBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingBusinessCenter returns true if UnderlyingBusinessCenter is present, Tag 40963.
func (m NoUnderlyingBusinessCenters) HasUnderlyingBusinessCenter() bool {
	return m.Has(tag.UnderlyingBusinessCenter)
}

// NoUnderlyingBusinessCentersRepeatingGroup is a repeating group, Tag 40962.
type NoUnderlyingBusinessCentersRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingBusinessCentersRepeatingGroup returns an initialized, NoUnderlyingBusinessCentersRepeatingGroup.
func NewNoUnderlyingBusinessCentersRepeatingGroup() NoUnderlyingBusinessCentersRepeatingGroup {
	return NoUnderlyingBusinessCentersRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingBusinessCenters,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingBusinessCenter),
			},
		),
	}
}

// Add create and append a new NoUnderlyingBusinessCenters to this group.
func (m NoUnderlyingBusinessCentersRepeatingGroup) Add() NoUnderlyingBusinessCenters {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingBusinessCenters{g}
}

// Get returns the ith NoUnderlyingBusinessCenters in the NoUnderlyingBusinessCentersRepeatinGroup.
func (m NoUnderlyingBusinessCentersRepeatingGroup) Get(i int) NoUnderlyingBusinessCenters {
	return NoUnderlyingBusinessCenters{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingOptionExerciseBusinessCenters is a repeating group element, Tag 41820.
type NoUnderlyingOptionExerciseBusinessCenters struct {
	*quickfix.Group
}

// SetUnderlyingOptionExerciseBusinessCenter sets UnderlyingOptionExerciseBusinessCenter, Tag 41821.
func (m NoUnderlyingOptionExerciseBusinessCenters) SetUnderlyingOptionExerciseBusinessCenter(v string) {
	m.Set(field.NewUnderlyingOptionExerciseBusinessCenter(v))
}

// GetUnderlyingOptionExerciseBusinessCenter gets UnderlyingOptionExerciseBusinessCenter, Tag 41821.
func (m NoUnderlyingOptionExerciseBusinessCenters) GetUnderlyingOptionExerciseBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingOptionExerciseBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingOptionExerciseBusinessCenter returns true if UnderlyingOptionExerciseBusinessCenter is present, Tag 41821.
func (m NoUnderlyingOptionExerciseBusinessCenters) HasUnderlyingOptionExerciseBusinessCenter() bool {
	return m.Has(tag.UnderlyingOptionExerciseBusinessCenter)
}

// NoUnderlyingOptionExerciseBusinessCentersRepeatingGroup is a repeating group, Tag 41820.
type NoUnderlyingOptionExerciseBusinessCentersRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingOptionExerciseBusinessCentersRepeatingGroup returns an initialized, NoUnderlyingOptionExerciseBusinessCentersRepeatingGroup.
func NewNoUnderlyingOptionExerciseBusinessCentersRepeatingGroup() NoUnderlyingOptionExerciseBusinessCentersRepeatingGroup {
	return NoUnderlyingOptionExerciseBusinessCentersRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingOptionExerciseBusinessCenters,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingOptionExerciseBusinessCenter),
			},
		),
	}
}

// Add create and append a new NoUnderlyingOptionExerciseBusinessCenters to this group.
func (m NoUnderlyingOptionExerciseBusinessCentersRepeatingGroup) Add() NoUnderlyingOptionExerciseBusinessCenters {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingOptionExerciseBusinessCenters{g}
}

// Get returns the ith NoUnderlyingOptionExerciseBusinessCenters in the NoUnderlyingOptionExerciseBusinessCentersRepeatinGroup.
func (m NoUnderlyingOptionExerciseBusinessCentersRepeatingGroup) Get(i int) NoUnderlyingOptionExerciseBusinessCenters {
	return NoUnderlyingOptionExerciseBusinessCenters{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingOptionExerciseDates is a repeating group element, Tag 41841.
type NoUnderlyingOptionExerciseDates struct {
	*quickfix.Group
}

// SetUnderlyingOptionExerciseDate sets UnderlyingOptionExerciseDate, Tag 41842.
func (m NoUnderlyingOptionExerciseDates) SetUnderlyingOptionExerciseDate(v string) {
	m.Set(field.NewUnderlyingOptionExerciseDate(v))
}

// SetUnderlyingOptionExerciseDateType sets UnderlyingOptionExerciseDateType, Tag 41843.
func (m NoUnderlyingOptionExerciseDates) SetUnderlyingOptionExerciseDateType(v int) {
	m.Set(field.NewUnderlyingOptionExerciseDateType(v))
}

// GetUnderlyingOptionExerciseDate gets UnderlyingOptionExerciseDate, Tag 41842.
func (m NoUnderlyingOptionExerciseDates) GetUnderlyingOptionExerciseDate() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingOptionExerciseDateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingOptionExerciseDateType gets UnderlyingOptionExerciseDateType, Tag 41843.
func (m NoUnderlyingOptionExerciseDates) GetUnderlyingOptionExerciseDateType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingOptionExerciseDateTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingOptionExerciseDate returns true if UnderlyingOptionExerciseDate is present, Tag 41842.
func (m NoUnderlyingOptionExerciseDates) HasUnderlyingOptionExerciseDate() bool {
	return m.Has(tag.UnderlyingOptionExerciseDate)
}

// HasUnderlyingOptionExerciseDateType returns true if UnderlyingOptionExerciseDateType is present, Tag 41843.
func (m NoUnderlyingOptionExerciseDates) HasUnderlyingOptionExerciseDateType() bool {
	return m.Has(tag.UnderlyingOptionExerciseDateType)
}

// NoUnderlyingOptionExerciseDatesRepeatingGroup is a repeating group, Tag 41841.
type NoUnderlyingOptionExerciseDatesRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingOptionExerciseDatesRepeatingGroup returns an initialized, NoUnderlyingOptionExerciseDatesRepeatingGroup.
func NewNoUnderlyingOptionExerciseDatesRepeatingGroup() NoUnderlyingOptionExerciseDatesRepeatingGroup {
	return NoUnderlyingOptionExerciseDatesRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingOptionExerciseDates,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingOptionExerciseDate),
				quickfix.GroupElement(tag.UnderlyingOptionExerciseDateType),
			},
		),
	}
}

// Add create and append a new NoUnderlyingOptionExerciseDates to this group.
func (m NoUnderlyingOptionExerciseDatesRepeatingGroup) Add() NoUnderlyingOptionExerciseDates {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingOptionExerciseDates{g}
}

// Get returns the ith NoUnderlyingOptionExerciseDates in the NoUnderlyingOptionExerciseDatesRepeatinGroup.
func (m NoUnderlyingOptionExerciseDatesRepeatingGroup) Get(i int) NoUnderlyingOptionExerciseDates {
	return NoUnderlyingOptionExerciseDates{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingOptionExerciseExpirationDateBusinessCenters is a repeating group element, Tag 41844.
type NoUnderlyingOptionExerciseExpirationDateBusinessCenters struct {
	*quickfix.Group
}

// SetUnderlyingOptionExerciseExpirationDateBusinessCenter sets UnderlyingOptionExerciseExpirationDateBusinessCenter, Tag 41845.
func (m NoUnderlyingOptionExerciseExpirationDateBusinessCenters) SetUnderlyingOptionExerciseExpirationDateBusinessCenter(v string) {
	m.Set(field.NewUnderlyingOptionExerciseExpirationDateBusinessCenter(v))
}

// GetUnderlyingOptionExerciseExpirationDateBusinessCenter gets UnderlyingOptionExerciseExpirationDateBusinessCenter, Tag 41845.
func (m NoUnderlyingOptionExerciseExpirationDateBusinessCenters) GetUnderlyingOptionExerciseExpirationDateBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingOptionExerciseExpirationDateBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingOptionExerciseExpirationDateBusinessCenter returns true if UnderlyingOptionExerciseExpirationDateBusinessCenter is present, Tag 41845.
func (m NoUnderlyingOptionExerciseExpirationDateBusinessCenters) HasUnderlyingOptionExerciseExpirationDateBusinessCenter() bool {
	return m.Has(tag.UnderlyingOptionExerciseExpirationDateBusinessCenter)
}

// NoUnderlyingOptionExerciseExpirationDateBusinessCentersRepeatingGroup is a repeating group, Tag 41844.
type NoUnderlyingOptionExerciseExpirationDateBusinessCentersRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingOptionExerciseExpirationDateBusinessCentersRepeatingGroup returns an initialized, NoUnderlyingOptionExerciseExpirationDateBusinessCentersRepeatingGroup.
func NewNoUnderlyingOptionExerciseExpirationDateBusinessCentersRepeatingGroup() NoUnderlyingOptionExerciseExpirationDateBusinessCentersRepeatingGroup {
	return NoUnderlyingOptionExerciseExpirationDateBusinessCentersRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingOptionExerciseExpirationDateBusinessCenters,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingOptionExerciseExpirationDateBusinessCenter),
			},
		),
	}
}

// Add create and append a new NoUnderlyingOptionExerciseExpirationDateBusinessCenters to this group.
func (m NoUnderlyingOptionExerciseExpirationDateBusinessCentersRepeatingGroup) Add() NoUnderlyingOptionExerciseExpirationDateBusinessCenters {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingOptionExerciseExpirationDateBusinessCenters{g}
}

// Get returns the ith NoUnderlyingOptionExerciseExpirationDateBusinessCenters in the NoUnderlyingOptionExerciseExpirationDateBusinessCentersRepeatinGroup.
func (m NoUnderlyingOptionExerciseExpirationDateBusinessCentersRepeatingGroup) Get(i int) NoUnderlyingOptionExerciseExpirationDateBusinessCenters {
	return NoUnderlyingOptionExerciseExpirationDateBusinessCenters{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingOptionExerciseExpirationDates is a repeating group element, Tag 41856.
type NoUnderlyingOptionExerciseExpirationDates struct {
	*quickfix.Group
}

// SetUnderlyingOptionExerciseExpirationDate sets UnderlyingOptionExerciseExpirationDate, Tag 41857.
func (m NoUnderlyingOptionExerciseExpirationDates) SetUnderlyingOptionExerciseExpirationDate(v string) {
	m.Set(field.NewUnderlyingOptionExerciseExpirationDate(v))
}

// SetUnderlyingOptionExerciseExpirationDateType sets UnderlyingOptionExerciseExpirationDateType, Tag 41858.
func (m NoUnderlyingOptionExerciseExpirationDates) SetUnderlyingOptionExerciseExpirationDateType(v int) {
	m.Set(field.NewUnderlyingOptionExerciseExpirationDateType(v))
}

// GetUnderlyingOptionExerciseExpirationDate gets UnderlyingOptionExerciseExpirationDate, Tag 41857.
func (m NoUnderlyingOptionExerciseExpirationDates) GetUnderlyingOptionExerciseExpirationDate() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingOptionExerciseExpirationDateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingOptionExerciseExpirationDateType gets UnderlyingOptionExerciseExpirationDateType, Tag 41858.
func (m NoUnderlyingOptionExerciseExpirationDates) GetUnderlyingOptionExerciseExpirationDateType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingOptionExerciseExpirationDateTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingOptionExerciseExpirationDate returns true if UnderlyingOptionExerciseExpirationDate is present, Tag 41857.
func (m NoUnderlyingOptionExerciseExpirationDates) HasUnderlyingOptionExerciseExpirationDate() bool {
	return m.Has(tag.UnderlyingOptionExerciseExpirationDate)
}

// HasUnderlyingOptionExerciseExpirationDateType returns true if UnderlyingOptionExerciseExpirationDateType is present, Tag 41858.
func (m NoUnderlyingOptionExerciseExpirationDates) HasUnderlyingOptionExerciseExpirationDateType() bool {
	return m.Has(tag.UnderlyingOptionExerciseExpirationDateType)
}

// NoUnderlyingOptionExerciseExpirationDatesRepeatingGroup is a repeating group, Tag 41856.
type NoUnderlyingOptionExerciseExpirationDatesRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingOptionExerciseExpirationDatesRepeatingGroup returns an initialized, NoUnderlyingOptionExerciseExpirationDatesRepeatingGroup.
func NewNoUnderlyingOptionExerciseExpirationDatesRepeatingGroup() NoUnderlyingOptionExerciseExpirationDatesRepeatingGroup {
	return NoUnderlyingOptionExerciseExpirationDatesRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingOptionExerciseExpirationDates,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingOptionExerciseExpirationDate),
				quickfix.GroupElement(tag.UnderlyingOptionExerciseExpirationDateType),
			},
		),
	}
}

// Add create and append a new NoUnderlyingOptionExerciseExpirationDates to this group.
func (m NoUnderlyingOptionExerciseExpirationDatesRepeatingGroup) Add() NoUnderlyingOptionExerciseExpirationDates {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingOptionExerciseExpirationDates{g}
}

// Get returns the ith NoUnderlyingOptionExerciseExpirationDates in the NoUnderlyingOptionExerciseExpirationDatesRepeatinGroup.
func (m NoUnderlyingOptionExerciseExpirationDatesRepeatingGroup) Get(i int) NoUnderlyingOptionExerciseExpirationDates {
	return NoUnderlyingOptionExerciseExpirationDates{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingMarketDisruptionEvents is a repeating group element, Tag 41864.
type NoUnderlyingMarketDisruptionEvents struct {
	*quickfix.Group
}

// SetUnderlyingMarketDisruptionEvent sets UnderlyingMarketDisruptionEvent, Tag 41865.
func (m NoUnderlyingMarketDisruptionEvents) SetUnderlyingMarketDisruptionEvent(v string) {
	m.Set(field.NewUnderlyingMarketDisruptionEvent(v))
}

// SetUnderlyingMarketDisruptionValue sets UnderlyingMarketDisruptionValue, Tag 41338.
func (m NoUnderlyingMarketDisruptionEvents) SetUnderlyingMarketDisruptionValue(v string) {
	m.Set(field.NewUnderlyingMarketDisruptionValue(v))
}

// GetUnderlyingMarketDisruptionEvent gets UnderlyingMarketDisruptionEvent, Tag 41865.
func (m NoUnderlyingMarketDisruptionEvents) GetUnderlyingMarketDisruptionEvent() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingMarketDisruptionEventField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingMarketDisruptionValue gets UnderlyingMarketDisruptionValue, Tag 41338.
func (m NoUnderlyingMarketDisruptionEvents) GetUnderlyingMarketDisruptionValue() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingMarketDisruptionValueField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingMarketDisruptionEvent returns true if UnderlyingMarketDisruptionEvent is present, Tag 41865.
func (m NoUnderlyingMarketDisruptionEvents) HasUnderlyingMarketDisruptionEvent() bool {
	return m.Has(tag.UnderlyingMarketDisruptionEvent)
}

// HasUnderlyingMarketDisruptionValue returns true if UnderlyingMarketDisruptionValue is present, Tag 41338.
func (m NoUnderlyingMarketDisruptionEvents) HasUnderlyingMarketDisruptionValue() bool {
	return m.Has(tag.UnderlyingMarketDisruptionValue)
}

// NoUnderlyingMarketDisruptionEventsRepeatingGroup is a repeating group, Tag 41864.
type NoUnderlyingMarketDisruptionEventsRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingMarketDisruptionEventsRepeatingGroup returns an initialized, NoUnderlyingMarketDisruptionEventsRepeatingGroup.
func NewNoUnderlyingMarketDisruptionEventsRepeatingGroup() NoUnderlyingMarketDisruptionEventsRepeatingGroup {
	return NoUnderlyingMarketDisruptionEventsRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingMarketDisruptionEvents,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingMarketDisruptionEvent),
				quickfix.GroupElement(tag.UnderlyingMarketDisruptionValue),
			},
		),
	}
}

// Add create and append a new NoUnderlyingMarketDisruptionEvents to this group.
func (m NoUnderlyingMarketDisruptionEventsRepeatingGroup) Add() NoUnderlyingMarketDisruptionEvents {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingMarketDisruptionEvents{g}
}

// Get returns the ith NoUnderlyingMarketDisruptionEvents in the NoUnderlyingMarketDisruptionEventsRepeatinGroup.
func (m NoUnderlyingMarketDisruptionEventsRepeatingGroup) Get(i int) NoUnderlyingMarketDisruptionEvents {
	return NoUnderlyingMarketDisruptionEvents{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingMarketDisruptionFallbacks is a repeating group element, Tag 41866.
type NoUnderlyingMarketDisruptionFallbacks struct {
	*quickfix.Group
}

// SetUnderlyingMarketDisruptionFallbackType sets UnderlyingMarketDisruptionFallbackType, Tag 41867.
func (m NoUnderlyingMarketDisruptionFallbacks) SetUnderlyingMarketDisruptionFallbackType(v string) {
	m.Set(field.NewUnderlyingMarketDisruptionFallbackType(v))
}

// SetUnderlyingMarketDisruptionFallbackValue sets UnderlyingMarketDisruptionFallbackValue, Tag 41339.
func (m NoUnderlyingMarketDisruptionFallbacks) SetUnderlyingMarketDisruptionFallbackValue(v string) {
	m.Set(field.NewUnderlyingMarketDisruptionFallbackValue(v))
}

// GetUnderlyingMarketDisruptionFallbackType gets UnderlyingMarketDisruptionFallbackType, Tag 41867.
func (m NoUnderlyingMarketDisruptionFallbacks) GetUnderlyingMarketDisruptionFallbackType() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingMarketDisruptionFallbackTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingMarketDisruptionFallbackValue gets UnderlyingMarketDisruptionFallbackValue, Tag 41339.
func (m NoUnderlyingMarketDisruptionFallbacks) GetUnderlyingMarketDisruptionFallbackValue() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingMarketDisruptionFallbackValueField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingMarketDisruptionFallbackType returns true if UnderlyingMarketDisruptionFallbackType is present, Tag 41867.
func (m NoUnderlyingMarketDisruptionFallbacks) HasUnderlyingMarketDisruptionFallbackType() bool {
	return m.Has(tag.UnderlyingMarketDisruptionFallbackType)
}

// HasUnderlyingMarketDisruptionFallbackValue returns true if UnderlyingMarketDisruptionFallbackValue is present, Tag 41339.
func (m NoUnderlyingMarketDisruptionFallbacks) HasUnderlyingMarketDisruptionFallbackValue() bool {
	return m.Has(tag.UnderlyingMarketDisruptionFallbackValue)
}

// NoUnderlyingMarketDisruptionFallbacksRepeatingGroup is a repeating group, Tag 41866.
type NoUnderlyingMarketDisruptionFallbacksRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingMarketDisruptionFallbacksRepeatingGroup returns an initialized, NoUnderlyingMarketDisruptionFallbacksRepeatingGroup.
func NewNoUnderlyingMarketDisruptionFallbacksRepeatingGroup() NoUnderlyingMarketDisruptionFallbacksRepeatingGroup {
	return NoUnderlyingMarketDisruptionFallbacksRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingMarketDisruptionFallbacks,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingMarketDisruptionFallbackType),
				quickfix.GroupElement(tag.UnderlyingMarketDisruptionFallbackValue),
			},
		),
	}
}

// Add create and append a new NoUnderlyingMarketDisruptionFallbacks to this group.
func (m NoUnderlyingMarketDisruptionFallbacksRepeatingGroup) Add() NoUnderlyingMarketDisruptionFallbacks {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingMarketDisruptionFallbacks{g}
}

// Get returns the ith NoUnderlyingMarketDisruptionFallbacks in the NoUnderlyingMarketDisruptionFallbacksRepeatinGroup.
func (m NoUnderlyingMarketDisruptionFallbacksRepeatingGroup) Get(i int) NoUnderlyingMarketDisruptionFallbacks {
	return NoUnderlyingMarketDisruptionFallbacks{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingMarketDisruptionFallbackReferencePrices is a repeating group element, Tag 41868.
type NoUnderlyingMarketDisruptionFallbackReferencePrices struct {
	*quickfix.Group
}

// SetUnderlyingMarketDisruptionFallbackUnderlierType sets UnderlyingMarketDisruptionFallbackUnderlierType, Tag 41869.
func (m NoUnderlyingMarketDisruptionFallbackReferencePrices) SetUnderlyingMarketDisruptionFallbackUnderlierType(v int) {
	m.Set(field.NewUnderlyingMarketDisruptionFallbackUnderlierType(v))
}

// SetUnderlyingMarketDisruptionFallbackUnderlierSecurityID sets UnderlyingMarketDisruptionFallbackUnderlierSecurityID, Tag 41870.
func (m NoUnderlyingMarketDisruptionFallbackReferencePrices) SetUnderlyingMarketDisruptionFallbackUnderlierSecurityID(v string) {
	m.Set(field.NewUnderlyingMarketDisruptionFallbackUnderlierSecurityID(v))
}

// SetUnderlyingMarketDisruptionFallbackUnderlierSecurityIDSource sets UnderlyingMarketDisruptionFallbackUnderlierSecurityIDSource, Tag 41871.
func (m NoUnderlyingMarketDisruptionFallbackReferencePrices) SetUnderlyingMarketDisruptionFallbackUnderlierSecurityIDSource(v string) {
	m.Set(field.NewUnderlyingMarketDisruptionFallbackUnderlierSecurityIDSource(v))
}

// SetUnderlyingMarketDisruptionFallbackUnderlierSecurityDesc sets UnderlyingMarketDisruptionFallbackUnderlierSecurityDesc, Tag 41872.
func (m NoUnderlyingMarketDisruptionFallbackReferencePrices) SetUnderlyingMarketDisruptionFallbackUnderlierSecurityDesc(v string) {
	m.Set(field.NewUnderlyingMarketDisruptionFallbackUnderlierSecurityDesc(v))
}

// SetEncodedUnderlyingMarketDisruptionFallbackUnderlierSecurityDescLen sets EncodedUnderlyingMarketDisruptionFallbackUnderlierSecurityDescLen, Tag 41873.
func (m NoUnderlyingMarketDisruptionFallbackReferencePrices) SetEncodedUnderlyingMarketDisruptionFallbackUnderlierSecurityDescLen(v int) {
	m.Set(field.NewEncodedUnderlyingMarketDisruptionFallbackUnderlierSecurityDescLen(v))
}

// SetEncodedUnderlyingMarketDisruptionFallbackUnderlierSecurityDesc sets EncodedUnderlyingMarketDisruptionFallbackUnderlierSecurityDesc, Tag 41874.
func (m NoUnderlyingMarketDisruptionFallbackReferencePrices) SetEncodedUnderlyingMarketDisruptionFallbackUnderlierSecurityDesc(v string) {
	m.Set(field.NewEncodedUnderlyingMarketDisruptionFallbackUnderlierSecurityDesc(v))
}

// SetUnderlyingMarketDisruptionFallbackOpenUnits sets UnderlyingMarketDisruptionFallbackOpenUnits, Tag 41875.
func (m NoUnderlyingMarketDisruptionFallbackReferencePrices) SetUnderlyingMarketDisruptionFallbackOpenUnits(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingMarketDisruptionFallbackOpenUnits(value, scale))
}

// SetUnderlyingMarketDisruptionFallbackBasketCurrency sets UnderlyingMarketDisruptionFallbackBasketCurrency, Tag 41876.
func (m NoUnderlyingMarketDisruptionFallbackReferencePrices) SetUnderlyingMarketDisruptionFallbackBasketCurrency(v string) {
	m.Set(field.NewUnderlyingMarketDisruptionFallbackBasketCurrency(v))
}

// SetUnderlyingMarketDisruptionFallbackBasketDivisor sets UnderlyingMarketDisruptionFallbackBasketDivisor, Tag 41877.
func (m NoUnderlyingMarketDisruptionFallbackReferencePrices) SetUnderlyingMarketDisruptionFallbackBasketDivisor(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingMarketDisruptionFallbackBasketDivisor(value, scale))
}

// GetUnderlyingMarketDisruptionFallbackUnderlierType gets UnderlyingMarketDisruptionFallbackUnderlierType, Tag 41869.
func (m NoUnderlyingMarketDisruptionFallbackReferencePrices) GetUnderlyingMarketDisruptionFallbackUnderlierType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingMarketDisruptionFallbackUnderlierTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingMarketDisruptionFallbackUnderlierSecurityID gets UnderlyingMarketDisruptionFallbackUnderlierSecurityID, Tag 41870.
func (m NoUnderlyingMarketDisruptionFallbackReferencePrices) GetUnderlyingMarketDisruptionFallbackUnderlierSecurityID() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingMarketDisruptionFallbackUnderlierSecurityIDField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingMarketDisruptionFallbackUnderlierSecurityIDSource gets UnderlyingMarketDisruptionFallbackUnderlierSecurityIDSource, Tag 41871.
func (m NoUnderlyingMarketDisruptionFallbackReferencePrices) GetUnderlyingMarketDisruptionFallbackUnderlierSecurityIDSource() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingMarketDisruptionFallbackUnderlierSecurityIDSourceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingMarketDisruptionFallbackUnderlierSecurityDesc gets UnderlyingMarketDisruptionFallbackUnderlierSecurityDesc, Tag 41872.
func (m NoUnderlyingMarketDisruptionFallbackReferencePrices) GetUnderlyingMarketDisruptionFallbackUnderlierSecurityDesc() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingMarketDisruptionFallbackUnderlierSecurityDescField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetEncodedUnderlyingMarketDisruptionFallbackUnderlierSecurityDescLen gets EncodedUnderlyingMarketDisruptionFallbackUnderlierSecurityDescLen, Tag 41873.
func (m NoUnderlyingMarketDisruptionFallbackReferencePrices) GetEncodedUnderlyingMarketDisruptionFallbackUnderlierSecurityDescLen() (v int, err quickfix.MessageRejectError) {
	var f field.EncodedUnderlyingMarketDisruptionFallbackUnderlierSecurityDescLenField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetEncodedUnderlyingMarketDisruptionFallbackUnderlierSecurityDesc gets EncodedUnderlyingMarketDisruptionFallbackUnderlierSecurityDesc, Tag 41874.
func (m NoUnderlyingMarketDisruptionFallbackReferencePrices) GetEncodedUnderlyingMarketDisruptionFallbackUnderlierSecurityDesc() (v string, err quickfix.MessageRejectError) {
	var f field.EncodedUnderlyingMarketDisruptionFallbackUnderlierSecurityDescField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingMarketDisruptionFallbackOpenUnits gets UnderlyingMarketDisruptionFallbackOpenUnits, Tag 41875.
func (m NoUnderlyingMarketDisruptionFallbackReferencePrices) GetUnderlyingMarketDisruptionFallbackOpenUnits() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingMarketDisruptionFallbackOpenUnitsField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingMarketDisruptionFallbackBasketCurrency gets UnderlyingMarketDisruptionFallbackBasketCurrency, Tag 41876.
func (m NoUnderlyingMarketDisruptionFallbackReferencePrices) GetUnderlyingMarketDisruptionFallbackBasketCurrency() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingMarketDisruptionFallbackBasketCurrencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingMarketDisruptionFallbackBasketDivisor gets UnderlyingMarketDisruptionFallbackBasketDivisor, Tag 41877.
func (m NoUnderlyingMarketDisruptionFallbackReferencePrices) GetUnderlyingMarketDisruptionFallbackBasketDivisor() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingMarketDisruptionFallbackBasketDivisorField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingMarketDisruptionFallbackUnderlierType returns true if UnderlyingMarketDisruptionFallbackUnderlierType is present, Tag 41869.
func (m NoUnderlyingMarketDisruptionFallbackReferencePrices) HasUnderlyingMarketDisruptionFallbackUnderlierType() bool {
	return m.Has(tag.UnderlyingMarketDisruptionFallbackUnderlierType)
}

// HasUnderlyingMarketDisruptionFallbackUnderlierSecurityID returns true if UnderlyingMarketDisruptionFallbackUnderlierSecurityID is present, Tag 41870.
func (m NoUnderlyingMarketDisruptionFallbackReferencePrices) HasUnderlyingMarketDisruptionFallbackUnderlierSecurityID() bool {
	return m.Has(tag.UnderlyingMarketDisruptionFallbackUnderlierSecurityID)
}

// HasUnderlyingMarketDisruptionFallbackUnderlierSecurityIDSource returns true if UnderlyingMarketDisruptionFallbackUnderlierSecurityIDSource is present, Tag 41871.
func (m NoUnderlyingMarketDisruptionFallbackReferencePrices) HasUnderlyingMarketDisruptionFallbackUnderlierSecurityIDSource() bool {
	return m.Has(tag.UnderlyingMarketDisruptionFallbackUnderlierSecurityIDSource)
}

// HasUnderlyingMarketDisruptionFallbackUnderlierSecurityDesc returns true if UnderlyingMarketDisruptionFallbackUnderlierSecurityDesc is present, Tag 41872.
func (m NoUnderlyingMarketDisruptionFallbackReferencePrices) HasUnderlyingMarketDisruptionFallbackUnderlierSecurityDesc() bool {
	return m.Has(tag.UnderlyingMarketDisruptionFallbackUnderlierSecurityDesc)
}

// HasEncodedUnderlyingMarketDisruptionFallbackUnderlierSecurityDescLen returns true if EncodedUnderlyingMarketDisruptionFallbackUnderlierSecurityDescLen is present, Tag 41873.
func (m NoUnderlyingMarketDisruptionFallbackReferencePrices) HasEncodedUnderlyingMarketDisruptionFallbackUnderlierSecurityDescLen() bool {
	return m.Has(tag.EncodedUnderlyingMarketDisruptionFallbackUnderlierSecurityDescLen)
}

// HasEncodedUnderlyingMarketDisruptionFallbackUnderlierSecurityDesc returns true if EncodedUnderlyingMarketDisruptionFallbackUnderlierSecurityDesc is present, Tag 41874.
func (m NoUnderlyingMarketDisruptionFallbackReferencePrices) HasEncodedUnderlyingMarketDisruptionFallbackUnderlierSecurityDesc() bool {
	return m.Has(tag.EncodedUnderlyingMarketDisruptionFallbackUnderlierSecurityDesc)
}

// HasUnderlyingMarketDisruptionFallbackOpenUnits returns true if UnderlyingMarketDisruptionFallbackOpenUnits is present, Tag 41875.
func (m NoUnderlyingMarketDisruptionFallbackReferencePrices) HasUnderlyingMarketDisruptionFallbackOpenUnits() bool {
	return m.Has(tag.UnderlyingMarketDisruptionFallbackOpenUnits)
}

// HasUnderlyingMarketDisruptionFallbackBasketCurrency returns true if UnderlyingMarketDisruptionFallbackBasketCurrency is present, Tag 41876.
func (m NoUnderlyingMarketDisruptionFallbackReferencePrices) HasUnderlyingMarketDisruptionFallbackBasketCurrency() bool {
	return m.Has(tag.UnderlyingMarketDisruptionFallbackBasketCurrency)
}

// HasUnderlyingMarketDisruptionFallbackBasketDivisor returns true if UnderlyingMarketDisruptionFallbackBasketDivisor is present, Tag 41877.
func (m NoUnderlyingMarketDisruptionFallbackReferencePrices) HasUnderlyingMarketDisruptionFallbackBasketDivisor() bool {
	return m.Has(tag.UnderlyingMarketDisruptionFallbackBasketDivisor)
}

// NoUnderlyingMarketDisruptionFallbackReferencePricesRepeatingGroup is a repeating group, Tag 41868.
type NoUnderlyingMarketDisruptionFallbackReferencePricesRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingMarketDisruptionFallbackReferencePricesRepeatingGroup returns an initialized, NoUnderlyingMarketDisruptionFallbackReferencePricesRepeatingGroup.
func NewNoUnderlyingMarketDisruptionFallbackReferencePricesRepeatingGroup() NoUnderlyingMarketDisruptionFallbackReferencePricesRepeatingGroup {
	return NoUnderlyingMarketDisruptionFallbackReferencePricesRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingMarketDisruptionFallbackReferencePrices,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingMarketDisruptionFallbackUnderlierType),
				quickfix.GroupElement(tag.UnderlyingMarketDisruptionFallbackUnderlierSecurityID),
				quickfix.GroupElement(tag.UnderlyingMarketDisruptionFallbackUnderlierSecurityIDSource),
				quickfix.GroupElement(tag.UnderlyingMarketDisruptionFallbackUnderlierSecurityDesc),
				quickfix.GroupElement(tag.EncodedUnderlyingMarketDisruptionFallbackUnderlierSecurityDescLen),
				quickfix.GroupElement(tag.EncodedUnderlyingMarketDisruptionFallbackUnderlierSecurityDesc),
				quickfix.GroupElement(tag.UnderlyingMarketDisruptionFallbackOpenUnits),
				quickfix.GroupElement(tag.UnderlyingMarketDisruptionFallbackBasketCurrency),
				quickfix.GroupElement(tag.UnderlyingMarketDisruptionFallbackBasketDivisor),
			},
		),
	}
}

// Add create and append a new NoUnderlyingMarketDisruptionFallbackReferencePrices to this group.
func (m NoUnderlyingMarketDisruptionFallbackReferencePricesRepeatingGroup) Add() NoUnderlyingMarketDisruptionFallbackReferencePrices {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingMarketDisruptionFallbackReferencePrices{g}
}

// Get returns the ith NoUnderlyingMarketDisruptionFallbackReferencePrices in the NoUnderlyingMarketDisruptionFallbackReferencePricesRepeatinGroup.
func (m NoUnderlyingMarketDisruptionFallbackReferencePricesRepeatingGroup) Get(i int) NoUnderlyingMarketDisruptionFallbackReferencePrices {
	return NoUnderlyingMarketDisruptionFallbackReferencePrices{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingPricingDateBusinessCenters is a repeating group element, Tag 41947.
type NoUnderlyingPricingDateBusinessCenters struct {
	*quickfix.Group
}

// SetUnderlyingPricingDateBusinessCenter sets UnderlyingPricingDateBusinessCenter, Tag 41948.
func (m NoUnderlyingPricingDateBusinessCenters) SetUnderlyingPricingDateBusinessCenter(v string) {
	m.Set(field.NewUnderlyingPricingDateBusinessCenter(v))
}

// GetUnderlyingPricingDateBusinessCenter gets UnderlyingPricingDateBusinessCenter, Tag 41948.
func (m NoUnderlyingPricingDateBusinessCenters) GetUnderlyingPricingDateBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPricingDateBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingPricingDateBusinessCenter returns true if UnderlyingPricingDateBusinessCenter is present, Tag 41948.
func (m NoUnderlyingPricingDateBusinessCenters) HasUnderlyingPricingDateBusinessCenter() bool {
	return m.Has(tag.UnderlyingPricingDateBusinessCenter)
}

// NoUnderlyingPricingDateBusinessCentersRepeatingGroup is a repeating group, Tag 41947.
type NoUnderlyingPricingDateBusinessCentersRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingPricingDateBusinessCentersRepeatingGroup returns an initialized, NoUnderlyingPricingDateBusinessCentersRepeatingGroup.
func NewNoUnderlyingPricingDateBusinessCentersRepeatingGroup() NoUnderlyingPricingDateBusinessCentersRepeatingGroup {
	return NoUnderlyingPricingDateBusinessCentersRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingPricingDateBusinessCenters,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingPricingDateBusinessCenter),
			},
		),
	}
}

// Add create and append a new NoUnderlyingPricingDateBusinessCenters to this group.
func (m NoUnderlyingPricingDateBusinessCentersRepeatingGroup) Add() NoUnderlyingPricingDateBusinessCenters {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingPricingDateBusinessCenters{g}
}

// Get returns the ith NoUnderlyingPricingDateBusinessCenters in the NoUnderlyingPricingDateBusinessCentersRepeatinGroup.
func (m NoUnderlyingPricingDateBusinessCentersRepeatingGroup) Get(i int) NoUnderlyingPricingDateBusinessCenters {
	return NoUnderlyingPricingDateBusinessCenters{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingAdditionalTerms is a repeating group element, Tag 42036.
type NoUnderlyingAdditionalTerms struct {
	*quickfix.Group
}

// SetUnderlyingAdditionalTermConditionPrecedentBondIndicator sets UnderlyingAdditionalTermConditionPrecedentBondIndicator, Tag 42037.
func (m NoUnderlyingAdditionalTerms) SetUnderlyingAdditionalTermConditionPrecedentBondIndicator(v bool) {
	m.Set(field.NewUnderlyingAdditionalTermConditionPrecedentBondIndicator(v))
}

// SetUnderlyingAdditionalTermDiscrepancyClauseIndicator sets UnderlyingAdditionalTermDiscrepancyClauseIndicator, Tag 42038.
func (m NoUnderlyingAdditionalTerms) SetUnderlyingAdditionalTermDiscrepancyClauseIndicator(v bool) {
	m.Set(field.NewUnderlyingAdditionalTermDiscrepancyClauseIndicator(v))
}

// SetNoUnderlyingAdditionalTermBondRefs sets NoUnderlyingAdditionalTermBondRefs, Tag 41340.
func (m NoUnderlyingAdditionalTerms) SetNoUnderlyingAdditionalTermBondRefs(f NoUnderlyingAdditionalTermBondRefsRepeatingGroup) {
	m.SetGroup(f)
}

// GetUnderlyingAdditionalTermConditionPrecedentBondIndicator gets UnderlyingAdditionalTermConditionPrecedentBondIndicator, Tag 42037.
func (m NoUnderlyingAdditionalTerms) GetUnderlyingAdditionalTermConditionPrecedentBondIndicator() (v bool, err quickfix.MessageRejectError) {
	var f field.UnderlyingAdditionalTermConditionPrecedentBondIndicatorField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingAdditionalTermDiscrepancyClauseIndicator gets UnderlyingAdditionalTermDiscrepancyClauseIndicator, Tag 42038.
func (m NoUnderlyingAdditionalTerms) GetUnderlyingAdditionalTermDiscrepancyClauseIndicator() (v bool, err quickfix.MessageRejectError) {
	var f field.UnderlyingAdditionalTermDiscrepancyClauseIndicatorField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUnderlyingAdditionalTermBondRefs gets NoUnderlyingAdditionalTermBondRefs, Tag 41340.
func (m NoUnderlyingAdditionalTerms) GetNoUnderlyingAdditionalTermBondRefs() (NoUnderlyingAdditionalTermBondRefsRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingAdditionalTermBondRefsRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// HasUnderlyingAdditionalTermConditionPrecedentBondIndicator returns true if UnderlyingAdditionalTermConditionPrecedentBondIndicator is present, Tag 42037.
func (m NoUnderlyingAdditionalTerms) HasUnderlyingAdditionalTermConditionPrecedentBondIndicator() bool {
	return m.Has(tag.UnderlyingAdditionalTermConditionPrecedentBondIndicator)
}

// HasUnderlyingAdditionalTermDiscrepancyClauseIndicator returns true if UnderlyingAdditionalTermDiscrepancyClauseIndicator is present, Tag 42038.
func (m NoUnderlyingAdditionalTerms) HasUnderlyingAdditionalTermDiscrepancyClauseIndicator() bool {
	return m.Has(tag.UnderlyingAdditionalTermDiscrepancyClauseIndicator)
}

// HasNoUnderlyingAdditionalTermBondRefs returns true if NoUnderlyingAdditionalTermBondRefs is present, Tag 41340.
func (m NoUnderlyingAdditionalTerms) HasNoUnderlyingAdditionalTermBondRefs() bool {
	return m.Has(tag.NoUnderlyingAdditionalTermBondRefs)
}

// NoUnderlyingAdditionalTermBondRefs is a repeating group element, Tag 41340.
type NoUnderlyingAdditionalTermBondRefs struct {
	*quickfix.Group
}

// SetUnderlyingAdditionalTermBondSecurityID sets UnderlyingAdditionalTermBondSecurityID, Tag 41341.
func (m NoUnderlyingAdditionalTermBondRefs) SetUnderlyingAdditionalTermBondSecurityID(v string) {
	m.Set(field.NewUnderlyingAdditionalTermBondSecurityID(v))
}

// SetUnderlyingAdditionalTermBondSecurityIDSource sets UnderlyingAdditionalTermBondSecurityIDSource, Tag 41701.
func (m NoUnderlyingAdditionalTermBondRefs) SetUnderlyingAdditionalTermBondSecurityIDSource(v string) {
	m.Set(field.NewUnderlyingAdditionalTermBondSecurityIDSource(v))
}

// SetUnderlyingAdditionalTermBondDesc sets UnderlyingAdditionalTermBondDesc, Tag 41709.
func (m NoUnderlyingAdditionalTermBondRefs) SetUnderlyingAdditionalTermBondDesc(v string) {
	m.Set(field.NewUnderlyingAdditionalTermBondDesc(v))
}

// SetEncodedUnderlyingAdditionalTermBondDescLen sets EncodedUnderlyingAdditionalTermBondDescLen, Tag 41710.
func (m NoUnderlyingAdditionalTermBondRefs) SetEncodedUnderlyingAdditionalTermBondDescLen(v int) {
	m.Set(field.NewEncodedUnderlyingAdditionalTermBondDescLen(v))
}

// SetEncodedUnderlyingAdditionalTermBondDesc sets EncodedUnderlyingAdditionalTermBondDesc, Tag 41711.
func (m NoUnderlyingAdditionalTermBondRefs) SetEncodedUnderlyingAdditionalTermBondDesc(v string) {
	m.Set(field.NewEncodedUnderlyingAdditionalTermBondDesc(v))
}

// SetUnderlyingAdditionalTermBondCurrency sets UnderlyingAdditionalTermBondCurrency, Tag 41712.
func (m NoUnderlyingAdditionalTermBondRefs) SetUnderlyingAdditionalTermBondCurrency(v string) {
	m.Set(field.NewUnderlyingAdditionalTermBondCurrency(v))
}

// SetUnderlyingAdditionalTermBondIssuer sets UnderlyingAdditionalTermBondIssuer, Tag 42017.
func (m NoUnderlyingAdditionalTermBondRefs) SetUnderlyingAdditionalTermBondIssuer(v string) {
	m.Set(field.NewUnderlyingAdditionalTermBondIssuer(v))
}

// SetEncodedUnderlyingAdditionalTermBondIssuerLen sets EncodedUnderlyingAdditionalTermBondIssuerLen, Tag 42025.
func (m NoUnderlyingAdditionalTermBondRefs) SetEncodedUnderlyingAdditionalTermBondIssuerLen(v int) {
	m.Set(field.NewEncodedUnderlyingAdditionalTermBondIssuerLen(v))
}

// SetEncodedUnderlyingAdditionalTermBondIssuer sets EncodedUnderlyingAdditionalTermBondIssuer, Tag 42026.
func (m NoUnderlyingAdditionalTermBondRefs) SetEncodedUnderlyingAdditionalTermBondIssuer(v string) {
	m.Set(field.NewEncodedUnderlyingAdditionalTermBondIssuer(v))
}

// SetUnderlyingAdditionalTermBondSeniority sets UnderlyingAdditionalTermBondSeniority, Tag 42027.
func (m NoUnderlyingAdditionalTermBondRefs) SetUnderlyingAdditionalTermBondSeniority(v string) {
	m.Set(field.NewUnderlyingAdditionalTermBondSeniority(v))
}

// SetUnderlyingAdditionalTermBondCouponType sets UnderlyingAdditionalTermBondCouponType, Tag 42028.
func (m NoUnderlyingAdditionalTermBondRefs) SetUnderlyingAdditionalTermBondCouponType(v int) {
	m.Set(field.NewUnderlyingAdditionalTermBondCouponType(v))
}

// SetUnderlyingAdditionalTermBondCouponRate sets UnderlyingAdditionalTermBondCouponRate, Tag 42029.
func (m NoUnderlyingAdditionalTermBondRefs) SetUnderlyingAdditionalTermBondCouponRate(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingAdditionalTermBondCouponRate(value, scale))
}

// SetUnderlyingAdditionalTermBondMaturityDate sets UnderlyingAdditionalTermBondMaturityDate, Tag 42030.
func (m NoUnderlyingAdditionalTermBondRefs) SetUnderlyingAdditionalTermBondMaturityDate(v string) {
	m.Set(field.NewUnderlyingAdditionalTermBondMaturityDate(v))
}

// SetUnderlyingAdditionalTermBondParValue sets UnderlyingAdditionalTermBondParValue, Tag 42031.
func (m NoUnderlyingAdditionalTermBondRefs) SetUnderlyingAdditionalTermBondParValue(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingAdditionalTermBondParValue(value, scale))
}

// SetUnderlyingAdditionalTermBondCurrentTotalIssuedAmount sets UnderlyingAdditionalTermBondCurrentTotalIssuedAmount, Tag 42032.
func (m NoUnderlyingAdditionalTermBondRefs) SetUnderlyingAdditionalTermBondCurrentTotalIssuedAmount(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingAdditionalTermBondCurrentTotalIssuedAmount(value, scale))
}

// SetUnderlyingAdditionalTermBondCouponFrequencyPeriod sets UnderlyingAdditionalTermBondCouponFrequencyPeriod, Tag 42033.
func (m NoUnderlyingAdditionalTermBondRefs) SetUnderlyingAdditionalTermBondCouponFrequencyPeriod(v int) {
	m.Set(field.NewUnderlyingAdditionalTermBondCouponFrequencyPeriod(v))
}

// SetUnderlyingAdditionalTermBondCouponFrequencyUnit sets UnderlyingAdditionalTermBondCouponFrequencyUnit, Tag 42034.
func (m NoUnderlyingAdditionalTermBondRefs) SetUnderlyingAdditionalTermBondCouponFrequencyUnit(v string) {
	m.Set(field.NewUnderlyingAdditionalTermBondCouponFrequencyUnit(v))
}

// SetUnderlyingAdditionalTermBondDayCount sets UnderlyingAdditionalTermBondDayCount, Tag 42035.
func (m NoUnderlyingAdditionalTermBondRefs) SetUnderlyingAdditionalTermBondDayCount(v int) {
	m.Set(field.NewUnderlyingAdditionalTermBondDayCount(v))
}

// GetUnderlyingAdditionalTermBondSecurityID gets UnderlyingAdditionalTermBondSecurityID, Tag 41341.
func (m NoUnderlyingAdditionalTermBondRefs) GetUnderlyingAdditionalTermBondSecurityID() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingAdditionalTermBondSecurityIDField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingAdditionalTermBondSecurityIDSource gets UnderlyingAdditionalTermBondSecurityIDSource, Tag 41701.
func (m NoUnderlyingAdditionalTermBondRefs) GetUnderlyingAdditionalTermBondSecurityIDSource() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingAdditionalTermBondSecurityIDSourceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingAdditionalTermBondDesc gets UnderlyingAdditionalTermBondDesc, Tag 41709.
func (m NoUnderlyingAdditionalTermBondRefs) GetUnderlyingAdditionalTermBondDesc() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingAdditionalTermBondDescField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetEncodedUnderlyingAdditionalTermBondDescLen gets EncodedUnderlyingAdditionalTermBondDescLen, Tag 41710.
func (m NoUnderlyingAdditionalTermBondRefs) GetEncodedUnderlyingAdditionalTermBondDescLen() (v int, err quickfix.MessageRejectError) {
	var f field.EncodedUnderlyingAdditionalTermBondDescLenField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetEncodedUnderlyingAdditionalTermBondDesc gets EncodedUnderlyingAdditionalTermBondDesc, Tag 41711.
func (m NoUnderlyingAdditionalTermBondRefs) GetEncodedUnderlyingAdditionalTermBondDesc() (v string, err quickfix.MessageRejectError) {
	var f field.EncodedUnderlyingAdditionalTermBondDescField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingAdditionalTermBondCurrency gets UnderlyingAdditionalTermBondCurrency, Tag 41712.
func (m NoUnderlyingAdditionalTermBondRefs) GetUnderlyingAdditionalTermBondCurrency() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingAdditionalTermBondCurrencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingAdditionalTermBondIssuer gets UnderlyingAdditionalTermBondIssuer, Tag 42017.
func (m NoUnderlyingAdditionalTermBondRefs) GetUnderlyingAdditionalTermBondIssuer() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingAdditionalTermBondIssuerField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetEncodedUnderlyingAdditionalTermBondIssuerLen gets EncodedUnderlyingAdditionalTermBondIssuerLen, Tag 42025.
func (m NoUnderlyingAdditionalTermBondRefs) GetEncodedUnderlyingAdditionalTermBondIssuerLen() (v int, err quickfix.MessageRejectError) {
	var f field.EncodedUnderlyingAdditionalTermBondIssuerLenField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetEncodedUnderlyingAdditionalTermBondIssuer gets EncodedUnderlyingAdditionalTermBondIssuer, Tag 42026.
func (m NoUnderlyingAdditionalTermBondRefs) GetEncodedUnderlyingAdditionalTermBondIssuer() (v string, err quickfix.MessageRejectError) {
	var f field.EncodedUnderlyingAdditionalTermBondIssuerField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingAdditionalTermBondSeniority gets UnderlyingAdditionalTermBondSeniority, Tag 42027.
func (m NoUnderlyingAdditionalTermBondRefs) GetUnderlyingAdditionalTermBondSeniority() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingAdditionalTermBondSeniorityField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingAdditionalTermBondCouponType gets UnderlyingAdditionalTermBondCouponType, Tag 42028.
func (m NoUnderlyingAdditionalTermBondRefs) GetUnderlyingAdditionalTermBondCouponType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingAdditionalTermBondCouponTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingAdditionalTermBondCouponRate gets UnderlyingAdditionalTermBondCouponRate, Tag 42029.
func (m NoUnderlyingAdditionalTermBondRefs) GetUnderlyingAdditionalTermBondCouponRate() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingAdditionalTermBondCouponRateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingAdditionalTermBondMaturityDate gets UnderlyingAdditionalTermBondMaturityDate, Tag 42030.
func (m NoUnderlyingAdditionalTermBondRefs) GetUnderlyingAdditionalTermBondMaturityDate() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingAdditionalTermBondMaturityDateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingAdditionalTermBondParValue gets UnderlyingAdditionalTermBondParValue, Tag 42031.
func (m NoUnderlyingAdditionalTermBondRefs) GetUnderlyingAdditionalTermBondParValue() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingAdditionalTermBondParValueField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingAdditionalTermBondCurrentTotalIssuedAmount gets UnderlyingAdditionalTermBondCurrentTotalIssuedAmount, Tag 42032.
func (m NoUnderlyingAdditionalTermBondRefs) GetUnderlyingAdditionalTermBondCurrentTotalIssuedAmount() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingAdditionalTermBondCurrentTotalIssuedAmountField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingAdditionalTermBondCouponFrequencyPeriod gets UnderlyingAdditionalTermBondCouponFrequencyPeriod, Tag 42033.
func (m NoUnderlyingAdditionalTermBondRefs) GetUnderlyingAdditionalTermBondCouponFrequencyPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingAdditionalTermBondCouponFrequencyPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingAdditionalTermBondCouponFrequencyUnit gets UnderlyingAdditionalTermBondCouponFrequencyUnit, Tag 42034.
func (m NoUnderlyingAdditionalTermBondRefs) GetUnderlyingAdditionalTermBondCouponFrequencyUnit() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingAdditionalTermBondCouponFrequencyUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingAdditionalTermBondDayCount gets UnderlyingAdditionalTermBondDayCount, Tag 42035.
func (m NoUnderlyingAdditionalTermBondRefs) GetUnderlyingAdditionalTermBondDayCount() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingAdditionalTermBondDayCountField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingAdditionalTermBondSecurityID returns true if UnderlyingAdditionalTermBondSecurityID is present, Tag 41341.
func (m NoUnderlyingAdditionalTermBondRefs) HasUnderlyingAdditionalTermBondSecurityID() bool {
	return m.Has(tag.UnderlyingAdditionalTermBondSecurityID)
}

// HasUnderlyingAdditionalTermBondSecurityIDSource returns true if UnderlyingAdditionalTermBondSecurityIDSource is present, Tag 41701.
func (m NoUnderlyingAdditionalTermBondRefs) HasUnderlyingAdditionalTermBondSecurityIDSource() bool {
	return m.Has(tag.UnderlyingAdditionalTermBondSecurityIDSource)
}

// HasUnderlyingAdditionalTermBondDesc returns true if UnderlyingAdditionalTermBondDesc is present, Tag 41709.
func (m NoUnderlyingAdditionalTermBondRefs) HasUnderlyingAdditionalTermBondDesc() bool {
	return m.Has(tag.UnderlyingAdditionalTermBondDesc)
}

// HasEncodedUnderlyingAdditionalTermBondDescLen returns true if EncodedUnderlyingAdditionalTermBondDescLen is present, Tag 41710.
func (m NoUnderlyingAdditionalTermBondRefs) HasEncodedUnderlyingAdditionalTermBondDescLen() bool {
	return m.Has(tag.EncodedUnderlyingAdditionalTermBondDescLen)
}

// HasEncodedUnderlyingAdditionalTermBondDesc returns true if EncodedUnderlyingAdditionalTermBondDesc is present, Tag 41711.
func (m NoUnderlyingAdditionalTermBondRefs) HasEncodedUnderlyingAdditionalTermBondDesc() bool {
	return m.Has(tag.EncodedUnderlyingAdditionalTermBondDesc)
}

// HasUnderlyingAdditionalTermBondCurrency returns true if UnderlyingAdditionalTermBondCurrency is present, Tag 41712.
func (m NoUnderlyingAdditionalTermBondRefs) HasUnderlyingAdditionalTermBondCurrency() bool {
	return m.Has(tag.UnderlyingAdditionalTermBondCurrency)
}

// HasUnderlyingAdditionalTermBondIssuer returns true if UnderlyingAdditionalTermBondIssuer is present, Tag 42017.
func (m NoUnderlyingAdditionalTermBondRefs) HasUnderlyingAdditionalTermBondIssuer() bool {
	return m.Has(tag.UnderlyingAdditionalTermBondIssuer)
}

// HasEncodedUnderlyingAdditionalTermBondIssuerLen returns true if EncodedUnderlyingAdditionalTermBondIssuerLen is present, Tag 42025.
func (m NoUnderlyingAdditionalTermBondRefs) HasEncodedUnderlyingAdditionalTermBondIssuerLen() bool {
	return m.Has(tag.EncodedUnderlyingAdditionalTermBondIssuerLen)
}

// HasEncodedUnderlyingAdditionalTermBondIssuer returns true if EncodedUnderlyingAdditionalTermBondIssuer is present, Tag 42026.
func (m NoUnderlyingAdditionalTermBondRefs) HasEncodedUnderlyingAdditionalTermBondIssuer() bool {
	return m.Has(tag.EncodedUnderlyingAdditionalTermBondIssuer)
}

// HasUnderlyingAdditionalTermBondSeniority returns true if UnderlyingAdditionalTermBondSeniority is present, Tag 42027.
func (m NoUnderlyingAdditionalTermBondRefs) HasUnderlyingAdditionalTermBondSeniority() bool {
	return m.Has(tag.UnderlyingAdditionalTermBondSeniority)
}

// HasUnderlyingAdditionalTermBondCouponType returns true if UnderlyingAdditionalTermBondCouponType is present, Tag 42028.
func (m NoUnderlyingAdditionalTermBondRefs) HasUnderlyingAdditionalTermBondCouponType() bool {
	return m.Has(tag.UnderlyingAdditionalTermBondCouponType)
}

// HasUnderlyingAdditionalTermBondCouponRate returns true if UnderlyingAdditionalTermBondCouponRate is present, Tag 42029.
func (m NoUnderlyingAdditionalTermBondRefs) HasUnderlyingAdditionalTermBondCouponRate() bool {
	return m.Has(tag.UnderlyingAdditionalTermBondCouponRate)
}

// HasUnderlyingAdditionalTermBondMaturityDate returns true if UnderlyingAdditionalTermBondMaturityDate is present, Tag 42030.
func (m NoUnderlyingAdditionalTermBondRefs) HasUnderlyingAdditionalTermBondMaturityDate() bool {
	return m.Has(tag.UnderlyingAdditionalTermBondMaturityDate)
}

// HasUnderlyingAdditionalTermBondParValue returns true if UnderlyingAdditionalTermBondParValue is present, Tag 42031.
func (m NoUnderlyingAdditionalTermBondRefs) HasUnderlyingAdditionalTermBondParValue() bool {
	return m.Has(tag.UnderlyingAdditionalTermBondParValue)
}

// HasUnderlyingAdditionalTermBondCurrentTotalIssuedAmount returns true if UnderlyingAdditionalTermBondCurrentTotalIssuedAmount is present, Tag 42032.
func (m NoUnderlyingAdditionalTermBondRefs) HasUnderlyingAdditionalTermBondCurrentTotalIssuedAmount() bool {
	return m.Has(tag.UnderlyingAdditionalTermBondCurrentTotalIssuedAmount)
}

// HasUnderlyingAdditionalTermBondCouponFrequencyPeriod returns true if UnderlyingAdditionalTermBondCouponFrequencyPeriod is present, Tag 42033.
func (m NoUnderlyingAdditionalTermBondRefs) HasUnderlyingAdditionalTermBondCouponFrequencyPeriod() bool {
	return m.Has(tag.UnderlyingAdditionalTermBondCouponFrequencyPeriod)
}

// HasUnderlyingAdditionalTermBondCouponFrequencyUnit returns true if UnderlyingAdditionalTermBondCouponFrequencyUnit is present, Tag 42034.
func (m NoUnderlyingAdditionalTermBondRefs) HasUnderlyingAdditionalTermBondCouponFrequencyUnit() bool {
	return m.Has(tag.UnderlyingAdditionalTermBondCouponFrequencyUnit)
}

// HasUnderlyingAdditionalTermBondDayCount returns true if UnderlyingAdditionalTermBondDayCount is present, Tag 42035.
func (m NoUnderlyingAdditionalTermBondRefs) HasUnderlyingAdditionalTermBondDayCount() bool {
	return m.Has(tag.UnderlyingAdditionalTermBondDayCount)
}

// NoUnderlyingAdditionalTermBondRefsRepeatingGroup is a repeating group, Tag 41340.
type NoUnderlyingAdditionalTermBondRefsRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingAdditionalTermBondRefsRepeatingGroup returns an initialized, NoUnderlyingAdditionalTermBondRefsRepeatingGroup.
func NewNoUnderlyingAdditionalTermBondRefsRepeatingGroup() NoUnderlyingAdditionalTermBondRefsRepeatingGroup {
	return NoUnderlyingAdditionalTermBondRefsRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingAdditionalTermBondRefs,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingAdditionalTermBondSecurityID),
				quickfix.GroupElement(tag.UnderlyingAdditionalTermBondSecurityIDSource),
				quickfix.GroupElement(tag.UnderlyingAdditionalTermBondDesc),
				quickfix.GroupElement(tag.EncodedUnderlyingAdditionalTermBondDescLen),
				quickfix.GroupElement(tag.EncodedUnderlyingAdditionalTermBondDesc),
				quickfix.GroupElement(tag.UnderlyingAdditionalTermBondCurrency),
				quickfix.GroupElement(tag.UnderlyingAdditionalTermBondIssuer),
				quickfix.GroupElement(tag.EncodedUnderlyingAdditionalTermBondIssuerLen),
				quickfix.GroupElement(tag.EncodedUnderlyingAdditionalTermBondIssuer),
				quickfix.GroupElement(tag.UnderlyingAdditionalTermBondSeniority),
				quickfix.GroupElement(tag.UnderlyingAdditionalTermBondCouponType),
				quickfix.GroupElement(tag.UnderlyingAdditionalTermBondCouponRate),
				quickfix.GroupElement(tag.UnderlyingAdditionalTermBondMaturityDate),
				quickfix.GroupElement(tag.UnderlyingAdditionalTermBondParValue),
				quickfix.GroupElement(tag.UnderlyingAdditionalTermBondCurrentTotalIssuedAmount),
				quickfix.GroupElement(tag.UnderlyingAdditionalTermBondCouponFrequencyPeriod),
				quickfix.GroupElement(tag.UnderlyingAdditionalTermBondCouponFrequencyUnit),
				quickfix.GroupElement(tag.UnderlyingAdditionalTermBondDayCount),
			},
		),
	}
}

// Add create and append a new NoUnderlyingAdditionalTermBondRefs to this group.
func (m NoUnderlyingAdditionalTermBondRefsRepeatingGroup) Add() NoUnderlyingAdditionalTermBondRefs {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingAdditionalTermBondRefs{g}
}

// Get returns the ith NoUnderlyingAdditionalTermBondRefs in the NoUnderlyingAdditionalTermBondRefsRepeatinGroup.
func (m NoUnderlyingAdditionalTermBondRefsRepeatingGroup) Get(i int) NoUnderlyingAdditionalTermBondRefs {
	return NoUnderlyingAdditionalTermBondRefs{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingAdditionalTermsRepeatingGroup is a repeating group, Tag 42036.
type NoUnderlyingAdditionalTermsRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingAdditionalTermsRepeatingGroup returns an initialized, NoUnderlyingAdditionalTermsRepeatingGroup.
func NewNoUnderlyingAdditionalTermsRepeatingGroup() NoUnderlyingAdditionalTermsRepeatingGroup {
	return NoUnderlyingAdditionalTermsRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingAdditionalTerms,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingAdditionalTermConditionPrecedentBondIndicator),
				quickfix.GroupElement(tag.UnderlyingAdditionalTermDiscrepancyClauseIndicator),
				NewNoUnderlyingAdditionalTermBondRefsRepeatingGroup(),
			},
		),
	}
}

// Add create and append a new NoUnderlyingAdditionalTerms to this group.
func (m NoUnderlyingAdditionalTermsRepeatingGroup) Add() NoUnderlyingAdditionalTerms {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingAdditionalTerms{g}
}

// Get returns the ith NoUnderlyingAdditionalTerms in the NoUnderlyingAdditionalTermsRepeatinGroup.
func (m NoUnderlyingAdditionalTermsRepeatingGroup) Get(i int) NoUnderlyingAdditionalTerms {
	return NoUnderlyingAdditionalTerms{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingCashSettlTerms is a repeating group element, Tag 42041.
type NoUnderlyingCashSettlTerms struct {
	*quickfix.Group
}

// SetUnderlyingCashSettlCurrency sets UnderlyingCashSettlCurrency, Tag 42042.
func (m NoUnderlyingCashSettlTerms) SetUnderlyingCashSettlCurrency(v string) {
	m.Set(field.NewUnderlyingCashSettlCurrency(v))
}

// SetUnderlyingCashSettlValuationFirstBusinessDayOffset sets UnderlyingCashSettlValuationFirstBusinessDayOffset, Tag 42043.
func (m NoUnderlyingCashSettlTerms) SetUnderlyingCashSettlValuationFirstBusinessDayOffset(v int) {
	m.Set(field.NewUnderlyingCashSettlValuationFirstBusinessDayOffset(v))
}

// SetUnderlyingCashSettlValuationSubsequentBusinessDaysOffset sets UnderlyingCashSettlValuationSubsequentBusinessDaysOffset, Tag 42044.
func (m NoUnderlyingCashSettlTerms) SetUnderlyingCashSettlValuationSubsequentBusinessDaysOffset(v int) {
	m.Set(field.NewUnderlyingCashSettlValuationSubsequentBusinessDaysOffset(v))
}

// SetUnderlyingCashSettlNumOfValuationDates sets UnderlyingCashSettlNumOfValuationDates, Tag 42045.
func (m NoUnderlyingCashSettlTerms) SetUnderlyingCashSettlNumOfValuationDates(v int) {
	m.Set(field.NewUnderlyingCashSettlNumOfValuationDates(v))
}

// SetUnderlyingCashSettlValuationTime sets UnderlyingCashSettlValuationTime, Tag 42046.
func (m NoUnderlyingCashSettlTerms) SetUnderlyingCashSettlValuationTime(v string) {
	m.Set(field.NewUnderlyingCashSettlValuationTime(v))
}

// SetUnderlyingCashSettlBusinessCenter sets UnderlyingCashSettlBusinessCenter, Tag 42047.
func (m NoUnderlyingCashSettlTerms) SetUnderlyingCashSettlBusinessCenter(v string) {
	m.Set(field.NewUnderlyingCashSettlBusinessCenter(v))
}

// SetUnderlyingCashSettlQuoteMethod sets UnderlyingCashSettlQuoteMethod, Tag 42048.
func (m NoUnderlyingCashSettlTerms) SetUnderlyingCashSettlQuoteMethod(v int) {
	m.Set(field.NewUnderlyingCashSettlQuoteMethod(v))
}

// SetUnderlyingCashSettlQuoteAmount sets UnderlyingCashSettlQuoteAmount, Tag 42049.
func (m NoUnderlyingCashSettlTerms) SetUnderlyingCashSettlQuoteAmount(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingCashSettlQuoteAmount(value, scale))
}

// SetUnderlyingCashSettlQuoteCurrency sets UnderlyingCashSettlQuoteCurrency, Tag 42050.
func (m NoUnderlyingCashSettlTerms) SetUnderlyingCashSettlQuoteCurrency(v string) {
	m.Set(field.NewUnderlyingCashSettlQuoteCurrency(v))
}

// SetUnderlyingCashSettlMinimumQuoteAmount sets UnderlyingCashSettlMinimumQuoteAmount, Tag 42051.
func (m NoUnderlyingCashSettlTerms) SetUnderlyingCashSettlMinimumQuoteAmount(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingCashSettlMinimumQuoteAmount(value, scale))
}

// SetUnderlyingCashSettlMinimumQuoteCurrency sets UnderlyingCashSettlMinimumQuoteCurrency, Tag 42052.
func (m NoUnderlyingCashSettlTerms) SetUnderlyingCashSettlMinimumQuoteCurrency(v string) {
	m.Set(field.NewUnderlyingCashSettlMinimumQuoteCurrency(v))
}

// SetNoUnderlyingCashSettlDealers sets NoUnderlyingCashSettlDealers, Tag 42039.
func (m NoUnderlyingCashSettlTerms) SetNoUnderlyingCashSettlDealers(f NoUnderlyingCashSettlDealersRepeatingGroup) {
	m.SetGroup(f)
}

// SetUnderlyingCashSettlBusinessDays sets UnderlyingCashSettlBusinessDays, Tag 42053.
func (m NoUnderlyingCashSettlTerms) SetUnderlyingCashSettlBusinessDays(v int) {
	m.Set(field.NewUnderlyingCashSettlBusinessDays(v))
}

// SetUnderlyingCashSettlAmount sets UnderlyingCashSettlAmount, Tag 42054.
func (m NoUnderlyingCashSettlTerms) SetUnderlyingCashSettlAmount(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingCashSettlAmount(value, scale))
}

// SetUnderlyingCashSettlRecoveryFactor sets UnderlyingCashSettlRecoveryFactor, Tag 42055.
func (m NoUnderlyingCashSettlTerms) SetUnderlyingCashSettlRecoveryFactor(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingCashSettlRecoveryFactor(value, scale))
}

// SetUnderlyingCashSettlFixedTermIndicator sets UnderlyingCashSettlFixedTermIndicator, Tag 42056.
func (m NoUnderlyingCashSettlTerms) SetUnderlyingCashSettlFixedTermIndicator(v bool) {
	m.Set(field.NewUnderlyingCashSettlFixedTermIndicator(v))
}

// SetUnderlyingCashSettlAccruedInterestIndicator sets UnderlyingCashSettlAccruedInterestIndicator, Tag 42057.
func (m NoUnderlyingCashSettlTerms) SetUnderlyingCashSettlAccruedInterestIndicator(v bool) {
	m.Set(field.NewUnderlyingCashSettlAccruedInterestIndicator(v))
}

// SetUnderlyingCashSettlValuationMethod sets UnderlyingCashSettlValuationMethod, Tag 42058.
func (m NoUnderlyingCashSettlTerms) SetUnderlyingCashSettlValuationMethod(v int) {
	m.Set(field.NewUnderlyingCashSettlValuationMethod(v))
}

// SetUnderlyingCashSettlTermXID sets UnderlyingCashSettlTermXID, Tag 42059.
func (m NoUnderlyingCashSettlTerms) SetUnderlyingCashSettlTermXID(v string) {
	m.Set(field.NewUnderlyingCashSettlTermXID(v))
}

// SetUnderlyingCashSettlPriceSource sets UnderlyingCashSettlPriceSource, Tag 42797.
func (m NoUnderlyingCashSettlTerms) SetUnderlyingCashSettlPriceSource(v string) {
	m.Set(field.NewUnderlyingCashSettlPriceSource(v))
}

// SetUnderlyingCashSettlPriceDefault sets UnderlyingCashSettlPriceDefault, Tag 42798.
func (m NoUnderlyingCashSettlTerms) SetUnderlyingCashSettlPriceDefault(v int) {
	m.Set(field.NewUnderlyingCashSettlPriceDefault(v))
}

// SetUnderlyingCashSettlDateUnadjusted sets UnderlyingCashSettlDateUnadjusted, Tag 42790.
func (m NoUnderlyingCashSettlTerms) SetUnderlyingCashSettlDateUnadjusted(v string) {
	m.Set(field.NewUnderlyingCashSettlDateUnadjusted(v))
}

// SetUnderlyingCashSettlDateBusinessDayConvention sets UnderlyingCashSettlDateBusinessDayConvention, Tag 42791.
func (m NoUnderlyingCashSettlTerms) SetUnderlyingCashSettlDateBusinessDayConvention(v int) {
	m.Set(field.NewUnderlyingCashSettlDateBusinessDayConvention(v))
}

// SetNoUnderlyingCashSettlDateBusinessCenters sets NoUnderlyingCashSettlDateBusinessCenters, Tag 42788.
func (m NoUnderlyingCashSettlTerms) SetNoUnderlyingCashSettlDateBusinessCenters(f NoUnderlyingCashSettlDateBusinessCentersRepeatingGroup) {
	m.SetGroup(f)
}

// SetUnderlyingCashSettlDateRelativeTo sets UnderlyingCashSettlDateRelativeTo, Tag 42792.
func (m NoUnderlyingCashSettlTerms) SetUnderlyingCashSettlDateRelativeTo(v int) {
	m.Set(field.NewUnderlyingCashSettlDateRelativeTo(v))
}

// SetUnderlyingCashSettlDateOffsetPeriod sets UnderlyingCashSettlDateOffsetPeriod, Tag 42793.
func (m NoUnderlyingCashSettlTerms) SetUnderlyingCashSettlDateOffsetPeriod(v int) {
	m.Set(field.NewUnderlyingCashSettlDateOffsetPeriod(v))
}

// SetUnderlyingCashSettlDateOffsetUnit sets UnderlyingCashSettlDateOffsetUnit, Tag 42794.
func (m NoUnderlyingCashSettlTerms) SetUnderlyingCashSettlDateOffsetUnit(v string) {
	m.Set(field.NewUnderlyingCashSettlDateOffsetUnit(v))
}

// SetUnderlyingCashSettlDateOffsetDayType sets UnderlyingCashSettlDateOffsetDayType, Tag 42795.
func (m NoUnderlyingCashSettlTerms) SetUnderlyingCashSettlDateOffsetDayType(v int) {
	m.Set(field.NewUnderlyingCashSettlDateOffsetDayType(v))
}

// SetUnderlyingCashSettlDateAdjusted sets UnderlyingCashSettlDateAdjusted, Tag 42796.
func (m NoUnderlyingCashSettlTerms) SetUnderlyingCashSettlDateAdjusted(v string) {
	m.Set(field.NewUnderlyingCashSettlDateAdjusted(v))
}

// GetUnderlyingCashSettlCurrency gets UnderlyingCashSettlCurrency, Tag 42042.
func (m NoUnderlyingCashSettlTerms) GetUnderlyingCashSettlCurrency() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingCashSettlCurrencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingCashSettlValuationFirstBusinessDayOffset gets UnderlyingCashSettlValuationFirstBusinessDayOffset, Tag 42043.
func (m NoUnderlyingCashSettlTerms) GetUnderlyingCashSettlValuationFirstBusinessDayOffset() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingCashSettlValuationFirstBusinessDayOffsetField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingCashSettlValuationSubsequentBusinessDaysOffset gets UnderlyingCashSettlValuationSubsequentBusinessDaysOffset, Tag 42044.
func (m NoUnderlyingCashSettlTerms) GetUnderlyingCashSettlValuationSubsequentBusinessDaysOffset() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingCashSettlValuationSubsequentBusinessDaysOffsetField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingCashSettlNumOfValuationDates gets UnderlyingCashSettlNumOfValuationDates, Tag 42045.
func (m NoUnderlyingCashSettlTerms) GetUnderlyingCashSettlNumOfValuationDates() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingCashSettlNumOfValuationDatesField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingCashSettlValuationTime gets UnderlyingCashSettlValuationTime, Tag 42046.
func (m NoUnderlyingCashSettlTerms) GetUnderlyingCashSettlValuationTime() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingCashSettlValuationTimeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingCashSettlBusinessCenter gets UnderlyingCashSettlBusinessCenter, Tag 42047.
func (m NoUnderlyingCashSettlTerms) GetUnderlyingCashSettlBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingCashSettlBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingCashSettlQuoteMethod gets UnderlyingCashSettlQuoteMethod, Tag 42048.
func (m NoUnderlyingCashSettlTerms) GetUnderlyingCashSettlQuoteMethod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingCashSettlQuoteMethodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingCashSettlQuoteAmount gets UnderlyingCashSettlQuoteAmount, Tag 42049.
func (m NoUnderlyingCashSettlTerms) GetUnderlyingCashSettlQuoteAmount() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingCashSettlQuoteAmountField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingCashSettlQuoteCurrency gets UnderlyingCashSettlQuoteCurrency, Tag 42050.
func (m NoUnderlyingCashSettlTerms) GetUnderlyingCashSettlQuoteCurrency() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingCashSettlQuoteCurrencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingCashSettlMinimumQuoteAmount gets UnderlyingCashSettlMinimumQuoteAmount, Tag 42051.
func (m NoUnderlyingCashSettlTerms) GetUnderlyingCashSettlMinimumQuoteAmount() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingCashSettlMinimumQuoteAmountField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingCashSettlMinimumQuoteCurrency gets UnderlyingCashSettlMinimumQuoteCurrency, Tag 42052.
func (m NoUnderlyingCashSettlTerms) GetUnderlyingCashSettlMinimumQuoteCurrency() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingCashSettlMinimumQuoteCurrencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUnderlyingCashSettlDealers gets NoUnderlyingCashSettlDealers, Tag 42039.
func (m NoUnderlyingCashSettlTerms) GetNoUnderlyingCashSettlDealers() (NoUnderlyingCashSettlDealersRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingCashSettlDealersRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetUnderlyingCashSettlBusinessDays gets UnderlyingCashSettlBusinessDays, Tag 42053.
func (m NoUnderlyingCashSettlTerms) GetUnderlyingCashSettlBusinessDays() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingCashSettlBusinessDaysField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingCashSettlAmount gets UnderlyingCashSettlAmount, Tag 42054.
func (m NoUnderlyingCashSettlTerms) GetUnderlyingCashSettlAmount() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingCashSettlAmountField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingCashSettlRecoveryFactor gets UnderlyingCashSettlRecoveryFactor, Tag 42055.
func (m NoUnderlyingCashSettlTerms) GetUnderlyingCashSettlRecoveryFactor() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingCashSettlRecoveryFactorField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingCashSettlFixedTermIndicator gets UnderlyingCashSettlFixedTermIndicator, Tag 42056.
func (m NoUnderlyingCashSettlTerms) GetUnderlyingCashSettlFixedTermIndicator() (v bool, err quickfix.MessageRejectError) {
	var f field.UnderlyingCashSettlFixedTermIndicatorField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingCashSettlAccruedInterestIndicator gets UnderlyingCashSettlAccruedInterestIndicator, Tag 42057.
func (m NoUnderlyingCashSettlTerms) GetUnderlyingCashSettlAccruedInterestIndicator() (v bool, err quickfix.MessageRejectError) {
	var f field.UnderlyingCashSettlAccruedInterestIndicatorField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingCashSettlValuationMethod gets UnderlyingCashSettlValuationMethod, Tag 42058.
func (m NoUnderlyingCashSettlTerms) GetUnderlyingCashSettlValuationMethod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingCashSettlValuationMethodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingCashSettlTermXID gets UnderlyingCashSettlTermXID, Tag 42059.
func (m NoUnderlyingCashSettlTerms) GetUnderlyingCashSettlTermXID() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingCashSettlTermXIDField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingCashSettlPriceSource gets UnderlyingCashSettlPriceSource, Tag 42797.
func (m NoUnderlyingCashSettlTerms) GetUnderlyingCashSettlPriceSource() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingCashSettlPriceSourceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingCashSettlPriceDefault gets UnderlyingCashSettlPriceDefault, Tag 42798.
func (m NoUnderlyingCashSettlTerms) GetUnderlyingCashSettlPriceDefault() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingCashSettlPriceDefaultField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingCashSettlDateUnadjusted gets UnderlyingCashSettlDateUnadjusted, Tag 42790.
func (m NoUnderlyingCashSettlTerms) GetUnderlyingCashSettlDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingCashSettlDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingCashSettlDateBusinessDayConvention gets UnderlyingCashSettlDateBusinessDayConvention, Tag 42791.
func (m NoUnderlyingCashSettlTerms) GetUnderlyingCashSettlDateBusinessDayConvention() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingCashSettlDateBusinessDayConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUnderlyingCashSettlDateBusinessCenters gets NoUnderlyingCashSettlDateBusinessCenters, Tag 42788.
func (m NoUnderlyingCashSettlTerms) GetNoUnderlyingCashSettlDateBusinessCenters() (NoUnderlyingCashSettlDateBusinessCentersRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingCashSettlDateBusinessCentersRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetUnderlyingCashSettlDateRelativeTo gets UnderlyingCashSettlDateRelativeTo, Tag 42792.
func (m NoUnderlyingCashSettlTerms) GetUnderlyingCashSettlDateRelativeTo() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingCashSettlDateRelativeToField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingCashSettlDateOffsetPeriod gets UnderlyingCashSettlDateOffsetPeriod, Tag 42793.
func (m NoUnderlyingCashSettlTerms) GetUnderlyingCashSettlDateOffsetPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingCashSettlDateOffsetPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingCashSettlDateOffsetUnit gets UnderlyingCashSettlDateOffsetUnit, Tag 42794.
func (m NoUnderlyingCashSettlTerms) GetUnderlyingCashSettlDateOffsetUnit() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingCashSettlDateOffsetUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingCashSettlDateOffsetDayType gets UnderlyingCashSettlDateOffsetDayType, Tag 42795.
func (m NoUnderlyingCashSettlTerms) GetUnderlyingCashSettlDateOffsetDayType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingCashSettlDateOffsetDayTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingCashSettlDateAdjusted gets UnderlyingCashSettlDateAdjusted, Tag 42796.
func (m NoUnderlyingCashSettlTerms) GetUnderlyingCashSettlDateAdjusted() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingCashSettlDateAdjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingCashSettlCurrency returns true if UnderlyingCashSettlCurrency is present, Tag 42042.
func (m NoUnderlyingCashSettlTerms) HasUnderlyingCashSettlCurrency() bool {
	return m.Has(tag.UnderlyingCashSettlCurrency)
}

// HasUnderlyingCashSettlValuationFirstBusinessDayOffset returns true if UnderlyingCashSettlValuationFirstBusinessDayOffset is present, Tag 42043.
func (m NoUnderlyingCashSettlTerms) HasUnderlyingCashSettlValuationFirstBusinessDayOffset() bool {
	return m.Has(tag.UnderlyingCashSettlValuationFirstBusinessDayOffset)
}

// HasUnderlyingCashSettlValuationSubsequentBusinessDaysOffset returns true if UnderlyingCashSettlValuationSubsequentBusinessDaysOffset is present, Tag 42044.
func (m NoUnderlyingCashSettlTerms) HasUnderlyingCashSettlValuationSubsequentBusinessDaysOffset() bool {
	return m.Has(tag.UnderlyingCashSettlValuationSubsequentBusinessDaysOffset)
}

// HasUnderlyingCashSettlNumOfValuationDates returns true if UnderlyingCashSettlNumOfValuationDates is present, Tag 42045.
func (m NoUnderlyingCashSettlTerms) HasUnderlyingCashSettlNumOfValuationDates() bool {
	return m.Has(tag.UnderlyingCashSettlNumOfValuationDates)
}

// HasUnderlyingCashSettlValuationTime returns true if UnderlyingCashSettlValuationTime is present, Tag 42046.
func (m NoUnderlyingCashSettlTerms) HasUnderlyingCashSettlValuationTime() bool {
	return m.Has(tag.UnderlyingCashSettlValuationTime)
}

// HasUnderlyingCashSettlBusinessCenter returns true if UnderlyingCashSettlBusinessCenter is present, Tag 42047.
func (m NoUnderlyingCashSettlTerms) HasUnderlyingCashSettlBusinessCenter() bool {
	return m.Has(tag.UnderlyingCashSettlBusinessCenter)
}

// HasUnderlyingCashSettlQuoteMethod returns true if UnderlyingCashSettlQuoteMethod is present, Tag 42048.
func (m NoUnderlyingCashSettlTerms) HasUnderlyingCashSettlQuoteMethod() bool {
	return m.Has(tag.UnderlyingCashSettlQuoteMethod)
}

// HasUnderlyingCashSettlQuoteAmount returns true if UnderlyingCashSettlQuoteAmount is present, Tag 42049.
func (m NoUnderlyingCashSettlTerms) HasUnderlyingCashSettlQuoteAmount() bool {
	return m.Has(tag.UnderlyingCashSettlQuoteAmount)
}

// HasUnderlyingCashSettlQuoteCurrency returns true if UnderlyingCashSettlQuoteCurrency is present, Tag 42050.
func (m NoUnderlyingCashSettlTerms) HasUnderlyingCashSettlQuoteCurrency() bool {
	return m.Has(tag.UnderlyingCashSettlQuoteCurrency)
}

// HasUnderlyingCashSettlMinimumQuoteAmount returns true if UnderlyingCashSettlMinimumQuoteAmount is present, Tag 42051.
func (m NoUnderlyingCashSettlTerms) HasUnderlyingCashSettlMinimumQuoteAmount() bool {
	return m.Has(tag.UnderlyingCashSettlMinimumQuoteAmount)
}

// HasUnderlyingCashSettlMinimumQuoteCurrency returns true if UnderlyingCashSettlMinimumQuoteCurrency is present, Tag 42052.
func (m NoUnderlyingCashSettlTerms) HasUnderlyingCashSettlMinimumQuoteCurrency() bool {
	return m.Has(tag.UnderlyingCashSettlMinimumQuoteCurrency)
}

// HasNoUnderlyingCashSettlDealers returns true if NoUnderlyingCashSettlDealers is present, Tag 42039.
func (m NoUnderlyingCashSettlTerms) HasNoUnderlyingCashSettlDealers() bool {
	return m.Has(tag.NoUnderlyingCashSettlDealers)
}

// HasUnderlyingCashSettlBusinessDays returns true if UnderlyingCashSettlBusinessDays is present, Tag 42053.
func (m NoUnderlyingCashSettlTerms) HasUnderlyingCashSettlBusinessDays() bool {
	return m.Has(tag.UnderlyingCashSettlBusinessDays)
}

// HasUnderlyingCashSettlAmount returns true if UnderlyingCashSettlAmount is present, Tag 42054.
func (m NoUnderlyingCashSettlTerms) HasUnderlyingCashSettlAmount() bool {
	return m.Has(tag.UnderlyingCashSettlAmount)
}

// HasUnderlyingCashSettlRecoveryFactor returns true if UnderlyingCashSettlRecoveryFactor is present, Tag 42055.
func (m NoUnderlyingCashSettlTerms) HasUnderlyingCashSettlRecoveryFactor() bool {
	return m.Has(tag.UnderlyingCashSettlRecoveryFactor)
}

// HasUnderlyingCashSettlFixedTermIndicator returns true if UnderlyingCashSettlFixedTermIndicator is present, Tag 42056.
func (m NoUnderlyingCashSettlTerms) HasUnderlyingCashSettlFixedTermIndicator() bool {
	return m.Has(tag.UnderlyingCashSettlFixedTermIndicator)
}

// HasUnderlyingCashSettlAccruedInterestIndicator returns true if UnderlyingCashSettlAccruedInterestIndicator is present, Tag 42057.
func (m NoUnderlyingCashSettlTerms) HasUnderlyingCashSettlAccruedInterestIndicator() bool {
	return m.Has(tag.UnderlyingCashSettlAccruedInterestIndicator)
}

// HasUnderlyingCashSettlValuationMethod returns true if UnderlyingCashSettlValuationMethod is present, Tag 42058.
func (m NoUnderlyingCashSettlTerms) HasUnderlyingCashSettlValuationMethod() bool {
	return m.Has(tag.UnderlyingCashSettlValuationMethod)
}

// HasUnderlyingCashSettlTermXID returns true if UnderlyingCashSettlTermXID is present, Tag 42059.
func (m NoUnderlyingCashSettlTerms) HasUnderlyingCashSettlTermXID() bool {
	return m.Has(tag.UnderlyingCashSettlTermXID)
}

// HasUnderlyingCashSettlPriceSource returns true if UnderlyingCashSettlPriceSource is present, Tag 42797.
func (m NoUnderlyingCashSettlTerms) HasUnderlyingCashSettlPriceSource() bool {
	return m.Has(tag.UnderlyingCashSettlPriceSource)
}

// HasUnderlyingCashSettlPriceDefault returns true if UnderlyingCashSettlPriceDefault is present, Tag 42798.
func (m NoUnderlyingCashSettlTerms) HasUnderlyingCashSettlPriceDefault() bool {
	return m.Has(tag.UnderlyingCashSettlPriceDefault)
}

// HasUnderlyingCashSettlDateUnadjusted returns true if UnderlyingCashSettlDateUnadjusted is present, Tag 42790.
func (m NoUnderlyingCashSettlTerms) HasUnderlyingCashSettlDateUnadjusted() bool {
	return m.Has(tag.UnderlyingCashSettlDateUnadjusted)
}

// HasUnderlyingCashSettlDateBusinessDayConvention returns true if UnderlyingCashSettlDateBusinessDayConvention is present, Tag 42791.
func (m NoUnderlyingCashSettlTerms) HasUnderlyingCashSettlDateBusinessDayConvention() bool {
	return m.Has(tag.UnderlyingCashSettlDateBusinessDayConvention)
}

// HasNoUnderlyingCashSettlDateBusinessCenters returns true if NoUnderlyingCashSettlDateBusinessCenters is present, Tag 42788.
func (m NoUnderlyingCashSettlTerms) HasNoUnderlyingCashSettlDateBusinessCenters() bool {
	return m.Has(tag.NoUnderlyingCashSettlDateBusinessCenters)
}

// HasUnderlyingCashSettlDateRelativeTo returns true if UnderlyingCashSettlDateRelativeTo is present, Tag 42792.
func (m NoUnderlyingCashSettlTerms) HasUnderlyingCashSettlDateRelativeTo() bool {
	return m.Has(tag.UnderlyingCashSettlDateRelativeTo)
}

// HasUnderlyingCashSettlDateOffsetPeriod returns true if UnderlyingCashSettlDateOffsetPeriod is present, Tag 42793.
func (m NoUnderlyingCashSettlTerms) HasUnderlyingCashSettlDateOffsetPeriod() bool {
	return m.Has(tag.UnderlyingCashSettlDateOffsetPeriod)
}

// HasUnderlyingCashSettlDateOffsetUnit returns true if UnderlyingCashSettlDateOffsetUnit is present, Tag 42794.
func (m NoUnderlyingCashSettlTerms) HasUnderlyingCashSettlDateOffsetUnit() bool {
	return m.Has(tag.UnderlyingCashSettlDateOffsetUnit)
}

// HasUnderlyingCashSettlDateOffsetDayType returns true if UnderlyingCashSettlDateOffsetDayType is present, Tag 42795.
func (m NoUnderlyingCashSettlTerms) HasUnderlyingCashSettlDateOffsetDayType() bool {
	return m.Has(tag.UnderlyingCashSettlDateOffsetDayType)
}

// HasUnderlyingCashSettlDateAdjusted returns true if UnderlyingCashSettlDateAdjusted is present, Tag 42796.
func (m NoUnderlyingCashSettlTerms) HasUnderlyingCashSettlDateAdjusted() bool {
	return m.Has(tag.UnderlyingCashSettlDateAdjusted)
}

// NoUnderlyingCashSettlDealers is a repeating group element, Tag 42039.
type NoUnderlyingCashSettlDealers struct {
	*quickfix.Group
}

// SetUnderlyingCashSettlDealer sets UnderlyingCashSettlDealer, Tag 42040.
func (m NoUnderlyingCashSettlDealers) SetUnderlyingCashSettlDealer(v string) {
	m.Set(field.NewUnderlyingCashSettlDealer(v))
}

// GetUnderlyingCashSettlDealer gets UnderlyingCashSettlDealer, Tag 42040.
func (m NoUnderlyingCashSettlDealers) GetUnderlyingCashSettlDealer() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingCashSettlDealerField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingCashSettlDealer returns true if UnderlyingCashSettlDealer is present, Tag 42040.
func (m NoUnderlyingCashSettlDealers) HasUnderlyingCashSettlDealer() bool {
	return m.Has(tag.UnderlyingCashSettlDealer)
}

// NoUnderlyingCashSettlDealersRepeatingGroup is a repeating group, Tag 42039.
type NoUnderlyingCashSettlDealersRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingCashSettlDealersRepeatingGroup returns an initialized, NoUnderlyingCashSettlDealersRepeatingGroup.
func NewNoUnderlyingCashSettlDealersRepeatingGroup() NoUnderlyingCashSettlDealersRepeatingGroup {
	return NoUnderlyingCashSettlDealersRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingCashSettlDealers,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingCashSettlDealer),
			},
		),
	}
}

// Add create and append a new NoUnderlyingCashSettlDealers to this group.
func (m NoUnderlyingCashSettlDealersRepeatingGroup) Add() NoUnderlyingCashSettlDealers {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingCashSettlDealers{g}
}

// Get returns the ith NoUnderlyingCashSettlDealers in the NoUnderlyingCashSettlDealersRepeatinGroup.
func (m NoUnderlyingCashSettlDealersRepeatingGroup) Get(i int) NoUnderlyingCashSettlDealers {
	return NoUnderlyingCashSettlDealers{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingCashSettlDateBusinessCenters is a repeating group element, Tag 42788.
type NoUnderlyingCashSettlDateBusinessCenters struct {
	*quickfix.Group
}

// SetUnderlyingCashSettlDateBusinessCenter sets UnderlyingCashSettlDateBusinessCenter, Tag 42789.
func (m NoUnderlyingCashSettlDateBusinessCenters) SetUnderlyingCashSettlDateBusinessCenter(v string) {
	m.Set(field.NewUnderlyingCashSettlDateBusinessCenter(v))
}

// GetUnderlyingCashSettlDateBusinessCenter gets UnderlyingCashSettlDateBusinessCenter, Tag 42789.
func (m NoUnderlyingCashSettlDateBusinessCenters) GetUnderlyingCashSettlDateBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingCashSettlDateBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingCashSettlDateBusinessCenter returns true if UnderlyingCashSettlDateBusinessCenter is present, Tag 42789.
func (m NoUnderlyingCashSettlDateBusinessCenters) HasUnderlyingCashSettlDateBusinessCenter() bool {
	return m.Has(tag.UnderlyingCashSettlDateBusinessCenter)
}

// NoUnderlyingCashSettlDateBusinessCentersRepeatingGroup is a repeating group, Tag 42788.
type NoUnderlyingCashSettlDateBusinessCentersRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingCashSettlDateBusinessCentersRepeatingGroup returns an initialized, NoUnderlyingCashSettlDateBusinessCentersRepeatingGroup.
func NewNoUnderlyingCashSettlDateBusinessCentersRepeatingGroup() NoUnderlyingCashSettlDateBusinessCentersRepeatingGroup {
	return NoUnderlyingCashSettlDateBusinessCentersRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingCashSettlDateBusinessCenters,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingCashSettlDateBusinessCenter),
			},
		),
	}
}

// Add create and append a new NoUnderlyingCashSettlDateBusinessCenters to this group.
func (m NoUnderlyingCashSettlDateBusinessCentersRepeatingGroup) Add() NoUnderlyingCashSettlDateBusinessCenters {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingCashSettlDateBusinessCenters{g}
}

// Get returns the ith NoUnderlyingCashSettlDateBusinessCenters in the NoUnderlyingCashSettlDateBusinessCentersRepeatinGroup.
func (m NoUnderlyingCashSettlDateBusinessCentersRepeatingGroup) Get(i int) NoUnderlyingCashSettlDateBusinessCenters {
	return NoUnderlyingCashSettlDateBusinessCenters{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingCashSettlTermsRepeatingGroup is a repeating group, Tag 42041.
type NoUnderlyingCashSettlTermsRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingCashSettlTermsRepeatingGroup returns an initialized, NoUnderlyingCashSettlTermsRepeatingGroup.
func NewNoUnderlyingCashSettlTermsRepeatingGroup() NoUnderlyingCashSettlTermsRepeatingGroup {
	return NoUnderlyingCashSettlTermsRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingCashSettlTerms,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingCashSettlCurrency),
				quickfix.GroupElement(tag.UnderlyingCashSettlValuationFirstBusinessDayOffset),
				quickfix.GroupElement(tag.UnderlyingCashSettlValuationSubsequentBusinessDaysOffset),
				quickfix.GroupElement(tag.UnderlyingCashSettlNumOfValuationDates),
				quickfix.GroupElement(tag.UnderlyingCashSettlValuationTime),
				quickfix.GroupElement(tag.UnderlyingCashSettlBusinessCenter),
				quickfix.GroupElement(tag.UnderlyingCashSettlQuoteMethod),
				quickfix.GroupElement(tag.UnderlyingCashSettlQuoteAmount),
				quickfix.GroupElement(tag.UnderlyingCashSettlQuoteCurrency),
				quickfix.GroupElement(tag.UnderlyingCashSettlMinimumQuoteAmount),
				quickfix.GroupElement(tag.UnderlyingCashSettlMinimumQuoteCurrency),
				NewNoUnderlyingCashSettlDealersRepeatingGroup(),
				quickfix.GroupElement(tag.UnderlyingCashSettlBusinessDays),
				quickfix.GroupElement(tag.UnderlyingCashSettlAmount),
				quickfix.GroupElement(tag.UnderlyingCashSettlRecoveryFactor),
				quickfix.GroupElement(tag.UnderlyingCashSettlFixedTermIndicator),
				quickfix.GroupElement(tag.UnderlyingCashSettlAccruedInterestIndicator),
				quickfix.GroupElement(tag.UnderlyingCashSettlValuationMethod),
				quickfix.GroupElement(tag.UnderlyingCashSettlTermXID),
				quickfix.GroupElement(tag.UnderlyingCashSettlPriceSource),
				quickfix.GroupElement(tag.UnderlyingCashSettlPriceDefault),
				quickfix.GroupElement(tag.UnderlyingCashSettlDateUnadjusted),
				quickfix.GroupElement(tag.UnderlyingCashSettlDateBusinessDayConvention),
				NewNoUnderlyingCashSettlDateBusinessCentersRepeatingGroup(),
				quickfix.GroupElement(tag.UnderlyingCashSettlDateRelativeTo),
				quickfix.GroupElement(tag.UnderlyingCashSettlDateOffsetPeriod),
				quickfix.GroupElement(tag.UnderlyingCashSettlDateOffsetUnit),
				quickfix.GroupElement(tag.UnderlyingCashSettlDateOffsetDayType),
				quickfix.GroupElement(tag.UnderlyingCashSettlDateAdjusted),
			},
		),
	}
}

// Add create and append a new NoUnderlyingCashSettlTerms to this group.
func (m NoUnderlyingCashSettlTermsRepeatingGroup) Add() NoUnderlyingCashSettlTerms {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingCashSettlTerms{g}
}

// Get returns the ith NoUnderlyingCashSettlTerms in the NoUnderlyingCashSettlTermsRepeatinGroup.
func (m NoUnderlyingCashSettlTermsRepeatingGroup) Get(i int) NoUnderlyingCashSettlTerms {
	return NoUnderlyingCashSettlTerms{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingPhysicalSettlTerms is a repeating group element, Tag 42060.
type NoUnderlyingPhysicalSettlTerms struct {
	*quickfix.Group
}

// SetNoUnderlyingPhysicalSettlDeliverableObligations sets NoUnderlyingPhysicalSettlDeliverableObligations, Tag 42065.
func (m NoUnderlyingPhysicalSettlTerms) SetNoUnderlyingPhysicalSettlDeliverableObligations(f NoUnderlyingPhysicalSettlDeliverableObligationsRepeatingGroup) {
	m.SetGroup(f)
}

// SetUnderlyingPhysicalSettlCurrency sets UnderlyingPhysicalSettlCurrency, Tag 42061.
func (m NoUnderlyingPhysicalSettlTerms) SetUnderlyingPhysicalSettlCurrency(v string) {
	m.Set(field.NewUnderlyingPhysicalSettlCurrency(v))
}

// SetUnderlyingPhysicalSettlBusinessDays sets UnderlyingPhysicalSettlBusinessDays, Tag 42062.
func (m NoUnderlyingPhysicalSettlTerms) SetUnderlyingPhysicalSettlBusinessDays(v int) {
	m.Set(field.NewUnderlyingPhysicalSettlBusinessDays(v))
}

// SetUnderlyingPhysicalSettlMaximumBusinessDays sets UnderlyingPhysicalSettlMaximumBusinessDays, Tag 42063.
func (m NoUnderlyingPhysicalSettlTerms) SetUnderlyingPhysicalSettlMaximumBusinessDays(v int) {
	m.Set(field.NewUnderlyingPhysicalSettlMaximumBusinessDays(v))
}

// SetUnderlyingPhysicalSettlTermXID sets UnderlyingPhysicalSettlTermXID, Tag 42064.
func (m NoUnderlyingPhysicalSettlTerms) SetUnderlyingPhysicalSettlTermXID(v string) {
	m.Set(field.NewUnderlyingPhysicalSettlTermXID(v))
}

// GetNoUnderlyingPhysicalSettlDeliverableObligations gets NoUnderlyingPhysicalSettlDeliverableObligations, Tag 42065.
func (m NoUnderlyingPhysicalSettlTerms) GetNoUnderlyingPhysicalSettlDeliverableObligations() (NoUnderlyingPhysicalSettlDeliverableObligationsRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingPhysicalSettlDeliverableObligationsRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetUnderlyingPhysicalSettlCurrency gets UnderlyingPhysicalSettlCurrency, Tag 42061.
func (m NoUnderlyingPhysicalSettlTerms) GetUnderlyingPhysicalSettlCurrency() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPhysicalSettlCurrencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPhysicalSettlBusinessDays gets UnderlyingPhysicalSettlBusinessDays, Tag 42062.
func (m NoUnderlyingPhysicalSettlTerms) GetUnderlyingPhysicalSettlBusinessDays() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPhysicalSettlBusinessDaysField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPhysicalSettlMaximumBusinessDays gets UnderlyingPhysicalSettlMaximumBusinessDays, Tag 42063.
func (m NoUnderlyingPhysicalSettlTerms) GetUnderlyingPhysicalSettlMaximumBusinessDays() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPhysicalSettlMaximumBusinessDaysField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPhysicalSettlTermXID gets UnderlyingPhysicalSettlTermXID, Tag 42064.
func (m NoUnderlyingPhysicalSettlTerms) GetUnderlyingPhysicalSettlTermXID() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPhysicalSettlTermXIDField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasNoUnderlyingPhysicalSettlDeliverableObligations returns true if NoUnderlyingPhysicalSettlDeliverableObligations is present, Tag 42065.
func (m NoUnderlyingPhysicalSettlTerms) HasNoUnderlyingPhysicalSettlDeliverableObligations() bool {
	return m.Has(tag.NoUnderlyingPhysicalSettlDeliverableObligations)
}

// HasUnderlyingPhysicalSettlCurrency returns true if UnderlyingPhysicalSettlCurrency is present, Tag 42061.
func (m NoUnderlyingPhysicalSettlTerms) HasUnderlyingPhysicalSettlCurrency() bool {
	return m.Has(tag.UnderlyingPhysicalSettlCurrency)
}

// HasUnderlyingPhysicalSettlBusinessDays returns true if UnderlyingPhysicalSettlBusinessDays is present, Tag 42062.
func (m NoUnderlyingPhysicalSettlTerms) HasUnderlyingPhysicalSettlBusinessDays() bool {
	return m.Has(tag.UnderlyingPhysicalSettlBusinessDays)
}

// HasUnderlyingPhysicalSettlMaximumBusinessDays returns true if UnderlyingPhysicalSettlMaximumBusinessDays is present, Tag 42063.
func (m NoUnderlyingPhysicalSettlTerms) HasUnderlyingPhysicalSettlMaximumBusinessDays() bool {
	return m.Has(tag.UnderlyingPhysicalSettlMaximumBusinessDays)
}

// HasUnderlyingPhysicalSettlTermXID returns true if UnderlyingPhysicalSettlTermXID is present, Tag 42064.
func (m NoUnderlyingPhysicalSettlTerms) HasUnderlyingPhysicalSettlTermXID() bool {
	return m.Has(tag.UnderlyingPhysicalSettlTermXID)
}

// NoUnderlyingPhysicalSettlDeliverableObligations is a repeating group element, Tag 42065.
type NoUnderlyingPhysicalSettlDeliverableObligations struct {
	*quickfix.Group
}

// SetUnderlyingPhysicalSettlDeliverableObligationType sets UnderlyingPhysicalSettlDeliverableObligationType, Tag 42066.
func (m NoUnderlyingPhysicalSettlDeliverableObligations) SetUnderlyingPhysicalSettlDeliverableObligationType(v string) {
	m.Set(field.NewUnderlyingPhysicalSettlDeliverableObligationType(v))
}

// SetUnderlyingPhysicalSettlDeliverableObligationValue sets UnderlyingPhysicalSettlDeliverableObligationValue, Tag 42067.
func (m NoUnderlyingPhysicalSettlDeliverableObligations) SetUnderlyingPhysicalSettlDeliverableObligationValue(v string) {
	m.Set(field.NewUnderlyingPhysicalSettlDeliverableObligationValue(v))
}

// GetUnderlyingPhysicalSettlDeliverableObligationType gets UnderlyingPhysicalSettlDeliverableObligationType, Tag 42066.
func (m NoUnderlyingPhysicalSettlDeliverableObligations) GetUnderlyingPhysicalSettlDeliverableObligationType() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPhysicalSettlDeliverableObligationTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPhysicalSettlDeliverableObligationValue gets UnderlyingPhysicalSettlDeliverableObligationValue, Tag 42067.
func (m NoUnderlyingPhysicalSettlDeliverableObligations) GetUnderlyingPhysicalSettlDeliverableObligationValue() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPhysicalSettlDeliverableObligationValueField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingPhysicalSettlDeliverableObligationType returns true if UnderlyingPhysicalSettlDeliverableObligationType is present, Tag 42066.
func (m NoUnderlyingPhysicalSettlDeliverableObligations) HasUnderlyingPhysicalSettlDeliverableObligationType() bool {
	return m.Has(tag.UnderlyingPhysicalSettlDeliverableObligationType)
}

// HasUnderlyingPhysicalSettlDeliverableObligationValue returns true if UnderlyingPhysicalSettlDeliverableObligationValue is present, Tag 42067.
func (m NoUnderlyingPhysicalSettlDeliverableObligations) HasUnderlyingPhysicalSettlDeliverableObligationValue() bool {
	return m.Has(tag.UnderlyingPhysicalSettlDeliverableObligationValue)
}

// NoUnderlyingPhysicalSettlDeliverableObligationsRepeatingGroup is a repeating group, Tag 42065.
type NoUnderlyingPhysicalSettlDeliverableObligationsRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingPhysicalSettlDeliverableObligationsRepeatingGroup returns an initialized, NoUnderlyingPhysicalSettlDeliverableObligationsRepeatingGroup.
func NewNoUnderlyingPhysicalSettlDeliverableObligationsRepeatingGroup() NoUnderlyingPhysicalSettlDeliverableObligationsRepeatingGroup {
	return NoUnderlyingPhysicalSettlDeliverableObligationsRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingPhysicalSettlDeliverableObligations,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingPhysicalSettlDeliverableObligationType),
				quickfix.GroupElement(tag.UnderlyingPhysicalSettlDeliverableObligationValue),
			},
		),
	}
}

// Add create and append a new NoUnderlyingPhysicalSettlDeliverableObligations to this group.
func (m NoUnderlyingPhysicalSettlDeliverableObligationsRepeatingGroup) Add() NoUnderlyingPhysicalSettlDeliverableObligations {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingPhysicalSettlDeliverableObligations{g}
}

// Get returns the ith NoUnderlyingPhysicalSettlDeliverableObligations in the NoUnderlyingPhysicalSettlDeliverableObligationsRepeatinGroup.
func (m NoUnderlyingPhysicalSettlDeliverableObligationsRepeatingGroup) Get(i int) NoUnderlyingPhysicalSettlDeliverableObligations {
	return NoUnderlyingPhysicalSettlDeliverableObligations{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingPhysicalSettlTermsRepeatingGroup is a repeating group, Tag 42060.
type NoUnderlyingPhysicalSettlTermsRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingPhysicalSettlTermsRepeatingGroup returns an initialized, NoUnderlyingPhysicalSettlTermsRepeatingGroup.
func NewNoUnderlyingPhysicalSettlTermsRepeatingGroup() NoUnderlyingPhysicalSettlTermsRepeatingGroup {
	return NoUnderlyingPhysicalSettlTermsRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingPhysicalSettlTerms,
			quickfix.GroupTemplate{
				NewNoUnderlyingPhysicalSettlDeliverableObligationsRepeatingGroup(),
				quickfix.GroupElement(tag.UnderlyingPhysicalSettlCurrency),
				quickfix.GroupElement(tag.UnderlyingPhysicalSettlBusinessDays),
				quickfix.GroupElement(tag.UnderlyingPhysicalSettlMaximumBusinessDays),
				quickfix.GroupElement(tag.UnderlyingPhysicalSettlTermXID),
			},
		),
	}
}

// Add create and append a new NoUnderlyingPhysicalSettlTerms to this group.
func (m NoUnderlyingPhysicalSettlTermsRepeatingGroup) Add() NoUnderlyingPhysicalSettlTerms {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingPhysicalSettlTerms{g}
}

// Get returns the ith NoUnderlyingPhysicalSettlTerms in the NoUnderlyingPhysicalSettlTermsRepeatinGroup.
func (m NoUnderlyingPhysicalSettlTermsRepeatingGroup) Get(i int) NoUnderlyingPhysicalSettlTerms {
	return NoUnderlyingPhysicalSettlTerms{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingProtectionTerms is a repeating group element, Tag 42068.
type NoUnderlyingProtectionTerms struct {
	*quickfix.Group
}

// SetUnderlyingProtectionTermNotional sets UnderlyingProtectionTermNotional, Tag 42069.
func (m NoUnderlyingProtectionTerms) SetUnderlyingProtectionTermNotional(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingProtectionTermNotional(value, scale))
}

// SetUnderlyingProtectionTermCurrency sets UnderlyingProtectionTermCurrency, Tag 42070.
func (m NoUnderlyingProtectionTerms) SetUnderlyingProtectionTermCurrency(v string) {
	m.Set(field.NewUnderlyingProtectionTermCurrency(v))
}

// SetUnderlyingProtectionTermSellerNotifies sets UnderlyingProtectionTermSellerNotifies, Tag 42071.
func (m NoUnderlyingProtectionTerms) SetUnderlyingProtectionTermSellerNotifies(v bool) {
	m.Set(field.NewUnderlyingProtectionTermSellerNotifies(v))
}

// SetUnderlyingProtectionTermBuyerNotifies sets UnderlyingProtectionTermBuyerNotifies, Tag 42072.
func (m NoUnderlyingProtectionTerms) SetUnderlyingProtectionTermBuyerNotifies(v bool) {
	m.Set(field.NewUnderlyingProtectionTermBuyerNotifies(v))
}

// SetUnderlyingProtectionTermEventBusinessCenter sets UnderlyingProtectionTermEventBusinessCenter, Tag 42073.
func (m NoUnderlyingProtectionTerms) SetUnderlyingProtectionTermEventBusinessCenter(v string) {
	m.Set(field.NewUnderlyingProtectionTermEventBusinessCenter(v))
}

// SetUnderlyingProtectionTermStandardSources sets UnderlyingProtectionTermStandardSources, Tag 42074.
func (m NoUnderlyingProtectionTerms) SetUnderlyingProtectionTermStandardSources(v bool) {
	m.Set(field.NewUnderlyingProtectionTermStandardSources(v))
}

// SetUnderlyingProtectionTermEventMinimumSources sets UnderlyingProtectionTermEventMinimumSources, Tag 42075.
func (m NoUnderlyingProtectionTerms) SetUnderlyingProtectionTermEventMinimumSources(v int) {
	m.Set(field.NewUnderlyingProtectionTermEventMinimumSources(v))
}

// SetNoUnderlyingProtectionTermEventNewsSources sets NoUnderlyingProtectionTermEventNewsSources, Tag 42090.
func (m NoUnderlyingProtectionTerms) SetNoUnderlyingProtectionTermEventNewsSources(f NoUnderlyingProtectionTermEventNewsSourcesRepeatingGroup) {
	m.SetGroup(f)
}

// SetNoUnderlyingProtectionTermEvents sets NoUnderlyingProtectionTermEvents, Tag 42077.
func (m NoUnderlyingProtectionTerms) SetNoUnderlyingProtectionTermEvents(f NoUnderlyingProtectionTermEventsRepeatingGroup) {
	m.SetGroup(f)
}

// SetNoUnderlyingProtectionTermObligations sets NoUnderlyingProtectionTermObligations, Tag 42087.
func (m NoUnderlyingProtectionTerms) SetNoUnderlyingProtectionTermObligations(f NoUnderlyingProtectionTermObligationsRepeatingGroup) {
	m.SetGroup(f)
}

// SetUnderlyingProtectionTermXID sets UnderlyingProtectionTermXID, Tag 42076.
func (m NoUnderlyingProtectionTerms) SetUnderlyingProtectionTermXID(v string) {
	m.Set(field.NewUnderlyingProtectionTermXID(v))
}

// GetUnderlyingProtectionTermNotional gets UnderlyingProtectionTermNotional, Tag 42069.
func (m NoUnderlyingProtectionTerms) GetUnderlyingProtectionTermNotional() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingProtectionTermNotionalField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProtectionTermCurrency gets UnderlyingProtectionTermCurrency, Tag 42070.
func (m NoUnderlyingProtectionTerms) GetUnderlyingProtectionTermCurrency() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingProtectionTermCurrencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProtectionTermSellerNotifies gets UnderlyingProtectionTermSellerNotifies, Tag 42071.
func (m NoUnderlyingProtectionTerms) GetUnderlyingProtectionTermSellerNotifies() (v bool, err quickfix.MessageRejectError) {
	var f field.UnderlyingProtectionTermSellerNotifiesField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProtectionTermBuyerNotifies gets UnderlyingProtectionTermBuyerNotifies, Tag 42072.
func (m NoUnderlyingProtectionTerms) GetUnderlyingProtectionTermBuyerNotifies() (v bool, err quickfix.MessageRejectError) {
	var f field.UnderlyingProtectionTermBuyerNotifiesField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProtectionTermEventBusinessCenter gets UnderlyingProtectionTermEventBusinessCenter, Tag 42073.
func (m NoUnderlyingProtectionTerms) GetUnderlyingProtectionTermEventBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingProtectionTermEventBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProtectionTermStandardSources gets UnderlyingProtectionTermStandardSources, Tag 42074.
func (m NoUnderlyingProtectionTerms) GetUnderlyingProtectionTermStandardSources() (v bool, err quickfix.MessageRejectError) {
	var f field.UnderlyingProtectionTermStandardSourcesField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProtectionTermEventMinimumSources gets UnderlyingProtectionTermEventMinimumSources, Tag 42075.
func (m NoUnderlyingProtectionTerms) GetUnderlyingProtectionTermEventMinimumSources() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingProtectionTermEventMinimumSourcesField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUnderlyingProtectionTermEventNewsSources gets NoUnderlyingProtectionTermEventNewsSources, Tag 42090.
func (m NoUnderlyingProtectionTerms) GetNoUnderlyingProtectionTermEventNewsSources() (NoUnderlyingProtectionTermEventNewsSourcesRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingProtectionTermEventNewsSourcesRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetNoUnderlyingProtectionTermEvents gets NoUnderlyingProtectionTermEvents, Tag 42077.
func (m NoUnderlyingProtectionTerms) GetNoUnderlyingProtectionTermEvents() (NoUnderlyingProtectionTermEventsRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingProtectionTermEventsRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetNoUnderlyingProtectionTermObligations gets NoUnderlyingProtectionTermObligations, Tag 42087.
func (m NoUnderlyingProtectionTerms) GetNoUnderlyingProtectionTermObligations() (NoUnderlyingProtectionTermObligationsRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingProtectionTermObligationsRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetUnderlyingProtectionTermXID gets UnderlyingProtectionTermXID, Tag 42076.
func (m NoUnderlyingProtectionTerms) GetUnderlyingProtectionTermXID() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingProtectionTermXIDField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingProtectionTermNotional returns true if UnderlyingProtectionTermNotional is present, Tag 42069.
func (m NoUnderlyingProtectionTerms) HasUnderlyingProtectionTermNotional() bool {
	return m.Has(tag.UnderlyingProtectionTermNotional)
}

// HasUnderlyingProtectionTermCurrency returns true if UnderlyingProtectionTermCurrency is present, Tag 42070.
func (m NoUnderlyingProtectionTerms) HasUnderlyingProtectionTermCurrency() bool {
	return m.Has(tag.UnderlyingProtectionTermCurrency)
}

// HasUnderlyingProtectionTermSellerNotifies returns true if UnderlyingProtectionTermSellerNotifies is present, Tag 42071.
func (m NoUnderlyingProtectionTerms) HasUnderlyingProtectionTermSellerNotifies() bool {
	return m.Has(tag.UnderlyingProtectionTermSellerNotifies)
}

// HasUnderlyingProtectionTermBuyerNotifies returns true if UnderlyingProtectionTermBuyerNotifies is present, Tag 42072.
func (m NoUnderlyingProtectionTerms) HasUnderlyingProtectionTermBuyerNotifies() bool {
	return m.Has(tag.UnderlyingProtectionTermBuyerNotifies)
}

// HasUnderlyingProtectionTermEventBusinessCenter returns true if UnderlyingProtectionTermEventBusinessCenter is present, Tag 42073.
func (m NoUnderlyingProtectionTerms) HasUnderlyingProtectionTermEventBusinessCenter() bool {
	return m.Has(tag.UnderlyingProtectionTermEventBusinessCenter)
}

// HasUnderlyingProtectionTermStandardSources returns true if UnderlyingProtectionTermStandardSources is present, Tag 42074.
func (m NoUnderlyingProtectionTerms) HasUnderlyingProtectionTermStandardSources() bool {
	return m.Has(tag.UnderlyingProtectionTermStandardSources)
}

// HasUnderlyingProtectionTermEventMinimumSources returns true if UnderlyingProtectionTermEventMinimumSources is present, Tag 42075.
func (m NoUnderlyingProtectionTerms) HasUnderlyingProtectionTermEventMinimumSources() bool {
	return m.Has(tag.UnderlyingProtectionTermEventMinimumSources)
}

// HasNoUnderlyingProtectionTermEventNewsSources returns true if NoUnderlyingProtectionTermEventNewsSources is present, Tag 42090.
func (m NoUnderlyingProtectionTerms) HasNoUnderlyingProtectionTermEventNewsSources() bool {
	return m.Has(tag.NoUnderlyingProtectionTermEventNewsSources)
}

// HasNoUnderlyingProtectionTermEvents returns true if NoUnderlyingProtectionTermEvents is present, Tag 42077.
func (m NoUnderlyingProtectionTerms) HasNoUnderlyingProtectionTermEvents() bool {
	return m.Has(tag.NoUnderlyingProtectionTermEvents)
}

// HasNoUnderlyingProtectionTermObligations returns true if NoUnderlyingProtectionTermObligations is present, Tag 42087.
func (m NoUnderlyingProtectionTerms) HasNoUnderlyingProtectionTermObligations() bool {
	return m.Has(tag.NoUnderlyingProtectionTermObligations)
}

// HasUnderlyingProtectionTermXID returns true if UnderlyingProtectionTermXID is present, Tag 42076.
func (m NoUnderlyingProtectionTerms) HasUnderlyingProtectionTermXID() bool {
	return m.Has(tag.UnderlyingProtectionTermXID)
}

// NoUnderlyingProtectionTermEventNewsSources is a repeating group element, Tag 42090.
type NoUnderlyingProtectionTermEventNewsSources struct {
	*quickfix.Group
}

// SetUnderlyingProtectionTermEventNewsSource sets UnderlyingProtectionTermEventNewsSource, Tag 42091.
func (m NoUnderlyingProtectionTermEventNewsSources) SetUnderlyingProtectionTermEventNewsSource(v string) {
	m.Set(field.NewUnderlyingProtectionTermEventNewsSource(v))
}

// GetUnderlyingProtectionTermEventNewsSource gets UnderlyingProtectionTermEventNewsSource, Tag 42091.
func (m NoUnderlyingProtectionTermEventNewsSources) GetUnderlyingProtectionTermEventNewsSource() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingProtectionTermEventNewsSourceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingProtectionTermEventNewsSource returns true if UnderlyingProtectionTermEventNewsSource is present, Tag 42091.
func (m NoUnderlyingProtectionTermEventNewsSources) HasUnderlyingProtectionTermEventNewsSource() bool {
	return m.Has(tag.UnderlyingProtectionTermEventNewsSource)
}

// NoUnderlyingProtectionTermEventNewsSourcesRepeatingGroup is a repeating group, Tag 42090.
type NoUnderlyingProtectionTermEventNewsSourcesRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingProtectionTermEventNewsSourcesRepeatingGroup returns an initialized, NoUnderlyingProtectionTermEventNewsSourcesRepeatingGroup.
func NewNoUnderlyingProtectionTermEventNewsSourcesRepeatingGroup() NoUnderlyingProtectionTermEventNewsSourcesRepeatingGroup {
	return NoUnderlyingProtectionTermEventNewsSourcesRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingProtectionTermEventNewsSources,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingProtectionTermEventNewsSource),
			},
		),
	}
}

// Add create and append a new NoUnderlyingProtectionTermEventNewsSources to this group.
func (m NoUnderlyingProtectionTermEventNewsSourcesRepeatingGroup) Add() NoUnderlyingProtectionTermEventNewsSources {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingProtectionTermEventNewsSources{g}
}

// Get returns the ith NoUnderlyingProtectionTermEventNewsSources in the NoUnderlyingProtectionTermEventNewsSourcesRepeatinGroup.
func (m NoUnderlyingProtectionTermEventNewsSourcesRepeatingGroup) Get(i int) NoUnderlyingProtectionTermEventNewsSources {
	return NoUnderlyingProtectionTermEventNewsSources{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingProtectionTermEvents is a repeating group element, Tag 42077.
type NoUnderlyingProtectionTermEvents struct {
	*quickfix.Group
}

// SetUnderlyingProtectionTermEventType sets UnderlyingProtectionTermEventType, Tag 42078.
func (m NoUnderlyingProtectionTermEvents) SetUnderlyingProtectionTermEventType(v string) {
	m.Set(field.NewUnderlyingProtectionTermEventType(v))
}

// SetUnderlyingProtectionTermEventValue sets UnderlyingProtectionTermEventValue, Tag 42079.
func (m NoUnderlyingProtectionTermEvents) SetUnderlyingProtectionTermEventValue(v string) {
	m.Set(field.NewUnderlyingProtectionTermEventValue(v))
}

// SetUnderlyingProtectionTermEventCurrency sets UnderlyingProtectionTermEventCurrency, Tag 42080.
func (m NoUnderlyingProtectionTermEvents) SetUnderlyingProtectionTermEventCurrency(v string) {
	m.Set(field.NewUnderlyingProtectionTermEventCurrency(v))
}

// SetUnderlyingProtectionTermEventPeriod sets UnderlyingProtectionTermEventPeriod, Tag 42081.
func (m NoUnderlyingProtectionTermEvents) SetUnderlyingProtectionTermEventPeriod(v int) {
	m.Set(field.NewUnderlyingProtectionTermEventPeriod(v))
}

// SetUnderlyingProtectionTermEventUnit sets UnderlyingProtectionTermEventUnit, Tag 42082.
func (m NoUnderlyingProtectionTermEvents) SetUnderlyingProtectionTermEventUnit(v string) {
	m.Set(field.NewUnderlyingProtectionTermEventUnit(v))
}

// SetUnderlyingProtectionTermEventDayType sets UnderlyingProtectionTermEventDayType, Tag 42083.
func (m NoUnderlyingProtectionTermEvents) SetUnderlyingProtectionTermEventDayType(v int) {
	m.Set(field.NewUnderlyingProtectionTermEventDayType(v))
}

// SetUnderlyingProtectionTermEventRateSource sets UnderlyingProtectionTermEventRateSource, Tag 42084.
func (m NoUnderlyingProtectionTermEvents) SetUnderlyingProtectionTermEventRateSource(v string) {
	m.Set(field.NewUnderlyingProtectionTermEventRateSource(v))
}

// SetNoUnderlyingProtectionTermEventQualifiers sets NoUnderlyingProtectionTermEventQualifiers, Tag 42085.
func (m NoUnderlyingProtectionTermEvents) SetNoUnderlyingProtectionTermEventQualifiers(f NoUnderlyingProtectionTermEventQualifiersRepeatingGroup) {
	m.SetGroup(f)
}

// GetUnderlyingProtectionTermEventType gets UnderlyingProtectionTermEventType, Tag 42078.
func (m NoUnderlyingProtectionTermEvents) GetUnderlyingProtectionTermEventType() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingProtectionTermEventTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProtectionTermEventValue gets UnderlyingProtectionTermEventValue, Tag 42079.
func (m NoUnderlyingProtectionTermEvents) GetUnderlyingProtectionTermEventValue() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingProtectionTermEventValueField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProtectionTermEventCurrency gets UnderlyingProtectionTermEventCurrency, Tag 42080.
func (m NoUnderlyingProtectionTermEvents) GetUnderlyingProtectionTermEventCurrency() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingProtectionTermEventCurrencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProtectionTermEventPeriod gets UnderlyingProtectionTermEventPeriod, Tag 42081.
func (m NoUnderlyingProtectionTermEvents) GetUnderlyingProtectionTermEventPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingProtectionTermEventPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProtectionTermEventUnit gets UnderlyingProtectionTermEventUnit, Tag 42082.
func (m NoUnderlyingProtectionTermEvents) GetUnderlyingProtectionTermEventUnit() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingProtectionTermEventUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProtectionTermEventDayType gets UnderlyingProtectionTermEventDayType, Tag 42083.
func (m NoUnderlyingProtectionTermEvents) GetUnderlyingProtectionTermEventDayType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingProtectionTermEventDayTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProtectionTermEventRateSource gets UnderlyingProtectionTermEventRateSource, Tag 42084.
func (m NoUnderlyingProtectionTermEvents) GetUnderlyingProtectionTermEventRateSource() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingProtectionTermEventRateSourceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUnderlyingProtectionTermEventQualifiers gets NoUnderlyingProtectionTermEventQualifiers, Tag 42085.
func (m NoUnderlyingProtectionTermEvents) GetNoUnderlyingProtectionTermEventQualifiers() (NoUnderlyingProtectionTermEventQualifiersRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingProtectionTermEventQualifiersRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// HasUnderlyingProtectionTermEventType returns true if UnderlyingProtectionTermEventType is present, Tag 42078.
func (m NoUnderlyingProtectionTermEvents) HasUnderlyingProtectionTermEventType() bool {
	return m.Has(tag.UnderlyingProtectionTermEventType)
}

// HasUnderlyingProtectionTermEventValue returns true if UnderlyingProtectionTermEventValue is present, Tag 42079.
func (m NoUnderlyingProtectionTermEvents) HasUnderlyingProtectionTermEventValue() bool {
	return m.Has(tag.UnderlyingProtectionTermEventValue)
}

// HasUnderlyingProtectionTermEventCurrency returns true if UnderlyingProtectionTermEventCurrency is present, Tag 42080.
func (m NoUnderlyingProtectionTermEvents) HasUnderlyingProtectionTermEventCurrency() bool {
	return m.Has(tag.UnderlyingProtectionTermEventCurrency)
}

// HasUnderlyingProtectionTermEventPeriod returns true if UnderlyingProtectionTermEventPeriod is present, Tag 42081.
func (m NoUnderlyingProtectionTermEvents) HasUnderlyingProtectionTermEventPeriod() bool {
	return m.Has(tag.UnderlyingProtectionTermEventPeriod)
}

// HasUnderlyingProtectionTermEventUnit returns true if UnderlyingProtectionTermEventUnit is present, Tag 42082.
func (m NoUnderlyingProtectionTermEvents) HasUnderlyingProtectionTermEventUnit() bool {
	return m.Has(tag.UnderlyingProtectionTermEventUnit)
}

// HasUnderlyingProtectionTermEventDayType returns true if UnderlyingProtectionTermEventDayType is present, Tag 42083.
func (m NoUnderlyingProtectionTermEvents) HasUnderlyingProtectionTermEventDayType() bool {
	return m.Has(tag.UnderlyingProtectionTermEventDayType)
}

// HasUnderlyingProtectionTermEventRateSource returns true if UnderlyingProtectionTermEventRateSource is present, Tag 42084.
func (m NoUnderlyingProtectionTermEvents) HasUnderlyingProtectionTermEventRateSource() bool {
	return m.Has(tag.UnderlyingProtectionTermEventRateSource)
}

// HasNoUnderlyingProtectionTermEventQualifiers returns true if NoUnderlyingProtectionTermEventQualifiers is present, Tag 42085.
func (m NoUnderlyingProtectionTermEvents) HasNoUnderlyingProtectionTermEventQualifiers() bool {
	return m.Has(tag.NoUnderlyingProtectionTermEventQualifiers)
}

// NoUnderlyingProtectionTermEventQualifiers is a repeating group element, Tag 42085.
type NoUnderlyingProtectionTermEventQualifiers struct {
	*quickfix.Group
}

// SetUnderlyingProtectionTermEventQualifier sets UnderlyingProtectionTermEventQualifier, Tag 42086.
func (m NoUnderlyingProtectionTermEventQualifiers) SetUnderlyingProtectionTermEventQualifier(v string) {
	m.Set(field.NewUnderlyingProtectionTermEventQualifier(v))
}

// GetUnderlyingProtectionTermEventQualifier gets UnderlyingProtectionTermEventQualifier, Tag 42086.
func (m NoUnderlyingProtectionTermEventQualifiers) GetUnderlyingProtectionTermEventQualifier() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingProtectionTermEventQualifierField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingProtectionTermEventQualifier returns true if UnderlyingProtectionTermEventQualifier is present, Tag 42086.
func (m NoUnderlyingProtectionTermEventQualifiers) HasUnderlyingProtectionTermEventQualifier() bool {
	return m.Has(tag.UnderlyingProtectionTermEventQualifier)
}

// NoUnderlyingProtectionTermEventQualifiersRepeatingGroup is a repeating group, Tag 42085.
type NoUnderlyingProtectionTermEventQualifiersRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingProtectionTermEventQualifiersRepeatingGroup returns an initialized, NoUnderlyingProtectionTermEventQualifiersRepeatingGroup.
func NewNoUnderlyingProtectionTermEventQualifiersRepeatingGroup() NoUnderlyingProtectionTermEventQualifiersRepeatingGroup {
	return NoUnderlyingProtectionTermEventQualifiersRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingProtectionTermEventQualifiers,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingProtectionTermEventQualifier),
			},
		),
	}
}

// Add create and append a new NoUnderlyingProtectionTermEventQualifiers to this group.
func (m NoUnderlyingProtectionTermEventQualifiersRepeatingGroup) Add() NoUnderlyingProtectionTermEventQualifiers {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingProtectionTermEventQualifiers{g}
}

// Get returns the ith NoUnderlyingProtectionTermEventQualifiers in the NoUnderlyingProtectionTermEventQualifiersRepeatinGroup.
func (m NoUnderlyingProtectionTermEventQualifiersRepeatingGroup) Get(i int) NoUnderlyingProtectionTermEventQualifiers {
	return NoUnderlyingProtectionTermEventQualifiers{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingProtectionTermEventsRepeatingGroup is a repeating group, Tag 42077.
type NoUnderlyingProtectionTermEventsRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingProtectionTermEventsRepeatingGroup returns an initialized, NoUnderlyingProtectionTermEventsRepeatingGroup.
func NewNoUnderlyingProtectionTermEventsRepeatingGroup() NoUnderlyingProtectionTermEventsRepeatingGroup {
	return NoUnderlyingProtectionTermEventsRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingProtectionTermEvents,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingProtectionTermEventType),
				quickfix.GroupElement(tag.UnderlyingProtectionTermEventValue),
				quickfix.GroupElement(tag.UnderlyingProtectionTermEventCurrency),
				quickfix.GroupElement(tag.UnderlyingProtectionTermEventPeriod),
				quickfix.GroupElement(tag.UnderlyingProtectionTermEventUnit),
				quickfix.GroupElement(tag.UnderlyingProtectionTermEventDayType),
				quickfix.GroupElement(tag.UnderlyingProtectionTermEventRateSource),
				NewNoUnderlyingProtectionTermEventQualifiersRepeatingGroup(),
			},
		),
	}
}

// Add create and append a new NoUnderlyingProtectionTermEvents to this group.
func (m NoUnderlyingProtectionTermEventsRepeatingGroup) Add() NoUnderlyingProtectionTermEvents {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingProtectionTermEvents{g}
}

// Get returns the ith NoUnderlyingProtectionTermEvents in the NoUnderlyingProtectionTermEventsRepeatinGroup.
func (m NoUnderlyingProtectionTermEventsRepeatingGroup) Get(i int) NoUnderlyingProtectionTermEvents {
	return NoUnderlyingProtectionTermEvents{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingProtectionTermObligations is a repeating group element, Tag 42087.
type NoUnderlyingProtectionTermObligations struct {
	*quickfix.Group
}

// SetUnderlyingProtectionTermObligationType sets UnderlyingProtectionTermObligationType, Tag 42088.
func (m NoUnderlyingProtectionTermObligations) SetUnderlyingProtectionTermObligationType(v string) {
	m.Set(field.NewUnderlyingProtectionTermObligationType(v))
}

// SetUnderlyingProtectionTermObligationValue sets UnderlyingProtectionTermObligationValue, Tag 42089.
func (m NoUnderlyingProtectionTermObligations) SetUnderlyingProtectionTermObligationValue(v string) {
	m.Set(field.NewUnderlyingProtectionTermObligationValue(v))
}

// GetUnderlyingProtectionTermObligationType gets UnderlyingProtectionTermObligationType, Tag 42088.
func (m NoUnderlyingProtectionTermObligations) GetUnderlyingProtectionTermObligationType() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingProtectionTermObligationTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProtectionTermObligationValue gets UnderlyingProtectionTermObligationValue, Tag 42089.
func (m NoUnderlyingProtectionTermObligations) GetUnderlyingProtectionTermObligationValue() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingProtectionTermObligationValueField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingProtectionTermObligationType returns true if UnderlyingProtectionTermObligationType is present, Tag 42088.
func (m NoUnderlyingProtectionTermObligations) HasUnderlyingProtectionTermObligationType() bool {
	return m.Has(tag.UnderlyingProtectionTermObligationType)
}

// HasUnderlyingProtectionTermObligationValue returns true if UnderlyingProtectionTermObligationValue is present, Tag 42089.
func (m NoUnderlyingProtectionTermObligations) HasUnderlyingProtectionTermObligationValue() bool {
	return m.Has(tag.UnderlyingProtectionTermObligationValue)
}

// NoUnderlyingProtectionTermObligationsRepeatingGroup is a repeating group, Tag 42087.
type NoUnderlyingProtectionTermObligationsRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingProtectionTermObligationsRepeatingGroup returns an initialized, NoUnderlyingProtectionTermObligationsRepeatingGroup.
func NewNoUnderlyingProtectionTermObligationsRepeatingGroup() NoUnderlyingProtectionTermObligationsRepeatingGroup {
	return NoUnderlyingProtectionTermObligationsRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingProtectionTermObligations,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingProtectionTermObligationType),
				quickfix.GroupElement(tag.UnderlyingProtectionTermObligationValue),
			},
		),
	}
}

// Add create and append a new NoUnderlyingProtectionTermObligations to this group.
func (m NoUnderlyingProtectionTermObligationsRepeatingGroup) Add() NoUnderlyingProtectionTermObligations {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingProtectionTermObligations{g}
}

// Get returns the ith NoUnderlyingProtectionTermObligations in the NoUnderlyingProtectionTermObligationsRepeatinGroup.
func (m NoUnderlyingProtectionTermObligationsRepeatingGroup) Get(i int) NoUnderlyingProtectionTermObligations {
	return NoUnderlyingProtectionTermObligations{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingProtectionTermsRepeatingGroup is a repeating group, Tag 42068.
type NoUnderlyingProtectionTermsRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingProtectionTermsRepeatingGroup returns an initialized, NoUnderlyingProtectionTermsRepeatingGroup.
func NewNoUnderlyingProtectionTermsRepeatingGroup() NoUnderlyingProtectionTermsRepeatingGroup {
	return NoUnderlyingProtectionTermsRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingProtectionTerms,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingProtectionTermNotional),
				quickfix.GroupElement(tag.UnderlyingProtectionTermCurrency),
				quickfix.GroupElement(tag.UnderlyingProtectionTermSellerNotifies),
				quickfix.GroupElement(tag.UnderlyingProtectionTermBuyerNotifies),
				quickfix.GroupElement(tag.UnderlyingProtectionTermEventBusinessCenter),
				quickfix.GroupElement(tag.UnderlyingProtectionTermStandardSources),
				quickfix.GroupElement(tag.UnderlyingProtectionTermEventMinimumSources),
				NewNoUnderlyingProtectionTermEventNewsSourcesRepeatingGroup(),
				NewNoUnderlyingProtectionTermEventsRepeatingGroup(),
				NewNoUnderlyingProtectionTermObligationsRepeatingGroup(),
				quickfix.GroupElement(tag.UnderlyingProtectionTermXID),
			},
		),
	}
}

// Add create and append a new NoUnderlyingProtectionTerms to this group.
func (m NoUnderlyingProtectionTermsRepeatingGroup) Add() NoUnderlyingProtectionTerms {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingProtectionTerms{g}
}

// Get returns the ith NoUnderlyingProtectionTerms in the NoUnderlyingProtectionTermsRepeatinGroup.
func (m NoUnderlyingProtectionTermsRepeatingGroup) Get(i int) NoUnderlyingProtectionTerms {
	return NoUnderlyingProtectionTerms{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingProvisions is a repeating group element, Tag 42149.
type NoUnderlyingProvisions struct {
	*quickfix.Group
}

// SetUnderlyingProvisionType sets UnderlyingProvisionType, Tag 42150.
func (m NoUnderlyingProvisions) SetUnderlyingProvisionType(v int) {
	m.Set(field.NewUnderlyingProvisionType(v))
}

// SetUnderlyingProvisionDateUnadjusted sets UnderlyingProvisionDateUnadjusted, Tag 42151.
func (m NoUnderlyingProvisions) SetUnderlyingProvisionDateUnadjusted(v string) {
	m.Set(field.NewUnderlyingProvisionDateUnadjusted(v))
}

// SetUnderlyingProvisionDateBusinessDayConvention sets UnderlyingProvisionDateBusinessDayConvention, Tag 42152.
func (m NoUnderlyingProvisions) SetUnderlyingProvisionDateBusinessDayConvention(v int) {
	m.Set(field.NewUnderlyingProvisionDateBusinessDayConvention(v))
}

// SetNoUnderlyingProvisionDateBusinessCenters sets NoUnderlyingProvisionDateBusinessCenters, Tag 42190.
func (m NoUnderlyingProvisions) SetNoUnderlyingProvisionDateBusinessCenters(f NoUnderlyingProvisionDateBusinessCentersRepeatingGroup) {
	m.SetGroup(f)
}

// SetUnderlyingProvisionDateAdjusted sets UnderlyingProvisionDateAdjusted, Tag 42153.
func (m NoUnderlyingProvisions) SetUnderlyingProvisionDateAdjusted(v string) {
	m.Set(field.NewUnderlyingProvisionDateAdjusted(v))
}

// SetUnderlyingProvisionDateTenorPeriod sets UnderlyingProvisionDateTenorPeriod, Tag 42154.
func (m NoUnderlyingProvisions) SetUnderlyingProvisionDateTenorPeriod(v int) {
	m.Set(field.NewUnderlyingProvisionDateTenorPeriod(v))
}

// SetUnderlyingProvisionDateTenorUnit sets UnderlyingProvisionDateTenorUnit, Tag 42155.
func (m NoUnderlyingProvisions) SetUnderlyingProvisionDateTenorUnit(v string) {
	m.Set(field.NewUnderlyingProvisionDateTenorUnit(v))
}

// SetUnderlyingProvisionCalculationAgent sets UnderlyingProvisionCalculationAgent, Tag 42156.
func (m NoUnderlyingProvisions) SetUnderlyingProvisionCalculationAgent(v int) {
	m.Set(field.NewUnderlyingProvisionCalculationAgent(v))
}

// SetUnderlyingProvisionOptionSinglePartyBuyerSide sets UnderlyingProvisionOptionSinglePartyBuyerSide, Tag 42157.
func (m NoUnderlyingProvisions) SetUnderlyingProvisionOptionSinglePartyBuyerSide(v int) {
	m.Set(field.NewUnderlyingProvisionOptionSinglePartyBuyerSide(v))
}

// SetUnderlyingProvisionOptionSinglePartySellerSide sets UnderlyingProvisionOptionSinglePartySellerSide, Tag 42158.
func (m NoUnderlyingProvisions) SetUnderlyingProvisionOptionSinglePartySellerSide(v int) {
	m.Set(field.NewUnderlyingProvisionOptionSinglePartySellerSide(v))
}

// SetUnderlyingProvisionCashSettlValueTime sets UnderlyingProvisionCashSettlValueTime, Tag 42104.
func (m NoUnderlyingProvisions) SetUnderlyingProvisionCashSettlValueTime(v string) {
	m.Set(field.NewUnderlyingProvisionCashSettlValueTime(v))
}

// SetUnderlyingProvisionCashSettlValueTimeBusinessCenter sets UnderlyingProvisionCashSettlValueTimeBusinessCenter, Tag 42105.
func (m NoUnderlyingProvisions) SetUnderlyingProvisionCashSettlValueTimeBusinessCenter(v string) {
	m.Set(field.NewUnderlyingProvisionCashSettlValueTimeBusinessCenter(v))
}

// SetUnderlyingProvisionCashSettlValueDateBusinessDayConvention sets UnderlyingProvisionCashSettlValueDateBusinessDayConvention, Tag 42106.
func (m NoUnderlyingProvisions) SetUnderlyingProvisionCashSettlValueDateBusinessDayConvention(v int) {
	m.Set(field.NewUnderlyingProvisionCashSettlValueDateBusinessDayConvention(v))
}

// SetNoUnderlyingProvisionCashSettlValueDateBusinessCenters sets NoUnderlyingProvisionCashSettlValueDateBusinessCenters, Tag 42182.
func (m NoUnderlyingProvisions) SetNoUnderlyingProvisionCashSettlValueDateBusinessCenters(f NoUnderlyingProvisionCashSettlValueDateBusinessCentersRepeatingGroup) {
	m.SetGroup(f)
}

// SetUnderlyingProvisionCashSettlValueDateRelativeTo sets UnderlyingProvisionCashSettlValueDateRelativeTo, Tag 42107.
func (m NoUnderlyingProvisions) SetUnderlyingProvisionCashSettlValueDateRelativeTo(v int) {
	m.Set(field.NewUnderlyingProvisionCashSettlValueDateRelativeTo(v))
}

// SetUnderlyingProvisionCashSettlValueDateOffsetPeriod sets UnderlyingProvisionCashSettlValueDateOffsetPeriod, Tag 42108.
func (m NoUnderlyingProvisions) SetUnderlyingProvisionCashSettlValueDateOffsetPeriod(v int) {
	m.Set(field.NewUnderlyingProvisionCashSettlValueDateOffsetPeriod(v))
}

// SetUnderlyingProvisionCashSettlValueDateOffsetUnit sets UnderlyingProvisionCashSettlValueDateOffsetUnit, Tag 42109.
func (m NoUnderlyingProvisions) SetUnderlyingProvisionCashSettlValueDateOffsetUnit(v string) {
	m.Set(field.NewUnderlyingProvisionCashSettlValueDateOffsetUnit(v))
}

// SetUnderlyingProvisionCashSettlValueDateOffsetDayType sets UnderlyingProvisionCashSettlValueDateOffsetDayType, Tag 42110.
func (m NoUnderlyingProvisions) SetUnderlyingProvisionCashSettlValueDateOffsetDayType(v int) {
	m.Set(field.NewUnderlyingProvisionCashSettlValueDateOffsetDayType(v))
}

// SetUnderlyingProvisionCashSettlValueDateAdjusted sets UnderlyingProvisionCashSettlValueDateAdjusted, Tag 42111.
func (m NoUnderlyingProvisions) SetUnderlyingProvisionCashSettlValueDateAdjusted(v string) {
	m.Set(field.NewUnderlyingProvisionCashSettlValueDateAdjusted(v))
}

// SetUnderlyingProvisionOptionExerciseBusinessDayConvention sets UnderlyingProvisionOptionExerciseBusinessDayConvention, Tag 42115.
func (m NoUnderlyingProvisions) SetUnderlyingProvisionOptionExerciseBusinessDayConvention(v int) {
	m.Set(field.NewUnderlyingProvisionOptionExerciseBusinessDayConvention(v))
}

// SetNoUnderlyingProvisionOptionExerciseBusinessCenters sets NoUnderlyingProvisionOptionExerciseBusinessCenters, Tag 42184.
func (m NoUnderlyingProvisions) SetNoUnderlyingProvisionOptionExerciseBusinessCenters(f NoUnderlyingProvisionOptionExerciseBusinessCentersRepeatingGroup) {
	m.SetGroup(f)
}

// SetNoUnderlyingProvisionOptionExerciseFixedDates sets NoUnderlyingProvisionOptionExerciseFixedDates, Tag 42112.
func (m NoUnderlyingProvisions) SetNoUnderlyingProvisionOptionExerciseFixedDates(f NoUnderlyingProvisionOptionExerciseFixedDatesRepeatingGroup) {
	m.SetGroup(f)
}

// SetUnderlyingProvisionOptionExerciseEarliestDateOffsetPeriod sets UnderlyingProvisionOptionExerciseEarliestDateOffsetPeriod, Tag 42116.
func (m NoUnderlyingProvisions) SetUnderlyingProvisionOptionExerciseEarliestDateOffsetPeriod(v int) {
	m.Set(field.NewUnderlyingProvisionOptionExerciseEarliestDateOffsetPeriod(v))
}

// SetUnderlyingProvisionOptionExerciseEarliestDateOffsetUnit sets UnderlyingProvisionOptionExerciseEarliestDateOffsetUnit, Tag 42117.
func (m NoUnderlyingProvisions) SetUnderlyingProvisionOptionExerciseEarliestDateOffsetUnit(v string) {
	m.Set(field.NewUnderlyingProvisionOptionExerciseEarliestDateOffsetUnit(v))
}

// SetUnderlyingProvisionOptionExerciseFrequencyPeriod sets UnderlyingProvisionOptionExerciseFrequencyPeriod, Tag 42118.
func (m NoUnderlyingProvisions) SetUnderlyingProvisionOptionExerciseFrequencyPeriod(v int) {
	m.Set(field.NewUnderlyingProvisionOptionExerciseFrequencyPeriod(v))
}

// SetUnderlyingProvisionOptionExerciseFrequencyUnit sets UnderlyingProvisionOptionExerciseFrequencyUnit, Tag 42119.
func (m NoUnderlyingProvisions) SetUnderlyingProvisionOptionExerciseFrequencyUnit(v string) {
	m.Set(field.NewUnderlyingProvisionOptionExerciseFrequencyUnit(v))
}

// SetUnderlyingProvisionOptionExerciseStartDateUnadjusted sets UnderlyingProvisionOptionExerciseStartDateUnadjusted, Tag 42120.
func (m NoUnderlyingProvisions) SetUnderlyingProvisionOptionExerciseStartDateUnadjusted(v string) {
	m.Set(field.NewUnderlyingProvisionOptionExerciseStartDateUnadjusted(v))
}

// SetUnderlyingProvisionOptionExerciseStartDateRelativeTo sets UnderlyingProvisionOptionExerciseStartDateRelativeTo, Tag 42121.
func (m NoUnderlyingProvisions) SetUnderlyingProvisionOptionExerciseStartDateRelativeTo(v int) {
	m.Set(field.NewUnderlyingProvisionOptionExerciseStartDateRelativeTo(v))
}

// SetUnderlyingProvisionOptionExerciseStartDateOffsetPeriod sets UnderlyingProvisionOptionExerciseStartDateOffsetPeriod, Tag 42122.
func (m NoUnderlyingProvisions) SetUnderlyingProvisionOptionExerciseStartDateOffsetPeriod(v int) {
	m.Set(field.NewUnderlyingProvisionOptionExerciseStartDateOffsetPeriod(v))
}

// SetUnderlyingProvisionOptionExerciseStartDateOffsetUnit sets UnderlyingProvisionOptionExerciseStartDateOffsetUnit, Tag 42123.
func (m NoUnderlyingProvisions) SetUnderlyingProvisionOptionExerciseStartDateOffsetUnit(v string) {
	m.Set(field.NewUnderlyingProvisionOptionExerciseStartDateOffsetUnit(v))
}

// SetUnderlyingProvisionOptionExerciseStartDateOffsetDayType sets UnderlyingProvisionOptionExerciseStartDateOffsetDayType, Tag 42124.
func (m NoUnderlyingProvisions) SetUnderlyingProvisionOptionExerciseStartDateOffsetDayType(v int) {
	m.Set(field.NewUnderlyingProvisionOptionExerciseStartDateOffsetDayType(v))
}

// SetUnderlyingProvisionOptionExerciseStartDateAdjusted sets UnderlyingProvisionOptionExerciseStartDateAdjusted, Tag 42125.
func (m NoUnderlyingProvisions) SetUnderlyingProvisionOptionExerciseStartDateAdjusted(v string) {
	m.Set(field.NewUnderlyingProvisionOptionExerciseStartDateAdjusted(v))
}

// SetUnderlyingProvisionOptionExercisePeriodSkip sets UnderlyingProvisionOptionExercisePeriodSkip, Tag 42126.
func (m NoUnderlyingProvisions) SetUnderlyingProvisionOptionExercisePeriodSkip(v int) {
	m.Set(field.NewUnderlyingProvisionOptionExercisePeriodSkip(v))
}

// SetUnderlyingProvisionOptionExerciseBoundsFirstDateUnadjusted sets UnderlyingProvisionOptionExerciseBoundsFirstDateUnadjusted, Tag 42127.
func (m NoUnderlyingProvisions) SetUnderlyingProvisionOptionExerciseBoundsFirstDateUnadjusted(v string) {
	m.Set(field.NewUnderlyingProvisionOptionExerciseBoundsFirstDateUnadjusted(v))
}

// SetUnderlyingProvisionOptionExerciseBoundsLastDateUnadjusted sets UnderlyingProvisionOptionExerciseBoundsLastDateUnadjusted, Tag 42128.
func (m NoUnderlyingProvisions) SetUnderlyingProvisionOptionExerciseBoundsLastDateUnadjusted(v string) {
	m.Set(field.NewUnderlyingProvisionOptionExerciseBoundsLastDateUnadjusted(v))
}

// SetUnderlyingProvisionOptionExerciseEarliestTime sets UnderlyingProvisionOptionExerciseEarliestTime, Tag 42129.
func (m NoUnderlyingProvisions) SetUnderlyingProvisionOptionExerciseEarliestTime(v string) {
	m.Set(field.NewUnderlyingProvisionOptionExerciseEarliestTime(v))
}

// SetUnderlyingProvisionOptionExerciseEarliestTimeBusinessCenter sets UnderlyingProvisionOptionExerciseEarliestTimeBusinessCenter, Tag 42130.
func (m NoUnderlyingProvisions) SetUnderlyingProvisionOptionExerciseEarliestTimeBusinessCenter(v string) {
	m.Set(field.NewUnderlyingProvisionOptionExerciseEarliestTimeBusinessCenter(v))
}

// SetUnderlyingProvisionOptionExerciseLatestTime sets UnderlyingProvisionOptionExerciseLatestTime, Tag 42131.
func (m NoUnderlyingProvisions) SetUnderlyingProvisionOptionExerciseLatestTime(v string) {
	m.Set(field.NewUnderlyingProvisionOptionExerciseLatestTime(v))
}

// SetUnderlyingProvisionOptionExerciseLatestTimeBusinessCenter sets UnderlyingProvisionOptionExerciseLatestTimeBusinessCenter, Tag 42132.
func (m NoUnderlyingProvisions) SetUnderlyingProvisionOptionExerciseLatestTimeBusinessCenter(v string) {
	m.Set(field.NewUnderlyingProvisionOptionExerciseLatestTimeBusinessCenter(v))
}

// SetUnderlyingProvisionOptionExpirationDateUnadjusted sets UnderlyingProvisionOptionExpirationDateUnadjusted, Tag 42133.
func (m NoUnderlyingProvisions) SetUnderlyingProvisionOptionExpirationDateUnadjusted(v string) {
	m.Set(field.NewUnderlyingProvisionOptionExpirationDateUnadjusted(v))
}

// SetUnderlyingProvisionOptionExpirationDateBusinessDayConvention sets UnderlyingProvisionOptionExpirationDateBusinessDayConvention, Tag 42134.
func (m NoUnderlyingProvisions) SetUnderlyingProvisionOptionExpirationDateBusinessDayConvention(v int) {
	m.Set(field.NewUnderlyingProvisionOptionExpirationDateBusinessDayConvention(v))
}

// SetNoUnderlyingProvisionOptionExpirationDateBusinessCenters sets NoUnderlyingProvisionOptionExpirationDateBusinessCenters, Tag 42186.
func (m NoUnderlyingProvisions) SetNoUnderlyingProvisionOptionExpirationDateBusinessCenters(f NoUnderlyingProvisionOptionExpirationDateBusinessCentersRepeatingGroup) {
	m.SetGroup(f)
}

// SetUnderlyingProvisionOptionExpirationDateRelativeTo sets UnderlyingProvisionOptionExpirationDateRelativeTo, Tag 42135.
func (m NoUnderlyingProvisions) SetUnderlyingProvisionOptionExpirationDateRelativeTo(v int) {
	m.Set(field.NewUnderlyingProvisionOptionExpirationDateRelativeTo(v))
}

// SetUnderlyingProvisionOptionExpirationDateOffsetPeriod sets UnderlyingProvisionOptionExpirationDateOffsetPeriod, Tag 42136.
func (m NoUnderlyingProvisions) SetUnderlyingProvisionOptionExpirationDateOffsetPeriod(v int) {
	m.Set(field.NewUnderlyingProvisionOptionExpirationDateOffsetPeriod(v))
}

// SetUnderlyingProvisionOptionExpirationDateOffsetUnit sets UnderlyingProvisionOptionExpirationDateOffsetUnit, Tag 42137.
func (m NoUnderlyingProvisions) SetUnderlyingProvisionOptionExpirationDateOffsetUnit(v string) {
	m.Set(field.NewUnderlyingProvisionOptionExpirationDateOffsetUnit(v))
}

// SetUnderlyingProvisionOptionExpirationDateOffsetDayType sets UnderlyingProvisionOptionExpirationDateOffsetDayType, Tag 42138.
func (m NoUnderlyingProvisions) SetUnderlyingProvisionOptionExpirationDateOffsetDayType(v int) {
	m.Set(field.NewUnderlyingProvisionOptionExpirationDateOffsetDayType(v))
}

// SetUnderlyingProvisionOptionExpirationDateAdjusted sets UnderlyingProvisionOptionExpirationDateAdjusted, Tag 42139.
func (m NoUnderlyingProvisions) SetUnderlyingProvisionOptionExpirationDateAdjusted(v string) {
	m.Set(field.NewUnderlyingProvisionOptionExpirationDateAdjusted(v))
}

// SetUnderlyingProvisionOptionExpirationTime sets UnderlyingProvisionOptionExpirationTime, Tag 42140.
func (m NoUnderlyingProvisions) SetUnderlyingProvisionOptionExpirationTime(v string) {
	m.Set(field.NewUnderlyingProvisionOptionExpirationTime(v))
}

// SetUnderlyingProvisionOptionExpirationTimeBusinessCenter sets UnderlyingProvisionOptionExpirationTimeBusinessCenter, Tag 42141.
func (m NoUnderlyingProvisions) SetUnderlyingProvisionOptionExpirationTimeBusinessCenter(v string) {
	m.Set(field.NewUnderlyingProvisionOptionExpirationTimeBusinessCenter(v))
}

// SetUnderlyingProvisionOptionRelevantUnderlyingDateUnadjusted sets UnderlyingProvisionOptionRelevantUnderlyingDateUnadjusted, Tag 42142.
func (m NoUnderlyingProvisions) SetUnderlyingProvisionOptionRelevantUnderlyingDateUnadjusted(v string) {
	m.Set(field.NewUnderlyingProvisionOptionRelevantUnderlyingDateUnadjusted(v))
}

// SetUnderlyingProvisionOptionRelevantUnderlyingDateBusinessDayConvention sets UnderlyingProvisionOptionRelevantUnderlyingDateBusinessDayConvention, Tag 42143.
func (m NoUnderlyingProvisions) SetUnderlyingProvisionOptionRelevantUnderlyingDateBusinessDayConvention(v int) {
	m.Set(field.NewUnderlyingProvisionOptionRelevantUnderlyingDateBusinessDayConvention(v))
}

// SetNoUnderlyingProvisionOptionRelevantUnderlyingDateBusinessCenters sets NoUnderlyingProvisionOptionRelevantUnderlyingDateBusinessCenters, Tag 42188.
func (m NoUnderlyingProvisions) SetNoUnderlyingProvisionOptionRelevantUnderlyingDateBusinessCenters(f NoUnderlyingProvisionOptionRelevantUnderlyingDateBusinessCentersRepeatingGroup) {
	m.SetGroup(f)
}

// SetUnderlyingProvisionOptionRelevantUnderlyingDateRelativeTo sets UnderlyingProvisionOptionRelevantUnderlyingDateRelativeTo, Tag 42144.
func (m NoUnderlyingProvisions) SetUnderlyingProvisionOptionRelevantUnderlyingDateRelativeTo(v int) {
	m.Set(field.NewUnderlyingProvisionOptionRelevantUnderlyingDateRelativeTo(v))
}

// SetUnderlyingProvisionOptionRelevantUnderlyingDateOffsetPeriod sets UnderlyingProvisionOptionRelevantUnderlyingDateOffsetPeriod, Tag 42145.
func (m NoUnderlyingProvisions) SetUnderlyingProvisionOptionRelevantUnderlyingDateOffsetPeriod(v int) {
	m.Set(field.NewUnderlyingProvisionOptionRelevantUnderlyingDateOffsetPeriod(v))
}

// SetUnderlyingProvisionOptionRelevantUnderlyingDateOffsetUnit sets UnderlyingProvisionOptionRelevantUnderlyingDateOffsetUnit, Tag 42146.
func (m NoUnderlyingProvisions) SetUnderlyingProvisionOptionRelevantUnderlyingDateOffsetUnit(v string) {
	m.Set(field.NewUnderlyingProvisionOptionRelevantUnderlyingDateOffsetUnit(v))
}

// SetUnderlyingProvisionOptionRelevantUnderlyingDateOffsetDayType sets UnderlyingProvisionOptionRelevantUnderlyingDateOffsetDayType, Tag 42147.
func (m NoUnderlyingProvisions) SetUnderlyingProvisionOptionRelevantUnderlyingDateOffsetDayType(v int) {
	m.Set(field.NewUnderlyingProvisionOptionRelevantUnderlyingDateOffsetDayType(v))
}

// SetUnderlyingProvisionOptionRelevantUnderlyingDateAdjusted sets UnderlyingProvisionOptionRelevantUnderlyingDateAdjusted, Tag 42148.
func (m NoUnderlyingProvisions) SetUnderlyingProvisionOptionRelevantUnderlyingDateAdjusted(v string) {
	m.Set(field.NewUnderlyingProvisionOptionRelevantUnderlyingDateAdjusted(v))
}

// SetUnderlyingProvisionOptionExerciseStyle sets UnderlyingProvisionOptionExerciseStyle, Tag 42159.
func (m NoUnderlyingProvisions) SetUnderlyingProvisionOptionExerciseStyle(v int) {
	m.Set(field.NewUnderlyingProvisionOptionExerciseStyle(v))
}

// SetUnderlyingProvisionOptionExerciseMultipleNotional sets UnderlyingProvisionOptionExerciseMultipleNotional, Tag 42160.
func (m NoUnderlyingProvisions) SetUnderlyingProvisionOptionExerciseMultipleNotional(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingProvisionOptionExerciseMultipleNotional(value, scale))
}

// SetUnderlyingProvisionOptionExerciseMinimumNotional sets UnderlyingProvisionOptionExerciseMinimumNotional, Tag 42161.
func (m NoUnderlyingProvisions) SetUnderlyingProvisionOptionExerciseMinimumNotional(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingProvisionOptionExerciseMinimumNotional(value, scale))
}

// SetUnderlyingProvisionOptionExerciseMaximumNotional sets UnderlyingProvisionOptionExerciseMaximumNotional, Tag 42162.
func (m NoUnderlyingProvisions) SetUnderlyingProvisionOptionExerciseMaximumNotional(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingProvisionOptionExerciseMaximumNotional(value, scale))
}

// SetUnderlyingProvisionOptionMinimumNumber sets UnderlyingProvisionOptionMinimumNumber, Tag 42163.
func (m NoUnderlyingProvisions) SetUnderlyingProvisionOptionMinimumNumber(v int) {
	m.Set(field.NewUnderlyingProvisionOptionMinimumNumber(v))
}

// SetUnderlyingProvisionOptionMaximumNumber sets UnderlyingProvisionOptionMaximumNumber, Tag 42164.
func (m NoUnderlyingProvisions) SetUnderlyingProvisionOptionMaximumNumber(v int) {
	m.Set(field.NewUnderlyingProvisionOptionMaximumNumber(v))
}

// SetUnderlyingProvisionOptionExerciseConfirmation sets UnderlyingProvisionOptionExerciseConfirmation, Tag 42165.
func (m NoUnderlyingProvisions) SetUnderlyingProvisionOptionExerciseConfirmation(v bool) {
	m.Set(field.NewUnderlyingProvisionOptionExerciseConfirmation(v))
}

// SetUnderlyingProvisionCashSettlPaymentDateBusinessDayConvention sets UnderlyingProvisionCashSettlPaymentDateBusinessDayConvention, Tag 42092.
func (m NoUnderlyingProvisions) SetUnderlyingProvisionCashSettlPaymentDateBusinessDayConvention(v int) {
	m.Set(field.NewUnderlyingProvisionCashSettlPaymentDateBusinessDayConvention(v))
}

// SetNoUnderlyingProvisionCashSettlPaymentDateBusinessCenters sets NoUnderlyingProvisionCashSettlPaymentDateBusinessCenters, Tag 42180.
func (m NoUnderlyingProvisions) SetNoUnderlyingProvisionCashSettlPaymentDateBusinessCenters(f NoUnderlyingProvisionCashSettlPaymentDateBusinessCentersRepeatingGroup) {
	m.SetGroup(f)
}

// SetUnderlyingProvisionCashSettlPaymentDateRelativeTo sets UnderlyingProvisionCashSettlPaymentDateRelativeTo, Tag 42093.
func (m NoUnderlyingProvisions) SetUnderlyingProvisionCashSettlPaymentDateRelativeTo(v int) {
	m.Set(field.NewUnderlyingProvisionCashSettlPaymentDateRelativeTo(v))
}

// SetUnderlyingProvisionCashSettlPaymentDateOffsetPeriod sets UnderlyingProvisionCashSettlPaymentDateOffsetPeriod, Tag 42094.
func (m NoUnderlyingProvisions) SetUnderlyingProvisionCashSettlPaymentDateOffsetPeriod(v int) {
	m.Set(field.NewUnderlyingProvisionCashSettlPaymentDateOffsetPeriod(v))
}

// SetUnderlyingProvisionCashSettlPaymentDateOffsetUnit sets UnderlyingProvisionCashSettlPaymentDateOffsetUnit, Tag 42095.
func (m NoUnderlyingProvisions) SetUnderlyingProvisionCashSettlPaymentDateOffsetUnit(v string) {
	m.Set(field.NewUnderlyingProvisionCashSettlPaymentDateOffsetUnit(v))
}

// SetUnderlyingProvisionCashSettlPaymentDateOffsetDayType sets UnderlyingProvisionCashSettlPaymentDateOffsetDayType, Tag 42096.
func (m NoUnderlyingProvisions) SetUnderlyingProvisionCashSettlPaymentDateOffsetDayType(v int) {
	m.Set(field.NewUnderlyingProvisionCashSettlPaymentDateOffsetDayType(v))
}

// SetUnderlyingProvisionCashSettlPaymentDateRangeFirst sets UnderlyingProvisionCashSettlPaymentDateRangeFirst, Tag 42097.
func (m NoUnderlyingProvisions) SetUnderlyingProvisionCashSettlPaymentDateRangeFirst(v string) {
	m.Set(field.NewUnderlyingProvisionCashSettlPaymentDateRangeFirst(v))
}

// SetUnderlyingProvisionCashSettlPaymentDateRangeLast sets UnderlyingProvisionCashSettlPaymentDateRangeLast, Tag 42098.
func (m NoUnderlyingProvisions) SetUnderlyingProvisionCashSettlPaymentDateRangeLast(v string) {
	m.Set(field.NewUnderlyingProvisionCashSettlPaymentDateRangeLast(v))
}

// SetNoUnderlyingProvisionCashSettlPaymentDates sets NoUnderlyingProvisionCashSettlPaymentDates, Tag 42099.
func (m NoUnderlyingProvisions) SetNoUnderlyingProvisionCashSettlPaymentDates(f NoUnderlyingProvisionCashSettlPaymentDatesRepeatingGroup) {
	m.SetGroup(f)
}

// SetUnderlyingProvisionCashSettlMethod sets UnderlyingProvisionCashSettlMethod, Tag 42166.
func (m NoUnderlyingProvisions) SetUnderlyingProvisionCashSettlMethod(v int) {
	m.Set(field.NewUnderlyingProvisionCashSettlMethod(v))
}

// SetUnderlyingProvisionCashSettlCurrency sets UnderlyingProvisionCashSettlCurrency, Tag 42167.
func (m NoUnderlyingProvisions) SetUnderlyingProvisionCashSettlCurrency(v string) {
	m.Set(field.NewUnderlyingProvisionCashSettlCurrency(v))
}

// SetUnderlyingProvisionCashSettlCurrency2 sets UnderlyingProvisionCashSettlCurrency2, Tag 42168.
func (m NoUnderlyingProvisions) SetUnderlyingProvisionCashSettlCurrency2(v string) {
	m.Set(field.NewUnderlyingProvisionCashSettlCurrency2(v))
}

// SetUnderlyingProvisionCashSettlQuoteType sets UnderlyingProvisionCashSettlQuoteType, Tag 42169.
func (m NoUnderlyingProvisions) SetUnderlyingProvisionCashSettlQuoteType(v int) {
	m.Set(field.NewUnderlyingProvisionCashSettlQuoteType(v))
}

// SetUnderlyingProvisionCashSettlQuoteSource sets UnderlyingProvisionCashSettlQuoteSource, Tag 42102.
func (m NoUnderlyingProvisions) SetUnderlyingProvisionCashSettlQuoteSource(v int) {
	m.Set(field.NewUnderlyingProvisionCashSettlQuoteSource(v))
}

// SetUnderlyingProvisionCashSettlQuoteReferencePage sets UnderlyingProvisionCashSettlQuoteReferencePage, Tag 42103.
func (m NoUnderlyingProvisions) SetUnderlyingProvisionCashSettlQuoteReferencePage(v string) {
	m.Set(field.NewUnderlyingProvisionCashSettlQuoteReferencePage(v))
}

// SetUnderlyingProvisionText sets UnderlyingProvisionText, Tag 42170.
func (m NoUnderlyingProvisions) SetUnderlyingProvisionText(v string) {
	m.Set(field.NewUnderlyingProvisionText(v))
}

// SetEncodedUnderlyingProvisionTextLen sets EncodedUnderlyingProvisionTextLen, Tag 42171.
func (m NoUnderlyingProvisions) SetEncodedUnderlyingProvisionTextLen(v int) {
	m.Set(field.NewEncodedUnderlyingProvisionTextLen(v))
}

// SetEncodedUnderlyingProvisionText sets EncodedUnderlyingProvisionText, Tag 42172.
func (m NoUnderlyingProvisions) SetEncodedUnderlyingProvisionText(v string) {
	m.Set(field.NewEncodedUnderlyingProvisionText(v))
}

// SetNoUnderlyingProvisionPartyIDs sets NoUnderlyingProvisionPartyIDs, Tag 42173.
func (m NoUnderlyingProvisions) SetNoUnderlyingProvisionPartyIDs(f NoUnderlyingProvisionPartyIDsRepeatingGroup) {
	m.SetGroup(f)
}

// SetUnderlyingProvisionBreakFeeElection sets UnderlyingProvisionBreakFeeElection, Tag 43002.
func (m NoUnderlyingProvisions) SetUnderlyingProvisionBreakFeeElection(v int) {
	m.Set(field.NewUnderlyingProvisionBreakFeeElection(v))
}

// SetUnderlyingProvisionBreakFeeRate sets UnderlyingProvisionBreakFeeRate, Tag 43003.
func (m NoUnderlyingProvisions) SetUnderlyingProvisionBreakFeeRate(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingProvisionBreakFeeRate(value, scale))
}

// GetUnderlyingProvisionType gets UnderlyingProvisionType, Tag 42150.
func (m NoUnderlyingProvisions) GetUnderlyingProvisionType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProvisionDateUnadjusted gets UnderlyingProvisionDateUnadjusted, Tag 42151.
func (m NoUnderlyingProvisions) GetUnderlyingProvisionDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProvisionDateBusinessDayConvention gets UnderlyingProvisionDateBusinessDayConvention, Tag 42152.
func (m NoUnderlyingProvisions) GetUnderlyingProvisionDateBusinessDayConvention() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionDateBusinessDayConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUnderlyingProvisionDateBusinessCenters gets NoUnderlyingProvisionDateBusinessCenters, Tag 42190.
func (m NoUnderlyingProvisions) GetNoUnderlyingProvisionDateBusinessCenters() (NoUnderlyingProvisionDateBusinessCentersRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingProvisionDateBusinessCentersRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetUnderlyingProvisionDateAdjusted gets UnderlyingProvisionDateAdjusted, Tag 42153.
func (m NoUnderlyingProvisions) GetUnderlyingProvisionDateAdjusted() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionDateAdjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProvisionDateTenorPeriod gets UnderlyingProvisionDateTenorPeriod, Tag 42154.
func (m NoUnderlyingProvisions) GetUnderlyingProvisionDateTenorPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionDateTenorPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProvisionDateTenorUnit gets UnderlyingProvisionDateTenorUnit, Tag 42155.
func (m NoUnderlyingProvisions) GetUnderlyingProvisionDateTenorUnit() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionDateTenorUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProvisionCalculationAgent gets UnderlyingProvisionCalculationAgent, Tag 42156.
func (m NoUnderlyingProvisions) GetUnderlyingProvisionCalculationAgent() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionCalculationAgentField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProvisionOptionSinglePartyBuyerSide gets UnderlyingProvisionOptionSinglePartyBuyerSide, Tag 42157.
func (m NoUnderlyingProvisions) GetUnderlyingProvisionOptionSinglePartyBuyerSide() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionOptionSinglePartyBuyerSideField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProvisionOptionSinglePartySellerSide gets UnderlyingProvisionOptionSinglePartySellerSide, Tag 42158.
func (m NoUnderlyingProvisions) GetUnderlyingProvisionOptionSinglePartySellerSide() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionOptionSinglePartySellerSideField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProvisionCashSettlValueTime gets UnderlyingProvisionCashSettlValueTime, Tag 42104.
func (m NoUnderlyingProvisions) GetUnderlyingProvisionCashSettlValueTime() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionCashSettlValueTimeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProvisionCashSettlValueTimeBusinessCenter gets UnderlyingProvisionCashSettlValueTimeBusinessCenter, Tag 42105.
func (m NoUnderlyingProvisions) GetUnderlyingProvisionCashSettlValueTimeBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionCashSettlValueTimeBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProvisionCashSettlValueDateBusinessDayConvention gets UnderlyingProvisionCashSettlValueDateBusinessDayConvention, Tag 42106.
func (m NoUnderlyingProvisions) GetUnderlyingProvisionCashSettlValueDateBusinessDayConvention() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionCashSettlValueDateBusinessDayConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUnderlyingProvisionCashSettlValueDateBusinessCenters gets NoUnderlyingProvisionCashSettlValueDateBusinessCenters, Tag 42182.
func (m NoUnderlyingProvisions) GetNoUnderlyingProvisionCashSettlValueDateBusinessCenters() (NoUnderlyingProvisionCashSettlValueDateBusinessCentersRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingProvisionCashSettlValueDateBusinessCentersRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetUnderlyingProvisionCashSettlValueDateRelativeTo gets UnderlyingProvisionCashSettlValueDateRelativeTo, Tag 42107.
func (m NoUnderlyingProvisions) GetUnderlyingProvisionCashSettlValueDateRelativeTo() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionCashSettlValueDateRelativeToField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProvisionCashSettlValueDateOffsetPeriod gets UnderlyingProvisionCashSettlValueDateOffsetPeriod, Tag 42108.
func (m NoUnderlyingProvisions) GetUnderlyingProvisionCashSettlValueDateOffsetPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionCashSettlValueDateOffsetPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProvisionCashSettlValueDateOffsetUnit gets UnderlyingProvisionCashSettlValueDateOffsetUnit, Tag 42109.
func (m NoUnderlyingProvisions) GetUnderlyingProvisionCashSettlValueDateOffsetUnit() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionCashSettlValueDateOffsetUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProvisionCashSettlValueDateOffsetDayType gets UnderlyingProvisionCashSettlValueDateOffsetDayType, Tag 42110.
func (m NoUnderlyingProvisions) GetUnderlyingProvisionCashSettlValueDateOffsetDayType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionCashSettlValueDateOffsetDayTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProvisionCashSettlValueDateAdjusted gets UnderlyingProvisionCashSettlValueDateAdjusted, Tag 42111.
func (m NoUnderlyingProvisions) GetUnderlyingProvisionCashSettlValueDateAdjusted() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionCashSettlValueDateAdjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProvisionOptionExerciseBusinessDayConvention gets UnderlyingProvisionOptionExerciseBusinessDayConvention, Tag 42115.
func (m NoUnderlyingProvisions) GetUnderlyingProvisionOptionExerciseBusinessDayConvention() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionOptionExerciseBusinessDayConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUnderlyingProvisionOptionExerciseBusinessCenters gets NoUnderlyingProvisionOptionExerciseBusinessCenters, Tag 42184.
func (m NoUnderlyingProvisions) GetNoUnderlyingProvisionOptionExerciseBusinessCenters() (NoUnderlyingProvisionOptionExerciseBusinessCentersRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingProvisionOptionExerciseBusinessCentersRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetNoUnderlyingProvisionOptionExerciseFixedDates gets NoUnderlyingProvisionOptionExerciseFixedDates, Tag 42112.
func (m NoUnderlyingProvisions) GetNoUnderlyingProvisionOptionExerciseFixedDates() (NoUnderlyingProvisionOptionExerciseFixedDatesRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingProvisionOptionExerciseFixedDatesRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetUnderlyingProvisionOptionExerciseEarliestDateOffsetPeriod gets UnderlyingProvisionOptionExerciseEarliestDateOffsetPeriod, Tag 42116.
func (m NoUnderlyingProvisions) GetUnderlyingProvisionOptionExerciseEarliestDateOffsetPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionOptionExerciseEarliestDateOffsetPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProvisionOptionExerciseEarliestDateOffsetUnit gets UnderlyingProvisionOptionExerciseEarliestDateOffsetUnit, Tag 42117.
func (m NoUnderlyingProvisions) GetUnderlyingProvisionOptionExerciseEarliestDateOffsetUnit() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionOptionExerciseEarliestDateOffsetUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProvisionOptionExerciseFrequencyPeriod gets UnderlyingProvisionOptionExerciseFrequencyPeriod, Tag 42118.
func (m NoUnderlyingProvisions) GetUnderlyingProvisionOptionExerciseFrequencyPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionOptionExerciseFrequencyPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProvisionOptionExerciseFrequencyUnit gets UnderlyingProvisionOptionExerciseFrequencyUnit, Tag 42119.
func (m NoUnderlyingProvisions) GetUnderlyingProvisionOptionExerciseFrequencyUnit() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionOptionExerciseFrequencyUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProvisionOptionExerciseStartDateUnadjusted gets UnderlyingProvisionOptionExerciseStartDateUnadjusted, Tag 42120.
func (m NoUnderlyingProvisions) GetUnderlyingProvisionOptionExerciseStartDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionOptionExerciseStartDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProvisionOptionExerciseStartDateRelativeTo gets UnderlyingProvisionOptionExerciseStartDateRelativeTo, Tag 42121.
func (m NoUnderlyingProvisions) GetUnderlyingProvisionOptionExerciseStartDateRelativeTo() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionOptionExerciseStartDateRelativeToField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProvisionOptionExerciseStartDateOffsetPeriod gets UnderlyingProvisionOptionExerciseStartDateOffsetPeriod, Tag 42122.
func (m NoUnderlyingProvisions) GetUnderlyingProvisionOptionExerciseStartDateOffsetPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionOptionExerciseStartDateOffsetPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProvisionOptionExerciseStartDateOffsetUnit gets UnderlyingProvisionOptionExerciseStartDateOffsetUnit, Tag 42123.
func (m NoUnderlyingProvisions) GetUnderlyingProvisionOptionExerciseStartDateOffsetUnit() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionOptionExerciseStartDateOffsetUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProvisionOptionExerciseStartDateOffsetDayType gets UnderlyingProvisionOptionExerciseStartDateOffsetDayType, Tag 42124.
func (m NoUnderlyingProvisions) GetUnderlyingProvisionOptionExerciseStartDateOffsetDayType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionOptionExerciseStartDateOffsetDayTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProvisionOptionExerciseStartDateAdjusted gets UnderlyingProvisionOptionExerciseStartDateAdjusted, Tag 42125.
func (m NoUnderlyingProvisions) GetUnderlyingProvisionOptionExerciseStartDateAdjusted() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionOptionExerciseStartDateAdjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProvisionOptionExercisePeriodSkip gets UnderlyingProvisionOptionExercisePeriodSkip, Tag 42126.
func (m NoUnderlyingProvisions) GetUnderlyingProvisionOptionExercisePeriodSkip() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionOptionExercisePeriodSkipField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProvisionOptionExerciseBoundsFirstDateUnadjusted gets UnderlyingProvisionOptionExerciseBoundsFirstDateUnadjusted, Tag 42127.
func (m NoUnderlyingProvisions) GetUnderlyingProvisionOptionExerciseBoundsFirstDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionOptionExerciseBoundsFirstDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProvisionOptionExerciseBoundsLastDateUnadjusted gets UnderlyingProvisionOptionExerciseBoundsLastDateUnadjusted, Tag 42128.
func (m NoUnderlyingProvisions) GetUnderlyingProvisionOptionExerciseBoundsLastDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionOptionExerciseBoundsLastDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProvisionOptionExerciseEarliestTime gets UnderlyingProvisionOptionExerciseEarliestTime, Tag 42129.
func (m NoUnderlyingProvisions) GetUnderlyingProvisionOptionExerciseEarliestTime() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionOptionExerciseEarliestTimeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProvisionOptionExerciseEarliestTimeBusinessCenter gets UnderlyingProvisionOptionExerciseEarliestTimeBusinessCenter, Tag 42130.
func (m NoUnderlyingProvisions) GetUnderlyingProvisionOptionExerciseEarliestTimeBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionOptionExerciseEarliestTimeBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProvisionOptionExerciseLatestTime gets UnderlyingProvisionOptionExerciseLatestTime, Tag 42131.
func (m NoUnderlyingProvisions) GetUnderlyingProvisionOptionExerciseLatestTime() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionOptionExerciseLatestTimeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProvisionOptionExerciseLatestTimeBusinessCenter gets UnderlyingProvisionOptionExerciseLatestTimeBusinessCenter, Tag 42132.
func (m NoUnderlyingProvisions) GetUnderlyingProvisionOptionExerciseLatestTimeBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionOptionExerciseLatestTimeBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProvisionOptionExpirationDateUnadjusted gets UnderlyingProvisionOptionExpirationDateUnadjusted, Tag 42133.
func (m NoUnderlyingProvisions) GetUnderlyingProvisionOptionExpirationDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionOptionExpirationDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProvisionOptionExpirationDateBusinessDayConvention gets UnderlyingProvisionOptionExpirationDateBusinessDayConvention, Tag 42134.
func (m NoUnderlyingProvisions) GetUnderlyingProvisionOptionExpirationDateBusinessDayConvention() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionOptionExpirationDateBusinessDayConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUnderlyingProvisionOptionExpirationDateBusinessCenters gets NoUnderlyingProvisionOptionExpirationDateBusinessCenters, Tag 42186.
func (m NoUnderlyingProvisions) GetNoUnderlyingProvisionOptionExpirationDateBusinessCenters() (NoUnderlyingProvisionOptionExpirationDateBusinessCentersRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingProvisionOptionExpirationDateBusinessCentersRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetUnderlyingProvisionOptionExpirationDateRelativeTo gets UnderlyingProvisionOptionExpirationDateRelativeTo, Tag 42135.
func (m NoUnderlyingProvisions) GetUnderlyingProvisionOptionExpirationDateRelativeTo() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionOptionExpirationDateRelativeToField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProvisionOptionExpirationDateOffsetPeriod gets UnderlyingProvisionOptionExpirationDateOffsetPeriod, Tag 42136.
func (m NoUnderlyingProvisions) GetUnderlyingProvisionOptionExpirationDateOffsetPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionOptionExpirationDateOffsetPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProvisionOptionExpirationDateOffsetUnit gets UnderlyingProvisionOptionExpirationDateOffsetUnit, Tag 42137.
func (m NoUnderlyingProvisions) GetUnderlyingProvisionOptionExpirationDateOffsetUnit() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionOptionExpirationDateOffsetUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProvisionOptionExpirationDateOffsetDayType gets UnderlyingProvisionOptionExpirationDateOffsetDayType, Tag 42138.
func (m NoUnderlyingProvisions) GetUnderlyingProvisionOptionExpirationDateOffsetDayType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionOptionExpirationDateOffsetDayTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProvisionOptionExpirationDateAdjusted gets UnderlyingProvisionOptionExpirationDateAdjusted, Tag 42139.
func (m NoUnderlyingProvisions) GetUnderlyingProvisionOptionExpirationDateAdjusted() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionOptionExpirationDateAdjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProvisionOptionExpirationTime gets UnderlyingProvisionOptionExpirationTime, Tag 42140.
func (m NoUnderlyingProvisions) GetUnderlyingProvisionOptionExpirationTime() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionOptionExpirationTimeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProvisionOptionExpirationTimeBusinessCenter gets UnderlyingProvisionOptionExpirationTimeBusinessCenter, Tag 42141.
func (m NoUnderlyingProvisions) GetUnderlyingProvisionOptionExpirationTimeBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionOptionExpirationTimeBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProvisionOptionRelevantUnderlyingDateUnadjusted gets UnderlyingProvisionOptionRelevantUnderlyingDateUnadjusted, Tag 42142.
func (m NoUnderlyingProvisions) GetUnderlyingProvisionOptionRelevantUnderlyingDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionOptionRelevantUnderlyingDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProvisionOptionRelevantUnderlyingDateBusinessDayConvention gets UnderlyingProvisionOptionRelevantUnderlyingDateBusinessDayConvention, Tag 42143.
func (m NoUnderlyingProvisions) GetUnderlyingProvisionOptionRelevantUnderlyingDateBusinessDayConvention() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionOptionRelevantUnderlyingDateBusinessDayConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUnderlyingProvisionOptionRelevantUnderlyingDateBusinessCenters gets NoUnderlyingProvisionOptionRelevantUnderlyingDateBusinessCenters, Tag 42188.
func (m NoUnderlyingProvisions) GetNoUnderlyingProvisionOptionRelevantUnderlyingDateBusinessCenters() (NoUnderlyingProvisionOptionRelevantUnderlyingDateBusinessCentersRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingProvisionOptionRelevantUnderlyingDateBusinessCentersRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetUnderlyingProvisionOptionRelevantUnderlyingDateRelativeTo gets UnderlyingProvisionOptionRelevantUnderlyingDateRelativeTo, Tag 42144.
func (m NoUnderlyingProvisions) GetUnderlyingProvisionOptionRelevantUnderlyingDateRelativeTo() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionOptionRelevantUnderlyingDateRelativeToField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProvisionOptionRelevantUnderlyingDateOffsetPeriod gets UnderlyingProvisionOptionRelevantUnderlyingDateOffsetPeriod, Tag 42145.
func (m NoUnderlyingProvisions) GetUnderlyingProvisionOptionRelevantUnderlyingDateOffsetPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionOptionRelevantUnderlyingDateOffsetPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProvisionOptionRelevantUnderlyingDateOffsetUnit gets UnderlyingProvisionOptionRelevantUnderlyingDateOffsetUnit, Tag 42146.
func (m NoUnderlyingProvisions) GetUnderlyingProvisionOptionRelevantUnderlyingDateOffsetUnit() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionOptionRelevantUnderlyingDateOffsetUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProvisionOptionRelevantUnderlyingDateOffsetDayType gets UnderlyingProvisionOptionRelevantUnderlyingDateOffsetDayType, Tag 42147.
func (m NoUnderlyingProvisions) GetUnderlyingProvisionOptionRelevantUnderlyingDateOffsetDayType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionOptionRelevantUnderlyingDateOffsetDayTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProvisionOptionRelevantUnderlyingDateAdjusted gets UnderlyingProvisionOptionRelevantUnderlyingDateAdjusted, Tag 42148.
func (m NoUnderlyingProvisions) GetUnderlyingProvisionOptionRelevantUnderlyingDateAdjusted() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionOptionRelevantUnderlyingDateAdjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProvisionOptionExerciseStyle gets UnderlyingProvisionOptionExerciseStyle, Tag 42159.
func (m NoUnderlyingProvisions) GetUnderlyingProvisionOptionExerciseStyle() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionOptionExerciseStyleField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProvisionOptionExerciseMultipleNotional gets UnderlyingProvisionOptionExerciseMultipleNotional, Tag 42160.
func (m NoUnderlyingProvisions) GetUnderlyingProvisionOptionExerciseMultipleNotional() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionOptionExerciseMultipleNotionalField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProvisionOptionExerciseMinimumNotional gets UnderlyingProvisionOptionExerciseMinimumNotional, Tag 42161.
func (m NoUnderlyingProvisions) GetUnderlyingProvisionOptionExerciseMinimumNotional() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionOptionExerciseMinimumNotionalField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProvisionOptionExerciseMaximumNotional gets UnderlyingProvisionOptionExerciseMaximumNotional, Tag 42162.
func (m NoUnderlyingProvisions) GetUnderlyingProvisionOptionExerciseMaximumNotional() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionOptionExerciseMaximumNotionalField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProvisionOptionMinimumNumber gets UnderlyingProvisionOptionMinimumNumber, Tag 42163.
func (m NoUnderlyingProvisions) GetUnderlyingProvisionOptionMinimumNumber() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionOptionMinimumNumberField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProvisionOptionMaximumNumber gets UnderlyingProvisionOptionMaximumNumber, Tag 42164.
func (m NoUnderlyingProvisions) GetUnderlyingProvisionOptionMaximumNumber() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionOptionMaximumNumberField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProvisionOptionExerciseConfirmation gets UnderlyingProvisionOptionExerciseConfirmation, Tag 42165.
func (m NoUnderlyingProvisions) GetUnderlyingProvisionOptionExerciseConfirmation() (v bool, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionOptionExerciseConfirmationField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProvisionCashSettlPaymentDateBusinessDayConvention gets UnderlyingProvisionCashSettlPaymentDateBusinessDayConvention, Tag 42092.
func (m NoUnderlyingProvisions) GetUnderlyingProvisionCashSettlPaymentDateBusinessDayConvention() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionCashSettlPaymentDateBusinessDayConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUnderlyingProvisionCashSettlPaymentDateBusinessCenters gets NoUnderlyingProvisionCashSettlPaymentDateBusinessCenters, Tag 42180.
func (m NoUnderlyingProvisions) GetNoUnderlyingProvisionCashSettlPaymentDateBusinessCenters() (NoUnderlyingProvisionCashSettlPaymentDateBusinessCentersRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingProvisionCashSettlPaymentDateBusinessCentersRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetUnderlyingProvisionCashSettlPaymentDateRelativeTo gets UnderlyingProvisionCashSettlPaymentDateRelativeTo, Tag 42093.
func (m NoUnderlyingProvisions) GetUnderlyingProvisionCashSettlPaymentDateRelativeTo() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionCashSettlPaymentDateRelativeToField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProvisionCashSettlPaymentDateOffsetPeriod gets UnderlyingProvisionCashSettlPaymentDateOffsetPeriod, Tag 42094.
func (m NoUnderlyingProvisions) GetUnderlyingProvisionCashSettlPaymentDateOffsetPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionCashSettlPaymentDateOffsetPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProvisionCashSettlPaymentDateOffsetUnit gets UnderlyingProvisionCashSettlPaymentDateOffsetUnit, Tag 42095.
func (m NoUnderlyingProvisions) GetUnderlyingProvisionCashSettlPaymentDateOffsetUnit() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionCashSettlPaymentDateOffsetUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProvisionCashSettlPaymentDateOffsetDayType gets UnderlyingProvisionCashSettlPaymentDateOffsetDayType, Tag 42096.
func (m NoUnderlyingProvisions) GetUnderlyingProvisionCashSettlPaymentDateOffsetDayType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionCashSettlPaymentDateOffsetDayTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProvisionCashSettlPaymentDateRangeFirst gets UnderlyingProvisionCashSettlPaymentDateRangeFirst, Tag 42097.
func (m NoUnderlyingProvisions) GetUnderlyingProvisionCashSettlPaymentDateRangeFirst() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionCashSettlPaymentDateRangeFirstField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProvisionCashSettlPaymentDateRangeLast gets UnderlyingProvisionCashSettlPaymentDateRangeLast, Tag 42098.
func (m NoUnderlyingProvisions) GetUnderlyingProvisionCashSettlPaymentDateRangeLast() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionCashSettlPaymentDateRangeLastField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUnderlyingProvisionCashSettlPaymentDates gets NoUnderlyingProvisionCashSettlPaymentDates, Tag 42099.
func (m NoUnderlyingProvisions) GetNoUnderlyingProvisionCashSettlPaymentDates() (NoUnderlyingProvisionCashSettlPaymentDatesRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingProvisionCashSettlPaymentDatesRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetUnderlyingProvisionCashSettlMethod gets UnderlyingProvisionCashSettlMethod, Tag 42166.
func (m NoUnderlyingProvisions) GetUnderlyingProvisionCashSettlMethod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionCashSettlMethodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProvisionCashSettlCurrency gets UnderlyingProvisionCashSettlCurrency, Tag 42167.
func (m NoUnderlyingProvisions) GetUnderlyingProvisionCashSettlCurrency() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionCashSettlCurrencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProvisionCashSettlCurrency2 gets UnderlyingProvisionCashSettlCurrency2, Tag 42168.
func (m NoUnderlyingProvisions) GetUnderlyingProvisionCashSettlCurrency2() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionCashSettlCurrency2Field
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProvisionCashSettlQuoteType gets UnderlyingProvisionCashSettlQuoteType, Tag 42169.
func (m NoUnderlyingProvisions) GetUnderlyingProvisionCashSettlQuoteType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionCashSettlQuoteTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProvisionCashSettlQuoteSource gets UnderlyingProvisionCashSettlQuoteSource, Tag 42102.
func (m NoUnderlyingProvisions) GetUnderlyingProvisionCashSettlQuoteSource() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionCashSettlQuoteSourceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProvisionCashSettlQuoteReferencePage gets UnderlyingProvisionCashSettlQuoteReferencePage, Tag 42103.
func (m NoUnderlyingProvisions) GetUnderlyingProvisionCashSettlQuoteReferencePage() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionCashSettlQuoteReferencePageField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProvisionText gets UnderlyingProvisionText, Tag 42170.
func (m NoUnderlyingProvisions) GetUnderlyingProvisionText() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionTextField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetEncodedUnderlyingProvisionTextLen gets EncodedUnderlyingProvisionTextLen, Tag 42171.
func (m NoUnderlyingProvisions) GetEncodedUnderlyingProvisionTextLen() (v int, err quickfix.MessageRejectError) {
	var f field.EncodedUnderlyingProvisionTextLenField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetEncodedUnderlyingProvisionText gets EncodedUnderlyingProvisionText, Tag 42172.
func (m NoUnderlyingProvisions) GetEncodedUnderlyingProvisionText() (v string, err quickfix.MessageRejectError) {
	var f field.EncodedUnderlyingProvisionTextField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUnderlyingProvisionPartyIDs gets NoUnderlyingProvisionPartyIDs, Tag 42173.
func (m NoUnderlyingProvisions) GetNoUnderlyingProvisionPartyIDs() (NoUnderlyingProvisionPartyIDsRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingProvisionPartyIDsRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetUnderlyingProvisionBreakFeeElection gets UnderlyingProvisionBreakFeeElection, Tag 43002.
func (m NoUnderlyingProvisions) GetUnderlyingProvisionBreakFeeElection() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionBreakFeeElectionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProvisionBreakFeeRate gets UnderlyingProvisionBreakFeeRate, Tag 43003.
func (m NoUnderlyingProvisions) GetUnderlyingProvisionBreakFeeRate() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionBreakFeeRateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingProvisionType returns true if UnderlyingProvisionType is present, Tag 42150.
func (m NoUnderlyingProvisions) HasUnderlyingProvisionType() bool {
	return m.Has(tag.UnderlyingProvisionType)
}

// HasUnderlyingProvisionDateUnadjusted returns true if UnderlyingProvisionDateUnadjusted is present, Tag 42151.
func (m NoUnderlyingProvisions) HasUnderlyingProvisionDateUnadjusted() bool {
	return m.Has(tag.UnderlyingProvisionDateUnadjusted)
}

// HasUnderlyingProvisionDateBusinessDayConvention returns true if UnderlyingProvisionDateBusinessDayConvention is present, Tag 42152.
func (m NoUnderlyingProvisions) HasUnderlyingProvisionDateBusinessDayConvention() bool {
	return m.Has(tag.UnderlyingProvisionDateBusinessDayConvention)
}

// HasNoUnderlyingProvisionDateBusinessCenters returns true if NoUnderlyingProvisionDateBusinessCenters is present, Tag 42190.
func (m NoUnderlyingProvisions) HasNoUnderlyingProvisionDateBusinessCenters() bool {
	return m.Has(tag.NoUnderlyingProvisionDateBusinessCenters)
}

// HasUnderlyingProvisionDateAdjusted returns true if UnderlyingProvisionDateAdjusted is present, Tag 42153.
func (m NoUnderlyingProvisions) HasUnderlyingProvisionDateAdjusted() bool {
	return m.Has(tag.UnderlyingProvisionDateAdjusted)
}

// HasUnderlyingProvisionDateTenorPeriod returns true if UnderlyingProvisionDateTenorPeriod is present, Tag 42154.
func (m NoUnderlyingProvisions) HasUnderlyingProvisionDateTenorPeriod() bool {
	return m.Has(tag.UnderlyingProvisionDateTenorPeriod)
}

// HasUnderlyingProvisionDateTenorUnit returns true if UnderlyingProvisionDateTenorUnit is present, Tag 42155.
func (m NoUnderlyingProvisions) HasUnderlyingProvisionDateTenorUnit() bool {
	return m.Has(tag.UnderlyingProvisionDateTenorUnit)
}

// HasUnderlyingProvisionCalculationAgent returns true if UnderlyingProvisionCalculationAgent is present, Tag 42156.
func (m NoUnderlyingProvisions) HasUnderlyingProvisionCalculationAgent() bool {
	return m.Has(tag.UnderlyingProvisionCalculationAgent)
}

// HasUnderlyingProvisionOptionSinglePartyBuyerSide returns true if UnderlyingProvisionOptionSinglePartyBuyerSide is present, Tag 42157.
func (m NoUnderlyingProvisions) HasUnderlyingProvisionOptionSinglePartyBuyerSide() bool {
	return m.Has(tag.UnderlyingProvisionOptionSinglePartyBuyerSide)
}

// HasUnderlyingProvisionOptionSinglePartySellerSide returns true if UnderlyingProvisionOptionSinglePartySellerSide is present, Tag 42158.
func (m NoUnderlyingProvisions) HasUnderlyingProvisionOptionSinglePartySellerSide() bool {
	return m.Has(tag.UnderlyingProvisionOptionSinglePartySellerSide)
}

// HasUnderlyingProvisionCashSettlValueTime returns true if UnderlyingProvisionCashSettlValueTime is present, Tag 42104.
func (m NoUnderlyingProvisions) HasUnderlyingProvisionCashSettlValueTime() bool {
	return m.Has(tag.UnderlyingProvisionCashSettlValueTime)
}

// HasUnderlyingProvisionCashSettlValueTimeBusinessCenter returns true if UnderlyingProvisionCashSettlValueTimeBusinessCenter is present, Tag 42105.
func (m NoUnderlyingProvisions) HasUnderlyingProvisionCashSettlValueTimeBusinessCenter() bool {
	return m.Has(tag.UnderlyingProvisionCashSettlValueTimeBusinessCenter)
}

// HasUnderlyingProvisionCashSettlValueDateBusinessDayConvention returns true if UnderlyingProvisionCashSettlValueDateBusinessDayConvention is present, Tag 42106.
func (m NoUnderlyingProvisions) HasUnderlyingProvisionCashSettlValueDateBusinessDayConvention() bool {
	return m.Has(tag.UnderlyingProvisionCashSettlValueDateBusinessDayConvention)
}

// HasNoUnderlyingProvisionCashSettlValueDateBusinessCenters returns true if NoUnderlyingProvisionCashSettlValueDateBusinessCenters is present, Tag 42182.
func (m NoUnderlyingProvisions) HasNoUnderlyingProvisionCashSettlValueDateBusinessCenters() bool {
	return m.Has(tag.NoUnderlyingProvisionCashSettlValueDateBusinessCenters)
}

// HasUnderlyingProvisionCashSettlValueDateRelativeTo returns true if UnderlyingProvisionCashSettlValueDateRelativeTo is present, Tag 42107.
func (m NoUnderlyingProvisions) HasUnderlyingProvisionCashSettlValueDateRelativeTo() bool {
	return m.Has(tag.UnderlyingProvisionCashSettlValueDateRelativeTo)
}

// HasUnderlyingProvisionCashSettlValueDateOffsetPeriod returns true if UnderlyingProvisionCashSettlValueDateOffsetPeriod is present, Tag 42108.
func (m NoUnderlyingProvisions) HasUnderlyingProvisionCashSettlValueDateOffsetPeriod() bool {
	return m.Has(tag.UnderlyingProvisionCashSettlValueDateOffsetPeriod)
}

// HasUnderlyingProvisionCashSettlValueDateOffsetUnit returns true if UnderlyingProvisionCashSettlValueDateOffsetUnit is present, Tag 42109.
func (m NoUnderlyingProvisions) HasUnderlyingProvisionCashSettlValueDateOffsetUnit() bool {
	return m.Has(tag.UnderlyingProvisionCashSettlValueDateOffsetUnit)
}

// HasUnderlyingProvisionCashSettlValueDateOffsetDayType returns true if UnderlyingProvisionCashSettlValueDateOffsetDayType is present, Tag 42110.
func (m NoUnderlyingProvisions) HasUnderlyingProvisionCashSettlValueDateOffsetDayType() bool {
	return m.Has(tag.UnderlyingProvisionCashSettlValueDateOffsetDayType)
}

// HasUnderlyingProvisionCashSettlValueDateAdjusted returns true if UnderlyingProvisionCashSettlValueDateAdjusted is present, Tag 42111.
func (m NoUnderlyingProvisions) HasUnderlyingProvisionCashSettlValueDateAdjusted() bool {
	return m.Has(tag.UnderlyingProvisionCashSettlValueDateAdjusted)
}

// HasUnderlyingProvisionOptionExerciseBusinessDayConvention returns true if UnderlyingProvisionOptionExerciseBusinessDayConvention is present, Tag 42115.
func (m NoUnderlyingProvisions) HasUnderlyingProvisionOptionExerciseBusinessDayConvention() bool {
	return m.Has(tag.UnderlyingProvisionOptionExerciseBusinessDayConvention)
}

// HasNoUnderlyingProvisionOptionExerciseBusinessCenters returns true if NoUnderlyingProvisionOptionExerciseBusinessCenters is present, Tag 42184.
func (m NoUnderlyingProvisions) HasNoUnderlyingProvisionOptionExerciseBusinessCenters() bool {
	return m.Has(tag.NoUnderlyingProvisionOptionExerciseBusinessCenters)
}

// HasNoUnderlyingProvisionOptionExerciseFixedDates returns true if NoUnderlyingProvisionOptionExerciseFixedDates is present, Tag 42112.
func (m NoUnderlyingProvisions) HasNoUnderlyingProvisionOptionExerciseFixedDates() bool {
	return m.Has(tag.NoUnderlyingProvisionOptionExerciseFixedDates)
}

// HasUnderlyingProvisionOptionExerciseEarliestDateOffsetPeriod returns true if UnderlyingProvisionOptionExerciseEarliestDateOffsetPeriod is present, Tag 42116.
func (m NoUnderlyingProvisions) HasUnderlyingProvisionOptionExerciseEarliestDateOffsetPeriod() bool {
	return m.Has(tag.UnderlyingProvisionOptionExerciseEarliestDateOffsetPeriod)
}

// HasUnderlyingProvisionOptionExerciseEarliestDateOffsetUnit returns true if UnderlyingProvisionOptionExerciseEarliestDateOffsetUnit is present, Tag 42117.
func (m NoUnderlyingProvisions) HasUnderlyingProvisionOptionExerciseEarliestDateOffsetUnit() bool {
	return m.Has(tag.UnderlyingProvisionOptionExerciseEarliestDateOffsetUnit)
}

// HasUnderlyingProvisionOptionExerciseFrequencyPeriod returns true if UnderlyingProvisionOptionExerciseFrequencyPeriod is present, Tag 42118.
func (m NoUnderlyingProvisions) HasUnderlyingProvisionOptionExerciseFrequencyPeriod() bool {
	return m.Has(tag.UnderlyingProvisionOptionExerciseFrequencyPeriod)
}

// HasUnderlyingProvisionOptionExerciseFrequencyUnit returns true if UnderlyingProvisionOptionExerciseFrequencyUnit is present, Tag 42119.
func (m NoUnderlyingProvisions) HasUnderlyingProvisionOptionExerciseFrequencyUnit() bool {
	return m.Has(tag.UnderlyingProvisionOptionExerciseFrequencyUnit)
}

// HasUnderlyingProvisionOptionExerciseStartDateUnadjusted returns true if UnderlyingProvisionOptionExerciseStartDateUnadjusted is present, Tag 42120.
func (m NoUnderlyingProvisions) HasUnderlyingProvisionOptionExerciseStartDateUnadjusted() bool {
	return m.Has(tag.UnderlyingProvisionOptionExerciseStartDateUnadjusted)
}

// HasUnderlyingProvisionOptionExerciseStartDateRelativeTo returns true if UnderlyingProvisionOptionExerciseStartDateRelativeTo is present, Tag 42121.
func (m NoUnderlyingProvisions) HasUnderlyingProvisionOptionExerciseStartDateRelativeTo() bool {
	return m.Has(tag.UnderlyingProvisionOptionExerciseStartDateRelativeTo)
}

// HasUnderlyingProvisionOptionExerciseStartDateOffsetPeriod returns true if UnderlyingProvisionOptionExerciseStartDateOffsetPeriod is present, Tag 42122.
func (m NoUnderlyingProvisions) HasUnderlyingProvisionOptionExerciseStartDateOffsetPeriod() bool {
	return m.Has(tag.UnderlyingProvisionOptionExerciseStartDateOffsetPeriod)
}

// HasUnderlyingProvisionOptionExerciseStartDateOffsetUnit returns true if UnderlyingProvisionOptionExerciseStartDateOffsetUnit is present, Tag 42123.
func (m NoUnderlyingProvisions) HasUnderlyingProvisionOptionExerciseStartDateOffsetUnit() bool {
	return m.Has(tag.UnderlyingProvisionOptionExerciseStartDateOffsetUnit)
}

// HasUnderlyingProvisionOptionExerciseStartDateOffsetDayType returns true if UnderlyingProvisionOptionExerciseStartDateOffsetDayType is present, Tag 42124.
func (m NoUnderlyingProvisions) HasUnderlyingProvisionOptionExerciseStartDateOffsetDayType() bool {
	return m.Has(tag.UnderlyingProvisionOptionExerciseStartDateOffsetDayType)
}

// HasUnderlyingProvisionOptionExerciseStartDateAdjusted returns true if UnderlyingProvisionOptionExerciseStartDateAdjusted is present, Tag 42125.
func (m NoUnderlyingProvisions) HasUnderlyingProvisionOptionExerciseStartDateAdjusted() bool {
	return m.Has(tag.UnderlyingProvisionOptionExerciseStartDateAdjusted)
}

// HasUnderlyingProvisionOptionExercisePeriodSkip returns true if UnderlyingProvisionOptionExercisePeriodSkip is present, Tag 42126.
func (m NoUnderlyingProvisions) HasUnderlyingProvisionOptionExercisePeriodSkip() bool {
	return m.Has(tag.UnderlyingProvisionOptionExercisePeriodSkip)
}

// HasUnderlyingProvisionOptionExerciseBoundsFirstDateUnadjusted returns true if UnderlyingProvisionOptionExerciseBoundsFirstDateUnadjusted is present, Tag 42127.
func (m NoUnderlyingProvisions) HasUnderlyingProvisionOptionExerciseBoundsFirstDateUnadjusted() bool {
	return m.Has(tag.UnderlyingProvisionOptionExerciseBoundsFirstDateUnadjusted)
}

// HasUnderlyingProvisionOptionExerciseBoundsLastDateUnadjusted returns true if UnderlyingProvisionOptionExerciseBoundsLastDateUnadjusted is present, Tag 42128.
func (m NoUnderlyingProvisions) HasUnderlyingProvisionOptionExerciseBoundsLastDateUnadjusted() bool {
	return m.Has(tag.UnderlyingProvisionOptionExerciseBoundsLastDateUnadjusted)
}

// HasUnderlyingProvisionOptionExerciseEarliestTime returns true if UnderlyingProvisionOptionExerciseEarliestTime is present, Tag 42129.
func (m NoUnderlyingProvisions) HasUnderlyingProvisionOptionExerciseEarliestTime() bool {
	return m.Has(tag.UnderlyingProvisionOptionExerciseEarliestTime)
}

// HasUnderlyingProvisionOptionExerciseEarliestTimeBusinessCenter returns true if UnderlyingProvisionOptionExerciseEarliestTimeBusinessCenter is present, Tag 42130.
func (m NoUnderlyingProvisions) HasUnderlyingProvisionOptionExerciseEarliestTimeBusinessCenter() bool {
	return m.Has(tag.UnderlyingProvisionOptionExerciseEarliestTimeBusinessCenter)
}

// HasUnderlyingProvisionOptionExerciseLatestTime returns true if UnderlyingProvisionOptionExerciseLatestTime is present, Tag 42131.
func (m NoUnderlyingProvisions) HasUnderlyingProvisionOptionExerciseLatestTime() bool {
	return m.Has(tag.UnderlyingProvisionOptionExerciseLatestTime)
}

// HasUnderlyingProvisionOptionExerciseLatestTimeBusinessCenter returns true if UnderlyingProvisionOptionExerciseLatestTimeBusinessCenter is present, Tag 42132.
func (m NoUnderlyingProvisions) HasUnderlyingProvisionOptionExerciseLatestTimeBusinessCenter() bool {
	return m.Has(tag.UnderlyingProvisionOptionExerciseLatestTimeBusinessCenter)
}

// HasUnderlyingProvisionOptionExpirationDateUnadjusted returns true if UnderlyingProvisionOptionExpirationDateUnadjusted is present, Tag 42133.
func (m NoUnderlyingProvisions) HasUnderlyingProvisionOptionExpirationDateUnadjusted() bool {
	return m.Has(tag.UnderlyingProvisionOptionExpirationDateUnadjusted)
}

// HasUnderlyingProvisionOptionExpirationDateBusinessDayConvention returns true if UnderlyingProvisionOptionExpirationDateBusinessDayConvention is present, Tag 42134.
func (m NoUnderlyingProvisions) HasUnderlyingProvisionOptionExpirationDateBusinessDayConvention() bool {
	return m.Has(tag.UnderlyingProvisionOptionExpirationDateBusinessDayConvention)
}

// HasNoUnderlyingProvisionOptionExpirationDateBusinessCenters returns true if NoUnderlyingProvisionOptionExpirationDateBusinessCenters is present, Tag 42186.
func (m NoUnderlyingProvisions) HasNoUnderlyingProvisionOptionExpirationDateBusinessCenters() bool {
	return m.Has(tag.NoUnderlyingProvisionOptionExpirationDateBusinessCenters)
}

// HasUnderlyingProvisionOptionExpirationDateRelativeTo returns true if UnderlyingProvisionOptionExpirationDateRelativeTo is present, Tag 42135.
func (m NoUnderlyingProvisions) HasUnderlyingProvisionOptionExpirationDateRelativeTo() bool {
	return m.Has(tag.UnderlyingProvisionOptionExpirationDateRelativeTo)
}

// HasUnderlyingProvisionOptionExpirationDateOffsetPeriod returns true if UnderlyingProvisionOptionExpirationDateOffsetPeriod is present, Tag 42136.
func (m NoUnderlyingProvisions) HasUnderlyingProvisionOptionExpirationDateOffsetPeriod() bool {
	return m.Has(tag.UnderlyingProvisionOptionExpirationDateOffsetPeriod)
}

// HasUnderlyingProvisionOptionExpirationDateOffsetUnit returns true if UnderlyingProvisionOptionExpirationDateOffsetUnit is present, Tag 42137.
func (m NoUnderlyingProvisions) HasUnderlyingProvisionOptionExpirationDateOffsetUnit() bool {
	return m.Has(tag.UnderlyingProvisionOptionExpirationDateOffsetUnit)
}

// HasUnderlyingProvisionOptionExpirationDateOffsetDayType returns true if UnderlyingProvisionOptionExpirationDateOffsetDayType is present, Tag 42138.
func (m NoUnderlyingProvisions) HasUnderlyingProvisionOptionExpirationDateOffsetDayType() bool {
	return m.Has(tag.UnderlyingProvisionOptionExpirationDateOffsetDayType)
}

// HasUnderlyingProvisionOptionExpirationDateAdjusted returns true if UnderlyingProvisionOptionExpirationDateAdjusted is present, Tag 42139.
func (m NoUnderlyingProvisions) HasUnderlyingProvisionOptionExpirationDateAdjusted() bool {
	return m.Has(tag.UnderlyingProvisionOptionExpirationDateAdjusted)
}

// HasUnderlyingProvisionOptionExpirationTime returns true if UnderlyingProvisionOptionExpirationTime is present, Tag 42140.
func (m NoUnderlyingProvisions) HasUnderlyingProvisionOptionExpirationTime() bool {
	return m.Has(tag.UnderlyingProvisionOptionExpirationTime)
}

// HasUnderlyingProvisionOptionExpirationTimeBusinessCenter returns true if UnderlyingProvisionOptionExpirationTimeBusinessCenter is present, Tag 42141.
func (m NoUnderlyingProvisions) HasUnderlyingProvisionOptionExpirationTimeBusinessCenter() bool {
	return m.Has(tag.UnderlyingProvisionOptionExpirationTimeBusinessCenter)
}

// HasUnderlyingProvisionOptionRelevantUnderlyingDateUnadjusted returns true if UnderlyingProvisionOptionRelevantUnderlyingDateUnadjusted is present, Tag 42142.
func (m NoUnderlyingProvisions) HasUnderlyingProvisionOptionRelevantUnderlyingDateUnadjusted() bool {
	return m.Has(tag.UnderlyingProvisionOptionRelevantUnderlyingDateUnadjusted)
}

// HasUnderlyingProvisionOptionRelevantUnderlyingDateBusinessDayConvention returns true if UnderlyingProvisionOptionRelevantUnderlyingDateBusinessDayConvention is present, Tag 42143.
func (m NoUnderlyingProvisions) HasUnderlyingProvisionOptionRelevantUnderlyingDateBusinessDayConvention() bool {
	return m.Has(tag.UnderlyingProvisionOptionRelevantUnderlyingDateBusinessDayConvention)
}

// HasNoUnderlyingProvisionOptionRelevantUnderlyingDateBusinessCenters returns true if NoUnderlyingProvisionOptionRelevantUnderlyingDateBusinessCenters is present, Tag 42188.
func (m NoUnderlyingProvisions) HasNoUnderlyingProvisionOptionRelevantUnderlyingDateBusinessCenters() bool {
	return m.Has(tag.NoUnderlyingProvisionOptionRelevantUnderlyingDateBusinessCenters)
}

// HasUnderlyingProvisionOptionRelevantUnderlyingDateRelativeTo returns true if UnderlyingProvisionOptionRelevantUnderlyingDateRelativeTo is present, Tag 42144.
func (m NoUnderlyingProvisions) HasUnderlyingProvisionOptionRelevantUnderlyingDateRelativeTo() bool {
	return m.Has(tag.UnderlyingProvisionOptionRelevantUnderlyingDateRelativeTo)
}

// HasUnderlyingProvisionOptionRelevantUnderlyingDateOffsetPeriod returns true if UnderlyingProvisionOptionRelevantUnderlyingDateOffsetPeriod is present, Tag 42145.
func (m NoUnderlyingProvisions) HasUnderlyingProvisionOptionRelevantUnderlyingDateOffsetPeriod() bool {
	return m.Has(tag.UnderlyingProvisionOptionRelevantUnderlyingDateOffsetPeriod)
}

// HasUnderlyingProvisionOptionRelevantUnderlyingDateOffsetUnit returns true if UnderlyingProvisionOptionRelevantUnderlyingDateOffsetUnit is present, Tag 42146.
func (m NoUnderlyingProvisions) HasUnderlyingProvisionOptionRelevantUnderlyingDateOffsetUnit() bool {
	return m.Has(tag.UnderlyingProvisionOptionRelevantUnderlyingDateOffsetUnit)
}

// HasUnderlyingProvisionOptionRelevantUnderlyingDateOffsetDayType returns true if UnderlyingProvisionOptionRelevantUnderlyingDateOffsetDayType is present, Tag 42147.
func (m NoUnderlyingProvisions) HasUnderlyingProvisionOptionRelevantUnderlyingDateOffsetDayType() bool {
	return m.Has(tag.UnderlyingProvisionOptionRelevantUnderlyingDateOffsetDayType)
}

// HasUnderlyingProvisionOptionRelevantUnderlyingDateAdjusted returns true if UnderlyingProvisionOptionRelevantUnderlyingDateAdjusted is present, Tag 42148.
func (m NoUnderlyingProvisions) HasUnderlyingProvisionOptionRelevantUnderlyingDateAdjusted() bool {
	return m.Has(tag.UnderlyingProvisionOptionRelevantUnderlyingDateAdjusted)
}

// HasUnderlyingProvisionOptionExerciseStyle returns true if UnderlyingProvisionOptionExerciseStyle is present, Tag 42159.
func (m NoUnderlyingProvisions) HasUnderlyingProvisionOptionExerciseStyle() bool {
	return m.Has(tag.UnderlyingProvisionOptionExerciseStyle)
}

// HasUnderlyingProvisionOptionExerciseMultipleNotional returns true if UnderlyingProvisionOptionExerciseMultipleNotional is present, Tag 42160.
func (m NoUnderlyingProvisions) HasUnderlyingProvisionOptionExerciseMultipleNotional() bool {
	return m.Has(tag.UnderlyingProvisionOptionExerciseMultipleNotional)
}

// HasUnderlyingProvisionOptionExerciseMinimumNotional returns true if UnderlyingProvisionOptionExerciseMinimumNotional is present, Tag 42161.
func (m NoUnderlyingProvisions) HasUnderlyingProvisionOptionExerciseMinimumNotional() bool {
	return m.Has(tag.UnderlyingProvisionOptionExerciseMinimumNotional)
}

// HasUnderlyingProvisionOptionExerciseMaximumNotional returns true if UnderlyingProvisionOptionExerciseMaximumNotional is present, Tag 42162.
func (m NoUnderlyingProvisions) HasUnderlyingProvisionOptionExerciseMaximumNotional() bool {
	return m.Has(tag.UnderlyingProvisionOptionExerciseMaximumNotional)
}

// HasUnderlyingProvisionOptionMinimumNumber returns true if UnderlyingProvisionOptionMinimumNumber is present, Tag 42163.
func (m NoUnderlyingProvisions) HasUnderlyingProvisionOptionMinimumNumber() bool {
	return m.Has(tag.UnderlyingProvisionOptionMinimumNumber)
}

// HasUnderlyingProvisionOptionMaximumNumber returns true if UnderlyingProvisionOptionMaximumNumber is present, Tag 42164.
func (m NoUnderlyingProvisions) HasUnderlyingProvisionOptionMaximumNumber() bool {
	return m.Has(tag.UnderlyingProvisionOptionMaximumNumber)
}

// HasUnderlyingProvisionOptionExerciseConfirmation returns true if UnderlyingProvisionOptionExerciseConfirmation is present, Tag 42165.
func (m NoUnderlyingProvisions) HasUnderlyingProvisionOptionExerciseConfirmation() bool {
	return m.Has(tag.UnderlyingProvisionOptionExerciseConfirmation)
}

// HasUnderlyingProvisionCashSettlPaymentDateBusinessDayConvention returns true if UnderlyingProvisionCashSettlPaymentDateBusinessDayConvention is present, Tag 42092.
func (m NoUnderlyingProvisions) HasUnderlyingProvisionCashSettlPaymentDateBusinessDayConvention() bool {
	return m.Has(tag.UnderlyingProvisionCashSettlPaymentDateBusinessDayConvention)
}

// HasNoUnderlyingProvisionCashSettlPaymentDateBusinessCenters returns true if NoUnderlyingProvisionCashSettlPaymentDateBusinessCenters is present, Tag 42180.
func (m NoUnderlyingProvisions) HasNoUnderlyingProvisionCashSettlPaymentDateBusinessCenters() bool {
	return m.Has(tag.NoUnderlyingProvisionCashSettlPaymentDateBusinessCenters)
}

// HasUnderlyingProvisionCashSettlPaymentDateRelativeTo returns true if UnderlyingProvisionCashSettlPaymentDateRelativeTo is present, Tag 42093.
func (m NoUnderlyingProvisions) HasUnderlyingProvisionCashSettlPaymentDateRelativeTo() bool {
	return m.Has(tag.UnderlyingProvisionCashSettlPaymentDateRelativeTo)
}

// HasUnderlyingProvisionCashSettlPaymentDateOffsetPeriod returns true if UnderlyingProvisionCashSettlPaymentDateOffsetPeriod is present, Tag 42094.
func (m NoUnderlyingProvisions) HasUnderlyingProvisionCashSettlPaymentDateOffsetPeriod() bool {
	return m.Has(tag.UnderlyingProvisionCashSettlPaymentDateOffsetPeriod)
}

// HasUnderlyingProvisionCashSettlPaymentDateOffsetUnit returns true if UnderlyingProvisionCashSettlPaymentDateOffsetUnit is present, Tag 42095.
func (m NoUnderlyingProvisions) HasUnderlyingProvisionCashSettlPaymentDateOffsetUnit() bool {
	return m.Has(tag.UnderlyingProvisionCashSettlPaymentDateOffsetUnit)
}

// HasUnderlyingProvisionCashSettlPaymentDateOffsetDayType returns true if UnderlyingProvisionCashSettlPaymentDateOffsetDayType is present, Tag 42096.
func (m NoUnderlyingProvisions) HasUnderlyingProvisionCashSettlPaymentDateOffsetDayType() bool {
	return m.Has(tag.UnderlyingProvisionCashSettlPaymentDateOffsetDayType)
}

// HasUnderlyingProvisionCashSettlPaymentDateRangeFirst returns true if UnderlyingProvisionCashSettlPaymentDateRangeFirst is present, Tag 42097.
func (m NoUnderlyingProvisions) HasUnderlyingProvisionCashSettlPaymentDateRangeFirst() bool {
	return m.Has(tag.UnderlyingProvisionCashSettlPaymentDateRangeFirst)
}

// HasUnderlyingProvisionCashSettlPaymentDateRangeLast returns true if UnderlyingProvisionCashSettlPaymentDateRangeLast is present, Tag 42098.
func (m NoUnderlyingProvisions) HasUnderlyingProvisionCashSettlPaymentDateRangeLast() bool {
	return m.Has(tag.UnderlyingProvisionCashSettlPaymentDateRangeLast)
}

// HasNoUnderlyingProvisionCashSettlPaymentDates returns true if NoUnderlyingProvisionCashSettlPaymentDates is present, Tag 42099.
func (m NoUnderlyingProvisions) HasNoUnderlyingProvisionCashSettlPaymentDates() bool {
	return m.Has(tag.NoUnderlyingProvisionCashSettlPaymentDates)
}

// HasUnderlyingProvisionCashSettlMethod returns true if UnderlyingProvisionCashSettlMethod is present, Tag 42166.
func (m NoUnderlyingProvisions) HasUnderlyingProvisionCashSettlMethod() bool {
	return m.Has(tag.UnderlyingProvisionCashSettlMethod)
}

// HasUnderlyingProvisionCashSettlCurrency returns true if UnderlyingProvisionCashSettlCurrency is present, Tag 42167.
func (m NoUnderlyingProvisions) HasUnderlyingProvisionCashSettlCurrency() bool {
	return m.Has(tag.UnderlyingProvisionCashSettlCurrency)
}

// HasUnderlyingProvisionCashSettlCurrency2 returns true if UnderlyingProvisionCashSettlCurrency2 is present, Tag 42168.
func (m NoUnderlyingProvisions) HasUnderlyingProvisionCashSettlCurrency2() bool {
	return m.Has(tag.UnderlyingProvisionCashSettlCurrency2)
}

// HasUnderlyingProvisionCashSettlQuoteType returns true if UnderlyingProvisionCashSettlQuoteType is present, Tag 42169.
func (m NoUnderlyingProvisions) HasUnderlyingProvisionCashSettlQuoteType() bool {
	return m.Has(tag.UnderlyingProvisionCashSettlQuoteType)
}

// HasUnderlyingProvisionCashSettlQuoteSource returns true if UnderlyingProvisionCashSettlQuoteSource is present, Tag 42102.
func (m NoUnderlyingProvisions) HasUnderlyingProvisionCashSettlQuoteSource() bool {
	return m.Has(tag.UnderlyingProvisionCashSettlQuoteSource)
}

// HasUnderlyingProvisionCashSettlQuoteReferencePage returns true if UnderlyingProvisionCashSettlQuoteReferencePage is present, Tag 42103.
func (m NoUnderlyingProvisions) HasUnderlyingProvisionCashSettlQuoteReferencePage() bool {
	return m.Has(tag.UnderlyingProvisionCashSettlQuoteReferencePage)
}

// HasUnderlyingProvisionText returns true if UnderlyingProvisionText is present, Tag 42170.
func (m NoUnderlyingProvisions) HasUnderlyingProvisionText() bool {
	return m.Has(tag.UnderlyingProvisionText)
}

// HasEncodedUnderlyingProvisionTextLen returns true if EncodedUnderlyingProvisionTextLen is present, Tag 42171.
func (m NoUnderlyingProvisions) HasEncodedUnderlyingProvisionTextLen() bool {
	return m.Has(tag.EncodedUnderlyingProvisionTextLen)
}

// HasEncodedUnderlyingProvisionText returns true if EncodedUnderlyingProvisionText is present, Tag 42172.
func (m NoUnderlyingProvisions) HasEncodedUnderlyingProvisionText() bool {
	return m.Has(tag.EncodedUnderlyingProvisionText)
}

// HasNoUnderlyingProvisionPartyIDs returns true if NoUnderlyingProvisionPartyIDs is present, Tag 42173.
func (m NoUnderlyingProvisions) HasNoUnderlyingProvisionPartyIDs() bool {
	return m.Has(tag.NoUnderlyingProvisionPartyIDs)
}

// HasUnderlyingProvisionBreakFeeElection returns true if UnderlyingProvisionBreakFeeElection is present, Tag 43002.
func (m NoUnderlyingProvisions) HasUnderlyingProvisionBreakFeeElection() bool {
	return m.Has(tag.UnderlyingProvisionBreakFeeElection)
}

// HasUnderlyingProvisionBreakFeeRate returns true if UnderlyingProvisionBreakFeeRate is present, Tag 43003.
func (m NoUnderlyingProvisions) HasUnderlyingProvisionBreakFeeRate() bool {
	return m.Has(tag.UnderlyingProvisionBreakFeeRate)
}

// NoUnderlyingProvisionDateBusinessCenters is a repeating group element, Tag 42190.
type NoUnderlyingProvisionDateBusinessCenters struct {
	*quickfix.Group
}

// SetUnderlyingProvisionDateBusinessCenter sets UnderlyingProvisionDateBusinessCenter, Tag 42191.
func (m NoUnderlyingProvisionDateBusinessCenters) SetUnderlyingProvisionDateBusinessCenter(v string) {
	m.Set(field.NewUnderlyingProvisionDateBusinessCenter(v))
}

// GetUnderlyingProvisionDateBusinessCenter gets UnderlyingProvisionDateBusinessCenter, Tag 42191.
func (m NoUnderlyingProvisionDateBusinessCenters) GetUnderlyingProvisionDateBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionDateBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingProvisionDateBusinessCenter returns true if UnderlyingProvisionDateBusinessCenter is present, Tag 42191.
func (m NoUnderlyingProvisionDateBusinessCenters) HasUnderlyingProvisionDateBusinessCenter() bool {
	return m.Has(tag.UnderlyingProvisionDateBusinessCenter)
}

// NoUnderlyingProvisionDateBusinessCentersRepeatingGroup is a repeating group, Tag 42190.
type NoUnderlyingProvisionDateBusinessCentersRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingProvisionDateBusinessCentersRepeatingGroup returns an initialized, NoUnderlyingProvisionDateBusinessCentersRepeatingGroup.
func NewNoUnderlyingProvisionDateBusinessCentersRepeatingGroup() NoUnderlyingProvisionDateBusinessCentersRepeatingGroup {
	return NoUnderlyingProvisionDateBusinessCentersRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingProvisionDateBusinessCenters,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingProvisionDateBusinessCenter),
			},
		),
	}
}

// Add create and append a new NoUnderlyingProvisionDateBusinessCenters to this group.
func (m NoUnderlyingProvisionDateBusinessCentersRepeatingGroup) Add() NoUnderlyingProvisionDateBusinessCenters {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingProvisionDateBusinessCenters{g}
}

// Get returns the ith NoUnderlyingProvisionDateBusinessCenters in the NoUnderlyingProvisionDateBusinessCentersRepeatinGroup.
func (m NoUnderlyingProvisionDateBusinessCentersRepeatingGroup) Get(i int) NoUnderlyingProvisionDateBusinessCenters {
	return NoUnderlyingProvisionDateBusinessCenters{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingProvisionCashSettlValueDateBusinessCenters is a repeating group element, Tag 42182.
type NoUnderlyingProvisionCashSettlValueDateBusinessCenters struct {
	*quickfix.Group
}

// SetUnderlyingProvisionCashSettlValueDateBusinessCenter sets UnderlyingProvisionCashSettlValueDateBusinessCenter, Tag 42183.
func (m NoUnderlyingProvisionCashSettlValueDateBusinessCenters) SetUnderlyingProvisionCashSettlValueDateBusinessCenter(v string) {
	m.Set(field.NewUnderlyingProvisionCashSettlValueDateBusinessCenter(v))
}

// GetUnderlyingProvisionCashSettlValueDateBusinessCenter gets UnderlyingProvisionCashSettlValueDateBusinessCenter, Tag 42183.
func (m NoUnderlyingProvisionCashSettlValueDateBusinessCenters) GetUnderlyingProvisionCashSettlValueDateBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionCashSettlValueDateBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingProvisionCashSettlValueDateBusinessCenter returns true if UnderlyingProvisionCashSettlValueDateBusinessCenter is present, Tag 42183.
func (m NoUnderlyingProvisionCashSettlValueDateBusinessCenters) HasUnderlyingProvisionCashSettlValueDateBusinessCenter() bool {
	return m.Has(tag.UnderlyingProvisionCashSettlValueDateBusinessCenter)
}

// NoUnderlyingProvisionCashSettlValueDateBusinessCentersRepeatingGroup is a repeating group, Tag 42182.
type NoUnderlyingProvisionCashSettlValueDateBusinessCentersRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingProvisionCashSettlValueDateBusinessCentersRepeatingGroup returns an initialized, NoUnderlyingProvisionCashSettlValueDateBusinessCentersRepeatingGroup.
func NewNoUnderlyingProvisionCashSettlValueDateBusinessCentersRepeatingGroup() NoUnderlyingProvisionCashSettlValueDateBusinessCentersRepeatingGroup {
	return NoUnderlyingProvisionCashSettlValueDateBusinessCentersRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingProvisionCashSettlValueDateBusinessCenters,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingProvisionCashSettlValueDateBusinessCenter),
			},
		),
	}
}

// Add create and append a new NoUnderlyingProvisionCashSettlValueDateBusinessCenters to this group.
func (m NoUnderlyingProvisionCashSettlValueDateBusinessCentersRepeatingGroup) Add() NoUnderlyingProvisionCashSettlValueDateBusinessCenters {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingProvisionCashSettlValueDateBusinessCenters{g}
}

// Get returns the ith NoUnderlyingProvisionCashSettlValueDateBusinessCenters in the NoUnderlyingProvisionCashSettlValueDateBusinessCentersRepeatinGroup.
func (m NoUnderlyingProvisionCashSettlValueDateBusinessCentersRepeatingGroup) Get(i int) NoUnderlyingProvisionCashSettlValueDateBusinessCenters {
	return NoUnderlyingProvisionCashSettlValueDateBusinessCenters{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingProvisionOptionExerciseBusinessCenters is a repeating group element, Tag 42184.
type NoUnderlyingProvisionOptionExerciseBusinessCenters struct {
	*quickfix.Group
}

// SetUnderlyingProvisionOptionExerciseBusinessCenter sets UnderlyingProvisionOptionExerciseBusinessCenter, Tag 42185.
func (m NoUnderlyingProvisionOptionExerciseBusinessCenters) SetUnderlyingProvisionOptionExerciseBusinessCenter(v string) {
	m.Set(field.NewUnderlyingProvisionOptionExerciseBusinessCenter(v))
}

// GetUnderlyingProvisionOptionExerciseBusinessCenter gets UnderlyingProvisionOptionExerciseBusinessCenter, Tag 42185.
func (m NoUnderlyingProvisionOptionExerciseBusinessCenters) GetUnderlyingProvisionOptionExerciseBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionOptionExerciseBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingProvisionOptionExerciseBusinessCenter returns true if UnderlyingProvisionOptionExerciseBusinessCenter is present, Tag 42185.
func (m NoUnderlyingProvisionOptionExerciseBusinessCenters) HasUnderlyingProvisionOptionExerciseBusinessCenter() bool {
	return m.Has(tag.UnderlyingProvisionOptionExerciseBusinessCenter)
}

// NoUnderlyingProvisionOptionExerciseBusinessCentersRepeatingGroup is a repeating group, Tag 42184.
type NoUnderlyingProvisionOptionExerciseBusinessCentersRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingProvisionOptionExerciseBusinessCentersRepeatingGroup returns an initialized, NoUnderlyingProvisionOptionExerciseBusinessCentersRepeatingGroup.
func NewNoUnderlyingProvisionOptionExerciseBusinessCentersRepeatingGroup() NoUnderlyingProvisionOptionExerciseBusinessCentersRepeatingGroup {
	return NoUnderlyingProvisionOptionExerciseBusinessCentersRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingProvisionOptionExerciseBusinessCenters,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingProvisionOptionExerciseBusinessCenter),
			},
		),
	}
}

// Add create and append a new NoUnderlyingProvisionOptionExerciseBusinessCenters to this group.
func (m NoUnderlyingProvisionOptionExerciseBusinessCentersRepeatingGroup) Add() NoUnderlyingProvisionOptionExerciseBusinessCenters {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingProvisionOptionExerciseBusinessCenters{g}
}

// Get returns the ith NoUnderlyingProvisionOptionExerciseBusinessCenters in the NoUnderlyingProvisionOptionExerciseBusinessCentersRepeatinGroup.
func (m NoUnderlyingProvisionOptionExerciseBusinessCentersRepeatingGroup) Get(i int) NoUnderlyingProvisionOptionExerciseBusinessCenters {
	return NoUnderlyingProvisionOptionExerciseBusinessCenters{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingProvisionOptionExerciseFixedDates is a repeating group element, Tag 42112.
type NoUnderlyingProvisionOptionExerciseFixedDates struct {
	*quickfix.Group
}

// SetUnderlyingProvisionOptionExerciseFixedDate sets UnderlyingProvisionOptionExerciseFixedDate, Tag 42113.
func (m NoUnderlyingProvisionOptionExerciseFixedDates) SetUnderlyingProvisionOptionExerciseFixedDate(v string) {
	m.Set(field.NewUnderlyingProvisionOptionExerciseFixedDate(v))
}

// SetUnderlyingProvisionOptionExerciseFixedDateType sets UnderlyingProvisionOptionExerciseFixedDateType, Tag 42114.
func (m NoUnderlyingProvisionOptionExerciseFixedDates) SetUnderlyingProvisionOptionExerciseFixedDateType(v int) {
	m.Set(field.NewUnderlyingProvisionOptionExerciseFixedDateType(v))
}

// GetUnderlyingProvisionOptionExerciseFixedDate gets UnderlyingProvisionOptionExerciseFixedDate, Tag 42113.
func (m NoUnderlyingProvisionOptionExerciseFixedDates) GetUnderlyingProvisionOptionExerciseFixedDate() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionOptionExerciseFixedDateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProvisionOptionExerciseFixedDateType gets UnderlyingProvisionOptionExerciseFixedDateType, Tag 42114.
func (m NoUnderlyingProvisionOptionExerciseFixedDates) GetUnderlyingProvisionOptionExerciseFixedDateType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionOptionExerciseFixedDateTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingProvisionOptionExerciseFixedDate returns true if UnderlyingProvisionOptionExerciseFixedDate is present, Tag 42113.
func (m NoUnderlyingProvisionOptionExerciseFixedDates) HasUnderlyingProvisionOptionExerciseFixedDate() bool {
	return m.Has(tag.UnderlyingProvisionOptionExerciseFixedDate)
}

// HasUnderlyingProvisionOptionExerciseFixedDateType returns true if UnderlyingProvisionOptionExerciseFixedDateType is present, Tag 42114.
func (m NoUnderlyingProvisionOptionExerciseFixedDates) HasUnderlyingProvisionOptionExerciseFixedDateType() bool {
	return m.Has(tag.UnderlyingProvisionOptionExerciseFixedDateType)
}

// NoUnderlyingProvisionOptionExerciseFixedDatesRepeatingGroup is a repeating group, Tag 42112.
type NoUnderlyingProvisionOptionExerciseFixedDatesRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingProvisionOptionExerciseFixedDatesRepeatingGroup returns an initialized, NoUnderlyingProvisionOptionExerciseFixedDatesRepeatingGroup.
func NewNoUnderlyingProvisionOptionExerciseFixedDatesRepeatingGroup() NoUnderlyingProvisionOptionExerciseFixedDatesRepeatingGroup {
	return NoUnderlyingProvisionOptionExerciseFixedDatesRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingProvisionOptionExerciseFixedDates,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingProvisionOptionExerciseFixedDate),
				quickfix.GroupElement(tag.UnderlyingProvisionOptionExerciseFixedDateType),
			},
		),
	}
}

// Add create and append a new NoUnderlyingProvisionOptionExerciseFixedDates to this group.
func (m NoUnderlyingProvisionOptionExerciseFixedDatesRepeatingGroup) Add() NoUnderlyingProvisionOptionExerciseFixedDates {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingProvisionOptionExerciseFixedDates{g}
}

// Get returns the ith NoUnderlyingProvisionOptionExerciseFixedDates in the NoUnderlyingProvisionOptionExerciseFixedDatesRepeatinGroup.
func (m NoUnderlyingProvisionOptionExerciseFixedDatesRepeatingGroup) Get(i int) NoUnderlyingProvisionOptionExerciseFixedDates {
	return NoUnderlyingProvisionOptionExerciseFixedDates{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingProvisionOptionExpirationDateBusinessCenters is a repeating group element, Tag 42186.
type NoUnderlyingProvisionOptionExpirationDateBusinessCenters struct {
	*quickfix.Group
}

// SetUnderlyingProvisionOptionExpirationDateBusinessCenter sets UnderlyingProvisionOptionExpirationDateBusinessCenter, Tag 42187.
func (m NoUnderlyingProvisionOptionExpirationDateBusinessCenters) SetUnderlyingProvisionOptionExpirationDateBusinessCenter(v string) {
	m.Set(field.NewUnderlyingProvisionOptionExpirationDateBusinessCenter(v))
}

// GetUnderlyingProvisionOptionExpirationDateBusinessCenter gets UnderlyingProvisionOptionExpirationDateBusinessCenter, Tag 42187.
func (m NoUnderlyingProvisionOptionExpirationDateBusinessCenters) GetUnderlyingProvisionOptionExpirationDateBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionOptionExpirationDateBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingProvisionOptionExpirationDateBusinessCenter returns true if UnderlyingProvisionOptionExpirationDateBusinessCenter is present, Tag 42187.
func (m NoUnderlyingProvisionOptionExpirationDateBusinessCenters) HasUnderlyingProvisionOptionExpirationDateBusinessCenter() bool {
	return m.Has(tag.UnderlyingProvisionOptionExpirationDateBusinessCenter)
}

// NoUnderlyingProvisionOptionExpirationDateBusinessCentersRepeatingGroup is a repeating group, Tag 42186.
type NoUnderlyingProvisionOptionExpirationDateBusinessCentersRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingProvisionOptionExpirationDateBusinessCentersRepeatingGroup returns an initialized, NoUnderlyingProvisionOptionExpirationDateBusinessCentersRepeatingGroup.
func NewNoUnderlyingProvisionOptionExpirationDateBusinessCentersRepeatingGroup() NoUnderlyingProvisionOptionExpirationDateBusinessCentersRepeatingGroup {
	return NoUnderlyingProvisionOptionExpirationDateBusinessCentersRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingProvisionOptionExpirationDateBusinessCenters,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingProvisionOptionExpirationDateBusinessCenter),
			},
		),
	}
}

// Add create and append a new NoUnderlyingProvisionOptionExpirationDateBusinessCenters to this group.
func (m NoUnderlyingProvisionOptionExpirationDateBusinessCentersRepeatingGroup) Add() NoUnderlyingProvisionOptionExpirationDateBusinessCenters {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingProvisionOptionExpirationDateBusinessCenters{g}
}

// Get returns the ith NoUnderlyingProvisionOptionExpirationDateBusinessCenters in the NoUnderlyingProvisionOptionExpirationDateBusinessCentersRepeatinGroup.
func (m NoUnderlyingProvisionOptionExpirationDateBusinessCentersRepeatingGroup) Get(i int) NoUnderlyingProvisionOptionExpirationDateBusinessCenters {
	return NoUnderlyingProvisionOptionExpirationDateBusinessCenters{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingProvisionOptionRelevantUnderlyingDateBusinessCenters is a repeating group element, Tag 42188.
type NoUnderlyingProvisionOptionRelevantUnderlyingDateBusinessCenters struct {
	*quickfix.Group
}

// SetUnderlyingProvisionOptionRelevantUnderlyingDateBusinessCenter sets UnderlyingProvisionOptionRelevantUnderlyingDateBusinessCenter, Tag 42189.
func (m NoUnderlyingProvisionOptionRelevantUnderlyingDateBusinessCenters) SetUnderlyingProvisionOptionRelevantUnderlyingDateBusinessCenter(v string) {
	m.Set(field.NewUnderlyingProvisionOptionRelevantUnderlyingDateBusinessCenter(v))
}

// GetUnderlyingProvisionOptionRelevantUnderlyingDateBusinessCenter gets UnderlyingProvisionOptionRelevantUnderlyingDateBusinessCenter, Tag 42189.
func (m NoUnderlyingProvisionOptionRelevantUnderlyingDateBusinessCenters) GetUnderlyingProvisionOptionRelevantUnderlyingDateBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionOptionRelevantUnderlyingDateBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingProvisionOptionRelevantUnderlyingDateBusinessCenter returns true if UnderlyingProvisionOptionRelevantUnderlyingDateBusinessCenter is present, Tag 42189.
func (m NoUnderlyingProvisionOptionRelevantUnderlyingDateBusinessCenters) HasUnderlyingProvisionOptionRelevantUnderlyingDateBusinessCenter() bool {
	return m.Has(tag.UnderlyingProvisionOptionRelevantUnderlyingDateBusinessCenter)
}

// NoUnderlyingProvisionOptionRelevantUnderlyingDateBusinessCentersRepeatingGroup is a repeating group, Tag 42188.
type NoUnderlyingProvisionOptionRelevantUnderlyingDateBusinessCentersRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingProvisionOptionRelevantUnderlyingDateBusinessCentersRepeatingGroup returns an initialized, NoUnderlyingProvisionOptionRelevantUnderlyingDateBusinessCentersRepeatingGroup.
func NewNoUnderlyingProvisionOptionRelevantUnderlyingDateBusinessCentersRepeatingGroup() NoUnderlyingProvisionOptionRelevantUnderlyingDateBusinessCentersRepeatingGroup {
	return NoUnderlyingProvisionOptionRelevantUnderlyingDateBusinessCentersRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingProvisionOptionRelevantUnderlyingDateBusinessCenters,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingProvisionOptionRelevantUnderlyingDateBusinessCenter),
			},
		),
	}
}

// Add create and append a new NoUnderlyingProvisionOptionRelevantUnderlyingDateBusinessCenters to this group.
func (m NoUnderlyingProvisionOptionRelevantUnderlyingDateBusinessCentersRepeatingGroup) Add() NoUnderlyingProvisionOptionRelevantUnderlyingDateBusinessCenters {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingProvisionOptionRelevantUnderlyingDateBusinessCenters{g}
}

// Get returns the ith NoUnderlyingProvisionOptionRelevantUnderlyingDateBusinessCenters in the NoUnderlyingProvisionOptionRelevantUnderlyingDateBusinessCentersRepeatinGroup.
func (m NoUnderlyingProvisionOptionRelevantUnderlyingDateBusinessCentersRepeatingGroup) Get(i int) NoUnderlyingProvisionOptionRelevantUnderlyingDateBusinessCenters {
	return NoUnderlyingProvisionOptionRelevantUnderlyingDateBusinessCenters{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingProvisionCashSettlPaymentDateBusinessCenters is a repeating group element, Tag 42180.
type NoUnderlyingProvisionCashSettlPaymentDateBusinessCenters struct {
	*quickfix.Group
}

// SetUnderlyingProvisionCashSettlPaymentDateBusinessCenter sets UnderlyingProvisionCashSettlPaymentDateBusinessCenter, Tag 42181.
func (m NoUnderlyingProvisionCashSettlPaymentDateBusinessCenters) SetUnderlyingProvisionCashSettlPaymentDateBusinessCenter(v string) {
	m.Set(field.NewUnderlyingProvisionCashSettlPaymentDateBusinessCenter(v))
}

// GetUnderlyingProvisionCashSettlPaymentDateBusinessCenter gets UnderlyingProvisionCashSettlPaymentDateBusinessCenter, Tag 42181.
func (m NoUnderlyingProvisionCashSettlPaymentDateBusinessCenters) GetUnderlyingProvisionCashSettlPaymentDateBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionCashSettlPaymentDateBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingProvisionCashSettlPaymentDateBusinessCenter returns true if UnderlyingProvisionCashSettlPaymentDateBusinessCenter is present, Tag 42181.
func (m NoUnderlyingProvisionCashSettlPaymentDateBusinessCenters) HasUnderlyingProvisionCashSettlPaymentDateBusinessCenter() bool {
	return m.Has(tag.UnderlyingProvisionCashSettlPaymentDateBusinessCenter)
}

// NoUnderlyingProvisionCashSettlPaymentDateBusinessCentersRepeatingGroup is a repeating group, Tag 42180.
type NoUnderlyingProvisionCashSettlPaymentDateBusinessCentersRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingProvisionCashSettlPaymentDateBusinessCentersRepeatingGroup returns an initialized, NoUnderlyingProvisionCashSettlPaymentDateBusinessCentersRepeatingGroup.
func NewNoUnderlyingProvisionCashSettlPaymentDateBusinessCentersRepeatingGroup() NoUnderlyingProvisionCashSettlPaymentDateBusinessCentersRepeatingGroup {
	return NoUnderlyingProvisionCashSettlPaymentDateBusinessCentersRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingProvisionCashSettlPaymentDateBusinessCenters,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingProvisionCashSettlPaymentDateBusinessCenter),
			},
		),
	}
}

// Add create and append a new NoUnderlyingProvisionCashSettlPaymentDateBusinessCenters to this group.
func (m NoUnderlyingProvisionCashSettlPaymentDateBusinessCentersRepeatingGroup) Add() NoUnderlyingProvisionCashSettlPaymentDateBusinessCenters {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingProvisionCashSettlPaymentDateBusinessCenters{g}
}

// Get returns the ith NoUnderlyingProvisionCashSettlPaymentDateBusinessCenters in the NoUnderlyingProvisionCashSettlPaymentDateBusinessCentersRepeatinGroup.
func (m NoUnderlyingProvisionCashSettlPaymentDateBusinessCentersRepeatingGroup) Get(i int) NoUnderlyingProvisionCashSettlPaymentDateBusinessCenters {
	return NoUnderlyingProvisionCashSettlPaymentDateBusinessCenters{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingProvisionCashSettlPaymentDates is a repeating group element, Tag 42099.
type NoUnderlyingProvisionCashSettlPaymentDates struct {
	*quickfix.Group
}

// SetUnderlyingProvisionCashSettlPaymentDate sets UnderlyingProvisionCashSettlPaymentDate, Tag 42100.
func (m NoUnderlyingProvisionCashSettlPaymentDates) SetUnderlyingProvisionCashSettlPaymentDate(v string) {
	m.Set(field.NewUnderlyingProvisionCashSettlPaymentDate(v))
}

// SetUnderlyingProvisionCashSettlPaymentDateType sets UnderlyingProvisionCashSettlPaymentDateType, Tag 42101.
func (m NoUnderlyingProvisionCashSettlPaymentDates) SetUnderlyingProvisionCashSettlPaymentDateType(v int) {
	m.Set(field.NewUnderlyingProvisionCashSettlPaymentDateType(v))
}

// GetUnderlyingProvisionCashSettlPaymentDate gets UnderlyingProvisionCashSettlPaymentDate, Tag 42100.
func (m NoUnderlyingProvisionCashSettlPaymentDates) GetUnderlyingProvisionCashSettlPaymentDate() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionCashSettlPaymentDateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProvisionCashSettlPaymentDateType gets UnderlyingProvisionCashSettlPaymentDateType, Tag 42101.
func (m NoUnderlyingProvisionCashSettlPaymentDates) GetUnderlyingProvisionCashSettlPaymentDateType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionCashSettlPaymentDateTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingProvisionCashSettlPaymentDate returns true if UnderlyingProvisionCashSettlPaymentDate is present, Tag 42100.
func (m NoUnderlyingProvisionCashSettlPaymentDates) HasUnderlyingProvisionCashSettlPaymentDate() bool {
	return m.Has(tag.UnderlyingProvisionCashSettlPaymentDate)
}

// HasUnderlyingProvisionCashSettlPaymentDateType returns true if UnderlyingProvisionCashSettlPaymentDateType is present, Tag 42101.
func (m NoUnderlyingProvisionCashSettlPaymentDates) HasUnderlyingProvisionCashSettlPaymentDateType() bool {
	return m.Has(tag.UnderlyingProvisionCashSettlPaymentDateType)
}

// NoUnderlyingProvisionCashSettlPaymentDatesRepeatingGroup is a repeating group, Tag 42099.
type NoUnderlyingProvisionCashSettlPaymentDatesRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingProvisionCashSettlPaymentDatesRepeatingGroup returns an initialized, NoUnderlyingProvisionCashSettlPaymentDatesRepeatingGroup.
func NewNoUnderlyingProvisionCashSettlPaymentDatesRepeatingGroup() NoUnderlyingProvisionCashSettlPaymentDatesRepeatingGroup {
	return NoUnderlyingProvisionCashSettlPaymentDatesRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingProvisionCashSettlPaymentDates,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingProvisionCashSettlPaymentDate),
				quickfix.GroupElement(tag.UnderlyingProvisionCashSettlPaymentDateType),
			},
		),
	}
}

// Add create and append a new NoUnderlyingProvisionCashSettlPaymentDates to this group.
func (m NoUnderlyingProvisionCashSettlPaymentDatesRepeatingGroup) Add() NoUnderlyingProvisionCashSettlPaymentDates {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingProvisionCashSettlPaymentDates{g}
}

// Get returns the ith NoUnderlyingProvisionCashSettlPaymentDates in the NoUnderlyingProvisionCashSettlPaymentDatesRepeatinGroup.
func (m NoUnderlyingProvisionCashSettlPaymentDatesRepeatingGroup) Get(i int) NoUnderlyingProvisionCashSettlPaymentDates {
	return NoUnderlyingProvisionCashSettlPaymentDates{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingProvisionPartyIDs is a repeating group element, Tag 42173.
type NoUnderlyingProvisionPartyIDs struct {
	*quickfix.Group
}

// SetUnderlyingProvisionPartyID sets UnderlyingProvisionPartyID, Tag 42174.
func (m NoUnderlyingProvisionPartyIDs) SetUnderlyingProvisionPartyID(v string) {
	m.Set(field.NewUnderlyingProvisionPartyID(v))
}

// SetUnderlyingProvisionPartyIDSource sets UnderlyingProvisionPartyIDSource, Tag 42175.
func (m NoUnderlyingProvisionPartyIDs) SetUnderlyingProvisionPartyIDSource(v string) {
	m.Set(field.NewUnderlyingProvisionPartyIDSource(v))
}

// SetUnderlyingProvisionPartyRole sets UnderlyingProvisionPartyRole, Tag 42176.
func (m NoUnderlyingProvisionPartyIDs) SetUnderlyingProvisionPartyRole(v int) {
	m.Set(field.NewUnderlyingProvisionPartyRole(v))
}

// SetUnderlyingProvisionPartyRoleQualifier sets UnderlyingProvisionPartyRoleQualifier, Tag 40918.
func (m NoUnderlyingProvisionPartyIDs) SetUnderlyingProvisionPartyRoleQualifier(v int) {
	m.Set(field.NewUnderlyingProvisionPartyRoleQualifier(v))
}

// SetNoUnderlyingProvisionPartySubIDs sets NoUnderlyingProvisionPartySubIDs, Tag 42177.
func (m NoUnderlyingProvisionPartyIDs) SetNoUnderlyingProvisionPartySubIDs(f NoUnderlyingProvisionPartySubIDsRepeatingGroup) {
	m.SetGroup(f)
}

// GetUnderlyingProvisionPartyID gets UnderlyingProvisionPartyID, Tag 42174.
func (m NoUnderlyingProvisionPartyIDs) GetUnderlyingProvisionPartyID() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionPartyIDField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProvisionPartyIDSource gets UnderlyingProvisionPartyIDSource, Tag 42175.
func (m NoUnderlyingProvisionPartyIDs) GetUnderlyingProvisionPartyIDSource() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionPartyIDSourceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProvisionPartyRole gets UnderlyingProvisionPartyRole, Tag 42176.
func (m NoUnderlyingProvisionPartyIDs) GetUnderlyingProvisionPartyRole() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionPartyRoleField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProvisionPartyRoleQualifier gets UnderlyingProvisionPartyRoleQualifier, Tag 40918.
func (m NoUnderlyingProvisionPartyIDs) GetUnderlyingProvisionPartyRoleQualifier() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionPartyRoleQualifierField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUnderlyingProvisionPartySubIDs gets NoUnderlyingProvisionPartySubIDs, Tag 42177.
func (m NoUnderlyingProvisionPartyIDs) GetNoUnderlyingProvisionPartySubIDs() (NoUnderlyingProvisionPartySubIDsRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingProvisionPartySubIDsRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// HasUnderlyingProvisionPartyID returns true if UnderlyingProvisionPartyID is present, Tag 42174.
func (m NoUnderlyingProvisionPartyIDs) HasUnderlyingProvisionPartyID() bool {
	return m.Has(tag.UnderlyingProvisionPartyID)
}

// HasUnderlyingProvisionPartyIDSource returns true if UnderlyingProvisionPartyIDSource is present, Tag 42175.
func (m NoUnderlyingProvisionPartyIDs) HasUnderlyingProvisionPartyIDSource() bool {
	return m.Has(tag.UnderlyingProvisionPartyIDSource)
}

// HasUnderlyingProvisionPartyRole returns true if UnderlyingProvisionPartyRole is present, Tag 42176.
func (m NoUnderlyingProvisionPartyIDs) HasUnderlyingProvisionPartyRole() bool {
	return m.Has(tag.UnderlyingProvisionPartyRole)
}

// HasUnderlyingProvisionPartyRoleQualifier returns true if UnderlyingProvisionPartyRoleQualifier is present, Tag 40918.
func (m NoUnderlyingProvisionPartyIDs) HasUnderlyingProvisionPartyRoleQualifier() bool {
	return m.Has(tag.UnderlyingProvisionPartyRoleQualifier)
}

// HasNoUnderlyingProvisionPartySubIDs returns true if NoUnderlyingProvisionPartySubIDs is present, Tag 42177.
func (m NoUnderlyingProvisionPartyIDs) HasNoUnderlyingProvisionPartySubIDs() bool {
	return m.Has(tag.NoUnderlyingProvisionPartySubIDs)
}

// NoUnderlyingProvisionPartySubIDs is a repeating group element, Tag 42177.
type NoUnderlyingProvisionPartySubIDs struct {
	*quickfix.Group
}

// SetUnderlyingProvisionPartySubID sets UnderlyingProvisionPartySubID, Tag 42178.
func (m NoUnderlyingProvisionPartySubIDs) SetUnderlyingProvisionPartySubID(v string) {
	m.Set(field.NewUnderlyingProvisionPartySubID(v))
}

// SetUnderlyingProvisionPartySubIDType sets UnderlyingProvisionPartySubIDType, Tag 42179.
func (m NoUnderlyingProvisionPartySubIDs) SetUnderlyingProvisionPartySubIDType(v int) {
	m.Set(field.NewUnderlyingProvisionPartySubIDType(v))
}

// GetUnderlyingProvisionPartySubID gets UnderlyingProvisionPartySubID, Tag 42178.
func (m NoUnderlyingProvisionPartySubIDs) GetUnderlyingProvisionPartySubID() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionPartySubIDField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProvisionPartySubIDType gets UnderlyingProvisionPartySubIDType, Tag 42179.
func (m NoUnderlyingProvisionPartySubIDs) GetUnderlyingProvisionPartySubIDType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionPartySubIDTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingProvisionPartySubID returns true if UnderlyingProvisionPartySubID is present, Tag 42178.
func (m NoUnderlyingProvisionPartySubIDs) HasUnderlyingProvisionPartySubID() bool {
	return m.Has(tag.UnderlyingProvisionPartySubID)
}

// HasUnderlyingProvisionPartySubIDType returns true if UnderlyingProvisionPartySubIDType is present, Tag 42179.
func (m NoUnderlyingProvisionPartySubIDs) HasUnderlyingProvisionPartySubIDType() bool {
	return m.Has(tag.UnderlyingProvisionPartySubIDType)
}

// NoUnderlyingProvisionPartySubIDsRepeatingGroup is a repeating group, Tag 42177.
type NoUnderlyingProvisionPartySubIDsRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingProvisionPartySubIDsRepeatingGroup returns an initialized, NoUnderlyingProvisionPartySubIDsRepeatingGroup.
func NewNoUnderlyingProvisionPartySubIDsRepeatingGroup() NoUnderlyingProvisionPartySubIDsRepeatingGroup {
	return NoUnderlyingProvisionPartySubIDsRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingProvisionPartySubIDs,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingProvisionPartySubID),
				quickfix.GroupElement(tag.UnderlyingProvisionPartySubIDType),
			},
		),
	}
}

// Add create and append a new NoUnderlyingProvisionPartySubIDs to this group.
func (m NoUnderlyingProvisionPartySubIDsRepeatingGroup) Add() NoUnderlyingProvisionPartySubIDs {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingProvisionPartySubIDs{g}
}

// Get returns the ith NoUnderlyingProvisionPartySubIDs in the NoUnderlyingProvisionPartySubIDsRepeatinGroup.
func (m NoUnderlyingProvisionPartySubIDsRepeatingGroup) Get(i int) NoUnderlyingProvisionPartySubIDs {
	return NoUnderlyingProvisionPartySubIDs{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingProvisionPartyIDsRepeatingGroup is a repeating group, Tag 42173.
type NoUnderlyingProvisionPartyIDsRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingProvisionPartyIDsRepeatingGroup returns an initialized, NoUnderlyingProvisionPartyIDsRepeatingGroup.
func NewNoUnderlyingProvisionPartyIDsRepeatingGroup() NoUnderlyingProvisionPartyIDsRepeatingGroup {
	return NoUnderlyingProvisionPartyIDsRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingProvisionPartyIDs,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingProvisionPartyID),
				quickfix.GroupElement(tag.UnderlyingProvisionPartyIDSource),
				quickfix.GroupElement(tag.UnderlyingProvisionPartyRole),
				quickfix.GroupElement(tag.UnderlyingProvisionPartyRoleQualifier),
				NewNoUnderlyingProvisionPartySubIDsRepeatingGroup(),
			},
		),
	}
}

// Add create and append a new NoUnderlyingProvisionPartyIDs to this group.
func (m NoUnderlyingProvisionPartyIDsRepeatingGroup) Add() NoUnderlyingProvisionPartyIDs {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingProvisionPartyIDs{g}
}

// Get returns the ith NoUnderlyingProvisionPartyIDs in the NoUnderlyingProvisionPartyIDsRepeatinGroup.
func (m NoUnderlyingProvisionPartyIDsRepeatingGroup) Get(i int) NoUnderlyingProvisionPartyIDs {
	return NoUnderlyingProvisionPartyIDs{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingProvisionsRepeatingGroup is a repeating group, Tag 42149.
type NoUnderlyingProvisionsRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingProvisionsRepeatingGroup returns an initialized, NoUnderlyingProvisionsRepeatingGroup.
func NewNoUnderlyingProvisionsRepeatingGroup() NoUnderlyingProvisionsRepeatingGroup {
	return NoUnderlyingProvisionsRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingProvisions,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingProvisionType),
				quickfix.GroupElement(tag.UnderlyingProvisionDateUnadjusted),
				quickfix.GroupElement(tag.UnderlyingProvisionDateBusinessDayConvention),
				NewNoUnderlyingProvisionDateBusinessCentersRepeatingGroup(),
				quickfix.GroupElement(tag.UnderlyingProvisionDateAdjusted),
				quickfix.GroupElement(tag.UnderlyingProvisionDateTenorPeriod),
				quickfix.GroupElement(tag.UnderlyingProvisionDateTenorUnit),
				quickfix.GroupElement(tag.UnderlyingProvisionCalculationAgent),
				quickfix.GroupElement(tag.UnderlyingProvisionOptionSinglePartyBuyerSide),
				quickfix.GroupElement(tag.UnderlyingProvisionOptionSinglePartySellerSide),
				quickfix.GroupElement(tag.UnderlyingProvisionCashSettlValueTime),
				quickfix.GroupElement(tag.UnderlyingProvisionCashSettlValueTimeBusinessCenter),
				quickfix.GroupElement(tag.UnderlyingProvisionCashSettlValueDateBusinessDayConvention),
				NewNoUnderlyingProvisionCashSettlValueDateBusinessCentersRepeatingGroup(),
				quickfix.GroupElement(tag.UnderlyingProvisionCashSettlValueDateRelativeTo),
				quickfix.GroupElement(tag.UnderlyingProvisionCashSettlValueDateOffsetPeriod),
				quickfix.GroupElement(tag.UnderlyingProvisionCashSettlValueDateOffsetUnit),
				quickfix.GroupElement(tag.UnderlyingProvisionCashSettlValueDateOffsetDayType),
				quickfix.GroupElement(tag.UnderlyingProvisionCashSettlValueDateAdjusted),
				quickfix.GroupElement(tag.UnderlyingProvisionOptionExerciseBusinessDayConvention),
				NewNoUnderlyingProvisionOptionExerciseBusinessCentersRepeatingGroup(),
				NewNoUnderlyingProvisionOptionExerciseFixedDatesRepeatingGroup(),
				quickfix.GroupElement(tag.UnderlyingProvisionOptionExerciseEarliestDateOffsetPeriod),
				quickfix.GroupElement(tag.UnderlyingProvisionOptionExerciseEarliestDateOffsetUnit),
				quickfix.GroupElement(tag.UnderlyingProvisionOptionExerciseFrequencyPeriod),
				quickfix.GroupElement(tag.UnderlyingProvisionOptionExerciseFrequencyUnit),
				quickfix.GroupElement(tag.UnderlyingProvisionOptionExerciseStartDateUnadjusted),
				quickfix.GroupElement(tag.UnderlyingProvisionOptionExerciseStartDateRelativeTo),
				quickfix.GroupElement(tag.UnderlyingProvisionOptionExerciseStartDateOffsetPeriod),
				quickfix.GroupElement(tag.UnderlyingProvisionOptionExerciseStartDateOffsetUnit),
				quickfix.GroupElement(tag.UnderlyingProvisionOptionExerciseStartDateOffsetDayType),
				quickfix.GroupElement(tag.UnderlyingProvisionOptionExerciseStartDateAdjusted),
				quickfix.GroupElement(tag.UnderlyingProvisionOptionExercisePeriodSkip),
				quickfix.GroupElement(tag.UnderlyingProvisionOptionExerciseBoundsFirstDateUnadjusted),
				quickfix.GroupElement(tag.UnderlyingProvisionOptionExerciseBoundsLastDateUnadjusted),
				quickfix.GroupElement(tag.UnderlyingProvisionOptionExerciseEarliestTime),
				quickfix.GroupElement(tag.UnderlyingProvisionOptionExerciseEarliestTimeBusinessCenter),
				quickfix.GroupElement(tag.UnderlyingProvisionOptionExerciseLatestTime),
				quickfix.GroupElement(tag.UnderlyingProvisionOptionExerciseLatestTimeBusinessCenter),
				quickfix.GroupElement(tag.UnderlyingProvisionOptionExpirationDateUnadjusted),
				quickfix.GroupElement(tag.UnderlyingProvisionOptionExpirationDateBusinessDayConvention),
				NewNoUnderlyingProvisionOptionExpirationDateBusinessCentersRepeatingGroup(),
				quickfix.GroupElement(tag.UnderlyingProvisionOptionExpirationDateRelativeTo),
				quickfix.GroupElement(tag.UnderlyingProvisionOptionExpirationDateOffsetPeriod),
				quickfix.GroupElement(tag.UnderlyingProvisionOptionExpirationDateOffsetUnit),
				quickfix.GroupElement(tag.UnderlyingProvisionOptionExpirationDateOffsetDayType),
				quickfix.GroupElement(tag.UnderlyingProvisionOptionExpirationDateAdjusted),
				quickfix.GroupElement(tag.UnderlyingProvisionOptionExpirationTime),
				quickfix.GroupElement(tag.UnderlyingProvisionOptionExpirationTimeBusinessCenter),
				quickfix.GroupElement(tag.UnderlyingProvisionOptionRelevantUnderlyingDateUnadjusted),
				quickfix.GroupElement(tag.UnderlyingProvisionOptionRelevantUnderlyingDateBusinessDayConvention),
				NewNoUnderlyingProvisionOptionRelevantUnderlyingDateBusinessCentersRepeatingGroup(),
				quickfix.GroupElement(tag.UnderlyingProvisionOptionRelevantUnderlyingDateRelativeTo),
				quickfix.GroupElement(tag.UnderlyingProvisionOptionRelevantUnderlyingDateOffsetPeriod),
				quickfix.GroupElement(tag.UnderlyingProvisionOptionRelevantUnderlyingDateOffsetUnit),
				quickfix.GroupElement(tag.UnderlyingProvisionOptionRelevantUnderlyingDateOffsetDayType),
				quickfix.GroupElement(tag.UnderlyingProvisionOptionRelevantUnderlyingDateAdjusted),
				quickfix.GroupElement(tag.UnderlyingProvisionOptionExerciseStyle),
				quickfix.GroupElement(tag.UnderlyingProvisionOptionExerciseMultipleNotional),
				quickfix.GroupElement(tag.UnderlyingProvisionOptionExerciseMinimumNotional),
				quickfix.GroupElement(tag.UnderlyingProvisionOptionExerciseMaximumNotional),
				quickfix.GroupElement(tag.UnderlyingProvisionOptionMinimumNumber),
				quickfix.GroupElement(tag.UnderlyingProvisionOptionMaximumNumber),
				quickfix.GroupElement(tag.UnderlyingProvisionOptionExerciseConfirmation),
				quickfix.GroupElement(tag.UnderlyingProvisionCashSettlPaymentDateBusinessDayConvention),
				NewNoUnderlyingProvisionCashSettlPaymentDateBusinessCentersRepeatingGroup(),
				quickfix.GroupElement(tag.UnderlyingProvisionCashSettlPaymentDateRelativeTo),
				quickfix.GroupElement(tag.UnderlyingProvisionCashSettlPaymentDateOffsetPeriod),
				quickfix.GroupElement(tag.UnderlyingProvisionCashSettlPaymentDateOffsetUnit),
				quickfix.GroupElement(tag.UnderlyingProvisionCashSettlPaymentDateOffsetDayType),
				quickfix.GroupElement(tag.UnderlyingProvisionCashSettlPaymentDateRangeFirst),
				quickfix.GroupElement(tag.UnderlyingProvisionCashSettlPaymentDateRangeLast),
				NewNoUnderlyingProvisionCashSettlPaymentDatesRepeatingGroup(),
				quickfix.GroupElement(tag.UnderlyingProvisionCashSettlMethod),
				quickfix.GroupElement(tag.UnderlyingProvisionCashSettlCurrency),
				quickfix.GroupElement(tag.UnderlyingProvisionCashSettlCurrency2),
				quickfix.GroupElement(tag.UnderlyingProvisionCashSettlQuoteType),
				quickfix.GroupElement(tag.UnderlyingProvisionCashSettlQuoteSource),
				quickfix.GroupElement(tag.UnderlyingProvisionCashSettlQuoteReferencePage),
				quickfix.GroupElement(tag.UnderlyingProvisionText),
				quickfix.GroupElement(tag.EncodedUnderlyingProvisionTextLen),
				quickfix.GroupElement(tag.EncodedUnderlyingProvisionText),
				NewNoUnderlyingProvisionPartyIDsRepeatingGroup(),
				quickfix.GroupElement(tag.UnderlyingProvisionBreakFeeElection),
				quickfix.GroupElement(tag.UnderlyingProvisionBreakFeeRate),
			},
		),
	}
}

// Add create and append a new NoUnderlyingProvisions to this group.
func (m NoUnderlyingProvisionsRepeatingGroup) Add() NoUnderlyingProvisions {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingProvisions{g}
}

// Get returns the ith NoUnderlyingProvisions in the NoUnderlyingProvisionsRepeatinGroup.
func (m NoUnderlyingProvisionsRepeatingGroup) Get(i int) NoUnderlyingProvisions {
	return NoUnderlyingProvisions{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingDividendPayments is a repeating group element, Tag 42855.
type NoUnderlyingDividendPayments struct {
	*quickfix.Group
}

// SetUnderlyingDividendPaymentDate sets UnderlyingDividendPaymentDate, Tag 42856.
func (m NoUnderlyingDividendPayments) SetUnderlyingDividendPaymentDate(v string) {
	m.Set(field.NewUnderlyingDividendPaymentDate(v))
}

// SetUnderlyingDividendPaymentAmount sets UnderlyingDividendPaymentAmount, Tag 42857.
func (m NoUnderlyingDividendPayments) SetUnderlyingDividendPaymentAmount(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingDividendPaymentAmount(value, scale))
}

// SetUnderlyingDividendPaymentCurrency sets UnderlyingDividendPaymentCurrency, Tag 42858.
func (m NoUnderlyingDividendPayments) SetUnderlyingDividendPaymentCurrency(v string) {
	m.Set(field.NewUnderlyingDividendPaymentCurrency(v))
}

// SetUnderlyingDividendAccruedInterest sets UnderlyingDividendAccruedInterest, Tag 42859.
func (m NoUnderlyingDividendPayments) SetUnderlyingDividendAccruedInterest(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingDividendAccruedInterest(value, scale))
}

// GetUnderlyingDividendPaymentDate gets UnderlyingDividendPaymentDate, Tag 42856.
func (m NoUnderlyingDividendPayments) GetUnderlyingDividendPaymentDate() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingDividendPaymentDateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDividendPaymentAmount gets UnderlyingDividendPaymentAmount, Tag 42857.
func (m NoUnderlyingDividendPayments) GetUnderlyingDividendPaymentAmount() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingDividendPaymentAmountField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDividendPaymentCurrency gets UnderlyingDividendPaymentCurrency, Tag 42858.
func (m NoUnderlyingDividendPayments) GetUnderlyingDividendPaymentCurrency() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingDividendPaymentCurrencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDividendAccruedInterest gets UnderlyingDividendAccruedInterest, Tag 42859.
func (m NoUnderlyingDividendPayments) GetUnderlyingDividendAccruedInterest() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingDividendAccruedInterestField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingDividendPaymentDate returns true if UnderlyingDividendPaymentDate is present, Tag 42856.
func (m NoUnderlyingDividendPayments) HasUnderlyingDividendPaymentDate() bool {
	return m.Has(tag.UnderlyingDividendPaymentDate)
}

// HasUnderlyingDividendPaymentAmount returns true if UnderlyingDividendPaymentAmount is present, Tag 42857.
func (m NoUnderlyingDividendPayments) HasUnderlyingDividendPaymentAmount() bool {
	return m.Has(tag.UnderlyingDividendPaymentAmount)
}

// HasUnderlyingDividendPaymentCurrency returns true if UnderlyingDividendPaymentCurrency is present, Tag 42858.
func (m NoUnderlyingDividendPayments) HasUnderlyingDividendPaymentCurrency() bool {
	return m.Has(tag.UnderlyingDividendPaymentCurrency)
}

// HasUnderlyingDividendAccruedInterest returns true if UnderlyingDividendAccruedInterest is present, Tag 42859.
func (m NoUnderlyingDividendPayments) HasUnderlyingDividendAccruedInterest() bool {
	return m.Has(tag.UnderlyingDividendAccruedInterest)
}

// NoUnderlyingDividendPaymentsRepeatingGroup is a repeating group, Tag 42855.
type NoUnderlyingDividendPaymentsRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingDividendPaymentsRepeatingGroup returns an initialized, NoUnderlyingDividendPaymentsRepeatingGroup.
func NewNoUnderlyingDividendPaymentsRepeatingGroup() NoUnderlyingDividendPaymentsRepeatingGroup {
	return NoUnderlyingDividendPaymentsRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingDividendPayments,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingDividendPaymentDate),
				quickfix.GroupElement(tag.UnderlyingDividendPaymentAmount),
				quickfix.GroupElement(tag.UnderlyingDividendPaymentCurrency),
				quickfix.GroupElement(tag.UnderlyingDividendAccruedInterest),
			},
		),
	}
}

// Add create and append a new NoUnderlyingDividendPayments to this group.
func (m NoUnderlyingDividendPaymentsRepeatingGroup) Add() NoUnderlyingDividendPayments {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingDividendPayments{g}
}

// Get returns the ith NoUnderlyingDividendPayments in the NoUnderlyingDividendPaymentsRepeatinGroup.
func (m NoUnderlyingDividendPaymentsRepeatingGroup) Get(i int) NoUnderlyingDividendPayments {
	return NoUnderlyingDividendPayments{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingExtraordinaryEvents is a repeating group element, Tag 42884.
type NoUnderlyingExtraordinaryEvents struct {
	*quickfix.Group
}

// SetUnderlyingExtraordinaryEventType sets UnderlyingExtraordinaryEventType, Tag 42885.
func (m NoUnderlyingExtraordinaryEvents) SetUnderlyingExtraordinaryEventType(v string) {
	m.Set(field.NewUnderlyingExtraordinaryEventType(v))
}

// SetUnderlyingExtraordinaryEventValue sets UnderlyingExtraordinaryEventValue, Tag 42886.
func (m NoUnderlyingExtraordinaryEvents) SetUnderlyingExtraordinaryEventValue(v string) {
	m.Set(field.NewUnderlyingExtraordinaryEventValue(v))
}

// GetUnderlyingExtraordinaryEventType gets UnderlyingExtraordinaryEventType, Tag 42885.
func (m NoUnderlyingExtraordinaryEvents) GetUnderlyingExtraordinaryEventType() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingExtraordinaryEventTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingExtraordinaryEventValue gets UnderlyingExtraordinaryEventValue, Tag 42886.
func (m NoUnderlyingExtraordinaryEvents) GetUnderlyingExtraordinaryEventValue() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingExtraordinaryEventValueField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingExtraordinaryEventType returns true if UnderlyingExtraordinaryEventType is present, Tag 42885.
func (m NoUnderlyingExtraordinaryEvents) HasUnderlyingExtraordinaryEventType() bool {
	return m.Has(tag.UnderlyingExtraordinaryEventType)
}

// HasUnderlyingExtraordinaryEventValue returns true if UnderlyingExtraordinaryEventValue is present, Tag 42886.
func (m NoUnderlyingExtraordinaryEvents) HasUnderlyingExtraordinaryEventValue() bool {
	return m.Has(tag.UnderlyingExtraordinaryEventValue)
}

// NoUnderlyingExtraordinaryEventsRepeatingGroup is a repeating group, Tag 42884.
type NoUnderlyingExtraordinaryEventsRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingExtraordinaryEventsRepeatingGroup returns an initialized, NoUnderlyingExtraordinaryEventsRepeatingGroup.
func NewNoUnderlyingExtraordinaryEventsRepeatingGroup() NoUnderlyingExtraordinaryEventsRepeatingGroup {
	return NoUnderlyingExtraordinaryEventsRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingExtraordinaryEvents,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingExtraordinaryEventType),
				quickfix.GroupElement(tag.UnderlyingExtraordinaryEventValue),
			},
		),
	}
}

// Add create and append a new NoUnderlyingExtraordinaryEvents to this group.
func (m NoUnderlyingExtraordinaryEventsRepeatingGroup) Add() NoUnderlyingExtraordinaryEvents {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingExtraordinaryEvents{g}
}

// Get returns the ith NoUnderlyingExtraordinaryEvents in the NoUnderlyingExtraordinaryEventsRepeatinGroup.
func (m NoUnderlyingExtraordinaryEventsRepeatingGroup) Get(i int) NoUnderlyingExtraordinaryEvents {
	return NoUnderlyingExtraordinaryEvents{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingRateSpreadSteps is a repeating group element, Tag 43005.
type NoUnderlyingRateSpreadSteps struct {
	*quickfix.Group
}

// SetUnderlyingRateSpreadStepDate sets UnderlyingRateSpreadStepDate, Tag 43006.
func (m NoUnderlyingRateSpreadSteps) SetUnderlyingRateSpreadStepDate(v string) {
	m.Set(field.NewUnderlyingRateSpreadStepDate(v))
}

// SetUnderlyingRateSpreadStepValue sets UnderlyingRateSpreadStepValue, Tag 43007.
func (m NoUnderlyingRateSpreadSteps) SetUnderlyingRateSpreadStepValue(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingRateSpreadStepValue(value, scale))
}

// GetUnderlyingRateSpreadStepDate gets UnderlyingRateSpreadStepDate, Tag 43006.
func (m NoUnderlyingRateSpreadSteps) GetUnderlyingRateSpreadStepDate() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingRateSpreadStepDateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingRateSpreadStepValue gets UnderlyingRateSpreadStepValue, Tag 43007.
func (m NoUnderlyingRateSpreadSteps) GetUnderlyingRateSpreadStepValue() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingRateSpreadStepValueField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingRateSpreadStepDate returns true if UnderlyingRateSpreadStepDate is present, Tag 43006.
func (m NoUnderlyingRateSpreadSteps) HasUnderlyingRateSpreadStepDate() bool {
	return m.Has(tag.UnderlyingRateSpreadStepDate)
}

// HasUnderlyingRateSpreadStepValue returns true if UnderlyingRateSpreadStepValue is present, Tag 43007.
func (m NoUnderlyingRateSpreadSteps) HasUnderlyingRateSpreadStepValue() bool {
	return m.Has(tag.UnderlyingRateSpreadStepValue)
}

// NoUnderlyingRateSpreadStepsRepeatingGroup is a repeating group, Tag 43005.
type NoUnderlyingRateSpreadStepsRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingRateSpreadStepsRepeatingGroup returns an initialized, NoUnderlyingRateSpreadStepsRepeatingGroup.
func NewNoUnderlyingRateSpreadStepsRepeatingGroup() NoUnderlyingRateSpreadStepsRepeatingGroup {
	return NoUnderlyingRateSpreadStepsRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingRateSpreadSteps,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingRateSpreadStepDate),
				quickfix.GroupElement(tag.UnderlyingRateSpreadStepValue),
			},
		),
	}
}

// Add create and append a new NoUnderlyingRateSpreadSteps to this group.
func (m NoUnderlyingRateSpreadStepsRepeatingGroup) Add() NoUnderlyingRateSpreadSteps {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingRateSpreadSteps{g}
}

// Get returns the ith NoUnderlyingRateSpreadSteps in the NoUnderlyingRateSpreadStepsRepeatinGroup.
func (m NoUnderlyingRateSpreadStepsRepeatingGroup) Get(i int) NoUnderlyingRateSpreadSteps {
	return NoUnderlyingRateSpreadSteps{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingSettlMethodElectionDateBusinessCenters is a repeating group element, Tag 43074.
type NoUnderlyingSettlMethodElectionDateBusinessCenters struct {
	*quickfix.Group
}

// SetUnderlyingSettlMethodElectionDateBusinessCenter sets UnderlyingSettlMethodElectionDateBusinessCenter, Tag 43075.
func (m NoUnderlyingSettlMethodElectionDateBusinessCenters) SetUnderlyingSettlMethodElectionDateBusinessCenter(v string) {
	m.Set(field.NewUnderlyingSettlMethodElectionDateBusinessCenter(v))
}

// GetUnderlyingSettlMethodElectionDateBusinessCenter gets UnderlyingSettlMethodElectionDateBusinessCenter, Tag 43075.
func (m NoUnderlyingSettlMethodElectionDateBusinessCenters) GetUnderlyingSettlMethodElectionDateBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingSettlMethodElectionDateBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingSettlMethodElectionDateBusinessCenter returns true if UnderlyingSettlMethodElectionDateBusinessCenter is present, Tag 43075.
func (m NoUnderlyingSettlMethodElectionDateBusinessCenters) HasUnderlyingSettlMethodElectionDateBusinessCenter() bool {
	return m.Has(tag.UnderlyingSettlMethodElectionDateBusinessCenter)
}

// NoUnderlyingSettlMethodElectionDateBusinessCentersRepeatingGroup is a repeating group, Tag 43074.
type NoUnderlyingSettlMethodElectionDateBusinessCentersRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingSettlMethodElectionDateBusinessCentersRepeatingGroup returns an initialized, NoUnderlyingSettlMethodElectionDateBusinessCentersRepeatingGroup.
func NewNoUnderlyingSettlMethodElectionDateBusinessCentersRepeatingGroup() NoUnderlyingSettlMethodElectionDateBusinessCentersRepeatingGroup {
	return NoUnderlyingSettlMethodElectionDateBusinessCentersRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingSettlMethodElectionDateBusinessCenters,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingSettlMethodElectionDateBusinessCenter),
			},
		),
	}
}

// Add create and append a new NoUnderlyingSettlMethodElectionDateBusinessCenters to this group.
func (m NoUnderlyingSettlMethodElectionDateBusinessCentersRepeatingGroup) Add() NoUnderlyingSettlMethodElectionDateBusinessCenters {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingSettlMethodElectionDateBusinessCenters{g}
}

// Get returns the ith NoUnderlyingSettlMethodElectionDateBusinessCenters in the NoUnderlyingSettlMethodElectionDateBusinessCentersRepeatinGroup.
func (m NoUnderlyingSettlMethodElectionDateBusinessCentersRepeatingGroup) Get(i int) NoUnderlyingSettlMethodElectionDateBusinessCenters {
	return NoUnderlyingSettlMethodElectionDateBusinessCenters{m.RepeatingGroup.Get(i)}
}
