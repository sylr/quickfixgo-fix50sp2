package ordermasscancelreport

import (
	"time"

	"github.com/shopspring/decimal"

	"github.com/quickfixgo/enum"
	"github.com/quickfixgo/field"
	"github.com/quickfixgo/fixt11"
	"github.com/quickfixgo/quickfix"
	"github.com/quickfixgo/tag"
)

// OrderMassCancelReport is the fix50sp2 OrderMassCancelReport type, MsgType = r.
type OrderMassCancelReport struct {
	fixt11.Header
	*quickfix.Body
	fixt11.Trailer
	Message *quickfix.Message
}

// FromMessage creates a OrderMassCancelReport from a quickfix.Message instance.
func FromMessage(m *quickfix.Message) OrderMassCancelReport {
	return OrderMassCancelReport{
		Header:  fixt11.Header{&m.Header},
		Body:    &m.Body,
		Trailer: fixt11.Trailer{&m.Trailer},
		Message: m,
	}
}

// ToMessage returns a quickfix.Message instance.
func (m OrderMassCancelReport) ToMessage() *quickfix.Message {
	return m.Message
}

// New returns a OrderMassCancelReport initialized with the required fields for OrderMassCancelReport.
func New(orderid field.OrderIDField, massactionreportid field.MassActionReportIDField, masscancelrequesttype field.MassCancelRequestTypeField, masscancelresponse field.MassCancelResponseField) (m OrderMassCancelReport) {
	m.Message = quickfix.NewMessage()
	m.Header = fixt11.NewHeader(&m.Message.Header)
	m.Body = &m.Message.Body
	m.Trailer.Trailer = &m.Message.Trailer

	m.Header.Set(field.NewMsgType("r"))
	m.Set(orderid)
	m.Set(massactionreportid)
	m.Set(masscancelrequesttype)
	m.Set(masscancelresponse)

	return
}

// A RouteOut is the callback type that should be implemented for routing Message.
type RouteOut func(msg OrderMassCancelReport, sessionID quickfix.SessionID) quickfix.MessageRejectError

// Route returns the beginstring, message type, and MessageRoute for this Message type.
func Route(router RouteOut) (string, string, quickfix.MessageRoute) {
	r := func(msg *quickfix.Message, sessionID quickfix.SessionID) quickfix.MessageRejectError {
		return router(FromMessage(msg), sessionID)
	}
	return "9", "r", r
}

// SetClOrdID sets ClOrdID, Tag 11.
func (m OrderMassCancelReport) SetClOrdID(v string) {
	m.Set(field.NewClOrdID(v))
}

// SetSecurityIDSource sets SecurityIDSource, Tag 22.
func (m OrderMassCancelReport) SetSecurityIDSource(v enum.SecurityIDSource) {
	m.Set(field.NewSecurityIDSource(v))
}

// SetOrderID sets OrderID, Tag 37.
func (m OrderMassCancelReport) SetOrderID(v string) {
	m.Set(field.NewOrderID(v))
}

// SetSecurityID sets SecurityID, Tag 48.
func (m OrderMassCancelReport) SetSecurityID(v string) {
	m.Set(field.NewSecurityID(v))
}

// SetSide sets Side, Tag 54.
func (m OrderMassCancelReport) SetSide(v enum.Side) {
	m.Set(field.NewSide(v))
}

// SetSymbol sets Symbol, Tag 55.
func (m OrderMassCancelReport) SetSymbol(v string) {
	m.Set(field.NewSymbol(v))
}

// SetText sets Text, Tag 58.
func (m OrderMassCancelReport) SetText(v string) {
	m.Set(field.NewText(v))
}

// SetTransactTime sets TransactTime, Tag 60.
func (m OrderMassCancelReport) SetTransactTime(v time.Time) {
	m.Set(field.NewTransactTime(v))
}

// SetSymbolSfx sets SymbolSfx, Tag 65.
func (m OrderMassCancelReport) SetSymbolSfx(v enum.SymbolSfx) {
	m.Set(field.NewSymbolSfx(v))
}

// SetIssuer sets Issuer, Tag 106.
func (m OrderMassCancelReport) SetIssuer(v string) {
	m.Set(field.NewIssuer(v))
}

// SetSecurityDesc sets SecurityDesc, Tag 107.
func (m OrderMassCancelReport) SetSecurityDesc(v string) {
	m.Set(field.NewSecurityDesc(v))
}

// SetSecurityType sets SecurityType, Tag 167.
func (m OrderMassCancelReport) SetSecurityType(v enum.SecurityType) {
	m.Set(field.NewSecurityType(v))
}

// SetSecondaryOrderID sets SecondaryOrderID, Tag 198.
func (m OrderMassCancelReport) SetSecondaryOrderID(v string) {
	m.Set(field.NewSecondaryOrderID(v))
}

// SetMaturityMonthYear sets MaturityMonthYear, Tag 200.
func (m OrderMassCancelReport) SetMaturityMonthYear(v string) {
	m.Set(field.NewMaturityMonthYear(v))
}

// SetPutOrCall sets PutOrCall, Tag 201.
func (m OrderMassCancelReport) SetPutOrCall(v enum.PutOrCall) {
	m.Set(field.NewPutOrCall(v))
}

// SetStrikePrice sets StrikePrice, Tag 202.
func (m OrderMassCancelReport) SetStrikePrice(value decimal.Decimal, scale int32) {
	m.Set(field.NewStrikePrice(value, scale))
}

// SetOptAttribute sets OptAttribute, Tag 206.
func (m OrderMassCancelReport) SetOptAttribute(v string) {
	m.Set(field.NewOptAttribute(v))
}

// SetSecurityExchange sets SecurityExchange, Tag 207.
func (m OrderMassCancelReport) SetSecurityExchange(v string) {
	m.Set(field.NewSecurityExchange(v))
}

// SetCouponRate sets CouponRate, Tag 223.
func (m OrderMassCancelReport) SetCouponRate(value decimal.Decimal, scale int32) {
	m.Set(field.NewCouponRate(value, scale))
}

// SetCouponPaymentDate sets CouponPaymentDate, Tag 224.
func (m OrderMassCancelReport) SetCouponPaymentDate(v string) {
	m.Set(field.NewCouponPaymentDate(v))
}

// SetIssueDate sets IssueDate, Tag 225.
func (m OrderMassCancelReport) SetIssueDate(v string) {
	m.Set(field.NewIssueDate(v))
}

// SetRepurchaseTerm sets RepurchaseTerm, Tag 226.
func (m OrderMassCancelReport) SetRepurchaseTerm(v int) {
	m.Set(field.NewRepurchaseTerm(v))
}

// SetRepurchaseRate sets RepurchaseRate, Tag 227.
func (m OrderMassCancelReport) SetRepurchaseRate(value decimal.Decimal, scale int32) {
	m.Set(field.NewRepurchaseRate(value, scale))
}

// SetFactor sets Factor, Tag 228.
func (m OrderMassCancelReport) SetFactor(value decimal.Decimal, scale int32) {
	m.Set(field.NewFactor(value, scale))
}

// SetContractMultiplier sets ContractMultiplier, Tag 231.
func (m OrderMassCancelReport) SetContractMultiplier(value decimal.Decimal, scale int32) {
	m.Set(field.NewContractMultiplier(value, scale))
}

// SetRepoCollateralSecurityType sets RepoCollateralSecurityType, Tag 239.
func (m OrderMassCancelReport) SetRepoCollateralSecurityType(v string) {
	m.Set(field.NewRepoCollateralSecurityType(v))
}

// SetRedemptionDate sets RedemptionDate, Tag 240.
func (m OrderMassCancelReport) SetRedemptionDate(v string) {
	m.Set(field.NewRedemptionDate(v))
}

// SetUnderlyingCouponPaymentDate sets UnderlyingCouponPaymentDate, Tag 241.
func (m OrderMassCancelReport) SetUnderlyingCouponPaymentDate(v string) {
	m.Set(field.NewUnderlyingCouponPaymentDate(v))
}

// SetUnderlyingIssueDate sets UnderlyingIssueDate, Tag 242.
func (m OrderMassCancelReport) SetUnderlyingIssueDate(v string) {
	m.Set(field.NewUnderlyingIssueDate(v))
}

// SetUnderlyingRepoCollateralSecurityType sets UnderlyingRepoCollateralSecurityType, Tag 243.
func (m OrderMassCancelReport) SetUnderlyingRepoCollateralSecurityType(v string) {
	m.Set(field.NewUnderlyingRepoCollateralSecurityType(v))
}

// SetUnderlyingRepurchaseTerm sets UnderlyingRepurchaseTerm, Tag 244.
func (m OrderMassCancelReport) SetUnderlyingRepurchaseTerm(v int) {
	m.Set(field.NewUnderlyingRepurchaseTerm(v))
}

// SetUnderlyingRepurchaseRate sets UnderlyingRepurchaseRate, Tag 245.
func (m OrderMassCancelReport) SetUnderlyingRepurchaseRate(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingRepurchaseRate(value, scale))
}

// SetUnderlyingFactor sets UnderlyingFactor, Tag 246.
func (m OrderMassCancelReport) SetUnderlyingFactor(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingFactor(value, scale))
}

// SetUnderlyingRedemptionDate sets UnderlyingRedemptionDate, Tag 247.
func (m OrderMassCancelReport) SetUnderlyingRedemptionDate(v string) {
	m.Set(field.NewUnderlyingRedemptionDate(v))
}

// SetCreditRating sets CreditRating, Tag 255.
func (m OrderMassCancelReport) SetCreditRating(v string) {
	m.Set(field.NewCreditRating(v))
}

// SetUnderlyingCreditRating sets UnderlyingCreditRating, Tag 256.
func (m OrderMassCancelReport) SetUnderlyingCreditRating(v string) {
	m.Set(field.NewUnderlyingCreditRating(v))
}

// SetUnderlyingSecurityIDSource sets UnderlyingSecurityIDSource, Tag 305.
func (m OrderMassCancelReport) SetUnderlyingSecurityIDSource(v string) {
	m.Set(field.NewUnderlyingSecurityIDSource(v))
}

// SetUnderlyingIssuer sets UnderlyingIssuer, Tag 306.
func (m OrderMassCancelReport) SetUnderlyingIssuer(v string) {
	m.Set(field.NewUnderlyingIssuer(v))
}

// SetUnderlyingSecurityDesc sets UnderlyingSecurityDesc, Tag 307.
func (m OrderMassCancelReport) SetUnderlyingSecurityDesc(v string) {
	m.Set(field.NewUnderlyingSecurityDesc(v))
}

// SetUnderlyingSecurityExchange sets UnderlyingSecurityExchange, Tag 308.
func (m OrderMassCancelReport) SetUnderlyingSecurityExchange(v string) {
	m.Set(field.NewUnderlyingSecurityExchange(v))
}

// SetUnderlyingSecurityID sets UnderlyingSecurityID, Tag 309.
func (m OrderMassCancelReport) SetUnderlyingSecurityID(v string) {
	m.Set(field.NewUnderlyingSecurityID(v))
}

// SetUnderlyingSecurityType sets UnderlyingSecurityType, Tag 310.
func (m OrderMassCancelReport) SetUnderlyingSecurityType(v string) {
	m.Set(field.NewUnderlyingSecurityType(v))
}

// SetUnderlyingSymbol sets UnderlyingSymbol, Tag 311.
func (m OrderMassCancelReport) SetUnderlyingSymbol(v string) {
	m.Set(field.NewUnderlyingSymbol(v))
}

// SetUnderlyingSymbolSfx sets UnderlyingSymbolSfx, Tag 312.
func (m OrderMassCancelReport) SetUnderlyingSymbolSfx(v string) {
	m.Set(field.NewUnderlyingSymbolSfx(v))
}

// SetUnderlyingMaturityMonthYear sets UnderlyingMaturityMonthYear, Tag 313.
func (m OrderMassCancelReport) SetUnderlyingMaturityMonthYear(v string) {
	m.Set(field.NewUnderlyingMaturityMonthYear(v))
}

// SetUnderlyingPutOrCall sets UnderlyingPutOrCall, Tag 315.
func (m OrderMassCancelReport) SetUnderlyingPutOrCall(v int) {
	m.Set(field.NewUnderlyingPutOrCall(v))
}

// SetUnderlyingStrikePrice sets UnderlyingStrikePrice, Tag 316.
func (m OrderMassCancelReport) SetUnderlyingStrikePrice(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingStrikePrice(value, scale))
}

// SetUnderlyingOptAttribute sets UnderlyingOptAttribute, Tag 317.
func (m OrderMassCancelReport) SetUnderlyingOptAttribute(v string) {
	m.Set(field.NewUnderlyingOptAttribute(v))
}

// SetUnderlyingCurrency sets UnderlyingCurrency, Tag 318.
func (m OrderMassCancelReport) SetUnderlyingCurrency(v string) {
	m.Set(field.NewUnderlyingCurrency(v))
}

// SetTradingSessionID sets TradingSessionID, Tag 336.
func (m OrderMassCancelReport) SetTradingSessionID(v enum.TradingSessionID) {
	m.Set(field.NewTradingSessionID(v))
}

// SetEncodedIssuerLen sets EncodedIssuerLen, Tag 348.
func (m OrderMassCancelReport) SetEncodedIssuerLen(v int) {
	m.Set(field.NewEncodedIssuerLen(v))
}

// SetEncodedIssuer sets EncodedIssuer, Tag 349.
func (m OrderMassCancelReport) SetEncodedIssuer(v string) {
	m.Set(field.NewEncodedIssuer(v))
}

// SetEncodedSecurityDescLen sets EncodedSecurityDescLen, Tag 350.
func (m OrderMassCancelReport) SetEncodedSecurityDescLen(v int) {
	m.Set(field.NewEncodedSecurityDescLen(v))
}

// SetEncodedSecurityDesc sets EncodedSecurityDesc, Tag 351.
func (m OrderMassCancelReport) SetEncodedSecurityDesc(v string) {
	m.Set(field.NewEncodedSecurityDesc(v))
}

// SetEncodedTextLen sets EncodedTextLen, Tag 354.
func (m OrderMassCancelReport) SetEncodedTextLen(v int) {
	m.Set(field.NewEncodedTextLen(v))
}

// SetEncodedText sets EncodedText, Tag 355.
func (m OrderMassCancelReport) SetEncodedText(v string) {
	m.Set(field.NewEncodedText(v))
}

// SetEncodedUnderlyingIssuerLen sets EncodedUnderlyingIssuerLen, Tag 362.
func (m OrderMassCancelReport) SetEncodedUnderlyingIssuerLen(v int) {
	m.Set(field.NewEncodedUnderlyingIssuerLen(v))
}

// SetEncodedUnderlyingIssuer sets EncodedUnderlyingIssuer, Tag 363.
func (m OrderMassCancelReport) SetEncodedUnderlyingIssuer(v string) {
	m.Set(field.NewEncodedUnderlyingIssuer(v))
}

// SetEncodedUnderlyingSecurityDescLen sets EncodedUnderlyingSecurityDescLen, Tag 364.
func (m OrderMassCancelReport) SetEncodedUnderlyingSecurityDescLen(v int) {
	m.Set(field.NewEncodedUnderlyingSecurityDescLen(v))
}

// SetEncodedUnderlyingSecurityDesc sets EncodedUnderlyingSecurityDesc, Tag 365.
func (m OrderMassCancelReport) SetEncodedUnderlyingSecurityDesc(v string) {
	m.Set(field.NewEncodedUnderlyingSecurityDesc(v))
}

// SetUnderlyingCouponRate sets UnderlyingCouponRate, Tag 435.
func (m OrderMassCancelReport) SetUnderlyingCouponRate(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingCouponRate(value, scale))
}

// SetUnderlyingContractMultiplier sets UnderlyingContractMultiplier, Tag 436.
func (m OrderMassCancelReport) SetUnderlyingContractMultiplier(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingContractMultiplier(value, scale))
}

// SetNoPartyIDs sets NoPartyIDs, Tag 453.
func (m OrderMassCancelReport) SetNoPartyIDs(f NoPartyIDsRepeatingGroup) {
	m.SetGroup(f)
}

// SetNoSecurityAltID sets NoSecurityAltID, Tag 454.
func (m OrderMassCancelReport) SetNoSecurityAltID(f NoSecurityAltIDRepeatingGroup) {
	m.SetGroup(f)
}

// SetNoUnderlyingSecurityAltID sets NoUnderlyingSecurityAltID, Tag 457.
func (m OrderMassCancelReport) SetNoUnderlyingSecurityAltID(f NoUnderlyingSecurityAltIDRepeatingGroup) {
	m.SetGroup(f)
}

// SetProduct sets Product, Tag 460.
func (m OrderMassCancelReport) SetProduct(v enum.Product) {
	m.Set(field.NewProduct(v))
}

// SetCFICode sets CFICode, Tag 461.
func (m OrderMassCancelReport) SetCFICode(v string) {
	m.Set(field.NewCFICode(v))
}

// SetUnderlyingProduct sets UnderlyingProduct, Tag 462.
func (m OrderMassCancelReport) SetUnderlyingProduct(v int) {
	m.Set(field.NewUnderlyingProduct(v))
}

// SetUnderlyingCFICode sets UnderlyingCFICode, Tag 463.
func (m OrderMassCancelReport) SetUnderlyingCFICode(v string) {
	m.Set(field.NewUnderlyingCFICode(v))
}

// SetCountryOfIssue sets CountryOfIssue, Tag 470.
func (m OrderMassCancelReport) SetCountryOfIssue(v string) {
	m.Set(field.NewCountryOfIssue(v))
}

// SetStateOrProvinceOfIssue sets StateOrProvinceOfIssue, Tag 471.
func (m OrderMassCancelReport) SetStateOrProvinceOfIssue(v string) {
	m.Set(field.NewStateOrProvinceOfIssue(v))
}

// SetLocaleOfIssue sets LocaleOfIssue, Tag 472.
func (m OrderMassCancelReport) SetLocaleOfIssue(v string) {
	m.Set(field.NewLocaleOfIssue(v))
}

// SetSecondaryClOrdID sets SecondaryClOrdID, Tag 526.
func (m OrderMassCancelReport) SetSecondaryClOrdID(v string) {
	m.Set(field.NewSecondaryClOrdID(v))
}

// SetMassCancelRequestType sets MassCancelRequestType, Tag 530.
func (m OrderMassCancelReport) SetMassCancelRequestType(v enum.MassCancelRequestType) {
	m.Set(field.NewMassCancelRequestType(v))
}

// SetMassCancelResponse sets MassCancelResponse, Tag 531.
func (m OrderMassCancelReport) SetMassCancelResponse(v enum.MassCancelResponse) {
	m.Set(field.NewMassCancelResponse(v))
}

// SetMassCancelRejectReason sets MassCancelRejectReason, Tag 532.
func (m OrderMassCancelReport) SetMassCancelRejectReason(v enum.MassCancelRejectReason) {
	m.Set(field.NewMassCancelRejectReason(v))
}

// SetTotalAffectedOrders sets TotalAffectedOrders, Tag 533.
func (m OrderMassCancelReport) SetTotalAffectedOrders(v int) {
	m.Set(field.NewTotalAffectedOrders(v))
}

// SetNoAffectedOrders sets NoAffectedOrders, Tag 534.
func (m OrderMassCancelReport) SetNoAffectedOrders(f NoAffectedOrdersRepeatingGroup) {
	m.SetGroup(f)
}

// SetMaturityDate sets MaturityDate, Tag 541.
func (m OrderMassCancelReport) SetMaturityDate(v string) {
	m.Set(field.NewMaturityDate(v))
}

// SetUnderlyingMaturityDate sets UnderlyingMaturityDate, Tag 542.
func (m OrderMassCancelReport) SetUnderlyingMaturityDate(v string) {
	m.Set(field.NewUnderlyingMaturityDate(v))
}

// SetInstrRegistry sets InstrRegistry, Tag 543.
func (m OrderMassCancelReport) SetInstrRegistry(v enum.InstrRegistry) {
	m.Set(field.NewInstrRegistry(v))
}

// SetUnderlyingCountryOfIssue sets UnderlyingCountryOfIssue, Tag 592.
func (m OrderMassCancelReport) SetUnderlyingCountryOfIssue(v string) {
	m.Set(field.NewUnderlyingCountryOfIssue(v))
}

// SetUnderlyingStateOrProvinceOfIssue sets UnderlyingStateOrProvinceOfIssue, Tag 593.
func (m OrderMassCancelReport) SetUnderlyingStateOrProvinceOfIssue(v string) {
	m.Set(field.NewUnderlyingStateOrProvinceOfIssue(v))
}

// SetUnderlyingLocaleOfIssue sets UnderlyingLocaleOfIssue, Tag 594.
func (m OrderMassCancelReport) SetUnderlyingLocaleOfIssue(v string) {
	m.Set(field.NewUnderlyingLocaleOfIssue(v))
}

// SetUnderlyingInstrRegistry sets UnderlyingInstrRegistry, Tag 595.
func (m OrderMassCancelReport) SetUnderlyingInstrRegistry(v string) {
	m.Set(field.NewUnderlyingInstrRegistry(v))
}

// SetTradingSessionSubID sets TradingSessionSubID, Tag 625.
func (m OrderMassCancelReport) SetTradingSessionSubID(v enum.TradingSessionSubID) {
	m.Set(field.NewTradingSessionSubID(v))
}

// SetContractSettlMonth sets ContractSettlMonth, Tag 667.
func (m OrderMassCancelReport) SetContractSettlMonth(v string) {
	m.Set(field.NewContractSettlMonth(v))
}

// SetPool sets Pool, Tag 691.
func (m OrderMassCancelReport) SetPool(v string) {
	m.Set(field.NewPool(v))
}

// SetSecuritySubType sets SecuritySubType, Tag 762.
func (m OrderMassCancelReport) SetSecuritySubType(v string) {
	m.Set(field.NewSecuritySubType(v))
}

// SetUnderlyingSecuritySubType sets UnderlyingSecuritySubType, Tag 763.
func (m OrderMassCancelReport) SetUnderlyingSecuritySubType(v string) {
	m.Set(field.NewUnderlyingSecuritySubType(v))
}

// SetUnderlyingPx sets UnderlyingPx, Tag 810.
func (m OrderMassCancelReport) SetUnderlyingPx(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingPx(value, scale))
}

// SetNoEvents sets NoEvents, Tag 864.
func (m OrderMassCancelReport) SetNoEvents(f NoEventsRepeatingGroup) {
	m.SetGroup(f)
}

// SetDatedDate sets DatedDate, Tag 873.
func (m OrderMassCancelReport) SetDatedDate(v string) {
	m.Set(field.NewDatedDate(v))
}

// SetInterestAccrualDate sets InterestAccrualDate, Tag 874.
func (m OrderMassCancelReport) SetInterestAccrualDate(v string) {
	m.Set(field.NewInterestAccrualDate(v))
}

// SetCPProgram sets CPProgram, Tag 875.
func (m OrderMassCancelReport) SetCPProgram(v enum.CPProgram) {
	m.Set(field.NewCPProgram(v))
}

// SetCPRegType sets CPRegType, Tag 876.
func (m OrderMassCancelReport) SetCPRegType(v string) {
	m.Set(field.NewCPRegType(v))
}

// SetUnderlyingCPProgram sets UnderlyingCPProgram, Tag 877.
func (m OrderMassCancelReport) SetUnderlyingCPProgram(v int) {
	m.Set(field.NewUnderlyingCPProgram(v))
}

// SetUnderlyingCPRegType sets UnderlyingCPRegType, Tag 878.
func (m OrderMassCancelReport) SetUnderlyingCPRegType(v string) {
	m.Set(field.NewUnderlyingCPRegType(v))
}

// SetUnderlyingQty sets UnderlyingQty, Tag 879.
func (m OrderMassCancelReport) SetUnderlyingQty(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingQty(value, scale))
}

// SetUnderlyingDirtyPrice sets UnderlyingDirtyPrice, Tag 882.
func (m OrderMassCancelReport) SetUnderlyingDirtyPrice(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingDirtyPrice(value, scale))
}

// SetUnderlyingEndPrice sets UnderlyingEndPrice, Tag 883.
func (m OrderMassCancelReport) SetUnderlyingEndPrice(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingEndPrice(value, scale))
}

// SetUnderlyingStartValue sets UnderlyingStartValue, Tag 884.
func (m OrderMassCancelReport) SetUnderlyingStartValue(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingStartValue(value, scale))
}

// SetUnderlyingCurrentValue sets UnderlyingCurrentValue, Tag 885.
func (m OrderMassCancelReport) SetUnderlyingCurrentValue(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingCurrentValue(value, scale))
}

// SetUnderlyingEndValue sets UnderlyingEndValue, Tag 886.
func (m OrderMassCancelReport) SetUnderlyingEndValue(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingEndValue(value, scale))
}

// SetNoUnderlyingStips sets NoUnderlyingStips, Tag 887.
func (m OrderMassCancelReport) SetNoUnderlyingStips(f NoUnderlyingStipsRepeatingGroup) {
	m.SetGroup(f)
}

// SetUnderlyingStrikeCurrency sets UnderlyingStrikeCurrency, Tag 941.
func (m OrderMassCancelReport) SetUnderlyingStrikeCurrency(v string) {
	m.Set(field.NewUnderlyingStrikeCurrency(v))
}

// SetStrikeCurrency sets StrikeCurrency, Tag 947.
func (m OrderMassCancelReport) SetStrikeCurrency(v string) {
	m.Set(field.NewStrikeCurrency(v))
}

// SetSecurityStatus sets SecurityStatus, Tag 965.
func (m OrderMassCancelReport) SetSecurityStatus(v enum.SecurityStatus) {
	m.Set(field.NewSecurityStatus(v))
}

// SetSettleOnOpenFlag sets SettleOnOpenFlag, Tag 966.
func (m OrderMassCancelReport) SetSettleOnOpenFlag(v string) {
	m.Set(field.NewSettleOnOpenFlag(v))
}

// SetStrikeMultiplier sets StrikeMultiplier, Tag 967.
func (m OrderMassCancelReport) SetStrikeMultiplier(value decimal.Decimal, scale int32) {
	m.Set(field.NewStrikeMultiplier(value, scale))
}

// SetStrikeValue sets StrikeValue, Tag 968.
func (m OrderMassCancelReport) SetStrikeValue(value decimal.Decimal, scale int32) {
	m.Set(field.NewStrikeValue(value, scale))
}

// SetMinPriceIncrement sets MinPriceIncrement, Tag 969.
func (m OrderMassCancelReport) SetMinPriceIncrement(value decimal.Decimal, scale int32) {
	m.Set(field.NewMinPriceIncrement(value, scale))
}

// SetPositionLimit sets PositionLimit, Tag 970.
func (m OrderMassCancelReport) SetPositionLimit(v int) {
	m.Set(field.NewPositionLimit(v))
}

// SetNTPositionLimit sets NTPositionLimit, Tag 971.
func (m OrderMassCancelReport) SetNTPositionLimit(v int) {
	m.Set(field.NewNTPositionLimit(v))
}

// SetUnderlyingAllocationPercent sets UnderlyingAllocationPercent, Tag 972.
func (m OrderMassCancelReport) SetUnderlyingAllocationPercent(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingAllocationPercent(value, scale))
}

// SetUnderlyingCashAmount sets UnderlyingCashAmount, Tag 973.
func (m OrderMassCancelReport) SetUnderlyingCashAmount(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingCashAmount(value, scale))
}

// SetUnderlyingCashType sets UnderlyingCashType, Tag 974.
func (m OrderMassCancelReport) SetUnderlyingCashType(v enum.UnderlyingCashType) {
	m.Set(field.NewUnderlyingCashType(v))
}

// SetUnderlyingSettlementType sets UnderlyingSettlementType, Tag 975.
func (m OrderMassCancelReport) SetUnderlyingSettlementType(v enum.UnderlyingSettlementType) {
	m.Set(field.NewUnderlyingSettlementType(v))
}

// SetUnitOfMeasure sets UnitOfMeasure, Tag 996.
func (m OrderMassCancelReport) SetUnitOfMeasure(v enum.UnitOfMeasure) {
	m.Set(field.NewUnitOfMeasure(v))
}

// SetTimeUnit sets TimeUnit, Tag 997.
func (m OrderMassCancelReport) SetTimeUnit(v enum.TimeUnit) {
	m.Set(field.NewTimeUnit(v))
}

// SetUnderlyingUnitOfMeasure sets UnderlyingUnitOfMeasure, Tag 998.
func (m OrderMassCancelReport) SetUnderlyingUnitOfMeasure(v string) {
	m.Set(field.NewUnderlyingUnitOfMeasure(v))
}

// SetUnderlyingTimeUnit sets UnderlyingTimeUnit, Tag 1000.
func (m OrderMassCancelReport) SetUnderlyingTimeUnit(v string) {
	m.Set(field.NewUnderlyingTimeUnit(v))
}

// SetNoInstrumentParties sets NoInstrumentParties, Tag 1018.
func (m OrderMassCancelReport) SetNoInstrumentParties(f NoInstrumentPartiesRepeatingGroup) {
	m.SetGroup(f)
}

// SetUnderlyingCapValue sets UnderlyingCapValue, Tag 1038.
func (m OrderMassCancelReport) SetUnderlyingCapValue(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingCapValue(value, scale))
}

// SetUnderlyingSettlMethod sets UnderlyingSettlMethod, Tag 1039.
func (m OrderMassCancelReport) SetUnderlyingSettlMethod(v string) {
	m.Set(field.NewUnderlyingSettlMethod(v))
}

// SetUnderlyingAdjustedQuantity sets UnderlyingAdjustedQuantity, Tag 1044.
func (m OrderMassCancelReport) SetUnderlyingAdjustedQuantity(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingAdjustedQuantity(value, scale))
}

// SetUnderlyingFXRate sets UnderlyingFXRate, Tag 1045.
func (m OrderMassCancelReport) SetUnderlyingFXRate(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingFXRate(value, scale))
}

// SetUnderlyingFXRateCalc sets UnderlyingFXRateCalc, Tag 1046.
func (m OrderMassCancelReport) SetUnderlyingFXRateCalc(v enum.UnderlyingFXRateCalc) {
	m.Set(field.NewUnderlyingFXRateCalc(v))
}

// SetInstrmtAssignmentMethod sets InstrmtAssignmentMethod, Tag 1049.
func (m OrderMassCancelReport) SetInstrmtAssignmentMethod(v enum.InstrmtAssignmentMethod) {
	m.Set(field.NewInstrmtAssignmentMethod(v))
}

// SetNoUndlyInstrumentParties sets NoUndlyInstrumentParties, Tag 1058.
func (m OrderMassCancelReport) SetNoUndlyInstrumentParties(f NoUndlyInstrumentPartiesRepeatingGroup) {
	m.SetGroup(f)
}

// SetMaturityTime sets MaturityTime, Tag 1079.
func (m OrderMassCancelReport) SetMaturityTime(v string) {
	m.Set(field.NewMaturityTime(v))
}

// SetMinPriceIncrementAmount sets MinPriceIncrementAmount, Tag 1146.
func (m OrderMassCancelReport) SetMinPriceIncrementAmount(value decimal.Decimal, scale int32) {
	m.Set(field.NewMinPriceIncrementAmount(value, scale))
}

// SetUnitOfMeasureQty sets UnitOfMeasureQty, Tag 1147.
func (m OrderMassCancelReport) SetUnitOfMeasureQty(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnitOfMeasureQty(value, scale))
}

// SetSecurityGroup sets SecurityGroup, Tag 1151.
func (m OrderMassCancelReport) SetSecurityGroup(v string) {
	m.Set(field.NewSecurityGroup(v))
}

// SetSecurityXMLLen sets SecurityXMLLen, Tag 1184.
func (m OrderMassCancelReport) SetSecurityXMLLen(v int) {
	m.Set(field.NewSecurityXMLLen(v))
}

// SetSecurityXML sets SecurityXML, Tag 1185.
func (m OrderMassCancelReport) SetSecurityXML(v string) {
	m.Set(field.NewSecurityXML(v))
}

// SetSecurityXMLSchema sets SecurityXMLSchema, Tag 1186.
func (m OrderMassCancelReport) SetSecurityXMLSchema(v string) {
	m.Set(field.NewSecurityXMLSchema(v))
}

// SetPriceUnitOfMeasure sets PriceUnitOfMeasure, Tag 1191.
func (m OrderMassCancelReport) SetPriceUnitOfMeasure(v string) {
	m.Set(field.NewPriceUnitOfMeasure(v))
}

// SetPriceUnitOfMeasureQty sets PriceUnitOfMeasureQty, Tag 1192.
func (m OrderMassCancelReport) SetPriceUnitOfMeasureQty(value decimal.Decimal, scale int32) {
	m.Set(field.NewPriceUnitOfMeasureQty(value, scale))
}

// SetSettlMethod sets SettlMethod, Tag 1193.
func (m OrderMassCancelReport) SetSettlMethod(v enum.SettlMethod) {
	m.Set(field.NewSettlMethod(v))
}

// SetExerciseStyle sets ExerciseStyle, Tag 1194.
func (m OrderMassCancelReport) SetExerciseStyle(v enum.ExerciseStyle) {
	m.Set(field.NewExerciseStyle(v))
}

// SetOptPayoutAmount sets OptPayoutAmount, Tag 1195.
func (m OrderMassCancelReport) SetOptPayoutAmount(value decimal.Decimal, scale int32) {
	m.Set(field.NewOptPayoutAmount(value, scale))
}

// SetPriceQuoteMethod sets PriceQuoteMethod, Tag 1196.
func (m OrderMassCancelReport) SetPriceQuoteMethod(v enum.PriceQuoteMethod) {
	m.Set(field.NewPriceQuoteMethod(v))
}

// SetValuationMethod sets ValuationMethod, Tag 1197.
func (m OrderMassCancelReport) SetValuationMethod(v enum.ValuationMethod) {
	m.Set(field.NewValuationMethod(v))
}

// SetListMethod sets ListMethod, Tag 1198.
func (m OrderMassCancelReport) SetListMethod(v enum.ListMethod) {
	m.Set(field.NewListMethod(v))
}

// SetCapPrice sets CapPrice, Tag 1199.
func (m OrderMassCancelReport) SetCapPrice(value decimal.Decimal, scale int32) {
	m.Set(field.NewCapPrice(value, scale))
}

// SetFloorPrice sets FloorPrice, Tag 1200.
func (m OrderMassCancelReport) SetFloorPrice(value decimal.Decimal, scale int32) {
	m.Set(field.NewFloorPrice(value, scale))
}

// SetUnderlyingMaturityTime sets UnderlyingMaturityTime, Tag 1213.
func (m OrderMassCancelReport) SetUnderlyingMaturityTime(v string) {
	m.Set(field.NewUnderlyingMaturityTime(v))
}

// SetProductComplex sets ProductComplex, Tag 1227.
func (m OrderMassCancelReport) SetProductComplex(v string) {
	m.Set(field.NewProductComplex(v))
}

// SetFlexProductEligibilityIndicator sets FlexProductEligibilityIndicator, Tag 1242.
func (m OrderMassCancelReport) SetFlexProductEligibilityIndicator(v bool) {
	m.Set(field.NewFlexProductEligibilityIndicator(v))
}

// SetFlexibleIndicator sets FlexibleIndicator, Tag 1244.
func (m OrderMassCancelReport) SetFlexibleIndicator(v bool) {
	m.Set(field.NewFlexibleIndicator(v))
}

// SetMarketSegmentID sets MarketSegmentID, Tag 1300.
func (m OrderMassCancelReport) SetMarketSegmentID(v string) {
	m.Set(field.NewMarketSegmentID(v))
}

// SetMarketID sets MarketID, Tag 1301.
func (m OrderMassCancelReport) SetMarketID(v string) {
	m.Set(field.NewMarketID(v))
}

// SetMassActionReportID sets MassActionReportID, Tag 1369.
func (m OrderMassCancelReport) SetMassActionReportID(v string) {
	m.Set(field.NewMassActionReportID(v))
}

// SetNoNotAffectedOrders sets NoNotAffectedOrders, Tag 1370.
func (m OrderMassCancelReport) SetNoNotAffectedOrders(f NoNotAffectedOrdersRepeatingGroup) {
	m.SetGroup(f)
}

// SetUnderlyingExerciseStyle sets UnderlyingExerciseStyle, Tag 1419.
func (m OrderMassCancelReport) SetUnderlyingExerciseStyle(v int) {
	m.Set(field.NewUnderlyingExerciseStyle(v))
}

// SetUnderlyingUnitOfMeasureQty sets UnderlyingUnitOfMeasureQty, Tag 1423.
func (m OrderMassCancelReport) SetUnderlyingUnitOfMeasureQty(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingUnitOfMeasureQty(value, scale))
}

// SetUnderlyingPriceUnitOfMeasure sets UnderlyingPriceUnitOfMeasure, Tag 1424.
func (m OrderMassCancelReport) SetUnderlyingPriceUnitOfMeasure(v string) {
	m.Set(field.NewUnderlyingPriceUnitOfMeasure(v))
}

// SetUnderlyingPriceUnitOfMeasureQty sets UnderlyingPriceUnitOfMeasureQty, Tag 1425.
func (m OrderMassCancelReport) SetUnderlyingPriceUnitOfMeasureQty(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingPriceUnitOfMeasureQty(value, scale))
}

// SetContractMultiplierUnit sets ContractMultiplierUnit, Tag 1435.
func (m OrderMassCancelReport) SetContractMultiplierUnit(v enum.ContractMultiplierUnit) {
	m.Set(field.NewContractMultiplierUnit(v))
}

// SetUnderlyingContractMultiplierUnit sets UnderlyingContractMultiplierUnit, Tag 1437.
func (m OrderMassCancelReport) SetUnderlyingContractMultiplierUnit(v int) {
	m.Set(field.NewUnderlyingContractMultiplierUnit(v))
}

// SetFlowScheduleType sets FlowScheduleType, Tag 1439.
func (m OrderMassCancelReport) SetFlowScheduleType(v enum.FlowScheduleType) {
	m.Set(field.NewFlowScheduleType(v))
}

// SetUnderlyingFlowScheduleType sets UnderlyingFlowScheduleType, Tag 1441.
func (m OrderMassCancelReport) SetUnderlyingFlowScheduleType(v int) {
	m.Set(field.NewUnderlyingFlowScheduleType(v))
}

// SetRestructuringType sets RestructuringType, Tag 1449.
func (m OrderMassCancelReport) SetRestructuringType(v enum.RestructuringType) {
	m.Set(field.NewRestructuringType(v))
}

// SetSeniority sets Seniority, Tag 1450.
func (m OrderMassCancelReport) SetSeniority(v enum.Seniority) {
	m.Set(field.NewSeniority(v))
}

// SetNotionalPercentageOutstanding sets NotionalPercentageOutstanding, Tag 1451.
func (m OrderMassCancelReport) SetNotionalPercentageOutstanding(value decimal.Decimal, scale int32) {
	m.Set(field.NewNotionalPercentageOutstanding(value, scale))
}

// SetOriginalNotionalPercentageOutstanding sets OriginalNotionalPercentageOutstanding, Tag 1452.
func (m OrderMassCancelReport) SetOriginalNotionalPercentageOutstanding(value decimal.Decimal, scale int32) {
	m.Set(field.NewOriginalNotionalPercentageOutstanding(value, scale))
}

// SetUnderlyingRestructuringType sets UnderlyingRestructuringType, Tag 1453.
func (m OrderMassCancelReport) SetUnderlyingRestructuringType(v string) {
	m.Set(field.NewUnderlyingRestructuringType(v))
}

// SetUnderlyingSeniority sets UnderlyingSeniority, Tag 1454.
func (m OrderMassCancelReport) SetUnderlyingSeniority(v string) {
	m.Set(field.NewUnderlyingSeniority(v))
}

// SetUnderlyingNotionalPercentageOutstanding sets UnderlyingNotionalPercentageOutstanding, Tag 1455.
func (m OrderMassCancelReport) SetUnderlyingNotionalPercentageOutstanding(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingNotionalPercentageOutstanding(value, scale))
}

// SetUnderlyingOriginalNotionalPercentageOutstanding sets UnderlyingOriginalNotionalPercentageOutstanding, Tag 1456.
func (m OrderMassCancelReport) SetUnderlyingOriginalNotionalPercentageOutstanding(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingOriginalNotionalPercentageOutstanding(value, scale))
}

// SetAttachmentPoint sets AttachmentPoint, Tag 1457.
func (m OrderMassCancelReport) SetAttachmentPoint(value decimal.Decimal, scale int32) {
	m.Set(field.NewAttachmentPoint(value, scale))
}

// SetDetachmentPoint sets DetachmentPoint, Tag 1458.
func (m OrderMassCancelReport) SetDetachmentPoint(value decimal.Decimal, scale int32) {
	m.Set(field.NewDetachmentPoint(value, scale))
}

// SetUnderlyingAttachmentPoint sets UnderlyingAttachmentPoint, Tag 1459.
func (m OrderMassCancelReport) SetUnderlyingAttachmentPoint(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingAttachmentPoint(value, scale))
}

// SetUnderlyingDetachmentPoint sets UnderlyingDetachmentPoint, Tag 1460.
func (m OrderMassCancelReport) SetUnderlyingDetachmentPoint(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingDetachmentPoint(value, scale))
}

// SetNoTargetPartyIDs sets NoTargetPartyIDs, Tag 1461.
func (m OrderMassCancelReport) SetNoTargetPartyIDs(f NoTargetPartyIDsRepeatingGroup) {
	m.SetGroup(f)
}

// SetStrikePriceDeterminationMethod sets StrikePriceDeterminationMethod, Tag 1478.
func (m OrderMassCancelReport) SetStrikePriceDeterminationMethod(v enum.StrikePriceDeterminationMethod) {
	m.Set(field.NewStrikePriceDeterminationMethod(v))
}

// SetStrikePriceBoundaryMethod sets StrikePriceBoundaryMethod, Tag 1479.
func (m OrderMassCancelReport) SetStrikePriceBoundaryMethod(v enum.StrikePriceBoundaryMethod) {
	m.Set(field.NewStrikePriceBoundaryMethod(v))
}

// SetStrikePriceBoundaryPrecision sets StrikePriceBoundaryPrecision, Tag 1480.
func (m OrderMassCancelReport) SetStrikePriceBoundaryPrecision(value decimal.Decimal, scale int32) {
	m.Set(field.NewStrikePriceBoundaryPrecision(value, scale))
}

// SetUnderlyingPriceDeterminationMethod sets UnderlyingPriceDeterminationMethod, Tag 1481.
func (m OrderMassCancelReport) SetUnderlyingPriceDeterminationMethod(v enum.UnderlyingPriceDeterminationMethod) {
	m.Set(field.NewUnderlyingPriceDeterminationMethod(v))
}

// SetOptPayoutType sets OptPayoutType, Tag 1482.
func (m OrderMassCancelReport) SetOptPayoutType(v enum.OptPayoutType) {
	m.Set(field.NewOptPayoutType(v))
}

// SetNoComplexEvents sets NoComplexEvents, Tag 1483.
func (m OrderMassCancelReport) SetNoComplexEvents(f NoComplexEventsRepeatingGroup) {
	m.SetGroup(f)
}

// SetPriceQuoteCurrency sets PriceQuoteCurrency, Tag 1524.
func (m OrderMassCancelReport) SetPriceQuoteCurrency(v string) {
	m.Set(field.NewPriceQuoteCurrency(v))
}

// SetUnderlyingPriceQuoteCurrency sets UnderlyingPriceQuoteCurrency, Tag 1526.
func (m OrderMassCancelReport) SetUnderlyingPriceQuoteCurrency(v string) {
	m.Set(field.NewUnderlyingPriceQuoteCurrency(v))
}

// SetSwapSubClass sets SwapSubClass, Tag 1575.
func (m OrderMassCancelReport) SetSwapSubClass(v enum.SwapSubClass) {
	m.Set(field.NewSwapSubClass(v))
}

// SetSettlRateIndex sets SettlRateIndex, Tag 1577.
func (m OrderMassCancelReport) SetSettlRateIndex(v string) {
	m.Set(field.NewSettlRateIndex(v))
}

// SetSettlRateIndexLocation sets SettlRateIndexLocation, Tag 1580.
func (m OrderMassCancelReport) SetSettlRateIndexLocation(v string) {
	m.Set(field.NewSettlRateIndexLocation(v))
}

// SetOptionExpirationDesc sets OptionExpirationDesc, Tag 1581.
func (m OrderMassCancelReport) SetOptionExpirationDesc(v string) {
	m.Set(field.NewOptionExpirationDesc(v))
}

// SetEncodedOptionExpirationDescLen sets EncodedOptionExpirationDescLen, Tag 1678.
func (m OrderMassCancelReport) SetEncodedOptionExpirationDescLen(v int) {
	m.Set(field.NewEncodedOptionExpirationDescLen(v))
}

// SetShortSaleRestriction sets ShortSaleRestriction, Tag 1687.
func (m OrderMassCancelReport) SetShortSaleRestriction(v enum.ShortSaleRestriction) {
	m.Set(field.NewShortSaleRestriction(v))
}

// SetEncodedOptionExpirationDesc sets EncodedOptionExpirationDesc, Tag 1697.
func (m OrderMassCancelReport) SetEncodedOptionExpirationDesc(v string) {
	m.Set(field.NewEncodedOptionExpirationDesc(v))
}

// SetStrikeUnitOfMeasure sets StrikeUnitOfMeasure, Tag 1698.
func (m OrderMassCancelReport) SetStrikeUnitOfMeasure(v string) {
	m.Set(field.NewStrikeUnitOfMeasure(v))
}

// SetUnitOfMeasureCurrency sets UnitOfMeasureCurrency, Tag 1716.
func (m OrderMassCancelReport) SetUnitOfMeasureCurrency(v string) {
	m.Set(field.NewUnitOfMeasureCurrency(v))
}

// SetPriceUnitOfMeasureCurrency sets PriceUnitOfMeasureCurrency, Tag 1717.
func (m OrderMassCancelReport) SetPriceUnitOfMeasureCurrency(v string) {
	m.Set(field.NewPriceUnitOfMeasureCurrency(v))
}

// SetUnderlyingUnitOfMeasureCurrency sets UnderlyingUnitOfMeasureCurrency, Tag 1718.
func (m OrderMassCancelReport) SetUnderlyingUnitOfMeasureCurrency(v string) {
	m.Set(field.NewUnderlyingUnitOfMeasureCurrency(v))
}

// SetUnderlyingPriceUnitOfMeasureCurrency sets UnderlyingPriceUnitOfMeasureCurrency, Tag 1719.
func (m OrderMassCancelReport) SetUnderlyingPriceUnitOfMeasureCurrency(v string) {
	m.Set(field.NewUnderlyingPriceUnitOfMeasureCurrency(v))
}

// SetObligationType sets ObligationType, Tag 1739.
func (m OrderMassCancelReport) SetObligationType(v enum.ObligationType) {
	m.Set(field.NewObligationType(v))
}

// SetRefTickTableID sets RefTickTableID, Tag 1787.
func (m OrderMassCancelReport) SetRefTickTableID(v int) {
	m.Set(field.NewRefTickTableID(v))
}

// SetUnderlyingContractPriceRefMonth sets UnderlyingContractPriceRefMonth, Tag 1837.
func (m OrderMassCancelReport) SetUnderlyingContractPriceRefMonth(v string) {
	m.Set(field.NewUnderlyingContractPriceRefMonth(v))
}

// SetStrikeIndex sets StrikeIndex, Tag 1866.
func (m OrderMassCancelReport) SetStrikeIndex(v string) {
	m.Set(field.NewStrikeIndex(v))
}

// SetUnderlyingSecurityXMLLen sets UnderlyingSecurityXMLLen, Tag 1874.
func (m OrderMassCancelReport) SetUnderlyingSecurityXMLLen(v int) {
	m.Set(field.NewUnderlyingSecurityXMLLen(v))
}

// SetUnderlyingSecurityXML sets UnderlyingSecurityXML, Tag 1875.
func (m OrderMassCancelReport) SetUnderlyingSecurityXML(v string) {
	m.Set(field.NewUnderlyingSecurityXML(v))
}

// SetUnderlyingSecurityXMLSchema sets UnderlyingSecurityXMLSchema, Tag 1876.
func (m OrderMassCancelReport) SetUnderlyingSecurityXMLSchema(v string) {
	m.Set(field.NewUnderlyingSecurityXMLSchema(v))
}

// SetAssetClass sets AssetClass, Tag 1938.
func (m OrderMassCancelReport) SetAssetClass(v enum.AssetClass) {
	m.Set(field.NewAssetClass(v))
}

// SetAssetSubClass sets AssetSubClass, Tag 1939.
func (m OrderMassCancelReport) SetAssetSubClass(v enum.AssetSubClass) {
	m.Set(field.NewAssetSubClass(v))
}

// SetAssetType sets AssetType, Tag 1940.
func (m OrderMassCancelReport) SetAssetType(v string) {
	m.Set(field.NewAssetType(v))
}

// SetSwapClass sets SwapClass, Tag 1941.
func (m OrderMassCancelReport) SetSwapClass(v enum.SwapClass) {
	m.Set(field.NewSwapClass(v))
}

// SetNthToDefault sets NthToDefault, Tag 1942.
func (m OrderMassCancelReport) SetNthToDefault(v int) {
	m.Set(field.NewNthToDefault(v))
}

// SetMthToDefault sets MthToDefault, Tag 1943.
func (m OrderMassCancelReport) SetMthToDefault(v int) {
	m.Set(field.NewMthToDefault(v))
}

// SetSettledEntityMatrixSource sets SettledEntityMatrixSource, Tag 1944.
func (m OrderMassCancelReport) SetSettledEntityMatrixSource(v string) {
	m.Set(field.NewSettledEntityMatrixSource(v))
}

// SetSettledEntityMatrixPublicationDate sets SettledEntityMatrixPublicationDate, Tag 1945.
func (m OrderMassCancelReport) SetSettledEntityMatrixPublicationDate(v string) {
	m.Set(field.NewSettledEntityMatrixPublicationDate(v))
}

// SetCouponType sets CouponType, Tag 1946.
func (m OrderMassCancelReport) SetCouponType(v enum.CouponType) {
	m.Set(field.NewCouponType(v))
}

// SetTotalIssuedAmount sets TotalIssuedAmount, Tag 1947.
func (m OrderMassCancelReport) SetTotalIssuedAmount(value decimal.Decimal, scale int32) {
	m.Set(field.NewTotalIssuedAmount(value, scale))
}

// SetCouponFrequencyPeriod sets CouponFrequencyPeriod, Tag 1948.
func (m OrderMassCancelReport) SetCouponFrequencyPeriod(v int) {
	m.Set(field.NewCouponFrequencyPeriod(v))
}

// SetCouponFrequencyUnit sets CouponFrequencyUnit, Tag 1949.
func (m OrderMassCancelReport) SetCouponFrequencyUnit(v enum.CouponFrequencyUnit) {
	m.Set(field.NewCouponFrequencyUnit(v))
}

// SetCouponDayCount sets CouponDayCount, Tag 1950.
func (m OrderMassCancelReport) SetCouponDayCount(v enum.CouponDayCount) {
	m.Set(field.NewCouponDayCount(v))
}

// SetConvertibleBondEquityID sets ConvertibleBondEquityID, Tag 1951.
func (m OrderMassCancelReport) SetConvertibleBondEquityID(v string) {
	m.Set(field.NewConvertibleBondEquityID(v))
}

// SetConvertibleBondEquityIDSource sets ConvertibleBondEquityIDSource, Tag 1952.
func (m OrderMassCancelReport) SetConvertibleBondEquityIDSource(v string) {
	m.Set(field.NewConvertibleBondEquityIDSource(v))
}

// SetContractPriceRefMonth sets ContractPriceRefMonth, Tag 1953.
func (m OrderMassCancelReport) SetContractPriceRefMonth(v string) {
	m.Set(field.NewContractPriceRefMonth(v))
}

// SetLienSeniority sets LienSeniority, Tag 1954.
func (m OrderMassCancelReport) SetLienSeniority(v enum.LienSeniority) {
	m.Set(field.NewLienSeniority(v))
}

// SetLoanFacility sets LoanFacility, Tag 1955.
func (m OrderMassCancelReport) SetLoanFacility(v enum.LoanFacility) {
	m.Set(field.NewLoanFacility(v))
}

// SetReferenceEntityType sets ReferenceEntityType, Tag 1956.
func (m OrderMassCancelReport) SetReferenceEntityType(v enum.ReferenceEntityType) {
	m.Set(field.NewReferenceEntityType(v))
}

// SetIndexSeries sets IndexSeries, Tag 1957.
func (m OrderMassCancelReport) SetIndexSeries(v int) {
	m.Set(field.NewIndexSeries(v))
}

// SetIndexAnnexVersion sets IndexAnnexVersion, Tag 1958.
func (m OrderMassCancelReport) SetIndexAnnexVersion(v int) {
	m.Set(field.NewIndexAnnexVersion(v))
}

// SetIndexAnnexDate sets IndexAnnexDate, Tag 1959.
func (m OrderMassCancelReport) SetIndexAnnexDate(v string) {
	m.Set(field.NewIndexAnnexDate(v))
}

// SetIndexAnnexSource sets IndexAnnexSource, Tag 1960.
func (m OrderMassCancelReport) SetIndexAnnexSource(v string) {
	m.Set(field.NewIndexAnnexSource(v))
}

// SetNoSecondaryAssetClasses sets NoSecondaryAssetClasses, Tag 1976.
func (m OrderMassCancelReport) SetNoSecondaryAssetClasses(f NoSecondaryAssetClassesRepeatingGroup) {
	m.SetGroup(f)
}

// SetNoUnderlyingEvents sets NoUnderlyingEvents, Tag 1981.
func (m OrderMassCancelReport) SetNoUnderlyingEvents(f NoUnderlyingEventsRepeatingGroup) {
	m.SetGroup(f)
}

// SetUnderlyingConstituentWeight sets UnderlyingConstituentWeight, Tag 1988.
func (m OrderMassCancelReport) SetUnderlyingConstituentWeight(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingConstituentWeight(value, scale))
}

// SetUnderlyingCouponType sets UnderlyingCouponType, Tag 1989.
func (m OrderMassCancelReport) SetUnderlyingCouponType(v int) {
	m.Set(field.NewUnderlyingCouponType(v))
}

// SetUnderlyingTotalIssuedAmount sets UnderlyingTotalIssuedAmount, Tag 1990.
func (m OrderMassCancelReport) SetUnderlyingTotalIssuedAmount(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingTotalIssuedAmount(value, scale))
}

// SetUnderlyingCouponFrequencyPeriod sets UnderlyingCouponFrequencyPeriod, Tag 1991.
func (m OrderMassCancelReport) SetUnderlyingCouponFrequencyPeriod(v int) {
	m.Set(field.NewUnderlyingCouponFrequencyPeriod(v))
}

// SetUnderlyingCouponFrequencyUnit sets UnderlyingCouponFrequencyUnit, Tag 1992.
func (m OrderMassCancelReport) SetUnderlyingCouponFrequencyUnit(v string) {
	m.Set(field.NewUnderlyingCouponFrequencyUnit(v))
}

// SetUnderlyingCouponDayCount sets UnderlyingCouponDayCount, Tag 1993.
func (m OrderMassCancelReport) SetUnderlyingCouponDayCount(v int) {
	m.Set(field.NewUnderlyingCouponDayCount(v))
}

// SetUnderlyingObligationID sets UnderlyingObligationID, Tag 1994.
func (m OrderMassCancelReport) SetUnderlyingObligationID(v string) {
	m.Set(field.NewUnderlyingObligationID(v))
}

// SetUnderlyingObligationIDSource sets UnderlyingObligationIDSource, Tag 1995.
func (m OrderMassCancelReport) SetUnderlyingObligationIDSource(v string) {
	m.Set(field.NewUnderlyingObligationIDSource(v))
}

// SetUnderlyingEquityID sets UnderlyingEquityID, Tag 1996.
func (m OrderMassCancelReport) SetUnderlyingEquityID(v string) {
	m.Set(field.NewUnderlyingEquityID(v))
}

// SetUnderlyingEquityIDSource sets UnderlyingEquityIDSource, Tag 1997.
func (m OrderMassCancelReport) SetUnderlyingEquityIDSource(v string) {
	m.Set(field.NewUnderlyingEquityIDSource(v))
}

// SetUnderlyingLienSeniority sets UnderlyingLienSeniority, Tag 1998.
func (m OrderMassCancelReport) SetUnderlyingLienSeniority(v int) {
	m.Set(field.NewUnderlyingLienSeniority(v))
}

// SetUnderlyingLoanFacility sets UnderlyingLoanFacility, Tag 1999.
func (m OrderMassCancelReport) SetUnderlyingLoanFacility(v int) {
	m.Set(field.NewUnderlyingLoanFacility(v))
}

// SetUnderlyingReferenceEntityType sets UnderlyingReferenceEntityType, Tag 2000.
func (m OrderMassCancelReport) SetUnderlyingReferenceEntityType(v int) {
	m.Set(field.NewUnderlyingReferenceEntityType(v))
}

// SetStrikeIndexSpread sets StrikeIndexSpread, Tag 2001.
func (m OrderMassCancelReport) SetStrikeIndexSpread(value decimal.Decimal, scale int32) {
	m.Set(field.NewStrikeIndexSpread(value, scale))
}

// SetValuationSource sets ValuationSource, Tag 2002.
func (m OrderMassCancelReport) SetValuationSource(v string) {
	m.Set(field.NewValuationSource(v))
}

// SetUnderlyingIndexSeries sets UnderlyingIndexSeries, Tag 2003.
func (m OrderMassCancelReport) SetUnderlyingIndexSeries(v int) {
	m.Set(field.NewUnderlyingIndexSeries(v))
}

// SetUnderlyingIndexAnnexVersion sets UnderlyingIndexAnnexVersion, Tag 2004.
func (m OrderMassCancelReport) SetUnderlyingIndexAnnexVersion(v int) {
	m.Set(field.NewUnderlyingIndexAnnexVersion(v))
}

// SetUnderlyingIndexAnnexDate sets UnderlyingIndexAnnexDate, Tag 2005.
func (m OrderMassCancelReport) SetUnderlyingIndexAnnexDate(v string) {
	m.Set(field.NewUnderlyingIndexAnnexDate(v))
}

// SetUnderlyingIndexAnnexSource sets UnderlyingIndexAnnexSource, Tag 2006.
func (m OrderMassCancelReport) SetUnderlyingIndexAnnexSource(v string) {
	m.Set(field.NewUnderlyingIndexAnnexSource(v))
}

// SetUnderlyingProductComplex sets UnderlyingProductComplex, Tag 2007.
func (m OrderMassCancelReport) SetUnderlyingProductComplex(v string) {
	m.Set(field.NewUnderlyingProductComplex(v))
}

// SetUnderlyingSecurityGroup sets UnderlyingSecurityGroup, Tag 2008.
func (m OrderMassCancelReport) SetUnderlyingSecurityGroup(v string) {
	m.Set(field.NewUnderlyingSecurityGroup(v))
}

// SetUnderlyingSettleOnOpenFlag sets UnderlyingSettleOnOpenFlag, Tag 2009.
func (m OrderMassCancelReport) SetUnderlyingSettleOnOpenFlag(v string) {
	m.Set(field.NewUnderlyingSettleOnOpenFlag(v))
}

// SetUnderlyingAssignmentMethod sets UnderlyingAssignmentMethod, Tag 2010.
func (m OrderMassCancelReport) SetUnderlyingAssignmentMethod(v string) {
	m.Set(field.NewUnderlyingAssignmentMethod(v))
}

// SetUnderlyingSecurityStatus sets UnderlyingSecurityStatus, Tag 2011.
func (m OrderMassCancelReport) SetUnderlyingSecurityStatus(v string) {
	m.Set(field.NewUnderlyingSecurityStatus(v))
}

// SetUnderlyingObligationType sets UnderlyingObligationType, Tag 2012.
func (m OrderMassCancelReport) SetUnderlyingObligationType(v enum.UnderlyingObligationType) {
	m.Set(field.NewUnderlyingObligationType(v))
}

// SetUnderlyingAssetClass sets UnderlyingAssetClass, Tag 2013.
func (m OrderMassCancelReport) SetUnderlyingAssetClass(v int) {
	m.Set(field.NewUnderlyingAssetClass(v))
}

// SetUnderlyingAssetSubClass sets UnderlyingAssetSubClass, Tag 2014.
func (m OrderMassCancelReport) SetUnderlyingAssetSubClass(v int) {
	m.Set(field.NewUnderlyingAssetSubClass(v))
}

// SetUnderlyingAssetType sets UnderlyingAssetType, Tag 2015.
func (m OrderMassCancelReport) SetUnderlyingAssetType(v string) {
	m.Set(field.NewUnderlyingAssetType(v))
}

// SetUnderlyingSwapClass sets UnderlyingSwapClass, Tag 2016.
func (m OrderMassCancelReport) SetUnderlyingSwapClass(v string) {
	m.Set(field.NewUnderlyingSwapClass(v))
}

// SetUnderlyingNthToDefault sets UnderlyingNthToDefault, Tag 2017.
func (m OrderMassCancelReport) SetUnderlyingNthToDefault(v int) {
	m.Set(field.NewUnderlyingNthToDefault(v))
}

// SetUnderlyingMthToDefault sets UnderlyingMthToDefault, Tag 2018.
func (m OrderMassCancelReport) SetUnderlyingMthToDefault(v int) {
	m.Set(field.NewUnderlyingMthToDefault(v))
}

// SetUnderlyingSettledEntityMatrixSource sets UnderlyingSettledEntityMatrixSource, Tag 2019.
func (m OrderMassCancelReport) SetUnderlyingSettledEntityMatrixSource(v string) {
	m.Set(field.NewUnderlyingSettledEntityMatrixSource(v))
}

// SetUnderlyingSettledEntityMatrixPublicationDate sets UnderlyingSettledEntityMatrixPublicationDate, Tag 2020.
func (m OrderMassCancelReport) SetUnderlyingSettledEntityMatrixPublicationDate(v string) {
	m.Set(field.NewUnderlyingSettledEntityMatrixPublicationDate(v))
}

// SetUnderlyingStrikeMultiplier sets UnderlyingStrikeMultiplier, Tag 2021.
func (m OrderMassCancelReport) SetUnderlyingStrikeMultiplier(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingStrikeMultiplier(value, scale))
}

// SetUnderlyingStrikeValue sets UnderlyingStrikeValue, Tag 2022.
func (m OrderMassCancelReport) SetUnderlyingStrikeValue(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingStrikeValue(value, scale))
}

// SetUnderlyingStrikePriceDeterminationMethod sets UnderlyingStrikePriceDeterminationMethod, Tag 2023.
func (m OrderMassCancelReport) SetUnderlyingStrikePriceDeterminationMethod(v int) {
	m.Set(field.NewUnderlyingStrikePriceDeterminationMethod(v))
}

// SetUnderlyingStrikePriceBoundaryMethod sets UnderlyingStrikePriceBoundaryMethod, Tag 2024.
func (m OrderMassCancelReport) SetUnderlyingStrikePriceBoundaryMethod(v int) {
	m.Set(field.NewUnderlyingStrikePriceBoundaryMethod(v))
}

// SetUnderlyingStrikePriceBoundaryPrecision sets UnderlyingStrikePriceBoundaryPrecision, Tag 2025.
func (m OrderMassCancelReport) SetUnderlyingStrikePriceBoundaryPrecision(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingStrikePriceBoundaryPrecision(value, scale))
}

// SetUnderlyingMinPriceIncrement sets UnderlyingMinPriceIncrement, Tag 2026.
func (m OrderMassCancelReport) SetUnderlyingMinPriceIncrement(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingMinPriceIncrement(value, scale))
}

// SetUnderlyingMinPriceIncrementAmount sets UnderlyingMinPriceIncrementAmount, Tag 2027.
func (m OrderMassCancelReport) SetUnderlyingMinPriceIncrementAmount(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingMinPriceIncrementAmount(value, scale))
}

// SetUnderlyingOptPayoutType sets UnderlyingOptPayoutType, Tag 2028.
func (m OrderMassCancelReport) SetUnderlyingOptPayoutType(v int) {
	m.Set(field.NewUnderlyingOptPayoutType(v))
}

// SetUnderlyingOptPayoutAmount sets UnderlyingOptPayoutAmount, Tag 2029.
func (m OrderMassCancelReport) SetUnderlyingOptPayoutAmount(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingOptPayoutAmount(value, scale))
}

// SetUnderlyingPriceQuoteMethod sets UnderlyingPriceQuoteMethod, Tag 2030.
func (m OrderMassCancelReport) SetUnderlyingPriceQuoteMethod(v string) {
	m.Set(field.NewUnderlyingPriceQuoteMethod(v))
}

// SetUnderlyingValuationMethod sets UnderlyingValuationMethod, Tag 2031.
func (m OrderMassCancelReport) SetUnderlyingValuationMethod(v string) {
	m.Set(field.NewUnderlyingValuationMethod(v))
}

// SetUnderlyingListMethod sets UnderlyingListMethod, Tag 2032.
func (m OrderMassCancelReport) SetUnderlyingListMethod(v int) {
	m.Set(field.NewUnderlyingListMethod(v))
}

// SetUnderlyingCapPrice sets UnderlyingCapPrice, Tag 2033.
func (m OrderMassCancelReport) SetUnderlyingCapPrice(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingCapPrice(value, scale))
}

// SetUnderlyingFloorPrice sets UnderlyingFloorPrice, Tag 2034.
func (m OrderMassCancelReport) SetUnderlyingFloorPrice(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingFloorPrice(value, scale))
}

// SetUnderlyingFlexibleIndicator sets UnderlyingFlexibleIndicator, Tag 2035.
func (m OrderMassCancelReport) SetUnderlyingFlexibleIndicator(v bool) {
	m.Set(field.NewUnderlyingFlexibleIndicator(v))
}

// SetUnderlyingFlexProductEligibilityIndicator sets UnderlyingFlexProductEligibilityIndicator, Tag 2036.
func (m OrderMassCancelReport) SetUnderlyingFlexProductEligibilityIndicator(v bool) {
	m.Set(field.NewUnderlyingFlexProductEligibilityIndicator(v))
}

// SetUnderlyingPositionLimit sets UnderlyingPositionLimit, Tag 2037.
func (m OrderMassCancelReport) SetUnderlyingPositionLimit(v int) {
	m.Set(field.NewUnderlyingPositionLimit(v))
}

// SetUnderlyingNTPositionLimit sets UnderlyingNTPositionLimit, Tag 2038.
func (m OrderMassCancelReport) SetUnderlyingNTPositionLimit(v int) {
	m.Set(field.NewUnderlyingNTPositionLimit(v))
}

// SetUnderlyingPool sets UnderlyingPool, Tag 2039.
func (m OrderMassCancelReport) SetUnderlyingPool(v string) {
	m.Set(field.NewUnderlyingPool(v))
}

// SetUnderlyingContractSettlMonth sets UnderlyingContractSettlMonth, Tag 2040.
func (m OrderMassCancelReport) SetUnderlyingContractSettlMonth(v string) {
	m.Set(field.NewUnderlyingContractSettlMonth(v))
}

// SetUnderlyingDatedDate sets UnderlyingDatedDate, Tag 2041.
func (m OrderMassCancelReport) SetUnderlyingDatedDate(v string) {
	m.Set(field.NewUnderlyingDatedDate(v))
}

// SetUnderlyingInterestAccrualDate sets UnderlyingInterestAccrualDate, Tag 2042.
func (m OrderMassCancelReport) SetUnderlyingInterestAccrualDate(v string) {
	m.Set(field.NewUnderlyingInterestAccrualDate(v))
}

// SetUnderlyingShortSaleRestriction sets UnderlyingShortSaleRestriction, Tag 2043.
func (m OrderMassCancelReport) SetUnderlyingShortSaleRestriction(v int) {
	m.Set(field.NewUnderlyingShortSaleRestriction(v))
}

// SetUnderlyingRefTickTableID sets UnderlyingRefTickTableID, Tag 2044.
func (m OrderMassCancelReport) SetUnderlyingRefTickTableID(v int) {
	m.Set(field.NewUnderlyingRefTickTableID(v))
}

// SetNoUnderlyingComplexEvents sets NoUnderlyingComplexEvents, Tag 2045.
func (m OrderMassCancelReport) SetNoUnderlyingComplexEvents(f NoUnderlyingComplexEventsRepeatingGroup) {
	m.SetGroup(f)
}

// SetNoUnderlyingSecondaryAssetClasses sets NoUnderlyingSecondaryAssetClasses, Tag 2080.
func (m OrderMassCancelReport) SetNoUnderlyingSecondaryAssetClasses(f NoUnderlyingSecondaryAssetClassesRepeatingGroup) {
	m.SetGroup(f)
}

// SetValuationReferenceModel sets ValuationReferenceModel, Tag 2140.
func (m OrderMassCancelReport) SetValuationReferenceModel(v string) {
	m.Set(field.NewValuationReferenceModel(v))
}

// SetStrategyType sets StrategyType, Tag 2141.
func (m OrderMassCancelReport) SetStrategyType(v enum.StrategyType) {
	m.Set(field.NewStrategyType(v))
}

// SetCommonPricingIndicator sets CommonPricingIndicator, Tag 2142.
func (m OrderMassCancelReport) SetCommonPricingIndicator(v bool) {
	m.Set(field.NewCommonPricingIndicator(v))
}

// SetSettlDisruptionProvision sets SettlDisruptionProvision, Tag 2143.
func (m OrderMassCancelReport) SetSettlDisruptionProvision(v enum.SettlDisruptionProvision) {
	m.Set(field.NewSettlDisruptionProvision(v))
}

// SetInstrumentRoundingDirection sets InstrumentRoundingDirection, Tag 2144.
func (m OrderMassCancelReport) SetInstrumentRoundingDirection(v string) {
	m.Set(field.NewInstrumentRoundingDirection(v))
}

// SetInstrumentRoundingPrecision sets InstrumentRoundingPrecision, Tag 2145.
func (m OrderMassCancelReport) SetInstrumentRoundingPrecision(v int) {
	m.Set(field.NewInstrumentRoundingPrecision(v))
}

// SetAssetGroup sets AssetGroup, Tag 2210.
func (m OrderMassCancelReport) SetAssetGroup(v enum.AssetGroup) {
	m.Set(field.NewAssetGroup(v))
}

// SetUnderlyingSettlRateIndex sets UnderlyingSettlRateIndex, Tag 2284.
func (m OrderMassCancelReport) SetUnderlyingSettlRateIndex(v string) {
	m.Set(field.NewUnderlyingSettlRateIndex(v))
}

// SetUnderlyingSettlRateIndexLocation sets UnderlyingSettlRateIndexLocation, Tag 2285.
func (m OrderMassCancelReport) SetUnderlyingSettlRateIndexLocation(v string) {
	m.Set(field.NewUnderlyingSettlRateIndexLocation(v))
}

// SetUnderlyingOptionExpirationDesc sets UnderlyingOptionExpirationDesc, Tag 2286.
func (m OrderMassCancelReport) SetUnderlyingOptionExpirationDesc(v string) {
	m.Set(field.NewUnderlyingOptionExpirationDesc(v))
}

// SetEncodedUnderlyingOptionExpirationDescLen sets EncodedUnderlyingOptionExpirationDescLen, Tag 2287.
func (m OrderMassCancelReport) SetEncodedUnderlyingOptionExpirationDescLen(v int) {
	m.Set(field.NewEncodedUnderlyingOptionExpirationDescLen(v))
}

// SetEncodedUnderlyingOptionExpirationDesc sets EncodedUnderlyingOptionExpirationDesc, Tag 2288.
func (m OrderMassCancelReport) SetEncodedUnderlyingOptionExpirationDesc(v string) {
	m.Set(field.NewEncodedUnderlyingOptionExpirationDesc(v))
}

// SetUnderlyingSwapSubClass sets UnderlyingSwapSubClass, Tag 2289.
func (m OrderMassCancelReport) SetUnderlyingSwapSubClass(v string) {
	m.Set(field.NewUnderlyingSwapSubClass(v))
}

// SetUnderlyingStrikeUnitOfMeasure sets UnderlyingStrikeUnitOfMeasure, Tag 2290.
func (m OrderMassCancelReport) SetUnderlyingStrikeUnitOfMeasure(v string) {
	m.Set(field.NewUnderlyingStrikeUnitOfMeasure(v))
}

// SetUnderlyingStrikeIndex sets UnderlyingStrikeIndex, Tag 2291.
func (m OrderMassCancelReport) SetUnderlyingStrikeIndex(v string) {
	m.Set(field.NewUnderlyingStrikeIndex(v))
}

// SetUnderlyingStrikeIndexSpread sets UnderlyingStrikeIndexSpread, Tag 2292.
func (m OrderMassCancelReport) SetUnderlyingStrikeIndexSpread(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingStrikeIndexSpread(value, scale))
}

// SetUnderlyingValuationSource sets UnderlyingValuationSource, Tag 2293.
func (m OrderMassCancelReport) SetUnderlyingValuationSource(v string) {
	m.Set(field.NewUnderlyingValuationSource(v))
}

// SetUnderlyingValuationReferenceModel sets UnderlyingValuationReferenceModel, Tag 2294.
func (m OrderMassCancelReport) SetUnderlyingValuationReferenceModel(v string) {
	m.Set(field.NewUnderlyingValuationReferenceModel(v))
}

// SetUnderlyingStrategyType sets UnderlyingStrategyType, Tag 2295.
func (m OrderMassCancelReport) SetUnderlyingStrategyType(v string) {
	m.Set(field.NewUnderlyingStrategyType(v))
}

// SetUnderlyingCommonPricingIndicator sets UnderlyingCommonPricingIndicator, Tag 2296.
func (m OrderMassCancelReport) SetUnderlyingCommonPricingIndicator(v bool) {
	m.Set(field.NewUnderlyingCommonPricingIndicator(v))
}

// SetUnderlyingSettlDisruptionProvision sets UnderlyingSettlDisruptionProvision, Tag 2297.
func (m OrderMassCancelReport) SetUnderlyingSettlDisruptionProvision(v int) {
	m.Set(field.NewUnderlyingSettlDisruptionProvision(v))
}

// SetUnderlyingInstrumentRoundingDirection sets UnderlyingInstrumentRoundingDirection, Tag 2298.
func (m OrderMassCancelReport) SetUnderlyingInstrumentRoundingDirection(v string) {
	m.Set(field.NewUnderlyingInstrumentRoundingDirection(v))
}

// SetUnderlyingInstrumentRoundingPrecision sets UnderlyingInstrumentRoundingPrecision, Tag 2299.
func (m OrderMassCancelReport) SetUnderlyingInstrumentRoundingPrecision(v int) {
	m.Set(field.NewUnderlyingInstrumentRoundingPrecision(v))
}

// SetNoAssetAttributes sets NoAssetAttributes, Tag 2304.
func (m OrderMassCancelReport) SetNoAssetAttributes(f NoAssetAttributesRepeatingGroup) {
	m.SetGroup(f)
}

// SetNoUnderlyingAssetAttributes sets NoUnderlyingAssetAttributes, Tag 2312.
func (m OrderMassCancelReport) SetNoUnderlyingAssetAttributes(f NoUnderlyingAssetAttributesRepeatingGroup) {
	m.SetGroup(f)
}

// SetTradingUnitPeriodMultiplier sets TradingUnitPeriodMultiplier, Tag 2353.
func (m OrderMassCancelReport) SetTradingUnitPeriodMultiplier(v int) {
	m.Set(field.NewTradingUnitPeriodMultiplier(v))
}

// SetUnderlyingTradingUnitPeriodMultiplier sets UnderlyingTradingUnitPeriodMultiplier, Tag 2363.
func (m OrderMassCancelReport) SetUnderlyingTradingUnitPeriodMultiplier(v int) {
	m.Set(field.NewUnderlyingTradingUnitPeriodMultiplier(v))
}

// SetUnderlyingAssetGroup sets UnderlyingAssetGroup, Tag 2491.
func (m OrderMassCancelReport) SetUnderlyingAssetGroup(v int) {
	m.Set(field.NewUnderlyingAssetGroup(v))
}

// SetLowExercisePriceOptionIndicator sets LowExercisePriceOptionIndicator, Tag 2574.
func (m OrderMassCancelReport) SetLowExercisePriceOptionIndicator(v bool) {
	m.Set(field.NewLowExercisePriceOptionIndicator(v))
}

// SetBlockTradeEligibilityIndicator sets BlockTradeEligibilityIndicator, Tag 2575.
func (m OrderMassCancelReport) SetBlockTradeEligibilityIndicator(v bool) {
	m.Set(field.NewBlockTradeEligibilityIndicator(v))
}

// SetInstrumentPricePrecision sets InstrumentPricePrecision, Tag 2576.
func (m OrderMassCancelReport) SetInstrumentPricePrecision(v int) {
	m.Set(field.NewInstrumentPricePrecision(v))
}

// SetStrikePricePrecision sets StrikePricePrecision, Tag 2577.
func (m OrderMassCancelReport) SetStrikePricePrecision(v int) {
	m.Set(field.NewStrikePricePrecision(v))
}

// SetOrigStrikePrice sets OrigStrikePrice, Tag 2578.
func (m OrderMassCancelReport) SetOrigStrikePrice(value decimal.Decimal, scale int32) {
	m.Set(field.NewOrigStrikePrice(value, scale))
}

// SetSettlSubMethod sets SettlSubMethod, Tag 2579.
func (m OrderMassCancelReport) SetSettlSubMethod(v enum.SettlSubMethod) {
	m.Set(field.NewSettlSubMethod(v))
}

// SetStrikeIndexCurvePoint sets StrikeIndexCurvePoint, Tag 2600.
func (m OrderMassCancelReport) SetStrikeIndexCurvePoint(v string) {
	m.Set(field.NewStrikeIndexCurvePoint(v))
}

// SetStrikeIndexQuote sets StrikeIndexQuote, Tag 2601.
func (m OrderMassCancelReport) SetStrikeIndexQuote(v enum.StrikeIndexQuote) {
	m.Set(field.NewStrikeIndexQuote(v))
}

// SetExtraordinaryEventAdjustmentMethod sets ExtraordinaryEventAdjustmentMethod, Tag 2602.
func (m OrderMassCancelReport) SetExtraordinaryEventAdjustmentMethod(v enum.ExtraordinaryEventAdjustmentMethod) {
	m.Set(field.NewExtraordinaryEventAdjustmentMethod(v))
}

// SetExchangeLookAlike sets ExchangeLookAlike, Tag 2603.
func (m OrderMassCancelReport) SetExchangeLookAlike(v bool) {
	m.Set(field.NewExchangeLookAlike(v))
}

// SetUnderlyingNotional sets UnderlyingNotional, Tag 2614.
func (m OrderMassCancelReport) SetUnderlyingNotional(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingNotional(value, scale))
}

// SetUnderlyingNotionalCurrency sets UnderlyingNotionalCurrency, Tag 2615.
func (m OrderMassCancelReport) SetUnderlyingNotionalCurrency(v string) {
	m.Set(field.NewUnderlyingNotionalCurrency(v))
}

// SetUnderlyingNotionalDeterminationMethod sets UnderlyingNotionalDeterminationMethod, Tag 2616.
func (m OrderMassCancelReport) SetUnderlyingNotionalDeterminationMethod(v string) {
	m.Set(field.NewUnderlyingNotionalDeterminationMethod(v))
}

// SetUnderlyingNotionalAdjustments sets UnderlyingNotionalAdjustments, Tag 2617.
func (m OrderMassCancelReport) SetUnderlyingNotionalAdjustments(v enum.UnderlyingNotionalAdjustments) {
	m.Set(field.NewUnderlyingNotionalAdjustments(v))
}

// SetUnderlyingNotionalXIDRef sets UnderlyingNotionalXIDRef, Tag 2619.
func (m OrderMassCancelReport) SetUnderlyingNotionalXIDRef(v string) {
	m.Set(field.NewUnderlyingNotionalXIDRef(v))
}

// SetUnderlyingFutureID sets UnderlyingFutureID, Tag 2620.
func (m OrderMassCancelReport) SetUnderlyingFutureID(v string) {
	m.Set(field.NewUnderlyingFutureID(v))
}

// SetUnderlyingFutureIDSource sets UnderlyingFutureIDSource, Tag 2621.
func (m OrderMassCancelReport) SetUnderlyingFutureIDSource(v string) {
	m.Set(field.NewUnderlyingFutureIDSource(v))
}

// SetUnderlyingStrikeIndexCurvePoint sets UnderlyingStrikeIndexCurvePoint, Tag 2622.
func (m OrderMassCancelReport) SetUnderlyingStrikeIndexCurvePoint(v string) {
	m.Set(field.NewUnderlyingStrikeIndexCurvePoint(v))
}

// SetUnderlyingStrikeIndexQuote sets UnderlyingStrikeIndexQuote, Tag 2623.
func (m OrderMassCancelReport) SetUnderlyingStrikeIndexQuote(v int) {
	m.Set(field.NewUnderlyingStrikeIndexQuote(v))
}

// SetUnderlyingExtraordinaryEventAdjustmentMethod sets UnderlyingExtraordinaryEventAdjustmentMethod, Tag 2624.
func (m OrderMassCancelReport) SetUnderlyingExtraordinaryEventAdjustmentMethod(v int) {
	m.Set(field.NewUnderlyingExtraordinaryEventAdjustmentMethod(v))
}

// SetUnderlyingExchangeLookAlike sets UnderlyingExchangeLookAlike, Tag 2625.
func (m OrderMassCancelReport) SetUnderlyingExchangeLookAlike(v bool) {
	m.Set(field.NewUnderlyingExchangeLookAlike(v))
}

// SetUnderlyingAverageVolumeLimitationPercentage sets UnderlyingAverageVolumeLimitationPercentage, Tag 2626.
func (m OrderMassCancelReport) SetUnderlyingAverageVolumeLimitationPercentage(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingAverageVolumeLimitationPercentage(value, scale))
}

// SetUnderlyingAverageVolumeLimitationPeriodDays sets UnderlyingAverageVolumeLimitationPeriodDays, Tag 2627.
func (m OrderMassCancelReport) SetUnderlyingAverageVolumeLimitationPeriodDays(v int) {
	m.Set(field.NewUnderlyingAverageVolumeLimitationPeriodDays(v))
}

// SetUnderlyingDepositoryReceiptIndicator sets UnderlyingDepositoryReceiptIndicator, Tag 2628.
func (m OrderMassCancelReport) SetUnderlyingDepositoryReceiptIndicator(v bool) {
	m.Set(field.NewUnderlyingDepositoryReceiptIndicator(v))
}

// SetUnderlyingOpenUnits sets UnderlyingOpenUnits, Tag 2629.
func (m OrderMassCancelReport) SetUnderlyingOpenUnits(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingOpenUnits(value, scale))
}

// SetUnderlyingBasketDivisor sets UnderlyingBasketDivisor, Tag 2630.
func (m OrderMassCancelReport) SetUnderlyingBasketDivisor(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingBasketDivisor(value, scale))
}

// SetUnderlyingInstrumentXID sets UnderlyingInstrumentXID, Tag 2631.
func (m OrderMassCancelReport) SetUnderlyingInstrumentXID(v string) {
	m.Set(field.NewUnderlyingInstrumentXID(v))
}

// SetInTheMoneyCondition sets InTheMoneyCondition, Tag 2681.
func (m OrderMassCancelReport) SetInTheMoneyCondition(v enum.InTheMoneyCondition) {
	m.Set(field.NewInTheMoneyCondition(v))
}

// SetUnderlyingInTheMoneyCondition sets UnderlyingInTheMoneyCondition, Tag 2683.
func (m OrderMassCancelReport) SetUnderlyingInTheMoneyCondition(v int) {
	m.Set(field.NewUnderlyingInTheMoneyCondition(v))
}

// SetContraryInstructionEligibilityIndicator sets ContraryInstructionEligibilityIndicator, Tag 2685.
func (m OrderMassCancelReport) SetContraryInstructionEligibilityIndicator(v bool) {
	m.Set(field.NewContraryInstructionEligibilityIndicator(v))
}

// SetUnderlyingContraryInstructionEligibilityIndicator sets UnderlyingContraryInstructionEligibilityIndicator, Tag 2687.
func (m OrderMassCancelReport) SetUnderlyingContraryInstructionEligibilityIndicator(v bool) {
	m.Set(field.NewUnderlyingContraryInstructionEligibilityIndicator(v))
}

// SetFinancialInstrumentFullName sets FinancialInstrumentFullName, Tag 2714.
func (m OrderMassCancelReport) SetFinancialInstrumentFullName(v string) {
	m.Set(field.NewFinancialInstrumentFullName(v))
}

// SetEncodedFinancialInstrumentFullNameLen sets EncodedFinancialInstrumentFullNameLen, Tag 2715.
func (m OrderMassCancelReport) SetEncodedFinancialInstrumentFullNameLen(v int) {
	m.Set(field.NewEncodedFinancialInstrumentFullNameLen(v))
}

// SetEncodedFinancialInstrumentFullName sets EncodedFinancialInstrumentFullName, Tag 2716.
func (m OrderMassCancelReport) SetEncodedFinancialInstrumentFullName(v string) {
	m.Set(field.NewEncodedFinancialInstrumentFullName(v))
}

// SetUnderlyingFinancialInstrumentFullName sets UnderlyingFinancialInstrumentFullName, Tag 2720.
func (m OrderMassCancelReport) SetUnderlyingFinancialInstrumentFullName(v string) {
	m.Set(field.NewUnderlyingFinancialInstrumentFullName(v))
}

// SetEncodedUnderlyingFinancialInstrumentFullNameLen sets EncodedUnderlyingFinancialInstrumentFullNameLen, Tag 2721.
func (m OrderMassCancelReport) SetEncodedUnderlyingFinancialInstrumentFullNameLen(v int) {
	m.Set(field.NewEncodedUnderlyingFinancialInstrumentFullNameLen(v))
}

// SetEncodedUnderlyingFinancialInstrumentFullName sets EncodedUnderlyingFinancialInstrumentFullName, Tag 2722.
func (m OrderMassCancelReport) SetEncodedUnderlyingFinancialInstrumentFullName(v string) {
	m.Set(field.NewEncodedUnderlyingFinancialInstrumentFullName(v))
}

// SetUnderlyingIndexCurveUnit sets UnderlyingIndexCurveUnit, Tag 2723.
func (m OrderMassCancelReport) SetUnderlyingIndexCurveUnit(v string) {
	m.Set(field.NewUnderlyingIndexCurveUnit(v))
}

// SetUnderlyingIndexCurvePeriod sets UnderlyingIndexCurvePeriod, Tag 2724.
func (m OrderMassCancelReport) SetUnderlyingIndexCurvePeriod(v int) {
	m.Set(field.NewUnderlyingIndexCurvePeriod(v))
}

// SetAssetSubType sets AssetSubType, Tag 2735.
func (m OrderMassCancelReport) SetAssetSubType(v string) {
	m.Set(field.NewAssetSubType(v))
}

// SetFinancialInstrumentShortName sets FinancialInstrumentShortName, Tag 2737.
func (m OrderMassCancelReport) SetFinancialInstrumentShortName(v string) {
	m.Set(field.NewFinancialInstrumentShortName(v))
}

// SetUnderlyingFinancialInstrumentShortName sets UnderlyingFinancialInstrumentShortName, Tag 2742.
func (m OrderMassCancelReport) SetUnderlyingFinancialInstrumentShortName(v string) {
	m.Set(field.NewUnderlyingFinancialInstrumentShortName(v))
}

// SetUnderlyingAssetSubType sets UnderlyingAssetSubType, Tag 2744.
func (m OrderMassCancelReport) SetUnderlyingAssetSubType(v string) {
	m.Set(field.NewUnderlyingAssetSubType(v))
}

// SetDeliveryRouteOrCharter sets DeliveryRouteOrCharter, Tag 2752.
func (m OrderMassCancelReport) SetDeliveryRouteOrCharter(v string) {
	m.Set(field.NewDeliveryRouteOrCharter(v))
}

// SetReturnTrigger sets ReturnTrigger, Tag 2753.
func (m OrderMassCancelReport) SetReturnTrigger(v enum.ReturnTrigger) {
	m.Set(field.NewReturnTrigger(v))
}

// SetUnderlyingDeliveryRouteOrCharter sets UnderlyingDeliveryRouteOrCharter, Tag 2756.
func (m OrderMassCancelReport) SetUnderlyingDeliveryRouteOrCharter(v string) {
	m.Set(field.NewUnderlyingDeliveryRouteOrCharter(v))
}

// SetUnderlyingReturnTrigger sets UnderlyingReturnTrigger, Tag 2757.
func (m OrderMassCancelReport) SetUnderlyingReturnTrigger(v int) {
	m.Set(field.NewUnderlyingReturnTrigger(v))
}

// SetUnderlyingID sets UnderlyingID, Tag 2874.
func (m OrderMassCancelReport) SetUnderlyingID(v string) {
	m.Set(field.NewUnderlyingID(v))
}

// SetCouponOtherDayCount sets CouponOtherDayCount, Tag 2879.
func (m OrderMassCancelReport) SetCouponOtherDayCount(v string) {
	m.Set(field.NewCouponOtherDayCount(v))
}

// SetUnderlyingCouponOtherDayCount sets UnderlyingCouponOtherDayCount, Tag 2881.
func (m OrderMassCancelReport) SetUnderlyingCouponOtherDayCount(v string) {
	m.Set(field.NewUnderlyingCouponOtherDayCount(v))
}

// SetUnderlyingAccruedInterestAmt sets UnderlyingAccruedInterestAmt, Tag 2885.
func (m OrderMassCancelReport) SetUnderlyingAccruedInterestAmt(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingAccruedInterestAmt(value, scale))
}

// SetUnderlyingNumDaysInterest sets UnderlyingNumDaysInterest, Tag 2886.
func (m OrderMassCancelReport) SetUnderlyingNumDaysInterest(v int) {
	m.Set(field.NewUnderlyingNumDaysInterest(v))
}

// SetUPICode sets UPICode, Tag 2891.
func (m OrderMassCancelReport) SetUPICode(v string) {
	m.Set(field.NewUPICode(v))
}

// SetUnderlyingUPICode sets UnderlyingUPICode, Tag 2894.
func (m OrderMassCancelReport) SetUnderlyingUPICode(v string) {
	m.Set(field.NewUnderlyingUPICode(v))
}

// SetNoAdditionalTerms sets NoAdditionalTerms, Tag 40019.
func (m OrderMassCancelReport) SetNoAdditionalTerms(f NoAdditionalTermsRepeatingGroup) {
	m.SetGroup(f)
}

// SetNoCashSettlTerms sets NoCashSettlTerms, Tag 40022.
func (m OrderMassCancelReport) SetNoCashSettlTerms(f NoCashSettlTermsRepeatingGroup) {
	m.SetGroup(f)
}

// SetNoStreams sets NoStreams, Tag 40049.
func (m OrderMassCancelReport) SetNoStreams(f NoStreamsRepeatingGroup) {
	m.SetGroup(f)
}

// SetNoProvisions sets NoProvisions, Tag 40090.
func (m OrderMassCancelReport) SetNoProvisions(f NoProvisionsRepeatingGroup) {
	m.SetGroup(f)
}

// SetNoProtectionTerms sets NoProtectionTerms, Tag 40181.
func (m OrderMassCancelReport) SetNoProtectionTerms(f NoProtectionTermsRepeatingGroup) {
	m.SetGroup(f)
}

// SetNoPhysicalSettlTerms sets NoPhysicalSettlTerms, Tag 40204.
func (m OrderMassCancelReport) SetNoPhysicalSettlTerms(f NoPhysicalSettlTermsRepeatingGroup) {
	m.SetGroup(f)
}

// SetNoBusinessCenters sets NoBusinessCenters, Tag 40278.
func (m OrderMassCancelReport) SetNoBusinessCenters(f NoBusinessCentersRepeatingGroup) {
	m.SetGroup(f)
}

// SetNoUnderlyingStreams sets NoUnderlyingStreams, Tag 40540.
func (m OrderMassCancelReport) SetNoUnderlyingStreams(f NoUnderlyingStreamsRepeatingGroup) {
	m.SetGroup(f)
}

// SetBusinessDayConvention sets BusinessDayConvention, Tag 40921.
func (m OrderMassCancelReport) SetBusinessDayConvention(v enum.BusinessDayConvention) {
	m.Set(field.NewBusinessDayConvention(v))
}

// SetDateRollConvention sets DateRollConvention, Tag 40922.
func (m OrderMassCancelReport) SetDateRollConvention(v enum.DateRollConvention) {
	m.Set(field.NewDateRollConvention(v))
}

// SetNoUnderlyingBusinessCenters sets NoUnderlyingBusinessCenters, Tag 40962.
func (m OrderMassCancelReport) SetNoUnderlyingBusinessCenters(f NoUnderlyingBusinessCentersRepeatingGroup) {
	m.SetGroup(f)
}

// SetUnderlyingBusinessDayConvention sets UnderlyingBusinessDayConvention, Tag 40964.
func (m OrderMassCancelReport) SetUnderlyingBusinessDayConvention(v int) {
	m.Set(field.NewUnderlyingBusinessDayConvention(v))
}

// SetUnderlyingDateRollConvention sets UnderlyingDateRollConvention, Tag 40965.
func (m OrderMassCancelReport) SetUnderlyingDateRollConvention(v string) {
	m.Set(field.NewUnderlyingDateRollConvention(v))
}

// SetMarketDisruptionProvision sets MarketDisruptionProvision, Tag 41087.
func (m OrderMassCancelReport) SetMarketDisruptionProvision(v enum.MarketDisruptionProvision) {
	m.Set(field.NewMarketDisruptionProvision(v))
}

// SetMarketDisruptionFallbackProvision sets MarketDisruptionFallbackProvision, Tag 41088.
func (m OrderMassCancelReport) SetMarketDisruptionFallbackProvision(v enum.MarketDisruptionFallbackProvision) {
	m.Set(field.NewMarketDisruptionFallbackProvision(v))
}

// SetMarketDisruptionMaximumDays sets MarketDisruptionMaximumDays, Tag 41089.
func (m OrderMassCancelReport) SetMarketDisruptionMaximumDays(v int) {
	m.Set(field.NewMarketDisruptionMaximumDays(v))
}

// SetMarketDisruptionMaterialityPercentage sets MarketDisruptionMaterialityPercentage, Tag 41090.
func (m OrderMassCancelReport) SetMarketDisruptionMaterialityPercentage(value decimal.Decimal, scale int32) {
	m.Set(field.NewMarketDisruptionMaterialityPercentage(value, scale))
}

// SetMarketDisruptionMinimumFuturesContracts sets MarketDisruptionMinimumFuturesContracts, Tag 41091.
func (m OrderMassCancelReport) SetMarketDisruptionMinimumFuturesContracts(v int) {
	m.Set(field.NewMarketDisruptionMinimumFuturesContracts(v))
}

// SetNoMarketDisruptionEvents sets NoMarketDisruptionEvents, Tag 41092.
func (m OrderMassCancelReport) SetNoMarketDisruptionEvents(f NoMarketDisruptionEventsRepeatingGroup) {
	m.SetGroup(f)
}

// SetNoMarketDisruptionFallbacks sets NoMarketDisruptionFallbacks, Tag 41094.
func (m OrderMassCancelReport) SetNoMarketDisruptionFallbacks(f NoMarketDisruptionFallbacksRepeatingGroup) {
	m.SetGroup(f)
}

// SetNoMarketDisruptionFallbackReferencePrices sets NoMarketDisruptionFallbackReferencePrices, Tag 41096.
func (m OrderMassCancelReport) SetNoMarketDisruptionFallbackReferencePrices(f NoMarketDisruptionFallbackReferencePricesRepeatingGroup) {
	m.SetGroup(f)
}

// SetExerciseDesc sets ExerciseDesc, Tag 41106.
func (m OrderMassCancelReport) SetExerciseDesc(v string) {
	m.Set(field.NewExerciseDesc(v))
}

// SetEncodedExerciseDescLen sets EncodedExerciseDescLen, Tag 41107.
func (m OrderMassCancelReport) SetEncodedExerciseDescLen(v int) {
	m.Set(field.NewEncodedExerciseDescLen(v))
}

// SetEncodedExerciseDesc sets EncodedExerciseDesc, Tag 41108.
func (m OrderMassCancelReport) SetEncodedExerciseDesc(v string) {
	m.Set(field.NewEncodedExerciseDesc(v))
}

// SetAutomaticExerciseIndicator sets AutomaticExerciseIndicator, Tag 41109.
func (m OrderMassCancelReport) SetAutomaticExerciseIndicator(v bool) {
	m.Set(field.NewAutomaticExerciseIndicator(v))
}

// SetAutomaticExerciseThresholdRate sets AutomaticExerciseThresholdRate, Tag 41110.
func (m OrderMassCancelReport) SetAutomaticExerciseThresholdRate(value decimal.Decimal, scale int32) {
	m.Set(field.NewAutomaticExerciseThresholdRate(value, scale))
}

// SetExerciseConfirmationMethod sets ExerciseConfirmationMethod, Tag 41111.
func (m OrderMassCancelReport) SetExerciseConfirmationMethod(v enum.ExerciseConfirmationMethod) {
	m.Set(field.NewExerciseConfirmationMethod(v))
}

// SetManualNoticeBusinessCenter sets ManualNoticeBusinessCenter, Tag 41112.
func (m OrderMassCancelReport) SetManualNoticeBusinessCenter(v string) {
	m.Set(field.NewManualNoticeBusinessCenter(v))
}

// SetFallbackExerciseIndicator sets FallbackExerciseIndicator, Tag 41113.
func (m OrderMassCancelReport) SetFallbackExerciseIndicator(v bool) {
	m.Set(field.NewFallbackExerciseIndicator(v))
}

// SetLimitedRightToConfirmIndicator sets LimitedRightToConfirmIndicator, Tag 41114.
func (m OrderMassCancelReport) SetLimitedRightToConfirmIndicator(v bool) {
	m.Set(field.NewLimitedRightToConfirmIndicator(v))
}

// SetExerciseSplitTicketIndicator sets ExerciseSplitTicketIndicator, Tag 41115.
func (m OrderMassCancelReport) SetExerciseSplitTicketIndicator(v bool) {
	m.Set(field.NewExerciseSplitTicketIndicator(v))
}

// SetNoOptionExerciseBusinessCenters sets NoOptionExerciseBusinessCenters, Tag 41116.
func (m OrderMassCancelReport) SetNoOptionExerciseBusinessCenters(f NoOptionExerciseBusinessCentersRepeatingGroup) {
	m.SetGroup(f)
}

// SetOptionExerciseBusinessDayConvention sets OptionExerciseBusinessDayConvention, Tag 41118.
func (m OrderMassCancelReport) SetOptionExerciseBusinessDayConvention(v int) {
	m.Set(field.NewOptionExerciseBusinessDayConvention(v))
}

// SetOptionExerciseEarliestDateOffsetDayType sets OptionExerciseEarliestDateOffsetDayType, Tag 41119.
func (m OrderMassCancelReport) SetOptionExerciseEarliestDateOffsetDayType(v int) {
	m.Set(field.NewOptionExerciseEarliestDateOffsetDayType(v))
}

// SetOptionExerciseEarliestDateOffsetPeriod sets OptionExerciseEarliestDateOffsetPeriod, Tag 41120.
func (m OrderMassCancelReport) SetOptionExerciseEarliestDateOffsetPeriod(v int) {
	m.Set(field.NewOptionExerciseEarliestDateOffsetPeriod(v))
}

// SetOptionExerciseEarliestDateOffsetUnit sets OptionExerciseEarliestDateOffsetUnit, Tag 41121.
func (m OrderMassCancelReport) SetOptionExerciseEarliestDateOffsetUnit(v string) {
	m.Set(field.NewOptionExerciseEarliestDateOffsetUnit(v))
}

// SetOptionExerciseFrequencyPeriod sets OptionExerciseFrequencyPeriod, Tag 41122.
func (m OrderMassCancelReport) SetOptionExerciseFrequencyPeriod(v int) {
	m.Set(field.NewOptionExerciseFrequencyPeriod(v))
}

// SetOptionExerciseFrequencyUnit sets OptionExerciseFrequencyUnit, Tag 41123.
func (m OrderMassCancelReport) SetOptionExerciseFrequencyUnit(v string) {
	m.Set(field.NewOptionExerciseFrequencyUnit(v))
}

// SetOptionExerciseStartDateUnadjusted sets OptionExerciseStartDateUnadjusted, Tag 41124.
func (m OrderMassCancelReport) SetOptionExerciseStartDateUnadjusted(v string) {
	m.Set(field.NewOptionExerciseStartDateUnadjusted(v))
}

// SetOptionExerciseStartDateRelativeTo sets OptionExerciseStartDateRelativeTo, Tag 41125.
func (m OrderMassCancelReport) SetOptionExerciseStartDateRelativeTo(v int) {
	m.Set(field.NewOptionExerciseStartDateRelativeTo(v))
}

// SetOptionExerciseStartDateOffsetPeriod sets OptionExerciseStartDateOffsetPeriod, Tag 41126.
func (m OrderMassCancelReport) SetOptionExerciseStartDateOffsetPeriod(v int) {
	m.Set(field.NewOptionExerciseStartDateOffsetPeriod(v))
}

// SetOptionExerciseStartDateOffsetUnit sets OptionExerciseStartDateOffsetUnit, Tag 41127.
func (m OrderMassCancelReport) SetOptionExerciseStartDateOffsetUnit(v string) {
	m.Set(field.NewOptionExerciseStartDateOffsetUnit(v))
}

// SetOptionExerciseStartDateOffsetDayType sets OptionExerciseStartDateOffsetDayType, Tag 41128.
func (m OrderMassCancelReport) SetOptionExerciseStartDateOffsetDayType(v int) {
	m.Set(field.NewOptionExerciseStartDateOffsetDayType(v))
}

// SetOptionExerciseStartDateAdjusted sets OptionExerciseStartDateAdjusted, Tag 41129.
func (m OrderMassCancelReport) SetOptionExerciseStartDateAdjusted(v string) {
	m.Set(field.NewOptionExerciseStartDateAdjusted(v))
}

// SetOptionExerciseSkip sets OptionExerciseSkip, Tag 41130.
func (m OrderMassCancelReport) SetOptionExerciseSkip(v int) {
	m.Set(field.NewOptionExerciseSkip(v))
}

// SetOptionExerciseNominationDeadline sets OptionExerciseNominationDeadline, Tag 41131.
func (m OrderMassCancelReport) SetOptionExerciseNominationDeadline(v string) {
	m.Set(field.NewOptionExerciseNominationDeadline(v))
}

// SetOptionExerciseFirstDateUnadjusted sets OptionExerciseFirstDateUnadjusted, Tag 41132.
func (m OrderMassCancelReport) SetOptionExerciseFirstDateUnadjusted(v string) {
	m.Set(field.NewOptionExerciseFirstDateUnadjusted(v))
}

// SetOptionExerciseLastDateUnadjusted sets OptionExerciseLastDateUnadjusted, Tag 41133.
func (m OrderMassCancelReport) SetOptionExerciseLastDateUnadjusted(v string) {
	m.Set(field.NewOptionExerciseLastDateUnadjusted(v))
}

// SetOptionExerciseEarliestTime sets OptionExerciseEarliestTime, Tag 41134.
func (m OrderMassCancelReport) SetOptionExerciseEarliestTime(v string) {
	m.Set(field.NewOptionExerciseEarliestTime(v))
}

// SetOptionExerciseLatestTime sets OptionExerciseLatestTime, Tag 41135.
func (m OrderMassCancelReport) SetOptionExerciseLatestTime(v string) {
	m.Set(field.NewOptionExerciseLatestTime(v))
}

// SetOptionExerciseTimeBusinessCenter sets OptionExerciseTimeBusinessCenter, Tag 41136.
func (m OrderMassCancelReport) SetOptionExerciseTimeBusinessCenter(v string) {
	m.Set(field.NewOptionExerciseTimeBusinessCenter(v))
}

// SetNoOptionExerciseDates sets NoOptionExerciseDates, Tag 41137.
func (m OrderMassCancelReport) SetNoOptionExerciseDates(f NoOptionExerciseDatesRepeatingGroup) {
	m.SetGroup(f)
}

// SetNoOptionExerciseExpirationDateBusinessCenters sets NoOptionExerciseExpirationDateBusinessCenters, Tag 41140.
func (m OrderMassCancelReport) SetNoOptionExerciseExpirationDateBusinessCenters(f NoOptionExerciseExpirationDateBusinessCentersRepeatingGroup) {
	m.SetGroup(f)
}

// SetOptionExerciseExpirationDateBusinessDayConvention sets OptionExerciseExpirationDateBusinessDayConvention, Tag 41142.
func (m OrderMassCancelReport) SetOptionExerciseExpirationDateBusinessDayConvention(v int) {
	m.Set(field.NewOptionExerciseExpirationDateBusinessDayConvention(v))
}

// SetOptionExerciseExpirationDateRelativeTo sets OptionExerciseExpirationDateRelativeTo, Tag 41143.
func (m OrderMassCancelReport) SetOptionExerciseExpirationDateRelativeTo(v int) {
	m.Set(field.NewOptionExerciseExpirationDateRelativeTo(v))
}

// SetOptionExerciseExpirationDateOffsetPeriod sets OptionExerciseExpirationDateOffsetPeriod, Tag 41144.
func (m OrderMassCancelReport) SetOptionExerciseExpirationDateOffsetPeriod(v int) {
	m.Set(field.NewOptionExerciseExpirationDateOffsetPeriod(v))
}

// SetOptionExerciseExpirationDateOffsetUnit sets OptionExerciseExpirationDateOffsetUnit, Tag 41145.
func (m OrderMassCancelReport) SetOptionExerciseExpirationDateOffsetUnit(v string) {
	m.Set(field.NewOptionExerciseExpirationDateOffsetUnit(v))
}

// SetOptionExerciseExpirationFrequencyPeriod sets OptionExerciseExpirationFrequencyPeriod, Tag 41146.
func (m OrderMassCancelReport) SetOptionExerciseExpirationFrequencyPeriod(v int) {
	m.Set(field.NewOptionExerciseExpirationFrequencyPeriod(v))
}

// SetOptionExerciseExpirationFrequencyUnit sets OptionExerciseExpirationFrequencyUnit, Tag 41147.
func (m OrderMassCancelReport) SetOptionExerciseExpirationFrequencyUnit(v string) {
	m.Set(field.NewOptionExerciseExpirationFrequencyUnit(v))
}

// SetOptionExerciseExpirationRollConvention sets OptionExerciseExpirationRollConvention, Tag 41148.
func (m OrderMassCancelReport) SetOptionExerciseExpirationRollConvention(v string) {
	m.Set(field.NewOptionExerciseExpirationRollConvention(v))
}

// SetOptionExerciseExpirationDateOffsetDayType sets OptionExerciseExpirationDateOffsetDayType, Tag 41149.
func (m OrderMassCancelReport) SetOptionExerciseExpirationDateOffsetDayType(v int) {
	m.Set(field.NewOptionExerciseExpirationDateOffsetDayType(v))
}

// SetOptionExerciseExpirationTime sets OptionExerciseExpirationTime, Tag 41150.
func (m OrderMassCancelReport) SetOptionExerciseExpirationTime(v string) {
	m.Set(field.NewOptionExerciseExpirationTime(v))
}

// SetOptionExerciseExpirationTimeBusinessCenter sets OptionExerciseExpirationTimeBusinessCenter, Tag 41151.
func (m OrderMassCancelReport) SetOptionExerciseExpirationTimeBusinessCenter(v string) {
	m.Set(field.NewOptionExerciseExpirationTimeBusinessCenter(v))
}

// SetNoOptionExerciseExpirationDates sets NoOptionExerciseExpirationDates, Tag 41152.
func (m OrderMassCancelReport) SetNoOptionExerciseExpirationDates(f NoOptionExerciseExpirationDatesRepeatingGroup) {
	m.SetGroup(f)
}

// SetNoPricingDateBusinessCenters sets NoPricingDateBusinessCenters, Tag 41230.
func (m OrderMassCancelReport) SetNoPricingDateBusinessCenters(f NoPricingDateBusinessCentersRepeatingGroup) {
	m.SetGroup(f)
}

// SetPricingDateUnadjusted sets PricingDateUnadjusted, Tag 41232.
func (m OrderMassCancelReport) SetPricingDateUnadjusted(v string) {
	m.Set(field.NewPricingDateUnadjusted(v))
}

// SetPricingDateBusinessDayConvention sets PricingDateBusinessDayConvention, Tag 41233.
func (m OrderMassCancelReport) SetPricingDateBusinessDayConvention(v int) {
	m.Set(field.NewPricingDateBusinessDayConvention(v))
}

// SetPricingDateAdjusted sets PricingDateAdjusted, Tag 41234.
func (m OrderMassCancelReport) SetPricingDateAdjusted(v string) {
	m.Set(field.NewPricingDateAdjusted(v))
}

// SetPricingTime sets PricingTime, Tag 41235.
func (m OrderMassCancelReport) SetPricingTime(v string) {
	m.Set(field.NewPricingTime(v))
}

// SetPricingTimeBusinessCenter sets PricingTimeBusinessCenter, Tag 41236.
func (m OrderMassCancelReport) SetPricingTimeBusinessCenter(v string) {
	m.Set(field.NewPricingTimeBusinessCenter(v))
}

// SetUnderlyingProtectionTermXIDRef sets UnderlyingProtectionTermXIDRef, Tag 41314.
func (m OrderMassCancelReport) SetUnderlyingProtectionTermXIDRef(v string) {
	m.Set(field.NewUnderlyingProtectionTermXIDRef(v))
}

// SetUnderlyingSettlTermXIDRef sets UnderlyingSettlTermXIDRef, Tag 41315.
func (m OrderMassCancelReport) SetUnderlyingSettlTermXIDRef(v string) {
	m.Set(field.NewUnderlyingSettlTermXIDRef(v))
}

// SetUnderlyingExerciseDesc sets UnderlyingExerciseDesc, Tag 41810.
func (m OrderMassCancelReport) SetUnderlyingExerciseDesc(v string) {
	m.Set(field.NewUnderlyingExerciseDesc(v))
}

// SetEncodedUnderlyingExerciseDescLen sets EncodedUnderlyingExerciseDescLen, Tag 41811.
func (m OrderMassCancelReport) SetEncodedUnderlyingExerciseDescLen(v int) {
	m.Set(field.NewEncodedUnderlyingExerciseDescLen(v))
}

// SetEncodedUnderlyingExerciseDesc sets EncodedUnderlyingExerciseDesc, Tag 41812.
func (m OrderMassCancelReport) SetEncodedUnderlyingExerciseDesc(v string) {
	m.Set(field.NewEncodedUnderlyingExerciseDesc(v))
}

// SetUnderlyingAutomaticExerciseIndicator sets UnderlyingAutomaticExerciseIndicator, Tag 41813.
func (m OrderMassCancelReport) SetUnderlyingAutomaticExerciseIndicator(v bool) {
	m.Set(field.NewUnderlyingAutomaticExerciseIndicator(v))
}

// SetUnderlyingAutomaticExerciseThresholdRate sets UnderlyingAutomaticExerciseThresholdRate, Tag 41814.
func (m OrderMassCancelReport) SetUnderlyingAutomaticExerciseThresholdRate(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingAutomaticExerciseThresholdRate(value, scale))
}

// SetUnderlyingExerciseConfirmationMethod sets UnderlyingExerciseConfirmationMethod, Tag 41815.
func (m OrderMassCancelReport) SetUnderlyingExerciseConfirmationMethod(v int) {
	m.Set(field.NewUnderlyingExerciseConfirmationMethod(v))
}

// SetUnderlyingManualNoticeBusinessCenter sets UnderlyingManualNoticeBusinessCenter, Tag 41816.
func (m OrderMassCancelReport) SetUnderlyingManualNoticeBusinessCenter(v string) {
	m.Set(field.NewUnderlyingManualNoticeBusinessCenter(v))
}

// SetUnderlyingFallbackExerciseIndicator sets UnderlyingFallbackExerciseIndicator, Tag 41817.
func (m OrderMassCancelReport) SetUnderlyingFallbackExerciseIndicator(v bool) {
	m.Set(field.NewUnderlyingFallbackExerciseIndicator(v))
}

// SetUnderlyingLimitedRightToConfirmIndicator sets UnderlyingLimitedRightToConfirmIndicator, Tag 41818.
func (m OrderMassCancelReport) SetUnderlyingLimitedRightToConfirmIndicator(v bool) {
	m.Set(field.NewUnderlyingLimitedRightToConfirmIndicator(v))
}

// SetUnderlyingExerciseSplitTicketIndicator sets UnderlyingExerciseSplitTicketIndicator, Tag 41819.
func (m OrderMassCancelReport) SetUnderlyingExerciseSplitTicketIndicator(v bool) {
	m.Set(field.NewUnderlyingExerciseSplitTicketIndicator(v))
}

// SetNoUnderlyingOptionExerciseBusinessCenters sets NoUnderlyingOptionExerciseBusinessCenters, Tag 41820.
func (m OrderMassCancelReport) SetNoUnderlyingOptionExerciseBusinessCenters(f NoUnderlyingOptionExerciseBusinessCentersRepeatingGroup) {
	m.SetGroup(f)
}

// SetUnderlyingOptionExerciseBusinessDayConvention sets UnderlyingOptionExerciseBusinessDayConvention, Tag 41822.
func (m OrderMassCancelReport) SetUnderlyingOptionExerciseBusinessDayConvention(v int) {
	m.Set(field.NewUnderlyingOptionExerciseBusinessDayConvention(v))
}

// SetUnderlyingOptionExerciseEarliestDateOffsetDayType sets UnderlyingOptionExerciseEarliestDateOffsetDayType, Tag 41823.
func (m OrderMassCancelReport) SetUnderlyingOptionExerciseEarliestDateOffsetDayType(v int) {
	m.Set(field.NewUnderlyingOptionExerciseEarliestDateOffsetDayType(v))
}

// SetUnderlyingOptionExerciseEarliestDateOffsetPeriod sets UnderlyingOptionExerciseEarliestDateOffsetPeriod, Tag 41824.
func (m OrderMassCancelReport) SetUnderlyingOptionExerciseEarliestDateOffsetPeriod(v int) {
	m.Set(field.NewUnderlyingOptionExerciseEarliestDateOffsetPeriod(v))
}

// SetUnderlyingOptionExerciseEarliestDateOffsetUnit sets UnderlyingOptionExerciseEarliestDateOffsetUnit, Tag 41825.
func (m OrderMassCancelReport) SetUnderlyingOptionExerciseEarliestDateOffsetUnit(v string) {
	m.Set(field.NewUnderlyingOptionExerciseEarliestDateOffsetUnit(v))
}

// SetUnderlyingOptionExerciseFrequencyPeriod sets UnderlyingOptionExerciseFrequencyPeriod, Tag 41826.
func (m OrderMassCancelReport) SetUnderlyingOptionExerciseFrequencyPeriod(v int) {
	m.Set(field.NewUnderlyingOptionExerciseFrequencyPeriod(v))
}

// SetUnderlyingOptionExerciseFrequencyUnit sets UnderlyingOptionExerciseFrequencyUnit, Tag 41827.
func (m OrderMassCancelReport) SetUnderlyingOptionExerciseFrequencyUnit(v string) {
	m.Set(field.NewUnderlyingOptionExerciseFrequencyUnit(v))
}

// SetUnderlyingOptionExerciseStartDateUnadjusted sets UnderlyingOptionExerciseStartDateUnadjusted, Tag 41828.
func (m OrderMassCancelReport) SetUnderlyingOptionExerciseStartDateUnadjusted(v string) {
	m.Set(field.NewUnderlyingOptionExerciseStartDateUnadjusted(v))
}

// SetUnderlyingOptionExerciseStartDateRelativeTo sets UnderlyingOptionExerciseStartDateRelativeTo, Tag 41829.
func (m OrderMassCancelReport) SetUnderlyingOptionExerciseStartDateRelativeTo(v int) {
	m.Set(field.NewUnderlyingOptionExerciseStartDateRelativeTo(v))
}

// SetUnderlyingOptionExerciseStartDateOffsetPeriod sets UnderlyingOptionExerciseStartDateOffsetPeriod, Tag 41830.
func (m OrderMassCancelReport) SetUnderlyingOptionExerciseStartDateOffsetPeriod(v int) {
	m.Set(field.NewUnderlyingOptionExerciseStartDateOffsetPeriod(v))
}

// SetUnderlyingOptionExerciseStartDateOffsetUnit sets UnderlyingOptionExerciseStartDateOffsetUnit, Tag 41831.
func (m OrderMassCancelReport) SetUnderlyingOptionExerciseStartDateOffsetUnit(v string) {
	m.Set(field.NewUnderlyingOptionExerciseStartDateOffsetUnit(v))
}

// SetUnderlyingOptionExerciseStartDateOffsetDayType sets UnderlyingOptionExerciseStartDateOffsetDayType, Tag 41832.
func (m OrderMassCancelReport) SetUnderlyingOptionExerciseStartDateOffsetDayType(v int) {
	m.Set(field.NewUnderlyingOptionExerciseStartDateOffsetDayType(v))
}

// SetUnderlyingOptionExerciseStartDateAdjusted sets UnderlyingOptionExerciseStartDateAdjusted, Tag 41833.
func (m OrderMassCancelReport) SetUnderlyingOptionExerciseStartDateAdjusted(v string) {
	m.Set(field.NewUnderlyingOptionExerciseStartDateAdjusted(v))
}

// SetUnderlyingOptionExerciseSkip sets UnderlyingOptionExerciseSkip, Tag 41834.
func (m OrderMassCancelReport) SetUnderlyingOptionExerciseSkip(v int) {
	m.Set(field.NewUnderlyingOptionExerciseSkip(v))
}

// SetUnderlyingOptionExerciseNominationDeadline sets UnderlyingOptionExerciseNominationDeadline, Tag 41835.
func (m OrderMassCancelReport) SetUnderlyingOptionExerciseNominationDeadline(v string) {
	m.Set(field.NewUnderlyingOptionExerciseNominationDeadline(v))
}

// SetUnderlyingOptionExerciseFirstDateUnadjusted sets UnderlyingOptionExerciseFirstDateUnadjusted, Tag 41836.
func (m OrderMassCancelReport) SetUnderlyingOptionExerciseFirstDateUnadjusted(v string) {
	m.Set(field.NewUnderlyingOptionExerciseFirstDateUnadjusted(v))
}

// SetUnderlyingOptionExerciseLastDateUnadjusted sets UnderlyingOptionExerciseLastDateUnadjusted, Tag 41837.
func (m OrderMassCancelReport) SetUnderlyingOptionExerciseLastDateUnadjusted(v string) {
	m.Set(field.NewUnderlyingOptionExerciseLastDateUnadjusted(v))
}

// SetUnderlyingOptionExerciseEarliestTime sets UnderlyingOptionExerciseEarliestTime, Tag 41838.
func (m OrderMassCancelReport) SetUnderlyingOptionExerciseEarliestTime(v string) {
	m.Set(field.NewUnderlyingOptionExerciseEarliestTime(v))
}

// SetUnderlyingOptionExerciseLatestTime sets UnderlyingOptionExerciseLatestTime, Tag 41839.
func (m OrderMassCancelReport) SetUnderlyingOptionExerciseLatestTime(v string) {
	m.Set(field.NewUnderlyingOptionExerciseLatestTime(v))
}

// SetUnderlyingOptionExerciseTimeBusinessCenter sets UnderlyingOptionExerciseTimeBusinessCenter, Tag 41840.
func (m OrderMassCancelReport) SetUnderlyingOptionExerciseTimeBusinessCenter(v string) {
	m.Set(field.NewUnderlyingOptionExerciseTimeBusinessCenter(v))
}

// SetNoUnderlyingOptionExerciseDates sets NoUnderlyingOptionExerciseDates, Tag 41841.
func (m OrderMassCancelReport) SetNoUnderlyingOptionExerciseDates(f NoUnderlyingOptionExerciseDatesRepeatingGroup) {
	m.SetGroup(f)
}

// SetNoUnderlyingOptionExerciseExpirationDateBusinessCenters sets NoUnderlyingOptionExerciseExpirationDateBusinessCenters, Tag 41844.
func (m OrderMassCancelReport) SetNoUnderlyingOptionExerciseExpirationDateBusinessCenters(f NoUnderlyingOptionExerciseExpirationDateBusinessCentersRepeatingGroup) {
	m.SetGroup(f)
}

// SetUnderlyingOptionExerciseExpirationDateBusinessDayConvention sets UnderlyingOptionExerciseExpirationDateBusinessDayConvention, Tag 41846.
func (m OrderMassCancelReport) SetUnderlyingOptionExerciseExpirationDateBusinessDayConvention(v int) {
	m.Set(field.NewUnderlyingOptionExerciseExpirationDateBusinessDayConvention(v))
}

// SetUnderlyingOptionExerciseExpirationDateRelativeTo sets UnderlyingOptionExerciseExpirationDateRelativeTo, Tag 41847.
func (m OrderMassCancelReport) SetUnderlyingOptionExerciseExpirationDateRelativeTo(v int) {
	m.Set(field.NewUnderlyingOptionExerciseExpirationDateRelativeTo(v))
}

// SetUnderlyingOptionExerciseExpirationDateOffsetPeriod sets UnderlyingOptionExerciseExpirationDateOffsetPeriod, Tag 41848.
func (m OrderMassCancelReport) SetUnderlyingOptionExerciseExpirationDateOffsetPeriod(v int) {
	m.Set(field.NewUnderlyingOptionExerciseExpirationDateOffsetPeriod(v))
}

// SetUnderlyingOptionExerciseExpirationDateOffsetUnit sets UnderlyingOptionExerciseExpirationDateOffsetUnit, Tag 41849.
func (m OrderMassCancelReport) SetUnderlyingOptionExerciseExpirationDateOffsetUnit(v string) {
	m.Set(field.NewUnderlyingOptionExerciseExpirationDateOffsetUnit(v))
}

// SetUnderlyingOptionExerciseExpirationFrequencyPeriod sets UnderlyingOptionExerciseExpirationFrequencyPeriod, Tag 41850.
func (m OrderMassCancelReport) SetUnderlyingOptionExerciseExpirationFrequencyPeriod(v int) {
	m.Set(field.NewUnderlyingOptionExerciseExpirationFrequencyPeriod(v))
}

// SetUnderlyingOptionExerciseExpirationFrequencyUnit sets UnderlyingOptionExerciseExpirationFrequencyUnit, Tag 41851.
func (m OrderMassCancelReport) SetUnderlyingOptionExerciseExpirationFrequencyUnit(v string) {
	m.Set(field.NewUnderlyingOptionExerciseExpirationFrequencyUnit(v))
}

// SetUnderlyingOptionExerciseExpirationRollConvention sets UnderlyingOptionExerciseExpirationRollConvention, Tag 41852.
func (m OrderMassCancelReport) SetUnderlyingOptionExerciseExpirationRollConvention(v string) {
	m.Set(field.NewUnderlyingOptionExerciseExpirationRollConvention(v))
}

// SetUnderlyingOptionExerciseExpirationDateOffsetDayType sets UnderlyingOptionExerciseExpirationDateOffsetDayType, Tag 41853.
func (m OrderMassCancelReport) SetUnderlyingOptionExerciseExpirationDateOffsetDayType(v int) {
	m.Set(field.NewUnderlyingOptionExerciseExpirationDateOffsetDayType(v))
}

// SetUnderlyingOptionExerciseExpirationTime sets UnderlyingOptionExerciseExpirationTime, Tag 41854.
func (m OrderMassCancelReport) SetUnderlyingOptionExerciseExpirationTime(v string) {
	m.Set(field.NewUnderlyingOptionExerciseExpirationTime(v))
}

// SetUnderlyingOptionExerciseExpirationTimeBusinessCenter sets UnderlyingOptionExerciseExpirationTimeBusinessCenter, Tag 41855.
func (m OrderMassCancelReport) SetUnderlyingOptionExerciseExpirationTimeBusinessCenter(v string) {
	m.Set(field.NewUnderlyingOptionExerciseExpirationTimeBusinessCenter(v))
}

// SetNoUnderlyingOptionExerciseExpirationDates sets NoUnderlyingOptionExerciseExpirationDates, Tag 41856.
func (m OrderMassCancelReport) SetNoUnderlyingOptionExerciseExpirationDates(f NoUnderlyingOptionExerciseExpirationDatesRepeatingGroup) {
	m.SetGroup(f)
}

// SetUnderlyingMarketDisruptionProvision sets UnderlyingMarketDisruptionProvision, Tag 41859.
func (m OrderMassCancelReport) SetUnderlyingMarketDisruptionProvision(v int) {
	m.Set(field.NewUnderlyingMarketDisruptionProvision(v))
}

// SetUnderlyingMarketDisruptionFallbackProvision sets UnderlyingMarketDisruptionFallbackProvision, Tag 41860.
func (m OrderMassCancelReport) SetUnderlyingMarketDisruptionFallbackProvision(v int) {
	m.Set(field.NewUnderlyingMarketDisruptionFallbackProvision(v))
}

// SetUnderlyingMarketDisruptionMaximumDays sets UnderlyingMarketDisruptionMaximumDays, Tag 41861.
func (m OrderMassCancelReport) SetUnderlyingMarketDisruptionMaximumDays(v int) {
	m.Set(field.NewUnderlyingMarketDisruptionMaximumDays(v))
}

// SetUnderlyingMarketDisruptionMaterialityPercentage sets UnderlyingMarketDisruptionMaterialityPercentage, Tag 41862.
func (m OrderMassCancelReport) SetUnderlyingMarketDisruptionMaterialityPercentage(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingMarketDisruptionMaterialityPercentage(value, scale))
}

// SetUnderlyingMarketDisruptionMinimumFuturesContracts sets UnderlyingMarketDisruptionMinimumFuturesContracts, Tag 41863.
func (m OrderMassCancelReport) SetUnderlyingMarketDisruptionMinimumFuturesContracts(v int) {
	m.Set(field.NewUnderlyingMarketDisruptionMinimumFuturesContracts(v))
}

// SetNoUnderlyingMarketDisruptionEvents sets NoUnderlyingMarketDisruptionEvents, Tag 41864.
func (m OrderMassCancelReport) SetNoUnderlyingMarketDisruptionEvents(f NoUnderlyingMarketDisruptionEventsRepeatingGroup) {
	m.SetGroup(f)
}

// SetNoUnderlyingMarketDisruptionFallbacks sets NoUnderlyingMarketDisruptionFallbacks, Tag 41866.
func (m OrderMassCancelReport) SetNoUnderlyingMarketDisruptionFallbacks(f NoUnderlyingMarketDisruptionFallbacksRepeatingGroup) {
	m.SetGroup(f)
}

// SetNoUnderlyingMarketDisruptionFallbackReferencePrices sets NoUnderlyingMarketDisruptionFallbackReferencePrices, Tag 41868.
func (m OrderMassCancelReport) SetNoUnderlyingMarketDisruptionFallbackReferencePrices(f NoUnderlyingMarketDisruptionFallbackReferencePricesRepeatingGroup) {
	m.SetGroup(f)
}

// SetNoUnderlyingPricingDateBusinessCenters sets NoUnderlyingPricingDateBusinessCenters, Tag 41947.
func (m OrderMassCancelReport) SetNoUnderlyingPricingDateBusinessCenters(f NoUnderlyingPricingDateBusinessCentersRepeatingGroup) {
	m.SetGroup(f)
}

// SetUnderlyingPricingDateUnadjusted sets UnderlyingPricingDateUnadjusted, Tag 41949.
func (m OrderMassCancelReport) SetUnderlyingPricingDateUnadjusted(v string) {
	m.Set(field.NewUnderlyingPricingDateUnadjusted(v))
}

// SetUnderlyingPricingDateBusinessDayConvention sets UnderlyingPricingDateBusinessDayConvention, Tag 41950.
func (m OrderMassCancelReport) SetUnderlyingPricingDateBusinessDayConvention(v int) {
	m.Set(field.NewUnderlyingPricingDateBusinessDayConvention(v))
}

// SetUnderlyingPricingDateAdjusted sets UnderlyingPricingDateAdjusted, Tag 41951.
func (m OrderMassCancelReport) SetUnderlyingPricingDateAdjusted(v string) {
	m.Set(field.NewUnderlyingPricingDateAdjusted(v))
}

// SetUnderlyingPricingTime sets UnderlyingPricingTime, Tag 41952.
func (m OrderMassCancelReport) SetUnderlyingPricingTime(v string) {
	m.Set(field.NewUnderlyingPricingTime(v))
}

// SetUnderlyingPricingTimeBusinessCenter sets UnderlyingPricingTimeBusinessCenter, Tag 41953.
func (m OrderMassCancelReport) SetUnderlyingPricingTimeBusinessCenter(v string) {
	m.Set(field.NewUnderlyingPricingTimeBusinessCenter(v))
}

// SetNoUnderlyingAdditionalTerms sets NoUnderlyingAdditionalTerms, Tag 42036.
func (m OrderMassCancelReport) SetNoUnderlyingAdditionalTerms(f NoUnderlyingAdditionalTermsRepeatingGroup) {
	m.SetGroup(f)
}

// SetNoUnderlyingCashSettlTerms sets NoUnderlyingCashSettlTerms, Tag 42041.
func (m OrderMassCancelReport) SetNoUnderlyingCashSettlTerms(f NoUnderlyingCashSettlTermsRepeatingGroup) {
	m.SetGroup(f)
}

// SetNoUnderlyingPhysicalSettlTerms sets NoUnderlyingPhysicalSettlTerms, Tag 42060.
func (m OrderMassCancelReport) SetNoUnderlyingPhysicalSettlTerms(f NoUnderlyingPhysicalSettlTermsRepeatingGroup) {
	m.SetGroup(f)
}

// SetNoUnderlyingProtectionTerms sets NoUnderlyingProtectionTerms, Tag 42068.
func (m OrderMassCancelReport) SetNoUnderlyingProtectionTerms(f NoUnderlyingProtectionTermsRepeatingGroup) {
	m.SetGroup(f)
}

// SetNoUnderlyingProvisions sets NoUnderlyingProvisions, Tag 42149.
func (m OrderMassCancelReport) SetNoUnderlyingProvisions(f NoUnderlyingProvisionsRepeatingGroup) {
	m.SetGroup(f)
}

// SetNoExtraordinaryEvents sets NoExtraordinaryEvents, Tag 42296.
func (m OrderMassCancelReport) SetNoExtraordinaryEvents(f NoExtraordinaryEventsRepeatingGroup) {
	m.SetGroup(f)
}

// SetSettlMethodElectingPartySide sets SettlMethodElectingPartySide, Tag 42590.
func (m OrderMassCancelReport) SetSettlMethodElectingPartySide(v int) {
	m.Set(field.NewSettlMethodElectingPartySide(v))
}

// SetMakeWholeDate sets MakeWholeDate, Tag 42591.
func (m OrderMassCancelReport) SetMakeWholeDate(v string) {
	m.Set(field.NewMakeWholeDate(v))
}

// SetMakeWholeAmount sets MakeWholeAmount, Tag 42592.
func (m OrderMassCancelReport) SetMakeWholeAmount(value decimal.Decimal, scale int32) {
	m.Set(field.NewMakeWholeAmount(value, scale))
}

// SetMakeWholeBenchmarkCurveName sets MakeWholeBenchmarkCurveName, Tag 42593.
func (m OrderMassCancelReport) SetMakeWholeBenchmarkCurveName(v string) {
	m.Set(field.NewMakeWholeBenchmarkCurveName(v))
}

// SetMakeWholeBenchmarkCurvePoint sets MakeWholeBenchmarkCurvePoint, Tag 42594.
func (m OrderMassCancelReport) SetMakeWholeBenchmarkCurvePoint(v string) {
	m.Set(field.NewMakeWholeBenchmarkCurvePoint(v))
}

// SetMakeWholeRecallSpread sets MakeWholeRecallSpread, Tag 42595.
func (m OrderMassCancelReport) SetMakeWholeRecallSpread(value decimal.Decimal, scale int32) {
	m.Set(field.NewMakeWholeRecallSpread(value, scale))
}

// SetMakeWholeBenchmarkQuote sets MakeWholeBenchmarkQuote, Tag 42596.
func (m OrderMassCancelReport) SetMakeWholeBenchmarkQuote(v int) {
	m.Set(field.NewMakeWholeBenchmarkQuote(v))
}

// SetMakeWholeInterpolationMethod sets MakeWholeInterpolationMethod, Tag 42597.
func (m OrderMassCancelReport) SetMakeWholeInterpolationMethod(v int) {
	m.Set(field.NewMakeWholeInterpolationMethod(v))
}

// SetNoSettlMethodElectionDateBusinessCenters sets NoSettlMethodElectionDateBusinessCenters, Tag 42775.
func (m OrderMassCancelReport) SetNoSettlMethodElectionDateBusinessCenters(f NoSettlMethodElectionDateBusinessCentersRepeatingGroup) {
	m.SetGroup(f)
}

// SetSettlMethodElectionDateUnadjusted sets SettlMethodElectionDateUnadjusted, Tag 42777.
func (m OrderMassCancelReport) SetSettlMethodElectionDateUnadjusted(v string) {
	m.Set(field.NewSettlMethodElectionDateUnadjusted(v))
}

// SetSettlMethodElectionDateBusinessDayConvention sets SettlMethodElectionDateBusinessDayConvention, Tag 42778.
func (m OrderMassCancelReport) SetSettlMethodElectionDateBusinessDayConvention(v int) {
	m.Set(field.NewSettlMethodElectionDateBusinessDayConvention(v))
}

// SetSettlMethodElectionDateRelativeTo sets SettlMethodElectionDateRelativeTo, Tag 42779.
func (m OrderMassCancelReport) SetSettlMethodElectionDateRelativeTo(v int) {
	m.Set(field.NewSettlMethodElectionDateRelativeTo(v))
}

// SetSettlMethodElectionDateOffsetPeriod sets SettlMethodElectionDateOffsetPeriod, Tag 42780.
func (m OrderMassCancelReport) SetSettlMethodElectionDateOffsetPeriod(v int) {
	m.Set(field.NewSettlMethodElectionDateOffsetPeriod(v))
}

// SetSettlMethodElectionDateOffsetUnit sets SettlMethodElectionDateOffsetUnit, Tag 42781.
func (m OrderMassCancelReport) SetSettlMethodElectionDateOffsetUnit(v string) {
	m.Set(field.NewSettlMethodElectionDateOffsetUnit(v))
}

// SetSettlMethodElectionDateOffsetDayType sets SettlMethodElectionDateOffsetDayType, Tag 42782.
func (m OrderMassCancelReport) SetSettlMethodElectionDateOffsetDayType(v int) {
	m.Set(field.NewSettlMethodElectionDateOffsetDayType(v))
}

// SetSettlMethodElectionDateAdjusted sets SettlMethodElectionDateAdjusted, Tag 42783.
func (m OrderMassCancelReport) SetSettlMethodElectionDateAdjusted(v string) {
	m.Set(field.NewSettlMethodElectionDateAdjusted(v))
}

// SetNoUnderlyingDividendPayments sets NoUnderlyingDividendPayments, Tag 42855.
func (m OrderMassCancelReport) SetNoUnderlyingDividendPayments(f NoUnderlyingDividendPaymentsRepeatingGroup) {
	m.SetGroup(f)
}

// SetUnderlyingDividendPayoutRatio sets UnderlyingDividendPayoutRatio, Tag 42860.
func (m OrderMassCancelReport) SetUnderlyingDividendPayoutRatio(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingDividendPayoutRatio(value, scale))
}

// SetUnderlyingDividendPayoutConditions sets UnderlyingDividendPayoutConditions, Tag 42861.
func (m OrderMassCancelReport) SetUnderlyingDividendPayoutConditions(v string) {
	m.Set(field.NewUnderlyingDividendPayoutConditions(v))
}

// SetNoUnderlyingExtraordinaryEvents sets NoUnderlyingExtraordinaryEvents, Tag 42884.
func (m OrderMassCancelReport) SetNoUnderlyingExtraordinaryEvents(f NoUnderlyingExtraordinaryEventsRepeatingGroup) {
	m.SetGroup(f)
}

// SetUnderlyingSettlMethodElectingPartySide sets UnderlyingSettlMethodElectingPartySide, Tag 42887.
func (m OrderMassCancelReport) SetUnderlyingSettlMethodElectingPartySide(v int) {
	m.Set(field.NewUnderlyingSettlMethodElectingPartySide(v))
}

// SetUnderlyingMakeWholeDate sets UnderlyingMakeWholeDate, Tag 42888.
func (m OrderMassCancelReport) SetUnderlyingMakeWholeDate(v string) {
	m.Set(field.NewUnderlyingMakeWholeDate(v))
}

// SetUnderlyingMakeWholeAmount sets UnderlyingMakeWholeAmount, Tag 42889.
func (m OrderMassCancelReport) SetUnderlyingMakeWholeAmount(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingMakeWholeAmount(value, scale))
}

// SetUnderlyingMakeWholeBenchmarkCurveName sets UnderlyingMakeWholeBenchmarkCurveName, Tag 42890.
func (m OrderMassCancelReport) SetUnderlyingMakeWholeBenchmarkCurveName(v string) {
	m.Set(field.NewUnderlyingMakeWholeBenchmarkCurveName(v))
}

// SetUnderlyingMakeWholeBenchmarkCurvePoint sets UnderlyingMakeWholeBenchmarkCurvePoint, Tag 42891.
func (m OrderMassCancelReport) SetUnderlyingMakeWholeBenchmarkCurvePoint(v string) {
	m.Set(field.NewUnderlyingMakeWholeBenchmarkCurvePoint(v))
}

// SetUnderlyingMakeWholeRecallSpread sets UnderlyingMakeWholeRecallSpread, Tag 42892.
func (m OrderMassCancelReport) SetUnderlyingMakeWholeRecallSpread(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingMakeWholeRecallSpread(value, scale))
}

// SetUnderlyingMakeWholeBenchmarkQuote sets UnderlyingMakeWholeBenchmarkQuote, Tag 42893.
func (m OrderMassCancelReport) SetUnderlyingMakeWholeBenchmarkQuote(v int) {
	m.Set(field.NewUnderlyingMakeWholeBenchmarkQuote(v))
}

// SetUnderlyingMakeWholeInterpolationMethod sets UnderlyingMakeWholeInterpolationMethod, Tag 42894.
func (m OrderMassCancelReport) SetUnderlyingMakeWholeInterpolationMethod(v int) {
	m.Set(field.NewUnderlyingMakeWholeInterpolationMethod(v))
}

// SetUnderlyingRateSpreadInitialValue sets UnderlyingRateSpreadInitialValue, Tag 43004.
func (m OrderMassCancelReport) SetUnderlyingRateSpreadInitialValue(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingRateSpreadInitialValue(value, scale))
}

// SetNoUnderlyingRateSpreadSteps sets NoUnderlyingRateSpreadSteps, Tag 43005.
func (m OrderMassCancelReport) SetNoUnderlyingRateSpreadSteps(f NoUnderlyingRateSpreadStepsRepeatingGroup) {
	m.SetGroup(f)
}

// SetNoUnderlyingSettlMethodElectionDateBusinessCenters sets NoUnderlyingSettlMethodElectionDateBusinessCenters, Tag 43074.
func (m OrderMassCancelReport) SetNoUnderlyingSettlMethodElectionDateBusinessCenters(f NoUnderlyingSettlMethodElectionDateBusinessCentersRepeatingGroup) {
	m.SetGroup(f)
}

// SetUnderlyingSettlMethodElectionDateUnadjusted sets UnderlyingSettlMethodElectionDateUnadjusted, Tag 43076.
func (m OrderMassCancelReport) SetUnderlyingSettlMethodElectionDateUnadjusted(v string) {
	m.Set(field.NewUnderlyingSettlMethodElectionDateUnadjusted(v))
}

// SetUnderlyingSettlMethodElectionDateBusinessDayConvention sets UnderlyingSettlMethodElectionDateBusinessDayConvention, Tag 43077.
func (m OrderMassCancelReport) SetUnderlyingSettlMethodElectionDateBusinessDayConvention(v int) {
	m.Set(field.NewUnderlyingSettlMethodElectionDateBusinessDayConvention(v))
}

// SetUnderlyingSettlMethodElectionDateRelativeTo sets UnderlyingSettlMethodElectionDateRelativeTo, Tag 43078.
func (m OrderMassCancelReport) SetUnderlyingSettlMethodElectionDateRelativeTo(v int) {
	m.Set(field.NewUnderlyingSettlMethodElectionDateRelativeTo(v))
}

// SetUnderlyingSettlMethodElectionDateOffsetPeriod sets UnderlyingSettlMethodElectionDateOffsetPeriod, Tag 43079.
func (m OrderMassCancelReport) SetUnderlyingSettlMethodElectionDateOffsetPeriod(v int) {
	m.Set(field.NewUnderlyingSettlMethodElectionDateOffsetPeriod(v))
}

// SetUnderlyingSettlMethodElectionDateOffsetUnit sets UnderlyingSettlMethodElectionDateOffsetUnit, Tag 43080.
func (m OrderMassCancelReport) SetUnderlyingSettlMethodElectionDateOffsetUnit(v string) {
	m.Set(field.NewUnderlyingSettlMethodElectionDateOffsetUnit(v))
}

// SetUnderlyingSettlMethodElectionDateOffsetDayType sets UnderlyingSettlMethodElectionDateOffsetDayType, Tag 43081.
func (m OrderMassCancelReport) SetUnderlyingSettlMethodElectionDateOffsetDayType(v int) {
	m.Set(field.NewUnderlyingSettlMethodElectionDateOffsetDayType(v))
}

// SetUnderlyingSettlMethodElectionDateAdjusted sets UnderlyingSettlMethodElectionDateAdjusted, Tag 43082.
func (m OrderMassCancelReport) SetUnderlyingSettlMethodElectionDateAdjusted(v string) {
	m.Set(field.NewUnderlyingSettlMethodElectionDateAdjusted(v))
}

// GetClOrdID gets ClOrdID, Tag 11.
func (m OrderMassCancelReport) GetClOrdID() (v string, err quickfix.MessageRejectError) {
	var f field.ClOrdIDField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetSecurityIDSource gets SecurityIDSource, Tag 22.
func (m OrderMassCancelReport) GetSecurityIDSource() (v enum.SecurityIDSource, err quickfix.MessageRejectError) {
	var f field.SecurityIDSourceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetOrderID gets OrderID, Tag 37.
func (m OrderMassCancelReport) GetOrderID() (v string, err quickfix.MessageRejectError) {
	var f field.OrderIDField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetSecurityID gets SecurityID, Tag 48.
func (m OrderMassCancelReport) GetSecurityID() (v string, err quickfix.MessageRejectError) {
	var f field.SecurityIDField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetSide gets Side, Tag 54.
func (m OrderMassCancelReport) GetSide() (v enum.Side, err quickfix.MessageRejectError) {
	var f field.SideField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetSymbol gets Symbol, Tag 55.
func (m OrderMassCancelReport) GetSymbol() (v string, err quickfix.MessageRejectError) {
	var f field.SymbolField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetText gets Text, Tag 58.
func (m OrderMassCancelReport) GetText() (v string, err quickfix.MessageRejectError) {
	var f field.TextField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetTransactTime gets TransactTime, Tag 60.
func (m OrderMassCancelReport) GetTransactTime() (v time.Time, err quickfix.MessageRejectError) {
	var f field.TransactTimeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetSymbolSfx gets SymbolSfx, Tag 65.
func (m OrderMassCancelReport) GetSymbolSfx() (v enum.SymbolSfx, err quickfix.MessageRejectError) {
	var f field.SymbolSfxField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetIssuer gets Issuer, Tag 106.
func (m OrderMassCancelReport) GetIssuer() (v string, err quickfix.MessageRejectError) {
	var f field.IssuerField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetSecurityDesc gets SecurityDesc, Tag 107.
func (m OrderMassCancelReport) GetSecurityDesc() (v string, err quickfix.MessageRejectError) {
	var f field.SecurityDescField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetSecurityType gets SecurityType, Tag 167.
func (m OrderMassCancelReport) GetSecurityType() (v enum.SecurityType, err quickfix.MessageRejectError) {
	var f field.SecurityTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetSecondaryOrderID gets SecondaryOrderID, Tag 198.
func (m OrderMassCancelReport) GetSecondaryOrderID() (v string, err quickfix.MessageRejectError) {
	var f field.SecondaryOrderIDField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetMaturityMonthYear gets MaturityMonthYear, Tag 200.
func (m OrderMassCancelReport) GetMaturityMonthYear() (v string, err quickfix.MessageRejectError) {
	var f field.MaturityMonthYearField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPutOrCall gets PutOrCall, Tag 201.
func (m OrderMassCancelReport) GetPutOrCall() (v enum.PutOrCall, err quickfix.MessageRejectError) {
	var f field.PutOrCallField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStrikePrice gets StrikePrice, Tag 202.
func (m OrderMassCancelReport) GetStrikePrice() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.StrikePriceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetOptAttribute gets OptAttribute, Tag 206.
func (m OrderMassCancelReport) GetOptAttribute() (v string, err quickfix.MessageRejectError) {
	var f field.OptAttributeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetSecurityExchange gets SecurityExchange, Tag 207.
func (m OrderMassCancelReport) GetSecurityExchange() (v string, err quickfix.MessageRejectError) {
	var f field.SecurityExchangeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetCouponRate gets CouponRate, Tag 223.
func (m OrderMassCancelReport) GetCouponRate() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.CouponRateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetCouponPaymentDate gets CouponPaymentDate, Tag 224.
func (m OrderMassCancelReport) GetCouponPaymentDate() (v string, err quickfix.MessageRejectError) {
	var f field.CouponPaymentDateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetIssueDate gets IssueDate, Tag 225.
func (m OrderMassCancelReport) GetIssueDate() (v string, err quickfix.MessageRejectError) {
	var f field.IssueDateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetRepurchaseTerm gets RepurchaseTerm, Tag 226.
func (m OrderMassCancelReport) GetRepurchaseTerm() (v int, err quickfix.MessageRejectError) {
	var f field.RepurchaseTermField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetRepurchaseRate gets RepurchaseRate, Tag 227.
func (m OrderMassCancelReport) GetRepurchaseRate() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.RepurchaseRateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetFactor gets Factor, Tag 228.
func (m OrderMassCancelReport) GetFactor() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.FactorField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetContractMultiplier gets ContractMultiplier, Tag 231.
func (m OrderMassCancelReport) GetContractMultiplier() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.ContractMultiplierField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetRepoCollateralSecurityType gets RepoCollateralSecurityType, Tag 239.
func (m OrderMassCancelReport) GetRepoCollateralSecurityType() (v string, err quickfix.MessageRejectError) {
	var f field.RepoCollateralSecurityTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetRedemptionDate gets RedemptionDate, Tag 240.
func (m OrderMassCancelReport) GetRedemptionDate() (v string, err quickfix.MessageRejectError) {
	var f field.RedemptionDateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingCouponPaymentDate gets UnderlyingCouponPaymentDate, Tag 241.
func (m OrderMassCancelReport) GetUnderlyingCouponPaymentDate() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingCouponPaymentDateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingIssueDate gets UnderlyingIssueDate, Tag 242.
func (m OrderMassCancelReport) GetUnderlyingIssueDate() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingIssueDateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingRepoCollateralSecurityType gets UnderlyingRepoCollateralSecurityType, Tag 243.
func (m OrderMassCancelReport) GetUnderlyingRepoCollateralSecurityType() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingRepoCollateralSecurityTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingRepurchaseTerm gets UnderlyingRepurchaseTerm, Tag 244.
func (m OrderMassCancelReport) GetUnderlyingRepurchaseTerm() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingRepurchaseTermField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingRepurchaseRate gets UnderlyingRepurchaseRate, Tag 245.
func (m OrderMassCancelReport) GetUnderlyingRepurchaseRate() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingRepurchaseRateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingFactor gets UnderlyingFactor, Tag 246.
func (m OrderMassCancelReport) GetUnderlyingFactor() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingFactorField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingRedemptionDate gets UnderlyingRedemptionDate, Tag 247.
func (m OrderMassCancelReport) GetUnderlyingRedemptionDate() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingRedemptionDateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetCreditRating gets CreditRating, Tag 255.
func (m OrderMassCancelReport) GetCreditRating() (v string, err quickfix.MessageRejectError) {
	var f field.CreditRatingField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingCreditRating gets UnderlyingCreditRating, Tag 256.
func (m OrderMassCancelReport) GetUnderlyingCreditRating() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingCreditRatingField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingSecurityIDSource gets UnderlyingSecurityIDSource, Tag 305.
func (m OrderMassCancelReport) GetUnderlyingSecurityIDSource() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingSecurityIDSourceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingIssuer gets UnderlyingIssuer, Tag 306.
func (m OrderMassCancelReport) GetUnderlyingIssuer() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingIssuerField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingSecurityDesc gets UnderlyingSecurityDesc, Tag 307.
func (m OrderMassCancelReport) GetUnderlyingSecurityDesc() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingSecurityDescField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingSecurityExchange gets UnderlyingSecurityExchange, Tag 308.
func (m OrderMassCancelReport) GetUnderlyingSecurityExchange() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingSecurityExchangeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingSecurityID gets UnderlyingSecurityID, Tag 309.
func (m OrderMassCancelReport) GetUnderlyingSecurityID() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingSecurityIDField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingSecurityType gets UnderlyingSecurityType, Tag 310.
func (m OrderMassCancelReport) GetUnderlyingSecurityType() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingSecurityTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingSymbol gets UnderlyingSymbol, Tag 311.
func (m OrderMassCancelReport) GetUnderlyingSymbol() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingSymbolField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingSymbolSfx gets UnderlyingSymbolSfx, Tag 312.
func (m OrderMassCancelReport) GetUnderlyingSymbolSfx() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingSymbolSfxField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingMaturityMonthYear gets UnderlyingMaturityMonthYear, Tag 313.
func (m OrderMassCancelReport) GetUnderlyingMaturityMonthYear() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingMaturityMonthYearField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPutOrCall gets UnderlyingPutOrCall, Tag 315.
func (m OrderMassCancelReport) GetUnderlyingPutOrCall() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPutOrCallField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStrikePrice gets UnderlyingStrikePrice, Tag 316.
func (m OrderMassCancelReport) GetUnderlyingStrikePrice() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingStrikePriceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingOptAttribute gets UnderlyingOptAttribute, Tag 317.
func (m OrderMassCancelReport) GetUnderlyingOptAttribute() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingOptAttributeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingCurrency gets UnderlyingCurrency, Tag 318.
func (m OrderMassCancelReport) GetUnderlyingCurrency() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingCurrencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetTradingSessionID gets TradingSessionID, Tag 336.
func (m OrderMassCancelReport) GetTradingSessionID() (v enum.TradingSessionID, err quickfix.MessageRejectError) {
	var f field.TradingSessionIDField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetEncodedIssuerLen gets EncodedIssuerLen, Tag 348.
func (m OrderMassCancelReport) GetEncodedIssuerLen() (v int, err quickfix.MessageRejectError) {
	var f field.EncodedIssuerLenField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetEncodedIssuer gets EncodedIssuer, Tag 349.
func (m OrderMassCancelReport) GetEncodedIssuer() (v string, err quickfix.MessageRejectError) {
	var f field.EncodedIssuerField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetEncodedSecurityDescLen gets EncodedSecurityDescLen, Tag 350.
func (m OrderMassCancelReport) GetEncodedSecurityDescLen() (v int, err quickfix.MessageRejectError) {
	var f field.EncodedSecurityDescLenField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetEncodedSecurityDesc gets EncodedSecurityDesc, Tag 351.
func (m OrderMassCancelReport) GetEncodedSecurityDesc() (v string, err quickfix.MessageRejectError) {
	var f field.EncodedSecurityDescField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetEncodedTextLen gets EncodedTextLen, Tag 354.
func (m OrderMassCancelReport) GetEncodedTextLen() (v int, err quickfix.MessageRejectError) {
	var f field.EncodedTextLenField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetEncodedText gets EncodedText, Tag 355.
func (m OrderMassCancelReport) GetEncodedText() (v string, err quickfix.MessageRejectError) {
	var f field.EncodedTextField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetEncodedUnderlyingIssuerLen gets EncodedUnderlyingIssuerLen, Tag 362.
func (m OrderMassCancelReport) GetEncodedUnderlyingIssuerLen() (v int, err quickfix.MessageRejectError) {
	var f field.EncodedUnderlyingIssuerLenField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetEncodedUnderlyingIssuer gets EncodedUnderlyingIssuer, Tag 363.
func (m OrderMassCancelReport) GetEncodedUnderlyingIssuer() (v string, err quickfix.MessageRejectError) {
	var f field.EncodedUnderlyingIssuerField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetEncodedUnderlyingSecurityDescLen gets EncodedUnderlyingSecurityDescLen, Tag 364.
func (m OrderMassCancelReport) GetEncodedUnderlyingSecurityDescLen() (v int, err quickfix.MessageRejectError) {
	var f field.EncodedUnderlyingSecurityDescLenField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetEncodedUnderlyingSecurityDesc gets EncodedUnderlyingSecurityDesc, Tag 365.
func (m OrderMassCancelReport) GetEncodedUnderlyingSecurityDesc() (v string, err quickfix.MessageRejectError) {
	var f field.EncodedUnderlyingSecurityDescField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingCouponRate gets UnderlyingCouponRate, Tag 435.
func (m OrderMassCancelReport) GetUnderlyingCouponRate() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingCouponRateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingContractMultiplier gets UnderlyingContractMultiplier, Tag 436.
func (m OrderMassCancelReport) GetUnderlyingContractMultiplier() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingContractMultiplierField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoPartyIDs gets NoPartyIDs, Tag 453.
func (m OrderMassCancelReport) GetNoPartyIDs() (NoPartyIDsRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoPartyIDsRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetNoSecurityAltID gets NoSecurityAltID, Tag 454.
func (m OrderMassCancelReport) GetNoSecurityAltID() (NoSecurityAltIDRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoSecurityAltIDRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetNoUnderlyingSecurityAltID gets NoUnderlyingSecurityAltID, Tag 457.
func (m OrderMassCancelReport) GetNoUnderlyingSecurityAltID() (NoUnderlyingSecurityAltIDRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingSecurityAltIDRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetProduct gets Product, Tag 460.
func (m OrderMassCancelReport) GetProduct() (v enum.Product, err quickfix.MessageRejectError) {
	var f field.ProductField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetCFICode gets CFICode, Tag 461.
func (m OrderMassCancelReport) GetCFICode() (v string, err quickfix.MessageRejectError) {
	var f field.CFICodeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProduct gets UnderlyingProduct, Tag 462.
func (m OrderMassCancelReport) GetUnderlyingProduct() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingProductField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingCFICode gets UnderlyingCFICode, Tag 463.
func (m OrderMassCancelReport) GetUnderlyingCFICode() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingCFICodeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetCountryOfIssue gets CountryOfIssue, Tag 470.
func (m OrderMassCancelReport) GetCountryOfIssue() (v string, err quickfix.MessageRejectError) {
	var f field.CountryOfIssueField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStateOrProvinceOfIssue gets StateOrProvinceOfIssue, Tag 471.
func (m OrderMassCancelReport) GetStateOrProvinceOfIssue() (v string, err quickfix.MessageRejectError) {
	var f field.StateOrProvinceOfIssueField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetLocaleOfIssue gets LocaleOfIssue, Tag 472.
func (m OrderMassCancelReport) GetLocaleOfIssue() (v string, err quickfix.MessageRejectError) {
	var f field.LocaleOfIssueField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetSecondaryClOrdID gets SecondaryClOrdID, Tag 526.
func (m OrderMassCancelReport) GetSecondaryClOrdID() (v string, err quickfix.MessageRejectError) {
	var f field.SecondaryClOrdIDField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetMassCancelRequestType gets MassCancelRequestType, Tag 530.
func (m OrderMassCancelReport) GetMassCancelRequestType() (v enum.MassCancelRequestType, err quickfix.MessageRejectError) {
	var f field.MassCancelRequestTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetMassCancelResponse gets MassCancelResponse, Tag 531.
func (m OrderMassCancelReport) GetMassCancelResponse() (v enum.MassCancelResponse, err quickfix.MessageRejectError) {
	var f field.MassCancelResponseField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetMassCancelRejectReason gets MassCancelRejectReason, Tag 532.
func (m OrderMassCancelReport) GetMassCancelRejectReason() (v enum.MassCancelRejectReason, err quickfix.MessageRejectError) {
	var f field.MassCancelRejectReasonField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetTotalAffectedOrders gets TotalAffectedOrders, Tag 533.
func (m OrderMassCancelReport) GetTotalAffectedOrders() (v int, err quickfix.MessageRejectError) {
	var f field.TotalAffectedOrdersField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoAffectedOrders gets NoAffectedOrders, Tag 534.
func (m OrderMassCancelReport) GetNoAffectedOrders() (NoAffectedOrdersRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoAffectedOrdersRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetMaturityDate gets MaturityDate, Tag 541.
func (m OrderMassCancelReport) GetMaturityDate() (v string, err quickfix.MessageRejectError) {
	var f field.MaturityDateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingMaturityDate gets UnderlyingMaturityDate, Tag 542.
func (m OrderMassCancelReport) GetUnderlyingMaturityDate() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingMaturityDateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetInstrRegistry gets InstrRegistry, Tag 543.
func (m OrderMassCancelReport) GetInstrRegistry() (v enum.InstrRegistry, err quickfix.MessageRejectError) {
	var f field.InstrRegistryField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingCountryOfIssue gets UnderlyingCountryOfIssue, Tag 592.
func (m OrderMassCancelReport) GetUnderlyingCountryOfIssue() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingCountryOfIssueField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStateOrProvinceOfIssue gets UnderlyingStateOrProvinceOfIssue, Tag 593.
func (m OrderMassCancelReport) GetUnderlyingStateOrProvinceOfIssue() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingStateOrProvinceOfIssueField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingLocaleOfIssue gets UnderlyingLocaleOfIssue, Tag 594.
func (m OrderMassCancelReport) GetUnderlyingLocaleOfIssue() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingLocaleOfIssueField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingInstrRegistry gets UnderlyingInstrRegistry, Tag 595.
func (m OrderMassCancelReport) GetUnderlyingInstrRegistry() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingInstrRegistryField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetTradingSessionSubID gets TradingSessionSubID, Tag 625.
func (m OrderMassCancelReport) GetTradingSessionSubID() (v enum.TradingSessionSubID, err quickfix.MessageRejectError) {
	var f field.TradingSessionSubIDField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetContractSettlMonth gets ContractSettlMonth, Tag 667.
func (m OrderMassCancelReport) GetContractSettlMonth() (v string, err quickfix.MessageRejectError) {
	var f field.ContractSettlMonthField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPool gets Pool, Tag 691.
func (m OrderMassCancelReport) GetPool() (v string, err quickfix.MessageRejectError) {
	var f field.PoolField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetSecuritySubType gets SecuritySubType, Tag 762.
func (m OrderMassCancelReport) GetSecuritySubType() (v string, err quickfix.MessageRejectError) {
	var f field.SecuritySubTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingSecuritySubType gets UnderlyingSecuritySubType, Tag 763.
func (m OrderMassCancelReport) GetUnderlyingSecuritySubType() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingSecuritySubTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPx gets UnderlyingPx, Tag 810.
func (m OrderMassCancelReport) GetUnderlyingPx() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingPxField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoEvents gets NoEvents, Tag 864.
func (m OrderMassCancelReport) GetNoEvents() (NoEventsRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoEventsRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetDatedDate gets DatedDate, Tag 873.
func (m OrderMassCancelReport) GetDatedDate() (v string, err quickfix.MessageRejectError) {
	var f field.DatedDateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetInterestAccrualDate gets InterestAccrualDate, Tag 874.
func (m OrderMassCancelReport) GetInterestAccrualDate() (v string, err quickfix.MessageRejectError) {
	var f field.InterestAccrualDateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetCPProgram gets CPProgram, Tag 875.
func (m OrderMassCancelReport) GetCPProgram() (v enum.CPProgram, err quickfix.MessageRejectError) {
	var f field.CPProgramField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetCPRegType gets CPRegType, Tag 876.
func (m OrderMassCancelReport) GetCPRegType() (v string, err quickfix.MessageRejectError) {
	var f field.CPRegTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingCPProgram gets UnderlyingCPProgram, Tag 877.
func (m OrderMassCancelReport) GetUnderlyingCPProgram() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingCPProgramField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingCPRegType gets UnderlyingCPRegType, Tag 878.
func (m OrderMassCancelReport) GetUnderlyingCPRegType() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingCPRegTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingQty gets UnderlyingQty, Tag 879.
func (m OrderMassCancelReport) GetUnderlyingQty() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingQtyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDirtyPrice gets UnderlyingDirtyPrice, Tag 882.
func (m OrderMassCancelReport) GetUnderlyingDirtyPrice() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingDirtyPriceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingEndPrice gets UnderlyingEndPrice, Tag 883.
func (m OrderMassCancelReport) GetUnderlyingEndPrice() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingEndPriceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStartValue gets UnderlyingStartValue, Tag 884.
func (m OrderMassCancelReport) GetUnderlyingStartValue() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingStartValueField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingCurrentValue gets UnderlyingCurrentValue, Tag 885.
func (m OrderMassCancelReport) GetUnderlyingCurrentValue() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingCurrentValueField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingEndValue gets UnderlyingEndValue, Tag 886.
func (m OrderMassCancelReport) GetUnderlyingEndValue() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingEndValueField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUnderlyingStips gets NoUnderlyingStips, Tag 887.
func (m OrderMassCancelReport) GetNoUnderlyingStips() (NoUnderlyingStipsRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingStipsRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetUnderlyingStrikeCurrency gets UnderlyingStrikeCurrency, Tag 941.
func (m OrderMassCancelReport) GetUnderlyingStrikeCurrency() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingStrikeCurrencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStrikeCurrency gets StrikeCurrency, Tag 947.
func (m OrderMassCancelReport) GetStrikeCurrency() (v string, err quickfix.MessageRejectError) {
	var f field.StrikeCurrencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetSecurityStatus gets SecurityStatus, Tag 965.
func (m OrderMassCancelReport) GetSecurityStatus() (v enum.SecurityStatus, err quickfix.MessageRejectError) {
	var f field.SecurityStatusField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetSettleOnOpenFlag gets SettleOnOpenFlag, Tag 966.
func (m OrderMassCancelReport) GetSettleOnOpenFlag() (v string, err quickfix.MessageRejectError) {
	var f field.SettleOnOpenFlagField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStrikeMultiplier gets StrikeMultiplier, Tag 967.
func (m OrderMassCancelReport) GetStrikeMultiplier() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.StrikeMultiplierField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStrikeValue gets StrikeValue, Tag 968.
func (m OrderMassCancelReport) GetStrikeValue() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.StrikeValueField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetMinPriceIncrement gets MinPriceIncrement, Tag 969.
func (m OrderMassCancelReport) GetMinPriceIncrement() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.MinPriceIncrementField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPositionLimit gets PositionLimit, Tag 970.
func (m OrderMassCancelReport) GetPositionLimit() (v int, err quickfix.MessageRejectError) {
	var f field.PositionLimitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNTPositionLimit gets NTPositionLimit, Tag 971.
func (m OrderMassCancelReport) GetNTPositionLimit() (v int, err quickfix.MessageRejectError) {
	var f field.NTPositionLimitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingAllocationPercent gets UnderlyingAllocationPercent, Tag 972.
func (m OrderMassCancelReport) GetUnderlyingAllocationPercent() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingAllocationPercentField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingCashAmount gets UnderlyingCashAmount, Tag 973.
func (m OrderMassCancelReport) GetUnderlyingCashAmount() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingCashAmountField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingCashType gets UnderlyingCashType, Tag 974.
func (m OrderMassCancelReport) GetUnderlyingCashType() (v enum.UnderlyingCashType, err quickfix.MessageRejectError) {
	var f field.UnderlyingCashTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingSettlementType gets UnderlyingSettlementType, Tag 975.
func (m OrderMassCancelReport) GetUnderlyingSettlementType() (v enum.UnderlyingSettlementType, err quickfix.MessageRejectError) {
	var f field.UnderlyingSettlementTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnitOfMeasure gets UnitOfMeasure, Tag 996.
func (m OrderMassCancelReport) GetUnitOfMeasure() (v enum.UnitOfMeasure, err quickfix.MessageRejectError) {
	var f field.UnitOfMeasureField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetTimeUnit gets TimeUnit, Tag 997.
func (m OrderMassCancelReport) GetTimeUnit() (v enum.TimeUnit, err quickfix.MessageRejectError) {
	var f field.TimeUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingUnitOfMeasure gets UnderlyingUnitOfMeasure, Tag 998.
func (m OrderMassCancelReport) GetUnderlyingUnitOfMeasure() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingUnitOfMeasureField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingTimeUnit gets UnderlyingTimeUnit, Tag 1000.
func (m OrderMassCancelReport) GetUnderlyingTimeUnit() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingTimeUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoInstrumentParties gets NoInstrumentParties, Tag 1018.
func (m OrderMassCancelReport) GetNoInstrumentParties() (NoInstrumentPartiesRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoInstrumentPartiesRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetUnderlyingCapValue gets UnderlyingCapValue, Tag 1038.
func (m OrderMassCancelReport) GetUnderlyingCapValue() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingCapValueField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingSettlMethod gets UnderlyingSettlMethod, Tag 1039.
func (m OrderMassCancelReport) GetUnderlyingSettlMethod() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingSettlMethodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingAdjustedQuantity gets UnderlyingAdjustedQuantity, Tag 1044.
func (m OrderMassCancelReport) GetUnderlyingAdjustedQuantity() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingAdjustedQuantityField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingFXRate gets UnderlyingFXRate, Tag 1045.
func (m OrderMassCancelReport) GetUnderlyingFXRate() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingFXRateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingFXRateCalc gets UnderlyingFXRateCalc, Tag 1046.
func (m OrderMassCancelReport) GetUnderlyingFXRateCalc() (v enum.UnderlyingFXRateCalc, err quickfix.MessageRejectError) {
	var f field.UnderlyingFXRateCalcField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetInstrmtAssignmentMethod gets InstrmtAssignmentMethod, Tag 1049.
func (m OrderMassCancelReport) GetInstrmtAssignmentMethod() (v enum.InstrmtAssignmentMethod, err quickfix.MessageRejectError) {
	var f field.InstrmtAssignmentMethodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUndlyInstrumentParties gets NoUndlyInstrumentParties, Tag 1058.
func (m OrderMassCancelReport) GetNoUndlyInstrumentParties() (NoUndlyInstrumentPartiesRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUndlyInstrumentPartiesRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetMaturityTime gets MaturityTime, Tag 1079.
func (m OrderMassCancelReport) GetMaturityTime() (v string, err quickfix.MessageRejectError) {
	var f field.MaturityTimeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetMinPriceIncrementAmount gets MinPriceIncrementAmount, Tag 1146.
func (m OrderMassCancelReport) GetMinPriceIncrementAmount() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.MinPriceIncrementAmountField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnitOfMeasureQty gets UnitOfMeasureQty, Tag 1147.
func (m OrderMassCancelReport) GetUnitOfMeasureQty() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnitOfMeasureQtyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetSecurityGroup gets SecurityGroup, Tag 1151.
func (m OrderMassCancelReport) GetSecurityGroup() (v string, err quickfix.MessageRejectError) {
	var f field.SecurityGroupField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetSecurityXMLLen gets SecurityXMLLen, Tag 1184.
func (m OrderMassCancelReport) GetSecurityXMLLen() (v int, err quickfix.MessageRejectError) {
	var f field.SecurityXMLLenField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetSecurityXML gets SecurityXML, Tag 1185.
func (m OrderMassCancelReport) GetSecurityXML() (v string, err quickfix.MessageRejectError) {
	var f field.SecurityXMLField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetSecurityXMLSchema gets SecurityXMLSchema, Tag 1186.
func (m OrderMassCancelReport) GetSecurityXMLSchema() (v string, err quickfix.MessageRejectError) {
	var f field.SecurityXMLSchemaField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPriceUnitOfMeasure gets PriceUnitOfMeasure, Tag 1191.
func (m OrderMassCancelReport) GetPriceUnitOfMeasure() (v string, err quickfix.MessageRejectError) {
	var f field.PriceUnitOfMeasureField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPriceUnitOfMeasureQty gets PriceUnitOfMeasureQty, Tag 1192.
func (m OrderMassCancelReport) GetPriceUnitOfMeasureQty() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.PriceUnitOfMeasureQtyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetSettlMethod gets SettlMethod, Tag 1193.
func (m OrderMassCancelReport) GetSettlMethod() (v enum.SettlMethod, err quickfix.MessageRejectError) {
	var f field.SettlMethodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetExerciseStyle gets ExerciseStyle, Tag 1194.
func (m OrderMassCancelReport) GetExerciseStyle() (v enum.ExerciseStyle, err quickfix.MessageRejectError) {
	var f field.ExerciseStyleField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetOptPayoutAmount gets OptPayoutAmount, Tag 1195.
func (m OrderMassCancelReport) GetOptPayoutAmount() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.OptPayoutAmountField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPriceQuoteMethod gets PriceQuoteMethod, Tag 1196.
func (m OrderMassCancelReport) GetPriceQuoteMethod() (v enum.PriceQuoteMethod, err quickfix.MessageRejectError) {
	var f field.PriceQuoteMethodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetValuationMethod gets ValuationMethod, Tag 1197.
func (m OrderMassCancelReport) GetValuationMethod() (v enum.ValuationMethod, err quickfix.MessageRejectError) {
	var f field.ValuationMethodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetListMethod gets ListMethod, Tag 1198.
func (m OrderMassCancelReport) GetListMethod() (v enum.ListMethod, err quickfix.MessageRejectError) {
	var f field.ListMethodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetCapPrice gets CapPrice, Tag 1199.
func (m OrderMassCancelReport) GetCapPrice() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.CapPriceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetFloorPrice gets FloorPrice, Tag 1200.
func (m OrderMassCancelReport) GetFloorPrice() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.FloorPriceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingMaturityTime gets UnderlyingMaturityTime, Tag 1213.
func (m OrderMassCancelReport) GetUnderlyingMaturityTime() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingMaturityTimeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProductComplex gets ProductComplex, Tag 1227.
func (m OrderMassCancelReport) GetProductComplex() (v string, err quickfix.MessageRejectError) {
	var f field.ProductComplexField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetFlexProductEligibilityIndicator gets FlexProductEligibilityIndicator, Tag 1242.
func (m OrderMassCancelReport) GetFlexProductEligibilityIndicator() (v bool, err quickfix.MessageRejectError) {
	var f field.FlexProductEligibilityIndicatorField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetFlexibleIndicator gets FlexibleIndicator, Tag 1244.
func (m OrderMassCancelReport) GetFlexibleIndicator() (v bool, err quickfix.MessageRejectError) {
	var f field.FlexibleIndicatorField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetMarketSegmentID gets MarketSegmentID, Tag 1300.
func (m OrderMassCancelReport) GetMarketSegmentID() (v string, err quickfix.MessageRejectError) {
	var f field.MarketSegmentIDField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetMarketID gets MarketID, Tag 1301.
func (m OrderMassCancelReport) GetMarketID() (v string, err quickfix.MessageRejectError) {
	var f field.MarketIDField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetMassActionReportID gets MassActionReportID, Tag 1369.
func (m OrderMassCancelReport) GetMassActionReportID() (v string, err quickfix.MessageRejectError) {
	var f field.MassActionReportIDField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoNotAffectedOrders gets NoNotAffectedOrders, Tag 1370.
func (m OrderMassCancelReport) GetNoNotAffectedOrders() (NoNotAffectedOrdersRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoNotAffectedOrdersRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetUnderlyingExerciseStyle gets UnderlyingExerciseStyle, Tag 1419.
func (m OrderMassCancelReport) GetUnderlyingExerciseStyle() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingExerciseStyleField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingUnitOfMeasureQty gets UnderlyingUnitOfMeasureQty, Tag 1423.
func (m OrderMassCancelReport) GetUnderlyingUnitOfMeasureQty() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingUnitOfMeasureQtyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPriceUnitOfMeasure gets UnderlyingPriceUnitOfMeasure, Tag 1424.
func (m OrderMassCancelReport) GetUnderlyingPriceUnitOfMeasure() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPriceUnitOfMeasureField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPriceUnitOfMeasureQty gets UnderlyingPriceUnitOfMeasureQty, Tag 1425.
func (m OrderMassCancelReport) GetUnderlyingPriceUnitOfMeasureQty() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingPriceUnitOfMeasureQtyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetContractMultiplierUnit gets ContractMultiplierUnit, Tag 1435.
func (m OrderMassCancelReport) GetContractMultiplierUnit() (v enum.ContractMultiplierUnit, err quickfix.MessageRejectError) {
	var f field.ContractMultiplierUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingContractMultiplierUnit gets UnderlyingContractMultiplierUnit, Tag 1437.
func (m OrderMassCancelReport) GetUnderlyingContractMultiplierUnit() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingContractMultiplierUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetFlowScheduleType gets FlowScheduleType, Tag 1439.
func (m OrderMassCancelReport) GetFlowScheduleType() (v enum.FlowScheduleType, err quickfix.MessageRejectError) {
	var f field.FlowScheduleTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingFlowScheduleType gets UnderlyingFlowScheduleType, Tag 1441.
func (m OrderMassCancelReport) GetUnderlyingFlowScheduleType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingFlowScheduleTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetRestructuringType gets RestructuringType, Tag 1449.
func (m OrderMassCancelReport) GetRestructuringType() (v enum.RestructuringType, err quickfix.MessageRejectError) {
	var f field.RestructuringTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetSeniority gets Seniority, Tag 1450.
func (m OrderMassCancelReport) GetSeniority() (v enum.Seniority, err quickfix.MessageRejectError) {
	var f field.SeniorityField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNotionalPercentageOutstanding gets NotionalPercentageOutstanding, Tag 1451.
func (m OrderMassCancelReport) GetNotionalPercentageOutstanding() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.NotionalPercentageOutstandingField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetOriginalNotionalPercentageOutstanding gets OriginalNotionalPercentageOutstanding, Tag 1452.
func (m OrderMassCancelReport) GetOriginalNotionalPercentageOutstanding() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.OriginalNotionalPercentageOutstandingField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingRestructuringType gets UnderlyingRestructuringType, Tag 1453.
func (m OrderMassCancelReport) GetUnderlyingRestructuringType() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingRestructuringTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingSeniority gets UnderlyingSeniority, Tag 1454.
func (m OrderMassCancelReport) GetUnderlyingSeniority() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingSeniorityField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingNotionalPercentageOutstanding gets UnderlyingNotionalPercentageOutstanding, Tag 1455.
func (m OrderMassCancelReport) GetUnderlyingNotionalPercentageOutstanding() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingNotionalPercentageOutstandingField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingOriginalNotionalPercentageOutstanding gets UnderlyingOriginalNotionalPercentageOutstanding, Tag 1456.
func (m OrderMassCancelReport) GetUnderlyingOriginalNotionalPercentageOutstanding() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingOriginalNotionalPercentageOutstandingField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetAttachmentPoint gets AttachmentPoint, Tag 1457.
func (m OrderMassCancelReport) GetAttachmentPoint() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.AttachmentPointField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDetachmentPoint gets DetachmentPoint, Tag 1458.
func (m OrderMassCancelReport) GetDetachmentPoint() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.DetachmentPointField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingAttachmentPoint gets UnderlyingAttachmentPoint, Tag 1459.
func (m OrderMassCancelReport) GetUnderlyingAttachmentPoint() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingAttachmentPointField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDetachmentPoint gets UnderlyingDetachmentPoint, Tag 1460.
func (m OrderMassCancelReport) GetUnderlyingDetachmentPoint() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingDetachmentPointField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoTargetPartyIDs gets NoTargetPartyIDs, Tag 1461.
func (m OrderMassCancelReport) GetNoTargetPartyIDs() (NoTargetPartyIDsRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoTargetPartyIDsRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetStrikePriceDeterminationMethod gets StrikePriceDeterminationMethod, Tag 1478.
func (m OrderMassCancelReport) GetStrikePriceDeterminationMethod() (v enum.StrikePriceDeterminationMethod, err quickfix.MessageRejectError) {
	var f field.StrikePriceDeterminationMethodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStrikePriceBoundaryMethod gets StrikePriceBoundaryMethod, Tag 1479.
func (m OrderMassCancelReport) GetStrikePriceBoundaryMethod() (v enum.StrikePriceBoundaryMethod, err quickfix.MessageRejectError) {
	var f field.StrikePriceBoundaryMethodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStrikePriceBoundaryPrecision gets StrikePriceBoundaryPrecision, Tag 1480.
func (m OrderMassCancelReport) GetStrikePriceBoundaryPrecision() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.StrikePriceBoundaryPrecisionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPriceDeterminationMethod gets UnderlyingPriceDeterminationMethod, Tag 1481.
func (m OrderMassCancelReport) GetUnderlyingPriceDeterminationMethod() (v enum.UnderlyingPriceDeterminationMethod, err quickfix.MessageRejectError) {
	var f field.UnderlyingPriceDeterminationMethodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetOptPayoutType gets OptPayoutType, Tag 1482.
func (m OrderMassCancelReport) GetOptPayoutType() (v enum.OptPayoutType, err quickfix.MessageRejectError) {
	var f field.OptPayoutTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoComplexEvents gets NoComplexEvents, Tag 1483.
func (m OrderMassCancelReport) GetNoComplexEvents() (NoComplexEventsRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoComplexEventsRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetPriceQuoteCurrency gets PriceQuoteCurrency, Tag 1524.
func (m OrderMassCancelReport) GetPriceQuoteCurrency() (v string, err quickfix.MessageRejectError) {
	var f field.PriceQuoteCurrencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPriceQuoteCurrency gets UnderlyingPriceQuoteCurrency, Tag 1526.
func (m OrderMassCancelReport) GetUnderlyingPriceQuoteCurrency() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPriceQuoteCurrencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetSwapSubClass gets SwapSubClass, Tag 1575.
func (m OrderMassCancelReport) GetSwapSubClass() (v enum.SwapSubClass, err quickfix.MessageRejectError) {
	var f field.SwapSubClassField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetSettlRateIndex gets SettlRateIndex, Tag 1577.
func (m OrderMassCancelReport) GetSettlRateIndex() (v string, err quickfix.MessageRejectError) {
	var f field.SettlRateIndexField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetSettlRateIndexLocation gets SettlRateIndexLocation, Tag 1580.
func (m OrderMassCancelReport) GetSettlRateIndexLocation() (v string, err quickfix.MessageRejectError) {
	var f field.SettlRateIndexLocationField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetOptionExpirationDesc gets OptionExpirationDesc, Tag 1581.
func (m OrderMassCancelReport) GetOptionExpirationDesc() (v string, err quickfix.MessageRejectError) {
	var f field.OptionExpirationDescField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetEncodedOptionExpirationDescLen gets EncodedOptionExpirationDescLen, Tag 1678.
func (m OrderMassCancelReport) GetEncodedOptionExpirationDescLen() (v int, err quickfix.MessageRejectError) {
	var f field.EncodedOptionExpirationDescLenField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetShortSaleRestriction gets ShortSaleRestriction, Tag 1687.
func (m OrderMassCancelReport) GetShortSaleRestriction() (v enum.ShortSaleRestriction, err quickfix.MessageRejectError) {
	var f field.ShortSaleRestrictionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetEncodedOptionExpirationDesc gets EncodedOptionExpirationDesc, Tag 1697.
func (m OrderMassCancelReport) GetEncodedOptionExpirationDesc() (v string, err quickfix.MessageRejectError) {
	var f field.EncodedOptionExpirationDescField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStrikeUnitOfMeasure gets StrikeUnitOfMeasure, Tag 1698.
func (m OrderMassCancelReport) GetStrikeUnitOfMeasure() (v string, err quickfix.MessageRejectError) {
	var f field.StrikeUnitOfMeasureField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnitOfMeasureCurrency gets UnitOfMeasureCurrency, Tag 1716.
func (m OrderMassCancelReport) GetUnitOfMeasureCurrency() (v string, err quickfix.MessageRejectError) {
	var f field.UnitOfMeasureCurrencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPriceUnitOfMeasureCurrency gets PriceUnitOfMeasureCurrency, Tag 1717.
func (m OrderMassCancelReport) GetPriceUnitOfMeasureCurrency() (v string, err quickfix.MessageRejectError) {
	var f field.PriceUnitOfMeasureCurrencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingUnitOfMeasureCurrency gets UnderlyingUnitOfMeasureCurrency, Tag 1718.
func (m OrderMassCancelReport) GetUnderlyingUnitOfMeasureCurrency() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingUnitOfMeasureCurrencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPriceUnitOfMeasureCurrency gets UnderlyingPriceUnitOfMeasureCurrency, Tag 1719.
func (m OrderMassCancelReport) GetUnderlyingPriceUnitOfMeasureCurrency() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPriceUnitOfMeasureCurrencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetObligationType gets ObligationType, Tag 1739.
func (m OrderMassCancelReport) GetObligationType() (v enum.ObligationType, err quickfix.MessageRejectError) {
	var f field.ObligationTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetRefTickTableID gets RefTickTableID, Tag 1787.
func (m OrderMassCancelReport) GetRefTickTableID() (v int, err quickfix.MessageRejectError) {
	var f field.RefTickTableIDField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingContractPriceRefMonth gets UnderlyingContractPriceRefMonth, Tag 1837.
func (m OrderMassCancelReport) GetUnderlyingContractPriceRefMonth() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingContractPriceRefMonthField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStrikeIndex gets StrikeIndex, Tag 1866.
func (m OrderMassCancelReport) GetStrikeIndex() (v string, err quickfix.MessageRejectError) {
	var f field.StrikeIndexField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingSecurityXMLLen gets UnderlyingSecurityXMLLen, Tag 1874.
func (m OrderMassCancelReport) GetUnderlyingSecurityXMLLen() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingSecurityXMLLenField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingSecurityXML gets UnderlyingSecurityXML, Tag 1875.
func (m OrderMassCancelReport) GetUnderlyingSecurityXML() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingSecurityXMLField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingSecurityXMLSchema gets UnderlyingSecurityXMLSchema, Tag 1876.
func (m OrderMassCancelReport) GetUnderlyingSecurityXMLSchema() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingSecurityXMLSchemaField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetAssetClass gets AssetClass, Tag 1938.
func (m OrderMassCancelReport) GetAssetClass() (v enum.AssetClass, err quickfix.MessageRejectError) {
	var f field.AssetClassField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetAssetSubClass gets AssetSubClass, Tag 1939.
func (m OrderMassCancelReport) GetAssetSubClass() (v enum.AssetSubClass, err quickfix.MessageRejectError) {
	var f field.AssetSubClassField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetAssetType gets AssetType, Tag 1940.
func (m OrderMassCancelReport) GetAssetType() (v string, err quickfix.MessageRejectError) {
	var f field.AssetTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetSwapClass gets SwapClass, Tag 1941.
func (m OrderMassCancelReport) GetSwapClass() (v enum.SwapClass, err quickfix.MessageRejectError) {
	var f field.SwapClassField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNthToDefault gets NthToDefault, Tag 1942.
func (m OrderMassCancelReport) GetNthToDefault() (v int, err quickfix.MessageRejectError) {
	var f field.NthToDefaultField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetMthToDefault gets MthToDefault, Tag 1943.
func (m OrderMassCancelReport) GetMthToDefault() (v int, err quickfix.MessageRejectError) {
	var f field.MthToDefaultField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetSettledEntityMatrixSource gets SettledEntityMatrixSource, Tag 1944.
func (m OrderMassCancelReport) GetSettledEntityMatrixSource() (v string, err quickfix.MessageRejectError) {
	var f field.SettledEntityMatrixSourceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetSettledEntityMatrixPublicationDate gets SettledEntityMatrixPublicationDate, Tag 1945.
func (m OrderMassCancelReport) GetSettledEntityMatrixPublicationDate() (v string, err quickfix.MessageRejectError) {
	var f field.SettledEntityMatrixPublicationDateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetCouponType gets CouponType, Tag 1946.
func (m OrderMassCancelReport) GetCouponType() (v enum.CouponType, err quickfix.MessageRejectError) {
	var f field.CouponTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetTotalIssuedAmount gets TotalIssuedAmount, Tag 1947.
func (m OrderMassCancelReport) GetTotalIssuedAmount() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.TotalIssuedAmountField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetCouponFrequencyPeriod gets CouponFrequencyPeriod, Tag 1948.
func (m OrderMassCancelReport) GetCouponFrequencyPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.CouponFrequencyPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetCouponFrequencyUnit gets CouponFrequencyUnit, Tag 1949.
func (m OrderMassCancelReport) GetCouponFrequencyUnit() (v enum.CouponFrequencyUnit, err quickfix.MessageRejectError) {
	var f field.CouponFrequencyUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetCouponDayCount gets CouponDayCount, Tag 1950.
func (m OrderMassCancelReport) GetCouponDayCount() (v enum.CouponDayCount, err quickfix.MessageRejectError) {
	var f field.CouponDayCountField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetConvertibleBondEquityID gets ConvertibleBondEquityID, Tag 1951.
func (m OrderMassCancelReport) GetConvertibleBondEquityID() (v string, err quickfix.MessageRejectError) {
	var f field.ConvertibleBondEquityIDField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetConvertibleBondEquityIDSource gets ConvertibleBondEquityIDSource, Tag 1952.
func (m OrderMassCancelReport) GetConvertibleBondEquityIDSource() (v string, err quickfix.MessageRejectError) {
	var f field.ConvertibleBondEquityIDSourceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetContractPriceRefMonth gets ContractPriceRefMonth, Tag 1953.
func (m OrderMassCancelReport) GetContractPriceRefMonth() (v string, err quickfix.MessageRejectError) {
	var f field.ContractPriceRefMonthField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetLienSeniority gets LienSeniority, Tag 1954.
func (m OrderMassCancelReport) GetLienSeniority() (v enum.LienSeniority, err quickfix.MessageRejectError) {
	var f field.LienSeniorityField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetLoanFacility gets LoanFacility, Tag 1955.
func (m OrderMassCancelReport) GetLoanFacility() (v enum.LoanFacility, err quickfix.MessageRejectError) {
	var f field.LoanFacilityField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetReferenceEntityType gets ReferenceEntityType, Tag 1956.
func (m OrderMassCancelReport) GetReferenceEntityType() (v enum.ReferenceEntityType, err quickfix.MessageRejectError) {
	var f field.ReferenceEntityTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetIndexSeries gets IndexSeries, Tag 1957.
func (m OrderMassCancelReport) GetIndexSeries() (v int, err quickfix.MessageRejectError) {
	var f field.IndexSeriesField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetIndexAnnexVersion gets IndexAnnexVersion, Tag 1958.
func (m OrderMassCancelReport) GetIndexAnnexVersion() (v int, err quickfix.MessageRejectError) {
	var f field.IndexAnnexVersionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetIndexAnnexDate gets IndexAnnexDate, Tag 1959.
func (m OrderMassCancelReport) GetIndexAnnexDate() (v string, err quickfix.MessageRejectError) {
	var f field.IndexAnnexDateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetIndexAnnexSource gets IndexAnnexSource, Tag 1960.
func (m OrderMassCancelReport) GetIndexAnnexSource() (v string, err quickfix.MessageRejectError) {
	var f field.IndexAnnexSourceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoSecondaryAssetClasses gets NoSecondaryAssetClasses, Tag 1976.
func (m OrderMassCancelReport) GetNoSecondaryAssetClasses() (NoSecondaryAssetClassesRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoSecondaryAssetClassesRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetNoUnderlyingEvents gets NoUnderlyingEvents, Tag 1981.
func (m OrderMassCancelReport) GetNoUnderlyingEvents() (NoUnderlyingEventsRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingEventsRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetUnderlyingConstituentWeight gets UnderlyingConstituentWeight, Tag 1988.
func (m OrderMassCancelReport) GetUnderlyingConstituentWeight() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingConstituentWeightField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingCouponType gets UnderlyingCouponType, Tag 1989.
func (m OrderMassCancelReport) GetUnderlyingCouponType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingCouponTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingTotalIssuedAmount gets UnderlyingTotalIssuedAmount, Tag 1990.
func (m OrderMassCancelReport) GetUnderlyingTotalIssuedAmount() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingTotalIssuedAmountField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingCouponFrequencyPeriod gets UnderlyingCouponFrequencyPeriod, Tag 1991.
func (m OrderMassCancelReport) GetUnderlyingCouponFrequencyPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingCouponFrequencyPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingCouponFrequencyUnit gets UnderlyingCouponFrequencyUnit, Tag 1992.
func (m OrderMassCancelReport) GetUnderlyingCouponFrequencyUnit() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingCouponFrequencyUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingCouponDayCount gets UnderlyingCouponDayCount, Tag 1993.
func (m OrderMassCancelReport) GetUnderlyingCouponDayCount() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingCouponDayCountField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingObligationID gets UnderlyingObligationID, Tag 1994.
func (m OrderMassCancelReport) GetUnderlyingObligationID() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingObligationIDField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingObligationIDSource gets UnderlyingObligationIDSource, Tag 1995.
func (m OrderMassCancelReport) GetUnderlyingObligationIDSource() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingObligationIDSourceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingEquityID gets UnderlyingEquityID, Tag 1996.
func (m OrderMassCancelReport) GetUnderlyingEquityID() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingEquityIDField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingEquityIDSource gets UnderlyingEquityIDSource, Tag 1997.
func (m OrderMassCancelReport) GetUnderlyingEquityIDSource() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingEquityIDSourceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingLienSeniority gets UnderlyingLienSeniority, Tag 1998.
func (m OrderMassCancelReport) GetUnderlyingLienSeniority() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingLienSeniorityField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingLoanFacility gets UnderlyingLoanFacility, Tag 1999.
func (m OrderMassCancelReport) GetUnderlyingLoanFacility() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingLoanFacilityField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingReferenceEntityType gets UnderlyingReferenceEntityType, Tag 2000.
func (m OrderMassCancelReport) GetUnderlyingReferenceEntityType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingReferenceEntityTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStrikeIndexSpread gets StrikeIndexSpread, Tag 2001.
func (m OrderMassCancelReport) GetStrikeIndexSpread() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.StrikeIndexSpreadField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetValuationSource gets ValuationSource, Tag 2002.
func (m OrderMassCancelReport) GetValuationSource() (v string, err quickfix.MessageRejectError) {
	var f field.ValuationSourceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingIndexSeries gets UnderlyingIndexSeries, Tag 2003.
func (m OrderMassCancelReport) GetUnderlyingIndexSeries() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingIndexSeriesField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingIndexAnnexVersion gets UnderlyingIndexAnnexVersion, Tag 2004.
func (m OrderMassCancelReport) GetUnderlyingIndexAnnexVersion() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingIndexAnnexVersionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingIndexAnnexDate gets UnderlyingIndexAnnexDate, Tag 2005.
func (m OrderMassCancelReport) GetUnderlyingIndexAnnexDate() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingIndexAnnexDateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingIndexAnnexSource gets UnderlyingIndexAnnexSource, Tag 2006.
func (m OrderMassCancelReport) GetUnderlyingIndexAnnexSource() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingIndexAnnexSourceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProductComplex gets UnderlyingProductComplex, Tag 2007.
func (m OrderMassCancelReport) GetUnderlyingProductComplex() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingProductComplexField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingSecurityGroup gets UnderlyingSecurityGroup, Tag 2008.
func (m OrderMassCancelReport) GetUnderlyingSecurityGroup() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingSecurityGroupField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingSettleOnOpenFlag gets UnderlyingSettleOnOpenFlag, Tag 2009.
func (m OrderMassCancelReport) GetUnderlyingSettleOnOpenFlag() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingSettleOnOpenFlagField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingAssignmentMethod gets UnderlyingAssignmentMethod, Tag 2010.
func (m OrderMassCancelReport) GetUnderlyingAssignmentMethod() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingAssignmentMethodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingSecurityStatus gets UnderlyingSecurityStatus, Tag 2011.
func (m OrderMassCancelReport) GetUnderlyingSecurityStatus() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingSecurityStatusField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingObligationType gets UnderlyingObligationType, Tag 2012.
func (m OrderMassCancelReport) GetUnderlyingObligationType() (v enum.UnderlyingObligationType, err quickfix.MessageRejectError) {
	var f field.UnderlyingObligationTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingAssetClass gets UnderlyingAssetClass, Tag 2013.
func (m OrderMassCancelReport) GetUnderlyingAssetClass() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingAssetClassField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingAssetSubClass gets UnderlyingAssetSubClass, Tag 2014.
func (m OrderMassCancelReport) GetUnderlyingAssetSubClass() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingAssetSubClassField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingAssetType gets UnderlyingAssetType, Tag 2015.
func (m OrderMassCancelReport) GetUnderlyingAssetType() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingAssetTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingSwapClass gets UnderlyingSwapClass, Tag 2016.
func (m OrderMassCancelReport) GetUnderlyingSwapClass() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingSwapClassField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingNthToDefault gets UnderlyingNthToDefault, Tag 2017.
func (m OrderMassCancelReport) GetUnderlyingNthToDefault() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingNthToDefaultField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingMthToDefault gets UnderlyingMthToDefault, Tag 2018.
func (m OrderMassCancelReport) GetUnderlyingMthToDefault() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingMthToDefaultField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingSettledEntityMatrixSource gets UnderlyingSettledEntityMatrixSource, Tag 2019.
func (m OrderMassCancelReport) GetUnderlyingSettledEntityMatrixSource() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingSettledEntityMatrixSourceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingSettledEntityMatrixPublicationDate gets UnderlyingSettledEntityMatrixPublicationDate, Tag 2020.
func (m OrderMassCancelReport) GetUnderlyingSettledEntityMatrixPublicationDate() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingSettledEntityMatrixPublicationDateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStrikeMultiplier gets UnderlyingStrikeMultiplier, Tag 2021.
func (m OrderMassCancelReport) GetUnderlyingStrikeMultiplier() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingStrikeMultiplierField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStrikeValue gets UnderlyingStrikeValue, Tag 2022.
func (m OrderMassCancelReport) GetUnderlyingStrikeValue() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingStrikeValueField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStrikePriceDeterminationMethod gets UnderlyingStrikePriceDeterminationMethod, Tag 2023.
func (m OrderMassCancelReport) GetUnderlyingStrikePriceDeterminationMethod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingStrikePriceDeterminationMethodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStrikePriceBoundaryMethod gets UnderlyingStrikePriceBoundaryMethod, Tag 2024.
func (m OrderMassCancelReport) GetUnderlyingStrikePriceBoundaryMethod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingStrikePriceBoundaryMethodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStrikePriceBoundaryPrecision gets UnderlyingStrikePriceBoundaryPrecision, Tag 2025.
func (m OrderMassCancelReport) GetUnderlyingStrikePriceBoundaryPrecision() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingStrikePriceBoundaryPrecisionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingMinPriceIncrement gets UnderlyingMinPriceIncrement, Tag 2026.
func (m OrderMassCancelReport) GetUnderlyingMinPriceIncrement() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingMinPriceIncrementField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingMinPriceIncrementAmount gets UnderlyingMinPriceIncrementAmount, Tag 2027.
func (m OrderMassCancelReport) GetUnderlyingMinPriceIncrementAmount() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingMinPriceIncrementAmountField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingOptPayoutType gets UnderlyingOptPayoutType, Tag 2028.
func (m OrderMassCancelReport) GetUnderlyingOptPayoutType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingOptPayoutTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingOptPayoutAmount gets UnderlyingOptPayoutAmount, Tag 2029.
func (m OrderMassCancelReport) GetUnderlyingOptPayoutAmount() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingOptPayoutAmountField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPriceQuoteMethod gets UnderlyingPriceQuoteMethod, Tag 2030.
func (m OrderMassCancelReport) GetUnderlyingPriceQuoteMethod() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPriceQuoteMethodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingValuationMethod gets UnderlyingValuationMethod, Tag 2031.
func (m OrderMassCancelReport) GetUnderlyingValuationMethod() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingValuationMethodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingListMethod gets UnderlyingListMethod, Tag 2032.
func (m OrderMassCancelReport) GetUnderlyingListMethod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingListMethodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingCapPrice gets UnderlyingCapPrice, Tag 2033.
func (m OrderMassCancelReport) GetUnderlyingCapPrice() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingCapPriceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingFloorPrice gets UnderlyingFloorPrice, Tag 2034.
func (m OrderMassCancelReport) GetUnderlyingFloorPrice() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingFloorPriceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingFlexibleIndicator gets UnderlyingFlexibleIndicator, Tag 2035.
func (m OrderMassCancelReport) GetUnderlyingFlexibleIndicator() (v bool, err quickfix.MessageRejectError) {
	var f field.UnderlyingFlexibleIndicatorField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingFlexProductEligibilityIndicator gets UnderlyingFlexProductEligibilityIndicator, Tag 2036.
func (m OrderMassCancelReport) GetUnderlyingFlexProductEligibilityIndicator() (v bool, err quickfix.MessageRejectError) {
	var f field.UnderlyingFlexProductEligibilityIndicatorField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPositionLimit gets UnderlyingPositionLimit, Tag 2037.
func (m OrderMassCancelReport) GetUnderlyingPositionLimit() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPositionLimitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingNTPositionLimit gets UnderlyingNTPositionLimit, Tag 2038.
func (m OrderMassCancelReport) GetUnderlyingNTPositionLimit() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingNTPositionLimitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPool gets UnderlyingPool, Tag 2039.
func (m OrderMassCancelReport) GetUnderlyingPool() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPoolField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingContractSettlMonth gets UnderlyingContractSettlMonth, Tag 2040.
func (m OrderMassCancelReport) GetUnderlyingContractSettlMonth() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingContractSettlMonthField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDatedDate gets UnderlyingDatedDate, Tag 2041.
func (m OrderMassCancelReport) GetUnderlyingDatedDate() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingDatedDateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingInterestAccrualDate gets UnderlyingInterestAccrualDate, Tag 2042.
func (m OrderMassCancelReport) GetUnderlyingInterestAccrualDate() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingInterestAccrualDateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingShortSaleRestriction gets UnderlyingShortSaleRestriction, Tag 2043.
func (m OrderMassCancelReport) GetUnderlyingShortSaleRestriction() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingShortSaleRestrictionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingRefTickTableID gets UnderlyingRefTickTableID, Tag 2044.
func (m OrderMassCancelReport) GetUnderlyingRefTickTableID() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingRefTickTableIDField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUnderlyingComplexEvents gets NoUnderlyingComplexEvents, Tag 2045.
func (m OrderMassCancelReport) GetNoUnderlyingComplexEvents() (NoUnderlyingComplexEventsRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingComplexEventsRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetNoUnderlyingSecondaryAssetClasses gets NoUnderlyingSecondaryAssetClasses, Tag 2080.
func (m OrderMassCancelReport) GetNoUnderlyingSecondaryAssetClasses() (NoUnderlyingSecondaryAssetClassesRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingSecondaryAssetClassesRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetValuationReferenceModel gets ValuationReferenceModel, Tag 2140.
func (m OrderMassCancelReport) GetValuationReferenceModel() (v string, err quickfix.MessageRejectError) {
	var f field.ValuationReferenceModelField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStrategyType gets StrategyType, Tag 2141.
func (m OrderMassCancelReport) GetStrategyType() (v enum.StrategyType, err quickfix.MessageRejectError) {
	var f field.StrategyTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetCommonPricingIndicator gets CommonPricingIndicator, Tag 2142.
func (m OrderMassCancelReport) GetCommonPricingIndicator() (v bool, err quickfix.MessageRejectError) {
	var f field.CommonPricingIndicatorField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetSettlDisruptionProvision gets SettlDisruptionProvision, Tag 2143.
func (m OrderMassCancelReport) GetSettlDisruptionProvision() (v enum.SettlDisruptionProvision, err quickfix.MessageRejectError) {
	var f field.SettlDisruptionProvisionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetInstrumentRoundingDirection gets InstrumentRoundingDirection, Tag 2144.
func (m OrderMassCancelReport) GetInstrumentRoundingDirection() (v string, err quickfix.MessageRejectError) {
	var f field.InstrumentRoundingDirectionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetInstrumentRoundingPrecision gets InstrumentRoundingPrecision, Tag 2145.
func (m OrderMassCancelReport) GetInstrumentRoundingPrecision() (v int, err quickfix.MessageRejectError) {
	var f field.InstrumentRoundingPrecisionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetAssetGroup gets AssetGroup, Tag 2210.
func (m OrderMassCancelReport) GetAssetGroup() (v enum.AssetGroup, err quickfix.MessageRejectError) {
	var f field.AssetGroupField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingSettlRateIndex gets UnderlyingSettlRateIndex, Tag 2284.
func (m OrderMassCancelReport) GetUnderlyingSettlRateIndex() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingSettlRateIndexField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingSettlRateIndexLocation gets UnderlyingSettlRateIndexLocation, Tag 2285.
func (m OrderMassCancelReport) GetUnderlyingSettlRateIndexLocation() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingSettlRateIndexLocationField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingOptionExpirationDesc gets UnderlyingOptionExpirationDesc, Tag 2286.
func (m OrderMassCancelReport) GetUnderlyingOptionExpirationDesc() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingOptionExpirationDescField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetEncodedUnderlyingOptionExpirationDescLen gets EncodedUnderlyingOptionExpirationDescLen, Tag 2287.
func (m OrderMassCancelReport) GetEncodedUnderlyingOptionExpirationDescLen() (v int, err quickfix.MessageRejectError) {
	var f field.EncodedUnderlyingOptionExpirationDescLenField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetEncodedUnderlyingOptionExpirationDesc gets EncodedUnderlyingOptionExpirationDesc, Tag 2288.
func (m OrderMassCancelReport) GetEncodedUnderlyingOptionExpirationDesc() (v string, err quickfix.MessageRejectError) {
	var f field.EncodedUnderlyingOptionExpirationDescField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingSwapSubClass gets UnderlyingSwapSubClass, Tag 2289.
func (m OrderMassCancelReport) GetUnderlyingSwapSubClass() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingSwapSubClassField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStrikeUnitOfMeasure gets UnderlyingStrikeUnitOfMeasure, Tag 2290.
func (m OrderMassCancelReport) GetUnderlyingStrikeUnitOfMeasure() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingStrikeUnitOfMeasureField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStrikeIndex gets UnderlyingStrikeIndex, Tag 2291.
func (m OrderMassCancelReport) GetUnderlyingStrikeIndex() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingStrikeIndexField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStrikeIndexSpread gets UnderlyingStrikeIndexSpread, Tag 2292.
func (m OrderMassCancelReport) GetUnderlyingStrikeIndexSpread() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingStrikeIndexSpreadField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingValuationSource gets UnderlyingValuationSource, Tag 2293.
func (m OrderMassCancelReport) GetUnderlyingValuationSource() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingValuationSourceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingValuationReferenceModel gets UnderlyingValuationReferenceModel, Tag 2294.
func (m OrderMassCancelReport) GetUnderlyingValuationReferenceModel() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingValuationReferenceModelField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStrategyType gets UnderlyingStrategyType, Tag 2295.
func (m OrderMassCancelReport) GetUnderlyingStrategyType() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingStrategyTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingCommonPricingIndicator gets UnderlyingCommonPricingIndicator, Tag 2296.
func (m OrderMassCancelReport) GetUnderlyingCommonPricingIndicator() (v bool, err quickfix.MessageRejectError) {
	var f field.UnderlyingCommonPricingIndicatorField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingSettlDisruptionProvision gets UnderlyingSettlDisruptionProvision, Tag 2297.
func (m OrderMassCancelReport) GetUnderlyingSettlDisruptionProvision() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingSettlDisruptionProvisionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingInstrumentRoundingDirection gets UnderlyingInstrumentRoundingDirection, Tag 2298.
func (m OrderMassCancelReport) GetUnderlyingInstrumentRoundingDirection() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingInstrumentRoundingDirectionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingInstrumentRoundingPrecision gets UnderlyingInstrumentRoundingPrecision, Tag 2299.
func (m OrderMassCancelReport) GetUnderlyingInstrumentRoundingPrecision() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingInstrumentRoundingPrecisionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoAssetAttributes gets NoAssetAttributes, Tag 2304.
func (m OrderMassCancelReport) GetNoAssetAttributes() (NoAssetAttributesRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoAssetAttributesRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetNoUnderlyingAssetAttributes gets NoUnderlyingAssetAttributes, Tag 2312.
func (m OrderMassCancelReport) GetNoUnderlyingAssetAttributes() (NoUnderlyingAssetAttributesRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingAssetAttributesRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetTradingUnitPeriodMultiplier gets TradingUnitPeriodMultiplier, Tag 2353.
func (m OrderMassCancelReport) GetTradingUnitPeriodMultiplier() (v int, err quickfix.MessageRejectError) {
	var f field.TradingUnitPeriodMultiplierField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingTradingUnitPeriodMultiplier gets UnderlyingTradingUnitPeriodMultiplier, Tag 2363.
func (m OrderMassCancelReport) GetUnderlyingTradingUnitPeriodMultiplier() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingTradingUnitPeriodMultiplierField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingAssetGroup gets UnderlyingAssetGroup, Tag 2491.
func (m OrderMassCancelReport) GetUnderlyingAssetGroup() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingAssetGroupField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetLowExercisePriceOptionIndicator gets LowExercisePriceOptionIndicator, Tag 2574.
func (m OrderMassCancelReport) GetLowExercisePriceOptionIndicator() (v bool, err quickfix.MessageRejectError) {
	var f field.LowExercisePriceOptionIndicatorField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetBlockTradeEligibilityIndicator gets BlockTradeEligibilityIndicator, Tag 2575.
func (m OrderMassCancelReport) GetBlockTradeEligibilityIndicator() (v bool, err quickfix.MessageRejectError) {
	var f field.BlockTradeEligibilityIndicatorField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetInstrumentPricePrecision gets InstrumentPricePrecision, Tag 2576.
func (m OrderMassCancelReport) GetInstrumentPricePrecision() (v int, err quickfix.MessageRejectError) {
	var f field.InstrumentPricePrecisionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStrikePricePrecision gets StrikePricePrecision, Tag 2577.
func (m OrderMassCancelReport) GetStrikePricePrecision() (v int, err quickfix.MessageRejectError) {
	var f field.StrikePricePrecisionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetOrigStrikePrice gets OrigStrikePrice, Tag 2578.
func (m OrderMassCancelReport) GetOrigStrikePrice() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.OrigStrikePriceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetSettlSubMethod gets SettlSubMethod, Tag 2579.
func (m OrderMassCancelReport) GetSettlSubMethod() (v enum.SettlSubMethod, err quickfix.MessageRejectError) {
	var f field.SettlSubMethodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStrikeIndexCurvePoint gets StrikeIndexCurvePoint, Tag 2600.
func (m OrderMassCancelReport) GetStrikeIndexCurvePoint() (v string, err quickfix.MessageRejectError) {
	var f field.StrikeIndexCurvePointField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStrikeIndexQuote gets StrikeIndexQuote, Tag 2601.
func (m OrderMassCancelReport) GetStrikeIndexQuote() (v enum.StrikeIndexQuote, err quickfix.MessageRejectError) {
	var f field.StrikeIndexQuoteField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetExtraordinaryEventAdjustmentMethod gets ExtraordinaryEventAdjustmentMethod, Tag 2602.
func (m OrderMassCancelReport) GetExtraordinaryEventAdjustmentMethod() (v enum.ExtraordinaryEventAdjustmentMethod, err quickfix.MessageRejectError) {
	var f field.ExtraordinaryEventAdjustmentMethodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetExchangeLookAlike gets ExchangeLookAlike, Tag 2603.
func (m OrderMassCancelReport) GetExchangeLookAlike() (v bool, err quickfix.MessageRejectError) {
	var f field.ExchangeLookAlikeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingNotional gets UnderlyingNotional, Tag 2614.
func (m OrderMassCancelReport) GetUnderlyingNotional() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingNotionalField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingNotionalCurrency gets UnderlyingNotionalCurrency, Tag 2615.
func (m OrderMassCancelReport) GetUnderlyingNotionalCurrency() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingNotionalCurrencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingNotionalDeterminationMethod gets UnderlyingNotionalDeterminationMethod, Tag 2616.
func (m OrderMassCancelReport) GetUnderlyingNotionalDeterminationMethod() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingNotionalDeterminationMethodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingNotionalAdjustments gets UnderlyingNotionalAdjustments, Tag 2617.
func (m OrderMassCancelReport) GetUnderlyingNotionalAdjustments() (v enum.UnderlyingNotionalAdjustments, err quickfix.MessageRejectError) {
	var f field.UnderlyingNotionalAdjustmentsField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingNotionalXIDRef gets UnderlyingNotionalXIDRef, Tag 2619.
func (m OrderMassCancelReport) GetUnderlyingNotionalXIDRef() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingNotionalXIDRefField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingFutureID gets UnderlyingFutureID, Tag 2620.
func (m OrderMassCancelReport) GetUnderlyingFutureID() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingFutureIDField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingFutureIDSource gets UnderlyingFutureIDSource, Tag 2621.
func (m OrderMassCancelReport) GetUnderlyingFutureIDSource() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingFutureIDSourceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStrikeIndexCurvePoint gets UnderlyingStrikeIndexCurvePoint, Tag 2622.
func (m OrderMassCancelReport) GetUnderlyingStrikeIndexCurvePoint() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingStrikeIndexCurvePointField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStrikeIndexQuote gets UnderlyingStrikeIndexQuote, Tag 2623.
func (m OrderMassCancelReport) GetUnderlyingStrikeIndexQuote() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingStrikeIndexQuoteField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingExtraordinaryEventAdjustmentMethod gets UnderlyingExtraordinaryEventAdjustmentMethod, Tag 2624.
func (m OrderMassCancelReport) GetUnderlyingExtraordinaryEventAdjustmentMethod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingExtraordinaryEventAdjustmentMethodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingExchangeLookAlike gets UnderlyingExchangeLookAlike, Tag 2625.
func (m OrderMassCancelReport) GetUnderlyingExchangeLookAlike() (v bool, err quickfix.MessageRejectError) {
	var f field.UnderlyingExchangeLookAlikeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingAverageVolumeLimitationPercentage gets UnderlyingAverageVolumeLimitationPercentage, Tag 2626.
func (m OrderMassCancelReport) GetUnderlyingAverageVolumeLimitationPercentage() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingAverageVolumeLimitationPercentageField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingAverageVolumeLimitationPeriodDays gets UnderlyingAverageVolumeLimitationPeriodDays, Tag 2627.
func (m OrderMassCancelReport) GetUnderlyingAverageVolumeLimitationPeriodDays() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingAverageVolumeLimitationPeriodDaysField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDepositoryReceiptIndicator gets UnderlyingDepositoryReceiptIndicator, Tag 2628.
func (m OrderMassCancelReport) GetUnderlyingDepositoryReceiptIndicator() (v bool, err quickfix.MessageRejectError) {
	var f field.UnderlyingDepositoryReceiptIndicatorField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingOpenUnits gets UnderlyingOpenUnits, Tag 2629.
func (m OrderMassCancelReport) GetUnderlyingOpenUnits() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingOpenUnitsField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingBasketDivisor gets UnderlyingBasketDivisor, Tag 2630.
func (m OrderMassCancelReport) GetUnderlyingBasketDivisor() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingBasketDivisorField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingInstrumentXID gets UnderlyingInstrumentXID, Tag 2631.
func (m OrderMassCancelReport) GetUnderlyingInstrumentXID() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingInstrumentXIDField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetInTheMoneyCondition gets InTheMoneyCondition, Tag 2681.
func (m OrderMassCancelReport) GetInTheMoneyCondition() (v enum.InTheMoneyCondition, err quickfix.MessageRejectError) {
	var f field.InTheMoneyConditionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingInTheMoneyCondition gets UnderlyingInTheMoneyCondition, Tag 2683.
func (m OrderMassCancelReport) GetUnderlyingInTheMoneyCondition() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingInTheMoneyConditionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetContraryInstructionEligibilityIndicator gets ContraryInstructionEligibilityIndicator, Tag 2685.
func (m OrderMassCancelReport) GetContraryInstructionEligibilityIndicator() (v bool, err quickfix.MessageRejectError) {
	var f field.ContraryInstructionEligibilityIndicatorField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingContraryInstructionEligibilityIndicator gets UnderlyingContraryInstructionEligibilityIndicator, Tag 2687.
func (m OrderMassCancelReport) GetUnderlyingContraryInstructionEligibilityIndicator() (v bool, err quickfix.MessageRejectError) {
	var f field.UnderlyingContraryInstructionEligibilityIndicatorField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetFinancialInstrumentFullName gets FinancialInstrumentFullName, Tag 2714.
func (m OrderMassCancelReport) GetFinancialInstrumentFullName() (v string, err quickfix.MessageRejectError) {
	var f field.FinancialInstrumentFullNameField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetEncodedFinancialInstrumentFullNameLen gets EncodedFinancialInstrumentFullNameLen, Tag 2715.
func (m OrderMassCancelReport) GetEncodedFinancialInstrumentFullNameLen() (v int, err quickfix.MessageRejectError) {
	var f field.EncodedFinancialInstrumentFullNameLenField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetEncodedFinancialInstrumentFullName gets EncodedFinancialInstrumentFullName, Tag 2716.
func (m OrderMassCancelReport) GetEncodedFinancialInstrumentFullName() (v string, err quickfix.MessageRejectError) {
	var f field.EncodedFinancialInstrumentFullNameField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingFinancialInstrumentFullName gets UnderlyingFinancialInstrumentFullName, Tag 2720.
func (m OrderMassCancelReport) GetUnderlyingFinancialInstrumentFullName() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingFinancialInstrumentFullNameField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetEncodedUnderlyingFinancialInstrumentFullNameLen gets EncodedUnderlyingFinancialInstrumentFullNameLen, Tag 2721.
func (m OrderMassCancelReport) GetEncodedUnderlyingFinancialInstrumentFullNameLen() (v int, err quickfix.MessageRejectError) {
	var f field.EncodedUnderlyingFinancialInstrumentFullNameLenField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetEncodedUnderlyingFinancialInstrumentFullName gets EncodedUnderlyingFinancialInstrumentFullName, Tag 2722.
func (m OrderMassCancelReport) GetEncodedUnderlyingFinancialInstrumentFullName() (v string, err quickfix.MessageRejectError) {
	var f field.EncodedUnderlyingFinancialInstrumentFullNameField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingIndexCurveUnit gets UnderlyingIndexCurveUnit, Tag 2723.
func (m OrderMassCancelReport) GetUnderlyingIndexCurveUnit() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingIndexCurveUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingIndexCurvePeriod gets UnderlyingIndexCurvePeriod, Tag 2724.
func (m OrderMassCancelReport) GetUnderlyingIndexCurvePeriod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingIndexCurvePeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetAssetSubType gets AssetSubType, Tag 2735.
func (m OrderMassCancelReport) GetAssetSubType() (v string, err quickfix.MessageRejectError) {
	var f field.AssetSubTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetFinancialInstrumentShortName gets FinancialInstrumentShortName, Tag 2737.
func (m OrderMassCancelReport) GetFinancialInstrumentShortName() (v string, err quickfix.MessageRejectError) {
	var f field.FinancialInstrumentShortNameField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingFinancialInstrumentShortName gets UnderlyingFinancialInstrumentShortName, Tag 2742.
func (m OrderMassCancelReport) GetUnderlyingFinancialInstrumentShortName() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingFinancialInstrumentShortNameField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingAssetSubType gets UnderlyingAssetSubType, Tag 2744.
func (m OrderMassCancelReport) GetUnderlyingAssetSubType() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingAssetSubTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDeliveryRouteOrCharter gets DeliveryRouteOrCharter, Tag 2752.
func (m OrderMassCancelReport) GetDeliveryRouteOrCharter() (v string, err quickfix.MessageRejectError) {
	var f field.DeliveryRouteOrCharterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetReturnTrigger gets ReturnTrigger, Tag 2753.
func (m OrderMassCancelReport) GetReturnTrigger() (v enum.ReturnTrigger, err quickfix.MessageRejectError) {
	var f field.ReturnTriggerField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDeliveryRouteOrCharter gets UnderlyingDeliveryRouteOrCharter, Tag 2756.
func (m OrderMassCancelReport) GetUnderlyingDeliveryRouteOrCharter() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingDeliveryRouteOrCharterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingReturnTrigger gets UnderlyingReturnTrigger, Tag 2757.
func (m OrderMassCancelReport) GetUnderlyingReturnTrigger() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingReturnTriggerField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingID gets UnderlyingID, Tag 2874.
func (m OrderMassCancelReport) GetUnderlyingID() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingIDField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetCouponOtherDayCount gets CouponOtherDayCount, Tag 2879.
func (m OrderMassCancelReport) GetCouponOtherDayCount() (v string, err quickfix.MessageRejectError) {
	var f field.CouponOtherDayCountField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingCouponOtherDayCount gets UnderlyingCouponOtherDayCount, Tag 2881.
func (m OrderMassCancelReport) GetUnderlyingCouponOtherDayCount() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingCouponOtherDayCountField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingAccruedInterestAmt gets UnderlyingAccruedInterestAmt, Tag 2885.
func (m OrderMassCancelReport) GetUnderlyingAccruedInterestAmt() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingAccruedInterestAmtField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingNumDaysInterest gets UnderlyingNumDaysInterest, Tag 2886.
func (m OrderMassCancelReport) GetUnderlyingNumDaysInterest() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingNumDaysInterestField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUPICode gets UPICode, Tag 2891.
func (m OrderMassCancelReport) GetUPICode() (v string, err quickfix.MessageRejectError) {
	var f field.UPICodeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingUPICode gets UnderlyingUPICode, Tag 2894.
func (m OrderMassCancelReport) GetUnderlyingUPICode() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingUPICodeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoAdditionalTerms gets NoAdditionalTerms, Tag 40019.
func (m OrderMassCancelReport) GetNoAdditionalTerms() (NoAdditionalTermsRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoAdditionalTermsRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetNoCashSettlTerms gets NoCashSettlTerms, Tag 40022.
func (m OrderMassCancelReport) GetNoCashSettlTerms() (NoCashSettlTermsRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoCashSettlTermsRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetNoStreams gets NoStreams, Tag 40049.
func (m OrderMassCancelReport) GetNoStreams() (NoStreamsRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoStreamsRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetNoProvisions gets NoProvisions, Tag 40090.
func (m OrderMassCancelReport) GetNoProvisions() (NoProvisionsRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoProvisionsRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetNoProtectionTerms gets NoProtectionTerms, Tag 40181.
func (m OrderMassCancelReport) GetNoProtectionTerms() (NoProtectionTermsRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoProtectionTermsRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetNoPhysicalSettlTerms gets NoPhysicalSettlTerms, Tag 40204.
func (m OrderMassCancelReport) GetNoPhysicalSettlTerms() (NoPhysicalSettlTermsRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoPhysicalSettlTermsRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetNoBusinessCenters gets NoBusinessCenters, Tag 40278.
func (m OrderMassCancelReport) GetNoBusinessCenters() (NoBusinessCentersRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoBusinessCentersRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetNoUnderlyingStreams gets NoUnderlyingStreams, Tag 40540.
func (m OrderMassCancelReport) GetNoUnderlyingStreams() (NoUnderlyingStreamsRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingStreamsRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetBusinessDayConvention gets BusinessDayConvention, Tag 40921.
func (m OrderMassCancelReport) GetBusinessDayConvention() (v enum.BusinessDayConvention, err quickfix.MessageRejectError) {
	var f field.BusinessDayConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDateRollConvention gets DateRollConvention, Tag 40922.
func (m OrderMassCancelReport) GetDateRollConvention() (v enum.DateRollConvention, err quickfix.MessageRejectError) {
	var f field.DateRollConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUnderlyingBusinessCenters gets NoUnderlyingBusinessCenters, Tag 40962.
func (m OrderMassCancelReport) GetNoUnderlyingBusinessCenters() (NoUnderlyingBusinessCentersRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingBusinessCentersRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetUnderlyingBusinessDayConvention gets UnderlyingBusinessDayConvention, Tag 40964.
func (m OrderMassCancelReport) GetUnderlyingBusinessDayConvention() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingBusinessDayConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDateRollConvention gets UnderlyingDateRollConvention, Tag 40965.
func (m OrderMassCancelReport) GetUnderlyingDateRollConvention() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingDateRollConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetMarketDisruptionProvision gets MarketDisruptionProvision, Tag 41087.
func (m OrderMassCancelReport) GetMarketDisruptionProvision() (v enum.MarketDisruptionProvision, err quickfix.MessageRejectError) {
	var f field.MarketDisruptionProvisionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetMarketDisruptionFallbackProvision gets MarketDisruptionFallbackProvision, Tag 41088.
func (m OrderMassCancelReport) GetMarketDisruptionFallbackProvision() (v enum.MarketDisruptionFallbackProvision, err quickfix.MessageRejectError) {
	var f field.MarketDisruptionFallbackProvisionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetMarketDisruptionMaximumDays gets MarketDisruptionMaximumDays, Tag 41089.
func (m OrderMassCancelReport) GetMarketDisruptionMaximumDays() (v int, err quickfix.MessageRejectError) {
	var f field.MarketDisruptionMaximumDaysField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetMarketDisruptionMaterialityPercentage gets MarketDisruptionMaterialityPercentage, Tag 41090.
func (m OrderMassCancelReport) GetMarketDisruptionMaterialityPercentage() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.MarketDisruptionMaterialityPercentageField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetMarketDisruptionMinimumFuturesContracts gets MarketDisruptionMinimumFuturesContracts, Tag 41091.
func (m OrderMassCancelReport) GetMarketDisruptionMinimumFuturesContracts() (v int, err quickfix.MessageRejectError) {
	var f field.MarketDisruptionMinimumFuturesContractsField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoMarketDisruptionEvents gets NoMarketDisruptionEvents, Tag 41092.
func (m OrderMassCancelReport) GetNoMarketDisruptionEvents() (NoMarketDisruptionEventsRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoMarketDisruptionEventsRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetNoMarketDisruptionFallbacks gets NoMarketDisruptionFallbacks, Tag 41094.
func (m OrderMassCancelReport) GetNoMarketDisruptionFallbacks() (NoMarketDisruptionFallbacksRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoMarketDisruptionFallbacksRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetNoMarketDisruptionFallbackReferencePrices gets NoMarketDisruptionFallbackReferencePrices, Tag 41096.
func (m OrderMassCancelReport) GetNoMarketDisruptionFallbackReferencePrices() (NoMarketDisruptionFallbackReferencePricesRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoMarketDisruptionFallbackReferencePricesRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetExerciseDesc gets ExerciseDesc, Tag 41106.
func (m OrderMassCancelReport) GetExerciseDesc() (v string, err quickfix.MessageRejectError) {
	var f field.ExerciseDescField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetEncodedExerciseDescLen gets EncodedExerciseDescLen, Tag 41107.
func (m OrderMassCancelReport) GetEncodedExerciseDescLen() (v int, err quickfix.MessageRejectError) {
	var f field.EncodedExerciseDescLenField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetEncodedExerciseDesc gets EncodedExerciseDesc, Tag 41108.
func (m OrderMassCancelReport) GetEncodedExerciseDesc() (v string, err quickfix.MessageRejectError) {
	var f field.EncodedExerciseDescField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetAutomaticExerciseIndicator gets AutomaticExerciseIndicator, Tag 41109.
func (m OrderMassCancelReport) GetAutomaticExerciseIndicator() (v bool, err quickfix.MessageRejectError) {
	var f field.AutomaticExerciseIndicatorField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetAutomaticExerciseThresholdRate gets AutomaticExerciseThresholdRate, Tag 41110.
func (m OrderMassCancelReport) GetAutomaticExerciseThresholdRate() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.AutomaticExerciseThresholdRateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetExerciseConfirmationMethod gets ExerciseConfirmationMethod, Tag 41111.
func (m OrderMassCancelReport) GetExerciseConfirmationMethod() (v enum.ExerciseConfirmationMethod, err quickfix.MessageRejectError) {
	var f field.ExerciseConfirmationMethodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetManualNoticeBusinessCenter gets ManualNoticeBusinessCenter, Tag 41112.
func (m OrderMassCancelReport) GetManualNoticeBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.ManualNoticeBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetFallbackExerciseIndicator gets FallbackExerciseIndicator, Tag 41113.
func (m OrderMassCancelReport) GetFallbackExerciseIndicator() (v bool, err quickfix.MessageRejectError) {
	var f field.FallbackExerciseIndicatorField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetLimitedRightToConfirmIndicator gets LimitedRightToConfirmIndicator, Tag 41114.
func (m OrderMassCancelReport) GetLimitedRightToConfirmIndicator() (v bool, err quickfix.MessageRejectError) {
	var f field.LimitedRightToConfirmIndicatorField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetExerciseSplitTicketIndicator gets ExerciseSplitTicketIndicator, Tag 41115.
func (m OrderMassCancelReport) GetExerciseSplitTicketIndicator() (v bool, err quickfix.MessageRejectError) {
	var f field.ExerciseSplitTicketIndicatorField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoOptionExerciseBusinessCenters gets NoOptionExerciseBusinessCenters, Tag 41116.
func (m OrderMassCancelReport) GetNoOptionExerciseBusinessCenters() (NoOptionExerciseBusinessCentersRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoOptionExerciseBusinessCentersRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetOptionExerciseBusinessDayConvention gets OptionExerciseBusinessDayConvention, Tag 41118.
func (m OrderMassCancelReport) GetOptionExerciseBusinessDayConvention() (v int, err quickfix.MessageRejectError) {
	var f field.OptionExerciseBusinessDayConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetOptionExerciseEarliestDateOffsetDayType gets OptionExerciseEarliestDateOffsetDayType, Tag 41119.
func (m OrderMassCancelReport) GetOptionExerciseEarliestDateOffsetDayType() (v int, err quickfix.MessageRejectError) {
	var f field.OptionExerciseEarliestDateOffsetDayTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetOptionExerciseEarliestDateOffsetPeriod gets OptionExerciseEarliestDateOffsetPeriod, Tag 41120.
func (m OrderMassCancelReport) GetOptionExerciseEarliestDateOffsetPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.OptionExerciseEarliestDateOffsetPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetOptionExerciseEarliestDateOffsetUnit gets OptionExerciseEarliestDateOffsetUnit, Tag 41121.
func (m OrderMassCancelReport) GetOptionExerciseEarliestDateOffsetUnit() (v string, err quickfix.MessageRejectError) {
	var f field.OptionExerciseEarliestDateOffsetUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetOptionExerciseFrequencyPeriod gets OptionExerciseFrequencyPeriod, Tag 41122.
func (m OrderMassCancelReport) GetOptionExerciseFrequencyPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.OptionExerciseFrequencyPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetOptionExerciseFrequencyUnit gets OptionExerciseFrequencyUnit, Tag 41123.
func (m OrderMassCancelReport) GetOptionExerciseFrequencyUnit() (v string, err quickfix.MessageRejectError) {
	var f field.OptionExerciseFrequencyUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetOptionExerciseStartDateUnadjusted gets OptionExerciseStartDateUnadjusted, Tag 41124.
func (m OrderMassCancelReport) GetOptionExerciseStartDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.OptionExerciseStartDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetOptionExerciseStartDateRelativeTo gets OptionExerciseStartDateRelativeTo, Tag 41125.
func (m OrderMassCancelReport) GetOptionExerciseStartDateRelativeTo() (v int, err quickfix.MessageRejectError) {
	var f field.OptionExerciseStartDateRelativeToField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetOptionExerciseStartDateOffsetPeriod gets OptionExerciseStartDateOffsetPeriod, Tag 41126.
func (m OrderMassCancelReport) GetOptionExerciseStartDateOffsetPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.OptionExerciseStartDateOffsetPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetOptionExerciseStartDateOffsetUnit gets OptionExerciseStartDateOffsetUnit, Tag 41127.
func (m OrderMassCancelReport) GetOptionExerciseStartDateOffsetUnit() (v string, err quickfix.MessageRejectError) {
	var f field.OptionExerciseStartDateOffsetUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetOptionExerciseStartDateOffsetDayType gets OptionExerciseStartDateOffsetDayType, Tag 41128.
func (m OrderMassCancelReport) GetOptionExerciseStartDateOffsetDayType() (v int, err quickfix.MessageRejectError) {
	var f field.OptionExerciseStartDateOffsetDayTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetOptionExerciseStartDateAdjusted gets OptionExerciseStartDateAdjusted, Tag 41129.
func (m OrderMassCancelReport) GetOptionExerciseStartDateAdjusted() (v string, err quickfix.MessageRejectError) {
	var f field.OptionExerciseStartDateAdjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetOptionExerciseSkip gets OptionExerciseSkip, Tag 41130.
func (m OrderMassCancelReport) GetOptionExerciseSkip() (v int, err quickfix.MessageRejectError) {
	var f field.OptionExerciseSkipField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetOptionExerciseNominationDeadline gets OptionExerciseNominationDeadline, Tag 41131.
func (m OrderMassCancelReport) GetOptionExerciseNominationDeadline() (v string, err quickfix.MessageRejectError) {
	var f field.OptionExerciseNominationDeadlineField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetOptionExerciseFirstDateUnadjusted gets OptionExerciseFirstDateUnadjusted, Tag 41132.
func (m OrderMassCancelReport) GetOptionExerciseFirstDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.OptionExerciseFirstDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetOptionExerciseLastDateUnadjusted gets OptionExerciseLastDateUnadjusted, Tag 41133.
func (m OrderMassCancelReport) GetOptionExerciseLastDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.OptionExerciseLastDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetOptionExerciseEarliestTime gets OptionExerciseEarliestTime, Tag 41134.
func (m OrderMassCancelReport) GetOptionExerciseEarliestTime() (v string, err quickfix.MessageRejectError) {
	var f field.OptionExerciseEarliestTimeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetOptionExerciseLatestTime gets OptionExerciseLatestTime, Tag 41135.
func (m OrderMassCancelReport) GetOptionExerciseLatestTime() (v string, err quickfix.MessageRejectError) {
	var f field.OptionExerciseLatestTimeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetOptionExerciseTimeBusinessCenter gets OptionExerciseTimeBusinessCenter, Tag 41136.
func (m OrderMassCancelReport) GetOptionExerciseTimeBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.OptionExerciseTimeBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoOptionExerciseDates gets NoOptionExerciseDates, Tag 41137.
func (m OrderMassCancelReport) GetNoOptionExerciseDates() (NoOptionExerciseDatesRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoOptionExerciseDatesRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetNoOptionExerciseExpirationDateBusinessCenters gets NoOptionExerciseExpirationDateBusinessCenters, Tag 41140.
func (m OrderMassCancelReport) GetNoOptionExerciseExpirationDateBusinessCenters() (NoOptionExerciseExpirationDateBusinessCentersRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoOptionExerciseExpirationDateBusinessCentersRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetOptionExerciseExpirationDateBusinessDayConvention gets OptionExerciseExpirationDateBusinessDayConvention, Tag 41142.
func (m OrderMassCancelReport) GetOptionExerciseExpirationDateBusinessDayConvention() (v int, err quickfix.MessageRejectError) {
	var f field.OptionExerciseExpirationDateBusinessDayConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetOptionExerciseExpirationDateRelativeTo gets OptionExerciseExpirationDateRelativeTo, Tag 41143.
func (m OrderMassCancelReport) GetOptionExerciseExpirationDateRelativeTo() (v int, err quickfix.MessageRejectError) {
	var f field.OptionExerciseExpirationDateRelativeToField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetOptionExerciseExpirationDateOffsetPeriod gets OptionExerciseExpirationDateOffsetPeriod, Tag 41144.
func (m OrderMassCancelReport) GetOptionExerciseExpirationDateOffsetPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.OptionExerciseExpirationDateOffsetPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetOptionExerciseExpirationDateOffsetUnit gets OptionExerciseExpirationDateOffsetUnit, Tag 41145.
func (m OrderMassCancelReport) GetOptionExerciseExpirationDateOffsetUnit() (v string, err quickfix.MessageRejectError) {
	var f field.OptionExerciseExpirationDateOffsetUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetOptionExerciseExpirationFrequencyPeriod gets OptionExerciseExpirationFrequencyPeriod, Tag 41146.
func (m OrderMassCancelReport) GetOptionExerciseExpirationFrequencyPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.OptionExerciseExpirationFrequencyPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetOptionExerciseExpirationFrequencyUnit gets OptionExerciseExpirationFrequencyUnit, Tag 41147.
func (m OrderMassCancelReport) GetOptionExerciseExpirationFrequencyUnit() (v string, err quickfix.MessageRejectError) {
	var f field.OptionExerciseExpirationFrequencyUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetOptionExerciseExpirationRollConvention gets OptionExerciseExpirationRollConvention, Tag 41148.
func (m OrderMassCancelReport) GetOptionExerciseExpirationRollConvention() (v string, err quickfix.MessageRejectError) {
	var f field.OptionExerciseExpirationRollConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetOptionExerciseExpirationDateOffsetDayType gets OptionExerciseExpirationDateOffsetDayType, Tag 41149.
func (m OrderMassCancelReport) GetOptionExerciseExpirationDateOffsetDayType() (v int, err quickfix.MessageRejectError) {
	var f field.OptionExerciseExpirationDateOffsetDayTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetOptionExerciseExpirationTime gets OptionExerciseExpirationTime, Tag 41150.
func (m OrderMassCancelReport) GetOptionExerciseExpirationTime() (v string, err quickfix.MessageRejectError) {
	var f field.OptionExerciseExpirationTimeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetOptionExerciseExpirationTimeBusinessCenter gets OptionExerciseExpirationTimeBusinessCenter, Tag 41151.
func (m OrderMassCancelReport) GetOptionExerciseExpirationTimeBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.OptionExerciseExpirationTimeBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoOptionExerciseExpirationDates gets NoOptionExerciseExpirationDates, Tag 41152.
func (m OrderMassCancelReport) GetNoOptionExerciseExpirationDates() (NoOptionExerciseExpirationDatesRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoOptionExerciseExpirationDatesRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetNoPricingDateBusinessCenters gets NoPricingDateBusinessCenters, Tag 41230.
func (m OrderMassCancelReport) GetNoPricingDateBusinessCenters() (NoPricingDateBusinessCentersRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoPricingDateBusinessCentersRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetPricingDateUnadjusted gets PricingDateUnadjusted, Tag 41232.
func (m OrderMassCancelReport) GetPricingDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.PricingDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPricingDateBusinessDayConvention gets PricingDateBusinessDayConvention, Tag 41233.
func (m OrderMassCancelReport) GetPricingDateBusinessDayConvention() (v int, err quickfix.MessageRejectError) {
	var f field.PricingDateBusinessDayConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPricingDateAdjusted gets PricingDateAdjusted, Tag 41234.
func (m OrderMassCancelReport) GetPricingDateAdjusted() (v string, err quickfix.MessageRejectError) {
	var f field.PricingDateAdjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPricingTime gets PricingTime, Tag 41235.
func (m OrderMassCancelReport) GetPricingTime() (v string, err quickfix.MessageRejectError) {
	var f field.PricingTimeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPricingTimeBusinessCenter gets PricingTimeBusinessCenter, Tag 41236.
func (m OrderMassCancelReport) GetPricingTimeBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.PricingTimeBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProtectionTermXIDRef gets UnderlyingProtectionTermXIDRef, Tag 41314.
func (m OrderMassCancelReport) GetUnderlyingProtectionTermXIDRef() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingProtectionTermXIDRefField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingSettlTermXIDRef gets UnderlyingSettlTermXIDRef, Tag 41315.
func (m OrderMassCancelReport) GetUnderlyingSettlTermXIDRef() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingSettlTermXIDRefField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingExerciseDesc gets UnderlyingExerciseDesc, Tag 41810.
func (m OrderMassCancelReport) GetUnderlyingExerciseDesc() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingExerciseDescField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetEncodedUnderlyingExerciseDescLen gets EncodedUnderlyingExerciseDescLen, Tag 41811.
func (m OrderMassCancelReport) GetEncodedUnderlyingExerciseDescLen() (v int, err quickfix.MessageRejectError) {
	var f field.EncodedUnderlyingExerciseDescLenField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetEncodedUnderlyingExerciseDesc gets EncodedUnderlyingExerciseDesc, Tag 41812.
func (m OrderMassCancelReport) GetEncodedUnderlyingExerciseDesc() (v string, err quickfix.MessageRejectError) {
	var f field.EncodedUnderlyingExerciseDescField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingAutomaticExerciseIndicator gets UnderlyingAutomaticExerciseIndicator, Tag 41813.
func (m OrderMassCancelReport) GetUnderlyingAutomaticExerciseIndicator() (v bool, err quickfix.MessageRejectError) {
	var f field.UnderlyingAutomaticExerciseIndicatorField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingAutomaticExerciseThresholdRate gets UnderlyingAutomaticExerciseThresholdRate, Tag 41814.
func (m OrderMassCancelReport) GetUnderlyingAutomaticExerciseThresholdRate() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingAutomaticExerciseThresholdRateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingExerciseConfirmationMethod gets UnderlyingExerciseConfirmationMethod, Tag 41815.
func (m OrderMassCancelReport) GetUnderlyingExerciseConfirmationMethod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingExerciseConfirmationMethodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingManualNoticeBusinessCenter gets UnderlyingManualNoticeBusinessCenter, Tag 41816.
func (m OrderMassCancelReport) GetUnderlyingManualNoticeBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingManualNoticeBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingFallbackExerciseIndicator gets UnderlyingFallbackExerciseIndicator, Tag 41817.
func (m OrderMassCancelReport) GetUnderlyingFallbackExerciseIndicator() (v bool, err quickfix.MessageRejectError) {
	var f field.UnderlyingFallbackExerciseIndicatorField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingLimitedRightToConfirmIndicator gets UnderlyingLimitedRightToConfirmIndicator, Tag 41818.
func (m OrderMassCancelReport) GetUnderlyingLimitedRightToConfirmIndicator() (v bool, err quickfix.MessageRejectError) {
	var f field.UnderlyingLimitedRightToConfirmIndicatorField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingExerciseSplitTicketIndicator gets UnderlyingExerciseSplitTicketIndicator, Tag 41819.
func (m OrderMassCancelReport) GetUnderlyingExerciseSplitTicketIndicator() (v bool, err quickfix.MessageRejectError) {
	var f field.UnderlyingExerciseSplitTicketIndicatorField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUnderlyingOptionExerciseBusinessCenters gets NoUnderlyingOptionExerciseBusinessCenters, Tag 41820.
func (m OrderMassCancelReport) GetNoUnderlyingOptionExerciseBusinessCenters() (NoUnderlyingOptionExerciseBusinessCentersRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingOptionExerciseBusinessCentersRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetUnderlyingOptionExerciseBusinessDayConvention gets UnderlyingOptionExerciseBusinessDayConvention, Tag 41822.
func (m OrderMassCancelReport) GetUnderlyingOptionExerciseBusinessDayConvention() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingOptionExerciseBusinessDayConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingOptionExerciseEarliestDateOffsetDayType gets UnderlyingOptionExerciseEarliestDateOffsetDayType, Tag 41823.
func (m OrderMassCancelReport) GetUnderlyingOptionExerciseEarliestDateOffsetDayType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingOptionExerciseEarliestDateOffsetDayTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingOptionExerciseEarliestDateOffsetPeriod gets UnderlyingOptionExerciseEarliestDateOffsetPeriod, Tag 41824.
func (m OrderMassCancelReport) GetUnderlyingOptionExerciseEarliestDateOffsetPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingOptionExerciseEarliestDateOffsetPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingOptionExerciseEarliestDateOffsetUnit gets UnderlyingOptionExerciseEarliestDateOffsetUnit, Tag 41825.
func (m OrderMassCancelReport) GetUnderlyingOptionExerciseEarliestDateOffsetUnit() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingOptionExerciseEarliestDateOffsetUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingOptionExerciseFrequencyPeriod gets UnderlyingOptionExerciseFrequencyPeriod, Tag 41826.
func (m OrderMassCancelReport) GetUnderlyingOptionExerciseFrequencyPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingOptionExerciseFrequencyPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingOptionExerciseFrequencyUnit gets UnderlyingOptionExerciseFrequencyUnit, Tag 41827.
func (m OrderMassCancelReport) GetUnderlyingOptionExerciseFrequencyUnit() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingOptionExerciseFrequencyUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingOptionExerciseStartDateUnadjusted gets UnderlyingOptionExerciseStartDateUnadjusted, Tag 41828.
func (m OrderMassCancelReport) GetUnderlyingOptionExerciseStartDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingOptionExerciseStartDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingOptionExerciseStartDateRelativeTo gets UnderlyingOptionExerciseStartDateRelativeTo, Tag 41829.
func (m OrderMassCancelReport) GetUnderlyingOptionExerciseStartDateRelativeTo() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingOptionExerciseStartDateRelativeToField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingOptionExerciseStartDateOffsetPeriod gets UnderlyingOptionExerciseStartDateOffsetPeriod, Tag 41830.
func (m OrderMassCancelReport) GetUnderlyingOptionExerciseStartDateOffsetPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingOptionExerciseStartDateOffsetPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingOptionExerciseStartDateOffsetUnit gets UnderlyingOptionExerciseStartDateOffsetUnit, Tag 41831.
func (m OrderMassCancelReport) GetUnderlyingOptionExerciseStartDateOffsetUnit() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingOptionExerciseStartDateOffsetUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingOptionExerciseStartDateOffsetDayType gets UnderlyingOptionExerciseStartDateOffsetDayType, Tag 41832.
func (m OrderMassCancelReport) GetUnderlyingOptionExerciseStartDateOffsetDayType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingOptionExerciseStartDateOffsetDayTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingOptionExerciseStartDateAdjusted gets UnderlyingOptionExerciseStartDateAdjusted, Tag 41833.
func (m OrderMassCancelReport) GetUnderlyingOptionExerciseStartDateAdjusted() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingOptionExerciseStartDateAdjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingOptionExerciseSkip gets UnderlyingOptionExerciseSkip, Tag 41834.
func (m OrderMassCancelReport) GetUnderlyingOptionExerciseSkip() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingOptionExerciseSkipField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingOptionExerciseNominationDeadline gets UnderlyingOptionExerciseNominationDeadline, Tag 41835.
func (m OrderMassCancelReport) GetUnderlyingOptionExerciseNominationDeadline() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingOptionExerciseNominationDeadlineField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingOptionExerciseFirstDateUnadjusted gets UnderlyingOptionExerciseFirstDateUnadjusted, Tag 41836.
func (m OrderMassCancelReport) GetUnderlyingOptionExerciseFirstDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingOptionExerciseFirstDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingOptionExerciseLastDateUnadjusted gets UnderlyingOptionExerciseLastDateUnadjusted, Tag 41837.
func (m OrderMassCancelReport) GetUnderlyingOptionExerciseLastDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingOptionExerciseLastDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingOptionExerciseEarliestTime gets UnderlyingOptionExerciseEarliestTime, Tag 41838.
func (m OrderMassCancelReport) GetUnderlyingOptionExerciseEarliestTime() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingOptionExerciseEarliestTimeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingOptionExerciseLatestTime gets UnderlyingOptionExerciseLatestTime, Tag 41839.
func (m OrderMassCancelReport) GetUnderlyingOptionExerciseLatestTime() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingOptionExerciseLatestTimeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingOptionExerciseTimeBusinessCenter gets UnderlyingOptionExerciseTimeBusinessCenter, Tag 41840.
func (m OrderMassCancelReport) GetUnderlyingOptionExerciseTimeBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingOptionExerciseTimeBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUnderlyingOptionExerciseDates gets NoUnderlyingOptionExerciseDates, Tag 41841.
func (m OrderMassCancelReport) GetNoUnderlyingOptionExerciseDates() (NoUnderlyingOptionExerciseDatesRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingOptionExerciseDatesRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetNoUnderlyingOptionExerciseExpirationDateBusinessCenters gets NoUnderlyingOptionExerciseExpirationDateBusinessCenters, Tag 41844.
func (m OrderMassCancelReport) GetNoUnderlyingOptionExerciseExpirationDateBusinessCenters() (NoUnderlyingOptionExerciseExpirationDateBusinessCentersRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingOptionExerciseExpirationDateBusinessCentersRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetUnderlyingOptionExerciseExpirationDateBusinessDayConvention gets UnderlyingOptionExerciseExpirationDateBusinessDayConvention, Tag 41846.
func (m OrderMassCancelReport) GetUnderlyingOptionExerciseExpirationDateBusinessDayConvention() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingOptionExerciseExpirationDateBusinessDayConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingOptionExerciseExpirationDateRelativeTo gets UnderlyingOptionExerciseExpirationDateRelativeTo, Tag 41847.
func (m OrderMassCancelReport) GetUnderlyingOptionExerciseExpirationDateRelativeTo() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingOptionExerciseExpirationDateRelativeToField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingOptionExerciseExpirationDateOffsetPeriod gets UnderlyingOptionExerciseExpirationDateOffsetPeriod, Tag 41848.
func (m OrderMassCancelReport) GetUnderlyingOptionExerciseExpirationDateOffsetPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingOptionExerciseExpirationDateOffsetPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingOptionExerciseExpirationDateOffsetUnit gets UnderlyingOptionExerciseExpirationDateOffsetUnit, Tag 41849.
func (m OrderMassCancelReport) GetUnderlyingOptionExerciseExpirationDateOffsetUnit() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingOptionExerciseExpirationDateOffsetUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingOptionExerciseExpirationFrequencyPeriod gets UnderlyingOptionExerciseExpirationFrequencyPeriod, Tag 41850.
func (m OrderMassCancelReport) GetUnderlyingOptionExerciseExpirationFrequencyPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingOptionExerciseExpirationFrequencyPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingOptionExerciseExpirationFrequencyUnit gets UnderlyingOptionExerciseExpirationFrequencyUnit, Tag 41851.
func (m OrderMassCancelReport) GetUnderlyingOptionExerciseExpirationFrequencyUnit() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingOptionExerciseExpirationFrequencyUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingOptionExerciseExpirationRollConvention gets UnderlyingOptionExerciseExpirationRollConvention, Tag 41852.
func (m OrderMassCancelReport) GetUnderlyingOptionExerciseExpirationRollConvention() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingOptionExerciseExpirationRollConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingOptionExerciseExpirationDateOffsetDayType gets UnderlyingOptionExerciseExpirationDateOffsetDayType, Tag 41853.
func (m OrderMassCancelReport) GetUnderlyingOptionExerciseExpirationDateOffsetDayType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingOptionExerciseExpirationDateOffsetDayTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingOptionExerciseExpirationTime gets UnderlyingOptionExerciseExpirationTime, Tag 41854.
func (m OrderMassCancelReport) GetUnderlyingOptionExerciseExpirationTime() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingOptionExerciseExpirationTimeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingOptionExerciseExpirationTimeBusinessCenter gets UnderlyingOptionExerciseExpirationTimeBusinessCenter, Tag 41855.
func (m OrderMassCancelReport) GetUnderlyingOptionExerciseExpirationTimeBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingOptionExerciseExpirationTimeBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUnderlyingOptionExerciseExpirationDates gets NoUnderlyingOptionExerciseExpirationDates, Tag 41856.
func (m OrderMassCancelReport) GetNoUnderlyingOptionExerciseExpirationDates() (NoUnderlyingOptionExerciseExpirationDatesRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingOptionExerciseExpirationDatesRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetUnderlyingMarketDisruptionProvision gets UnderlyingMarketDisruptionProvision, Tag 41859.
func (m OrderMassCancelReport) GetUnderlyingMarketDisruptionProvision() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingMarketDisruptionProvisionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingMarketDisruptionFallbackProvision gets UnderlyingMarketDisruptionFallbackProvision, Tag 41860.
func (m OrderMassCancelReport) GetUnderlyingMarketDisruptionFallbackProvision() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingMarketDisruptionFallbackProvisionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingMarketDisruptionMaximumDays gets UnderlyingMarketDisruptionMaximumDays, Tag 41861.
func (m OrderMassCancelReport) GetUnderlyingMarketDisruptionMaximumDays() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingMarketDisruptionMaximumDaysField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingMarketDisruptionMaterialityPercentage gets UnderlyingMarketDisruptionMaterialityPercentage, Tag 41862.
func (m OrderMassCancelReport) GetUnderlyingMarketDisruptionMaterialityPercentage() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingMarketDisruptionMaterialityPercentageField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingMarketDisruptionMinimumFuturesContracts gets UnderlyingMarketDisruptionMinimumFuturesContracts, Tag 41863.
func (m OrderMassCancelReport) GetUnderlyingMarketDisruptionMinimumFuturesContracts() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingMarketDisruptionMinimumFuturesContractsField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUnderlyingMarketDisruptionEvents gets NoUnderlyingMarketDisruptionEvents, Tag 41864.
func (m OrderMassCancelReport) GetNoUnderlyingMarketDisruptionEvents() (NoUnderlyingMarketDisruptionEventsRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingMarketDisruptionEventsRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetNoUnderlyingMarketDisruptionFallbacks gets NoUnderlyingMarketDisruptionFallbacks, Tag 41866.
func (m OrderMassCancelReport) GetNoUnderlyingMarketDisruptionFallbacks() (NoUnderlyingMarketDisruptionFallbacksRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingMarketDisruptionFallbacksRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetNoUnderlyingMarketDisruptionFallbackReferencePrices gets NoUnderlyingMarketDisruptionFallbackReferencePrices, Tag 41868.
func (m OrderMassCancelReport) GetNoUnderlyingMarketDisruptionFallbackReferencePrices() (NoUnderlyingMarketDisruptionFallbackReferencePricesRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingMarketDisruptionFallbackReferencePricesRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetNoUnderlyingPricingDateBusinessCenters gets NoUnderlyingPricingDateBusinessCenters, Tag 41947.
func (m OrderMassCancelReport) GetNoUnderlyingPricingDateBusinessCenters() (NoUnderlyingPricingDateBusinessCentersRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingPricingDateBusinessCentersRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetUnderlyingPricingDateUnadjusted gets UnderlyingPricingDateUnadjusted, Tag 41949.
func (m OrderMassCancelReport) GetUnderlyingPricingDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPricingDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPricingDateBusinessDayConvention gets UnderlyingPricingDateBusinessDayConvention, Tag 41950.
func (m OrderMassCancelReport) GetUnderlyingPricingDateBusinessDayConvention() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPricingDateBusinessDayConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPricingDateAdjusted gets UnderlyingPricingDateAdjusted, Tag 41951.
func (m OrderMassCancelReport) GetUnderlyingPricingDateAdjusted() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPricingDateAdjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPricingTime gets UnderlyingPricingTime, Tag 41952.
func (m OrderMassCancelReport) GetUnderlyingPricingTime() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPricingTimeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPricingTimeBusinessCenter gets UnderlyingPricingTimeBusinessCenter, Tag 41953.
func (m OrderMassCancelReport) GetUnderlyingPricingTimeBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPricingTimeBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUnderlyingAdditionalTerms gets NoUnderlyingAdditionalTerms, Tag 42036.
func (m OrderMassCancelReport) GetNoUnderlyingAdditionalTerms() (NoUnderlyingAdditionalTermsRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingAdditionalTermsRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetNoUnderlyingCashSettlTerms gets NoUnderlyingCashSettlTerms, Tag 42041.
func (m OrderMassCancelReport) GetNoUnderlyingCashSettlTerms() (NoUnderlyingCashSettlTermsRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingCashSettlTermsRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetNoUnderlyingPhysicalSettlTerms gets NoUnderlyingPhysicalSettlTerms, Tag 42060.
func (m OrderMassCancelReport) GetNoUnderlyingPhysicalSettlTerms() (NoUnderlyingPhysicalSettlTermsRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingPhysicalSettlTermsRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetNoUnderlyingProtectionTerms gets NoUnderlyingProtectionTerms, Tag 42068.
func (m OrderMassCancelReport) GetNoUnderlyingProtectionTerms() (NoUnderlyingProtectionTermsRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingProtectionTermsRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetNoUnderlyingProvisions gets NoUnderlyingProvisions, Tag 42149.
func (m OrderMassCancelReport) GetNoUnderlyingProvisions() (NoUnderlyingProvisionsRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingProvisionsRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetNoExtraordinaryEvents gets NoExtraordinaryEvents, Tag 42296.
func (m OrderMassCancelReport) GetNoExtraordinaryEvents() (NoExtraordinaryEventsRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoExtraordinaryEventsRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetSettlMethodElectingPartySide gets SettlMethodElectingPartySide, Tag 42590.
func (m OrderMassCancelReport) GetSettlMethodElectingPartySide() (v int, err quickfix.MessageRejectError) {
	var f field.SettlMethodElectingPartySideField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetMakeWholeDate gets MakeWholeDate, Tag 42591.
func (m OrderMassCancelReport) GetMakeWholeDate() (v string, err quickfix.MessageRejectError) {
	var f field.MakeWholeDateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetMakeWholeAmount gets MakeWholeAmount, Tag 42592.
func (m OrderMassCancelReport) GetMakeWholeAmount() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.MakeWholeAmountField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetMakeWholeBenchmarkCurveName gets MakeWholeBenchmarkCurveName, Tag 42593.
func (m OrderMassCancelReport) GetMakeWholeBenchmarkCurveName() (v string, err quickfix.MessageRejectError) {
	var f field.MakeWholeBenchmarkCurveNameField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetMakeWholeBenchmarkCurvePoint gets MakeWholeBenchmarkCurvePoint, Tag 42594.
func (m OrderMassCancelReport) GetMakeWholeBenchmarkCurvePoint() (v string, err quickfix.MessageRejectError) {
	var f field.MakeWholeBenchmarkCurvePointField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetMakeWholeRecallSpread gets MakeWholeRecallSpread, Tag 42595.
func (m OrderMassCancelReport) GetMakeWholeRecallSpread() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.MakeWholeRecallSpreadField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetMakeWholeBenchmarkQuote gets MakeWholeBenchmarkQuote, Tag 42596.
func (m OrderMassCancelReport) GetMakeWholeBenchmarkQuote() (v int, err quickfix.MessageRejectError) {
	var f field.MakeWholeBenchmarkQuoteField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetMakeWholeInterpolationMethod gets MakeWholeInterpolationMethod, Tag 42597.
func (m OrderMassCancelReport) GetMakeWholeInterpolationMethod() (v int, err quickfix.MessageRejectError) {
	var f field.MakeWholeInterpolationMethodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoSettlMethodElectionDateBusinessCenters gets NoSettlMethodElectionDateBusinessCenters, Tag 42775.
func (m OrderMassCancelReport) GetNoSettlMethodElectionDateBusinessCenters() (NoSettlMethodElectionDateBusinessCentersRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoSettlMethodElectionDateBusinessCentersRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetSettlMethodElectionDateUnadjusted gets SettlMethodElectionDateUnadjusted, Tag 42777.
func (m OrderMassCancelReport) GetSettlMethodElectionDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.SettlMethodElectionDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetSettlMethodElectionDateBusinessDayConvention gets SettlMethodElectionDateBusinessDayConvention, Tag 42778.
func (m OrderMassCancelReport) GetSettlMethodElectionDateBusinessDayConvention() (v int, err quickfix.MessageRejectError) {
	var f field.SettlMethodElectionDateBusinessDayConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetSettlMethodElectionDateRelativeTo gets SettlMethodElectionDateRelativeTo, Tag 42779.
func (m OrderMassCancelReport) GetSettlMethodElectionDateRelativeTo() (v int, err quickfix.MessageRejectError) {
	var f field.SettlMethodElectionDateRelativeToField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetSettlMethodElectionDateOffsetPeriod gets SettlMethodElectionDateOffsetPeriod, Tag 42780.
func (m OrderMassCancelReport) GetSettlMethodElectionDateOffsetPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.SettlMethodElectionDateOffsetPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetSettlMethodElectionDateOffsetUnit gets SettlMethodElectionDateOffsetUnit, Tag 42781.
func (m OrderMassCancelReport) GetSettlMethodElectionDateOffsetUnit() (v string, err quickfix.MessageRejectError) {
	var f field.SettlMethodElectionDateOffsetUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetSettlMethodElectionDateOffsetDayType gets SettlMethodElectionDateOffsetDayType, Tag 42782.
func (m OrderMassCancelReport) GetSettlMethodElectionDateOffsetDayType() (v int, err quickfix.MessageRejectError) {
	var f field.SettlMethodElectionDateOffsetDayTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetSettlMethodElectionDateAdjusted gets SettlMethodElectionDateAdjusted, Tag 42783.
func (m OrderMassCancelReport) GetSettlMethodElectionDateAdjusted() (v string, err quickfix.MessageRejectError) {
	var f field.SettlMethodElectionDateAdjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUnderlyingDividendPayments gets NoUnderlyingDividendPayments, Tag 42855.
func (m OrderMassCancelReport) GetNoUnderlyingDividendPayments() (NoUnderlyingDividendPaymentsRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingDividendPaymentsRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetUnderlyingDividendPayoutRatio gets UnderlyingDividendPayoutRatio, Tag 42860.
func (m OrderMassCancelReport) GetUnderlyingDividendPayoutRatio() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingDividendPayoutRatioField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDividendPayoutConditions gets UnderlyingDividendPayoutConditions, Tag 42861.
func (m OrderMassCancelReport) GetUnderlyingDividendPayoutConditions() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingDividendPayoutConditionsField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUnderlyingExtraordinaryEvents gets NoUnderlyingExtraordinaryEvents, Tag 42884.
func (m OrderMassCancelReport) GetNoUnderlyingExtraordinaryEvents() (NoUnderlyingExtraordinaryEventsRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingExtraordinaryEventsRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetUnderlyingSettlMethodElectingPartySide gets UnderlyingSettlMethodElectingPartySide, Tag 42887.
func (m OrderMassCancelReport) GetUnderlyingSettlMethodElectingPartySide() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingSettlMethodElectingPartySideField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingMakeWholeDate gets UnderlyingMakeWholeDate, Tag 42888.
func (m OrderMassCancelReport) GetUnderlyingMakeWholeDate() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingMakeWholeDateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingMakeWholeAmount gets UnderlyingMakeWholeAmount, Tag 42889.
func (m OrderMassCancelReport) GetUnderlyingMakeWholeAmount() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingMakeWholeAmountField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingMakeWholeBenchmarkCurveName gets UnderlyingMakeWholeBenchmarkCurveName, Tag 42890.
func (m OrderMassCancelReport) GetUnderlyingMakeWholeBenchmarkCurveName() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingMakeWholeBenchmarkCurveNameField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingMakeWholeBenchmarkCurvePoint gets UnderlyingMakeWholeBenchmarkCurvePoint, Tag 42891.
func (m OrderMassCancelReport) GetUnderlyingMakeWholeBenchmarkCurvePoint() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingMakeWholeBenchmarkCurvePointField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingMakeWholeRecallSpread gets UnderlyingMakeWholeRecallSpread, Tag 42892.
func (m OrderMassCancelReport) GetUnderlyingMakeWholeRecallSpread() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingMakeWholeRecallSpreadField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingMakeWholeBenchmarkQuote gets UnderlyingMakeWholeBenchmarkQuote, Tag 42893.
func (m OrderMassCancelReport) GetUnderlyingMakeWholeBenchmarkQuote() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingMakeWholeBenchmarkQuoteField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingMakeWholeInterpolationMethod gets UnderlyingMakeWholeInterpolationMethod, Tag 42894.
func (m OrderMassCancelReport) GetUnderlyingMakeWholeInterpolationMethod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingMakeWholeInterpolationMethodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingRateSpreadInitialValue gets UnderlyingRateSpreadInitialValue, Tag 43004.
func (m OrderMassCancelReport) GetUnderlyingRateSpreadInitialValue() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingRateSpreadInitialValueField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUnderlyingRateSpreadSteps gets NoUnderlyingRateSpreadSteps, Tag 43005.
func (m OrderMassCancelReport) GetNoUnderlyingRateSpreadSteps() (NoUnderlyingRateSpreadStepsRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingRateSpreadStepsRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetNoUnderlyingSettlMethodElectionDateBusinessCenters gets NoUnderlyingSettlMethodElectionDateBusinessCenters, Tag 43074.
func (m OrderMassCancelReport) GetNoUnderlyingSettlMethodElectionDateBusinessCenters() (NoUnderlyingSettlMethodElectionDateBusinessCentersRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingSettlMethodElectionDateBusinessCentersRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetUnderlyingSettlMethodElectionDateUnadjusted gets UnderlyingSettlMethodElectionDateUnadjusted, Tag 43076.
func (m OrderMassCancelReport) GetUnderlyingSettlMethodElectionDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingSettlMethodElectionDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingSettlMethodElectionDateBusinessDayConvention gets UnderlyingSettlMethodElectionDateBusinessDayConvention, Tag 43077.
func (m OrderMassCancelReport) GetUnderlyingSettlMethodElectionDateBusinessDayConvention() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingSettlMethodElectionDateBusinessDayConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingSettlMethodElectionDateRelativeTo gets UnderlyingSettlMethodElectionDateRelativeTo, Tag 43078.
func (m OrderMassCancelReport) GetUnderlyingSettlMethodElectionDateRelativeTo() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingSettlMethodElectionDateRelativeToField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingSettlMethodElectionDateOffsetPeriod gets UnderlyingSettlMethodElectionDateOffsetPeriod, Tag 43079.
func (m OrderMassCancelReport) GetUnderlyingSettlMethodElectionDateOffsetPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingSettlMethodElectionDateOffsetPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingSettlMethodElectionDateOffsetUnit gets UnderlyingSettlMethodElectionDateOffsetUnit, Tag 43080.
func (m OrderMassCancelReport) GetUnderlyingSettlMethodElectionDateOffsetUnit() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingSettlMethodElectionDateOffsetUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingSettlMethodElectionDateOffsetDayType gets UnderlyingSettlMethodElectionDateOffsetDayType, Tag 43081.
func (m OrderMassCancelReport) GetUnderlyingSettlMethodElectionDateOffsetDayType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingSettlMethodElectionDateOffsetDayTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingSettlMethodElectionDateAdjusted gets UnderlyingSettlMethodElectionDateAdjusted, Tag 43082.
func (m OrderMassCancelReport) GetUnderlyingSettlMethodElectionDateAdjusted() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingSettlMethodElectionDateAdjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasClOrdID returns true if ClOrdID is present, Tag 11.
func (m OrderMassCancelReport) HasClOrdID() bool {
	return m.Has(tag.ClOrdID)
}

// HasSecurityIDSource returns true if SecurityIDSource is present, Tag 22.
func (m OrderMassCancelReport) HasSecurityIDSource() bool {
	return m.Has(tag.SecurityIDSource)
}

// HasOrderID returns true if OrderID is present, Tag 37.
func (m OrderMassCancelReport) HasOrderID() bool {
	return m.Has(tag.OrderID)
}

// HasSecurityID returns true if SecurityID is present, Tag 48.
func (m OrderMassCancelReport) HasSecurityID() bool {
	return m.Has(tag.SecurityID)
}

// HasSide returns true if Side is present, Tag 54.
func (m OrderMassCancelReport) HasSide() bool {
	return m.Has(tag.Side)
}

// HasSymbol returns true if Symbol is present, Tag 55.
func (m OrderMassCancelReport) HasSymbol() bool {
	return m.Has(tag.Symbol)
}

// HasText returns true if Text is present, Tag 58.
func (m OrderMassCancelReport) HasText() bool {
	return m.Has(tag.Text)
}

// HasTransactTime returns true if TransactTime is present, Tag 60.
func (m OrderMassCancelReport) HasTransactTime() bool {
	return m.Has(tag.TransactTime)
}

// HasSymbolSfx returns true if SymbolSfx is present, Tag 65.
func (m OrderMassCancelReport) HasSymbolSfx() bool {
	return m.Has(tag.SymbolSfx)
}

// HasIssuer returns true if Issuer is present, Tag 106.
func (m OrderMassCancelReport) HasIssuer() bool {
	return m.Has(tag.Issuer)
}

// HasSecurityDesc returns true if SecurityDesc is present, Tag 107.
func (m OrderMassCancelReport) HasSecurityDesc() bool {
	return m.Has(tag.SecurityDesc)
}

// HasSecurityType returns true if SecurityType is present, Tag 167.
func (m OrderMassCancelReport) HasSecurityType() bool {
	return m.Has(tag.SecurityType)
}

// HasSecondaryOrderID returns true if SecondaryOrderID is present, Tag 198.
func (m OrderMassCancelReport) HasSecondaryOrderID() bool {
	return m.Has(tag.SecondaryOrderID)
}

// HasMaturityMonthYear returns true if MaturityMonthYear is present, Tag 200.
func (m OrderMassCancelReport) HasMaturityMonthYear() bool {
	return m.Has(tag.MaturityMonthYear)
}

// HasPutOrCall returns true if PutOrCall is present, Tag 201.
func (m OrderMassCancelReport) HasPutOrCall() bool {
	return m.Has(tag.PutOrCall)
}

// HasStrikePrice returns true if StrikePrice is present, Tag 202.
func (m OrderMassCancelReport) HasStrikePrice() bool {
	return m.Has(tag.StrikePrice)
}

// HasOptAttribute returns true if OptAttribute is present, Tag 206.
func (m OrderMassCancelReport) HasOptAttribute() bool {
	return m.Has(tag.OptAttribute)
}

// HasSecurityExchange returns true if SecurityExchange is present, Tag 207.
func (m OrderMassCancelReport) HasSecurityExchange() bool {
	return m.Has(tag.SecurityExchange)
}

// HasCouponRate returns true if CouponRate is present, Tag 223.
func (m OrderMassCancelReport) HasCouponRate() bool {
	return m.Has(tag.CouponRate)
}

// HasCouponPaymentDate returns true if CouponPaymentDate is present, Tag 224.
func (m OrderMassCancelReport) HasCouponPaymentDate() bool {
	return m.Has(tag.CouponPaymentDate)
}

// HasIssueDate returns true if IssueDate is present, Tag 225.
func (m OrderMassCancelReport) HasIssueDate() bool {
	return m.Has(tag.IssueDate)
}

// HasRepurchaseTerm returns true if RepurchaseTerm is present, Tag 226.
func (m OrderMassCancelReport) HasRepurchaseTerm() bool {
	return m.Has(tag.RepurchaseTerm)
}

// HasRepurchaseRate returns true if RepurchaseRate is present, Tag 227.
func (m OrderMassCancelReport) HasRepurchaseRate() bool {
	return m.Has(tag.RepurchaseRate)
}

// HasFactor returns true if Factor is present, Tag 228.
func (m OrderMassCancelReport) HasFactor() bool {
	return m.Has(tag.Factor)
}

// HasContractMultiplier returns true if ContractMultiplier is present, Tag 231.
func (m OrderMassCancelReport) HasContractMultiplier() bool {
	return m.Has(tag.ContractMultiplier)
}

// HasRepoCollateralSecurityType returns true if RepoCollateralSecurityType is present, Tag 239.
func (m OrderMassCancelReport) HasRepoCollateralSecurityType() bool {
	return m.Has(tag.RepoCollateralSecurityType)
}

// HasRedemptionDate returns true if RedemptionDate is present, Tag 240.
func (m OrderMassCancelReport) HasRedemptionDate() bool {
	return m.Has(tag.RedemptionDate)
}

// HasUnderlyingCouponPaymentDate returns true if UnderlyingCouponPaymentDate is present, Tag 241.
func (m OrderMassCancelReport) HasUnderlyingCouponPaymentDate() bool {
	return m.Has(tag.UnderlyingCouponPaymentDate)
}

// HasUnderlyingIssueDate returns true if UnderlyingIssueDate is present, Tag 242.
func (m OrderMassCancelReport) HasUnderlyingIssueDate() bool {
	return m.Has(tag.UnderlyingIssueDate)
}

// HasUnderlyingRepoCollateralSecurityType returns true if UnderlyingRepoCollateralSecurityType is present, Tag 243.
func (m OrderMassCancelReport) HasUnderlyingRepoCollateralSecurityType() bool {
	return m.Has(tag.UnderlyingRepoCollateralSecurityType)
}

// HasUnderlyingRepurchaseTerm returns true if UnderlyingRepurchaseTerm is present, Tag 244.
func (m OrderMassCancelReport) HasUnderlyingRepurchaseTerm() bool {
	return m.Has(tag.UnderlyingRepurchaseTerm)
}

// HasUnderlyingRepurchaseRate returns true if UnderlyingRepurchaseRate is present, Tag 245.
func (m OrderMassCancelReport) HasUnderlyingRepurchaseRate() bool {
	return m.Has(tag.UnderlyingRepurchaseRate)
}

// HasUnderlyingFactor returns true if UnderlyingFactor is present, Tag 246.
func (m OrderMassCancelReport) HasUnderlyingFactor() bool {
	return m.Has(tag.UnderlyingFactor)
}

// HasUnderlyingRedemptionDate returns true if UnderlyingRedemptionDate is present, Tag 247.
func (m OrderMassCancelReport) HasUnderlyingRedemptionDate() bool {
	return m.Has(tag.UnderlyingRedemptionDate)
}

// HasCreditRating returns true if CreditRating is present, Tag 255.
func (m OrderMassCancelReport) HasCreditRating() bool {
	return m.Has(tag.CreditRating)
}

// HasUnderlyingCreditRating returns true if UnderlyingCreditRating is present, Tag 256.
func (m OrderMassCancelReport) HasUnderlyingCreditRating() bool {
	return m.Has(tag.UnderlyingCreditRating)
}

// HasUnderlyingSecurityIDSource returns true if UnderlyingSecurityIDSource is present, Tag 305.
func (m OrderMassCancelReport) HasUnderlyingSecurityIDSource() bool {
	return m.Has(tag.UnderlyingSecurityIDSource)
}

// HasUnderlyingIssuer returns true if UnderlyingIssuer is present, Tag 306.
func (m OrderMassCancelReport) HasUnderlyingIssuer() bool {
	return m.Has(tag.UnderlyingIssuer)
}

// HasUnderlyingSecurityDesc returns true if UnderlyingSecurityDesc is present, Tag 307.
func (m OrderMassCancelReport) HasUnderlyingSecurityDesc() bool {
	return m.Has(tag.UnderlyingSecurityDesc)
}

// HasUnderlyingSecurityExchange returns true if UnderlyingSecurityExchange is present, Tag 308.
func (m OrderMassCancelReport) HasUnderlyingSecurityExchange() bool {
	return m.Has(tag.UnderlyingSecurityExchange)
}

// HasUnderlyingSecurityID returns true if UnderlyingSecurityID is present, Tag 309.
func (m OrderMassCancelReport) HasUnderlyingSecurityID() bool {
	return m.Has(tag.UnderlyingSecurityID)
}

// HasUnderlyingSecurityType returns true if UnderlyingSecurityType is present, Tag 310.
func (m OrderMassCancelReport) HasUnderlyingSecurityType() bool {
	return m.Has(tag.UnderlyingSecurityType)
}

// HasUnderlyingSymbol returns true if UnderlyingSymbol is present, Tag 311.
func (m OrderMassCancelReport) HasUnderlyingSymbol() bool {
	return m.Has(tag.UnderlyingSymbol)
}

// HasUnderlyingSymbolSfx returns true if UnderlyingSymbolSfx is present, Tag 312.
func (m OrderMassCancelReport) HasUnderlyingSymbolSfx() bool {
	return m.Has(tag.UnderlyingSymbolSfx)
}

// HasUnderlyingMaturityMonthYear returns true if UnderlyingMaturityMonthYear is present, Tag 313.
func (m OrderMassCancelReport) HasUnderlyingMaturityMonthYear() bool {
	return m.Has(tag.UnderlyingMaturityMonthYear)
}

// HasUnderlyingPutOrCall returns true if UnderlyingPutOrCall is present, Tag 315.
func (m OrderMassCancelReport) HasUnderlyingPutOrCall() bool {
	return m.Has(tag.UnderlyingPutOrCall)
}

// HasUnderlyingStrikePrice returns true if UnderlyingStrikePrice is present, Tag 316.
func (m OrderMassCancelReport) HasUnderlyingStrikePrice() bool {
	return m.Has(tag.UnderlyingStrikePrice)
}

// HasUnderlyingOptAttribute returns true if UnderlyingOptAttribute is present, Tag 317.
func (m OrderMassCancelReport) HasUnderlyingOptAttribute() bool {
	return m.Has(tag.UnderlyingOptAttribute)
}

// HasUnderlyingCurrency returns true if UnderlyingCurrency is present, Tag 318.
func (m OrderMassCancelReport) HasUnderlyingCurrency() bool {
	return m.Has(tag.UnderlyingCurrency)
}

// HasTradingSessionID returns true if TradingSessionID is present, Tag 336.
func (m OrderMassCancelReport) HasTradingSessionID() bool {
	return m.Has(tag.TradingSessionID)
}

// HasEncodedIssuerLen returns true if EncodedIssuerLen is present, Tag 348.
func (m OrderMassCancelReport) HasEncodedIssuerLen() bool {
	return m.Has(tag.EncodedIssuerLen)
}

// HasEncodedIssuer returns true if EncodedIssuer is present, Tag 349.
func (m OrderMassCancelReport) HasEncodedIssuer() bool {
	return m.Has(tag.EncodedIssuer)
}

// HasEncodedSecurityDescLen returns true if EncodedSecurityDescLen is present, Tag 350.
func (m OrderMassCancelReport) HasEncodedSecurityDescLen() bool {
	return m.Has(tag.EncodedSecurityDescLen)
}

// HasEncodedSecurityDesc returns true if EncodedSecurityDesc is present, Tag 351.
func (m OrderMassCancelReport) HasEncodedSecurityDesc() bool {
	return m.Has(tag.EncodedSecurityDesc)
}

// HasEncodedTextLen returns true if EncodedTextLen is present, Tag 354.
func (m OrderMassCancelReport) HasEncodedTextLen() bool {
	return m.Has(tag.EncodedTextLen)
}

// HasEncodedText returns true if EncodedText is present, Tag 355.
func (m OrderMassCancelReport) HasEncodedText() bool {
	return m.Has(tag.EncodedText)
}

// HasEncodedUnderlyingIssuerLen returns true if EncodedUnderlyingIssuerLen is present, Tag 362.
func (m OrderMassCancelReport) HasEncodedUnderlyingIssuerLen() bool {
	return m.Has(tag.EncodedUnderlyingIssuerLen)
}

// HasEncodedUnderlyingIssuer returns true if EncodedUnderlyingIssuer is present, Tag 363.
func (m OrderMassCancelReport) HasEncodedUnderlyingIssuer() bool {
	return m.Has(tag.EncodedUnderlyingIssuer)
}

// HasEncodedUnderlyingSecurityDescLen returns true if EncodedUnderlyingSecurityDescLen is present, Tag 364.
func (m OrderMassCancelReport) HasEncodedUnderlyingSecurityDescLen() bool {
	return m.Has(tag.EncodedUnderlyingSecurityDescLen)
}

// HasEncodedUnderlyingSecurityDesc returns true if EncodedUnderlyingSecurityDesc is present, Tag 365.
func (m OrderMassCancelReport) HasEncodedUnderlyingSecurityDesc() bool {
	return m.Has(tag.EncodedUnderlyingSecurityDesc)
}

// HasUnderlyingCouponRate returns true if UnderlyingCouponRate is present, Tag 435.
func (m OrderMassCancelReport) HasUnderlyingCouponRate() bool {
	return m.Has(tag.UnderlyingCouponRate)
}

// HasUnderlyingContractMultiplier returns true if UnderlyingContractMultiplier is present, Tag 436.
func (m OrderMassCancelReport) HasUnderlyingContractMultiplier() bool {
	return m.Has(tag.UnderlyingContractMultiplier)
}

// HasNoPartyIDs returns true if NoPartyIDs is present, Tag 453.
func (m OrderMassCancelReport) HasNoPartyIDs() bool {
	return m.Has(tag.NoPartyIDs)
}

// HasNoSecurityAltID returns true if NoSecurityAltID is present, Tag 454.
func (m OrderMassCancelReport) HasNoSecurityAltID() bool {
	return m.Has(tag.NoSecurityAltID)
}

// HasNoUnderlyingSecurityAltID returns true if NoUnderlyingSecurityAltID is present, Tag 457.
func (m OrderMassCancelReport) HasNoUnderlyingSecurityAltID() bool {
	return m.Has(tag.NoUnderlyingSecurityAltID)
}

// HasProduct returns true if Product is present, Tag 460.
func (m OrderMassCancelReport) HasProduct() bool {
	return m.Has(tag.Product)
}

// HasCFICode returns true if CFICode is present, Tag 461.
func (m OrderMassCancelReport) HasCFICode() bool {
	return m.Has(tag.CFICode)
}

// HasUnderlyingProduct returns true if UnderlyingProduct is present, Tag 462.
func (m OrderMassCancelReport) HasUnderlyingProduct() bool {
	return m.Has(tag.UnderlyingProduct)
}

// HasUnderlyingCFICode returns true if UnderlyingCFICode is present, Tag 463.
func (m OrderMassCancelReport) HasUnderlyingCFICode() bool {
	return m.Has(tag.UnderlyingCFICode)
}

// HasCountryOfIssue returns true if CountryOfIssue is present, Tag 470.
func (m OrderMassCancelReport) HasCountryOfIssue() bool {
	return m.Has(tag.CountryOfIssue)
}

// HasStateOrProvinceOfIssue returns true if StateOrProvinceOfIssue is present, Tag 471.
func (m OrderMassCancelReport) HasStateOrProvinceOfIssue() bool {
	return m.Has(tag.StateOrProvinceOfIssue)
}

// HasLocaleOfIssue returns true if LocaleOfIssue is present, Tag 472.
func (m OrderMassCancelReport) HasLocaleOfIssue() bool {
	return m.Has(tag.LocaleOfIssue)
}

// HasSecondaryClOrdID returns true if SecondaryClOrdID is present, Tag 526.
func (m OrderMassCancelReport) HasSecondaryClOrdID() bool {
	return m.Has(tag.SecondaryClOrdID)
}

// HasMassCancelRequestType returns true if MassCancelRequestType is present, Tag 530.
func (m OrderMassCancelReport) HasMassCancelRequestType() bool {
	return m.Has(tag.MassCancelRequestType)
}

// HasMassCancelResponse returns true if MassCancelResponse is present, Tag 531.
func (m OrderMassCancelReport) HasMassCancelResponse() bool {
	return m.Has(tag.MassCancelResponse)
}

// HasMassCancelRejectReason returns true if MassCancelRejectReason is present, Tag 532.
func (m OrderMassCancelReport) HasMassCancelRejectReason() bool {
	return m.Has(tag.MassCancelRejectReason)
}

// HasTotalAffectedOrders returns true if TotalAffectedOrders is present, Tag 533.
func (m OrderMassCancelReport) HasTotalAffectedOrders() bool {
	return m.Has(tag.TotalAffectedOrders)
}

// HasNoAffectedOrders returns true if NoAffectedOrders is present, Tag 534.
func (m OrderMassCancelReport) HasNoAffectedOrders() bool {
	return m.Has(tag.NoAffectedOrders)
}

// HasMaturityDate returns true if MaturityDate is present, Tag 541.
func (m OrderMassCancelReport) HasMaturityDate() bool {
	return m.Has(tag.MaturityDate)
}

// HasUnderlyingMaturityDate returns true if UnderlyingMaturityDate is present, Tag 542.
func (m OrderMassCancelReport) HasUnderlyingMaturityDate() bool {
	return m.Has(tag.UnderlyingMaturityDate)
}

// HasInstrRegistry returns true if InstrRegistry is present, Tag 543.
func (m OrderMassCancelReport) HasInstrRegistry() bool {
	return m.Has(tag.InstrRegistry)
}

// HasUnderlyingCountryOfIssue returns true if UnderlyingCountryOfIssue is present, Tag 592.
func (m OrderMassCancelReport) HasUnderlyingCountryOfIssue() bool {
	return m.Has(tag.UnderlyingCountryOfIssue)
}

// HasUnderlyingStateOrProvinceOfIssue returns true if UnderlyingStateOrProvinceOfIssue is present, Tag 593.
func (m OrderMassCancelReport) HasUnderlyingStateOrProvinceOfIssue() bool {
	return m.Has(tag.UnderlyingStateOrProvinceOfIssue)
}

// HasUnderlyingLocaleOfIssue returns true if UnderlyingLocaleOfIssue is present, Tag 594.
func (m OrderMassCancelReport) HasUnderlyingLocaleOfIssue() bool {
	return m.Has(tag.UnderlyingLocaleOfIssue)
}

// HasUnderlyingInstrRegistry returns true if UnderlyingInstrRegistry is present, Tag 595.
func (m OrderMassCancelReport) HasUnderlyingInstrRegistry() bool {
	return m.Has(tag.UnderlyingInstrRegistry)
}

// HasTradingSessionSubID returns true if TradingSessionSubID is present, Tag 625.
func (m OrderMassCancelReport) HasTradingSessionSubID() bool {
	return m.Has(tag.TradingSessionSubID)
}

// HasContractSettlMonth returns true if ContractSettlMonth is present, Tag 667.
func (m OrderMassCancelReport) HasContractSettlMonth() bool {
	return m.Has(tag.ContractSettlMonth)
}

// HasPool returns true if Pool is present, Tag 691.
func (m OrderMassCancelReport) HasPool() bool {
	return m.Has(tag.Pool)
}

// HasSecuritySubType returns true if SecuritySubType is present, Tag 762.
func (m OrderMassCancelReport) HasSecuritySubType() bool {
	return m.Has(tag.SecuritySubType)
}

// HasUnderlyingSecuritySubType returns true if UnderlyingSecuritySubType is present, Tag 763.
func (m OrderMassCancelReport) HasUnderlyingSecuritySubType() bool {
	return m.Has(tag.UnderlyingSecuritySubType)
}

// HasUnderlyingPx returns true if UnderlyingPx is present, Tag 810.
func (m OrderMassCancelReport) HasUnderlyingPx() bool {
	return m.Has(tag.UnderlyingPx)
}

// HasNoEvents returns true if NoEvents is present, Tag 864.
func (m OrderMassCancelReport) HasNoEvents() bool {
	return m.Has(tag.NoEvents)
}

// HasDatedDate returns true if DatedDate is present, Tag 873.
func (m OrderMassCancelReport) HasDatedDate() bool {
	return m.Has(tag.DatedDate)
}

// HasInterestAccrualDate returns true if InterestAccrualDate is present, Tag 874.
func (m OrderMassCancelReport) HasInterestAccrualDate() bool {
	return m.Has(tag.InterestAccrualDate)
}

// HasCPProgram returns true if CPProgram is present, Tag 875.
func (m OrderMassCancelReport) HasCPProgram() bool {
	return m.Has(tag.CPProgram)
}

// HasCPRegType returns true if CPRegType is present, Tag 876.
func (m OrderMassCancelReport) HasCPRegType() bool {
	return m.Has(tag.CPRegType)
}

// HasUnderlyingCPProgram returns true if UnderlyingCPProgram is present, Tag 877.
func (m OrderMassCancelReport) HasUnderlyingCPProgram() bool {
	return m.Has(tag.UnderlyingCPProgram)
}

// HasUnderlyingCPRegType returns true if UnderlyingCPRegType is present, Tag 878.
func (m OrderMassCancelReport) HasUnderlyingCPRegType() bool {
	return m.Has(tag.UnderlyingCPRegType)
}

// HasUnderlyingQty returns true if UnderlyingQty is present, Tag 879.
func (m OrderMassCancelReport) HasUnderlyingQty() bool {
	return m.Has(tag.UnderlyingQty)
}

// HasUnderlyingDirtyPrice returns true if UnderlyingDirtyPrice is present, Tag 882.
func (m OrderMassCancelReport) HasUnderlyingDirtyPrice() bool {
	return m.Has(tag.UnderlyingDirtyPrice)
}

// HasUnderlyingEndPrice returns true if UnderlyingEndPrice is present, Tag 883.
func (m OrderMassCancelReport) HasUnderlyingEndPrice() bool {
	return m.Has(tag.UnderlyingEndPrice)
}

// HasUnderlyingStartValue returns true if UnderlyingStartValue is present, Tag 884.
func (m OrderMassCancelReport) HasUnderlyingStartValue() bool {
	return m.Has(tag.UnderlyingStartValue)
}

// HasUnderlyingCurrentValue returns true if UnderlyingCurrentValue is present, Tag 885.
func (m OrderMassCancelReport) HasUnderlyingCurrentValue() bool {
	return m.Has(tag.UnderlyingCurrentValue)
}

// HasUnderlyingEndValue returns true if UnderlyingEndValue is present, Tag 886.
func (m OrderMassCancelReport) HasUnderlyingEndValue() bool {
	return m.Has(tag.UnderlyingEndValue)
}

// HasNoUnderlyingStips returns true if NoUnderlyingStips is present, Tag 887.
func (m OrderMassCancelReport) HasNoUnderlyingStips() bool {
	return m.Has(tag.NoUnderlyingStips)
}

// HasUnderlyingStrikeCurrency returns true if UnderlyingStrikeCurrency is present, Tag 941.
func (m OrderMassCancelReport) HasUnderlyingStrikeCurrency() bool {
	return m.Has(tag.UnderlyingStrikeCurrency)
}

// HasStrikeCurrency returns true if StrikeCurrency is present, Tag 947.
func (m OrderMassCancelReport) HasStrikeCurrency() bool {
	return m.Has(tag.StrikeCurrency)
}

// HasSecurityStatus returns true if SecurityStatus is present, Tag 965.
func (m OrderMassCancelReport) HasSecurityStatus() bool {
	return m.Has(tag.SecurityStatus)
}

// HasSettleOnOpenFlag returns true if SettleOnOpenFlag is present, Tag 966.
func (m OrderMassCancelReport) HasSettleOnOpenFlag() bool {
	return m.Has(tag.SettleOnOpenFlag)
}

// HasStrikeMultiplier returns true if StrikeMultiplier is present, Tag 967.
func (m OrderMassCancelReport) HasStrikeMultiplier() bool {
	return m.Has(tag.StrikeMultiplier)
}

// HasStrikeValue returns true if StrikeValue is present, Tag 968.
func (m OrderMassCancelReport) HasStrikeValue() bool {
	return m.Has(tag.StrikeValue)
}

// HasMinPriceIncrement returns true if MinPriceIncrement is present, Tag 969.
func (m OrderMassCancelReport) HasMinPriceIncrement() bool {
	return m.Has(tag.MinPriceIncrement)
}

// HasPositionLimit returns true if PositionLimit is present, Tag 970.
func (m OrderMassCancelReport) HasPositionLimit() bool {
	return m.Has(tag.PositionLimit)
}

// HasNTPositionLimit returns true if NTPositionLimit is present, Tag 971.
func (m OrderMassCancelReport) HasNTPositionLimit() bool {
	return m.Has(tag.NTPositionLimit)
}

// HasUnderlyingAllocationPercent returns true if UnderlyingAllocationPercent is present, Tag 972.
func (m OrderMassCancelReport) HasUnderlyingAllocationPercent() bool {
	return m.Has(tag.UnderlyingAllocationPercent)
}

// HasUnderlyingCashAmount returns true if UnderlyingCashAmount is present, Tag 973.
func (m OrderMassCancelReport) HasUnderlyingCashAmount() bool {
	return m.Has(tag.UnderlyingCashAmount)
}

// HasUnderlyingCashType returns true if UnderlyingCashType is present, Tag 974.
func (m OrderMassCancelReport) HasUnderlyingCashType() bool {
	return m.Has(tag.UnderlyingCashType)
}

// HasUnderlyingSettlementType returns true if UnderlyingSettlementType is present, Tag 975.
func (m OrderMassCancelReport) HasUnderlyingSettlementType() bool {
	return m.Has(tag.UnderlyingSettlementType)
}

// HasUnitOfMeasure returns true if UnitOfMeasure is present, Tag 996.
func (m OrderMassCancelReport) HasUnitOfMeasure() bool {
	return m.Has(tag.UnitOfMeasure)
}

// HasTimeUnit returns true if TimeUnit is present, Tag 997.
func (m OrderMassCancelReport) HasTimeUnit() bool {
	return m.Has(tag.TimeUnit)
}

// HasUnderlyingUnitOfMeasure returns true if UnderlyingUnitOfMeasure is present, Tag 998.
func (m OrderMassCancelReport) HasUnderlyingUnitOfMeasure() bool {
	return m.Has(tag.UnderlyingUnitOfMeasure)
}

// HasUnderlyingTimeUnit returns true if UnderlyingTimeUnit is present, Tag 1000.
func (m OrderMassCancelReport) HasUnderlyingTimeUnit() bool {
	return m.Has(tag.UnderlyingTimeUnit)
}

// HasNoInstrumentParties returns true if NoInstrumentParties is present, Tag 1018.
func (m OrderMassCancelReport) HasNoInstrumentParties() bool {
	return m.Has(tag.NoInstrumentParties)
}

// HasUnderlyingCapValue returns true if UnderlyingCapValue is present, Tag 1038.
func (m OrderMassCancelReport) HasUnderlyingCapValue() bool {
	return m.Has(tag.UnderlyingCapValue)
}

// HasUnderlyingSettlMethod returns true if UnderlyingSettlMethod is present, Tag 1039.
func (m OrderMassCancelReport) HasUnderlyingSettlMethod() bool {
	return m.Has(tag.UnderlyingSettlMethod)
}

// HasUnderlyingAdjustedQuantity returns true if UnderlyingAdjustedQuantity is present, Tag 1044.
func (m OrderMassCancelReport) HasUnderlyingAdjustedQuantity() bool {
	return m.Has(tag.UnderlyingAdjustedQuantity)
}

// HasUnderlyingFXRate returns true if UnderlyingFXRate is present, Tag 1045.
func (m OrderMassCancelReport) HasUnderlyingFXRate() bool {
	return m.Has(tag.UnderlyingFXRate)
}

// HasUnderlyingFXRateCalc returns true if UnderlyingFXRateCalc is present, Tag 1046.
func (m OrderMassCancelReport) HasUnderlyingFXRateCalc() bool {
	return m.Has(tag.UnderlyingFXRateCalc)
}

// HasInstrmtAssignmentMethod returns true if InstrmtAssignmentMethod is present, Tag 1049.
func (m OrderMassCancelReport) HasInstrmtAssignmentMethod() bool {
	return m.Has(tag.InstrmtAssignmentMethod)
}

// HasNoUndlyInstrumentParties returns true if NoUndlyInstrumentParties is present, Tag 1058.
func (m OrderMassCancelReport) HasNoUndlyInstrumentParties() bool {
	return m.Has(tag.NoUndlyInstrumentParties)
}

// HasMaturityTime returns true if MaturityTime is present, Tag 1079.
func (m OrderMassCancelReport) HasMaturityTime() bool {
	return m.Has(tag.MaturityTime)
}

// HasMinPriceIncrementAmount returns true if MinPriceIncrementAmount is present, Tag 1146.
func (m OrderMassCancelReport) HasMinPriceIncrementAmount() bool {
	return m.Has(tag.MinPriceIncrementAmount)
}

// HasUnitOfMeasureQty returns true if UnitOfMeasureQty is present, Tag 1147.
func (m OrderMassCancelReport) HasUnitOfMeasureQty() bool {
	return m.Has(tag.UnitOfMeasureQty)
}

// HasSecurityGroup returns true if SecurityGroup is present, Tag 1151.
func (m OrderMassCancelReport) HasSecurityGroup() bool {
	return m.Has(tag.SecurityGroup)
}

// HasSecurityXMLLen returns true if SecurityXMLLen is present, Tag 1184.
func (m OrderMassCancelReport) HasSecurityXMLLen() bool {
	return m.Has(tag.SecurityXMLLen)
}

// HasSecurityXML returns true if SecurityXML is present, Tag 1185.
func (m OrderMassCancelReport) HasSecurityXML() bool {
	return m.Has(tag.SecurityXML)
}

// HasSecurityXMLSchema returns true if SecurityXMLSchema is present, Tag 1186.
func (m OrderMassCancelReport) HasSecurityXMLSchema() bool {
	return m.Has(tag.SecurityXMLSchema)
}

// HasPriceUnitOfMeasure returns true if PriceUnitOfMeasure is present, Tag 1191.
func (m OrderMassCancelReport) HasPriceUnitOfMeasure() bool {
	return m.Has(tag.PriceUnitOfMeasure)
}

// HasPriceUnitOfMeasureQty returns true if PriceUnitOfMeasureQty is present, Tag 1192.
func (m OrderMassCancelReport) HasPriceUnitOfMeasureQty() bool {
	return m.Has(tag.PriceUnitOfMeasureQty)
}

// HasSettlMethod returns true if SettlMethod is present, Tag 1193.
func (m OrderMassCancelReport) HasSettlMethod() bool {
	return m.Has(tag.SettlMethod)
}

// HasExerciseStyle returns true if ExerciseStyle is present, Tag 1194.
func (m OrderMassCancelReport) HasExerciseStyle() bool {
	return m.Has(tag.ExerciseStyle)
}

// HasOptPayoutAmount returns true if OptPayoutAmount is present, Tag 1195.
func (m OrderMassCancelReport) HasOptPayoutAmount() bool {
	return m.Has(tag.OptPayoutAmount)
}

// HasPriceQuoteMethod returns true if PriceQuoteMethod is present, Tag 1196.
func (m OrderMassCancelReport) HasPriceQuoteMethod() bool {
	return m.Has(tag.PriceQuoteMethod)
}

// HasValuationMethod returns true if ValuationMethod is present, Tag 1197.
func (m OrderMassCancelReport) HasValuationMethod() bool {
	return m.Has(tag.ValuationMethod)
}

// HasListMethod returns true if ListMethod is present, Tag 1198.
func (m OrderMassCancelReport) HasListMethod() bool {
	return m.Has(tag.ListMethod)
}

// HasCapPrice returns true if CapPrice is present, Tag 1199.
func (m OrderMassCancelReport) HasCapPrice() bool {
	return m.Has(tag.CapPrice)
}

// HasFloorPrice returns true if FloorPrice is present, Tag 1200.
func (m OrderMassCancelReport) HasFloorPrice() bool {
	return m.Has(tag.FloorPrice)
}

// HasUnderlyingMaturityTime returns true if UnderlyingMaturityTime is present, Tag 1213.
func (m OrderMassCancelReport) HasUnderlyingMaturityTime() bool {
	return m.Has(tag.UnderlyingMaturityTime)
}

// HasProductComplex returns true if ProductComplex is present, Tag 1227.
func (m OrderMassCancelReport) HasProductComplex() bool {
	return m.Has(tag.ProductComplex)
}

// HasFlexProductEligibilityIndicator returns true if FlexProductEligibilityIndicator is present, Tag 1242.
func (m OrderMassCancelReport) HasFlexProductEligibilityIndicator() bool {
	return m.Has(tag.FlexProductEligibilityIndicator)
}

// HasFlexibleIndicator returns true if FlexibleIndicator is present, Tag 1244.
func (m OrderMassCancelReport) HasFlexibleIndicator() bool {
	return m.Has(tag.FlexibleIndicator)
}

// HasMarketSegmentID returns true if MarketSegmentID is present, Tag 1300.
func (m OrderMassCancelReport) HasMarketSegmentID() bool {
	return m.Has(tag.MarketSegmentID)
}

// HasMarketID returns true if MarketID is present, Tag 1301.
func (m OrderMassCancelReport) HasMarketID() bool {
	return m.Has(tag.MarketID)
}

// HasMassActionReportID returns true if MassActionReportID is present, Tag 1369.
func (m OrderMassCancelReport) HasMassActionReportID() bool {
	return m.Has(tag.MassActionReportID)
}

// HasNoNotAffectedOrders returns true if NoNotAffectedOrders is present, Tag 1370.
func (m OrderMassCancelReport) HasNoNotAffectedOrders() bool {
	return m.Has(tag.NoNotAffectedOrders)
}

// HasUnderlyingExerciseStyle returns true if UnderlyingExerciseStyle is present, Tag 1419.
func (m OrderMassCancelReport) HasUnderlyingExerciseStyle() bool {
	return m.Has(tag.UnderlyingExerciseStyle)
}

// HasUnderlyingUnitOfMeasureQty returns true if UnderlyingUnitOfMeasureQty is present, Tag 1423.
func (m OrderMassCancelReport) HasUnderlyingUnitOfMeasureQty() bool {
	return m.Has(tag.UnderlyingUnitOfMeasureQty)
}

// HasUnderlyingPriceUnitOfMeasure returns true if UnderlyingPriceUnitOfMeasure is present, Tag 1424.
func (m OrderMassCancelReport) HasUnderlyingPriceUnitOfMeasure() bool {
	return m.Has(tag.UnderlyingPriceUnitOfMeasure)
}

// HasUnderlyingPriceUnitOfMeasureQty returns true if UnderlyingPriceUnitOfMeasureQty is present, Tag 1425.
func (m OrderMassCancelReport) HasUnderlyingPriceUnitOfMeasureQty() bool {
	return m.Has(tag.UnderlyingPriceUnitOfMeasureQty)
}

// HasContractMultiplierUnit returns true if ContractMultiplierUnit is present, Tag 1435.
func (m OrderMassCancelReport) HasContractMultiplierUnit() bool {
	return m.Has(tag.ContractMultiplierUnit)
}

// HasUnderlyingContractMultiplierUnit returns true if UnderlyingContractMultiplierUnit is present, Tag 1437.
func (m OrderMassCancelReport) HasUnderlyingContractMultiplierUnit() bool {
	return m.Has(tag.UnderlyingContractMultiplierUnit)
}

// HasFlowScheduleType returns true if FlowScheduleType is present, Tag 1439.
func (m OrderMassCancelReport) HasFlowScheduleType() bool {
	return m.Has(tag.FlowScheduleType)
}

// HasUnderlyingFlowScheduleType returns true if UnderlyingFlowScheduleType is present, Tag 1441.
func (m OrderMassCancelReport) HasUnderlyingFlowScheduleType() bool {
	return m.Has(tag.UnderlyingFlowScheduleType)
}

// HasRestructuringType returns true if RestructuringType is present, Tag 1449.
func (m OrderMassCancelReport) HasRestructuringType() bool {
	return m.Has(tag.RestructuringType)
}

// HasSeniority returns true if Seniority is present, Tag 1450.
func (m OrderMassCancelReport) HasSeniority() bool {
	return m.Has(tag.Seniority)
}

// HasNotionalPercentageOutstanding returns true if NotionalPercentageOutstanding is present, Tag 1451.
func (m OrderMassCancelReport) HasNotionalPercentageOutstanding() bool {
	return m.Has(tag.NotionalPercentageOutstanding)
}

// HasOriginalNotionalPercentageOutstanding returns true if OriginalNotionalPercentageOutstanding is present, Tag 1452.
func (m OrderMassCancelReport) HasOriginalNotionalPercentageOutstanding() bool {
	return m.Has(tag.OriginalNotionalPercentageOutstanding)
}

// HasUnderlyingRestructuringType returns true if UnderlyingRestructuringType is present, Tag 1453.
func (m OrderMassCancelReport) HasUnderlyingRestructuringType() bool {
	return m.Has(tag.UnderlyingRestructuringType)
}

// HasUnderlyingSeniority returns true if UnderlyingSeniority is present, Tag 1454.
func (m OrderMassCancelReport) HasUnderlyingSeniority() bool {
	return m.Has(tag.UnderlyingSeniority)
}

// HasUnderlyingNotionalPercentageOutstanding returns true if UnderlyingNotionalPercentageOutstanding is present, Tag 1455.
func (m OrderMassCancelReport) HasUnderlyingNotionalPercentageOutstanding() bool {
	return m.Has(tag.UnderlyingNotionalPercentageOutstanding)
}

// HasUnderlyingOriginalNotionalPercentageOutstanding returns true if UnderlyingOriginalNotionalPercentageOutstanding is present, Tag 1456.
func (m OrderMassCancelReport) HasUnderlyingOriginalNotionalPercentageOutstanding() bool {
	return m.Has(tag.UnderlyingOriginalNotionalPercentageOutstanding)
}

// HasAttachmentPoint returns true if AttachmentPoint is present, Tag 1457.
func (m OrderMassCancelReport) HasAttachmentPoint() bool {
	return m.Has(tag.AttachmentPoint)
}

// HasDetachmentPoint returns true if DetachmentPoint is present, Tag 1458.
func (m OrderMassCancelReport) HasDetachmentPoint() bool {
	return m.Has(tag.DetachmentPoint)
}

// HasUnderlyingAttachmentPoint returns true if UnderlyingAttachmentPoint is present, Tag 1459.
func (m OrderMassCancelReport) HasUnderlyingAttachmentPoint() bool {
	return m.Has(tag.UnderlyingAttachmentPoint)
}

// HasUnderlyingDetachmentPoint returns true if UnderlyingDetachmentPoint is present, Tag 1460.
func (m OrderMassCancelReport) HasUnderlyingDetachmentPoint() bool {
	return m.Has(tag.UnderlyingDetachmentPoint)
}

// HasNoTargetPartyIDs returns true if NoTargetPartyIDs is present, Tag 1461.
func (m OrderMassCancelReport) HasNoTargetPartyIDs() bool {
	return m.Has(tag.NoTargetPartyIDs)
}

// HasStrikePriceDeterminationMethod returns true if StrikePriceDeterminationMethod is present, Tag 1478.
func (m OrderMassCancelReport) HasStrikePriceDeterminationMethod() bool {
	return m.Has(tag.StrikePriceDeterminationMethod)
}

// HasStrikePriceBoundaryMethod returns true if StrikePriceBoundaryMethod is present, Tag 1479.
func (m OrderMassCancelReport) HasStrikePriceBoundaryMethod() bool {
	return m.Has(tag.StrikePriceBoundaryMethod)
}

// HasStrikePriceBoundaryPrecision returns true if StrikePriceBoundaryPrecision is present, Tag 1480.
func (m OrderMassCancelReport) HasStrikePriceBoundaryPrecision() bool {
	return m.Has(tag.StrikePriceBoundaryPrecision)
}

// HasUnderlyingPriceDeterminationMethod returns true if UnderlyingPriceDeterminationMethod is present, Tag 1481.
func (m OrderMassCancelReport) HasUnderlyingPriceDeterminationMethod() bool {
	return m.Has(tag.UnderlyingPriceDeterminationMethod)
}

// HasOptPayoutType returns true if OptPayoutType is present, Tag 1482.
func (m OrderMassCancelReport) HasOptPayoutType() bool {
	return m.Has(tag.OptPayoutType)
}

// HasNoComplexEvents returns true if NoComplexEvents is present, Tag 1483.
func (m OrderMassCancelReport) HasNoComplexEvents() bool {
	return m.Has(tag.NoComplexEvents)
}

// HasPriceQuoteCurrency returns true if PriceQuoteCurrency is present, Tag 1524.
func (m OrderMassCancelReport) HasPriceQuoteCurrency() bool {
	return m.Has(tag.PriceQuoteCurrency)
}

// HasUnderlyingPriceQuoteCurrency returns true if UnderlyingPriceQuoteCurrency is present, Tag 1526.
func (m OrderMassCancelReport) HasUnderlyingPriceQuoteCurrency() bool {
	return m.Has(tag.UnderlyingPriceQuoteCurrency)
}

// HasSwapSubClass returns true if SwapSubClass is present, Tag 1575.
func (m OrderMassCancelReport) HasSwapSubClass() bool {
	return m.Has(tag.SwapSubClass)
}

// HasSettlRateIndex returns true if SettlRateIndex is present, Tag 1577.
func (m OrderMassCancelReport) HasSettlRateIndex() bool {
	return m.Has(tag.SettlRateIndex)
}

// HasSettlRateIndexLocation returns true if SettlRateIndexLocation is present, Tag 1580.
func (m OrderMassCancelReport) HasSettlRateIndexLocation() bool {
	return m.Has(tag.SettlRateIndexLocation)
}

// HasOptionExpirationDesc returns true if OptionExpirationDesc is present, Tag 1581.
func (m OrderMassCancelReport) HasOptionExpirationDesc() bool {
	return m.Has(tag.OptionExpirationDesc)
}

// HasEncodedOptionExpirationDescLen returns true if EncodedOptionExpirationDescLen is present, Tag 1678.
func (m OrderMassCancelReport) HasEncodedOptionExpirationDescLen() bool {
	return m.Has(tag.EncodedOptionExpirationDescLen)
}

// HasShortSaleRestriction returns true if ShortSaleRestriction is present, Tag 1687.
func (m OrderMassCancelReport) HasShortSaleRestriction() bool {
	return m.Has(tag.ShortSaleRestriction)
}

// HasEncodedOptionExpirationDesc returns true if EncodedOptionExpirationDesc is present, Tag 1697.
func (m OrderMassCancelReport) HasEncodedOptionExpirationDesc() bool {
	return m.Has(tag.EncodedOptionExpirationDesc)
}

// HasStrikeUnitOfMeasure returns true if StrikeUnitOfMeasure is present, Tag 1698.
func (m OrderMassCancelReport) HasStrikeUnitOfMeasure() bool {
	return m.Has(tag.StrikeUnitOfMeasure)
}

// HasUnitOfMeasureCurrency returns true if UnitOfMeasureCurrency is present, Tag 1716.
func (m OrderMassCancelReport) HasUnitOfMeasureCurrency() bool {
	return m.Has(tag.UnitOfMeasureCurrency)
}

// HasPriceUnitOfMeasureCurrency returns true if PriceUnitOfMeasureCurrency is present, Tag 1717.
func (m OrderMassCancelReport) HasPriceUnitOfMeasureCurrency() bool {
	return m.Has(tag.PriceUnitOfMeasureCurrency)
}

// HasUnderlyingUnitOfMeasureCurrency returns true if UnderlyingUnitOfMeasureCurrency is present, Tag 1718.
func (m OrderMassCancelReport) HasUnderlyingUnitOfMeasureCurrency() bool {
	return m.Has(tag.UnderlyingUnitOfMeasureCurrency)
}

// HasUnderlyingPriceUnitOfMeasureCurrency returns true if UnderlyingPriceUnitOfMeasureCurrency is present, Tag 1719.
func (m OrderMassCancelReport) HasUnderlyingPriceUnitOfMeasureCurrency() bool {
	return m.Has(tag.UnderlyingPriceUnitOfMeasureCurrency)
}

// HasObligationType returns true if ObligationType is present, Tag 1739.
func (m OrderMassCancelReport) HasObligationType() bool {
	return m.Has(tag.ObligationType)
}

// HasRefTickTableID returns true if RefTickTableID is present, Tag 1787.
func (m OrderMassCancelReport) HasRefTickTableID() bool {
	return m.Has(tag.RefTickTableID)
}

// HasUnderlyingContractPriceRefMonth returns true if UnderlyingContractPriceRefMonth is present, Tag 1837.
func (m OrderMassCancelReport) HasUnderlyingContractPriceRefMonth() bool {
	return m.Has(tag.UnderlyingContractPriceRefMonth)
}

// HasStrikeIndex returns true if StrikeIndex is present, Tag 1866.
func (m OrderMassCancelReport) HasStrikeIndex() bool {
	return m.Has(tag.StrikeIndex)
}

// HasUnderlyingSecurityXMLLen returns true if UnderlyingSecurityXMLLen is present, Tag 1874.
func (m OrderMassCancelReport) HasUnderlyingSecurityXMLLen() bool {
	return m.Has(tag.UnderlyingSecurityXMLLen)
}

// HasUnderlyingSecurityXML returns true if UnderlyingSecurityXML is present, Tag 1875.
func (m OrderMassCancelReport) HasUnderlyingSecurityXML() bool {
	return m.Has(tag.UnderlyingSecurityXML)
}

// HasUnderlyingSecurityXMLSchema returns true if UnderlyingSecurityXMLSchema is present, Tag 1876.
func (m OrderMassCancelReport) HasUnderlyingSecurityXMLSchema() bool {
	return m.Has(tag.UnderlyingSecurityXMLSchema)
}

// HasAssetClass returns true if AssetClass is present, Tag 1938.
func (m OrderMassCancelReport) HasAssetClass() bool {
	return m.Has(tag.AssetClass)
}

// HasAssetSubClass returns true if AssetSubClass is present, Tag 1939.
func (m OrderMassCancelReport) HasAssetSubClass() bool {
	return m.Has(tag.AssetSubClass)
}

// HasAssetType returns true if AssetType is present, Tag 1940.
func (m OrderMassCancelReport) HasAssetType() bool {
	return m.Has(tag.AssetType)
}

// HasSwapClass returns true if SwapClass is present, Tag 1941.
func (m OrderMassCancelReport) HasSwapClass() bool {
	return m.Has(tag.SwapClass)
}

// HasNthToDefault returns true if NthToDefault is present, Tag 1942.
func (m OrderMassCancelReport) HasNthToDefault() bool {
	return m.Has(tag.NthToDefault)
}

// HasMthToDefault returns true if MthToDefault is present, Tag 1943.
func (m OrderMassCancelReport) HasMthToDefault() bool {
	return m.Has(tag.MthToDefault)
}

// HasSettledEntityMatrixSource returns true if SettledEntityMatrixSource is present, Tag 1944.
func (m OrderMassCancelReport) HasSettledEntityMatrixSource() bool {
	return m.Has(tag.SettledEntityMatrixSource)
}

// HasSettledEntityMatrixPublicationDate returns true if SettledEntityMatrixPublicationDate is present, Tag 1945.
func (m OrderMassCancelReport) HasSettledEntityMatrixPublicationDate() bool {
	return m.Has(tag.SettledEntityMatrixPublicationDate)
}

// HasCouponType returns true if CouponType is present, Tag 1946.
func (m OrderMassCancelReport) HasCouponType() bool {
	return m.Has(tag.CouponType)
}

// HasTotalIssuedAmount returns true if TotalIssuedAmount is present, Tag 1947.
func (m OrderMassCancelReport) HasTotalIssuedAmount() bool {
	return m.Has(tag.TotalIssuedAmount)
}

// HasCouponFrequencyPeriod returns true if CouponFrequencyPeriod is present, Tag 1948.
func (m OrderMassCancelReport) HasCouponFrequencyPeriod() bool {
	return m.Has(tag.CouponFrequencyPeriod)
}

// HasCouponFrequencyUnit returns true if CouponFrequencyUnit is present, Tag 1949.
func (m OrderMassCancelReport) HasCouponFrequencyUnit() bool {
	return m.Has(tag.CouponFrequencyUnit)
}

// HasCouponDayCount returns true if CouponDayCount is present, Tag 1950.
func (m OrderMassCancelReport) HasCouponDayCount() bool {
	return m.Has(tag.CouponDayCount)
}

// HasConvertibleBondEquityID returns true if ConvertibleBondEquityID is present, Tag 1951.
func (m OrderMassCancelReport) HasConvertibleBondEquityID() bool {
	return m.Has(tag.ConvertibleBondEquityID)
}

// HasConvertibleBondEquityIDSource returns true if ConvertibleBondEquityIDSource is present, Tag 1952.
func (m OrderMassCancelReport) HasConvertibleBondEquityIDSource() bool {
	return m.Has(tag.ConvertibleBondEquityIDSource)
}

// HasContractPriceRefMonth returns true if ContractPriceRefMonth is present, Tag 1953.
func (m OrderMassCancelReport) HasContractPriceRefMonth() bool {
	return m.Has(tag.ContractPriceRefMonth)
}

// HasLienSeniority returns true if LienSeniority is present, Tag 1954.
func (m OrderMassCancelReport) HasLienSeniority() bool {
	return m.Has(tag.LienSeniority)
}

// HasLoanFacility returns true if LoanFacility is present, Tag 1955.
func (m OrderMassCancelReport) HasLoanFacility() bool {
	return m.Has(tag.LoanFacility)
}

// HasReferenceEntityType returns true if ReferenceEntityType is present, Tag 1956.
func (m OrderMassCancelReport) HasReferenceEntityType() bool {
	return m.Has(tag.ReferenceEntityType)
}

// HasIndexSeries returns true if IndexSeries is present, Tag 1957.
func (m OrderMassCancelReport) HasIndexSeries() bool {
	return m.Has(tag.IndexSeries)
}

// HasIndexAnnexVersion returns true if IndexAnnexVersion is present, Tag 1958.
func (m OrderMassCancelReport) HasIndexAnnexVersion() bool {
	return m.Has(tag.IndexAnnexVersion)
}

// HasIndexAnnexDate returns true if IndexAnnexDate is present, Tag 1959.
func (m OrderMassCancelReport) HasIndexAnnexDate() bool {
	return m.Has(tag.IndexAnnexDate)
}

// HasIndexAnnexSource returns true if IndexAnnexSource is present, Tag 1960.
func (m OrderMassCancelReport) HasIndexAnnexSource() bool {
	return m.Has(tag.IndexAnnexSource)
}

// HasNoSecondaryAssetClasses returns true if NoSecondaryAssetClasses is present, Tag 1976.
func (m OrderMassCancelReport) HasNoSecondaryAssetClasses() bool {
	return m.Has(tag.NoSecondaryAssetClasses)
}

// HasNoUnderlyingEvents returns true if NoUnderlyingEvents is present, Tag 1981.
func (m OrderMassCancelReport) HasNoUnderlyingEvents() bool {
	return m.Has(tag.NoUnderlyingEvents)
}

// HasUnderlyingConstituentWeight returns true if UnderlyingConstituentWeight is present, Tag 1988.
func (m OrderMassCancelReport) HasUnderlyingConstituentWeight() bool {
	return m.Has(tag.UnderlyingConstituentWeight)
}

// HasUnderlyingCouponType returns true if UnderlyingCouponType is present, Tag 1989.
func (m OrderMassCancelReport) HasUnderlyingCouponType() bool {
	return m.Has(tag.UnderlyingCouponType)
}

// HasUnderlyingTotalIssuedAmount returns true if UnderlyingTotalIssuedAmount is present, Tag 1990.
func (m OrderMassCancelReport) HasUnderlyingTotalIssuedAmount() bool {
	return m.Has(tag.UnderlyingTotalIssuedAmount)
}

// HasUnderlyingCouponFrequencyPeriod returns true if UnderlyingCouponFrequencyPeriod is present, Tag 1991.
func (m OrderMassCancelReport) HasUnderlyingCouponFrequencyPeriod() bool {
	return m.Has(tag.UnderlyingCouponFrequencyPeriod)
}

// HasUnderlyingCouponFrequencyUnit returns true if UnderlyingCouponFrequencyUnit is present, Tag 1992.
func (m OrderMassCancelReport) HasUnderlyingCouponFrequencyUnit() bool {
	return m.Has(tag.UnderlyingCouponFrequencyUnit)
}

// HasUnderlyingCouponDayCount returns true if UnderlyingCouponDayCount is present, Tag 1993.
func (m OrderMassCancelReport) HasUnderlyingCouponDayCount() bool {
	return m.Has(tag.UnderlyingCouponDayCount)
}

// HasUnderlyingObligationID returns true if UnderlyingObligationID is present, Tag 1994.
func (m OrderMassCancelReport) HasUnderlyingObligationID() bool {
	return m.Has(tag.UnderlyingObligationID)
}

// HasUnderlyingObligationIDSource returns true if UnderlyingObligationIDSource is present, Tag 1995.
func (m OrderMassCancelReport) HasUnderlyingObligationIDSource() bool {
	return m.Has(tag.UnderlyingObligationIDSource)
}

// HasUnderlyingEquityID returns true if UnderlyingEquityID is present, Tag 1996.
func (m OrderMassCancelReport) HasUnderlyingEquityID() bool {
	return m.Has(tag.UnderlyingEquityID)
}

// HasUnderlyingEquityIDSource returns true if UnderlyingEquityIDSource is present, Tag 1997.
func (m OrderMassCancelReport) HasUnderlyingEquityIDSource() bool {
	return m.Has(tag.UnderlyingEquityIDSource)
}

// HasUnderlyingLienSeniority returns true if UnderlyingLienSeniority is present, Tag 1998.
func (m OrderMassCancelReport) HasUnderlyingLienSeniority() bool {
	return m.Has(tag.UnderlyingLienSeniority)
}

// HasUnderlyingLoanFacility returns true if UnderlyingLoanFacility is present, Tag 1999.
func (m OrderMassCancelReport) HasUnderlyingLoanFacility() bool {
	return m.Has(tag.UnderlyingLoanFacility)
}

// HasUnderlyingReferenceEntityType returns true if UnderlyingReferenceEntityType is present, Tag 2000.
func (m OrderMassCancelReport) HasUnderlyingReferenceEntityType() bool {
	return m.Has(tag.UnderlyingReferenceEntityType)
}

// HasStrikeIndexSpread returns true if StrikeIndexSpread is present, Tag 2001.
func (m OrderMassCancelReport) HasStrikeIndexSpread() bool {
	return m.Has(tag.StrikeIndexSpread)
}

// HasValuationSource returns true if ValuationSource is present, Tag 2002.
func (m OrderMassCancelReport) HasValuationSource() bool {
	return m.Has(tag.ValuationSource)
}

// HasUnderlyingIndexSeries returns true if UnderlyingIndexSeries is present, Tag 2003.
func (m OrderMassCancelReport) HasUnderlyingIndexSeries() bool {
	return m.Has(tag.UnderlyingIndexSeries)
}

// HasUnderlyingIndexAnnexVersion returns true if UnderlyingIndexAnnexVersion is present, Tag 2004.
func (m OrderMassCancelReport) HasUnderlyingIndexAnnexVersion() bool {
	return m.Has(tag.UnderlyingIndexAnnexVersion)
}

// HasUnderlyingIndexAnnexDate returns true if UnderlyingIndexAnnexDate is present, Tag 2005.
func (m OrderMassCancelReport) HasUnderlyingIndexAnnexDate() bool {
	return m.Has(tag.UnderlyingIndexAnnexDate)
}

// HasUnderlyingIndexAnnexSource returns true if UnderlyingIndexAnnexSource is present, Tag 2006.
func (m OrderMassCancelReport) HasUnderlyingIndexAnnexSource() bool {
	return m.Has(tag.UnderlyingIndexAnnexSource)
}

// HasUnderlyingProductComplex returns true if UnderlyingProductComplex is present, Tag 2007.
func (m OrderMassCancelReport) HasUnderlyingProductComplex() bool {
	return m.Has(tag.UnderlyingProductComplex)
}

// HasUnderlyingSecurityGroup returns true if UnderlyingSecurityGroup is present, Tag 2008.
func (m OrderMassCancelReport) HasUnderlyingSecurityGroup() bool {
	return m.Has(tag.UnderlyingSecurityGroup)
}

// HasUnderlyingSettleOnOpenFlag returns true if UnderlyingSettleOnOpenFlag is present, Tag 2009.
func (m OrderMassCancelReport) HasUnderlyingSettleOnOpenFlag() bool {
	return m.Has(tag.UnderlyingSettleOnOpenFlag)
}

// HasUnderlyingAssignmentMethod returns true if UnderlyingAssignmentMethod is present, Tag 2010.
func (m OrderMassCancelReport) HasUnderlyingAssignmentMethod() bool {
	return m.Has(tag.UnderlyingAssignmentMethod)
}

// HasUnderlyingSecurityStatus returns true if UnderlyingSecurityStatus is present, Tag 2011.
func (m OrderMassCancelReport) HasUnderlyingSecurityStatus() bool {
	return m.Has(tag.UnderlyingSecurityStatus)
}

// HasUnderlyingObligationType returns true if UnderlyingObligationType is present, Tag 2012.
func (m OrderMassCancelReport) HasUnderlyingObligationType() bool {
	return m.Has(tag.UnderlyingObligationType)
}

// HasUnderlyingAssetClass returns true if UnderlyingAssetClass is present, Tag 2013.
func (m OrderMassCancelReport) HasUnderlyingAssetClass() bool {
	return m.Has(tag.UnderlyingAssetClass)
}

// HasUnderlyingAssetSubClass returns true if UnderlyingAssetSubClass is present, Tag 2014.
func (m OrderMassCancelReport) HasUnderlyingAssetSubClass() bool {
	return m.Has(tag.UnderlyingAssetSubClass)
}

// HasUnderlyingAssetType returns true if UnderlyingAssetType is present, Tag 2015.
func (m OrderMassCancelReport) HasUnderlyingAssetType() bool {
	return m.Has(tag.UnderlyingAssetType)
}

// HasUnderlyingSwapClass returns true if UnderlyingSwapClass is present, Tag 2016.
func (m OrderMassCancelReport) HasUnderlyingSwapClass() bool {
	return m.Has(tag.UnderlyingSwapClass)
}

// HasUnderlyingNthToDefault returns true if UnderlyingNthToDefault is present, Tag 2017.
func (m OrderMassCancelReport) HasUnderlyingNthToDefault() bool {
	return m.Has(tag.UnderlyingNthToDefault)
}

// HasUnderlyingMthToDefault returns true if UnderlyingMthToDefault is present, Tag 2018.
func (m OrderMassCancelReport) HasUnderlyingMthToDefault() bool {
	return m.Has(tag.UnderlyingMthToDefault)
}

// HasUnderlyingSettledEntityMatrixSource returns true if UnderlyingSettledEntityMatrixSource is present, Tag 2019.
func (m OrderMassCancelReport) HasUnderlyingSettledEntityMatrixSource() bool {
	return m.Has(tag.UnderlyingSettledEntityMatrixSource)
}

// HasUnderlyingSettledEntityMatrixPublicationDate returns true if UnderlyingSettledEntityMatrixPublicationDate is present, Tag 2020.
func (m OrderMassCancelReport) HasUnderlyingSettledEntityMatrixPublicationDate() bool {
	return m.Has(tag.UnderlyingSettledEntityMatrixPublicationDate)
}

// HasUnderlyingStrikeMultiplier returns true if UnderlyingStrikeMultiplier is present, Tag 2021.
func (m OrderMassCancelReport) HasUnderlyingStrikeMultiplier() bool {
	return m.Has(tag.UnderlyingStrikeMultiplier)
}

// HasUnderlyingStrikeValue returns true if UnderlyingStrikeValue is present, Tag 2022.
func (m OrderMassCancelReport) HasUnderlyingStrikeValue() bool {
	return m.Has(tag.UnderlyingStrikeValue)
}

// HasUnderlyingStrikePriceDeterminationMethod returns true if UnderlyingStrikePriceDeterminationMethod is present, Tag 2023.
func (m OrderMassCancelReport) HasUnderlyingStrikePriceDeterminationMethod() bool {
	return m.Has(tag.UnderlyingStrikePriceDeterminationMethod)
}

// HasUnderlyingStrikePriceBoundaryMethod returns true if UnderlyingStrikePriceBoundaryMethod is present, Tag 2024.
func (m OrderMassCancelReport) HasUnderlyingStrikePriceBoundaryMethod() bool {
	return m.Has(tag.UnderlyingStrikePriceBoundaryMethod)
}

// HasUnderlyingStrikePriceBoundaryPrecision returns true if UnderlyingStrikePriceBoundaryPrecision is present, Tag 2025.
func (m OrderMassCancelReport) HasUnderlyingStrikePriceBoundaryPrecision() bool {
	return m.Has(tag.UnderlyingStrikePriceBoundaryPrecision)
}

// HasUnderlyingMinPriceIncrement returns true if UnderlyingMinPriceIncrement is present, Tag 2026.
func (m OrderMassCancelReport) HasUnderlyingMinPriceIncrement() bool {
	return m.Has(tag.UnderlyingMinPriceIncrement)
}

// HasUnderlyingMinPriceIncrementAmount returns true if UnderlyingMinPriceIncrementAmount is present, Tag 2027.
func (m OrderMassCancelReport) HasUnderlyingMinPriceIncrementAmount() bool {
	return m.Has(tag.UnderlyingMinPriceIncrementAmount)
}

// HasUnderlyingOptPayoutType returns true if UnderlyingOptPayoutType is present, Tag 2028.
func (m OrderMassCancelReport) HasUnderlyingOptPayoutType() bool {
	return m.Has(tag.UnderlyingOptPayoutType)
}

// HasUnderlyingOptPayoutAmount returns true if UnderlyingOptPayoutAmount is present, Tag 2029.
func (m OrderMassCancelReport) HasUnderlyingOptPayoutAmount() bool {
	return m.Has(tag.UnderlyingOptPayoutAmount)
}

// HasUnderlyingPriceQuoteMethod returns true if UnderlyingPriceQuoteMethod is present, Tag 2030.
func (m OrderMassCancelReport) HasUnderlyingPriceQuoteMethod() bool {
	return m.Has(tag.UnderlyingPriceQuoteMethod)
}

// HasUnderlyingValuationMethod returns true if UnderlyingValuationMethod is present, Tag 2031.
func (m OrderMassCancelReport) HasUnderlyingValuationMethod() bool {
	return m.Has(tag.UnderlyingValuationMethod)
}

// HasUnderlyingListMethod returns true if UnderlyingListMethod is present, Tag 2032.
func (m OrderMassCancelReport) HasUnderlyingListMethod() bool {
	return m.Has(tag.UnderlyingListMethod)
}

// HasUnderlyingCapPrice returns true if UnderlyingCapPrice is present, Tag 2033.
func (m OrderMassCancelReport) HasUnderlyingCapPrice() bool {
	return m.Has(tag.UnderlyingCapPrice)
}

// HasUnderlyingFloorPrice returns true if UnderlyingFloorPrice is present, Tag 2034.
func (m OrderMassCancelReport) HasUnderlyingFloorPrice() bool {
	return m.Has(tag.UnderlyingFloorPrice)
}

// HasUnderlyingFlexibleIndicator returns true if UnderlyingFlexibleIndicator is present, Tag 2035.
func (m OrderMassCancelReport) HasUnderlyingFlexibleIndicator() bool {
	return m.Has(tag.UnderlyingFlexibleIndicator)
}

// HasUnderlyingFlexProductEligibilityIndicator returns true if UnderlyingFlexProductEligibilityIndicator is present, Tag 2036.
func (m OrderMassCancelReport) HasUnderlyingFlexProductEligibilityIndicator() bool {
	return m.Has(tag.UnderlyingFlexProductEligibilityIndicator)
}

// HasUnderlyingPositionLimit returns true if UnderlyingPositionLimit is present, Tag 2037.
func (m OrderMassCancelReport) HasUnderlyingPositionLimit() bool {
	return m.Has(tag.UnderlyingPositionLimit)
}

// HasUnderlyingNTPositionLimit returns true if UnderlyingNTPositionLimit is present, Tag 2038.
func (m OrderMassCancelReport) HasUnderlyingNTPositionLimit() bool {
	return m.Has(tag.UnderlyingNTPositionLimit)
}

// HasUnderlyingPool returns true if UnderlyingPool is present, Tag 2039.
func (m OrderMassCancelReport) HasUnderlyingPool() bool {
	return m.Has(tag.UnderlyingPool)
}

// HasUnderlyingContractSettlMonth returns true if UnderlyingContractSettlMonth is present, Tag 2040.
func (m OrderMassCancelReport) HasUnderlyingContractSettlMonth() bool {
	return m.Has(tag.UnderlyingContractSettlMonth)
}

// HasUnderlyingDatedDate returns true if UnderlyingDatedDate is present, Tag 2041.
func (m OrderMassCancelReport) HasUnderlyingDatedDate() bool {
	return m.Has(tag.UnderlyingDatedDate)
}

// HasUnderlyingInterestAccrualDate returns true if UnderlyingInterestAccrualDate is present, Tag 2042.
func (m OrderMassCancelReport) HasUnderlyingInterestAccrualDate() bool {
	return m.Has(tag.UnderlyingInterestAccrualDate)
}

// HasUnderlyingShortSaleRestriction returns true if UnderlyingShortSaleRestriction is present, Tag 2043.
func (m OrderMassCancelReport) HasUnderlyingShortSaleRestriction() bool {
	return m.Has(tag.UnderlyingShortSaleRestriction)
}

// HasUnderlyingRefTickTableID returns true if UnderlyingRefTickTableID is present, Tag 2044.
func (m OrderMassCancelReport) HasUnderlyingRefTickTableID() bool {
	return m.Has(tag.UnderlyingRefTickTableID)
}

// HasNoUnderlyingComplexEvents returns true if NoUnderlyingComplexEvents is present, Tag 2045.
func (m OrderMassCancelReport) HasNoUnderlyingComplexEvents() bool {
	return m.Has(tag.NoUnderlyingComplexEvents)
}

// HasNoUnderlyingSecondaryAssetClasses returns true if NoUnderlyingSecondaryAssetClasses is present, Tag 2080.
func (m OrderMassCancelReport) HasNoUnderlyingSecondaryAssetClasses() bool {
	return m.Has(tag.NoUnderlyingSecondaryAssetClasses)
}

// HasValuationReferenceModel returns true if ValuationReferenceModel is present, Tag 2140.
func (m OrderMassCancelReport) HasValuationReferenceModel() bool {
	return m.Has(tag.ValuationReferenceModel)
}

// HasStrategyType returns true if StrategyType is present, Tag 2141.
func (m OrderMassCancelReport) HasStrategyType() bool {
	return m.Has(tag.StrategyType)
}

// HasCommonPricingIndicator returns true if CommonPricingIndicator is present, Tag 2142.
func (m OrderMassCancelReport) HasCommonPricingIndicator() bool {
	return m.Has(tag.CommonPricingIndicator)
}

// HasSettlDisruptionProvision returns true if SettlDisruptionProvision is present, Tag 2143.
func (m OrderMassCancelReport) HasSettlDisruptionProvision() bool {
	return m.Has(tag.SettlDisruptionProvision)
}

// HasInstrumentRoundingDirection returns true if InstrumentRoundingDirection is present, Tag 2144.
func (m OrderMassCancelReport) HasInstrumentRoundingDirection() bool {
	return m.Has(tag.InstrumentRoundingDirection)
}

// HasInstrumentRoundingPrecision returns true if InstrumentRoundingPrecision is present, Tag 2145.
func (m OrderMassCancelReport) HasInstrumentRoundingPrecision() bool {
	return m.Has(tag.InstrumentRoundingPrecision)
}

// HasAssetGroup returns true if AssetGroup is present, Tag 2210.
func (m OrderMassCancelReport) HasAssetGroup() bool {
	return m.Has(tag.AssetGroup)
}

// HasUnderlyingSettlRateIndex returns true if UnderlyingSettlRateIndex is present, Tag 2284.
func (m OrderMassCancelReport) HasUnderlyingSettlRateIndex() bool {
	return m.Has(tag.UnderlyingSettlRateIndex)
}

// HasUnderlyingSettlRateIndexLocation returns true if UnderlyingSettlRateIndexLocation is present, Tag 2285.
func (m OrderMassCancelReport) HasUnderlyingSettlRateIndexLocation() bool {
	return m.Has(tag.UnderlyingSettlRateIndexLocation)
}

// HasUnderlyingOptionExpirationDesc returns true if UnderlyingOptionExpirationDesc is present, Tag 2286.
func (m OrderMassCancelReport) HasUnderlyingOptionExpirationDesc() bool {
	return m.Has(tag.UnderlyingOptionExpirationDesc)
}

// HasEncodedUnderlyingOptionExpirationDescLen returns true if EncodedUnderlyingOptionExpirationDescLen is present, Tag 2287.
func (m OrderMassCancelReport) HasEncodedUnderlyingOptionExpirationDescLen() bool {
	return m.Has(tag.EncodedUnderlyingOptionExpirationDescLen)
}

// HasEncodedUnderlyingOptionExpirationDesc returns true if EncodedUnderlyingOptionExpirationDesc is present, Tag 2288.
func (m OrderMassCancelReport) HasEncodedUnderlyingOptionExpirationDesc() bool {
	return m.Has(tag.EncodedUnderlyingOptionExpirationDesc)
}

// HasUnderlyingSwapSubClass returns true if UnderlyingSwapSubClass is present, Tag 2289.
func (m OrderMassCancelReport) HasUnderlyingSwapSubClass() bool {
	return m.Has(tag.UnderlyingSwapSubClass)
}

// HasUnderlyingStrikeUnitOfMeasure returns true if UnderlyingStrikeUnitOfMeasure is present, Tag 2290.
func (m OrderMassCancelReport) HasUnderlyingStrikeUnitOfMeasure() bool {
	return m.Has(tag.UnderlyingStrikeUnitOfMeasure)
}

// HasUnderlyingStrikeIndex returns true if UnderlyingStrikeIndex is present, Tag 2291.
func (m OrderMassCancelReport) HasUnderlyingStrikeIndex() bool {
	return m.Has(tag.UnderlyingStrikeIndex)
}

// HasUnderlyingStrikeIndexSpread returns true if UnderlyingStrikeIndexSpread is present, Tag 2292.
func (m OrderMassCancelReport) HasUnderlyingStrikeIndexSpread() bool {
	return m.Has(tag.UnderlyingStrikeIndexSpread)
}

// HasUnderlyingValuationSource returns true if UnderlyingValuationSource is present, Tag 2293.
func (m OrderMassCancelReport) HasUnderlyingValuationSource() bool {
	return m.Has(tag.UnderlyingValuationSource)
}

// HasUnderlyingValuationReferenceModel returns true if UnderlyingValuationReferenceModel is present, Tag 2294.
func (m OrderMassCancelReport) HasUnderlyingValuationReferenceModel() bool {
	return m.Has(tag.UnderlyingValuationReferenceModel)
}

// HasUnderlyingStrategyType returns true if UnderlyingStrategyType is present, Tag 2295.
func (m OrderMassCancelReport) HasUnderlyingStrategyType() bool {
	return m.Has(tag.UnderlyingStrategyType)
}

// HasUnderlyingCommonPricingIndicator returns true if UnderlyingCommonPricingIndicator is present, Tag 2296.
func (m OrderMassCancelReport) HasUnderlyingCommonPricingIndicator() bool {
	return m.Has(tag.UnderlyingCommonPricingIndicator)
}

// HasUnderlyingSettlDisruptionProvision returns true if UnderlyingSettlDisruptionProvision is present, Tag 2297.
func (m OrderMassCancelReport) HasUnderlyingSettlDisruptionProvision() bool {
	return m.Has(tag.UnderlyingSettlDisruptionProvision)
}

// HasUnderlyingInstrumentRoundingDirection returns true if UnderlyingInstrumentRoundingDirection is present, Tag 2298.
func (m OrderMassCancelReport) HasUnderlyingInstrumentRoundingDirection() bool {
	return m.Has(tag.UnderlyingInstrumentRoundingDirection)
}

// HasUnderlyingInstrumentRoundingPrecision returns true if UnderlyingInstrumentRoundingPrecision is present, Tag 2299.
func (m OrderMassCancelReport) HasUnderlyingInstrumentRoundingPrecision() bool {
	return m.Has(tag.UnderlyingInstrumentRoundingPrecision)
}

// HasNoAssetAttributes returns true if NoAssetAttributes is present, Tag 2304.
func (m OrderMassCancelReport) HasNoAssetAttributes() bool {
	return m.Has(tag.NoAssetAttributes)
}

// HasNoUnderlyingAssetAttributes returns true if NoUnderlyingAssetAttributes is present, Tag 2312.
func (m OrderMassCancelReport) HasNoUnderlyingAssetAttributes() bool {
	return m.Has(tag.NoUnderlyingAssetAttributes)
}

// HasTradingUnitPeriodMultiplier returns true if TradingUnitPeriodMultiplier is present, Tag 2353.
func (m OrderMassCancelReport) HasTradingUnitPeriodMultiplier() bool {
	return m.Has(tag.TradingUnitPeriodMultiplier)
}

// HasUnderlyingTradingUnitPeriodMultiplier returns true if UnderlyingTradingUnitPeriodMultiplier is present, Tag 2363.
func (m OrderMassCancelReport) HasUnderlyingTradingUnitPeriodMultiplier() bool {
	return m.Has(tag.UnderlyingTradingUnitPeriodMultiplier)
}

// HasUnderlyingAssetGroup returns true if UnderlyingAssetGroup is present, Tag 2491.
func (m OrderMassCancelReport) HasUnderlyingAssetGroup() bool {
	return m.Has(tag.UnderlyingAssetGroup)
}

// HasLowExercisePriceOptionIndicator returns true if LowExercisePriceOptionIndicator is present, Tag 2574.
func (m OrderMassCancelReport) HasLowExercisePriceOptionIndicator() bool {
	return m.Has(tag.LowExercisePriceOptionIndicator)
}

// HasBlockTradeEligibilityIndicator returns true if BlockTradeEligibilityIndicator is present, Tag 2575.
func (m OrderMassCancelReport) HasBlockTradeEligibilityIndicator() bool {
	return m.Has(tag.BlockTradeEligibilityIndicator)
}

// HasInstrumentPricePrecision returns true if InstrumentPricePrecision is present, Tag 2576.
func (m OrderMassCancelReport) HasInstrumentPricePrecision() bool {
	return m.Has(tag.InstrumentPricePrecision)
}

// HasStrikePricePrecision returns true if StrikePricePrecision is present, Tag 2577.
func (m OrderMassCancelReport) HasStrikePricePrecision() bool {
	return m.Has(tag.StrikePricePrecision)
}

// HasOrigStrikePrice returns true if OrigStrikePrice is present, Tag 2578.
func (m OrderMassCancelReport) HasOrigStrikePrice() bool {
	return m.Has(tag.OrigStrikePrice)
}

// HasSettlSubMethod returns true if SettlSubMethod is present, Tag 2579.
func (m OrderMassCancelReport) HasSettlSubMethod() bool {
	return m.Has(tag.SettlSubMethod)
}

// HasStrikeIndexCurvePoint returns true if StrikeIndexCurvePoint is present, Tag 2600.
func (m OrderMassCancelReport) HasStrikeIndexCurvePoint() bool {
	return m.Has(tag.StrikeIndexCurvePoint)
}

// HasStrikeIndexQuote returns true if StrikeIndexQuote is present, Tag 2601.
func (m OrderMassCancelReport) HasStrikeIndexQuote() bool {
	return m.Has(tag.StrikeIndexQuote)
}

// HasExtraordinaryEventAdjustmentMethod returns true if ExtraordinaryEventAdjustmentMethod is present, Tag 2602.
func (m OrderMassCancelReport) HasExtraordinaryEventAdjustmentMethod() bool {
	return m.Has(tag.ExtraordinaryEventAdjustmentMethod)
}

// HasExchangeLookAlike returns true if ExchangeLookAlike is present, Tag 2603.
func (m OrderMassCancelReport) HasExchangeLookAlike() bool {
	return m.Has(tag.ExchangeLookAlike)
}

// HasUnderlyingNotional returns true if UnderlyingNotional is present, Tag 2614.
func (m OrderMassCancelReport) HasUnderlyingNotional() bool {
	return m.Has(tag.UnderlyingNotional)
}

// HasUnderlyingNotionalCurrency returns true if UnderlyingNotionalCurrency is present, Tag 2615.
func (m OrderMassCancelReport) HasUnderlyingNotionalCurrency() bool {
	return m.Has(tag.UnderlyingNotionalCurrency)
}

// HasUnderlyingNotionalDeterminationMethod returns true if UnderlyingNotionalDeterminationMethod is present, Tag 2616.
func (m OrderMassCancelReport) HasUnderlyingNotionalDeterminationMethod() bool {
	return m.Has(tag.UnderlyingNotionalDeterminationMethod)
}

// HasUnderlyingNotionalAdjustments returns true if UnderlyingNotionalAdjustments is present, Tag 2617.
func (m OrderMassCancelReport) HasUnderlyingNotionalAdjustments() bool {
	return m.Has(tag.UnderlyingNotionalAdjustments)
}

// HasUnderlyingNotionalXIDRef returns true if UnderlyingNotionalXIDRef is present, Tag 2619.
func (m OrderMassCancelReport) HasUnderlyingNotionalXIDRef() bool {
	return m.Has(tag.UnderlyingNotionalXIDRef)
}

// HasUnderlyingFutureID returns true if UnderlyingFutureID is present, Tag 2620.
func (m OrderMassCancelReport) HasUnderlyingFutureID() bool {
	return m.Has(tag.UnderlyingFutureID)
}

// HasUnderlyingFutureIDSource returns true if UnderlyingFutureIDSource is present, Tag 2621.
func (m OrderMassCancelReport) HasUnderlyingFutureIDSource() bool {
	return m.Has(tag.UnderlyingFutureIDSource)
}

// HasUnderlyingStrikeIndexCurvePoint returns true if UnderlyingStrikeIndexCurvePoint is present, Tag 2622.
func (m OrderMassCancelReport) HasUnderlyingStrikeIndexCurvePoint() bool {
	return m.Has(tag.UnderlyingStrikeIndexCurvePoint)
}

// HasUnderlyingStrikeIndexQuote returns true if UnderlyingStrikeIndexQuote is present, Tag 2623.
func (m OrderMassCancelReport) HasUnderlyingStrikeIndexQuote() bool {
	return m.Has(tag.UnderlyingStrikeIndexQuote)
}

// HasUnderlyingExtraordinaryEventAdjustmentMethod returns true if UnderlyingExtraordinaryEventAdjustmentMethod is present, Tag 2624.
func (m OrderMassCancelReport) HasUnderlyingExtraordinaryEventAdjustmentMethod() bool {
	return m.Has(tag.UnderlyingExtraordinaryEventAdjustmentMethod)
}

// HasUnderlyingExchangeLookAlike returns true if UnderlyingExchangeLookAlike is present, Tag 2625.
func (m OrderMassCancelReport) HasUnderlyingExchangeLookAlike() bool {
	return m.Has(tag.UnderlyingExchangeLookAlike)
}

// HasUnderlyingAverageVolumeLimitationPercentage returns true if UnderlyingAverageVolumeLimitationPercentage is present, Tag 2626.
func (m OrderMassCancelReport) HasUnderlyingAverageVolumeLimitationPercentage() bool {
	return m.Has(tag.UnderlyingAverageVolumeLimitationPercentage)
}

// HasUnderlyingAverageVolumeLimitationPeriodDays returns true if UnderlyingAverageVolumeLimitationPeriodDays is present, Tag 2627.
func (m OrderMassCancelReport) HasUnderlyingAverageVolumeLimitationPeriodDays() bool {
	return m.Has(tag.UnderlyingAverageVolumeLimitationPeriodDays)
}

// HasUnderlyingDepositoryReceiptIndicator returns true if UnderlyingDepositoryReceiptIndicator is present, Tag 2628.
func (m OrderMassCancelReport) HasUnderlyingDepositoryReceiptIndicator() bool {
	return m.Has(tag.UnderlyingDepositoryReceiptIndicator)
}

// HasUnderlyingOpenUnits returns true if UnderlyingOpenUnits is present, Tag 2629.
func (m OrderMassCancelReport) HasUnderlyingOpenUnits() bool {
	return m.Has(tag.UnderlyingOpenUnits)
}

// HasUnderlyingBasketDivisor returns true if UnderlyingBasketDivisor is present, Tag 2630.
func (m OrderMassCancelReport) HasUnderlyingBasketDivisor() bool {
	return m.Has(tag.UnderlyingBasketDivisor)
}

// HasUnderlyingInstrumentXID returns true if UnderlyingInstrumentXID is present, Tag 2631.
func (m OrderMassCancelReport) HasUnderlyingInstrumentXID() bool {
	return m.Has(tag.UnderlyingInstrumentXID)
}

// HasInTheMoneyCondition returns true if InTheMoneyCondition is present, Tag 2681.
func (m OrderMassCancelReport) HasInTheMoneyCondition() bool {
	return m.Has(tag.InTheMoneyCondition)
}

// HasUnderlyingInTheMoneyCondition returns true if UnderlyingInTheMoneyCondition is present, Tag 2683.
func (m OrderMassCancelReport) HasUnderlyingInTheMoneyCondition() bool {
	return m.Has(tag.UnderlyingInTheMoneyCondition)
}

// HasContraryInstructionEligibilityIndicator returns true if ContraryInstructionEligibilityIndicator is present, Tag 2685.
func (m OrderMassCancelReport) HasContraryInstructionEligibilityIndicator() bool {
	return m.Has(tag.ContraryInstructionEligibilityIndicator)
}

// HasUnderlyingContraryInstructionEligibilityIndicator returns true if UnderlyingContraryInstructionEligibilityIndicator is present, Tag 2687.
func (m OrderMassCancelReport) HasUnderlyingContraryInstructionEligibilityIndicator() bool {
	return m.Has(tag.UnderlyingContraryInstructionEligibilityIndicator)
}

// HasFinancialInstrumentFullName returns true if FinancialInstrumentFullName is present, Tag 2714.
func (m OrderMassCancelReport) HasFinancialInstrumentFullName() bool {
	return m.Has(tag.FinancialInstrumentFullName)
}

// HasEncodedFinancialInstrumentFullNameLen returns true if EncodedFinancialInstrumentFullNameLen is present, Tag 2715.
func (m OrderMassCancelReport) HasEncodedFinancialInstrumentFullNameLen() bool {
	return m.Has(tag.EncodedFinancialInstrumentFullNameLen)
}

// HasEncodedFinancialInstrumentFullName returns true if EncodedFinancialInstrumentFullName is present, Tag 2716.
func (m OrderMassCancelReport) HasEncodedFinancialInstrumentFullName() bool {
	return m.Has(tag.EncodedFinancialInstrumentFullName)
}

// HasUnderlyingFinancialInstrumentFullName returns true if UnderlyingFinancialInstrumentFullName is present, Tag 2720.
func (m OrderMassCancelReport) HasUnderlyingFinancialInstrumentFullName() bool {
	return m.Has(tag.UnderlyingFinancialInstrumentFullName)
}

// HasEncodedUnderlyingFinancialInstrumentFullNameLen returns true if EncodedUnderlyingFinancialInstrumentFullNameLen is present, Tag 2721.
func (m OrderMassCancelReport) HasEncodedUnderlyingFinancialInstrumentFullNameLen() bool {
	return m.Has(tag.EncodedUnderlyingFinancialInstrumentFullNameLen)
}

// HasEncodedUnderlyingFinancialInstrumentFullName returns true if EncodedUnderlyingFinancialInstrumentFullName is present, Tag 2722.
func (m OrderMassCancelReport) HasEncodedUnderlyingFinancialInstrumentFullName() bool {
	return m.Has(tag.EncodedUnderlyingFinancialInstrumentFullName)
}

// HasUnderlyingIndexCurveUnit returns true if UnderlyingIndexCurveUnit is present, Tag 2723.
func (m OrderMassCancelReport) HasUnderlyingIndexCurveUnit() bool {
	return m.Has(tag.UnderlyingIndexCurveUnit)
}

// HasUnderlyingIndexCurvePeriod returns true if UnderlyingIndexCurvePeriod is present, Tag 2724.
func (m OrderMassCancelReport) HasUnderlyingIndexCurvePeriod() bool {
	return m.Has(tag.UnderlyingIndexCurvePeriod)
}

// HasAssetSubType returns true if AssetSubType is present, Tag 2735.
func (m OrderMassCancelReport) HasAssetSubType() bool {
	return m.Has(tag.AssetSubType)
}

// HasFinancialInstrumentShortName returns true if FinancialInstrumentShortName is present, Tag 2737.
func (m OrderMassCancelReport) HasFinancialInstrumentShortName() bool {
	return m.Has(tag.FinancialInstrumentShortName)
}

// HasUnderlyingFinancialInstrumentShortName returns true if UnderlyingFinancialInstrumentShortName is present, Tag 2742.
func (m OrderMassCancelReport) HasUnderlyingFinancialInstrumentShortName() bool {
	return m.Has(tag.UnderlyingFinancialInstrumentShortName)
}

// HasUnderlyingAssetSubType returns true if UnderlyingAssetSubType is present, Tag 2744.
func (m OrderMassCancelReport) HasUnderlyingAssetSubType() bool {
	return m.Has(tag.UnderlyingAssetSubType)
}

// HasDeliveryRouteOrCharter returns true if DeliveryRouteOrCharter is present, Tag 2752.
func (m OrderMassCancelReport) HasDeliveryRouteOrCharter() bool {
	return m.Has(tag.DeliveryRouteOrCharter)
}

// HasReturnTrigger returns true if ReturnTrigger is present, Tag 2753.
func (m OrderMassCancelReport) HasReturnTrigger() bool {
	return m.Has(tag.ReturnTrigger)
}

// HasUnderlyingDeliveryRouteOrCharter returns true if UnderlyingDeliveryRouteOrCharter is present, Tag 2756.
func (m OrderMassCancelReport) HasUnderlyingDeliveryRouteOrCharter() bool {
	return m.Has(tag.UnderlyingDeliveryRouteOrCharter)
}

// HasUnderlyingReturnTrigger returns true if UnderlyingReturnTrigger is present, Tag 2757.
func (m OrderMassCancelReport) HasUnderlyingReturnTrigger() bool {
	return m.Has(tag.UnderlyingReturnTrigger)
}

// HasUnderlyingID returns true if UnderlyingID is present, Tag 2874.
func (m OrderMassCancelReport) HasUnderlyingID() bool {
	return m.Has(tag.UnderlyingID)
}

// HasCouponOtherDayCount returns true if CouponOtherDayCount is present, Tag 2879.
func (m OrderMassCancelReport) HasCouponOtherDayCount() bool {
	return m.Has(tag.CouponOtherDayCount)
}

// HasUnderlyingCouponOtherDayCount returns true if UnderlyingCouponOtherDayCount is present, Tag 2881.
func (m OrderMassCancelReport) HasUnderlyingCouponOtherDayCount() bool {
	return m.Has(tag.UnderlyingCouponOtherDayCount)
}

// HasUnderlyingAccruedInterestAmt returns true if UnderlyingAccruedInterestAmt is present, Tag 2885.
func (m OrderMassCancelReport) HasUnderlyingAccruedInterestAmt() bool {
	return m.Has(tag.UnderlyingAccruedInterestAmt)
}

// HasUnderlyingNumDaysInterest returns true if UnderlyingNumDaysInterest is present, Tag 2886.
func (m OrderMassCancelReport) HasUnderlyingNumDaysInterest() bool {
	return m.Has(tag.UnderlyingNumDaysInterest)
}

// HasUPICode returns true if UPICode is present, Tag 2891.
func (m OrderMassCancelReport) HasUPICode() bool {
	return m.Has(tag.UPICode)
}

// HasUnderlyingUPICode returns true if UnderlyingUPICode is present, Tag 2894.
func (m OrderMassCancelReport) HasUnderlyingUPICode() bool {
	return m.Has(tag.UnderlyingUPICode)
}

// HasNoAdditionalTerms returns true if NoAdditionalTerms is present, Tag 40019.
func (m OrderMassCancelReport) HasNoAdditionalTerms() bool {
	return m.Has(tag.NoAdditionalTerms)
}

// HasNoCashSettlTerms returns true if NoCashSettlTerms is present, Tag 40022.
func (m OrderMassCancelReport) HasNoCashSettlTerms() bool {
	return m.Has(tag.NoCashSettlTerms)
}

// HasNoStreams returns true if NoStreams is present, Tag 40049.
func (m OrderMassCancelReport) HasNoStreams() bool {
	return m.Has(tag.NoStreams)
}

// HasNoProvisions returns true if NoProvisions is present, Tag 40090.
func (m OrderMassCancelReport) HasNoProvisions() bool {
	return m.Has(tag.NoProvisions)
}

// HasNoProtectionTerms returns true if NoProtectionTerms is present, Tag 40181.
func (m OrderMassCancelReport) HasNoProtectionTerms() bool {
	return m.Has(tag.NoProtectionTerms)
}

// HasNoPhysicalSettlTerms returns true if NoPhysicalSettlTerms is present, Tag 40204.
func (m OrderMassCancelReport) HasNoPhysicalSettlTerms() bool {
	return m.Has(tag.NoPhysicalSettlTerms)
}

// HasNoBusinessCenters returns true if NoBusinessCenters is present, Tag 40278.
func (m OrderMassCancelReport) HasNoBusinessCenters() bool {
	return m.Has(tag.NoBusinessCenters)
}

// HasNoUnderlyingStreams returns true if NoUnderlyingStreams is present, Tag 40540.
func (m OrderMassCancelReport) HasNoUnderlyingStreams() bool {
	return m.Has(tag.NoUnderlyingStreams)
}

// HasBusinessDayConvention returns true if BusinessDayConvention is present, Tag 40921.
func (m OrderMassCancelReport) HasBusinessDayConvention() bool {
	return m.Has(tag.BusinessDayConvention)
}

// HasDateRollConvention returns true if DateRollConvention is present, Tag 40922.
func (m OrderMassCancelReport) HasDateRollConvention() bool {
	return m.Has(tag.DateRollConvention)
}

// HasNoUnderlyingBusinessCenters returns true if NoUnderlyingBusinessCenters is present, Tag 40962.
func (m OrderMassCancelReport) HasNoUnderlyingBusinessCenters() bool {
	return m.Has(tag.NoUnderlyingBusinessCenters)
}

// HasUnderlyingBusinessDayConvention returns true if UnderlyingBusinessDayConvention is present, Tag 40964.
func (m OrderMassCancelReport) HasUnderlyingBusinessDayConvention() bool {
	return m.Has(tag.UnderlyingBusinessDayConvention)
}

// HasUnderlyingDateRollConvention returns true if UnderlyingDateRollConvention is present, Tag 40965.
func (m OrderMassCancelReport) HasUnderlyingDateRollConvention() bool {
	return m.Has(tag.UnderlyingDateRollConvention)
}

// HasMarketDisruptionProvision returns true if MarketDisruptionProvision is present, Tag 41087.
func (m OrderMassCancelReport) HasMarketDisruptionProvision() bool {
	return m.Has(tag.MarketDisruptionProvision)
}

// HasMarketDisruptionFallbackProvision returns true if MarketDisruptionFallbackProvision is present, Tag 41088.
func (m OrderMassCancelReport) HasMarketDisruptionFallbackProvision() bool {
	return m.Has(tag.MarketDisruptionFallbackProvision)
}

// HasMarketDisruptionMaximumDays returns true if MarketDisruptionMaximumDays is present, Tag 41089.
func (m OrderMassCancelReport) HasMarketDisruptionMaximumDays() bool {
	return m.Has(tag.MarketDisruptionMaximumDays)
}

// HasMarketDisruptionMaterialityPercentage returns true if MarketDisruptionMaterialityPercentage is present, Tag 41090.
func (m OrderMassCancelReport) HasMarketDisruptionMaterialityPercentage() bool {
	return m.Has(tag.MarketDisruptionMaterialityPercentage)
}

// HasMarketDisruptionMinimumFuturesContracts returns true if MarketDisruptionMinimumFuturesContracts is present, Tag 41091.
func (m OrderMassCancelReport) HasMarketDisruptionMinimumFuturesContracts() bool {
	return m.Has(tag.MarketDisruptionMinimumFuturesContracts)
}

// HasNoMarketDisruptionEvents returns true if NoMarketDisruptionEvents is present, Tag 41092.
func (m OrderMassCancelReport) HasNoMarketDisruptionEvents() bool {
	return m.Has(tag.NoMarketDisruptionEvents)
}

// HasNoMarketDisruptionFallbacks returns true if NoMarketDisruptionFallbacks is present, Tag 41094.
func (m OrderMassCancelReport) HasNoMarketDisruptionFallbacks() bool {
	return m.Has(tag.NoMarketDisruptionFallbacks)
}

// HasNoMarketDisruptionFallbackReferencePrices returns true if NoMarketDisruptionFallbackReferencePrices is present, Tag 41096.
func (m OrderMassCancelReport) HasNoMarketDisruptionFallbackReferencePrices() bool {
	return m.Has(tag.NoMarketDisruptionFallbackReferencePrices)
}

// HasExerciseDesc returns true if ExerciseDesc is present, Tag 41106.
func (m OrderMassCancelReport) HasExerciseDesc() bool {
	return m.Has(tag.ExerciseDesc)
}

// HasEncodedExerciseDescLen returns true if EncodedExerciseDescLen is present, Tag 41107.
func (m OrderMassCancelReport) HasEncodedExerciseDescLen() bool {
	return m.Has(tag.EncodedExerciseDescLen)
}

// HasEncodedExerciseDesc returns true if EncodedExerciseDesc is present, Tag 41108.
func (m OrderMassCancelReport) HasEncodedExerciseDesc() bool {
	return m.Has(tag.EncodedExerciseDesc)
}

// HasAutomaticExerciseIndicator returns true if AutomaticExerciseIndicator is present, Tag 41109.
func (m OrderMassCancelReport) HasAutomaticExerciseIndicator() bool {
	return m.Has(tag.AutomaticExerciseIndicator)
}

// HasAutomaticExerciseThresholdRate returns true if AutomaticExerciseThresholdRate is present, Tag 41110.
func (m OrderMassCancelReport) HasAutomaticExerciseThresholdRate() bool {
	return m.Has(tag.AutomaticExerciseThresholdRate)
}

// HasExerciseConfirmationMethod returns true if ExerciseConfirmationMethod is present, Tag 41111.
func (m OrderMassCancelReport) HasExerciseConfirmationMethod() bool {
	return m.Has(tag.ExerciseConfirmationMethod)
}

// HasManualNoticeBusinessCenter returns true if ManualNoticeBusinessCenter is present, Tag 41112.
func (m OrderMassCancelReport) HasManualNoticeBusinessCenter() bool {
	return m.Has(tag.ManualNoticeBusinessCenter)
}

// HasFallbackExerciseIndicator returns true if FallbackExerciseIndicator is present, Tag 41113.
func (m OrderMassCancelReport) HasFallbackExerciseIndicator() bool {
	return m.Has(tag.FallbackExerciseIndicator)
}

// HasLimitedRightToConfirmIndicator returns true if LimitedRightToConfirmIndicator is present, Tag 41114.
func (m OrderMassCancelReport) HasLimitedRightToConfirmIndicator() bool {
	return m.Has(tag.LimitedRightToConfirmIndicator)
}

// HasExerciseSplitTicketIndicator returns true if ExerciseSplitTicketIndicator is present, Tag 41115.
func (m OrderMassCancelReport) HasExerciseSplitTicketIndicator() bool {
	return m.Has(tag.ExerciseSplitTicketIndicator)
}

// HasNoOptionExerciseBusinessCenters returns true if NoOptionExerciseBusinessCenters is present, Tag 41116.
func (m OrderMassCancelReport) HasNoOptionExerciseBusinessCenters() bool {
	return m.Has(tag.NoOptionExerciseBusinessCenters)
}

// HasOptionExerciseBusinessDayConvention returns true if OptionExerciseBusinessDayConvention is present, Tag 41118.
func (m OrderMassCancelReport) HasOptionExerciseBusinessDayConvention() bool {
	return m.Has(tag.OptionExerciseBusinessDayConvention)
}

// HasOptionExerciseEarliestDateOffsetDayType returns true if OptionExerciseEarliestDateOffsetDayType is present, Tag 41119.
func (m OrderMassCancelReport) HasOptionExerciseEarliestDateOffsetDayType() bool {
	return m.Has(tag.OptionExerciseEarliestDateOffsetDayType)
}

// HasOptionExerciseEarliestDateOffsetPeriod returns true if OptionExerciseEarliestDateOffsetPeriod is present, Tag 41120.
func (m OrderMassCancelReport) HasOptionExerciseEarliestDateOffsetPeriod() bool {
	return m.Has(tag.OptionExerciseEarliestDateOffsetPeriod)
}

// HasOptionExerciseEarliestDateOffsetUnit returns true if OptionExerciseEarliestDateOffsetUnit is present, Tag 41121.
func (m OrderMassCancelReport) HasOptionExerciseEarliestDateOffsetUnit() bool {
	return m.Has(tag.OptionExerciseEarliestDateOffsetUnit)
}

// HasOptionExerciseFrequencyPeriod returns true if OptionExerciseFrequencyPeriod is present, Tag 41122.
func (m OrderMassCancelReport) HasOptionExerciseFrequencyPeriod() bool {
	return m.Has(tag.OptionExerciseFrequencyPeriod)
}

// HasOptionExerciseFrequencyUnit returns true if OptionExerciseFrequencyUnit is present, Tag 41123.
func (m OrderMassCancelReport) HasOptionExerciseFrequencyUnit() bool {
	return m.Has(tag.OptionExerciseFrequencyUnit)
}

// HasOptionExerciseStartDateUnadjusted returns true if OptionExerciseStartDateUnadjusted is present, Tag 41124.
func (m OrderMassCancelReport) HasOptionExerciseStartDateUnadjusted() bool {
	return m.Has(tag.OptionExerciseStartDateUnadjusted)
}

// HasOptionExerciseStartDateRelativeTo returns true if OptionExerciseStartDateRelativeTo is present, Tag 41125.
func (m OrderMassCancelReport) HasOptionExerciseStartDateRelativeTo() bool {
	return m.Has(tag.OptionExerciseStartDateRelativeTo)
}

// HasOptionExerciseStartDateOffsetPeriod returns true if OptionExerciseStartDateOffsetPeriod is present, Tag 41126.
func (m OrderMassCancelReport) HasOptionExerciseStartDateOffsetPeriod() bool {
	return m.Has(tag.OptionExerciseStartDateOffsetPeriod)
}

// HasOptionExerciseStartDateOffsetUnit returns true if OptionExerciseStartDateOffsetUnit is present, Tag 41127.
func (m OrderMassCancelReport) HasOptionExerciseStartDateOffsetUnit() bool {
	return m.Has(tag.OptionExerciseStartDateOffsetUnit)
}

// HasOptionExerciseStartDateOffsetDayType returns true if OptionExerciseStartDateOffsetDayType is present, Tag 41128.
func (m OrderMassCancelReport) HasOptionExerciseStartDateOffsetDayType() bool {
	return m.Has(tag.OptionExerciseStartDateOffsetDayType)
}

// HasOptionExerciseStartDateAdjusted returns true if OptionExerciseStartDateAdjusted is present, Tag 41129.
func (m OrderMassCancelReport) HasOptionExerciseStartDateAdjusted() bool {
	return m.Has(tag.OptionExerciseStartDateAdjusted)
}

// HasOptionExerciseSkip returns true if OptionExerciseSkip is present, Tag 41130.
func (m OrderMassCancelReport) HasOptionExerciseSkip() bool {
	return m.Has(tag.OptionExerciseSkip)
}

// HasOptionExerciseNominationDeadline returns true if OptionExerciseNominationDeadline is present, Tag 41131.
func (m OrderMassCancelReport) HasOptionExerciseNominationDeadline() bool {
	return m.Has(tag.OptionExerciseNominationDeadline)
}

// HasOptionExerciseFirstDateUnadjusted returns true if OptionExerciseFirstDateUnadjusted is present, Tag 41132.
func (m OrderMassCancelReport) HasOptionExerciseFirstDateUnadjusted() bool {
	return m.Has(tag.OptionExerciseFirstDateUnadjusted)
}

// HasOptionExerciseLastDateUnadjusted returns true if OptionExerciseLastDateUnadjusted is present, Tag 41133.
func (m OrderMassCancelReport) HasOptionExerciseLastDateUnadjusted() bool {
	return m.Has(tag.OptionExerciseLastDateUnadjusted)
}

// HasOptionExerciseEarliestTime returns true if OptionExerciseEarliestTime is present, Tag 41134.
func (m OrderMassCancelReport) HasOptionExerciseEarliestTime() bool {
	return m.Has(tag.OptionExerciseEarliestTime)
}

// HasOptionExerciseLatestTime returns true if OptionExerciseLatestTime is present, Tag 41135.
func (m OrderMassCancelReport) HasOptionExerciseLatestTime() bool {
	return m.Has(tag.OptionExerciseLatestTime)
}

// HasOptionExerciseTimeBusinessCenter returns true if OptionExerciseTimeBusinessCenter is present, Tag 41136.
func (m OrderMassCancelReport) HasOptionExerciseTimeBusinessCenter() bool {
	return m.Has(tag.OptionExerciseTimeBusinessCenter)
}

// HasNoOptionExerciseDates returns true if NoOptionExerciseDates is present, Tag 41137.
func (m OrderMassCancelReport) HasNoOptionExerciseDates() bool {
	return m.Has(tag.NoOptionExerciseDates)
}

// HasNoOptionExerciseExpirationDateBusinessCenters returns true if NoOptionExerciseExpirationDateBusinessCenters is present, Tag 41140.
func (m OrderMassCancelReport) HasNoOptionExerciseExpirationDateBusinessCenters() bool {
	return m.Has(tag.NoOptionExerciseExpirationDateBusinessCenters)
}

// HasOptionExerciseExpirationDateBusinessDayConvention returns true if OptionExerciseExpirationDateBusinessDayConvention is present, Tag 41142.
func (m OrderMassCancelReport) HasOptionExerciseExpirationDateBusinessDayConvention() bool {
	return m.Has(tag.OptionExerciseExpirationDateBusinessDayConvention)
}

// HasOptionExerciseExpirationDateRelativeTo returns true if OptionExerciseExpirationDateRelativeTo is present, Tag 41143.
func (m OrderMassCancelReport) HasOptionExerciseExpirationDateRelativeTo() bool {
	return m.Has(tag.OptionExerciseExpirationDateRelativeTo)
}

// HasOptionExerciseExpirationDateOffsetPeriod returns true if OptionExerciseExpirationDateOffsetPeriod is present, Tag 41144.
func (m OrderMassCancelReport) HasOptionExerciseExpirationDateOffsetPeriod() bool {
	return m.Has(tag.OptionExerciseExpirationDateOffsetPeriod)
}

// HasOptionExerciseExpirationDateOffsetUnit returns true if OptionExerciseExpirationDateOffsetUnit is present, Tag 41145.
func (m OrderMassCancelReport) HasOptionExerciseExpirationDateOffsetUnit() bool {
	return m.Has(tag.OptionExerciseExpirationDateOffsetUnit)
}

// HasOptionExerciseExpirationFrequencyPeriod returns true if OptionExerciseExpirationFrequencyPeriod is present, Tag 41146.
func (m OrderMassCancelReport) HasOptionExerciseExpirationFrequencyPeriod() bool {
	return m.Has(tag.OptionExerciseExpirationFrequencyPeriod)
}

// HasOptionExerciseExpirationFrequencyUnit returns true if OptionExerciseExpirationFrequencyUnit is present, Tag 41147.
func (m OrderMassCancelReport) HasOptionExerciseExpirationFrequencyUnit() bool {
	return m.Has(tag.OptionExerciseExpirationFrequencyUnit)
}

// HasOptionExerciseExpirationRollConvention returns true if OptionExerciseExpirationRollConvention is present, Tag 41148.
func (m OrderMassCancelReport) HasOptionExerciseExpirationRollConvention() bool {
	return m.Has(tag.OptionExerciseExpirationRollConvention)
}

// HasOptionExerciseExpirationDateOffsetDayType returns true if OptionExerciseExpirationDateOffsetDayType is present, Tag 41149.
func (m OrderMassCancelReport) HasOptionExerciseExpirationDateOffsetDayType() bool {
	return m.Has(tag.OptionExerciseExpirationDateOffsetDayType)
}

// HasOptionExerciseExpirationTime returns true if OptionExerciseExpirationTime is present, Tag 41150.
func (m OrderMassCancelReport) HasOptionExerciseExpirationTime() bool {
	return m.Has(tag.OptionExerciseExpirationTime)
}

// HasOptionExerciseExpirationTimeBusinessCenter returns true if OptionExerciseExpirationTimeBusinessCenter is present, Tag 41151.
func (m OrderMassCancelReport) HasOptionExerciseExpirationTimeBusinessCenter() bool {
	return m.Has(tag.OptionExerciseExpirationTimeBusinessCenter)
}

// HasNoOptionExerciseExpirationDates returns true if NoOptionExerciseExpirationDates is present, Tag 41152.
func (m OrderMassCancelReport) HasNoOptionExerciseExpirationDates() bool {
	return m.Has(tag.NoOptionExerciseExpirationDates)
}

// HasNoPricingDateBusinessCenters returns true if NoPricingDateBusinessCenters is present, Tag 41230.
func (m OrderMassCancelReport) HasNoPricingDateBusinessCenters() bool {
	return m.Has(tag.NoPricingDateBusinessCenters)
}

// HasPricingDateUnadjusted returns true if PricingDateUnadjusted is present, Tag 41232.
func (m OrderMassCancelReport) HasPricingDateUnadjusted() bool {
	return m.Has(tag.PricingDateUnadjusted)
}

// HasPricingDateBusinessDayConvention returns true if PricingDateBusinessDayConvention is present, Tag 41233.
func (m OrderMassCancelReport) HasPricingDateBusinessDayConvention() bool {
	return m.Has(tag.PricingDateBusinessDayConvention)
}

// HasPricingDateAdjusted returns true if PricingDateAdjusted is present, Tag 41234.
func (m OrderMassCancelReport) HasPricingDateAdjusted() bool {
	return m.Has(tag.PricingDateAdjusted)
}

// HasPricingTime returns true if PricingTime is present, Tag 41235.
func (m OrderMassCancelReport) HasPricingTime() bool {
	return m.Has(tag.PricingTime)
}

// HasPricingTimeBusinessCenter returns true if PricingTimeBusinessCenter is present, Tag 41236.
func (m OrderMassCancelReport) HasPricingTimeBusinessCenter() bool {
	return m.Has(tag.PricingTimeBusinessCenter)
}

// HasUnderlyingProtectionTermXIDRef returns true if UnderlyingProtectionTermXIDRef is present, Tag 41314.
func (m OrderMassCancelReport) HasUnderlyingProtectionTermXIDRef() bool {
	return m.Has(tag.UnderlyingProtectionTermXIDRef)
}

// HasUnderlyingSettlTermXIDRef returns true if UnderlyingSettlTermXIDRef is present, Tag 41315.
func (m OrderMassCancelReport) HasUnderlyingSettlTermXIDRef() bool {
	return m.Has(tag.UnderlyingSettlTermXIDRef)
}

// HasUnderlyingExerciseDesc returns true if UnderlyingExerciseDesc is present, Tag 41810.
func (m OrderMassCancelReport) HasUnderlyingExerciseDesc() bool {
	return m.Has(tag.UnderlyingExerciseDesc)
}

// HasEncodedUnderlyingExerciseDescLen returns true if EncodedUnderlyingExerciseDescLen is present, Tag 41811.
func (m OrderMassCancelReport) HasEncodedUnderlyingExerciseDescLen() bool {
	return m.Has(tag.EncodedUnderlyingExerciseDescLen)
}

// HasEncodedUnderlyingExerciseDesc returns true if EncodedUnderlyingExerciseDesc is present, Tag 41812.
func (m OrderMassCancelReport) HasEncodedUnderlyingExerciseDesc() bool {
	return m.Has(tag.EncodedUnderlyingExerciseDesc)
}

// HasUnderlyingAutomaticExerciseIndicator returns true if UnderlyingAutomaticExerciseIndicator is present, Tag 41813.
func (m OrderMassCancelReport) HasUnderlyingAutomaticExerciseIndicator() bool {
	return m.Has(tag.UnderlyingAutomaticExerciseIndicator)
}

// HasUnderlyingAutomaticExerciseThresholdRate returns true if UnderlyingAutomaticExerciseThresholdRate is present, Tag 41814.
func (m OrderMassCancelReport) HasUnderlyingAutomaticExerciseThresholdRate() bool {
	return m.Has(tag.UnderlyingAutomaticExerciseThresholdRate)
}

// HasUnderlyingExerciseConfirmationMethod returns true if UnderlyingExerciseConfirmationMethod is present, Tag 41815.
func (m OrderMassCancelReport) HasUnderlyingExerciseConfirmationMethod() bool {
	return m.Has(tag.UnderlyingExerciseConfirmationMethod)
}

// HasUnderlyingManualNoticeBusinessCenter returns true if UnderlyingManualNoticeBusinessCenter is present, Tag 41816.
func (m OrderMassCancelReport) HasUnderlyingManualNoticeBusinessCenter() bool {
	return m.Has(tag.UnderlyingManualNoticeBusinessCenter)
}

// HasUnderlyingFallbackExerciseIndicator returns true if UnderlyingFallbackExerciseIndicator is present, Tag 41817.
func (m OrderMassCancelReport) HasUnderlyingFallbackExerciseIndicator() bool {
	return m.Has(tag.UnderlyingFallbackExerciseIndicator)
}

// HasUnderlyingLimitedRightToConfirmIndicator returns true if UnderlyingLimitedRightToConfirmIndicator is present, Tag 41818.
func (m OrderMassCancelReport) HasUnderlyingLimitedRightToConfirmIndicator() bool {
	return m.Has(tag.UnderlyingLimitedRightToConfirmIndicator)
}

// HasUnderlyingExerciseSplitTicketIndicator returns true if UnderlyingExerciseSplitTicketIndicator is present, Tag 41819.
func (m OrderMassCancelReport) HasUnderlyingExerciseSplitTicketIndicator() bool {
	return m.Has(tag.UnderlyingExerciseSplitTicketIndicator)
}

// HasNoUnderlyingOptionExerciseBusinessCenters returns true if NoUnderlyingOptionExerciseBusinessCenters is present, Tag 41820.
func (m OrderMassCancelReport) HasNoUnderlyingOptionExerciseBusinessCenters() bool {
	return m.Has(tag.NoUnderlyingOptionExerciseBusinessCenters)
}

// HasUnderlyingOptionExerciseBusinessDayConvention returns true if UnderlyingOptionExerciseBusinessDayConvention is present, Tag 41822.
func (m OrderMassCancelReport) HasUnderlyingOptionExerciseBusinessDayConvention() bool {
	return m.Has(tag.UnderlyingOptionExerciseBusinessDayConvention)
}

// HasUnderlyingOptionExerciseEarliestDateOffsetDayType returns true if UnderlyingOptionExerciseEarliestDateOffsetDayType is present, Tag 41823.
func (m OrderMassCancelReport) HasUnderlyingOptionExerciseEarliestDateOffsetDayType() bool {
	return m.Has(tag.UnderlyingOptionExerciseEarliestDateOffsetDayType)
}

// HasUnderlyingOptionExerciseEarliestDateOffsetPeriod returns true if UnderlyingOptionExerciseEarliestDateOffsetPeriod is present, Tag 41824.
func (m OrderMassCancelReport) HasUnderlyingOptionExerciseEarliestDateOffsetPeriod() bool {
	return m.Has(tag.UnderlyingOptionExerciseEarliestDateOffsetPeriod)
}

// HasUnderlyingOptionExerciseEarliestDateOffsetUnit returns true if UnderlyingOptionExerciseEarliestDateOffsetUnit is present, Tag 41825.
func (m OrderMassCancelReport) HasUnderlyingOptionExerciseEarliestDateOffsetUnit() bool {
	return m.Has(tag.UnderlyingOptionExerciseEarliestDateOffsetUnit)
}

// HasUnderlyingOptionExerciseFrequencyPeriod returns true if UnderlyingOptionExerciseFrequencyPeriod is present, Tag 41826.
func (m OrderMassCancelReport) HasUnderlyingOptionExerciseFrequencyPeriod() bool {
	return m.Has(tag.UnderlyingOptionExerciseFrequencyPeriod)
}

// HasUnderlyingOptionExerciseFrequencyUnit returns true if UnderlyingOptionExerciseFrequencyUnit is present, Tag 41827.
func (m OrderMassCancelReport) HasUnderlyingOptionExerciseFrequencyUnit() bool {
	return m.Has(tag.UnderlyingOptionExerciseFrequencyUnit)
}

// HasUnderlyingOptionExerciseStartDateUnadjusted returns true if UnderlyingOptionExerciseStartDateUnadjusted is present, Tag 41828.
func (m OrderMassCancelReport) HasUnderlyingOptionExerciseStartDateUnadjusted() bool {
	return m.Has(tag.UnderlyingOptionExerciseStartDateUnadjusted)
}

// HasUnderlyingOptionExerciseStartDateRelativeTo returns true if UnderlyingOptionExerciseStartDateRelativeTo is present, Tag 41829.
func (m OrderMassCancelReport) HasUnderlyingOptionExerciseStartDateRelativeTo() bool {
	return m.Has(tag.UnderlyingOptionExerciseStartDateRelativeTo)
}

// HasUnderlyingOptionExerciseStartDateOffsetPeriod returns true if UnderlyingOptionExerciseStartDateOffsetPeriod is present, Tag 41830.
func (m OrderMassCancelReport) HasUnderlyingOptionExerciseStartDateOffsetPeriod() bool {
	return m.Has(tag.UnderlyingOptionExerciseStartDateOffsetPeriod)
}

// HasUnderlyingOptionExerciseStartDateOffsetUnit returns true if UnderlyingOptionExerciseStartDateOffsetUnit is present, Tag 41831.
func (m OrderMassCancelReport) HasUnderlyingOptionExerciseStartDateOffsetUnit() bool {
	return m.Has(tag.UnderlyingOptionExerciseStartDateOffsetUnit)
}

// HasUnderlyingOptionExerciseStartDateOffsetDayType returns true if UnderlyingOptionExerciseStartDateOffsetDayType is present, Tag 41832.
func (m OrderMassCancelReport) HasUnderlyingOptionExerciseStartDateOffsetDayType() bool {
	return m.Has(tag.UnderlyingOptionExerciseStartDateOffsetDayType)
}

// HasUnderlyingOptionExerciseStartDateAdjusted returns true if UnderlyingOptionExerciseStartDateAdjusted is present, Tag 41833.
func (m OrderMassCancelReport) HasUnderlyingOptionExerciseStartDateAdjusted() bool {
	return m.Has(tag.UnderlyingOptionExerciseStartDateAdjusted)
}

// HasUnderlyingOptionExerciseSkip returns true if UnderlyingOptionExerciseSkip is present, Tag 41834.
func (m OrderMassCancelReport) HasUnderlyingOptionExerciseSkip() bool {
	return m.Has(tag.UnderlyingOptionExerciseSkip)
}

// HasUnderlyingOptionExerciseNominationDeadline returns true if UnderlyingOptionExerciseNominationDeadline is present, Tag 41835.
func (m OrderMassCancelReport) HasUnderlyingOptionExerciseNominationDeadline() bool {
	return m.Has(tag.UnderlyingOptionExerciseNominationDeadline)
}

// HasUnderlyingOptionExerciseFirstDateUnadjusted returns true if UnderlyingOptionExerciseFirstDateUnadjusted is present, Tag 41836.
func (m OrderMassCancelReport) HasUnderlyingOptionExerciseFirstDateUnadjusted() bool {
	return m.Has(tag.UnderlyingOptionExerciseFirstDateUnadjusted)
}

// HasUnderlyingOptionExerciseLastDateUnadjusted returns true if UnderlyingOptionExerciseLastDateUnadjusted is present, Tag 41837.
func (m OrderMassCancelReport) HasUnderlyingOptionExerciseLastDateUnadjusted() bool {
	return m.Has(tag.UnderlyingOptionExerciseLastDateUnadjusted)
}

// HasUnderlyingOptionExerciseEarliestTime returns true if UnderlyingOptionExerciseEarliestTime is present, Tag 41838.
func (m OrderMassCancelReport) HasUnderlyingOptionExerciseEarliestTime() bool {
	return m.Has(tag.UnderlyingOptionExerciseEarliestTime)
}

// HasUnderlyingOptionExerciseLatestTime returns true if UnderlyingOptionExerciseLatestTime is present, Tag 41839.
func (m OrderMassCancelReport) HasUnderlyingOptionExerciseLatestTime() bool {
	return m.Has(tag.UnderlyingOptionExerciseLatestTime)
}

// HasUnderlyingOptionExerciseTimeBusinessCenter returns true if UnderlyingOptionExerciseTimeBusinessCenter is present, Tag 41840.
func (m OrderMassCancelReport) HasUnderlyingOptionExerciseTimeBusinessCenter() bool {
	return m.Has(tag.UnderlyingOptionExerciseTimeBusinessCenter)
}

// HasNoUnderlyingOptionExerciseDates returns true if NoUnderlyingOptionExerciseDates is present, Tag 41841.
func (m OrderMassCancelReport) HasNoUnderlyingOptionExerciseDates() bool {
	return m.Has(tag.NoUnderlyingOptionExerciseDates)
}

// HasNoUnderlyingOptionExerciseExpirationDateBusinessCenters returns true if NoUnderlyingOptionExerciseExpirationDateBusinessCenters is present, Tag 41844.
func (m OrderMassCancelReport) HasNoUnderlyingOptionExerciseExpirationDateBusinessCenters() bool {
	return m.Has(tag.NoUnderlyingOptionExerciseExpirationDateBusinessCenters)
}

// HasUnderlyingOptionExerciseExpirationDateBusinessDayConvention returns true if UnderlyingOptionExerciseExpirationDateBusinessDayConvention is present, Tag 41846.
func (m OrderMassCancelReport) HasUnderlyingOptionExerciseExpirationDateBusinessDayConvention() bool {
	return m.Has(tag.UnderlyingOptionExerciseExpirationDateBusinessDayConvention)
}

// HasUnderlyingOptionExerciseExpirationDateRelativeTo returns true if UnderlyingOptionExerciseExpirationDateRelativeTo is present, Tag 41847.
func (m OrderMassCancelReport) HasUnderlyingOptionExerciseExpirationDateRelativeTo() bool {
	return m.Has(tag.UnderlyingOptionExerciseExpirationDateRelativeTo)
}

// HasUnderlyingOptionExerciseExpirationDateOffsetPeriod returns true if UnderlyingOptionExerciseExpirationDateOffsetPeriod is present, Tag 41848.
func (m OrderMassCancelReport) HasUnderlyingOptionExerciseExpirationDateOffsetPeriod() bool {
	return m.Has(tag.UnderlyingOptionExerciseExpirationDateOffsetPeriod)
}

// HasUnderlyingOptionExerciseExpirationDateOffsetUnit returns true if UnderlyingOptionExerciseExpirationDateOffsetUnit is present, Tag 41849.
func (m OrderMassCancelReport) HasUnderlyingOptionExerciseExpirationDateOffsetUnit() bool {
	return m.Has(tag.UnderlyingOptionExerciseExpirationDateOffsetUnit)
}

// HasUnderlyingOptionExerciseExpirationFrequencyPeriod returns true if UnderlyingOptionExerciseExpirationFrequencyPeriod is present, Tag 41850.
func (m OrderMassCancelReport) HasUnderlyingOptionExerciseExpirationFrequencyPeriod() bool {
	return m.Has(tag.UnderlyingOptionExerciseExpirationFrequencyPeriod)
}

// HasUnderlyingOptionExerciseExpirationFrequencyUnit returns true if UnderlyingOptionExerciseExpirationFrequencyUnit is present, Tag 41851.
func (m OrderMassCancelReport) HasUnderlyingOptionExerciseExpirationFrequencyUnit() bool {
	return m.Has(tag.UnderlyingOptionExerciseExpirationFrequencyUnit)
}

// HasUnderlyingOptionExerciseExpirationRollConvention returns true if UnderlyingOptionExerciseExpirationRollConvention is present, Tag 41852.
func (m OrderMassCancelReport) HasUnderlyingOptionExerciseExpirationRollConvention() bool {
	return m.Has(tag.UnderlyingOptionExerciseExpirationRollConvention)
}

// HasUnderlyingOptionExerciseExpirationDateOffsetDayType returns true if UnderlyingOptionExerciseExpirationDateOffsetDayType is present, Tag 41853.
func (m OrderMassCancelReport) HasUnderlyingOptionExerciseExpirationDateOffsetDayType() bool {
	return m.Has(tag.UnderlyingOptionExerciseExpirationDateOffsetDayType)
}

// HasUnderlyingOptionExerciseExpirationTime returns true if UnderlyingOptionExerciseExpirationTime is present, Tag 41854.
func (m OrderMassCancelReport) HasUnderlyingOptionExerciseExpirationTime() bool {
	return m.Has(tag.UnderlyingOptionExerciseExpirationTime)
}

// HasUnderlyingOptionExerciseExpirationTimeBusinessCenter returns true if UnderlyingOptionExerciseExpirationTimeBusinessCenter is present, Tag 41855.
func (m OrderMassCancelReport) HasUnderlyingOptionExerciseExpirationTimeBusinessCenter() bool {
	return m.Has(tag.UnderlyingOptionExerciseExpirationTimeBusinessCenter)
}

// HasNoUnderlyingOptionExerciseExpirationDates returns true if NoUnderlyingOptionExerciseExpirationDates is present, Tag 41856.
func (m OrderMassCancelReport) HasNoUnderlyingOptionExerciseExpirationDates() bool {
	return m.Has(tag.NoUnderlyingOptionExerciseExpirationDates)
}

// HasUnderlyingMarketDisruptionProvision returns true if UnderlyingMarketDisruptionProvision is present, Tag 41859.
func (m OrderMassCancelReport) HasUnderlyingMarketDisruptionProvision() bool {
	return m.Has(tag.UnderlyingMarketDisruptionProvision)
}

// HasUnderlyingMarketDisruptionFallbackProvision returns true if UnderlyingMarketDisruptionFallbackProvision is present, Tag 41860.
func (m OrderMassCancelReport) HasUnderlyingMarketDisruptionFallbackProvision() bool {
	return m.Has(tag.UnderlyingMarketDisruptionFallbackProvision)
}

// HasUnderlyingMarketDisruptionMaximumDays returns true if UnderlyingMarketDisruptionMaximumDays is present, Tag 41861.
func (m OrderMassCancelReport) HasUnderlyingMarketDisruptionMaximumDays() bool {
	return m.Has(tag.UnderlyingMarketDisruptionMaximumDays)
}

// HasUnderlyingMarketDisruptionMaterialityPercentage returns true if UnderlyingMarketDisruptionMaterialityPercentage is present, Tag 41862.
func (m OrderMassCancelReport) HasUnderlyingMarketDisruptionMaterialityPercentage() bool {
	return m.Has(tag.UnderlyingMarketDisruptionMaterialityPercentage)
}

// HasUnderlyingMarketDisruptionMinimumFuturesContracts returns true if UnderlyingMarketDisruptionMinimumFuturesContracts is present, Tag 41863.
func (m OrderMassCancelReport) HasUnderlyingMarketDisruptionMinimumFuturesContracts() bool {
	return m.Has(tag.UnderlyingMarketDisruptionMinimumFuturesContracts)
}

// HasNoUnderlyingMarketDisruptionEvents returns true if NoUnderlyingMarketDisruptionEvents is present, Tag 41864.
func (m OrderMassCancelReport) HasNoUnderlyingMarketDisruptionEvents() bool {
	return m.Has(tag.NoUnderlyingMarketDisruptionEvents)
}

// HasNoUnderlyingMarketDisruptionFallbacks returns true if NoUnderlyingMarketDisruptionFallbacks is present, Tag 41866.
func (m OrderMassCancelReport) HasNoUnderlyingMarketDisruptionFallbacks() bool {
	return m.Has(tag.NoUnderlyingMarketDisruptionFallbacks)
}

// HasNoUnderlyingMarketDisruptionFallbackReferencePrices returns true if NoUnderlyingMarketDisruptionFallbackReferencePrices is present, Tag 41868.
func (m OrderMassCancelReport) HasNoUnderlyingMarketDisruptionFallbackReferencePrices() bool {
	return m.Has(tag.NoUnderlyingMarketDisruptionFallbackReferencePrices)
}

// HasNoUnderlyingPricingDateBusinessCenters returns true if NoUnderlyingPricingDateBusinessCenters is present, Tag 41947.
func (m OrderMassCancelReport) HasNoUnderlyingPricingDateBusinessCenters() bool {
	return m.Has(tag.NoUnderlyingPricingDateBusinessCenters)
}

// HasUnderlyingPricingDateUnadjusted returns true if UnderlyingPricingDateUnadjusted is present, Tag 41949.
func (m OrderMassCancelReport) HasUnderlyingPricingDateUnadjusted() bool {
	return m.Has(tag.UnderlyingPricingDateUnadjusted)
}

// HasUnderlyingPricingDateBusinessDayConvention returns true if UnderlyingPricingDateBusinessDayConvention is present, Tag 41950.
func (m OrderMassCancelReport) HasUnderlyingPricingDateBusinessDayConvention() bool {
	return m.Has(tag.UnderlyingPricingDateBusinessDayConvention)
}

// HasUnderlyingPricingDateAdjusted returns true if UnderlyingPricingDateAdjusted is present, Tag 41951.
func (m OrderMassCancelReport) HasUnderlyingPricingDateAdjusted() bool {
	return m.Has(tag.UnderlyingPricingDateAdjusted)
}

// HasUnderlyingPricingTime returns true if UnderlyingPricingTime is present, Tag 41952.
func (m OrderMassCancelReport) HasUnderlyingPricingTime() bool {
	return m.Has(tag.UnderlyingPricingTime)
}

// HasUnderlyingPricingTimeBusinessCenter returns true if UnderlyingPricingTimeBusinessCenter is present, Tag 41953.
func (m OrderMassCancelReport) HasUnderlyingPricingTimeBusinessCenter() bool {
	return m.Has(tag.UnderlyingPricingTimeBusinessCenter)
}

// HasNoUnderlyingAdditionalTerms returns true if NoUnderlyingAdditionalTerms is present, Tag 42036.
func (m OrderMassCancelReport) HasNoUnderlyingAdditionalTerms() bool {
	return m.Has(tag.NoUnderlyingAdditionalTerms)
}

// HasNoUnderlyingCashSettlTerms returns true if NoUnderlyingCashSettlTerms is present, Tag 42041.
func (m OrderMassCancelReport) HasNoUnderlyingCashSettlTerms() bool {
	return m.Has(tag.NoUnderlyingCashSettlTerms)
}

// HasNoUnderlyingPhysicalSettlTerms returns true if NoUnderlyingPhysicalSettlTerms is present, Tag 42060.
func (m OrderMassCancelReport) HasNoUnderlyingPhysicalSettlTerms() bool {
	return m.Has(tag.NoUnderlyingPhysicalSettlTerms)
}

// HasNoUnderlyingProtectionTerms returns true if NoUnderlyingProtectionTerms is present, Tag 42068.
func (m OrderMassCancelReport) HasNoUnderlyingProtectionTerms() bool {
	return m.Has(tag.NoUnderlyingProtectionTerms)
}

// HasNoUnderlyingProvisions returns true if NoUnderlyingProvisions is present, Tag 42149.
func (m OrderMassCancelReport) HasNoUnderlyingProvisions() bool {
	return m.Has(tag.NoUnderlyingProvisions)
}

// HasNoExtraordinaryEvents returns true if NoExtraordinaryEvents is present, Tag 42296.
func (m OrderMassCancelReport) HasNoExtraordinaryEvents() bool {
	return m.Has(tag.NoExtraordinaryEvents)
}

// HasSettlMethodElectingPartySide returns true if SettlMethodElectingPartySide is present, Tag 42590.
func (m OrderMassCancelReport) HasSettlMethodElectingPartySide() bool {
	return m.Has(tag.SettlMethodElectingPartySide)
}

// HasMakeWholeDate returns true if MakeWholeDate is present, Tag 42591.
func (m OrderMassCancelReport) HasMakeWholeDate() bool {
	return m.Has(tag.MakeWholeDate)
}

// HasMakeWholeAmount returns true if MakeWholeAmount is present, Tag 42592.
func (m OrderMassCancelReport) HasMakeWholeAmount() bool {
	return m.Has(tag.MakeWholeAmount)
}

// HasMakeWholeBenchmarkCurveName returns true if MakeWholeBenchmarkCurveName is present, Tag 42593.
func (m OrderMassCancelReport) HasMakeWholeBenchmarkCurveName() bool {
	return m.Has(tag.MakeWholeBenchmarkCurveName)
}

// HasMakeWholeBenchmarkCurvePoint returns true if MakeWholeBenchmarkCurvePoint is present, Tag 42594.
func (m OrderMassCancelReport) HasMakeWholeBenchmarkCurvePoint() bool {
	return m.Has(tag.MakeWholeBenchmarkCurvePoint)
}

// HasMakeWholeRecallSpread returns true if MakeWholeRecallSpread is present, Tag 42595.
func (m OrderMassCancelReport) HasMakeWholeRecallSpread() bool {
	return m.Has(tag.MakeWholeRecallSpread)
}

// HasMakeWholeBenchmarkQuote returns true if MakeWholeBenchmarkQuote is present, Tag 42596.
func (m OrderMassCancelReport) HasMakeWholeBenchmarkQuote() bool {
	return m.Has(tag.MakeWholeBenchmarkQuote)
}

// HasMakeWholeInterpolationMethod returns true if MakeWholeInterpolationMethod is present, Tag 42597.
func (m OrderMassCancelReport) HasMakeWholeInterpolationMethod() bool {
	return m.Has(tag.MakeWholeInterpolationMethod)
}

// HasNoSettlMethodElectionDateBusinessCenters returns true if NoSettlMethodElectionDateBusinessCenters is present, Tag 42775.
func (m OrderMassCancelReport) HasNoSettlMethodElectionDateBusinessCenters() bool {
	return m.Has(tag.NoSettlMethodElectionDateBusinessCenters)
}

// HasSettlMethodElectionDateUnadjusted returns true if SettlMethodElectionDateUnadjusted is present, Tag 42777.
func (m OrderMassCancelReport) HasSettlMethodElectionDateUnadjusted() bool {
	return m.Has(tag.SettlMethodElectionDateUnadjusted)
}

// HasSettlMethodElectionDateBusinessDayConvention returns true if SettlMethodElectionDateBusinessDayConvention is present, Tag 42778.
func (m OrderMassCancelReport) HasSettlMethodElectionDateBusinessDayConvention() bool {
	return m.Has(tag.SettlMethodElectionDateBusinessDayConvention)
}

// HasSettlMethodElectionDateRelativeTo returns true if SettlMethodElectionDateRelativeTo is present, Tag 42779.
func (m OrderMassCancelReport) HasSettlMethodElectionDateRelativeTo() bool {
	return m.Has(tag.SettlMethodElectionDateRelativeTo)
}

// HasSettlMethodElectionDateOffsetPeriod returns true if SettlMethodElectionDateOffsetPeriod is present, Tag 42780.
func (m OrderMassCancelReport) HasSettlMethodElectionDateOffsetPeriod() bool {
	return m.Has(tag.SettlMethodElectionDateOffsetPeriod)
}

// HasSettlMethodElectionDateOffsetUnit returns true if SettlMethodElectionDateOffsetUnit is present, Tag 42781.
func (m OrderMassCancelReport) HasSettlMethodElectionDateOffsetUnit() bool {
	return m.Has(tag.SettlMethodElectionDateOffsetUnit)
}

// HasSettlMethodElectionDateOffsetDayType returns true if SettlMethodElectionDateOffsetDayType is present, Tag 42782.
func (m OrderMassCancelReport) HasSettlMethodElectionDateOffsetDayType() bool {
	return m.Has(tag.SettlMethodElectionDateOffsetDayType)
}

// HasSettlMethodElectionDateAdjusted returns true if SettlMethodElectionDateAdjusted is present, Tag 42783.
func (m OrderMassCancelReport) HasSettlMethodElectionDateAdjusted() bool {
	return m.Has(tag.SettlMethodElectionDateAdjusted)
}

// HasNoUnderlyingDividendPayments returns true if NoUnderlyingDividendPayments is present, Tag 42855.
func (m OrderMassCancelReport) HasNoUnderlyingDividendPayments() bool {
	return m.Has(tag.NoUnderlyingDividendPayments)
}

// HasUnderlyingDividendPayoutRatio returns true if UnderlyingDividendPayoutRatio is present, Tag 42860.
func (m OrderMassCancelReport) HasUnderlyingDividendPayoutRatio() bool {
	return m.Has(tag.UnderlyingDividendPayoutRatio)
}

// HasUnderlyingDividendPayoutConditions returns true if UnderlyingDividendPayoutConditions is present, Tag 42861.
func (m OrderMassCancelReport) HasUnderlyingDividendPayoutConditions() bool {
	return m.Has(tag.UnderlyingDividendPayoutConditions)
}

// HasNoUnderlyingExtraordinaryEvents returns true if NoUnderlyingExtraordinaryEvents is present, Tag 42884.
func (m OrderMassCancelReport) HasNoUnderlyingExtraordinaryEvents() bool {
	return m.Has(tag.NoUnderlyingExtraordinaryEvents)
}

// HasUnderlyingSettlMethodElectingPartySide returns true if UnderlyingSettlMethodElectingPartySide is present, Tag 42887.
func (m OrderMassCancelReport) HasUnderlyingSettlMethodElectingPartySide() bool {
	return m.Has(tag.UnderlyingSettlMethodElectingPartySide)
}

// HasUnderlyingMakeWholeDate returns true if UnderlyingMakeWholeDate is present, Tag 42888.
func (m OrderMassCancelReport) HasUnderlyingMakeWholeDate() bool {
	return m.Has(tag.UnderlyingMakeWholeDate)
}

// HasUnderlyingMakeWholeAmount returns true if UnderlyingMakeWholeAmount is present, Tag 42889.
func (m OrderMassCancelReport) HasUnderlyingMakeWholeAmount() bool {
	return m.Has(tag.UnderlyingMakeWholeAmount)
}

// HasUnderlyingMakeWholeBenchmarkCurveName returns true if UnderlyingMakeWholeBenchmarkCurveName is present, Tag 42890.
func (m OrderMassCancelReport) HasUnderlyingMakeWholeBenchmarkCurveName() bool {
	return m.Has(tag.UnderlyingMakeWholeBenchmarkCurveName)
}

// HasUnderlyingMakeWholeBenchmarkCurvePoint returns true if UnderlyingMakeWholeBenchmarkCurvePoint is present, Tag 42891.
func (m OrderMassCancelReport) HasUnderlyingMakeWholeBenchmarkCurvePoint() bool {
	return m.Has(tag.UnderlyingMakeWholeBenchmarkCurvePoint)
}

// HasUnderlyingMakeWholeRecallSpread returns true if UnderlyingMakeWholeRecallSpread is present, Tag 42892.
func (m OrderMassCancelReport) HasUnderlyingMakeWholeRecallSpread() bool {
	return m.Has(tag.UnderlyingMakeWholeRecallSpread)
}

// HasUnderlyingMakeWholeBenchmarkQuote returns true if UnderlyingMakeWholeBenchmarkQuote is present, Tag 42893.
func (m OrderMassCancelReport) HasUnderlyingMakeWholeBenchmarkQuote() bool {
	return m.Has(tag.UnderlyingMakeWholeBenchmarkQuote)
}

// HasUnderlyingMakeWholeInterpolationMethod returns true if UnderlyingMakeWholeInterpolationMethod is present, Tag 42894.
func (m OrderMassCancelReport) HasUnderlyingMakeWholeInterpolationMethod() bool {
	return m.Has(tag.UnderlyingMakeWholeInterpolationMethod)
}

// HasUnderlyingRateSpreadInitialValue returns true if UnderlyingRateSpreadInitialValue is present, Tag 43004.
func (m OrderMassCancelReport) HasUnderlyingRateSpreadInitialValue() bool {
	return m.Has(tag.UnderlyingRateSpreadInitialValue)
}

// HasNoUnderlyingRateSpreadSteps returns true if NoUnderlyingRateSpreadSteps is present, Tag 43005.
func (m OrderMassCancelReport) HasNoUnderlyingRateSpreadSteps() bool {
	return m.Has(tag.NoUnderlyingRateSpreadSteps)
}

// HasNoUnderlyingSettlMethodElectionDateBusinessCenters returns true if NoUnderlyingSettlMethodElectionDateBusinessCenters is present, Tag 43074.
func (m OrderMassCancelReport) HasNoUnderlyingSettlMethodElectionDateBusinessCenters() bool {
	return m.Has(tag.NoUnderlyingSettlMethodElectionDateBusinessCenters)
}

// HasUnderlyingSettlMethodElectionDateUnadjusted returns true if UnderlyingSettlMethodElectionDateUnadjusted is present, Tag 43076.
func (m OrderMassCancelReport) HasUnderlyingSettlMethodElectionDateUnadjusted() bool {
	return m.Has(tag.UnderlyingSettlMethodElectionDateUnadjusted)
}

// HasUnderlyingSettlMethodElectionDateBusinessDayConvention returns true if UnderlyingSettlMethodElectionDateBusinessDayConvention is present, Tag 43077.
func (m OrderMassCancelReport) HasUnderlyingSettlMethodElectionDateBusinessDayConvention() bool {
	return m.Has(tag.UnderlyingSettlMethodElectionDateBusinessDayConvention)
}

// HasUnderlyingSettlMethodElectionDateRelativeTo returns true if UnderlyingSettlMethodElectionDateRelativeTo is present, Tag 43078.
func (m OrderMassCancelReport) HasUnderlyingSettlMethodElectionDateRelativeTo() bool {
	return m.Has(tag.UnderlyingSettlMethodElectionDateRelativeTo)
}

// HasUnderlyingSettlMethodElectionDateOffsetPeriod returns true if UnderlyingSettlMethodElectionDateOffsetPeriod is present, Tag 43079.
func (m OrderMassCancelReport) HasUnderlyingSettlMethodElectionDateOffsetPeriod() bool {
	return m.Has(tag.UnderlyingSettlMethodElectionDateOffsetPeriod)
}

// HasUnderlyingSettlMethodElectionDateOffsetUnit returns true if UnderlyingSettlMethodElectionDateOffsetUnit is present, Tag 43080.
func (m OrderMassCancelReport) HasUnderlyingSettlMethodElectionDateOffsetUnit() bool {
	return m.Has(tag.UnderlyingSettlMethodElectionDateOffsetUnit)
}

// HasUnderlyingSettlMethodElectionDateOffsetDayType returns true if UnderlyingSettlMethodElectionDateOffsetDayType is present, Tag 43081.
func (m OrderMassCancelReport) HasUnderlyingSettlMethodElectionDateOffsetDayType() bool {
	return m.Has(tag.UnderlyingSettlMethodElectionDateOffsetDayType)
}

// HasUnderlyingSettlMethodElectionDateAdjusted returns true if UnderlyingSettlMethodElectionDateAdjusted is present, Tag 43082.
func (m OrderMassCancelReport) HasUnderlyingSettlMethodElectionDateAdjusted() bool {
	return m.Has(tag.UnderlyingSettlMethodElectionDateAdjusted)
}

// NoPartyIDs is a repeating group element, Tag 453.
type NoPartyIDs struct {
	*quickfix.Group
}

// SetPartyID sets PartyID, Tag 448.
func (m NoPartyIDs) SetPartyID(v string) {
	m.Set(field.NewPartyID(v))
}

// SetPartyIDSource sets PartyIDSource, Tag 447.
func (m NoPartyIDs) SetPartyIDSource(v enum.PartyIDSource) {
	m.Set(field.NewPartyIDSource(v))
}

// SetPartyRole sets PartyRole, Tag 452.
func (m NoPartyIDs) SetPartyRole(v enum.PartyRole) {
	m.Set(field.NewPartyRole(v))
}

// SetNoPartySubIDs sets NoPartySubIDs, Tag 802.
func (m NoPartyIDs) SetNoPartySubIDs(f NoPartySubIDsRepeatingGroup) {
	m.SetGroup(f)
}

// SetPartyRoleQualifier sets PartyRoleQualifier, Tag 2376.
func (m NoPartyIDs) SetPartyRoleQualifier(v int) {
	m.Set(field.NewPartyRoleQualifier(v))
}

// GetPartyID gets PartyID, Tag 448.
func (m NoPartyIDs) GetPartyID() (v string, err quickfix.MessageRejectError) {
	var f field.PartyIDField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPartyIDSource gets PartyIDSource, Tag 447.
func (m NoPartyIDs) GetPartyIDSource() (v enum.PartyIDSource, err quickfix.MessageRejectError) {
	var f field.PartyIDSourceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPartyRole gets PartyRole, Tag 452.
func (m NoPartyIDs) GetPartyRole() (v enum.PartyRole, err quickfix.MessageRejectError) {
	var f field.PartyRoleField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoPartySubIDs gets NoPartySubIDs, Tag 802.
func (m NoPartyIDs) GetNoPartySubIDs() (NoPartySubIDsRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoPartySubIDsRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetPartyRoleQualifier gets PartyRoleQualifier, Tag 2376.
func (m NoPartyIDs) GetPartyRoleQualifier() (v int, err quickfix.MessageRejectError) {
	var f field.PartyRoleQualifierField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasPartyID returns true if PartyID is present, Tag 448.
func (m NoPartyIDs) HasPartyID() bool {
	return m.Has(tag.PartyID)
}

// HasPartyIDSource returns true if PartyIDSource is present, Tag 447.
func (m NoPartyIDs) HasPartyIDSource() bool {
	return m.Has(tag.PartyIDSource)
}

// HasPartyRole returns true if PartyRole is present, Tag 452.
func (m NoPartyIDs) HasPartyRole() bool {
	return m.Has(tag.PartyRole)
}

// HasNoPartySubIDs returns true if NoPartySubIDs is present, Tag 802.
func (m NoPartyIDs) HasNoPartySubIDs() bool {
	return m.Has(tag.NoPartySubIDs)
}

// HasPartyRoleQualifier returns true if PartyRoleQualifier is present, Tag 2376.
func (m NoPartyIDs) HasPartyRoleQualifier() bool {
	return m.Has(tag.PartyRoleQualifier)
}

// NoPartySubIDs is a repeating group element, Tag 802.
type NoPartySubIDs struct {
	*quickfix.Group
}

// SetPartySubID sets PartySubID, Tag 523.
func (m NoPartySubIDs) SetPartySubID(v string) {
	m.Set(field.NewPartySubID(v))
}

// SetPartySubIDType sets PartySubIDType, Tag 803.
func (m NoPartySubIDs) SetPartySubIDType(v enum.PartySubIDType) {
	m.Set(field.NewPartySubIDType(v))
}

// GetPartySubID gets PartySubID, Tag 523.
func (m NoPartySubIDs) GetPartySubID() (v string, err quickfix.MessageRejectError) {
	var f field.PartySubIDField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPartySubIDType gets PartySubIDType, Tag 803.
func (m NoPartySubIDs) GetPartySubIDType() (v enum.PartySubIDType, err quickfix.MessageRejectError) {
	var f field.PartySubIDTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasPartySubID returns true if PartySubID is present, Tag 523.
func (m NoPartySubIDs) HasPartySubID() bool {
	return m.Has(tag.PartySubID)
}

// HasPartySubIDType returns true if PartySubIDType is present, Tag 803.
func (m NoPartySubIDs) HasPartySubIDType() bool {
	return m.Has(tag.PartySubIDType)
}

// NoPartySubIDsRepeatingGroup is a repeating group, Tag 802.
type NoPartySubIDsRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoPartySubIDsRepeatingGroup returns an initialized, NoPartySubIDsRepeatingGroup.
func NewNoPartySubIDsRepeatingGroup() NoPartySubIDsRepeatingGroup {
	return NoPartySubIDsRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoPartySubIDs,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.PartySubID),
				quickfix.GroupElement(tag.PartySubIDType),
			},
		),
	}
}

// Add create and append a new NoPartySubIDs to this group.
func (m NoPartySubIDsRepeatingGroup) Add() NoPartySubIDs {
	g := m.RepeatingGroup.Add()
	return NoPartySubIDs{g}
}

// Get returns the ith NoPartySubIDs in the NoPartySubIDsRepeatinGroup.
func (m NoPartySubIDsRepeatingGroup) Get(i int) NoPartySubIDs {
	return NoPartySubIDs{m.RepeatingGroup.Get(i)}
}

// NoPartyIDsRepeatingGroup is a repeating group, Tag 453.
type NoPartyIDsRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoPartyIDsRepeatingGroup returns an initialized, NoPartyIDsRepeatingGroup.
func NewNoPartyIDsRepeatingGroup() NoPartyIDsRepeatingGroup {
	return NoPartyIDsRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoPartyIDs,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.PartyID),
				quickfix.GroupElement(tag.PartyIDSource),
				quickfix.GroupElement(tag.PartyRole),
				NewNoPartySubIDsRepeatingGroup(),
				quickfix.GroupElement(tag.PartyRoleQualifier),
			},
		),
	}
}

// Add create and append a new NoPartyIDs to this group.
func (m NoPartyIDsRepeatingGroup) Add() NoPartyIDs {
	g := m.RepeatingGroup.Add()
	return NoPartyIDs{g}
}

// Get returns the ith NoPartyIDs in the NoPartyIDsRepeatinGroup.
func (m NoPartyIDsRepeatingGroup) Get(i int) NoPartyIDs {
	return NoPartyIDs{m.RepeatingGroup.Get(i)}
}

// NoSecurityAltID is a repeating group element, Tag 454.
type NoSecurityAltID struct {
	*quickfix.Group
}

// SetSecurityAltID sets SecurityAltID, Tag 455.
func (m NoSecurityAltID) SetSecurityAltID(v string) {
	m.Set(field.NewSecurityAltID(v))
}

// SetSecurityAltIDSource sets SecurityAltIDSource, Tag 456.
func (m NoSecurityAltID) SetSecurityAltIDSource(v string) {
	m.Set(field.NewSecurityAltIDSource(v))
}

// GetSecurityAltID gets SecurityAltID, Tag 455.
func (m NoSecurityAltID) GetSecurityAltID() (v string, err quickfix.MessageRejectError) {
	var f field.SecurityAltIDField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetSecurityAltIDSource gets SecurityAltIDSource, Tag 456.
func (m NoSecurityAltID) GetSecurityAltIDSource() (v string, err quickfix.MessageRejectError) {
	var f field.SecurityAltIDSourceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasSecurityAltID returns true if SecurityAltID is present, Tag 455.
func (m NoSecurityAltID) HasSecurityAltID() bool {
	return m.Has(tag.SecurityAltID)
}

// HasSecurityAltIDSource returns true if SecurityAltIDSource is present, Tag 456.
func (m NoSecurityAltID) HasSecurityAltIDSource() bool {
	return m.Has(tag.SecurityAltIDSource)
}

// NoSecurityAltIDRepeatingGroup is a repeating group, Tag 454.
type NoSecurityAltIDRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoSecurityAltIDRepeatingGroup returns an initialized, NoSecurityAltIDRepeatingGroup.
func NewNoSecurityAltIDRepeatingGroup() NoSecurityAltIDRepeatingGroup {
	return NoSecurityAltIDRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoSecurityAltID,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.SecurityAltID),
				quickfix.GroupElement(tag.SecurityAltIDSource),
			},
		),
	}
}

// Add create and append a new NoSecurityAltID to this group.
func (m NoSecurityAltIDRepeatingGroup) Add() NoSecurityAltID {
	g := m.RepeatingGroup.Add()
	return NoSecurityAltID{g}
}

// Get returns the ith NoSecurityAltID in the NoSecurityAltIDRepeatinGroup.
func (m NoSecurityAltIDRepeatingGroup) Get(i int) NoSecurityAltID {
	return NoSecurityAltID{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingSecurityAltID is a repeating group element, Tag 457.
type NoUnderlyingSecurityAltID struct {
	*quickfix.Group
}

// SetUnderlyingSecurityAltID sets UnderlyingSecurityAltID, Tag 458.
func (m NoUnderlyingSecurityAltID) SetUnderlyingSecurityAltID(v string) {
	m.Set(field.NewUnderlyingSecurityAltID(v))
}

// SetUnderlyingSecurityAltIDSource sets UnderlyingSecurityAltIDSource, Tag 459.
func (m NoUnderlyingSecurityAltID) SetUnderlyingSecurityAltIDSource(v string) {
	m.Set(field.NewUnderlyingSecurityAltIDSource(v))
}

// GetUnderlyingSecurityAltID gets UnderlyingSecurityAltID, Tag 458.
func (m NoUnderlyingSecurityAltID) GetUnderlyingSecurityAltID() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingSecurityAltIDField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingSecurityAltIDSource gets UnderlyingSecurityAltIDSource, Tag 459.
func (m NoUnderlyingSecurityAltID) GetUnderlyingSecurityAltIDSource() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingSecurityAltIDSourceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingSecurityAltID returns true if UnderlyingSecurityAltID is present, Tag 458.
func (m NoUnderlyingSecurityAltID) HasUnderlyingSecurityAltID() bool {
	return m.Has(tag.UnderlyingSecurityAltID)
}

// HasUnderlyingSecurityAltIDSource returns true if UnderlyingSecurityAltIDSource is present, Tag 459.
func (m NoUnderlyingSecurityAltID) HasUnderlyingSecurityAltIDSource() bool {
	return m.Has(tag.UnderlyingSecurityAltIDSource)
}

// NoUnderlyingSecurityAltIDRepeatingGroup is a repeating group, Tag 457.
type NoUnderlyingSecurityAltIDRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingSecurityAltIDRepeatingGroup returns an initialized, NoUnderlyingSecurityAltIDRepeatingGroup.
func NewNoUnderlyingSecurityAltIDRepeatingGroup() NoUnderlyingSecurityAltIDRepeatingGroup {
	return NoUnderlyingSecurityAltIDRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingSecurityAltID,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingSecurityAltID),
				quickfix.GroupElement(tag.UnderlyingSecurityAltIDSource),
			},
		),
	}
}

// Add create and append a new NoUnderlyingSecurityAltID to this group.
func (m NoUnderlyingSecurityAltIDRepeatingGroup) Add() NoUnderlyingSecurityAltID {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingSecurityAltID{g}
}

// Get returns the ith NoUnderlyingSecurityAltID in the NoUnderlyingSecurityAltIDRepeatinGroup.
func (m NoUnderlyingSecurityAltIDRepeatingGroup) Get(i int) NoUnderlyingSecurityAltID {
	return NoUnderlyingSecurityAltID{m.RepeatingGroup.Get(i)}
}

// NoAffectedOrders is a repeating group element, Tag 534.
type NoAffectedOrders struct {
	*quickfix.Group
}

// SetAffectedOrderID sets AffectedOrderID, Tag 535.
func (m NoAffectedOrders) SetAffectedOrderID(v string) {
	m.Set(field.NewAffectedOrderID(v))
}

// SetAffectedSecondaryOrderID sets AffectedSecondaryOrderID, Tag 536.
func (m NoAffectedOrders) SetAffectedSecondaryOrderID(v string) {
	m.Set(field.NewAffectedSecondaryOrderID(v))
}

// SetAffectedOrigClOrdID sets AffectedOrigClOrdID, Tag 1824.
func (m NoAffectedOrders) SetAffectedOrigClOrdID(v string) {
	m.Set(field.NewAffectedOrigClOrdID(v))
}

// GetAffectedOrderID gets AffectedOrderID, Tag 535.
func (m NoAffectedOrders) GetAffectedOrderID() (v string, err quickfix.MessageRejectError) {
	var f field.AffectedOrderIDField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetAffectedSecondaryOrderID gets AffectedSecondaryOrderID, Tag 536.
func (m NoAffectedOrders) GetAffectedSecondaryOrderID() (v string, err quickfix.MessageRejectError) {
	var f field.AffectedSecondaryOrderIDField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetAffectedOrigClOrdID gets AffectedOrigClOrdID, Tag 1824.
func (m NoAffectedOrders) GetAffectedOrigClOrdID() (v string, err quickfix.MessageRejectError) {
	var f field.AffectedOrigClOrdIDField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasAffectedOrderID returns true if AffectedOrderID is present, Tag 535.
func (m NoAffectedOrders) HasAffectedOrderID() bool {
	return m.Has(tag.AffectedOrderID)
}

// HasAffectedSecondaryOrderID returns true if AffectedSecondaryOrderID is present, Tag 536.
func (m NoAffectedOrders) HasAffectedSecondaryOrderID() bool {
	return m.Has(tag.AffectedSecondaryOrderID)
}

// HasAffectedOrigClOrdID returns true if AffectedOrigClOrdID is present, Tag 1824.
func (m NoAffectedOrders) HasAffectedOrigClOrdID() bool {
	return m.Has(tag.AffectedOrigClOrdID)
}

// NoAffectedOrdersRepeatingGroup is a repeating group, Tag 534.
type NoAffectedOrdersRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoAffectedOrdersRepeatingGroup returns an initialized, NoAffectedOrdersRepeatingGroup.
func NewNoAffectedOrdersRepeatingGroup() NoAffectedOrdersRepeatingGroup {
	return NoAffectedOrdersRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoAffectedOrders,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.AffectedOrderID),
				quickfix.GroupElement(tag.AffectedSecondaryOrderID),
				quickfix.GroupElement(tag.AffectedOrigClOrdID),
			},
		),
	}
}

// Add create and append a new NoAffectedOrders to this group.
func (m NoAffectedOrdersRepeatingGroup) Add() NoAffectedOrders {
	g := m.RepeatingGroup.Add()
	return NoAffectedOrders{g}
}

// Get returns the ith NoAffectedOrders in the NoAffectedOrdersRepeatinGroup.
func (m NoAffectedOrdersRepeatingGroup) Get(i int) NoAffectedOrders {
	return NoAffectedOrders{m.RepeatingGroup.Get(i)}
}

// NoEvents is a repeating group element, Tag 864.
type NoEvents struct {
	*quickfix.Group
}

// SetEventType sets EventType, Tag 865.
func (m NoEvents) SetEventType(v enum.EventType) {
	m.Set(field.NewEventType(v))
}

// SetEventDate sets EventDate, Tag 866.
func (m NoEvents) SetEventDate(v string) {
	m.Set(field.NewEventDate(v))
}

// SetEventTime sets EventTime, Tag 1145.
func (m NoEvents) SetEventTime(v time.Time) {
	m.Set(field.NewEventTime(v))
}

// SetEventPx sets EventPx, Tag 867.
func (m NoEvents) SetEventPx(value decimal.Decimal, scale int32) {
	m.Set(field.NewEventPx(value, scale))
}

// SetEventText sets EventText, Tag 868.
func (m NoEvents) SetEventText(v string) {
	m.Set(field.NewEventText(v))
}

// SetEventTimeUnit sets EventTimeUnit, Tag 1827.
func (m NoEvents) SetEventTimeUnit(v enum.EventTimeUnit) {
	m.Set(field.NewEventTimeUnit(v))
}

// SetEventTimePeriod sets EventTimePeriod, Tag 1826.
func (m NoEvents) SetEventTimePeriod(v int) {
	m.Set(field.NewEventTimePeriod(v))
}

// SetEventMonthYear sets EventMonthYear, Tag 2340.
func (m NoEvents) SetEventMonthYear(v string) {
	m.Set(field.NewEventMonthYear(v))
}

// SetEncodedEventTextLen sets EncodedEventTextLen, Tag 1578.
func (m NoEvents) SetEncodedEventTextLen(v int) {
	m.Set(field.NewEncodedEventTextLen(v))
}

// SetEncodedEventText sets EncodedEventText, Tag 1579.
func (m NoEvents) SetEncodedEventText(v string) {
	m.Set(field.NewEncodedEventText(v))
}

// GetEventType gets EventType, Tag 865.
func (m NoEvents) GetEventType() (v enum.EventType, err quickfix.MessageRejectError) {
	var f field.EventTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetEventDate gets EventDate, Tag 866.
func (m NoEvents) GetEventDate() (v string, err quickfix.MessageRejectError) {
	var f field.EventDateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetEventTime gets EventTime, Tag 1145.
func (m NoEvents) GetEventTime() (v time.Time, err quickfix.MessageRejectError) {
	var f field.EventTimeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetEventPx gets EventPx, Tag 867.
func (m NoEvents) GetEventPx() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.EventPxField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetEventText gets EventText, Tag 868.
func (m NoEvents) GetEventText() (v string, err quickfix.MessageRejectError) {
	var f field.EventTextField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetEventTimeUnit gets EventTimeUnit, Tag 1827.
func (m NoEvents) GetEventTimeUnit() (v enum.EventTimeUnit, err quickfix.MessageRejectError) {
	var f field.EventTimeUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetEventTimePeriod gets EventTimePeriod, Tag 1826.
func (m NoEvents) GetEventTimePeriod() (v int, err quickfix.MessageRejectError) {
	var f field.EventTimePeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetEventMonthYear gets EventMonthYear, Tag 2340.
func (m NoEvents) GetEventMonthYear() (v string, err quickfix.MessageRejectError) {
	var f field.EventMonthYearField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetEncodedEventTextLen gets EncodedEventTextLen, Tag 1578.
func (m NoEvents) GetEncodedEventTextLen() (v int, err quickfix.MessageRejectError) {
	var f field.EncodedEventTextLenField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetEncodedEventText gets EncodedEventText, Tag 1579.
func (m NoEvents) GetEncodedEventText() (v string, err quickfix.MessageRejectError) {
	var f field.EncodedEventTextField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasEventType returns true if EventType is present, Tag 865.
func (m NoEvents) HasEventType() bool {
	return m.Has(tag.EventType)
}

// HasEventDate returns true if EventDate is present, Tag 866.
func (m NoEvents) HasEventDate() bool {
	return m.Has(tag.EventDate)
}

// HasEventTime returns true if EventTime is present, Tag 1145.
func (m NoEvents) HasEventTime() bool {
	return m.Has(tag.EventTime)
}

// HasEventPx returns true if EventPx is present, Tag 867.
func (m NoEvents) HasEventPx() bool {
	return m.Has(tag.EventPx)
}

// HasEventText returns true if EventText is present, Tag 868.
func (m NoEvents) HasEventText() bool {
	return m.Has(tag.EventText)
}

// HasEventTimeUnit returns true if EventTimeUnit is present, Tag 1827.
func (m NoEvents) HasEventTimeUnit() bool {
	return m.Has(tag.EventTimeUnit)
}

// HasEventTimePeriod returns true if EventTimePeriod is present, Tag 1826.
func (m NoEvents) HasEventTimePeriod() bool {
	return m.Has(tag.EventTimePeriod)
}

// HasEventMonthYear returns true if EventMonthYear is present, Tag 2340.
func (m NoEvents) HasEventMonthYear() bool {
	return m.Has(tag.EventMonthYear)
}

// HasEncodedEventTextLen returns true if EncodedEventTextLen is present, Tag 1578.
func (m NoEvents) HasEncodedEventTextLen() bool {
	return m.Has(tag.EncodedEventTextLen)
}

// HasEncodedEventText returns true if EncodedEventText is present, Tag 1579.
func (m NoEvents) HasEncodedEventText() bool {
	return m.Has(tag.EncodedEventText)
}

// NoEventsRepeatingGroup is a repeating group, Tag 864.
type NoEventsRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoEventsRepeatingGroup returns an initialized, NoEventsRepeatingGroup.
func NewNoEventsRepeatingGroup() NoEventsRepeatingGroup {
	return NoEventsRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoEvents,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.EventType),
				quickfix.GroupElement(tag.EventDate),
				quickfix.GroupElement(tag.EventTime),
				quickfix.GroupElement(tag.EventPx),
				quickfix.GroupElement(tag.EventText),
				quickfix.GroupElement(tag.EventTimeUnit),
				quickfix.GroupElement(tag.EventTimePeriod),
				quickfix.GroupElement(tag.EventMonthYear),
				quickfix.GroupElement(tag.EncodedEventTextLen),
				quickfix.GroupElement(tag.EncodedEventText),
			},
		),
	}
}

// Add create and append a new NoEvents to this group.
func (m NoEventsRepeatingGroup) Add() NoEvents {
	g := m.RepeatingGroup.Add()
	return NoEvents{g}
}

// Get returns the ith NoEvents in the NoEventsRepeatinGroup.
func (m NoEventsRepeatingGroup) Get(i int) NoEvents {
	return NoEvents{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingStips is a repeating group element, Tag 887.
type NoUnderlyingStips struct {
	*quickfix.Group
}

// SetUnderlyingStipType sets UnderlyingStipType, Tag 888.
func (m NoUnderlyingStips) SetUnderlyingStipType(v string) {
	m.Set(field.NewUnderlyingStipType(v))
}

// SetUnderlyingStipValue sets UnderlyingStipValue, Tag 889.
func (m NoUnderlyingStips) SetUnderlyingStipValue(v string) {
	m.Set(field.NewUnderlyingStipValue(v))
}

// GetUnderlyingStipType gets UnderlyingStipType, Tag 888.
func (m NoUnderlyingStips) GetUnderlyingStipType() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingStipTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStipValue gets UnderlyingStipValue, Tag 889.
func (m NoUnderlyingStips) GetUnderlyingStipValue() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingStipValueField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingStipType returns true if UnderlyingStipType is present, Tag 888.
func (m NoUnderlyingStips) HasUnderlyingStipType() bool {
	return m.Has(tag.UnderlyingStipType)
}

// HasUnderlyingStipValue returns true if UnderlyingStipValue is present, Tag 889.
func (m NoUnderlyingStips) HasUnderlyingStipValue() bool {
	return m.Has(tag.UnderlyingStipValue)
}

// NoUnderlyingStipsRepeatingGroup is a repeating group, Tag 887.
type NoUnderlyingStipsRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingStipsRepeatingGroup returns an initialized, NoUnderlyingStipsRepeatingGroup.
func NewNoUnderlyingStipsRepeatingGroup() NoUnderlyingStipsRepeatingGroup {
	return NoUnderlyingStipsRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingStips,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingStipType),
				quickfix.GroupElement(tag.UnderlyingStipValue),
			},
		),
	}
}

// Add create and append a new NoUnderlyingStips to this group.
func (m NoUnderlyingStipsRepeatingGroup) Add() NoUnderlyingStips {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingStips{g}
}

// Get returns the ith NoUnderlyingStips in the NoUnderlyingStipsRepeatinGroup.
func (m NoUnderlyingStipsRepeatingGroup) Get(i int) NoUnderlyingStips {
	return NoUnderlyingStips{m.RepeatingGroup.Get(i)}
}

// NoInstrumentParties is a repeating group element, Tag 1018.
type NoInstrumentParties struct {
	*quickfix.Group
}

// SetInstrumentPartyID sets InstrumentPartyID, Tag 1019.
func (m NoInstrumentParties) SetInstrumentPartyID(v string) {
	m.Set(field.NewInstrumentPartyID(v))
}

// SetInstrumentPartyIDSource sets InstrumentPartyIDSource, Tag 1050.
func (m NoInstrumentParties) SetInstrumentPartyIDSource(v string) {
	m.Set(field.NewInstrumentPartyIDSource(v))
}

// SetInstrumentPartyRole sets InstrumentPartyRole, Tag 1051.
func (m NoInstrumentParties) SetInstrumentPartyRole(v int) {
	m.Set(field.NewInstrumentPartyRole(v))
}

// SetNoInstrumentPartySubIDs sets NoInstrumentPartySubIDs, Tag 1052.
func (m NoInstrumentParties) SetNoInstrumentPartySubIDs(f NoInstrumentPartySubIDsRepeatingGroup) {
	m.SetGroup(f)
}

// SetInstrumentPartyRoleQualifier sets InstrumentPartyRoleQualifier, Tag 2378.
func (m NoInstrumentParties) SetInstrumentPartyRoleQualifier(v int) {
	m.Set(field.NewInstrumentPartyRoleQualifier(v))
}

// GetInstrumentPartyID gets InstrumentPartyID, Tag 1019.
func (m NoInstrumentParties) GetInstrumentPartyID() (v string, err quickfix.MessageRejectError) {
	var f field.InstrumentPartyIDField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetInstrumentPartyIDSource gets InstrumentPartyIDSource, Tag 1050.
func (m NoInstrumentParties) GetInstrumentPartyIDSource() (v string, err quickfix.MessageRejectError) {
	var f field.InstrumentPartyIDSourceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetInstrumentPartyRole gets InstrumentPartyRole, Tag 1051.
func (m NoInstrumentParties) GetInstrumentPartyRole() (v int, err quickfix.MessageRejectError) {
	var f field.InstrumentPartyRoleField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoInstrumentPartySubIDs gets NoInstrumentPartySubIDs, Tag 1052.
func (m NoInstrumentParties) GetNoInstrumentPartySubIDs() (NoInstrumentPartySubIDsRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoInstrumentPartySubIDsRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetInstrumentPartyRoleQualifier gets InstrumentPartyRoleQualifier, Tag 2378.
func (m NoInstrumentParties) GetInstrumentPartyRoleQualifier() (v int, err quickfix.MessageRejectError) {
	var f field.InstrumentPartyRoleQualifierField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasInstrumentPartyID returns true if InstrumentPartyID is present, Tag 1019.
func (m NoInstrumentParties) HasInstrumentPartyID() bool {
	return m.Has(tag.InstrumentPartyID)
}

// HasInstrumentPartyIDSource returns true if InstrumentPartyIDSource is present, Tag 1050.
func (m NoInstrumentParties) HasInstrumentPartyIDSource() bool {
	return m.Has(tag.InstrumentPartyIDSource)
}

// HasInstrumentPartyRole returns true if InstrumentPartyRole is present, Tag 1051.
func (m NoInstrumentParties) HasInstrumentPartyRole() bool {
	return m.Has(tag.InstrumentPartyRole)
}

// HasNoInstrumentPartySubIDs returns true if NoInstrumentPartySubIDs is present, Tag 1052.
func (m NoInstrumentParties) HasNoInstrumentPartySubIDs() bool {
	return m.Has(tag.NoInstrumentPartySubIDs)
}

// HasInstrumentPartyRoleQualifier returns true if InstrumentPartyRoleQualifier is present, Tag 2378.
func (m NoInstrumentParties) HasInstrumentPartyRoleQualifier() bool {
	return m.Has(tag.InstrumentPartyRoleQualifier)
}

// NoInstrumentPartySubIDs is a repeating group element, Tag 1052.
type NoInstrumentPartySubIDs struct {
	*quickfix.Group
}

// SetInstrumentPartySubID sets InstrumentPartySubID, Tag 1053.
func (m NoInstrumentPartySubIDs) SetInstrumentPartySubID(v string) {
	m.Set(field.NewInstrumentPartySubID(v))
}

// SetInstrumentPartySubIDType sets InstrumentPartySubIDType, Tag 1054.
func (m NoInstrumentPartySubIDs) SetInstrumentPartySubIDType(v int) {
	m.Set(field.NewInstrumentPartySubIDType(v))
}

// GetInstrumentPartySubID gets InstrumentPartySubID, Tag 1053.
func (m NoInstrumentPartySubIDs) GetInstrumentPartySubID() (v string, err quickfix.MessageRejectError) {
	var f field.InstrumentPartySubIDField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetInstrumentPartySubIDType gets InstrumentPartySubIDType, Tag 1054.
func (m NoInstrumentPartySubIDs) GetInstrumentPartySubIDType() (v int, err quickfix.MessageRejectError) {
	var f field.InstrumentPartySubIDTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasInstrumentPartySubID returns true if InstrumentPartySubID is present, Tag 1053.
func (m NoInstrumentPartySubIDs) HasInstrumentPartySubID() bool {
	return m.Has(tag.InstrumentPartySubID)
}

// HasInstrumentPartySubIDType returns true if InstrumentPartySubIDType is present, Tag 1054.
func (m NoInstrumentPartySubIDs) HasInstrumentPartySubIDType() bool {
	return m.Has(tag.InstrumentPartySubIDType)
}

// NoInstrumentPartySubIDsRepeatingGroup is a repeating group, Tag 1052.
type NoInstrumentPartySubIDsRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoInstrumentPartySubIDsRepeatingGroup returns an initialized, NoInstrumentPartySubIDsRepeatingGroup.
func NewNoInstrumentPartySubIDsRepeatingGroup() NoInstrumentPartySubIDsRepeatingGroup {
	return NoInstrumentPartySubIDsRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoInstrumentPartySubIDs,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.InstrumentPartySubID),
				quickfix.GroupElement(tag.InstrumentPartySubIDType),
			},
		),
	}
}

// Add create and append a new NoInstrumentPartySubIDs to this group.
func (m NoInstrumentPartySubIDsRepeatingGroup) Add() NoInstrumentPartySubIDs {
	g := m.RepeatingGroup.Add()
	return NoInstrumentPartySubIDs{g}
}

// Get returns the ith NoInstrumentPartySubIDs in the NoInstrumentPartySubIDsRepeatinGroup.
func (m NoInstrumentPartySubIDsRepeatingGroup) Get(i int) NoInstrumentPartySubIDs {
	return NoInstrumentPartySubIDs{m.RepeatingGroup.Get(i)}
}

// NoInstrumentPartiesRepeatingGroup is a repeating group, Tag 1018.
type NoInstrumentPartiesRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoInstrumentPartiesRepeatingGroup returns an initialized, NoInstrumentPartiesRepeatingGroup.
func NewNoInstrumentPartiesRepeatingGroup() NoInstrumentPartiesRepeatingGroup {
	return NoInstrumentPartiesRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoInstrumentParties,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.InstrumentPartyID),
				quickfix.GroupElement(tag.InstrumentPartyIDSource),
				quickfix.GroupElement(tag.InstrumentPartyRole),
				NewNoInstrumentPartySubIDsRepeatingGroup(),
				quickfix.GroupElement(tag.InstrumentPartyRoleQualifier),
			},
		),
	}
}

// Add create and append a new NoInstrumentParties to this group.
func (m NoInstrumentPartiesRepeatingGroup) Add() NoInstrumentParties {
	g := m.RepeatingGroup.Add()
	return NoInstrumentParties{g}
}

// Get returns the ith NoInstrumentParties in the NoInstrumentPartiesRepeatinGroup.
func (m NoInstrumentPartiesRepeatingGroup) Get(i int) NoInstrumentParties {
	return NoInstrumentParties{m.RepeatingGroup.Get(i)}
}

// NoUndlyInstrumentParties is a repeating group element, Tag 1058.
type NoUndlyInstrumentParties struct {
	*quickfix.Group
}

// SetUnderlyingInstrumentPartyID sets UnderlyingInstrumentPartyID, Tag 1059.
func (m NoUndlyInstrumentParties) SetUnderlyingInstrumentPartyID(v string) {
	m.Set(field.NewUnderlyingInstrumentPartyID(v))
}

// SetUnderlyingInstrumentPartyIDSource sets UnderlyingInstrumentPartyIDSource, Tag 1060.
func (m NoUndlyInstrumentParties) SetUnderlyingInstrumentPartyIDSource(v string) {
	m.Set(field.NewUnderlyingInstrumentPartyIDSource(v))
}

// SetUnderlyingInstrumentPartyRole sets UnderlyingInstrumentPartyRole, Tag 1061.
func (m NoUndlyInstrumentParties) SetUnderlyingInstrumentPartyRole(v int) {
	m.Set(field.NewUnderlyingInstrumentPartyRole(v))
}

// SetNoUndlyInstrumentPartySubIDs sets NoUndlyInstrumentPartySubIDs, Tag 1062.
func (m NoUndlyInstrumentParties) SetNoUndlyInstrumentPartySubIDs(f NoUndlyInstrumentPartySubIDsRepeatingGroup) {
	m.SetGroup(f)
}

// SetUnderlyingInstrumentPartyRoleQualifier sets UnderlyingInstrumentPartyRoleQualifier, Tag 2391.
func (m NoUndlyInstrumentParties) SetUnderlyingInstrumentPartyRoleQualifier(v int) {
	m.Set(field.NewUnderlyingInstrumentPartyRoleQualifier(v))
}

// GetUnderlyingInstrumentPartyID gets UnderlyingInstrumentPartyID, Tag 1059.
func (m NoUndlyInstrumentParties) GetUnderlyingInstrumentPartyID() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingInstrumentPartyIDField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingInstrumentPartyIDSource gets UnderlyingInstrumentPartyIDSource, Tag 1060.
func (m NoUndlyInstrumentParties) GetUnderlyingInstrumentPartyIDSource() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingInstrumentPartyIDSourceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingInstrumentPartyRole gets UnderlyingInstrumentPartyRole, Tag 1061.
func (m NoUndlyInstrumentParties) GetUnderlyingInstrumentPartyRole() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingInstrumentPartyRoleField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUndlyInstrumentPartySubIDs gets NoUndlyInstrumentPartySubIDs, Tag 1062.
func (m NoUndlyInstrumentParties) GetNoUndlyInstrumentPartySubIDs() (NoUndlyInstrumentPartySubIDsRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUndlyInstrumentPartySubIDsRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetUnderlyingInstrumentPartyRoleQualifier gets UnderlyingInstrumentPartyRoleQualifier, Tag 2391.
func (m NoUndlyInstrumentParties) GetUnderlyingInstrumentPartyRoleQualifier() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingInstrumentPartyRoleQualifierField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingInstrumentPartyID returns true if UnderlyingInstrumentPartyID is present, Tag 1059.
func (m NoUndlyInstrumentParties) HasUnderlyingInstrumentPartyID() bool {
	return m.Has(tag.UnderlyingInstrumentPartyID)
}

// HasUnderlyingInstrumentPartyIDSource returns true if UnderlyingInstrumentPartyIDSource is present, Tag 1060.
func (m NoUndlyInstrumentParties) HasUnderlyingInstrumentPartyIDSource() bool {
	return m.Has(tag.UnderlyingInstrumentPartyIDSource)
}

// HasUnderlyingInstrumentPartyRole returns true if UnderlyingInstrumentPartyRole is present, Tag 1061.
func (m NoUndlyInstrumentParties) HasUnderlyingInstrumentPartyRole() bool {
	return m.Has(tag.UnderlyingInstrumentPartyRole)
}

// HasNoUndlyInstrumentPartySubIDs returns true if NoUndlyInstrumentPartySubIDs is present, Tag 1062.
func (m NoUndlyInstrumentParties) HasNoUndlyInstrumentPartySubIDs() bool {
	return m.Has(tag.NoUndlyInstrumentPartySubIDs)
}

// HasUnderlyingInstrumentPartyRoleQualifier returns true if UnderlyingInstrumentPartyRoleQualifier is present, Tag 2391.
func (m NoUndlyInstrumentParties) HasUnderlyingInstrumentPartyRoleQualifier() bool {
	return m.Has(tag.UnderlyingInstrumentPartyRoleQualifier)
}

// NoUndlyInstrumentPartySubIDs is a repeating group element, Tag 1062.
type NoUndlyInstrumentPartySubIDs struct {
	*quickfix.Group
}

// SetUnderlyingInstrumentPartySubID sets UnderlyingInstrumentPartySubID, Tag 1063.
func (m NoUndlyInstrumentPartySubIDs) SetUnderlyingInstrumentPartySubID(v string) {
	m.Set(field.NewUnderlyingInstrumentPartySubID(v))
}

// SetUnderlyingInstrumentPartySubIDType sets UnderlyingInstrumentPartySubIDType, Tag 1064.
func (m NoUndlyInstrumentPartySubIDs) SetUnderlyingInstrumentPartySubIDType(v int) {
	m.Set(field.NewUnderlyingInstrumentPartySubIDType(v))
}

// GetUnderlyingInstrumentPartySubID gets UnderlyingInstrumentPartySubID, Tag 1063.
func (m NoUndlyInstrumentPartySubIDs) GetUnderlyingInstrumentPartySubID() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingInstrumentPartySubIDField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingInstrumentPartySubIDType gets UnderlyingInstrumentPartySubIDType, Tag 1064.
func (m NoUndlyInstrumentPartySubIDs) GetUnderlyingInstrumentPartySubIDType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingInstrumentPartySubIDTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingInstrumentPartySubID returns true if UnderlyingInstrumentPartySubID is present, Tag 1063.
func (m NoUndlyInstrumentPartySubIDs) HasUnderlyingInstrumentPartySubID() bool {
	return m.Has(tag.UnderlyingInstrumentPartySubID)
}

// HasUnderlyingInstrumentPartySubIDType returns true if UnderlyingInstrumentPartySubIDType is present, Tag 1064.
func (m NoUndlyInstrumentPartySubIDs) HasUnderlyingInstrumentPartySubIDType() bool {
	return m.Has(tag.UnderlyingInstrumentPartySubIDType)
}

// NoUndlyInstrumentPartySubIDsRepeatingGroup is a repeating group, Tag 1062.
type NoUndlyInstrumentPartySubIDsRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUndlyInstrumentPartySubIDsRepeatingGroup returns an initialized, NoUndlyInstrumentPartySubIDsRepeatingGroup.
func NewNoUndlyInstrumentPartySubIDsRepeatingGroup() NoUndlyInstrumentPartySubIDsRepeatingGroup {
	return NoUndlyInstrumentPartySubIDsRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUndlyInstrumentPartySubIDs,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingInstrumentPartySubID),
				quickfix.GroupElement(tag.UnderlyingInstrumentPartySubIDType),
			},
		),
	}
}

// Add create and append a new NoUndlyInstrumentPartySubIDs to this group.
func (m NoUndlyInstrumentPartySubIDsRepeatingGroup) Add() NoUndlyInstrumentPartySubIDs {
	g := m.RepeatingGroup.Add()
	return NoUndlyInstrumentPartySubIDs{g}
}

// Get returns the ith NoUndlyInstrumentPartySubIDs in the NoUndlyInstrumentPartySubIDsRepeatinGroup.
func (m NoUndlyInstrumentPartySubIDsRepeatingGroup) Get(i int) NoUndlyInstrumentPartySubIDs {
	return NoUndlyInstrumentPartySubIDs{m.RepeatingGroup.Get(i)}
}

// NoUndlyInstrumentPartiesRepeatingGroup is a repeating group, Tag 1058.
type NoUndlyInstrumentPartiesRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUndlyInstrumentPartiesRepeatingGroup returns an initialized, NoUndlyInstrumentPartiesRepeatingGroup.
func NewNoUndlyInstrumentPartiesRepeatingGroup() NoUndlyInstrumentPartiesRepeatingGroup {
	return NoUndlyInstrumentPartiesRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUndlyInstrumentParties,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingInstrumentPartyID),
				quickfix.GroupElement(tag.UnderlyingInstrumentPartyIDSource),
				quickfix.GroupElement(tag.UnderlyingInstrumentPartyRole),
				NewNoUndlyInstrumentPartySubIDsRepeatingGroup(),
				quickfix.GroupElement(tag.UnderlyingInstrumentPartyRoleQualifier),
			},
		),
	}
}

// Add create and append a new NoUndlyInstrumentParties to this group.
func (m NoUndlyInstrumentPartiesRepeatingGroup) Add() NoUndlyInstrumentParties {
	g := m.RepeatingGroup.Add()
	return NoUndlyInstrumentParties{g}
}

// Get returns the ith NoUndlyInstrumentParties in the NoUndlyInstrumentPartiesRepeatinGroup.
func (m NoUndlyInstrumentPartiesRepeatingGroup) Get(i int) NoUndlyInstrumentParties {
	return NoUndlyInstrumentParties{m.RepeatingGroup.Get(i)}
}

// NoNotAffectedOrders is a repeating group element, Tag 1370.
type NoNotAffectedOrders struct {
	*quickfix.Group
}

// SetNotAffOrigClOrdID sets NotAffOrigClOrdID, Tag 1372.
func (m NoNotAffectedOrders) SetNotAffOrigClOrdID(v string) {
	m.Set(field.NewNotAffOrigClOrdID(v))
}

// SetNotAffectedOrderID sets NotAffectedOrderID, Tag 1371.
func (m NoNotAffectedOrders) SetNotAffectedOrderID(v string) {
	m.Set(field.NewNotAffectedOrderID(v))
}

// SetNotAffSecondaryOrderID sets NotAffSecondaryOrderID, Tag 1825.
func (m NoNotAffectedOrders) SetNotAffSecondaryOrderID(v string) {
	m.Set(field.NewNotAffSecondaryOrderID(v))
}

// SetNotAffectedReason sets NotAffectedReason, Tag 2677.
func (m NoNotAffectedOrders) SetNotAffectedReason(v enum.NotAffectedReason) {
	m.Set(field.NewNotAffectedReason(v))
}

// GetNotAffOrigClOrdID gets NotAffOrigClOrdID, Tag 1372.
func (m NoNotAffectedOrders) GetNotAffOrigClOrdID() (v string, err quickfix.MessageRejectError) {
	var f field.NotAffOrigClOrdIDField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNotAffectedOrderID gets NotAffectedOrderID, Tag 1371.
func (m NoNotAffectedOrders) GetNotAffectedOrderID() (v string, err quickfix.MessageRejectError) {
	var f field.NotAffectedOrderIDField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNotAffSecondaryOrderID gets NotAffSecondaryOrderID, Tag 1825.
func (m NoNotAffectedOrders) GetNotAffSecondaryOrderID() (v string, err quickfix.MessageRejectError) {
	var f field.NotAffSecondaryOrderIDField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNotAffectedReason gets NotAffectedReason, Tag 2677.
func (m NoNotAffectedOrders) GetNotAffectedReason() (v enum.NotAffectedReason, err quickfix.MessageRejectError) {
	var f field.NotAffectedReasonField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasNotAffOrigClOrdID returns true if NotAffOrigClOrdID is present, Tag 1372.
func (m NoNotAffectedOrders) HasNotAffOrigClOrdID() bool {
	return m.Has(tag.NotAffOrigClOrdID)
}

// HasNotAffectedOrderID returns true if NotAffectedOrderID is present, Tag 1371.
func (m NoNotAffectedOrders) HasNotAffectedOrderID() bool {
	return m.Has(tag.NotAffectedOrderID)
}

// HasNotAffSecondaryOrderID returns true if NotAffSecondaryOrderID is present, Tag 1825.
func (m NoNotAffectedOrders) HasNotAffSecondaryOrderID() bool {
	return m.Has(tag.NotAffSecondaryOrderID)
}

// HasNotAffectedReason returns true if NotAffectedReason is present, Tag 2677.
func (m NoNotAffectedOrders) HasNotAffectedReason() bool {
	return m.Has(tag.NotAffectedReason)
}

// NoNotAffectedOrdersRepeatingGroup is a repeating group, Tag 1370.
type NoNotAffectedOrdersRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoNotAffectedOrdersRepeatingGroup returns an initialized, NoNotAffectedOrdersRepeatingGroup.
func NewNoNotAffectedOrdersRepeatingGroup() NoNotAffectedOrdersRepeatingGroup {
	return NoNotAffectedOrdersRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoNotAffectedOrders,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.NotAffOrigClOrdID),
				quickfix.GroupElement(tag.NotAffectedOrderID),
				quickfix.GroupElement(tag.NotAffSecondaryOrderID),
				quickfix.GroupElement(tag.NotAffectedReason),
			},
		),
	}
}

// Add create and append a new NoNotAffectedOrders to this group.
func (m NoNotAffectedOrdersRepeatingGroup) Add() NoNotAffectedOrders {
	g := m.RepeatingGroup.Add()
	return NoNotAffectedOrders{g}
}

// Get returns the ith NoNotAffectedOrders in the NoNotAffectedOrdersRepeatinGroup.
func (m NoNotAffectedOrdersRepeatingGroup) Get(i int) NoNotAffectedOrders {
	return NoNotAffectedOrders{m.RepeatingGroup.Get(i)}
}

// NoTargetPartyIDs is a repeating group element, Tag 1461.
type NoTargetPartyIDs struct {
	*quickfix.Group
}

// SetTargetPartyID sets TargetPartyID, Tag 1462.
func (m NoTargetPartyIDs) SetTargetPartyID(v string) {
	m.Set(field.NewTargetPartyID(v))
}

// SetTargetPartyIDSource sets TargetPartyIDSource, Tag 1463.
func (m NoTargetPartyIDs) SetTargetPartyIDSource(v string) {
	m.Set(field.NewTargetPartyIDSource(v))
}

// SetTargetPartyRole sets TargetPartyRole, Tag 1464.
func (m NoTargetPartyIDs) SetTargetPartyRole(v int) {
	m.Set(field.NewTargetPartyRole(v))
}

// SetTargetPartyRoleQualifier sets TargetPartyRoleQualifier, Tag 1818.
func (m NoTargetPartyIDs) SetTargetPartyRoleQualifier(v int) {
	m.Set(field.NewTargetPartyRoleQualifier(v))
}

// SetNoTargetPartySubIDs sets NoTargetPartySubIDs, Tag 2433.
func (m NoTargetPartyIDs) SetNoTargetPartySubIDs(f NoTargetPartySubIDsRepeatingGroup) {
	m.SetGroup(f)
}

// GetTargetPartyID gets TargetPartyID, Tag 1462.
func (m NoTargetPartyIDs) GetTargetPartyID() (v string, err quickfix.MessageRejectError) {
	var f field.TargetPartyIDField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetTargetPartyIDSource gets TargetPartyIDSource, Tag 1463.
func (m NoTargetPartyIDs) GetTargetPartyIDSource() (v string, err quickfix.MessageRejectError) {
	var f field.TargetPartyIDSourceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetTargetPartyRole gets TargetPartyRole, Tag 1464.
func (m NoTargetPartyIDs) GetTargetPartyRole() (v int, err quickfix.MessageRejectError) {
	var f field.TargetPartyRoleField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetTargetPartyRoleQualifier gets TargetPartyRoleQualifier, Tag 1818.
func (m NoTargetPartyIDs) GetTargetPartyRoleQualifier() (v int, err quickfix.MessageRejectError) {
	var f field.TargetPartyRoleQualifierField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoTargetPartySubIDs gets NoTargetPartySubIDs, Tag 2433.
func (m NoTargetPartyIDs) GetNoTargetPartySubIDs() (NoTargetPartySubIDsRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoTargetPartySubIDsRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// HasTargetPartyID returns true if TargetPartyID is present, Tag 1462.
func (m NoTargetPartyIDs) HasTargetPartyID() bool {
	return m.Has(tag.TargetPartyID)
}

// HasTargetPartyIDSource returns true if TargetPartyIDSource is present, Tag 1463.
func (m NoTargetPartyIDs) HasTargetPartyIDSource() bool {
	return m.Has(tag.TargetPartyIDSource)
}

// HasTargetPartyRole returns true if TargetPartyRole is present, Tag 1464.
func (m NoTargetPartyIDs) HasTargetPartyRole() bool {
	return m.Has(tag.TargetPartyRole)
}

// HasTargetPartyRoleQualifier returns true if TargetPartyRoleQualifier is present, Tag 1818.
func (m NoTargetPartyIDs) HasTargetPartyRoleQualifier() bool {
	return m.Has(tag.TargetPartyRoleQualifier)
}

// HasNoTargetPartySubIDs returns true if NoTargetPartySubIDs is present, Tag 2433.
func (m NoTargetPartyIDs) HasNoTargetPartySubIDs() bool {
	return m.Has(tag.NoTargetPartySubIDs)
}

// NoTargetPartySubIDs is a repeating group element, Tag 2433.
type NoTargetPartySubIDs struct {
	*quickfix.Group
}

// SetTargetPartySubID sets TargetPartySubID, Tag 2434.
func (m NoTargetPartySubIDs) SetTargetPartySubID(v string) {
	m.Set(field.NewTargetPartySubID(v))
}

// SetTargetPartySubIDType sets TargetPartySubIDType, Tag 2435.
func (m NoTargetPartySubIDs) SetTargetPartySubIDType(v int) {
	m.Set(field.NewTargetPartySubIDType(v))
}

// GetTargetPartySubID gets TargetPartySubID, Tag 2434.
func (m NoTargetPartySubIDs) GetTargetPartySubID() (v string, err quickfix.MessageRejectError) {
	var f field.TargetPartySubIDField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetTargetPartySubIDType gets TargetPartySubIDType, Tag 2435.
func (m NoTargetPartySubIDs) GetTargetPartySubIDType() (v int, err quickfix.MessageRejectError) {
	var f field.TargetPartySubIDTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasTargetPartySubID returns true if TargetPartySubID is present, Tag 2434.
func (m NoTargetPartySubIDs) HasTargetPartySubID() bool {
	return m.Has(tag.TargetPartySubID)
}

// HasTargetPartySubIDType returns true if TargetPartySubIDType is present, Tag 2435.
func (m NoTargetPartySubIDs) HasTargetPartySubIDType() bool {
	return m.Has(tag.TargetPartySubIDType)
}

// NoTargetPartySubIDsRepeatingGroup is a repeating group, Tag 2433.
type NoTargetPartySubIDsRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoTargetPartySubIDsRepeatingGroup returns an initialized, NoTargetPartySubIDsRepeatingGroup.
func NewNoTargetPartySubIDsRepeatingGroup() NoTargetPartySubIDsRepeatingGroup {
	return NoTargetPartySubIDsRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoTargetPartySubIDs,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.TargetPartySubID),
				quickfix.GroupElement(tag.TargetPartySubIDType),
			},
		),
	}
}

// Add create and append a new NoTargetPartySubIDs to this group.
func (m NoTargetPartySubIDsRepeatingGroup) Add() NoTargetPartySubIDs {
	g := m.RepeatingGroup.Add()
	return NoTargetPartySubIDs{g}
}

// Get returns the ith NoTargetPartySubIDs in the NoTargetPartySubIDsRepeatinGroup.
func (m NoTargetPartySubIDsRepeatingGroup) Get(i int) NoTargetPartySubIDs {
	return NoTargetPartySubIDs{m.RepeatingGroup.Get(i)}
}

// NoTargetPartyIDsRepeatingGroup is a repeating group, Tag 1461.
type NoTargetPartyIDsRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoTargetPartyIDsRepeatingGroup returns an initialized, NoTargetPartyIDsRepeatingGroup.
func NewNoTargetPartyIDsRepeatingGroup() NoTargetPartyIDsRepeatingGroup {
	return NoTargetPartyIDsRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoTargetPartyIDs,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.TargetPartyID),
				quickfix.GroupElement(tag.TargetPartyIDSource),
				quickfix.GroupElement(tag.TargetPartyRole),
				quickfix.GroupElement(tag.TargetPartyRoleQualifier),
				NewNoTargetPartySubIDsRepeatingGroup(),
			},
		),
	}
}

// Add create and append a new NoTargetPartyIDs to this group.
func (m NoTargetPartyIDsRepeatingGroup) Add() NoTargetPartyIDs {
	g := m.RepeatingGroup.Add()
	return NoTargetPartyIDs{g}
}

// Get returns the ith NoTargetPartyIDs in the NoTargetPartyIDsRepeatinGroup.
func (m NoTargetPartyIDsRepeatingGroup) Get(i int) NoTargetPartyIDs {
	return NoTargetPartyIDs{m.RepeatingGroup.Get(i)}
}

// NoComplexEvents is a repeating group element, Tag 1483.
type NoComplexEvents struct {
	*quickfix.Group
}

// SetComplexEventType sets ComplexEventType, Tag 1484.
func (m NoComplexEvents) SetComplexEventType(v enum.ComplexEventType) {
	m.Set(field.NewComplexEventType(v))
}

// SetComplexOptPayoutAmount sets ComplexOptPayoutAmount, Tag 1485.
func (m NoComplexEvents) SetComplexOptPayoutAmount(value decimal.Decimal, scale int32) {
	m.Set(field.NewComplexOptPayoutAmount(value, scale))
}

// SetComplexEventPrice sets ComplexEventPrice, Tag 1486.
func (m NoComplexEvents) SetComplexEventPrice(value decimal.Decimal, scale int32) {
	m.Set(field.NewComplexEventPrice(value, scale))
}

// SetComplexEventPriceBoundaryMethod sets ComplexEventPriceBoundaryMethod, Tag 1487.
func (m NoComplexEvents) SetComplexEventPriceBoundaryMethod(v enum.ComplexEventPriceBoundaryMethod) {
	m.Set(field.NewComplexEventPriceBoundaryMethod(v))
}

// SetComplexEventPriceBoundaryPrecision sets ComplexEventPriceBoundaryPrecision, Tag 1488.
func (m NoComplexEvents) SetComplexEventPriceBoundaryPrecision(value decimal.Decimal, scale int32) {
	m.Set(field.NewComplexEventPriceBoundaryPrecision(value, scale))
}

// SetComplexEventPriceTimeType sets ComplexEventPriceTimeType, Tag 1489.
func (m NoComplexEvents) SetComplexEventPriceTimeType(v enum.ComplexEventPriceTimeType) {
	m.Set(field.NewComplexEventPriceTimeType(v))
}

// SetComplexEventCondition sets ComplexEventCondition, Tag 1490.
func (m NoComplexEvents) SetComplexEventCondition(v enum.ComplexEventCondition) {
	m.Set(field.NewComplexEventCondition(v))
}

// SetNoComplexEventDates sets NoComplexEventDates, Tag 1491.
func (m NoComplexEvents) SetNoComplexEventDates(f NoComplexEventDatesRepeatingGroup) {
	m.SetGroup(f)
}

// SetComplexOptPayoutPaySide sets ComplexOptPayoutPaySide, Tag 2117.
func (m NoComplexEvents) SetComplexOptPayoutPaySide(v int) {
	m.Set(field.NewComplexOptPayoutPaySide(v))
}

// SetComplexOptPayoutReceiveSide sets ComplexOptPayoutReceiveSide, Tag 2118.
func (m NoComplexEvents) SetComplexOptPayoutReceiveSide(v int) {
	m.Set(field.NewComplexOptPayoutReceiveSide(v))
}

// SetComplexOptPayoutUnderlier sets ComplexOptPayoutUnderlier, Tag 2119.
func (m NoComplexEvents) SetComplexOptPayoutUnderlier(v string) {
	m.Set(field.NewComplexOptPayoutUnderlier(v))
}

// SetComplexOptPayoutPercentage sets ComplexOptPayoutPercentage, Tag 2120.
func (m NoComplexEvents) SetComplexOptPayoutPercentage(value decimal.Decimal, scale int32) {
	m.Set(field.NewComplexOptPayoutPercentage(value, scale))
}

// SetComplexOptPayoutTime sets ComplexOptPayoutTime, Tag 2121.
func (m NoComplexEvents) SetComplexOptPayoutTime(v enum.ComplexOptPayoutTime) {
	m.Set(field.NewComplexOptPayoutTime(v))
}

// SetComplexOptPayoutCurrency sets ComplexOptPayoutCurrency, Tag 2122.
func (m NoComplexEvents) SetComplexOptPayoutCurrency(v string) {
	m.Set(field.NewComplexOptPayoutCurrency(v))
}

// SetComplexEventPricePercentage sets ComplexEventPricePercentage, Tag 2123.
func (m NoComplexEvents) SetComplexEventPricePercentage(value decimal.Decimal, scale int32) {
	m.Set(field.NewComplexEventPricePercentage(value, scale))
}

// SetComplexEventCurrencyOne sets ComplexEventCurrencyOne, Tag 2124.
func (m NoComplexEvents) SetComplexEventCurrencyOne(v string) {
	m.Set(field.NewComplexEventCurrencyOne(v))
}

// SetComplexEventCurrencyTwo sets ComplexEventCurrencyTwo, Tag 2125.
func (m NoComplexEvents) SetComplexEventCurrencyTwo(v string) {
	m.Set(field.NewComplexEventCurrencyTwo(v))
}

// SetComplexEventQuoteBasis sets ComplexEventQuoteBasis, Tag 2126.
func (m NoComplexEvents) SetComplexEventQuoteBasis(v enum.ComplexEventQuoteBasis) {
	m.Set(field.NewComplexEventQuoteBasis(v))
}

// SetComplexEventFixedFXRate sets ComplexEventFixedFXRate, Tag 2127.
func (m NoComplexEvents) SetComplexEventFixedFXRate(value decimal.Decimal, scale int32) {
	m.Set(field.NewComplexEventFixedFXRate(value, scale))
}

// SetComplexEventDeterminationMethod sets ComplexEventDeterminationMethod, Tag 2128.
func (m NoComplexEvents) SetComplexEventDeterminationMethod(v string) {
	m.Set(field.NewComplexEventDeterminationMethod(v))
}

// SetComplexEventCalculationAgent sets ComplexEventCalculationAgent, Tag 2129.
func (m NoComplexEvents) SetComplexEventCalculationAgent(v int) {
	m.Set(field.NewComplexEventCalculationAgent(v))
}

// SetComplexEventStrikePrice sets ComplexEventStrikePrice, Tag 2130.
func (m NoComplexEvents) SetComplexEventStrikePrice(value decimal.Decimal, scale int32) {
	m.Set(field.NewComplexEventStrikePrice(value, scale))
}

// SetComplexEventStrikeFactor sets ComplexEventStrikeFactor, Tag 2131.
func (m NoComplexEvents) SetComplexEventStrikeFactor(value decimal.Decimal, scale int32) {
	m.Set(field.NewComplexEventStrikeFactor(value, scale))
}

// SetComplexEventStrikeNumberOfOptions sets ComplexEventStrikeNumberOfOptions, Tag 2132.
func (m NoComplexEvents) SetComplexEventStrikeNumberOfOptions(v int) {
	m.Set(field.NewComplexEventStrikeNumberOfOptions(v))
}

// SetNoComplexEventRateSources sets NoComplexEventRateSources, Tag 41013.
func (m NoComplexEvents) SetNoComplexEventRateSources(f NoComplexEventRateSourcesRepeatingGroup) {
	m.SetGroup(f)
}

// SetComplexEventDateUnadjusted sets ComplexEventDateUnadjusted, Tag 41020.
func (m NoComplexEvents) SetComplexEventDateUnadjusted(v string) {
	m.Set(field.NewComplexEventDateUnadjusted(v))
}

// SetComplexEventDateRelativeTo sets ComplexEventDateRelativeTo, Tag 41021.
func (m NoComplexEvents) SetComplexEventDateRelativeTo(v int) {
	m.Set(field.NewComplexEventDateRelativeTo(v))
}

// SetComplexEventDateOffsetPeriod sets ComplexEventDateOffsetPeriod, Tag 41022.
func (m NoComplexEvents) SetComplexEventDateOffsetPeriod(v int) {
	m.Set(field.NewComplexEventDateOffsetPeriod(v))
}

// SetComplexEventDateOffsetUnit sets ComplexEventDateOffsetUnit, Tag 41023.
func (m NoComplexEvents) SetComplexEventDateOffsetUnit(v string) {
	m.Set(field.NewComplexEventDateOffsetUnit(v))
}

// SetComplexEventDateOffsetDayType sets ComplexEventDateOffsetDayType, Tag 41024.
func (m NoComplexEvents) SetComplexEventDateOffsetDayType(v enum.ComplexEventDateOffsetDayType) {
	m.Set(field.NewComplexEventDateOffsetDayType(v))
}

// SetComplexEventDateBusinessDayConvention sets ComplexEventDateBusinessDayConvention, Tag 41025.
func (m NoComplexEvents) SetComplexEventDateBusinessDayConvention(v int) {
	m.Set(field.NewComplexEventDateBusinessDayConvention(v))
}

// SetNoComplexEventDateBusinessCenters sets NoComplexEventDateBusinessCenters, Tag 41018.
func (m NoComplexEvents) SetNoComplexEventDateBusinessCenters(f NoComplexEventDateBusinessCentersRepeatingGroup) {
	m.SetGroup(f)
}

// SetComplexEventDateAdjusted sets ComplexEventDateAdjusted, Tag 41026.
func (m NoComplexEvents) SetComplexEventDateAdjusted(v string) {
	m.Set(field.NewComplexEventDateAdjusted(v))
}

// SetComplexEventFixingTime sets ComplexEventFixingTime, Tag 41027.
func (m NoComplexEvents) SetComplexEventFixingTime(v string) {
	m.Set(field.NewComplexEventFixingTime(v))
}

// SetComplexEventFixingTimeBusinessCenter sets ComplexEventFixingTimeBusinessCenter, Tag 41028.
func (m NoComplexEvents) SetComplexEventFixingTimeBusinessCenter(v string) {
	m.Set(field.NewComplexEventFixingTimeBusinessCenter(v))
}

// SetNoComplexEventPeriods sets NoComplexEventPeriods, Tag 41010.
func (m NoComplexEvents) SetNoComplexEventPeriods(f NoComplexEventPeriodsRepeatingGroup) {
	m.SetGroup(f)
}

// SetComplexEventCreditEventsXIDRef sets ComplexEventCreditEventsXIDRef, Tag 2133.
func (m NoComplexEvents) SetComplexEventCreditEventsXIDRef(v string) {
	m.Set(field.NewComplexEventCreditEventsXIDRef(v))
}

// SetComplexEventCreditEventNotifyingParty sets ComplexEventCreditEventNotifyingParty, Tag 2134.
func (m NoComplexEvents) SetComplexEventCreditEventNotifyingParty(v enum.ComplexEventCreditEventNotifyingParty) {
	m.Set(field.NewComplexEventCreditEventNotifyingParty(v))
}

// SetComplexEventCreditEventBusinessCenter sets ComplexEventCreditEventBusinessCenter, Tag 2135.
func (m NoComplexEvents) SetComplexEventCreditEventBusinessCenter(v string) {
	m.Set(field.NewComplexEventCreditEventBusinessCenter(v))
}

// SetComplexEventCreditEventStandardSources sets ComplexEventCreditEventStandardSources, Tag 2136.
func (m NoComplexEvents) SetComplexEventCreditEventStandardSources(v bool) {
	m.Set(field.NewComplexEventCreditEventStandardSources(v))
}

// SetComplexEventCreditEventMinimumSources sets ComplexEventCreditEventMinimumSources, Tag 2137.
func (m NoComplexEvents) SetComplexEventCreditEventMinimumSources(v int) {
	m.Set(field.NewComplexEventCreditEventMinimumSources(v))
}

// SetNoComplexEventCreditEventSources sets NoComplexEventCreditEventSources, Tag 41029.
func (m NoComplexEvents) SetNoComplexEventCreditEventSources(f NoComplexEventCreditEventSourcesRepeatingGroup) {
	m.SetGroup(f)
}

// SetNoComplexEventCreditEvents sets NoComplexEventCreditEvents, Tag 40997.
func (m NoComplexEvents) SetNoComplexEventCreditEvents(f NoComplexEventCreditEventsRepeatingGroup) {
	m.SetGroup(f)
}

// SetComplexEventXID sets ComplexEventXID, Tag 2138.
func (m NoComplexEvents) SetComplexEventXID(v string) {
	m.Set(field.NewComplexEventXID(v))
}

// SetComplexEventXIDRef sets ComplexEventXIDRef, Tag 2139.
func (m NoComplexEvents) SetComplexEventXIDRef(v string) {
	m.Set(field.NewComplexEventXIDRef(v))
}

// SetComplexEventSpotRate sets ComplexEventSpotRate, Tag 2407.
func (m NoComplexEvents) SetComplexEventSpotRate(value decimal.Decimal, scale int32) {
	m.Set(field.NewComplexEventSpotRate(value, scale))
}

// SetComplexEventForwardPoints sets ComplexEventForwardPoints, Tag 2408.
func (m NoComplexEvents) SetComplexEventForwardPoints(value decimal.Decimal, scale int32) {
	m.Set(field.NewComplexEventForwardPoints(value, scale))
}

// SetComplexEventFuturesPriceValuation sets ComplexEventFuturesPriceValuation, Tag 2597.
func (m NoComplexEvents) SetComplexEventFuturesPriceValuation(v bool) {
	m.Set(field.NewComplexEventFuturesPriceValuation(v))
}

// SetComplexEventOptionsPriceValuation sets ComplexEventOptionsPriceValuation, Tag 2598.
func (m NoComplexEvents) SetComplexEventOptionsPriceValuation(v bool) {
	m.Set(field.NewComplexEventOptionsPriceValuation(v))
}

// SetComplexEventPVFinalPriceElectionFallback sets ComplexEventPVFinalPriceElectionFallback, Tag 2599.
func (m NoComplexEvents) SetComplexEventPVFinalPriceElectionFallback(v enum.ComplexEventPVFinalPriceElectionFallback) {
	m.Set(field.NewComplexEventPVFinalPriceElectionFallback(v))
}

// GetComplexEventType gets ComplexEventType, Tag 1484.
func (m NoComplexEvents) GetComplexEventType() (v enum.ComplexEventType, err quickfix.MessageRejectError) {
	var f field.ComplexEventTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetComplexOptPayoutAmount gets ComplexOptPayoutAmount, Tag 1485.
func (m NoComplexEvents) GetComplexOptPayoutAmount() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.ComplexOptPayoutAmountField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetComplexEventPrice gets ComplexEventPrice, Tag 1486.
func (m NoComplexEvents) GetComplexEventPrice() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.ComplexEventPriceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetComplexEventPriceBoundaryMethod gets ComplexEventPriceBoundaryMethod, Tag 1487.
func (m NoComplexEvents) GetComplexEventPriceBoundaryMethod() (v enum.ComplexEventPriceBoundaryMethod, err quickfix.MessageRejectError) {
	var f field.ComplexEventPriceBoundaryMethodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetComplexEventPriceBoundaryPrecision gets ComplexEventPriceBoundaryPrecision, Tag 1488.
func (m NoComplexEvents) GetComplexEventPriceBoundaryPrecision() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.ComplexEventPriceBoundaryPrecisionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetComplexEventPriceTimeType gets ComplexEventPriceTimeType, Tag 1489.
func (m NoComplexEvents) GetComplexEventPriceTimeType() (v enum.ComplexEventPriceTimeType, err quickfix.MessageRejectError) {
	var f field.ComplexEventPriceTimeTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetComplexEventCondition gets ComplexEventCondition, Tag 1490.
func (m NoComplexEvents) GetComplexEventCondition() (v enum.ComplexEventCondition, err quickfix.MessageRejectError) {
	var f field.ComplexEventConditionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoComplexEventDates gets NoComplexEventDates, Tag 1491.
func (m NoComplexEvents) GetNoComplexEventDates() (NoComplexEventDatesRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoComplexEventDatesRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetComplexOptPayoutPaySide gets ComplexOptPayoutPaySide, Tag 2117.
func (m NoComplexEvents) GetComplexOptPayoutPaySide() (v int, err quickfix.MessageRejectError) {
	var f field.ComplexOptPayoutPaySideField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetComplexOptPayoutReceiveSide gets ComplexOptPayoutReceiveSide, Tag 2118.
func (m NoComplexEvents) GetComplexOptPayoutReceiveSide() (v int, err quickfix.MessageRejectError) {
	var f field.ComplexOptPayoutReceiveSideField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetComplexOptPayoutUnderlier gets ComplexOptPayoutUnderlier, Tag 2119.
func (m NoComplexEvents) GetComplexOptPayoutUnderlier() (v string, err quickfix.MessageRejectError) {
	var f field.ComplexOptPayoutUnderlierField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetComplexOptPayoutPercentage gets ComplexOptPayoutPercentage, Tag 2120.
func (m NoComplexEvents) GetComplexOptPayoutPercentage() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.ComplexOptPayoutPercentageField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetComplexOptPayoutTime gets ComplexOptPayoutTime, Tag 2121.
func (m NoComplexEvents) GetComplexOptPayoutTime() (v enum.ComplexOptPayoutTime, err quickfix.MessageRejectError) {
	var f field.ComplexOptPayoutTimeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetComplexOptPayoutCurrency gets ComplexOptPayoutCurrency, Tag 2122.
func (m NoComplexEvents) GetComplexOptPayoutCurrency() (v string, err quickfix.MessageRejectError) {
	var f field.ComplexOptPayoutCurrencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetComplexEventPricePercentage gets ComplexEventPricePercentage, Tag 2123.
func (m NoComplexEvents) GetComplexEventPricePercentage() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.ComplexEventPricePercentageField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetComplexEventCurrencyOne gets ComplexEventCurrencyOne, Tag 2124.
func (m NoComplexEvents) GetComplexEventCurrencyOne() (v string, err quickfix.MessageRejectError) {
	var f field.ComplexEventCurrencyOneField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetComplexEventCurrencyTwo gets ComplexEventCurrencyTwo, Tag 2125.
func (m NoComplexEvents) GetComplexEventCurrencyTwo() (v string, err quickfix.MessageRejectError) {
	var f field.ComplexEventCurrencyTwoField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetComplexEventQuoteBasis gets ComplexEventQuoteBasis, Tag 2126.
func (m NoComplexEvents) GetComplexEventQuoteBasis() (v enum.ComplexEventQuoteBasis, err quickfix.MessageRejectError) {
	var f field.ComplexEventQuoteBasisField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetComplexEventFixedFXRate gets ComplexEventFixedFXRate, Tag 2127.
func (m NoComplexEvents) GetComplexEventFixedFXRate() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.ComplexEventFixedFXRateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetComplexEventDeterminationMethod gets ComplexEventDeterminationMethod, Tag 2128.
func (m NoComplexEvents) GetComplexEventDeterminationMethod() (v string, err quickfix.MessageRejectError) {
	var f field.ComplexEventDeterminationMethodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetComplexEventCalculationAgent gets ComplexEventCalculationAgent, Tag 2129.
func (m NoComplexEvents) GetComplexEventCalculationAgent() (v int, err quickfix.MessageRejectError) {
	var f field.ComplexEventCalculationAgentField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetComplexEventStrikePrice gets ComplexEventStrikePrice, Tag 2130.
func (m NoComplexEvents) GetComplexEventStrikePrice() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.ComplexEventStrikePriceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetComplexEventStrikeFactor gets ComplexEventStrikeFactor, Tag 2131.
func (m NoComplexEvents) GetComplexEventStrikeFactor() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.ComplexEventStrikeFactorField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetComplexEventStrikeNumberOfOptions gets ComplexEventStrikeNumberOfOptions, Tag 2132.
func (m NoComplexEvents) GetComplexEventStrikeNumberOfOptions() (v int, err quickfix.MessageRejectError) {
	var f field.ComplexEventStrikeNumberOfOptionsField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoComplexEventRateSources gets NoComplexEventRateSources, Tag 41013.
func (m NoComplexEvents) GetNoComplexEventRateSources() (NoComplexEventRateSourcesRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoComplexEventRateSourcesRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetComplexEventDateUnadjusted gets ComplexEventDateUnadjusted, Tag 41020.
func (m NoComplexEvents) GetComplexEventDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.ComplexEventDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetComplexEventDateRelativeTo gets ComplexEventDateRelativeTo, Tag 41021.
func (m NoComplexEvents) GetComplexEventDateRelativeTo() (v int, err quickfix.MessageRejectError) {
	var f field.ComplexEventDateRelativeToField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetComplexEventDateOffsetPeriod gets ComplexEventDateOffsetPeriod, Tag 41022.
func (m NoComplexEvents) GetComplexEventDateOffsetPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.ComplexEventDateOffsetPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetComplexEventDateOffsetUnit gets ComplexEventDateOffsetUnit, Tag 41023.
func (m NoComplexEvents) GetComplexEventDateOffsetUnit() (v string, err quickfix.MessageRejectError) {
	var f field.ComplexEventDateOffsetUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetComplexEventDateOffsetDayType gets ComplexEventDateOffsetDayType, Tag 41024.
func (m NoComplexEvents) GetComplexEventDateOffsetDayType() (v enum.ComplexEventDateOffsetDayType, err quickfix.MessageRejectError) {
	var f field.ComplexEventDateOffsetDayTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetComplexEventDateBusinessDayConvention gets ComplexEventDateBusinessDayConvention, Tag 41025.
func (m NoComplexEvents) GetComplexEventDateBusinessDayConvention() (v int, err quickfix.MessageRejectError) {
	var f field.ComplexEventDateBusinessDayConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoComplexEventDateBusinessCenters gets NoComplexEventDateBusinessCenters, Tag 41018.
func (m NoComplexEvents) GetNoComplexEventDateBusinessCenters() (NoComplexEventDateBusinessCentersRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoComplexEventDateBusinessCentersRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetComplexEventDateAdjusted gets ComplexEventDateAdjusted, Tag 41026.
func (m NoComplexEvents) GetComplexEventDateAdjusted() (v string, err quickfix.MessageRejectError) {
	var f field.ComplexEventDateAdjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetComplexEventFixingTime gets ComplexEventFixingTime, Tag 41027.
func (m NoComplexEvents) GetComplexEventFixingTime() (v string, err quickfix.MessageRejectError) {
	var f field.ComplexEventFixingTimeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetComplexEventFixingTimeBusinessCenter gets ComplexEventFixingTimeBusinessCenter, Tag 41028.
func (m NoComplexEvents) GetComplexEventFixingTimeBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.ComplexEventFixingTimeBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoComplexEventPeriods gets NoComplexEventPeriods, Tag 41010.
func (m NoComplexEvents) GetNoComplexEventPeriods() (NoComplexEventPeriodsRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoComplexEventPeriodsRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetComplexEventCreditEventsXIDRef gets ComplexEventCreditEventsXIDRef, Tag 2133.
func (m NoComplexEvents) GetComplexEventCreditEventsXIDRef() (v string, err quickfix.MessageRejectError) {
	var f field.ComplexEventCreditEventsXIDRefField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetComplexEventCreditEventNotifyingParty gets ComplexEventCreditEventNotifyingParty, Tag 2134.
func (m NoComplexEvents) GetComplexEventCreditEventNotifyingParty() (v enum.ComplexEventCreditEventNotifyingParty, err quickfix.MessageRejectError) {
	var f field.ComplexEventCreditEventNotifyingPartyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetComplexEventCreditEventBusinessCenter gets ComplexEventCreditEventBusinessCenter, Tag 2135.
func (m NoComplexEvents) GetComplexEventCreditEventBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.ComplexEventCreditEventBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetComplexEventCreditEventStandardSources gets ComplexEventCreditEventStandardSources, Tag 2136.
func (m NoComplexEvents) GetComplexEventCreditEventStandardSources() (v bool, err quickfix.MessageRejectError) {
	var f field.ComplexEventCreditEventStandardSourcesField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetComplexEventCreditEventMinimumSources gets ComplexEventCreditEventMinimumSources, Tag 2137.
func (m NoComplexEvents) GetComplexEventCreditEventMinimumSources() (v int, err quickfix.MessageRejectError) {
	var f field.ComplexEventCreditEventMinimumSourcesField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoComplexEventCreditEventSources gets NoComplexEventCreditEventSources, Tag 41029.
func (m NoComplexEvents) GetNoComplexEventCreditEventSources() (NoComplexEventCreditEventSourcesRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoComplexEventCreditEventSourcesRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetNoComplexEventCreditEvents gets NoComplexEventCreditEvents, Tag 40997.
func (m NoComplexEvents) GetNoComplexEventCreditEvents() (NoComplexEventCreditEventsRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoComplexEventCreditEventsRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetComplexEventXID gets ComplexEventXID, Tag 2138.
func (m NoComplexEvents) GetComplexEventXID() (v string, err quickfix.MessageRejectError) {
	var f field.ComplexEventXIDField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetComplexEventXIDRef gets ComplexEventXIDRef, Tag 2139.
func (m NoComplexEvents) GetComplexEventXIDRef() (v string, err quickfix.MessageRejectError) {
	var f field.ComplexEventXIDRefField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetComplexEventSpotRate gets ComplexEventSpotRate, Tag 2407.
func (m NoComplexEvents) GetComplexEventSpotRate() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.ComplexEventSpotRateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetComplexEventForwardPoints gets ComplexEventForwardPoints, Tag 2408.
func (m NoComplexEvents) GetComplexEventForwardPoints() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.ComplexEventForwardPointsField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetComplexEventFuturesPriceValuation gets ComplexEventFuturesPriceValuation, Tag 2597.
func (m NoComplexEvents) GetComplexEventFuturesPriceValuation() (v bool, err quickfix.MessageRejectError) {
	var f field.ComplexEventFuturesPriceValuationField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetComplexEventOptionsPriceValuation gets ComplexEventOptionsPriceValuation, Tag 2598.
func (m NoComplexEvents) GetComplexEventOptionsPriceValuation() (v bool, err quickfix.MessageRejectError) {
	var f field.ComplexEventOptionsPriceValuationField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetComplexEventPVFinalPriceElectionFallback gets ComplexEventPVFinalPriceElectionFallback, Tag 2599.
func (m NoComplexEvents) GetComplexEventPVFinalPriceElectionFallback() (v enum.ComplexEventPVFinalPriceElectionFallback, err quickfix.MessageRejectError) {
	var f field.ComplexEventPVFinalPriceElectionFallbackField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasComplexEventType returns true if ComplexEventType is present, Tag 1484.
func (m NoComplexEvents) HasComplexEventType() bool {
	return m.Has(tag.ComplexEventType)
}

// HasComplexOptPayoutAmount returns true if ComplexOptPayoutAmount is present, Tag 1485.
func (m NoComplexEvents) HasComplexOptPayoutAmount() bool {
	return m.Has(tag.ComplexOptPayoutAmount)
}

// HasComplexEventPrice returns true if ComplexEventPrice is present, Tag 1486.
func (m NoComplexEvents) HasComplexEventPrice() bool {
	return m.Has(tag.ComplexEventPrice)
}

// HasComplexEventPriceBoundaryMethod returns true if ComplexEventPriceBoundaryMethod is present, Tag 1487.
func (m NoComplexEvents) HasComplexEventPriceBoundaryMethod() bool {
	return m.Has(tag.ComplexEventPriceBoundaryMethod)
}

// HasComplexEventPriceBoundaryPrecision returns true if ComplexEventPriceBoundaryPrecision is present, Tag 1488.
func (m NoComplexEvents) HasComplexEventPriceBoundaryPrecision() bool {
	return m.Has(tag.ComplexEventPriceBoundaryPrecision)
}

// HasComplexEventPriceTimeType returns true if ComplexEventPriceTimeType is present, Tag 1489.
func (m NoComplexEvents) HasComplexEventPriceTimeType() bool {
	return m.Has(tag.ComplexEventPriceTimeType)
}

// HasComplexEventCondition returns true if ComplexEventCondition is present, Tag 1490.
func (m NoComplexEvents) HasComplexEventCondition() bool {
	return m.Has(tag.ComplexEventCondition)
}

// HasNoComplexEventDates returns true if NoComplexEventDates is present, Tag 1491.
func (m NoComplexEvents) HasNoComplexEventDates() bool {
	return m.Has(tag.NoComplexEventDates)
}

// HasComplexOptPayoutPaySide returns true if ComplexOptPayoutPaySide is present, Tag 2117.
func (m NoComplexEvents) HasComplexOptPayoutPaySide() bool {
	return m.Has(tag.ComplexOptPayoutPaySide)
}

// HasComplexOptPayoutReceiveSide returns true if ComplexOptPayoutReceiveSide is present, Tag 2118.
func (m NoComplexEvents) HasComplexOptPayoutReceiveSide() bool {
	return m.Has(tag.ComplexOptPayoutReceiveSide)
}

// HasComplexOptPayoutUnderlier returns true if ComplexOptPayoutUnderlier is present, Tag 2119.
func (m NoComplexEvents) HasComplexOptPayoutUnderlier() bool {
	return m.Has(tag.ComplexOptPayoutUnderlier)
}

// HasComplexOptPayoutPercentage returns true if ComplexOptPayoutPercentage is present, Tag 2120.
func (m NoComplexEvents) HasComplexOptPayoutPercentage() bool {
	return m.Has(tag.ComplexOptPayoutPercentage)
}

// HasComplexOptPayoutTime returns true if ComplexOptPayoutTime is present, Tag 2121.
func (m NoComplexEvents) HasComplexOptPayoutTime() bool {
	return m.Has(tag.ComplexOptPayoutTime)
}

// HasComplexOptPayoutCurrency returns true if ComplexOptPayoutCurrency is present, Tag 2122.
func (m NoComplexEvents) HasComplexOptPayoutCurrency() bool {
	return m.Has(tag.ComplexOptPayoutCurrency)
}

// HasComplexEventPricePercentage returns true if ComplexEventPricePercentage is present, Tag 2123.
func (m NoComplexEvents) HasComplexEventPricePercentage() bool {
	return m.Has(tag.ComplexEventPricePercentage)
}

// HasComplexEventCurrencyOne returns true if ComplexEventCurrencyOne is present, Tag 2124.
func (m NoComplexEvents) HasComplexEventCurrencyOne() bool {
	return m.Has(tag.ComplexEventCurrencyOne)
}

// HasComplexEventCurrencyTwo returns true if ComplexEventCurrencyTwo is present, Tag 2125.
func (m NoComplexEvents) HasComplexEventCurrencyTwo() bool {
	return m.Has(tag.ComplexEventCurrencyTwo)
}

// HasComplexEventQuoteBasis returns true if ComplexEventQuoteBasis is present, Tag 2126.
func (m NoComplexEvents) HasComplexEventQuoteBasis() bool {
	return m.Has(tag.ComplexEventQuoteBasis)
}

// HasComplexEventFixedFXRate returns true if ComplexEventFixedFXRate is present, Tag 2127.
func (m NoComplexEvents) HasComplexEventFixedFXRate() bool {
	return m.Has(tag.ComplexEventFixedFXRate)
}

// HasComplexEventDeterminationMethod returns true if ComplexEventDeterminationMethod is present, Tag 2128.
func (m NoComplexEvents) HasComplexEventDeterminationMethod() bool {
	return m.Has(tag.ComplexEventDeterminationMethod)
}

// HasComplexEventCalculationAgent returns true if ComplexEventCalculationAgent is present, Tag 2129.
func (m NoComplexEvents) HasComplexEventCalculationAgent() bool {
	return m.Has(tag.ComplexEventCalculationAgent)
}

// HasComplexEventStrikePrice returns true if ComplexEventStrikePrice is present, Tag 2130.
func (m NoComplexEvents) HasComplexEventStrikePrice() bool {
	return m.Has(tag.ComplexEventStrikePrice)
}

// HasComplexEventStrikeFactor returns true if ComplexEventStrikeFactor is present, Tag 2131.
func (m NoComplexEvents) HasComplexEventStrikeFactor() bool {
	return m.Has(tag.ComplexEventStrikeFactor)
}

// HasComplexEventStrikeNumberOfOptions returns true if ComplexEventStrikeNumberOfOptions is present, Tag 2132.
func (m NoComplexEvents) HasComplexEventStrikeNumberOfOptions() bool {
	return m.Has(tag.ComplexEventStrikeNumberOfOptions)
}

// HasNoComplexEventRateSources returns true if NoComplexEventRateSources is present, Tag 41013.
func (m NoComplexEvents) HasNoComplexEventRateSources() bool {
	return m.Has(tag.NoComplexEventRateSources)
}

// HasComplexEventDateUnadjusted returns true if ComplexEventDateUnadjusted is present, Tag 41020.
func (m NoComplexEvents) HasComplexEventDateUnadjusted() bool {
	return m.Has(tag.ComplexEventDateUnadjusted)
}

// HasComplexEventDateRelativeTo returns true if ComplexEventDateRelativeTo is present, Tag 41021.
func (m NoComplexEvents) HasComplexEventDateRelativeTo() bool {
	return m.Has(tag.ComplexEventDateRelativeTo)
}

// HasComplexEventDateOffsetPeriod returns true if ComplexEventDateOffsetPeriod is present, Tag 41022.
func (m NoComplexEvents) HasComplexEventDateOffsetPeriod() bool {
	return m.Has(tag.ComplexEventDateOffsetPeriod)
}

// HasComplexEventDateOffsetUnit returns true if ComplexEventDateOffsetUnit is present, Tag 41023.
func (m NoComplexEvents) HasComplexEventDateOffsetUnit() bool {
	return m.Has(tag.ComplexEventDateOffsetUnit)
}

// HasComplexEventDateOffsetDayType returns true if ComplexEventDateOffsetDayType is present, Tag 41024.
func (m NoComplexEvents) HasComplexEventDateOffsetDayType() bool {
	return m.Has(tag.ComplexEventDateOffsetDayType)
}

// HasComplexEventDateBusinessDayConvention returns true if ComplexEventDateBusinessDayConvention is present, Tag 41025.
func (m NoComplexEvents) HasComplexEventDateBusinessDayConvention() bool {
	return m.Has(tag.ComplexEventDateBusinessDayConvention)
}

// HasNoComplexEventDateBusinessCenters returns true if NoComplexEventDateBusinessCenters is present, Tag 41018.
func (m NoComplexEvents) HasNoComplexEventDateBusinessCenters() bool {
	return m.Has(tag.NoComplexEventDateBusinessCenters)
}

// HasComplexEventDateAdjusted returns true if ComplexEventDateAdjusted is present, Tag 41026.
func (m NoComplexEvents) HasComplexEventDateAdjusted() bool {
	return m.Has(tag.ComplexEventDateAdjusted)
}

// HasComplexEventFixingTime returns true if ComplexEventFixingTime is present, Tag 41027.
func (m NoComplexEvents) HasComplexEventFixingTime() bool {
	return m.Has(tag.ComplexEventFixingTime)
}

// HasComplexEventFixingTimeBusinessCenter returns true if ComplexEventFixingTimeBusinessCenter is present, Tag 41028.
func (m NoComplexEvents) HasComplexEventFixingTimeBusinessCenter() bool {
	return m.Has(tag.ComplexEventFixingTimeBusinessCenter)
}

// HasNoComplexEventPeriods returns true if NoComplexEventPeriods is present, Tag 41010.
func (m NoComplexEvents) HasNoComplexEventPeriods() bool {
	return m.Has(tag.NoComplexEventPeriods)
}

// HasComplexEventCreditEventsXIDRef returns true if ComplexEventCreditEventsXIDRef is present, Tag 2133.
func (m NoComplexEvents) HasComplexEventCreditEventsXIDRef() bool {
	return m.Has(tag.ComplexEventCreditEventsXIDRef)
}

// HasComplexEventCreditEventNotifyingParty returns true if ComplexEventCreditEventNotifyingParty is present, Tag 2134.
func (m NoComplexEvents) HasComplexEventCreditEventNotifyingParty() bool {
	return m.Has(tag.ComplexEventCreditEventNotifyingParty)
}

// HasComplexEventCreditEventBusinessCenter returns true if ComplexEventCreditEventBusinessCenter is present, Tag 2135.
func (m NoComplexEvents) HasComplexEventCreditEventBusinessCenter() bool {
	return m.Has(tag.ComplexEventCreditEventBusinessCenter)
}

// HasComplexEventCreditEventStandardSources returns true if ComplexEventCreditEventStandardSources is present, Tag 2136.
func (m NoComplexEvents) HasComplexEventCreditEventStandardSources() bool {
	return m.Has(tag.ComplexEventCreditEventStandardSources)
}

// HasComplexEventCreditEventMinimumSources returns true if ComplexEventCreditEventMinimumSources is present, Tag 2137.
func (m NoComplexEvents) HasComplexEventCreditEventMinimumSources() bool {
	return m.Has(tag.ComplexEventCreditEventMinimumSources)
}

// HasNoComplexEventCreditEventSources returns true if NoComplexEventCreditEventSources is present, Tag 41029.
func (m NoComplexEvents) HasNoComplexEventCreditEventSources() bool {
	return m.Has(tag.NoComplexEventCreditEventSources)
}

// HasNoComplexEventCreditEvents returns true if NoComplexEventCreditEvents is present, Tag 40997.
func (m NoComplexEvents) HasNoComplexEventCreditEvents() bool {
	return m.Has(tag.NoComplexEventCreditEvents)
}

// HasComplexEventXID returns true if ComplexEventXID is present, Tag 2138.
func (m NoComplexEvents) HasComplexEventXID() bool {
	return m.Has(tag.ComplexEventXID)
}

// HasComplexEventXIDRef returns true if ComplexEventXIDRef is present, Tag 2139.
func (m NoComplexEvents) HasComplexEventXIDRef() bool {
	return m.Has(tag.ComplexEventXIDRef)
}

// HasComplexEventSpotRate returns true if ComplexEventSpotRate is present, Tag 2407.
func (m NoComplexEvents) HasComplexEventSpotRate() bool {
	return m.Has(tag.ComplexEventSpotRate)
}

// HasComplexEventForwardPoints returns true if ComplexEventForwardPoints is present, Tag 2408.
func (m NoComplexEvents) HasComplexEventForwardPoints() bool {
	return m.Has(tag.ComplexEventForwardPoints)
}

// HasComplexEventFuturesPriceValuation returns true if ComplexEventFuturesPriceValuation is present, Tag 2597.
func (m NoComplexEvents) HasComplexEventFuturesPriceValuation() bool {
	return m.Has(tag.ComplexEventFuturesPriceValuation)
}

// HasComplexEventOptionsPriceValuation returns true if ComplexEventOptionsPriceValuation is present, Tag 2598.
func (m NoComplexEvents) HasComplexEventOptionsPriceValuation() bool {
	return m.Has(tag.ComplexEventOptionsPriceValuation)
}

// HasComplexEventPVFinalPriceElectionFallback returns true if ComplexEventPVFinalPriceElectionFallback is present, Tag 2599.
func (m NoComplexEvents) HasComplexEventPVFinalPriceElectionFallback() bool {
	return m.Has(tag.ComplexEventPVFinalPriceElectionFallback)
}

// NoComplexEventDates is a repeating group element, Tag 1491.
type NoComplexEventDates struct {
	*quickfix.Group
}

// SetComplexEventStartDate sets ComplexEventStartDate, Tag 1492.
func (m NoComplexEventDates) SetComplexEventStartDate(v string) {
	m.Set(field.NewComplexEventStartDate(v))
}

// SetComplexEventEndDate sets ComplexEventEndDate, Tag 1493.
func (m NoComplexEventDates) SetComplexEventEndDate(v string) {
	m.Set(field.NewComplexEventEndDate(v))
}

// SetNoComplexEventTimes sets NoComplexEventTimes, Tag 1494.
func (m NoComplexEventDates) SetNoComplexEventTimes(f NoComplexEventTimesRepeatingGroup) {
	m.SetGroup(f)
}

// GetComplexEventStartDate gets ComplexEventStartDate, Tag 1492.
func (m NoComplexEventDates) GetComplexEventStartDate() (v string, err quickfix.MessageRejectError) {
	var f field.ComplexEventStartDateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetComplexEventEndDate gets ComplexEventEndDate, Tag 1493.
func (m NoComplexEventDates) GetComplexEventEndDate() (v string, err quickfix.MessageRejectError) {
	var f field.ComplexEventEndDateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoComplexEventTimes gets NoComplexEventTimes, Tag 1494.
func (m NoComplexEventDates) GetNoComplexEventTimes() (NoComplexEventTimesRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoComplexEventTimesRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// HasComplexEventStartDate returns true if ComplexEventStartDate is present, Tag 1492.
func (m NoComplexEventDates) HasComplexEventStartDate() bool {
	return m.Has(tag.ComplexEventStartDate)
}

// HasComplexEventEndDate returns true if ComplexEventEndDate is present, Tag 1493.
func (m NoComplexEventDates) HasComplexEventEndDate() bool {
	return m.Has(tag.ComplexEventEndDate)
}

// HasNoComplexEventTimes returns true if NoComplexEventTimes is present, Tag 1494.
func (m NoComplexEventDates) HasNoComplexEventTimes() bool {
	return m.Has(tag.NoComplexEventTimes)
}

// NoComplexEventTimes is a repeating group element, Tag 1494.
type NoComplexEventTimes struct {
	*quickfix.Group
}

// SetComplexEventStartTime sets ComplexEventStartTime, Tag 1495.
func (m NoComplexEventTimes) SetComplexEventStartTime(v string) {
	m.Set(field.NewComplexEventStartTime(v))
}

// SetComplexEventEndTime sets ComplexEventEndTime, Tag 1496.
func (m NoComplexEventTimes) SetComplexEventEndTime(v string) {
	m.Set(field.NewComplexEventEndTime(v))
}

// GetComplexEventStartTime gets ComplexEventStartTime, Tag 1495.
func (m NoComplexEventTimes) GetComplexEventStartTime() (v string, err quickfix.MessageRejectError) {
	var f field.ComplexEventStartTimeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetComplexEventEndTime gets ComplexEventEndTime, Tag 1496.
func (m NoComplexEventTimes) GetComplexEventEndTime() (v string, err quickfix.MessageRejectError) {
	var f field.ComplexEventEndTimeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasComplexEventStartTime returns true if ComplexEventStartTime is present, Tag 1495.
func (m NoComplexEventTimes) HasComplexEventStartTime() bool {
	return m.Has(tag.ComplexEventStartTime)
}

// HasComplexEventEndTime returns true if ComplexEventEndTime is present, Tag 1496.
func (m NoComplexEventTimes) HasComplexEventEndTime() bool {
	return m.Has(tag.ComplexEventEndTime)
}

// NoComplexEventTimesRepeatingGroup is a repeating group, Tag 1494.
type NoComplexEventTimesRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoComplexEventTimesRepeatingGroup returns an initialized, NoComplexEventTimesRepeatingGroup.
func NewNoComplexEventTimesRepeatingGroup() NoComplexEventTimesRepeatingGroup {
	return NoComplexEventTimesRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoComplexEventTimes,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.ComplexEventStartTime),
				quickfix.GroupElement(tag.ComplexEventEndTime),
			},
		),
	}
}

// Add create and append a new NoComplexEventTimes to this group.
func (m NoComplexEventTimesRepeatingGroup) Add() NoComplexEventTimes {
	g := m.RepeatingGroup.Add()
	return NoComplexEventTimes{g}
}

// Get returns the ith NoComplexEventTimes in the NoComplexEventTimesRepeatinGroup.
func (m NoComplexEventTimesRepeatingGroup) Get(i int) NoComplexEventTimes {
	return NoComplexEventTimes{m.RepeatingGroup.Get(i)}
}

// NoComplexEventDatesRepeatingGroup is a repeating group, Tag 1491.
type NoComplexEventDatesRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoComplexEventDatesRepeatingGroup returns an initialized, NoComplexEventDatesRepeatingGroup.
func NewNoComplexEventDatesRepeatingGroup() NoComplexEventDatesRepeatingGroup {
	return NoComplexEventDatesRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoComplexEventDates,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.ComplexEventStartDate),
				quickfix.GroupElement(tag.ComplexEventEndDate),
				NewNoComplexEventTimesRepeatingGroup(),
			},
		),
	}
}

// Add create and append a new NoComplexEventDates to this group.
func (m NoComplexEventDatesRepeatingGroup) Add() NoComplexEventDates {
	g := m.RepeatingGroup.Add()
	return NoComplexEventDates{g}
}

// Get returns the ith NoComplexEventDates in the NoComplexEventDatesRepeatinGroup.
func (m NoComplexEventDatesRepeatingGroup) Get(i int) NoComplexEventDates {
	return NoComplexEventDates{m.RepeatingGroup.Get(i)}
}

// NoComplexEventRateSources is a repeating group element, Tag 41013.
type NoComplexEventRateSources struct {
	*quickfix.Group
}

// SetComplexEventRateSource sets ComplexEventRateSource, Tag 41014.
func (m NoComplexEventRateSources) SetComplexEventRateSource(v int) {
	m.Set(field.NewComplexEventRateSource(v))
}

// SetComplexEventRateSourceType sets ComplexEventRateSourceType, Tag 41015.
func (m NoComplexEventRateSources) SetComplexEventRateSourceType(v int) {
	m.Set(field.NewComplexEventRateSourceType(v))
}

// SetComplexEventReferencePage sets ComplexEventReferencePage, Tag 41016.
func (m NoComplexEventRateSources) SetComplexEventReferencePage(v string) {
	m.Set(field.NewComplexEventReferencePage(v))
}

// SetComplexEventReferencePageHeading sets ComplexEventReferencePageHeading, Tag 41017.
func (m NoComplexEventRateSources) SetComplexEventReferencePageHeading(v string) {
	m.Set(field.NewComplexEventReferencePageHeading(v))
}

// GetComplexEventRateSource gets ComplexEventRateSource, Tag 41014.
func (m NoComplexEventRateSources) GetComplexEventRateSource() (v int, err quickfix.MessageRejectError) {
	var f field.ComplexEventRateSourceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetComplexEventRateSourceType gets ComplexEventRateSourceType, Tag 41015.
func (m NoComplexEventRateSources) GetComplexEventRateSourceType() (v int, err quickfix.MessageRejectError) {
	var f field.ComplexEventRateSourceTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetComplexEventReferencePage gets ComplexEventReferencePage, Tag 41016.
func (m NoComplexEventRateSources) GetComplexEventReferencePage() (v string, err quickfix.MessageRejectError) {
	var f field.ComplexEventReferencePageField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetComplexEventReferencePageHeading gets ComplexEventReferencePageHeading, Tag 41017.
func (m NoComplexEventRateSources) GetComplexEventReferencePageHeading() (v string, err quickfix.MessageRejectError) {
	var f field.ComplexEventReferencePageHeadingField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasComplexEventRateSource returns true if ComplexEventRateSource is present, Tag 41014.
func (m NoComplexEventRateSources) HasComplexEventRateSource() bool {
	return m.Has(tag.ComplexEventRateSource)
}

// HasComplexEventRateSourceType returns true if ComplexEventRateSourceType is present, Tag 41015.
func (m NoComplexEventRateSources) HasComplexEventRateSourceType() bool {
	return m.Has(tag.ComplexEventRateSourceType)
}

// HasComplexEventReferencePage returns true if ComplexEventReferencePage is present, Tag 41016.
func (m NoComplexEventRateSources) HasComplexEventReferencePage() bool {
	return m.Has(tag.ComplexEventReferencePage)
}

// HasComplexEventReferencePageHeading returns true if ComplexEventReferencePageHeading is present, Tag 41017.
func (m NoComplexEventRateSources) HasComplexEventReferencePageHeading() bool {
	return m.Has(tag.ComplexEventReferencePageHeading)
}

// NoComplexEventRateSourcesRepeatingGroup is a repeating group, Tag 41013.
type NoComplexEventRateSourcesRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoComplexEventRateSourcesRepeatingGroup returns an initialized, NoComplexEventRateSourcesRepeatingGroup.
func NewNoComplexEventRateSourcesRepeatingGroup() NoComplexEventRateSourcesRepeatingGroup {
	return NoComplexEventRateSourcesRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoComplexEventRateSources,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.ComplexEventRateSource),
				quickfix.GroupElement(tag.ComplexEventRateSourceType),
				quickfix.GroupElement(tag.ComplexEventReferencePage),
				quickfix.GroupElement(tag.ComplexEventReferencePageHeading),
			},
		),
	}
}

// Add create and append a new NoComplexEventRateSources to this group.
func (m NoComplexEventRateSourcesRepeatingGroup) Add() NoComplexEventRateSources {
	g := m.RepeatingGroup.Add()
	return NoComplexEventRateSources{g}
}

// Get returns the ith NoComplexEventRateSources in the NoComplexEventRateSourcesRepeatinGroup.
func (m NoComplexEventRateSourcesRepeatingGroup) Get(i int) NoComplexEventRateSources {
	return NoComplexEventRateSources{m.RepeatingGroup.Get(i)}
}

// NoComplexEventDateBusinessCenters is a repeating group element, Tag 41018.
type NoComplexEventDateBusinessCenters struct {
	*quickfix.Group
}

// SetComplexEventDateBusinessCenter sets ComplexEventDateBusinessCenter, Tag 41019.
func (m NoComplexEventDateBusinessCenters) SetComplexEventDateBusinessCenter(v string) {
	m.Set(field.NewComplexEventDateBusinessCenter(v))
}

// GetComplexEventDateBusinessCenter gets ComplexEventDateBusinessCenter, Tag 41019.
func (m NoComplexEventDateBusinessCenters) GetComplexEventDateBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.ComplexEventDateBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasComplexEventDateBusinessCenter returns true if ComplexEventDateBusinessCenter is present, Tag 41019.
func (m NoComplexEventDateBusinessCenters) HasComplexEventDateBusinessCenter() bool {
	return m.Has(tag.ComplexEventDateBusinessCenter)
}

// NoComplexEventDateBusinessCentersRepeatingGroup is a repeating group, Tag 41018.
type NoComplexEventDateBusinessCentersRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoComplexEventDateBusinessCentersRepeatingGroup returns an initialized, NoComplexEventDateBusinessCentersRepeatingGroup.
func NewNoComplexEventDateBusinessCentersRepeatingGroup() NoComplexEventDateBusinessCentersRepeatingGroup {
	return NoComplexEventDateBusinessCentersRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoComplexEventDateBusinessCenters,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.ComplexEventDateBusinessCenter),
			},
		),
	}
}

// Add create and append a new NoComplexEventDateBusinessCenters to this group.
func (m NoComplexEventDateBusinessCentersRepeatingGroup) Add() NoComplexEventDateBusinessCenters {
	g := m.RepeatingGroup.Add()
	return NoComplexEventDateBusinessCenters{g}
}

// Get returns the ith NoComplexEventDateBusinessCenters in the NoComplexEventDateBusinessCentersRepeatinGroup.
func (m NoComplexEventDateBusinessCentersRepeatingGroup) Get(i int) NoComplexEventDateBusinessCenters {
	return NoComplexEventDateBusinessCenters{m.RepeatingGroup.Get(i)}
}

// NoComplexEventPeriods is a repeating group element, Tag 41010.
type NoComplexEventPeriods struct {
	*quickfix.Group
}

// SetComplexEventPeriodType sets ComplexEventPeriodType, Tag 41011.
func (m NoComplexEventPeriods) SetComplexEventPeriodType(v enum.ComplexEventPeriodType) {
	m.Set(field.NewComplexEventPeriodType(v))
}

// SetComplexEventBusinessCenter sets ComplexEventBusinessCenter, Tag 41012.
func (m NoComplexEventPeriods) SetComplexEventBusinessCenter(v string) {
	m.Set(field.NewComplexEventBusinessCenter(v))
}

// SetNoComplexEventSchedules sets NoComplexEventSchedules, Tag 41031.
func (m NoComplexEventPeriods) SetNoComplexEventSchedules(f NoComplexEventSchedulesRepeatingGroup) {
	m.SetGroup(f)
}

// SetNoComplexEventPeriodDateTimes sets NoComplexEventPeriodDateTimes, Tag 41007.
func (m NoComplexEventPeriods) SetNoComplexEventPeriodDateTimes(f NoComplexEventPeriodDateTimesRepeatingGroup) {
	m.SetGroup(f)
}

// SetNoComplexEventAveragingObservations sets NoComplexEventAveragingObservations, Tag 40994.
func (m NoComplexEventPeriods) SetNoComplexEventAveragingObservations(f NoComplexEventAveragingObservationsRepeatingGroup) {
	m.SetGroup(f)
}

// GetComplexEventPeriodType gets ComplexEventPeriodType, Tag 41011.
func (m NoComplexEventPeriods) GetComplexEventPeriodType() (v enum.ComplexEventPeriodType, err quickfix.MessageRejectError) {
	var f field.ComplexEventPeriodTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetComplexEventBusinessCenter gets ComplexEventBusinessCenter, Tag 41012.
func (m NoComplexEventPeriods) GetComplexEventBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.ComplexEventBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoComplexEventSchedules gets NoComplexEventSchedules, Tag 41031.
func (m NoComplexEventPeriods) GetNoComplexEventSchedules() (NoComplexEventSchedulesRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoComplexEventSchedulesRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetNoComplexEventPeriodDateTimes gets NoComplexEventPeriodDateTimes, Tag 41007.
func (m NoComplexEventPeriods) GetNoComplexEventPeriodDateTimes() (NoComplexEventPeriodDateTimesRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoComplexEventPeriodDateTimesRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetNoComplexEventAveragingObservations gets NoComplexEventAveragingObservations, Tag 40994.
func (m NoComplexEventPeriods) GetNoComplexEventAveragingObservations() (NoComplexEventAveragingObservationsRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoComplexEventAveragingObservationsRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// HasComplexEventPeriodType returns true if ComplexEventPeriodType is present, Tag 41011.
func (m NoComplexEventPeriods) HasComplexEventPeriodType() bool {
	return m.Has(tag.ComplexEventPeriodType)
}

// HasComplexEventBusinessCenter returns true if ComplexEventBusinessCenter is present, Tag 41012.
func (m NoComplexEventPeriods) HasComplexEventBusinessCenter() bool {
	return m.Has(tag.ComplexEventBusinessCenter)
}

// HasNoComplexEventSchedules returns true if NoComplexEventSchedules is present, Tag 41031.
func (m NoComplexEventPeriods) HasNoComplexEventSchedules() bool {
	return m.Has(tag.NoComplexEventSchedules)
}

// HasNoComplexEventPeriodDateTimes returns true if NoComplexEventPeriodDateTimes is present, Tag 41007.
func (m NoComplexEventPeriods) HasNoComplexEventPeriodDateTimes() bool {
	return m.Has(tag.NoComplexEventPeriodDateTimes)
}

// HasNoComplexEventAveragingObservations returns true if NoComplexEventAveragingObservations is present, Tag 40994.
func (m NoComplexEventPeriods) HasNoComplexEventAveragingObservations() bool {
	return m.Has(tag.NoComplexEventAveragingObservations)
}

// NoComplexEventSchedules is a repeating group element, Tag 41031.
type NoComplexEventSchedules struct {
	*quickfix.Group
}

// SetComplexEventScheduleStartDate sets ComplexEventScheduleStartDate, Tag 41032.
func (m NoComplexEventSchedules) SetComplexEventScheduleStartDate(v string) {
	m.Set(field.NewComplexEventScheduleStartDate(v))
}

// SetComplexEventScheduleEndDate sets ComplexEventScheduleEndDate, Tag 41033.
func (m NoComplexEventSchedules) SetComplexEventScheduleEndDate(v string) {
	m.Set(field.NewComplexEventScheduleEndDate(v))
}

// SetComplexEventScheduleFrequencyPeriod sets ComplexEventScheduleFrequencyPeriod, Tag 41034.
func (m NoComplexEventSchedules) SetComplexEventScheduleFrequencyPeriod(v int) {
	m.Set(field.NewComplexEventScheduleFrequencyPeriod(v))
}

// SetComplexEventScheduleFrequencyUnit sets ComplexEventScheduleFrequencyUnit, Tag 41035.
func (m NoComplexEventSchedules) SetComplexEventScheduleFrequencyUnit(v string) {
	m.Set(field.NewComplexEventScheduleFrequencyUnit(v))
}

// SetComplexEventScheduleRollConvention sets ComplexEventScheduleRollConvention, Tag 41036.
func (m NoComplexEventSchedules) SetComplexEventScheduleRollConvention(v string) {
	m.Set(field.NewComplexEventScheduleRollConvention(v))
}

// GetComplexEventScheduleStartDate gets ComplexEventScheduleStartDate, Tag 41032.
func (m NoComplexEventSchedules) GetComplexEventScheduleStartDate() (v string, err quickfix.MessageRejectError) {
	var f field.ComplexEventScheduleStartDateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetComplexEventScheduleEndDate gets ComplexEventScheduleEndDate, Tag 41033.
func (m NoComplexEventSchedules) GetComplexEventScheduleEndDate() (v string, err quickfix.MessageRejectError) {
	var f field.ComplexEventScheduleEndDateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetComplexEventScheduleFrequencyPeriod gets ComplexEventScheduleFrequencyPeriod, Tag 41034.
func (m NoComplexEventSchedules) GetComplexEventScheduleFrequencyPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.ComplexEventScheduleFrequencyPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetComplexEventScheduleFrequencyUnit gets ComplexEventScheduleFrequencyUnit, Tag 41035.
func (m NoComplexEventSchedules) GetComplexEventScheduleFrequencyUnit() (v string, err quickfix.MessageRejectError) {
	var f field.ComplexEventScheduleFrequencyUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetComplexEventScheduleRollConvention gets ComplexEventScheduleRollConvention, Tag 41036.
func (m NoComplexEventSchedules) GetComplexEventScheduleRollConvention() (v string, err quickfix.MessageRejectError) {
	var f field.ComplexEventScheduleRollConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasComplexEventScheduleStartDate returns true if ComplexEventScheduleStartDate is present, Tag 41032.
func (m NoComplexEventSchedules) HasComplexEventScheduleStartDate() bool {
	return m.Has(tag.ComplexEventScheduleStartDate)
}

// HasComplexEventScheduleEndDate returns true if ComplexEventScheduleEndDate is present, Tag 41033.
func (m NoComplexEventSchedules) HasComplexEventScheduleEndDate() bool {
	return m.Has(tag.ComplexEventScheduleEndDate)
}

// HasComplexEventScheduleFrequencyPeriod returns true if ComplexEventScheduleFrequencyPeriod is present, Tag 41034.
func (m NoComplexEventSchedules) HasComplexEventScheduleFrequencyPeriod() bool {
	return m.Has(tag.ComplexEventScheduleFrequencyPeriod)
}

// HasComplexEventScheduleFrequencyUnit returns true if ComplexEventScheduleFrequencyUnit is present, Tag 41035.
func (m NoComplexEventSchedules) HasComplexEventScheduleFrequencyUnit() bool {
	return m.Has(tag.ComplexEventScheduleFrequencyUnit)
}

// HasComplexEventScheduleRollConvention returns true if ComplexEventScheduleRollConvention is present, Tag 41036.
func (m NoComplexEventSchedules) HasComplexEventScheduleRollConvention() bool {
	return m.Has(tag.ComplexEventScheduleRollConvention)
}

// NoComplexEventSchedulesRepeatingGroup is a repeating group, Tag 41031.
type NoComplexEventSchedulesRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoComplexEventSchedulesRepeatingGroup returns an initialized, NoComplexEventSchedulesRepeatingGroup.
func NewNoComplexEventSchedulesRepeatingGroup() NoComplexEventSchedulesRepeatingGroup {
	return NoComplexEventSchedulesRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoComplexEventSchedules,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.ComplexEventScheduleStartDate),
				quickfix.GroupElement(tag.ComplexEventScheduleEndDate),
				quickfix.GroupElement(tag.ComplexEventScheduleFrequencyPeriod),
				quickfix.GroupElement(tag.ComplexEventScheduleFrequencyUnit),
				quickfix.GroupElement(tag.ComplexEventScheduleRollConvention),
			},
		),
	}
}

// Add create and append a new NoComplexEventSchedules to this group.
func (m NoComplexEventSchedulesRepeatingGroup) Add() NoComplexEventSchedules {
	g := m.RepeatingGroup.Add()
	return NoComplexEventSchedules{g}
}

// Get returns the ith NoComplexEventSchedules in the NoComplexEventSchedulesRepeatinGroup.
func (m NoComplexEventSchedulesRepeatingGroup) Get(i int) NoComplexEventSchedules {
	return NoComplexEventSchedules{m.RepeatingGroup.Get(i)}
}

// NoComplexEventPeriodDateTimes is a repeating group element, Tag 41007.
type NoComplexEventPeriodDateTimes struct {
	*quickfix.Group
}

// SetComplexEventPeriodDate sets ComplexEventPeriodDate, Tag 41008.
func (m NoComplexEventPeriodDateTimes) SetComplexEventPeriodDate(v string) {
	m.Set(field.NewComplexEventPeriodDate(v))
}

// SetComplexEventPeriodTime sets ComplexEventPeriodTime, Tag 41009.
func (m NoComplexEventPeriodDateTimes) SetComplexEventPeriodTime(v string) {
	m.Set(field.NewComplexEventPeriodTime(v))
}

// GetComplexEventPeriodDate gets ComplexEventPeriodDate, Tag 41008.
func (m NoComplexEventPeriodDateTimes) GetComplexEventPeriodDate() (v string, err quickfix.MessageRejectError) {
	var f field.ComplexEventPeriodDateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetComplexEventPeriodTime gets ComplexEventPeriodTime, Tag 41009.
func (m NoComplexEventPeriodDateTimes) GetComplexEventPeriodTime() (v string, err quickfix.MessageRejectError) {
	var f field.ComplexEventPeriodTimeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasComplexEventPeriodDate returns true if ComplexEventPeriodDate is present, Tag 41008.
func (m NoComplexEventPeriodDateTimes) HasComplexEventPeriodDate() bool {
	return m.Has(tag.ComplexEventPeriodDate)
}

// HasComplexEventPeriodTime returns true if ComplexEventPeriodTime is present, Tag 41009.
func (m NoComplexEventPeriodDateTimes) HasComplexEventPeriodTime() bool {
	return m.Has(tag.ComplexEventPeriodTime)
}

// NoComplexEventPeriodDateTimesRepeatingGroup is a repeating group, Tag 41007.
type NoComplexEventPeriodDateTimesRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoComplexEventPeriodDateTimesRepeatingGroup returns an initialized, NoComplexEventPeriodDateTimesRepeatingGroup.
func NewNoComplexEventPeriodDateTimesRepeatingGroup() NoComplexEventPeriodDateTimesRepeatingGroup {
	return NoComplexEventPeriodDateTimesRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoComplexEventPeriodDateTimes,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.ComplexEventPeriodDate),
				quickfix.GroupElement(tag.ComplexEventPeriodTime),
			},
		),
	}
}

// Add create and append a new NoComplexEventPeriodDateTimes to this group.
func (m NoComplexEventPeriodDateTimesRepeatingGroup) Add() NoComplexEventPeriodDateTimes {
	g := m.RepeatingGroup.Add()
	return NoComplexEventPeriodDateTimes{g}
}

// Get returns the ith NoComplexEventPeriodDateTimes in the NoComplexEventPeriodDateTimesRepeatinGroup.
func (m NoComplexEventPeriodDateTimesRepeatingGroup) Get(i int) NoComplexEventPeriodDateTimes {
	return NoComplexEventPeriodDateTimes{m.RepeatingGroup.Get(i)}
}

// NoComplexEventAveragingObservations is a repeating group element, Tag 40994.
type NoComplexEventAveragingObservations struct {
	*quickfix.Group
}

// SetComplexEventAveragingObservationNumber sets ComplexEventAveragingObservationNumber, Tag 40995.
func (m NoComplexEventAveragingObservations) SetComplexEventAveragingObservationNumber(v int) {
	m.Set(field.NewComplexEventAveragingObservationNumber(v))
}

// SetComplexEventAveragingWeight sets ComplexEventAveragingWeight, Tag 40996.
func (m NoComplexEventAveragingObservations) SetComplexEventAveragingWeight(value decimal.Decimal, scale int32) {
	m.Set(field.NewComplexEventAveragingWeight(value, scale))
}

// GetComplexEventAveragingObservationNumber gets ComplexEventAveragingObservationNumber, Tag 40995.
func (m NoComplexEventAveragingObservations) GetComplexEventAveragingObservationNumber() (v int, err quickfix.MessageRejectError) {
	var f field.ComplexEventAveragingObservationNumberField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetComplexEventAveragingWeight gets ComplexEventAveragingWeight, Tag 40996.
func (m NoComplexEventAveragingObservations) GetComplexEventAveragingWeight() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.ComplexEventAveragingWeightField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasComplexEventAveragingObservationNumber returns true if ComplexEventAveragingObservationNumber is present, Tag 40995.
func (m NoComplexEventAveragingObservations) HasComplexEventAveragingObservationNumber() bool {
	return m.Has(tag.ComplexEventAveragingObservationNumber)
}

// HasComplexEventAveragingWeight returns true if ComplexEventAveragingWeight is present, Tag 40996.
func (m NoComplexEventAveragingObservations) HasComplexEventAveragingWeight() bool {
	return m.Has(tag.ComplexEventAveragingWeight)
}

// NoComplexEventAveragingObservationsRepeatingGroup is a repeating group, Tag 40994.
type NoComplexEventAveragingObservationsRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoComplexEventAveragingObservationsRepeatingGroup returns an initialized, NoComplexEventAveragingObservationsRepeatingGroup.
func NewNoComplexEventAveragingObservationsRepeatingGroup() NoComplexEventAveragingObservationsRepeatingGroup {
	return NoComplexEventAveragingObservationsRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoComplexEventAveragingObservations,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.ComplexEventAveragingObservationNumber),
				quickfix.GroupElement(tag.ComplexEventAveragingWeight),
			},
		),
	}
}

// Add create and append a new NoComplexEventAveragingObservations to this group.
func (m NoComplexEventAveragingObservationsRepeatingGroup) Add() NoComplexEventAveragingObservations {
	g := m.RepeatingGroup.Add()
	return NoComplexEventAveragingObservations{g}
}

// Get returns the ith NoComplexEventAveragingObservations in the NoComplexEventAveragingObservationsRepeatinGroup.
func (m NoComplexEventAveragingObservationsRepeatingGroup) Get(i int) NoComplexEventAveragingObservations {
	return NoComplexEventAveragingObservations{m.RepeatingGroup.Get(i)}
}

// NoComplexEventPeriodsRepeatingGroup is a repeating group, Tag 41010.
type NoComplexEventPeriodsRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoComplexEventPeriodsRepeatingGroup returns an initialized, NoComplexEventPeriodsRepeatingGroup.
func NewNoComplexEventPeriodsRepeatingGroup() NoComplexEventPeriodsRepeatingGroup {
	return NoComplexEventPeriodsRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoComplexEventPeriods,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.ComplexEventPeriodType),
				quickfix.GroupElement(tag.ComplexEventBusinessCenter),
				NewNoComplexEventSchedulesRepeatingGroup(),
				NewNoComplexEventPeriodDateTimesRepeatingGroup(),
				NewNoComplexEventAveragingObservationsRepeatingGroup(),
			},
		),
	}
}

// Add create and append a new NoComplexEventPeriods to this group.
func (m NoComplexEventPeriodsRepeatingGroup) Add() NoComplexEventPeriods {
	g := m.RepeatingGroup.Add()
	return NoComplexEventPeriods{g}
}

// Get returns the ith NoComplexEventPeriods in the NoComplexEventPeriodsRepeatinGroup.
func (m NoComplexEventPeriodsRepeatingGroup) Get(i int) NoComplexEventPeriods {
	return NoComplexEventPeriods{m.RepeatingGroup.Get(i)}
}

// NoComplexEventCreditEventSources is a repeating group element, Tag 41029.
type NoComplexEventCreditEventSources struct {
	*quickfix.Group
}

// SetComplexEventCreditEventSource sets ComplexEventCreditEventSource, Tag 41030.
func (m NoComplexEventCreditEventSources) SetComplexEventCreditEventSource(v string) {
	m.Set(field.NewComplexEventCreditEventSource(v))
}

// GetComplexEventCreditEventSource gets ComplexEventCreditEventSource, Tag 41030.
func (m NoComplexEventCreditEventSources) GetComplexEventCreditEventSource() (v string, err quickfix.MessageRejectError) {
	var f field.ComplexEventCreditEventSourceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasComplexEventCreditEventSource returns true if ComplexEventCreditEventSource is present, Tag 41030.
func (m NoComplexEventCreditEventSources) HasComplexEventCreditEventSource() bool {
	return m.Has(tag.ComplexEventCreditEventSource)
}

// NoComplexEventCreditEventSourcesRepeatingGroup is a repeating group, Tag 41029.
type NoComplexEventCreditEventSourcesRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoComplexEventCreditEventSourcesRepeatingGroup returns an initialized, NoComplexEventCreditEventSourcesRepeatingGroup.
func NewNoComplexEventCreditEventSourcesRepeatingGroup() NoComplexEventCreditEventSourcesRepeatingGroup {
	return NoComplexEventCreditEventSourcesRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoComplexEventCreditEventSources,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.ComplexEventCreditEventSource),
			},
		),
	}
}

// Add create and append a new NoComplexEventCreditEventSources to this group.
func (m NoComplexEventCreditEventSourcesRepeatingGroup) Add() NoComplexEventCreditEventSources {
	g := m.RepeatingGroup.Add()
	return NoComplexEventCreditEventSources{g}
}

// Get returns the ith NoComplexEventCreditEventSources in the NoComplexEventCreditEventSourcesRepeatinGroup.
func (m NoComplexEventCreditEventSourcesRepeatingGroup) Get(i int) NoComplexEventCreditEventSources {
	return NoComplexEventCreditEventSources{m.RepeatingGroup.Get(i)}
}

// NoComplexEventCreditEvents is a repeating group element, Tag 40997.
type NoComplexEventCreditEvents struct {
	*quickfix.Group
}

// SetComplexEventCreditEventType sets ComplexEventCreditEventType, Tag 40998.
func (m NoComplexEventCreditEvents) SetComplexEventCreditEventType(v string) {
	m.Set(field.NewComplexEventCreditEventType(v))
}

// SetComplexEventCreditEventValue sets ComplexEventCreditEventValue, Tag 40999.
func (m NoComplexEventCreditEvents) SetComplexEventCreditEventValue(v string) {
	m.Set(field.NewComplexEventCreditEventValue(v))
}

// SetComplexEventCreditEventCurrency sets ComplexEventCreditEventCurrency, Tag 41000.
func (m NoComplexEventCreditEvents) SetComplexEventCreditEventCurrency(v string) {
	m.Set(field.NewComplexEventCreditEventCurrency(v))
}

// SetComplexEventCreditEventPeriod sets ComplexEventCreditEventPeriod, Tag 41001.
func (m NoComplexEventCreditEvents) SetComplexEventCreditEventPeriod(v int) {
	m.Set(field.NewComplexEventCreditEventPeriod(v))
}

// SetComplexEventCreditEventUnit sets ComplexEventCreditEventUnit, Tag 41002.
func (m NoComplexEventCreditEvents) SetComplexEventCreditEventUnit(v string) {
	m.Set(field.NewComplexEventCreditEventUnit(v))
}

// SetComplexEventCreditEventDayType sets ComplexEventCreditEventDayType, Tag 41003.
func (m NoComplexEventCreditEvents) SetComplexEventCreditEventDayType(v int) {
	m.Set(field.NewComplexEventCreditEventDayType(v))
}

// SetComplexEventCreditEventRateSource sets ComplexEventCreditEventRateSource, Tag 41004.
func (m NoComplexEventCreditEvents) SetComplexEventCreditEventRateSource(v int) {
	m.Set(field.NewComplexEventCreditEventRateSource(v))
}

// SetNoComplexEventCreditEventQualifiers sets NoComplexEventCreditEventQualifiers, Tag 41005.
func (m NoComplexEventCreditEvents) SetNoComplexEventCreditEventQualifiers(f NoComplexEventCreditEventQualifiersRepeatingGroup) {
	m.SetGroup(f)
}

// GetComplexEventCreditEventType gets ComplexEventCreditEventType, Tag 40998.
func (m NoComplexEventCreditEvents) GetComplexEventCreditEventType() (v string, err quickfix.MessageRejectError) {
	var f field.ComplexEventCreditEventTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetComplexEventCreditEventValue gets ComplexEventCreditEventValue, Tag 40999.
func (m NoComplexEventCreditEvents) GetComplexEventCreditEventValue() (v string, err quickfix.MessageRejectError) {
	var f field.ComplexEventCreditEventValueField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetComplexEventCreditEventCurrency gets ComplexEventCreditEventCurrency, Tag 41000.
func (m NoComplexEventCreditEvents) GetComplexEventCreditEventCurrency() (v string, err quickfix.MessageRejectError) {
	var f field.ComplexEventCreditEventCurrencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetComplexEventCreditEventPeriod gets ComplexEventCreditEventPeriod, Tag 41001.
func (m NoComplexEventCreditEvents) GetComplexEventCreditEventPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.ComplexEventCreditEventPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetComplexEventCreditEventUnit gets ComplexEventCreditEventUnit, Tag 41002.
func (m NoComplexEventCreditEvents) GetComplexEventCreditEventUnit() (v string, err quickfix.MessageRejectError) {
	var f field.ComplexEventCreditEventUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetComplexEventCreditEventDayType gets ComplexEventCreditEventDayType, Tag 41003.
func (m NoComplexEventCreditEvents) GetComplexEventCreditEventDayType() (v int, err quickfix.MessageRejectError) {
	var f field.ComplexEventCreditEventDayTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetComplexEventCreditEventRateSource gets ComplexEventCreditEventRateSource, Tag 41004.
func (m NoComplexEventCreditEvents) GetComplexEventCreditEventRateSource() (v int, err quickfix.MessageRejectError) {
	var f field.ComplexEventCreditEventRateSourceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoComplexEventCreditEventQualifiers gets NoComplexEventCreditEventQualifiers, Tag 41005.
func (m NoComplexEventCreditEvents) GetNoComplexEventCreditEventQualifiers() (NoComplexEventCreditEventQualifiersRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoComplexEventCreditEventQualifiersRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// HasComplexEventCreditEventType returns true if ComplexEventCreditEventType is present, Tag 40998.
func (m NoComplexEventCreditEvents) HasComplexEventCreditEventType() bool {
	return m.Has(tag.ComplexEventCreditEventType)
}

// HasComplexEventCreditEventValue returns true if ComplexEventCreditEventValue is present, Tag 40999.
func (m NoComplexEventCreditEvents) HasComplexEventCreditEventValue() bool {
	return m.Has(tag.ComplexEventCreditEventValue)
}

// HasComplexEventCreditEventCurrency returns true if ComplexEventCreditEventCurrency is present, Tag 41000.
func (m NoComplexEventCreditEvents) HasComplexEventCreditEventCurrency() bool {
	return m.Has(tag.ComplexEventCreditEventCurrency)
}

// HasComplexEventCreditEventPeriod returns true if ComplexEventCreditEventPeriod is present, Tag 41001.
func (m NoComplexEventCreditEvents) HasComplexEventCreditEventPeriod() bool {
	return m.Has(tag.ComplexEventCreditEventPeriod)
}

// HasComplexEventCreditEventUnit returns true if ComplexEventCreditEventUnit is present, Tag 41002.
func (m NoComplexEventCreditEvents) HasComplexEventCreditEventUnit() bool {
	return m.Has(tag.ComplexEventCreditEventUnit)
}

// HasComplexEventCreditEventDayType returns true if ComplexEventCreditEventDayType is present, Tag 41003.
func (m NoComplexEventCreditEvents) HasComplexEventCreditEventDayType() bool {
	return m.Has(tag.ComplexEventCreditEventDayType)
}

// HasComplexEventCreditEventRateSource returns true if ComplexEventCreditEventRateSource is present, Tag 41004.
func (m NoComplexEventCreditEvents) HasComplexEventCreditEventRateSource() bool {
	return m.Has(tag.ComplexEventCreditEventRateSource)
}

// HasNoComplexEventCreditEventQualifiers returns true if NoComplexEventCreditEventQualifiers is present, Tag 41005.
func (m NoComplexEventCreditEvents) HasNoComplexEventCreditEventQualifiers() bool {
	return m.Has(tag.NoComplexEventCreditEventQualifiers)
}

// NoComplexEventCreditEventQualifiers is a repeating group element, Tag 41005.
type NoComplexEventCreditEventQualifiers struct {
	*quickfix.Group
}

// SetComplexEventCreditEventQualifier sets ComplexEventCreditEventQualifier, Tag 41006.
func (m NoComplexEventCreditEventQualifiers) SetComplexEventCreditEventQualifier(v string) {
	m.Set(field.NewComplexEventCreditEventQualifier(v))
}

// GetComplexEventCreditEventQualifier gets ComplexEventCreditEventQualifier, Tag 41006.
func (m NoComplexEventCreditEventQualifiers) GetComplexEventCreditEventQualifier() (v string, err quickfix.MessageRejectError) {
	var f field.ComplexEventCreditEventQualifierField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasComplexEventCreditEventQualifier returns true if ComplexEventCreditEventQualifier is present, Tag 41006.
func (m NoComplexEventCreditEventQualifiers) HasComplexEventCreditEventQualifier() bool {
	return m.Has(tag.ComplexEventCreditEventQualifier)
}

// NoComplexEventCreditEventQualifiersRepeatingGroup is a repeating group, Tag 41005.
type NoComplexEventCreditEventQualifiersRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoComplexEventCreditEventQualifiersRepeatingGroup returns an initialized, NoComplexEventCreditEventQualifiersRepeatingGroup.
func NewNoComplexEventCreditEventQualifiersRepeatingGroup() NoComplexEventCreditEventQualifiersRepeatingGroup {
	return NoComplexEventCreditEventQualifiersRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoComplexEventCreditEventQualifiers,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.ComplexEventCreditEventQualifier),
			},
		),
	}
}

// Add create and append a new NoComplexEventCreditEventQualifiers to this group.
func (m NoComplexEventCreditEventQualifiersRepeatingGroup) Add() NoComplexEventCreditEventQualifiers {
	g := m.RepeatingGroup.Add()
	return NoComplexEventCreditEventQualifiers{g}
}

// Get returns the ith NoComplexEventCreditEventQualifiers in the NoComplexEventCreditEventQualifiersRepeatinGroup.
func (m NoComplexEventCreditEventQualifiersRepeatingGroup) Get(i int) NoComplexEventCreditEventQualifiers {
	return NoComplexEventCreditEventQualifiers{m.RepeatingGroup.Get(i)}
}

// NoComplexEventCreditEventsRepeatingGroup is a repeating group, Tag 40997.
type NoComplexEventCreditEventsRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoComplexEventCreditEventsRepeatingGroup returns an initialized, NoComplexEventCreditEventsRepeatingGroup.
func NewNoComplexEventCreditEventsRepeatingGroup() NoComplexEventCreditEventsRepeatingGroup {
	return NoComplexEventCreditEventsRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoComplexEventCreditEvents,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.ComplexEventCreditEventType),
				quickfix.GroupElement(tag.ComplexEventCreditEventValue),
				quickfix.GroupElement(tag.ComplexEventCreditEventCurrency),
				quickfix.GroupElement(tag.ComplexEventCreditEventPeriod),
				quickfix.GroupElement(tag.ComplexEventCreditEventUnit),
				quickfix.GroupElement(tag.ComplexEventCreditEventDayType),
				quickfix.GroupElement(tag.ComplexEventCreditEventRateSource),
				NewNoComplexEventCreditEventQualifiersRepeatingGroup(),
			},
		),
	}
}

// Add create and append a new NoComplexEventCreditEvents to this group.
func (m NoComplexEventCreditEventsRepeatingGroup) Add() NoComplexEventCreditEvents {
	g := m.RepeatingGroup.Add()
	return NoComplexEventCreditEvents{g}
}

// Get returns the ith NoComplexEventCreditEvents in the NoComplexEventCreditEventsRepeatinGroup.
func (m NoComplexEventCreditEventsRepeatingGroup) Get(i int) NoComplexEventCreditEvents {
	return NoComplexEventCreditEvents{m.RepeatingGroup.Get(i)}
}

// NoComplexEventsRepeatingGroup is a repeating group, Tag 1483.
type NoComplexEventsRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoComplexEventsRepeatingGroup returns an initialized, NoComplexEventsRepeatingGroup.
func NewNoComplexEventsRepeatingGroup() NoComplexEventsRepeatingGroup {
	return NoComplexEventsRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoComplexEvents,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.ComplexEventType),
				quickfix.GroupElement(tag.ComplexOptPayoutAmount),
				quickfix.GroupElement(tag.ComplexEventPrice),
				quickfix.GroupElement(tag.ComplexEventPriceBoundaryMethod),
				quickfix.GroupElement(tag.ComplexEventPriceBoundaryPrecision),
				quickfix.GroupElement(tag.ComplexEventPriceTimeType),
				quickfix.GroupElement(tag.ComplexEventCondition),
				NewNoComplexEventDatesRepeatingGroup(),
				quickfix.GroupElement(tag.ComplexOptPayoutPaySide),
				quickfix.GroupElement(tag.ComplexOptPayoutReceiveSide),
				quickfix.GroupElement(tag.ComplexOptPayoutUnderlier),
				quickfix.GroupElement(tag.ComplexOptPayoutPercentage),
				quickfix.GroupElement(tag.ComplexOptPayoutTime),
				quickfix.GroupElement(tag.ComplexOptPayoutCurrency),
				quickfix.GroupElement(tag.ComplexEventPricePercentage),
				quickfix.GroupElement(tag.ComplexEventCurrencyOne),
				quickfix.GroupElement(tag.ComplexEventCurrencyTwo),
				quickfix.GroupElement(tag.ComplexEventQuoteBasis),
				quickfix.GroupElement(tag.ComplexEventFixedFXRate),
				quickfix.GroupElement(tag.ComplexEventDeterminationMethod),
				quickfix.GroupElement(tag.ComplexEventCalculationAgent),
				quickfix.GroupElement(tag.ComplexEventStrikePrice),
				quickfix.GroupElement(tag.ComplexEventStrikeFactor),
				quickfix.GroupElement(tag.ComplexEventStrikeNumberOfOptions),
				NewNoComplexEventRateSourcesRepeatingGroup(),
				quickfix.GroupElement(tag.ComplexEventDateUnadjusted),
				quickfix.GroupElement(tag.ComplexEventDateRelativeTo),
				quickfix.GroupElement(tag.ComplexEventDateOffsetPeriod),
				quickfix.GroupElement(tag.ComplexEventDateOffsetUnit),
				quickfix.GroupElement(tag.ComplexEventDateOffsetDayType),
				quickfix.GroupElement(tag.ComplexEventDateBusinessDayConvention),
				NewNoComplexEventDateBusinessCentersRepeatingGroup(),
				quickfix.GroupElement(tag.ComplexEventDateAdjusted),
				quickfix.GroupElement(tag.ComplexEventFixingTime),
				quickfix.GroupElement(tag.ComplexEventFixingTimeBusinessCenter),
				NewNoComplexEventPeriodsRepeatingGroup(),
				quickfix.GroupElement(tag.ComplexEventCreditEventsXIDRef),
				quickfix.GroupElement(tag.ComplexEventCreditEventNotifyingParty),
				quickfix.GroupElement(tag.ComplexEventCreditEventBusinessCenter),
				quickfix.GroupElement(tag.ComplexEventCreditEventStandardSources),
				quickfix.GroupElement(tag.ComplexEventCreditEventMinimumSources),
				NewNoComplexEventCreditEventSourcesRepeatingGroup(),
				NewNoComplexEventCreditEventsRepeatingGroup(),
				quickfix.GroupElement(tag.ComplexEventXID),
				quickfix.GroupElement(tag.ComplexEventXIDRef),
				quickfix.GroupElement(tag.ComplexEventSpotRate),
				quickfix.GroupElement(tag.ComplexEventForwardPoints),
				quickfix.GroupElement(tag.ComplexEventFuturesPriceValuation),
				quickfix.GroupElement(tag.ComplexEventOptionsPriceValuation),
				quickfix.GroupElement(tag.ComplexEventPVFinalPriceElectionFallback),
			},
		),
	}
}

// Add create and append a new NoComplexEvents to this group.
func (m NoComplexEventsRepeatingGroup) Add() NoComplexEvents {
	g := m.RepeatingGroup.Add()
	return NoComplexEvents{g}
}

// Get returns the ith NoComplexEvents in the NoComplexEventsRepeatinGroup.
func (m NoComplexEventsRepeatingGroup) Get(i int) NoComplexEvents {
	return NoComplexEvents{m.RepeatingGroup.Get(i)}
}

// NoSecondaryAssetClasses is a repeating group element, Tag 1976.
type NoSecondaryAssetClasses struct {
	*quickfix.Group
}

// SetSecondaryAssetClass sets SecondaryAssetClass, Tag 1977.
func (m NoSecondaryAssetClasses) SetSecondaryAssetClass(v int) {
	m.Set(field.NewSecondaryAssetClass(v))
}

// SetSecondaryAssetSubClass sets SecondaryAssetSubClass, Tag 1978.
func (m NoSecondaryAssetClasses) SetSecondaryAssetSubClass(v int) {
	m.Set(field.NewSecondaryAssetSubClass(v))
}

// SetSecondaryAssetType sets SecondaryAssetType, Tag 1979.
func (m NoSecondaryAssetClasses) SetSecondaryAssetType(v string) {
	m.Set(field.NewSecondaryAssetType(v))
}

// SetSecondaryAssetSubType sets SecondaryAssetSubType, Tag 2741.
func (m NoSecondaryAssetClasses) SetSecondaryAssetSubType(v string) {
	m.Set(field.NewSecondaryAssetSubType(v))
}

// GetSecondaryAssetClass gets SecondaryAssetClass, Tag 1977.
func (m NoSecondaryAssetClasses) GetSecondaryAssetClass() (v int, err quickfix.MessageRejectError) {
	var f field.SecondaryAssetClassField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetSecondaryAssetSubClass gets SecondaryAssetSubClass, Tag 1978.
func (m NoSecondaryAssetClasses) GetSecondaryAssetSubClass() (v int, err quickfix.MessageRejectError) {
	var f field.SecondaryAssetSubClassField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetSecondaryAssetType gets SecondaryAssetType, Tag 1979.
func (m NoSecondaryAssetClasses) GetSecondaryAssetType() (v string, err quickfix.MessageRejectError) {
	var f field.SecondaryAssetTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetSecondaryAssetSubType gets SecondaryAssetSubType, Tag 2741.
func (m NoSecondaryAssetClasses) GetSecondaryAssetSubType() (v string, err quickfix.MessageRejectError) {
	var f field.SecondaryAssetSubTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasSecondaryAssetClass returns true if SecondaryAssetClass is present, Tag 1977.
func (m NoSecondaryAssetClasses) HasSecondaryAssetClass() bool {
	return m.Has(tag.SecondaryAssetClass)
}

// HasSecondaryAssetSubClass returns true if SecondaryAssetSubClass is present, Tag 1978.
func (m NoSecondaryAssetClasses) HasSecondaryAssetSubClass() bool {
	return m.Has(tag.SecondaryAssetSubClass)
}

// HasSecondaryAssetType returns true if SecondaryAssetType is present, Tag 1979.
func (m NoSecondaryAssetClasses) HasSecondaryAssetType() bool {
	return m.Has(tag.SecondaryAssetType)
}

// HasSecondaryAssetSubType returns true if SecondaryAssetSubType is present, Tag 2741.
func (m NoSecondaryAssetClasses) HasSecondaryAssetSubType() bool {
	return m.Has(tag.SecondaryAssetSubType)
}

// NoSecondaryAssetClassesRepeatingGroup is a repeating group, Tag 1976.
type NoSecondaryAssetClassesRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoSecondaryAssetClassesRepeatingGroup returns an initialized, NoSecondaryAssetClassesRepeatingGroup.
func NewNoSecondaryAssetClassesRepeatingGroup() NoSecondaryAssetClassesRepeatingGroup {
	return NoSecondaryAssetClassesRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoSecondaryAssetClasses,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.SecondaryAssetClass),
				quickfix.GroupElement(tag.SecondaryAssetSubClass),
				quickfix.GroupElement(tag.SecondaryAssetType),
				quickfix.GroupElement(tag.SecondaryAssetSubType),
			},
		),
	}
}

// Add create and append a new NoSecondaryAssetClasses to this group.
func (m NoSecondaryAssetClassesRepeatingGroup) Add() NoSecondaryAssetClasses {
	g := m.RepeatingGroup.Add()
	return NoSecondaryAssetClasses{g}
}

// Get returns the ith NoSecondaryAssetClasses in the NoSecondaryAssetClassesRepeatinGroup.
func (m NoSecondaryAssetClassesRepeatingGroup) Get(i int) NoSecondaryAssetClasses {
	return NoSecondaryAssetClasses{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingEvents is a repeating group element, Tag 1981.
type NoUnderlyingEvents struct {
	*quickfix.Group
}

// SetUnderlyingEventType sets UnderlyingEventType, Tag 1982.
func (m NoUnderlyingEvents) SetUnderlyingEventType(v int) {
	m.Set(field.NewUnderlyingEventType(v))
}

// SetUnderlyingEventDate sets UnderlyingEventDate, Tag 1983.
func (m NoUnderlyingEvents) SetUnderlyingEventDate(v string) {
	m.Set(field.NewUnderlyingEventDate(v))
}

// SetUnderlyingEventTime sets UnderlyingEventTime, Tag 1984.
func (m NoUnderlyingEvents) SetUnderlyingEventTime(v time.Time) {
	m.Set(field.NewUnderlyingEventTime(v))
}

// SetUnderlyingEventTimeUnit sets UnderlyingEventTimeUnit, Tag 1985.
func (m NoUnderlyingEvents) SetUnderlyingEventTimeUnit(v string) {
	m.Set(field.NewUnderlyingEventTimeUnit(v))
}

// SetUnderlyingEventTimePeriod sets UnderlyingEventTimePeriod, Tag 1986.
func (m NoUnderlyingEvents) SetUnderlyingEventTimePeriod(v int) {
	m.Set(field.NewUnderlyingEventTimePeriod(v))
}

// SetUnderlyingEventMonthYear sets UnderlyingEventMonthYear, Tag 2342.
func (m NoUnderlyingEvents) SetUnderlyingEventMonthYear(v string) {
	m.Set(field.NewUnderlyingEventMonthYear(v))
}

// SetUnderlyingEventPx sets UnderlyingEventPx, Tag 1987.
func (m NoUnderlyingEvents) SetUnderlyingEventPx(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingEventPx(value, scale))
}

// SetUnderlyingEventText sets UnderlyingEventText, Tag 2071.
func (m NoUnderlyingEvents) SetUnderlyingEventText(v string) {
	m.Set(field.NewUnderlyingEventText(v))
}

// SetEncodedUnderlyingEventTextLen sets EncodedUnderlyingEventTextLen, Tag 2072.
func (m NoUnderlyingEvents) SetEncodedUnderlyingEventTextLen(v int) {
	m.Set(field.NewEncodedUnderlyingEventTextLen(v))
}

// SetEncodedUnderlyingEventText sets EncodedUnderlyingEventText, Tag 2073.
func (m NoUnderlyingEvents) SetEncodedUnderlyingEventText(v string) {
	m.Set(field.NewEncodedUnderlyingEventText(v))
}

// GetUnderlyingEventType gets UnderlyingEventType, Tag 1982.
func (m NoUnderlyingEvents) GetUnderlyingEventType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingEventTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingEventDate gets UnderlyingEventDate, Tag 1983.
func (m NoUnderlyingEvents) GetUnderlyingEventDate() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingEventDateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingEventTime gets UnderlyingEventTime, Tag 1984.
func (m NoUnderlyingEvents) GetUnderlyingEventTime() (v time.Time, err quickfix.MessageRejectError) {
	var f field.UnderlyingEventTimeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingEventTimeUnit gets UnderlyingEventTimeUnit, Tag 1985.
func (m NoUnderlyingEvents) GetUnderlyingEventTimeUnit() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingEventTimeUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingEventTimePeriod gets UnderlyingEventTimePeriod, Tag 1986.
func (m NoUnderlyingEvents) GetUnderlyingEventTimePeriod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingEventTimePeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingEventMonthYear gets UnderlyingEventMonthYear, Tag 2342.
func (m NoUnderlyingEvents) GetUnderlyingEventMonthYear() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingEventMonthYearField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingEventPx gets UnderlyingEventPx, Tag 1987.
func (m NoUnderlyingEvents) GetUnderlyingEventPx() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingEventPxField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingEventText gets UnderlyingEventText, Tag 2071.
func (m NoUnderlyingEvents) GetUnderlyingEventText() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingEventTextField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetEncodedUnderlyingEventTextLen gets EncodedUnderlyingEventTextLen, Tag 2072.
func (m NoUnderlyingEvents) GetEncodedUnderlyingEventTextLen() (v int, err quickfix.MessageRejectError) {
	var f field.EncodedUnderlyingEventTextLenField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetEncodedUnderlyingEventText gets EncodedUnderlyingEventText, Tag 2073.
func (m NoUnderlyingEvents) GetEncodedUnderlyingEventText() (v string, err quickfix.MessageRejectError) {
	var f field.EncodedUnderlyingEventTextField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingEventType returns true if UnderlyingEventType is present, Tag 1982.
func (m NoUnderlyingEvents) HasUnderlyingEventType() bool {
	return m.Has(tag.UnderlyingEventType)
}

// HasUnderlyingEventDate returns true if UnderlyingEventDate is present, Tag 1983.
func (m NoUnderlyingEvents) HasUnderlyingEventDate() bool {
	return m.Has(tag.UnderlyingEventDate)
}

// HasUnderlyingEventTime returns true if UnderlyingEventTime is present, Tag 1984.
func (m NoUnderlyingEvents) HasUnderlyingEventTime() bool {
	return m.Has(tag.UnderlyingEventTime)
}

// HasUnderlyingEventTimeUnit returns true if UnderlyingEventTimeUnit is present, Tag 1985.
func (m NoUnderlyingEvents) HasUnderlyingEventTimeUnit() bool {
	return m.Has(tag.UnderlyingEventTimeUnit)
}

// HasUnderlyingEventTimePeriod returns true if UnderlyingEventTimePeriod is present, Tag 1986.
func (m NoUnderlyingEvents) HasUnderlyingEventTimePeriod() bool {
	return m.Has(tag.UnderlyingEventTimePeriod)
}

// HasUnderlyingEventMonthYear returns true if UnderlyingEventMonthYear is present, Tag 2342.
func (m NoUnderlyingEvents) HasUnderlyingEventMonthYear() bool {
	return m.Has(tag.UnderlyingEventMonthYear)
}

// HasUnderlyingEventPx returns true if UnderlyingEventPx is present, Tag 1987.
func (m NoUnderlyingEvents) HasUnderlyingEventPx() bool {
	return m.Has(tag.UnderlyingEventPx)
}

// HasUnderlyingEventText returns true if UnderlyingEventText is present, Tag 2071.
func (m NoUnderlyingEvents) HasUnderlyingEventText() bool {
	return m.Has(tag.UnderlyingEventText)
}

// HasEncodedUnderlyingEventTextLen returns true if EncodedUnderlyingEventTextLen is present, Tag 2072.
func (m NoUnderlyingEvents) HasEncodedUnderlyingEventTextLen() bool {
	return m.Has(tag.EncodedUnderlyingEventTextLen)
}

// HasEncodedUnderlyingEventText returns true if EncodedUnderlyingEventText is present, Tag 2073.
func (m NoUnderlyingEvents) HasEncodedUnderlyingEventText() bool {
	return m.Has(tag.EncodedUnderlyingEventText)
}

// NoUnderlyingEventsRepeatingGroup is a repeating group, Tag 1981.
type NoUnderlyingEventsRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingEventsRepeatingGroup returns an initialized, NoUnderlyingEventsRepeatingGroup.
func NewNoUnderlyingEventsRepeatingGroup() NoUnderlyingEventsRepeatingGroup {
	return NoUnderlyingEventsRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingEvents,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingEventType),
				quickfix.GroupElement(tag.UnderlyingEventDate),
				quickfix.GroupElement(tag.UnderlyingEventTime),
				quickfix.GroupElement(tag.UnderlyingEventTimeUnit),
				quickfix.GroupElement(tag.UnderlyingEventTimePeriod),
				quickfix.GroupElement(tag.UnderlyingEventMonthYear),
				quickfix.GroupElement(tag.UnderlyingEventPx),
				quickfix.GroupElement(tag.UnderlyingEventText),
				quickfix.GroupElement(tag.EncodedUnderlyingEventTextLen),
				quickfix.GroupElement(tag.EncodedUnderlyingEventText),
			},
		),
	}
}

// Add create and append a new NoUnderlyingEvents to this group.
func (m NoUnderlyingEventsRepeatingGroup) Add() NoUnderlyingEvents {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingEvents{g}
}

// Get returns the ith NoUnderlyingEvents in the NoUnderlyingEventsRepeatinGroup.
func (m NoUnderlyingEventsRepeatingGroup) Get(i int) NoUnderlyingEvents {
	return NoUnderlyingEvents{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingComplexEvents is a repeating group element, Tag 2045.
type NoUnderlyingComplexEvents struct {
	*quickfix.Group
}

// SetUnderlyingComplexEventType sets UnderlyingComplexEventType, Tag 2046.
func (m NoUnderlyingComplexEvents) SetUnderlyingComplexEventType(v int) {
	m.Set(field.NewUnderlyingComplexEventType(v))
}

// SetUnderlyingComplexOptPayoutAmount sets UnderlyingComplexOptPayoutAmount, Tag 2047.
func (m NoUnderlyingComplexEvents) SetUnderlyingComplexOptPayoutAmount(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingComplexOptPayoutAmount(value, scale))
}

// SetUnderlyingComplexEventPrice sets UnderlyingComplexEventPrice, Tag 2048.
func (m NoUnderlyingComplexEvents) SetUnderlyingComplexEventPrice(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingComplexEventPrice(value, scale))
}

// SetUnderlyingComplexEventPriceBoundaryMethod sets UnderlyingComplexEventPriceBoundaryMethod, Tag 2049.
func (m NoUnderlyingComplexEvents) SetUnderlyingComplexEventPriceBoundaryMethod(v int) {
	m.Set(field.NewUnderlyingComplexEventPriceBoundaryMethod(v))
}

// SetUnderlyingComplexEventPriceBoundaryPrecision sets UnderlyingComplexEventPriceBoundaryPrecision, Tag 2050.
func (m NoUnderlyingComplexEvents) SetUnderlyingComplexEventPriceBoundaryPrecision(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingComplexEventPriceBoundaryPrecision(value, scale))
}

// SetUnderlyingComplexEventPriceTimeType sets UnderlyingComplexEventPriceTimeType, Tag 2051.
func (m NoUnderlyingComplexEvents) SetUnderlyingComplexEventPriceTimeType(v int) {
	m.Set(field.NewUnderlyingComplexEventPriceTimeType(v))
}

// SetUnderlyingComplexEventCondition sets UnderlyingComplexEventCondition, Tag 2052.
func (m NoUnderlyingComplexEvents) SetUnderlyingComplexEventCondition(v int) {
	m.Set(field.NewUnderlyingComplexEventCondition(v))
}

// SetNoUnderlyingComplexEventDates sets NoUnderlyingComplexEventDates, Tag 2053.
func (m NoUnderlyingComplexEvents) SetNoUnderlyingComplexEventDates(f NoUnderlyingComplexEventDatesRepeatingGroup) {
	m.SetGroup(f)
}

// SetUnderlyingComplexOptPayoutPaySide sets UnderlyingComplexOptPayoutPaySide, Tag 2261.
func (m NoUnderlyingComplexEvents) SetUnderlyingComplexOptPayoutPaySide(v int) {
	m.Set(field.NewUnderlyingComplexOptPayoutPaySide(v))
}

// SetUnderlyingComplexOptPayoutReceiveSide sets UnderlyingComplexOptPayoutReceiveSide, Tag 2262.
func (m NoUnderlyingComplexEvents) SetUnderlyingComplexOptPayoutReceiveSide(v int) {
	m.Set(field.NewUnderlyingComplexOptPayoutReceiveSide(v))
}

// SetUnderlyingComplexOptPayoutUnderlier sets UnderlyingComplexOptPayoutUnderlier, Tag 2263.
func (m NoUnderlyingComplexEvents) SetUnderlyingComplexOptPayoutUnderlier(v string) {
	m.Set(field.NewUnderlyingComplexOptPayoutUnderlier(v))
}

// SetUnderlyingComplexOptPayoutPercentage sets UnderlyingComplexOptPayoutPercentage, Tag 2264.
func (m NoUnderlyingComplexEvents) SetUnderlyingComplexOptPayoutPercentage(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingComplexOptPayoutPercentage(value, scale))
}

// SetUnderlyingComplexOptPayoutTime sets UnderlyingComplexOptPayoutTime, Tag 2265.
func (m NoUnderlyingComplexEvents) SetUnderlyingComplexOptPayoutTime(v int) {
	m.Set(field.NewUnderlyingComplexOptPayoutTime(v))
}

// SetUnderlyingComplexOptPayoutCurrency sets UnderlyingComplexOptPayoutCurrency, Tag 2266.
func (m NoUnderlyingComplexEvents) SetUnderlyingComplexOptPayoutCurrency(v string) {
	m.Set(field.NewUnderlyingComplexOptPayoutCurrency(v))
}

// SetUnderlyingComplexEventPricePercentage sets UnderlyingComplexEventPricePercentage, Tag 2267.
func (m NoUnderlyingComplexEvents) SetUnderlyingComplexEventPricePercentage(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingComplexEventPricePercentage(value, scale))
}

// SetUnderlyingComplexEventCurrencyOne sets UnderlyingComplexEventCurrencyOne, Tag 2268.
func (m NoUnderlyingComplexEvents) SetUnderlyingComplexEventCurrencyOne(v string) {
	m.Set(field.NewUnderlyingComplexEventCurrencyOne(v))
}

// SetUnderlyingComplexEventCurrencyTwo sets UnderlyingComplexEventCurrencyTwo, Tag 2269.
func (m NoUnderlyingComplexEvents) SetUnderlyingComplexEventCurrencyTwo(v string) {
	m.Set(field.NewUnderlyingComplexEventCurrencyTwo(v))
}

// SetUnderlyingComplexEventQuoteBasis sets UnderlyingComplexEventQuoteBasis, Tag 2270.
func (m NoUnderlyingComplexEvents) SetUnderlyingComplexEventQuoteBasis(v int) {
	m.Set(field.NewUnderlyingComplexEventQuoteBasis(v))
}

// SetUnderlyingComplexEventFixedFXRate sets UnderlyingComplexEventFixedFXRate, Tag 2271.
func (m NoUnderlyingComplexEvents) SetUnderlyingComplexEventFixedFXRate(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingComplexEventFixedFXRate(value, scale))
}

// SetUnderlyingComplexEventDeterminationMethod sets UnderlyingComplexEventDeterminationMethod, Tag 2272.
func (m NoUnderlyingComplexEvents) SetUnderlyingComplexEventDeterminationMethod(v string) {
	m.Set(field.NewUnderlyingComplexEventDeterminationMethod(v))
}

// SetUnderlyingComplexEventCalculationAgent sets UnderlyingComplexEventCalculationAgent, Tag 2273.
func (m NoUnderlyingComplexEvents) SetUnderlyingComplexEventCalculationAgent(v int) {
	m.Set(field.NewUnderlyingComplexEventCalculationAgent(v))
}

// SetUnderlyingComplexEventStrikePrice sets UnderlyingComplexEventStrikePrice, Tag 2274.
func (m NoUnderlyingComplexEvents) SetUnderlyingComplexEventStrikePrice(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingComplexEventStrikePrice(value, scale))
}

// SetUnderlyingComplexEventStrikeFactor sets UnderlyingComplexEventStrikeFactor, Tag 2275.
func (m NoUnderlyingComplexEvents) SetUnderlyingComplexEventStrikeFactor(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingComplexEventStrikeFactor(value, scale))
}

// SetUnderlyingComplexEventStrikeNumberOfOptions sets UnderlyingComplexEventStrikeNumberOfOptions, Tag 2276.
func (m NoUnderlyingComplexEvents) SetUnderlyingComplexEventStrikeNumberOfOptions(v int) {
	m.Set(field.NewUnderlyingComplexEventStrikeNumberOfOptions(v))
}

// SetNoUnderlyingComplexEventRateSources sets NoUnderlyingComplexEventRateSources, Tag 41732.
func (m NoUnderlyingComplexEvents) SetNoUnderlyingComplexEventRateSources(f NoUnderlyingComplexEventRateSourcesRepeatingGroup) {
	m.SetGroup(f)
}

// SetUnderlyingComplexEventDateUnadjusted sets UnderlyingComplexEventDateUnadjusted, Tag 41739.
func (m NoUnderlyingComplexEvents) SetUnderlyingComplexEventDateUnadjusted(v string) {
	m.Set(field.NewUnderlyingComplexEventDateUnadjusted(v))
}

// SetUnderlyingComplexEventDateRelativeTo sets UnderlyingComplexEventDateRelativeTo, Tag 41740.
func (m NoUnderlyingComplexEvents) SetUnderlyingComplexEventDateRelativeTo(v int) {
	m.Set(field.NewUnderlyingComplexEventDateRelativeTo(v))
}

// SetUnderlyingComplexEventDateOffsetPeriod sets UnderlyingComplexEventDateOffsetPeriod, Tag 41741.
func (m NoUnderlyingComplexEvents) SetUnderlyingComplexEventDateOffsetPeriod(v int) {
	m.Set(field.NewUnderlyingComplexEventDateOffsetPeriod(v))
}

// SetUnderlyingComplexEventDateOffsetUnit sets UnderlyingComplexEventDateOffsetUnit, Tag 41742.
func (m NoUnderlyingComplexEvents) SetUnderlyingComplexEventDateOffsetUnit(v string) {
	m.Set(field.NewUnderlyingComplexEventDateOffsetUnit(v))
}

// SetUnderlyingComplexEventDateOffsetDayType sets UnderlyingComplexEventDateOffsetDayType, Tag 41743.
func (m NoUnderlyingComplexEvents) SetUnderlyingComplexEventDateOffsetDayType(v int) {
	m.Set(field.NewUnderlyingComplexEventDateOffsetDayType(v))
}

// SetUnderlyingComplexEventDateBusinessDayConvention sets UnderlyingComplexEventDateBusinessDayConvention, Tag 41744.
func (m NoUnderlyingComplexEvents) SetUnderlyingComplexEventDateBusinessDayConvention(v int) {
	m.Set(field.NewUnderlyingComplexEventDateBusinessDayConvention(v))
}

// SetNoUnderlyingComplexEventDateBusinessCenters sets NoUnderlyingComplexEventDateBusinessCenters, Tag 41737.
func (m NoUnderlyingComplexEvents) SetNoUnderlyingComplexEventDateBusinessCenters(f NoUnderlyingComplexEventDateBusinessCentersRepeatingGroup) {
	m.SetGroup(f)
}

// SetUnderlyingComplexEventDateAdjusted sets UnderlyingComplexEventDateAdjusted, Tag 41745.
func (m NoUnderlyingComplexEvents) SetUnderlyingComplexEventDateAdjusted(v string) {
	m.Set(field.NewUnderlyingComplexEventDateAdjusted(v))
}

// SetUnderlyingComplexEventFixingTime sets UnderlyingComplexEventFixingTime, Tag 41746.
func (m NoUnderlyingComplexEvents) SetUnderlyingComplexEventFixingTime(v string) {
	m.Set(field.NewUnderlyingComplexEventFixingTime(v))
}

// SetUnderlyingComplexEventFixingTimeBusinessCenter sets UnderlyingComplexEventFixingTimeBusinessCenter, Tag 41747.
func (m NoUnderlyingComplexEvents) SetUnderlyingComplexEventFixingTimeBusinessCenter(v string) {
	m.Set(field.NewUnderlyingComplexEventFixingTimeBusinessCenter(v))
}

// SetNoUnderlyingComplexEventPeriods sets NoUnderlyingComplexEventPeriods, Tag 41729.
func (m NoUnderlyingComplexEvents) SetNoUnderlyingComplexEventPeriods(f NoUnderlyingComplexEventPeriodsRepeatingGroup) {
	m.SetGroup(f)
}

// SetUnderlyingComplexEventCreditEventsXIDRef sets UnderlyingComplexEventCreditEventsXIDRef, Tag 2277.
func (m NoUnderlyingComplexEvents) SetUnderlyingComplexEventCreditEventsXIDRef(v string) {
	m.Set(field.NewUnderlyingComplexEventCreditEventsXIDRef(v))
}

// SetUnderlyingComplexEventCreditEventNotifyingParty sets UnderlyingComplexEventCreditEventNotifyingParty, Tag 2278.
func (m NoUnderlyingComplexEvents) SetUnderlyingComplexEventCreditEventNotifyingParty(v int) {
	m.Set(field.NewUnderlyingComplexEventCreditEventNotifyingParty(v))
}

// SetUnderlyingComplexEventCreditEventBusinessCenter sets UnderlyingComplexEventCreditEventBusinessCenter, Tag 2279.
func (m NoUnderlyingComplexEvents) SetUnderlyingComplexEventCreditEventBusinessCenter(v string) {
	m.Set(field.NewUnderlyingComplexEventCreditEventBusinessCenter(v))
}

// SetUnderlyingComplexEventCreditEventStandardSources sets UnderlyingComplexEventCreditEventStandardSources, Tag 2280.
func (m NoUnderlyingComplexEvents) SetUnderlyingComplexEventCreditEventStandardSources(v bool) {
	m.Set(field.NewUnderlyingComplexEventCreditEventStandardSources(v))
}

// SetUnderlyingComplexEventCreditEventMinimumSources sets UnderlyingComplexEventCreditEventMinimumSources, Tag 2281.
func (m NoUnderlyingComplexEvents) SetUnderlyingComplexEventCreditEventMinimumSources(v int) {
	m.Set(field.NewUnderlyingComplexEventCreditEventMinimumSources(v))
}

// SetNoUnderlyingComplexEventCreditEventSources sets NoUnderlyingComplexEventCreditEventSources, Tag 41748.
func (m NoUnderlyingComplexEvents) SetNoUnderlyingComplexEventCreditEventSources(f NoUnderlyingComplexEventCreditEventSourcesRepeatingGroup) {
	m.SetGroup(f)
}

// SetNoUnderlyingComplexEventCreditEvents sets NoUnderlyingComplexEventCreditEvents, Tag 41716.
func (m NoUnderlyingComplexEvents) SetNoUnderlyingComplexEventCreditEvents(f NoUnderlyingComplexEventCreditEventsRepeatingGroup) {
	m.SetGroup(f)
}

// SetUnderlyingComplexEventXID sets UnderlyingComplexEventXID, Tag 2282.
func (m NoUnderlyingComplexEvents) SetUnderlyingComplexEventXID(v string) {
	m.Set(field.NewUnderlyingComplexEventXID(v))
}

// SetUnderlyingComplexEventXIDRef sets UnderlyingComplexEventXIDRef, Tag 2283.
func (m NoUnderlyingComplexEvents) SetUnderlyingComplexEventXIDRef(v string) {
	m.Set(field.NewUnderlyingComplexEventXIDRef(v))
}

// SetUnderlyingComplexEventSpotRate sets UnderlyingComplexEventSpotRate, Tag 2419.
func (m NoUnderlyingComplexEvents) SetUnderlyingComplexEventSpotRate(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingComplexEventSpotRate(value, scale))
}

// SetUnderlyingComplexEventForwardPoints sets UnderlyingComplexEventForwardPoints, Tag 2420.
func (m NoUnderlyingComplexEvents) SetUnderlyingComplexEventForwardPoints(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingComplexEventForwardPoints(value, scale))
}

// SetUnderlyingComplexEventFuturesPriceValuation sets UnderlyingComplexEventFuturesPriceValuation, Tag 2611.
func (m NoUnderlyingComplexEvents) SetUnderlyingComplexEventFuturesPriceValuation(v bool) {
	m.Set(field.NewUnderlyingComplexEventFuturesPriceValuation(v))
}

// SetUnderlyingComplexEventOptionsPriceValuation sets UnderlyingComplexEventOptionsPriceValuation, Tag 2612.
func (m NoUnderlyingComplexEvents) SetUnderlyingComplexEventOptionsPriceValuation(v bool) {
	m.Set(field.NewUnderlyingComplexEventOptionsPriceValuation(v))
}

// SetUnderlyingComplexEventPVFinalPriceElectionFallback sets UnderlyingComplexEventPVFinalPriceElectionFallback, Tag 2613.
func (m NoUnderlyingComplexEvents) SetUnderlyingComplexEventPVFinalPriceElectionFallback(v int) {
	m.Set(field.NewUnderlyingComplexEventPVFinalPriceElectionFallback(v))
}

// GetUnderlyingComplexEventType gets UnderlyingComplexEventType, Tag 2046.
func (m NoUnderlyingComplexEvents) GetUnderlyingComplexEventType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingComplexEventTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingComplexOptPayoutAmount gets UnderlyingComplexOptPayoutAmount, Tag 2047.
func (m NoUnderlyingComplexEvents) GetUnderlyingComplexOptPayoutAmount() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingComplexOptPayoutAmountField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingComplexEventPrice gets UnderlyingComplexEventPrice, Tag 2048.
func (m NoUnderlyingComplexEvents) GetUnderlyingComplexEventPrice() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingComplexEventPriceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingComplexEventPriceBoundaryMethod gets UnderlyingComplexEventPriceBoundaryMethod, Tag 2049.
func (m NoUnderlyingComplexEvents) GetUnderlyingComplexEventPriceBoundaryMethod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingComplexEventPriceBoundaryMethodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingComplexEventPriceBoundaryPrecision gets UnderlyingComplexEventPriceBoundaryPrecision, Tag 2050.
func (m NoUnderlyingComplexEvents) GetUnderlyingComplexEventPriceBoundaryPrecision() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingComplexEventPriceBoundaryPrecisionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingComplexEventPriceTimeType gets UnderlyingComplexEventPriceTimeType, Tag 2051.
func (m NoUnderlyingComplexEvents) GetUnderlyingComplexEventPriceTimeType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingComplexEventPriceTimeTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingComplexEventCondition gets UnderlyingComplexEventCondition, Tag 2052.
func (m NoUnderlyingComplexEvents) GetUnderlyingComplexEventCondition() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingComplexEventConditionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUnderlyingComplexEventDates gets NoUnderlyingComplexEventDates, Tag 2053.
func (m NoUnderlyingComplexEvents) GetNoUnderlyingComplexEventDates() (NoUnderlyingComplexEventDatesRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingComplexEventDatesRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetUnderlyingComplexOptPayoutPaySide gets UnderlyingComplexOptPayoutPaySide, Tag 2261.
func (m NoUnderlyingComplexEvents) GetUnderlyingComplexOptPayoutPaySide() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingComplexOptPayoutPaySideField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingComplexOptPayoutReceiveSide gets UnderlyingComplexOptPayoutReceiveSide, Tag 2262.
func (m NoUnderlyingComplexEvents) GetUnderlyingComplexOptPayoutReceiveSide() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingComplexOptPayoutReceiveSideField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingComplexOptPayoutUnderlier gets UnderlyingComplexOptPayoutUnderlier, Tag 2263.
func (m NoUnderlyingComplexEvents) GetUnderlyingComplexOptPayoutUnderlier() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingComplexOptPayoutUnderlierField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingComplexOptPayoutPercentage gets UnderlyingComplexOptPayoutPercentage, Tag 2264.
func (m NoUnderlyingComplexEvents) GetUnderlyingComplexOptPayoutPercentage() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingComplexOptPayoutPercentageField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingComplexOptPayoutTime gets UnderlyingComplexOptPayoutTime, Tag 2265.
func (m NoUnderlyingComplexEvents) GetUnderlyingComplexOptPayoutTime() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingComplexOptPayoutTimeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingComplexOptPayoutCurrency gets UnderlyingComplexOptPayoutCurrency, Tag 2266.
func (m NoUnderlyingComplexEvents) GetUnderlyingComplexOptPayoutCurrency() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingComplexOptPayoutCurrencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingComplexEventPricePercentage gets UnderlyingComplexEventPricePercentage, Tag 2267.
func (m NoUnderlyingComplexEvents) GetUnderlyingComplexEventPricePercentage() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingComplexEventPricePercentageField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingComplexEventCurrencyOne gets UnderlyingComplexEventCurrencyOne, Tag 2268.
func (m NoUnderlyingComplexEvents) GetUnderlyingComplexEventCurrencyOne() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingComplexEventCurrencyOneField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingComplexEventCurrencyTwo gets UnderlyingComplexEventCurrencyTwo, Tag 2269.
func (m NoUnderlyingComplexEvents) GetUnderlyingComplexEventCurrencyTwo() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingComplexEventCurrencyTwoField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingComplexEventQuoteBasis gets UnderlyingComplexEventQuoteBasis, Tag 2270.
func (m NoUnderlyingComplexEvents) GetUnderlyingComplexEventQuoteBasis() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingComplexEventQuoteBasisField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingComplexEventFixedFXRate gets UnderlyingComplexEventFixedFXRate, Tag 2271.
func (m NoUnderlyingComplexEvents) GetUnderlyingComplexEventFixedFXRate() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingComplexEventFixedFXRateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingComplexEventDeterminationMethod gets UnderlyingComplexEventDeterminationMethod, Tag 2272.
func (m NoUnderlyingComplexEvents) GetUnderlyingComplexEventDeterminationMethod() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingComplexEventDeterminationMethodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingComplexEventCalculationAgent gets UnderlyingComplexEventCalculationAgent, Tag 2273.
func (m NoUnderlyingComplexEvents) GetUnderlyingComplexEventCalculationAgent() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingComplexEventCalculationAgentField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingComplexEventStrikePrice gets UnderlyingComplexEventStrikePrice, Tag 2274.
func (m NoUnderlyingComplexEvents) GetUnderlyingComplexEventStrikePrice() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingComplexEventStrikePriceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingComplexEventStrikeFactor gets UnderlyingComplexEventStrikeFactor, Tag 2275.
func (m NoUnderlyingComplexEvents) GetUnderlyingComplexEventStrikeFactor() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingComplexEventStrikeFactorField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingComplexEventStrikeNumberOfOptions gets UnderlyingComplexEventStrikeNumberOfOptions, Tag 2276.
func (m NoUnderlyingComplexEvents) GetUnderlyingComplexEventStrikeNumberOfOptions() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingComplexEventStrikeNumberOfOptionsField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUnderlyingComplexEventRateSources gets NoUnderlyingComplexEventRateSources, Tag 41732.
func (m NoUnderlyingComplexEvents) GetNoUnderlyingComplexEventRateSources() (NoUnderlyingComplexEventRateSourcesRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingComplexEventRateSourcesRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetUnderlyingComplexEventDateUnadjusted gets UnderlyingComplexEventDateUnadjusted, Tag 41739.
func (m NoUnderlyingComplexEvents) GetUnderlyingComplexEventDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingComplexEventDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingComplexEventDateRelativeTo gets UnderlyingComplexEventDateRelativeTo, Tag 41740.
func (m NoUnderlyingComplexEvents) GetUnderlyingComplexEventDateRelativeTo() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingComplexEventDateRelativeToField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingComplexEventDateOffsetPeriod gets UnderlyingComplexEventDateOffsetPeriod, Tag 41741.
func (m NoUnderlyingComplexEvents) GetUnderlyingComplexEventDateOffsetPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingComplexEventDateOffsetPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingComplexEventDateOffsetUnit gets UnderlyingComplexEventDateOffsetUnit, Tag 41742.
func (m NoUnderlyingComplexEvents) GetUnderlyingComplexEventDateOffsetUnit() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingComplexEventDateOffsetUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingComplexEventDateOffsetDayType gets UnderlyingComplexEventDateOffsetDayType, Tag 41743.
func (m NoUnderlyingComplexEvents) GetUnderlyingComplexEventDateOffsetDayType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingComplexEventDateOffsetDayTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingComplexEventDateBusinessDayConvention gets UnderlyingComplexEventDateBusinessDayConvention, Tag 41744.
func (m NoUnderlyingComplexEvents) GetUnderlyingComplexEventDateBusinessDayConvention() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingComplexEventDateBusinessDayConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUnderlyingComplexEventDateBusinessCenters gets NoUnderlyingComplexEventDateBusinessCenters, Tag 41737.
func (m NoUnderlyingComplexEvents) GetNoUnderlyingComplexEventDateBusinessCenters() (NoUnderlyingComplexEventDateBusinessCentersRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingComplexEventDateBusinessCentersRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetUnderlyingComplexEventDateAdjusted gets UnderlyingComplexEventDateAdjusted, Tag 41745.
func (m NoUnderlyingComplexEvents) GetUnderlyingComplexEventDateAdjusted() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingComplexEventDateAdjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingComplexEventFixingTime gets UnderlyingComplexEventFixingTime, Tag 41746.
func (m NoUnderlyingComplexEvents) GetUnderlyingComplexEventFixingTime() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingComplexEventFixingTimeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingComplexEventFixingTimeBusinessCenter gets UnderlyingComplexEventFixingTimeBusinessCenter, Tag 41747.
func (m NoUnderlyingComplexEvents) GetUnderlyingComplexEventFixingTimeBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingComplexEventFixingTimeBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUnderlyingComplexEventPeriods gets NoUnderlyingComplexEventPeriods, Tag 41729.
func (m NoUnderlyingComplexEvents) GetNoUnderlyingComplexEventPeriods() (NoUnderlyingComplexEventPeriodsRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingComplexEventPeriodsRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetUnderlyingComplexEventCreditEventsXIDRef gets UnderlyingComplexEventCreditEventsXIDRef, Tag 2277.
func (m NoUnderlyingComplexEvents) GetUnderlyingComplexEventCreditEventsXIDRef() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingComplexEventCreditEventsXIDRefField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingComplexEventCreditEventNotifyingParty gets UnderlyingComplexEventCreditEventNotifyingParty, Tag 2278.
func (m NoUnderlyingComplexEvents) GetUnderlyingComplexEventCreditEventNotifyingParty() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingComplexEventCreditEventNotifyingPartyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingComplexEventCreditEventBusinessCenter gets UnderlyingComplexEventCreditEventBusinessCenter, Tag 2279.
func (m NoUnderlyingComplexEvents) GetUnderlyingComplexEventCreditEventBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingComplexEventCreditEventBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingComplexEventCreditEventStandardSources gets UnderlyingComplexEventCreditEventStandardSources, Tag 2280.
func (m NoUnderlyingComplexEvents) GetUnderlyingComplexEventCreditEventStandardSources() (v bool, err quickfix.MessageRejectError) {
	var f field.UnderlyingComplexEventCreditEventStandardSourcesField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingComplexEventCreditEventMinimumSources gets UnderlyingComplexEventCreditEventMinimumSources, Tag 2281.
func (m NoUnderlyingComplexEvents) GetUnderlyingComplexEventCreditEventMinimumSources() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingComplexEventCreditEventMinimumSourcesField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUnderlyingComplexEventCreditEventSources gets NoUnderlyingComplexEventCreditEventSources, Tag 41748.
func (m NoUnderlyingComplexEvents) GetNoUnderlyingComplexEventCreditEventSources() (NoUnderlyingComplexEventCreditEventSourcesRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingComplexEventCreditEventSourcesRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetNoUnderlyingComplexEventCreditEvents gets NoUnderlyingComplexEventCreditEvents, Tag 41716.
func (m NoUnderlyingComplexEvents) GetNoUnderlyingComplexEventCreditEvents() (NoUnderlyingComplexEventCreditEventsRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingComplexEventCreditEventsRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetUnderlyingComplexEventXID gets UnderlyingComplexEventXID, Tag 2282.
func (m NoUnderlyingComplexEvents) GetUnderlyingComplexEventXID() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingComplexEventXIDField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingComplexEventXIDRef gets UnderlyingComplexEventXIDRef, Tag 2283.
func (m NoUnderlyingComplexEvents) GetUnderlyingComplexEventXIDRef() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingComplexEventXIDRefField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingComplexEventSpotRate gets UnderlyingComplexEventSpotRate, Tag 2419.
func (m NoUnderlyingComplexEvents) GetUnderlyingComplexEventSpotRate() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingComplexEventSpotRateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingComplexEventForwardPoints gets UnderlyingComplexEventForwardPoints, Tag 2420.
func (m NoUnderlyingComplexEvents) GetUnderlyingComplexEventForwardPoints() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingComplexEventForwardPointsField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingComplexEventFuturesPriceValuation gets UnderlyingComplexEventFuturesPriceValuation, Tag 2611.
func (m NoUnderlyingComplexEvents) GetUnderlyingComplexEventFuturesPriceValuation() (v bool, err quickfix.MessageRejectError) {
	var f field.UnderlyingComplexEventFuturesPriceValuationField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingComplexEventOptionsPriceValuation gets UnderlyingComplexEventOptionsPriceValuation, Tag 2612.
func (m NoUnderlyingComplexEvents) GetUnderlyingComplexEventOptionsPriceValuation() (v bool, err quickfix.MessageRejectError) {
	var f field.UnderlyingComplexEventOptionsPriceValuationField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingComplexEventPVFinalPriceElectionFallback gets UnderlyingComplexEventPVFinalPriceElectionFallback, Tag 2613.
func (m NoUnderlyingComplexEvents) GetUnderlyingComplexEventPVFinalPriceElectionFallback() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingComplexEventPVFinalPriceElectionFallbackField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingComplexEventType returns true if UnderlyingComplexEventType is present, Tag 2046.
func (m NoUnderlyingComplexEvents) HasUnderlyingComplexEventType() bool {
	return m.Has(tag.UnderlyingComplexEventType)
}

// HasUnderlyingComplexOptPayoutAmount returns true if UnderlyingComplexOptPayoutAmount is present, Tag 2047.
func (m NoUnderlyingComplexEvents) HasUnderlyingComplexOptPayoutAmount() bool {
	return m.Has(tag.UnderlyingComplexOptPayoutAmount)
}

// HasUnderlyingComplexEventPrice returns true if UnderlyingComplexEventPrice is present, Tag 2048.
func (m NoUnderlyingComplexEvents) HasUnderlyingComplexEventPrice() bool {
	return m.Has(tag.UnderlyingComplexEventPrice)
}

// HasUnderlyingComplexEventPriceBoundaryMethod returns true if UnderlyingComplexEventPriceBoundaryMethod is present, Tag 2049.
func (m NoUnderlyingComplexEvents) HasUnderlyingComplexEventPriceBoundaryMethod() bool {
	return m.Has(tag.UnderlyingComplexEventPriceBoundaryMethod)
}

// HasUnderlyingComplexEventPriceBoundaryPrecision returns true if UnderlyingComplexEventPriceBoundaryPrecision is present, Tag 2050.
func (m NoUnderlyingComplexEvents) HasUnderlyingComplexEventPriceBoundaryPrecision() bool {
	return m.Has(tag.UnderlyingComplexEventPriceBoundaryPrecision)
}

// HasUnderlyingComplexEventPriceTimeType returns true if UnderlyingComplexEventPriceTimeType is present, Tag 2051.
func (m NoUnderlyingComplexEvents) HasUnderlyingComplexEventPriceTimeType() bool {
	return m.Has(tag.UnderlyingComplexEventPriceTimeType)
}

// HasUnderlyingComplexEventCondition returns true if UnderlyingComplexEventCondition is present, Tag 2052.
func (m NoUnderlyingComplexEvents) HasUnderlyingComplexEventCondition() bool {
	return m.Has(tag.UnderlyingComplexEventCondition)
}

// HasNoUnderlyingComplexEventDates returns true if NoUnderlyingComplexEventDates is present, Tag 2053.
func (m NoUnderlyingComplexEvents) HasNoUnderlyingComplexEventDates() bool {
	return m.Has(tag.NoUnderlyingComplexEventDates)
}

// HasUnderlyingComplexOptPayoutPaySide returns true if UnderlyingComplexOptPayoutPaySide is present, Tag 2261.
func (m NoUnderlyingComplexEvents) HasUnderlyingComplexOptPayoutPaySide() bool {
	return m.Has(tag.UnderlyingComplexOptPayoutPaySide)
}

// HasUnderlyingComplexOptPayoutReceiveSide returns true if UnderlyingComplexOptPayoutReceiveSide is present, Tag 2262.
func (m NoUnderlyingComplexEvents) HasUnderlyingComplexOptPayoutReceiveSide() bool {
	return m.Has(tag.UnderlyingComplexOptPayoutReceiveSide)
}

// HasUnderlyingComplexOptPayoutUnderlier returns true if UnderlyingComplexOptPayoutUnderlier is present, Tag 2263.
func (m NoUnderlyingComplexEvents) HasUnderlyingComplexOptPayoutUnderlier() bool {
	return m.Has(tag.UnderlyingComplexOptPayoutUnderlier)
}

// HasUnderlyingComplexOptPayoutPercentage returns true if UnderlyingComplexOptPayoutPercentage is present, Tag 2264.
func (m NoUnderlyingComplexEvents) HasUnderlyingComplexOptPayoutPercentage() bool {
	return m.Has(tag.UnderlyingComplexOptPayoutPercentage)
}

// HasUnderlyingComplexOptPayoutTime returns true if UnderlyingComplexOptPayoutTime is present, Tag 2265.
func (m NoUnderlyingComplexEvents) HasUnderlyingComplexOptPayoutTime() bool {
	return m.Has(tag.UnderlyingComplexOptPayoutTime)
}

// HasUnderlyingComplexOptPayoutCurrency returns true if UnderlyingComplexOptPayoutCurrency is present, Tag 2266.
func (m NoUnderlyingComplexEvents) HasUnderlyingComplexOptPayoutCurrency() bool {
	return m.Has(tag.UnderlyingComplexOptPayoutCurrency)
}

// HasUnderlyingComplexEventPricePercentage returns true if UnderlyingComplexEventPricePercentage is present, Tag 2267.
func (m NoUnderlyingComplexEvents) HasUnderlyingComplexEventPricePercentage() bool {
	return m.Has(tag.UnderlyingComplexEventPricePercentage)
}

// HasUnderlyingComplexEventCurrencyOne returns true if UnderlyingComplexEventCurrencyOne is present, Tag 2268.
func (m NoUnderlyingComplexEvents) HasUnderlyingComplexEventCurrencyOne() bool {
	return m.Has(tag.UnderlyingComplexEventCurrencyOne)
}

// HasUnderlyingComplexEventCurrencyTwo returns true if UnderlyingComplexEventCurrencyTwo is present, Tag 2269.
func (m NoUnderlyingComplexEvents) HasUnderlyingComplexEventCurrencyTwo() bool {
	return m.Has(tag.UnderlyingComplexEventCurrencyTwo)
}

// HasUnderlyingComplexEventQuoteBasis returns true if UnderlyingComplexEventQuoteBasis is present, Tag 2270.
func (m NoUnderlyingComplexEvents) HasUnderlyingComplexEventQuoteBasis() bool {
	return m.Has(tag.UnderlyingComplexEventQuoteBasis)
}

// HasUnderlyingComplexEventFixedFXRate returns true if UnderlyingComplexEventFixedFXRate is present, Tag 2271.
func (m NoUnderlyingComplexEvents) HasUnderlyingComplexEventFixedFXRate() bool {
	return m.Has(tag.UnderlyingComplexEventFixedFXRate)
}

// HasUnderlyingComplexEventDeterminationMethod returns true if UnderlyingComplexEventDeterminationMethod is present, Tag 2272.
func (m NoUnderlyingComplexEvents) HasUnderlyingComplexEventDeterminationMethod() bool {
	return m.Has(tag.UnderlyingComplexEventDeterminationMethod)
}

// HasUnderlyingComplexEventCalculationAgent returns true if UnderlyingComplexEventCalculationAgent is present, Tag 2273.
func (m NoUnderlyingComplexEvents) HasUnderlyingComplexEventCalculationAgent() bool {
	return m.Has(tag.UnderlyingComplexEventCalculationAgent)
}

// HasUnderlyingComplexEventStrikePrice returns true if UnderlyingComplexEventStrikePrice is present, Tag 2274.
func (m NoUnderlyingComplexEvents) HasUnderlyingComplexEventStrikePrice() bool {
	return m.Has(tag.UnderlyingComplexEventStrikePrice)
}

// HasUnderlyingComplexEventStrikeFactor returns true if UnderlyingComplexEventStrikeFactor is present, Tag 2275.
func (m NoUnderlyingComplexEvents) HasUnderlyingComplexEventStrikeFactor() bool {
	return m.Has(tag.UnderlyingComplexEventStrikeFactor)
}

// HasUnderlyingComplexEventStrikeNumberOfOptions returns true if UnderlyingComplexEventStrikeNumberOfOptions is present, Tag 2276.
func (m NoUnderlyingComplexEvents) HasUnderlyingComplexEventStrikeNumberOfOptions() bool {
	return m.Has(tag.UnderlyingComplexEventStrikeNumberOfOptions)
}

// HasNoUnderlyingComplexEventRateSources returns true if NoUnderlyingComplexEventRateSources is present, Tag 41732.
func (m NoUnderlyingComplexEvents) HasNoUnderlyingComplexEventRateSources() bool {
	return m.Has(tag.NoUnderlyingComplexEventRateSources)
}

// HasUnderlyingComplexEventDateUnadjusted returns true if UnderlyingComplexEventDateUnadjusted is present, Tag 41739.
func (m NoUnderlyingComplexEvents) HasUnderlyingComplexEventDateUnadjusted() bool {
	return m.Has(tag.UnderlyingComplexEventDateUnadjusted)
}

// HasUnderlyingComplexEventDateRelativeTo returns true if UnderlyingComplexEventDateRelativeTo is present, Tag 41740.
func (m NoUnderlyingComplexEvents) HasUnderlyingComplexEventDateRelativeTo() bool {
	return m.Has(tag.UnderlyingComplexEventDateRelativeTo)
}

// HasUnderlyingComplexEventDateOffsetPeriod returns true if UnderlyingComplexEventDateOffsetPeriod is present, Tag 41741.
func (m NoUnderlyingComplexEvents) HasUnderlyingComplexEventDateOffsetPeriod() bool {
	return m.Has(tag.UnderlyingComplexEventDateOffsetPeriod)
}

// HasUnderlyingComplexEventDateOffsetUnit returns true if UnderlyingComplexEventDateOffsetUnit is present, Tag 41742.
func (m NoUnderlyingComplexEvents) HasUnderlyingComplexEventDateOffsetUnit() bool {
	return m.Has(tag.UnderlyingComplexEventDateOffsetUnit)
}

// HasUnderlyingComplexEventDateOffsetDayType returns true if UnderlyingComplexEventDateOffsetDayType is present, Tag 41743.
func (m NoUnderlyingComplexEvents) HasUnderlyingComplexEventDateOffsetDayType() bool {
	return m.Has(tag.UnderlyingComplexEventDateOffsetDayType)
}

// HasUnderlyingComplexEventDateBusinessDayConvention returns true if UnderlyingComplexEventDateBusinessDayConvention is present, Tag 41744.
func (m NoUnderlyingComplexEvents) HasUnderlyingComplexEventDateBusinessDayConvention() bool {
	return m.Has(tag.UnderlyingComplexEventDateBusinessDayConvention)
}

// HasNoUnderlyingComplexEventDateBusinessCenters returns true if NoUnderlyingComplexEventDateBusinessCenters is present, Tag 41737.
func (m NoUnderlyingComplexEvents) HasNoUnderlyingComplexEventDateBusinessCenters() bool {
	return m.Has(tag.NoUnderlyingComplexEventDateBusinessCenters)
}

// HasUnderlyingComplexEventDateAdjusted returns true if UnderlyingComplexEventDateAdjusted is present, Tag 41745.
func (m NoUnderlyingComplexEvents) HasUnderlyingComplexEventDateAdjusted() bool {
	return m.Has(tag.UnderlyingComplexEventDateAdjusted)
}

// HasUnderlyingComplexEventFixingTime returns true if UnderlyingComplexEventFixingTime is present, Tag 41746.
func (m NoUnderlyingComplexEvents) HasUnderlyingComplexEventFixingTime() bool {
	return m.Has(tag.UnderlyingComplexEventFixingTime)
}

// HasUnderlyingComplexEventFixingTimeBusinessCenter returns true if UnderlyingComplexEventFixingTimeBusinessCenter is present, Tag 41747.
func (m NoUnderlyingComplexEvents) HasUnderlyingComplexEventFixingTimeBusinessCenter() bool {
	return m.Has(tag.UnderlyingComplexEventFixingTimeBusinessCenter)
}

// HasNoUnderlyingComplexEventPeriods returns true if NoUnderlyingComplexEventPeriods is present, Tag 41729.
func (m NoUnderlyingComplexEvents) HasNoUnderlyingComplexEventPeriods() bool {
	return m.Has(tag.NoUnderlyingComplexEventPeriods)
}

// HasUnderlyingComplexEventCreditEventsXIDRef returns true if UnderlyingComplexEventCreditEventsXIDRef is present, Tag 2277.
func (m NoUnderlyingComplexEvents) HasUnderlyingComplexEventCreditEventsXIDRef() bool {
	return m.Has(tag.UnderlyingComplexEventCreditEventsXIDRef)
}

// HasUnderlyingComplexEventCreditEventNotifyingParty returns true if UnderlyingComplexEventCreditEventNotifyingParty is present, Tag 2278.
func (m NoUnderlyingComplexEvents) HasUnderlyingComplexEventCreditEventNotifyingParty() bool {
	return m.Has(tag.UnderlyingComplexEventCreditEventNotifyingParty)
}

// HasUnderlyingComplexEventCreditEventBusinessCenter returns true if UnderlyingComplexEventCreditEventBusinessCenter is present, Tag 2279.
func (m NoUnderlyingComplexEvents) HasUnderlyingComplexEventCreditEventBusinessCenter() bool {
	return m.Has(tag.UnderlyingComplexEventCreditEventBusinessCenter)
}

// HasUnderlyingComplexEventCreditEventStandardSources returns true if UnderlyingComplexEventCreditEventStandardSources is present, Tag 2280.
func (m NoUnderlyingComplexEvents) HasUnderlyingComplexEventCreditEventStandardSources() bool {
	return m.Has(tag.UnderlyingComplexEventCreditEventStandardSources)
}

// HasUnderlyingComplexEventCreditEventMinimumSources returns true if UnderlyingComplexEventCreditEventMinimumSources is present, Tag 2281.
func (m NoUnderlyingComplexEvents) HasUnderlyingComplexEventCreditEventMinimumSources() bool {
	return m.Has(tag.UnderlyingComplexEventCreditEventMinimumSources)
}

// HasNoUnderlyingComplexEventCreditEventSources returns true if NoUnderlyingComplexEventCreditEventSources is present, Tag 41748.
func (m NoUnderlyingComplexEvents) HasNoUnderlyingComplexEventCreditEventSources() bool {
	return m.Has(tag.NoUnderlyingComplexEventCreditEventSources)
}

// HasNoUnderlyingComplexEventCreditEvents returns true if NoUnderlyingComplexEventCreditEvents is present, Tag 41716.
func (m NoUnderlyingComplexEvents) HasNoUnderlyingComplexEventCreditEvents() bool {
	return m.Has(tag.NoUnderlyingComplexEventCreditEvents)
}

// HasUnderlyingComplexEventXID returns true if UnderlyingComplexEventXID is present, Tag 2282.
func (m NoUnderlyingComplexEvents) HasUnderlyingComplexEventXID() bool {
	return m.Has(tag.UnderlyingComplexEventXID)
}

// HasUnderlyingComplexEventXIDRef returns true if UnderlyingComplexEventXIDRef is present, Tag 2283.
func (m NoUnderlyingComplexEvents) HasUnderlyingComplexEventXIDRef() bool {
	return m.Has(tag.UnderlyingComplexEventXIDRef)
}

// HasUnderlyingComplexEventSpotRate returns true if UnderlyingComplexEventSpotRate is present, Tag 2419.
func (m NoUnderlyingComplexEvents) HasUnderlyingComplexEventSpotRate() bool {
	return m.Has(tag.UnderlyingComplexEventSpotRate)
}

// HasUnderlyingComplexEventForwardPoints returns true if UnderlyingComplexEventForwardPoints is present, Tag 2420.
func (m NoUnderlyingComplexEvents) HasUnderlyingComplexEventForwardPoints() bool {
	return m.Has(tag.UnderlyingComplexEventForwardPoints)
}

// HasUnderlyingComplexEventFuturesPriceValuation returns true if UnderlyingComplexEventFuturesPriceValuation is present, Tag 2611.
func (m NoUnderlyingComplexEvents) HasUnderlyingComplexEventFuturesPriceValuation() bool {
	return m.Has(tag.UnderlyingComplexEventFuturesPriceValuation)
}

// HasUnderlyingComplexEventOptionsPriceValuation returns true if UnderlyingComplexEventOptionsPriceValuation is present, Tag 2612.
func (m NoUnderlyingComplexEvents) HasUnderlyingComplexEventOptionsPriceValuation() bool {
	return m.Has(tag.UnderlyingComplexEventOptionsPriceValuation)
}

// HasUnderlyingComplexEventPVFinalPriceElectionFallback returns true if UnderlyingComplexEventPVFinalPriceElectionFallback is present, Tag 2613.
func (m NoUnderlyingComplexEvents) HasUnderlyingComplexEventPVFinalPriceElectionFallback() bool {
	return m.Has(tag.UnderlyingComplexEventPVFinalPriceElectionFallback)
}

// NoUnderlyingComplexEventDates is a repeating group element, Tag 2053.
type NoUnderlyingComplexEventDates struct {
	*quickfix.Group
}

// SetUnderlyingComplexEventStartDate sets UnderlyingComplexEventStartDate, Tag 2054.
func (m NoUnderlyingComplexEventDates) SetUnderlyingComplexEventStartDate(v string) {
	m.Set(field.NewUnderlyingComplexEventStartDate(v))
}

// SetUnderlyingComplexEventEndDate sets UnderlyingComplexEventEndDate, Tag 2055.
func (m NoUnderlyingComplexEventDates) SetUnderlyingComplexEventEndDate(v string) {
	m.Set(field.NewUnderlyingComplexEventEndDate(v))
}

// SetNoUnderlyingComplexEventTimes sets NoUnderlyingComplexEventTimes, Tag 2056.
func (m NoUnderlyingComplexEventDates) SetNoUnderlyingComplexEventTimes(f NoUnderlyingComplexEventTimesRepeatingGroup) {
	m.SetGroup(f)
}

// GetUnderlyingComplexEventStartDate gets UnderlyingComplexEventStartDate, Tag 2054.
func (m NoUnderlyingComplexEventDates) GetUnderlyingComplexEventStartDate() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingComplexEventStartDateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingComplexEventEndDate gets UnderlyingComplexEventEndDate, Tag 2055.
func (m NoUnderlyingComplexEventDates) GetUnderlyingComplexEventEndDate() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingComplexEventEndDateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUnderlyingComplexEventTimes gets NoUnderlyingComplexEventTimes, Tag 2056.
func (m NoUnderlyingComplexEventDates) GetNoUnderlyingComplexEventTimes() (NoUnderlyingComplexEventTimesRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingComplexEventTimesRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// HasUnderlyingComplexEventStartDate returns true if UnderlyingComplexEventStartDate is present, Tag 2054.
func (m NoUnderlyingComplexEventDates) HasUnderlyingComplexEventStartDate() bool {
	return m.Has(tag.UnderlyingComplexEventStartDate)
}

// HasUnderlyingComplexEventEndDate returns true if UnderlyingComplexEventEndDate is present, Tag 2055.
func (m NoUnderlyingComplexEventDates) HasUnderlyingComplexEventEndDate() bool {
	return m.Has(tag.UnderlyingComplexEventEndDate)
}

// HasNoUnderlyingComplexEventTimes returns true if NoUnderlyingComplexEventTimes is present, Tag 2056.
func (m NoUnderlyingComplexEventDates) HasNoUnderlyingComplexEventTimes() bool {
	return m.Has(tag.NoUnderlyingComplexEventTimes)
}

// NoUnderlyingComplexEventTimes is a repeating group element, Tag 2056.
type NoUnderlyingComplexEventTimes struct {
	*quickfix.Group
}

// SetUnderlyingComplexEventStartTime sets UnderlyingComplexEventStartTime, Tag 2057.
func (m NoUnderlyingComplexEventTimes) SetUnderlyingComplexEventStartTime(v string) {
	m.Set(field.NewUnderlyingComplexEventStartTime(v))
}

// SetUnderlyingComplexEventEndTime sets UnderlyingComplexEventEndTime, Tag 2058.
func (m NoUnderlyingComplexEventTimes) SetUnderlyingComplexEventEndTime(v string) {
	m.Set(field.NewUnderlyingComplexEventEndTime(v))
}

// GetUnderlyingComplexEventStartTime gets UnderlyingComplexEventStartTime, Tag 2057.
func (m NoUnderlyingComplexEventTimes) GetUnderlyingComplexEventStartTime() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingComplexEventStartTimeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingComplexEventEndTime gets UnderlyingComplexEventEndTime, Tag 2058.
func (m NoUnderlyingComplexEventTimes) GetUnderlyingComplexEventEndTime() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingComplexEventEndTimeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingComplexEventStartTime returns true if UnderlyingComplexEventStartTime is present, Tag 2057.
func (m NoUnderlyingComplexEventTimes) HasUnderlyingComplexEventStartTime() bool {
	return m.Has(tag.UnderlyingComplexEventStartTime)
}

// HasUnderlyingComplexEventEndTime returns true if UnderlyingComplexEventEndTime is present, Tag 2058.
func (m NoUnderlyingComplexEventTimes) HasUnderlyingComplexEventEndTime() bool {
	return m.Has(tag.UnderlyingComplexEventEndTime)
}

// NoUnderlyingComplexEventTimesRepeatingGroup is a repeating group, Tag 2056.
type NoUnderlyingComplexEventTimesRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingComplexEventTimesRepeatingGroup returns an initialized, NoUnderlyingComplexEventTimesRepeatingGroup.
func NewNoUnderlyingComplexEventTimesRepeatingGroup() NoUnderlyingComplexEventTimesRepeatingGroup {
	return NoUnderlyingComplexEventTimesRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingComplexEventTimes,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingComplexEventStartTime),
				quickfix.GroupElement(tag.UnderlyingComplexEventEndTime),
			},
		),
	}
}

// Add create and append a new NoUnderlyingComplexEventTimes to this group.
func (m NoUnderlyingComplexEventTimesRepeatingGroup) Add() NoUnderlyingComplexEventTimes {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingComplexEventTimes{g}
}

// Get returns the ith NoUnderlyingComplexEventTimes in the NoUnderlyingComplexEventTimesRepeatinGroup.
func (m NoUnderlyingComplexEventTimesRepeatingGroup) Get(i int) NoUnderlyingComplexEventTimes {
	return NoUnderlyingComplexEventTimes{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingComplexEventDatesRepeatingGroup is a repeating group, Tag 2053.
type NoUnderlyingComplexEventDatesRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingComplexEventDatesRepeatingGroup returns an initialized, NoUnderlyingComplexEventDatesRepeatingGroup.
func NewNoUnderlyingComplexEventDatesRepeatingGroup() NoUnderlyingComplexEventDatesRepeatingGroup {
	return NoUnderlyingComplexEventDatesRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingComplexEventDates,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingComplexEventStartDate),
				quickfix.GroupElement(tag.UnderlyingComplexEventEndDate),
				NewNoUnderlyingComplexEventTimesRepeatingGroup(),
			},
		),
	}
}

// Add create and append a new NoUnderlyingComplexEventDates to this group.
func (m NoUnderlyingComplexEventDatesRepeatingGroup) Add() NoUnderlyingComplexEventDates {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingComplexEventDates{g}
}

// Get returns the ith NoUnderlyingComplexEventDates in the NoUnderlyingComplexEventDatesRepeatinGroup.
func (m NoUnderlyingComplexEventDatesRepeatingGroup) Get(i int) NoUnderlyingComplexEventDates {
	return NoUnderlyingComplexEventDates{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingComplexEventRateSources is a repeating group element, Tag 41732.
type NoUnderlyingComplexEventRateSources struct {
	*quickfix.Group
}

// SetUnderlyingComplexEventRateSource sets UnderlyingComplexEventRateSource, Tag 41733.
func (m NoUnderlyingComplexEventRateSources) SetUnderlyingComplexEventRateSource(v int) {
	m.Set(field.NewUnderlyingComplexEventRateSource(v))
}

// SetUnderlyingComplexEventRateSourceType sets UnderlyingComplexEventRateSourceType, Tag 41734.
func (m NoUnderlyingComplexEventRateSources) SetUnderlyingComplexEventRateSourceType(v int) {
	m.Set(field.NewUnderlyingComplexEventRateSourceType(v))
}

// SetUnderlyingComplexEventReferencePage sets UnderlyingComplexEventReferencePage, Tag 41735.
func (m NoUnderlyingComplexEventRateSources) SetUnderlyingComplexEventReferencePage(v string) {
	m.Set(field.NewUnderlyingComplexEventReferencePage(v))
}

// SetUnderlyingComplexEventReferencePageHeading sets UnderlyingComplexEventReferencePageHeading, Tag 41736.
func (m NoUnderlyingComplexEventRateSources) SetUnderlyingComplexEventReferencePageHeading(v string) {
	m.Set(field.NewUnderlyingComplexEventReferencePageHeading(v))
}

// GetUnderlyingComplexEventRateSource gets UnderlyingComplexEventRateSource, Tag 41733.
func (m NoUnderlyingComplexEventRateSources) GetUnderlyingComplexEventRateSource() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingComplexEventRateSourceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingComplexEventRateSourceType gets UnderlyingComplexEventRateSourceType, Tag 41734.
func (m NoUnderlyingComplexEventRateSources) GetUnderlyingComplexEventRateSourceType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingComplexEventRateSourceTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingComplexEventReferencePage gets UnderlyingComplexEventReferencePage, Tag 41735.
func (m NoUnderlyingComplexEventRateSources) GetUnderlyingComplexEventReferencePage() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingComplexEventReferencePageField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingComplexEventReferencePageHeading gets UnderlyingComplexEventReferencePageHeading, Tag 41736.
func (m NoUnderlyingComplexEventRateSources) GetUnderlyingComplexEventReferencePageHeading() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingComplexEventReferencePageHeadingField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingComplexEventRateSource returns true if UnderlyingComplexEventRateSource is present, Tag 41733.
func (m NoUnderlyingComplexEventRateSources) HasUnderlyingComplexEventRateSource() bool {
	return m.Has(tag.UnderlyingComplexEventRateSource)
}

// HasUnderlyingComplexEventRateSourceType returns true if UnderlyingComplexEventRateSourceType is present, Tag 41734.
func (m NoUnderlyingComplexEventRateSources) HasUnderlyingComplexEventRateSourceType() bool {
	return m.Has(tag.UnderlyingComplexEventRateSourceType)
}

// HasUnderlyingComplexEventReferencePage returns true if UnderlyingComplexEventReferencePage is present, Tag 41735.
func (m NoUnderlyingComplexEventRateSources) HasUnderlyingComplexEventReferencePage() bool {
	return m.Has(tag.UnderlyingComplexEventReferencePage)
}

// HasUnderlyingComplexEventReferencePageHeading returns true if UnderlyingComplexEventReferencePageHeading is present, Tag 41736.
func (m NoUnderlyingComplexEventRateSources) HasUnderlyingComplexEventReferencePageHeading() bool {
	return m.Has(tag.UnderlyingComplexEventReferencePageHeading)
}

// NoUnderlyingComplexEventRateSourcesRepeatingGroup is a repeating group, Tag 41732.
type NoUnderlyingComplexEventRateSourcesRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingComplexEventRateSourcesRepeatingGroup returns an initialized, NoUnderlyingComplexEventRateSourcesRepeatingGroup.
func NewNoUnderlyingComplexEventRateSourcesRepeatingGroup() NoUnderlyingComplexEventRateSourcesRepeatingGroup {
	return NoUnderlyingComplexEventRateSourcesRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingComplexEventRateSources,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingComplexEventRateSource),
				quickfix.GroupElement(tag.UnderlyingComplexEventRateSourceType),
				quickfix.GroupElement(tag.UnderlyingComplexEventReferencePage),
				quickfix.GroupElement(tag.UnderlyingComplexEventReferencePageHeading),
			},
		),
	}
}

// Add create and append a new NoUnderlyingComplexEventRateSources to this group.
func (m NoUnderlyingComplexEventRateSourcesRepeatingGroup) Add() NoUnderlyingComplexEventRateSources {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingComplexEventRateSources{g}
}

// Get returns the ith NoUnderlyingComplexEventRateSources in the NoUnderlyingComplexEventRateSourcesRepeatinGroup.
func (m NoUnderlyingComplexEventRateSourcesRepeatingGroup) Get(i int) NoUnderlyingComplexEventRateSources {
	return NoUnderlyingComplexEventRateSources{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingComplexEventDateBusinessCenters is a repeating group element, Tag 41737.
type NoUnderlyingComplexEventDateBusinessCenters struct {
	*quickfix.Group
}

// SetUnderlyingComplexEventDateBusinessCenter sets UnderlyingComplexEventDateBusinessCenter, Tag 41738.
func (m NoUnderlyingComplexEventDateBusinessCenters) SetUnderlyingComplexEventDateBusinessCenter(v string) {
	m.Set(field.NewUnderlyingComplexEventDateBusinessCenter(v))
}

// GetUnderlyingComplexEventDateBusinessCenter gets UnderlyingComplexEventDateBusinessCenter, Tag 41738.
func (m NoUnderlyingComplexEventDateBusinessCenters) GetUnderlyingComplexEventDateBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingComplexEventDateBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingComplexEventDateBusinessCenter returns true if UnderlyingComplexEventDateBusinessCenter is present, Tag 41738.
func (m NoUnderlyingComplexEventDateBusinessCenters) HasUnderlyingComplexEventDateBusinessCenter() bool {
	return m.Has(tag.UnderlyingComplexEventDateBusinessCenter)
}

// NoUnderlyingComplexEventDateBusinessCentersRepeatingGroup is a repeating group, Tag 41737.
type NoUnderlyingComplexEventDateBusinessCentersRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingComplexEventDateBusinessCentersRepeatingGroup returns an initialized, NoUnderlyingComplexEventDateBusinessCentersRepeatingGroup.
func NewNoUnderlyingComplexEventDateBusinessCentersRepeatingGroup() NoUnderlyingComplexEventDateBusinessCentersRepeatingGroup {
	return NoUnderlyingComplexEventDateBusinessCentersRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingComplexEventDateBusinessCenters,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingComplexEventDateBusinessCenter),
			},
		),
	}
}

// Add create and append a new NoUnderlyingComplexEventDateBusinessCenters to this group.
func (m NoUnderlyingComplexEventDateBusinessCentersRepeatingGroup) Add() NoUnderlyingComplexEventDateBusinessCenters {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingComplexEventDateBusinessCenters{g}
}

// Get returns the ith NoUnderlyingComplexEventDateBusinessCenters in the NoUnderlyingComplexEventDateBusinessCentersRepeatinGroup.
func (m NoUnderlyingComplexEventDateBusinessCentersRepeatingGroup) Get(i int) NoUnderlyingComplexEventDateBusinessCenters {
	return NoUnderlyingComplexEventDateBusinessCenters{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingComplexEventPeriods is a repeating group element, Tag 41729.
type NoUnderlyingComplexEventPeriods struct {
	*quickfix.Group
}

// SetUnderlyingComplexEventPeriodType sets UnderlyingComplexEventPeriodType, Tag 41730.
func (m NoUnderlyingComplexEventPeriods) SetUnderlyingComplexEventPeriodType(v int) {
	m.Set(field.NewUnderlyingComplexEventPeriodType(v))
}

// SetUnderlyingComplexEventBusinessCenter sets UnderlyingComplexEventBusinessCenter, Tag 41731.
func (m NoUnderlyingComplexEventPeriods) SetUnderlyingComplexEventBusinessCenter(v string) {
	m.Set(field.NewUnderlyingComplexEventBusinessCenter(v))
}

// SetNoUnderlyingComplexEventSchedules sets NoUnderlyingComplexEventSchedules, Tag 41750.
func (m NoUnderlyingComplexEventPeriods) SetNoUnderlyingComplexEventSchedules(f NoUnderlyingComplexEventSchedulesRepeatingGroup) {
	m.SetGroup(f)
}

// SetNoUnderlyingComplexEventPeriodDateTimes sets NoUnderlyingComplexEventPeriodDateTimes, Tag 41726.
func (m NoUnderlyingComplexEventPeriods) SetNoUnderlyingComplexEventPeriodDateTimes(f NoUnderlyingComplexEventPeriodDateTimesRepeatingGroup) {
	m.SetGroup(f)
}

// SetNoUnderlyingComplexEventAveragingObservations sets NoUnderlyingComplexEventAveragingObservations, Tag 41713.
func (m NoUnderlyingComplexEventPeriods) SetNoUnderlyingComplexEventAveragingObservations(f NoUnderlyingComplexEventAveragingObservationsRepeatingGroup) {
	m.SetGroup(f)
}

// GetUnderlyingComplexEventPeriodType gets UnderlyingComplexEventPeriodType, Tag 41730.
func (m NoUnderlyingComplexEventPeriods) GetUnderlyingComplexEventPeriodType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingComplexEventPeriodTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingComplexEventBusinessCenter gets UnderlyingComplexEventBusinessCenter, Tag 41731.
func (m NoUnderlyingComplexEventPeriods) GetUnderlyingComplexEventBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingComplexEventBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUnderlyingComplexEventSchedules gets NoUnderlyingComplexEventSchedules, Tag 41750.
func (m NoUnderlyingComplexEventPeriods) GetNoUnderlyingComplexEventSchedules() (NoUnderlyingComplexEventSchedulesRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingComplexEventSchedulesRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetNoUnderlyingComplexEventPeriodDateTimes gets NoUnderlyingComplexEventPeriodDateTimes, Tag 41726.
func (m NoUnderlyingComplexEventPeriods) GetNoUnderlyingComplexEventPeriodDateTimes() (NoUnderlyingComplexEventPeriodDateTimesRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingComplexEventPeriodDateTimesRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetNoUnderlyingComplexEventAveragingObservations gets NoUnderlyingComplexEventAveragingObservations, Tag 41713.
func (m NoUnderlyingComplexEventPeriods) GetNoUnderlyingComplexEventAveragingObservations() (NoUnderlyingComplexEventAveragingObservationsRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingComplexEventAveragingObservationsRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// HasUnderlyingComplexEventPeriodType returns true if UnderlyingComplexEventPeriodType is present, Tag 41730.
func (m NoUnderlyingComplexEventPeriods) HasUnderlyingComplexEventPeriodType() bool {
	return m.Has(tag.UnderlyingComplexEventPeriodType)
}

// HasUnderlyingComplexEventBusinessCenter returns true if UnderlyingComplexEventBusinessCenter is present, Tag 41731.
func (m NoUnderlyingComplexEventPeriods) HasUnderlyingComplexEventBusinessCenter() bool {
	return m.Has(tag.UnderlyingComplexEventBusinessCenter)
}

// HasNoUnderlyingComplexEventSchedules returns true if NoUnderlyingComplexEventSchedules is present, Tag 41750.
func (m NoUnderlyingComplexEventPeriods) HasNoUnderlyingComplexEventSchedules() bool {
	return m.Has(tag.NoUnderlyingComplexEventSchedules)
}

// HasNoUnderlyingComplexEventPeriodDateTimes returns true if NoUnderlyingComplexEventPeriodDateTimes is present, Tag 41726.
func (m NoUnderlyingComplexEventPeriods) HasNoUnderlyingComplexEventPeriodDateTimes() bool {
	return m.Has(tag.NoUnderlyingComplexEventPeriodDateTimes)
}

// HasNoUnderlyingComplexEventAveragingObservations returns true if NoUnderlyingComplexEventAveragingObservations is present, Tag 41713.
func (m NoUnderlyingComplexEventPeriods) HasNoUnderlyingComplexEventAveragingObservations() bool {
	return m.Has(tag.NoUnderlyingComplexEventAveragingObservations)
}

// NoUnderlyingComplexEventSchedules is a repeating group element, Tag 41750.
type NoUnderlyingComplexEventSchedules struct {
	*quickfix.Group
}

// SetUnderlyingComplexEventScheduleStartDate sets UnderlyingComplexEventScheduleStartDate, Tag 41751.
func (m NoUnderlyingComplexEventSchedules) SetUnderlyingComplexEventScheduleStartDate(v string) {
	m.Set(field.NewUnderlyingComplexEventScheduleStartDate(v))
}

// SetUnderlyingComplexEventScheduleEndDate sets UnderlyingComplexEventScheduleEndDate, Tag 41752.
func (m NoUnderlyingComplexEventSchedules) SetUnderlyingComplexEventScheduleEndDate(v string) {
	m.Set(field.NewUnderlyingComplexEventScheduleEndDate(v))
}

// SetUnderlyingComplexEventScheduleFrequencyPeriod sets UnderlyingComplexEventScheduleFrequencyPeriod, Tag 41753.
func (m NoUnderlyingComplexEventSchedules) SetUnderlyingComplexEventScheduleFrequencyPeriod(v int) {
	m.Set(field.NewUnderlyingComplexEventScheduleFrequencyPeriod(v))
}

// SetUnderlyingComplexEventScheduleFrequencyUnit sets UnderlyingComplexEventScheduleFrequencyUnit, Tag 41754.
func (m NoUnderlyingComplexEventSchedules) SetUnderlyingComplexEventScheduleFrequencyUnit(v string) {
	m.Set(field.NewUnderlyingComplexEventScheduleFrequencyUnit(v))
}

// SetUnderlyingComplexEventScheduleRollConvention sets UnderlyingComplexEventScheduleRollConvention, Tag 41755.
func (m NoUnderlyingComplexEventSchedules) SetUnderlyingComplexEventScheduleRollConvention(v string) {
	m.Set(field.NewUnderlyingComplexEventScheduleRollConvention(v))
}

// GetUnderlyingComplexEventScheduleStartDate gets UnderlyingComplexEventScheduleStartDate, Tag 41751.
func (m NoUnderlyingComplexEventSchedules) GetUnderlyingComplexEventScheduleStartDate() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingComplexEventScheduleStartDateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingComplexEventScheduleEndDate gets UnderlyingComplexEventScheduleEndDate, Tag 41752.
func (m NoUnderlyingComplexEventSchedules) GetUnderlyingComplexEventScheduleEndDate() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingComplexEventScheduleEndDateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingComplexEventScheduleFrequencyPeriod gets UnderlyingComplexEventScheduleFrequencyPeriod, Tag 41753.
func (m NoUnderlyingComplexEventSchedules) GetUnderlyingComplexEventScheduleFrequencyPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingComplexEventScheduleFrequencyPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingComplexEventScheduleFrequencyUnit gets UnderlyingComplexEventScheduleFrequencyUnit, Tag 41754.
func (m NoUnderlyingComplexEventSchedules) GetUnderlyingComplexEventScheduleFrequencyUnit() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingComplexEventScheduleFrequencyUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingComplexEventScheduleRollConvention gets UnderlyingComplexEventScheduleRollConvention, Tag 41755.
func (m NoUnderlyingComplexEventSchedules) GetUnderlyingComplexEventScheduleRollConvention() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingComplexEventScheduleRollConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingComplexEventScheduleStartDate returns true if UnderlyingComplexEventScheduleStartDate is present, Tag 41751.
func (m NoUnderlyingComplexEventSchedules) HasUnderlyingComplexEventScheduleStartDate() bool {
	return m.Has(tag.UnderlyingComplexEventScheduleStartDate)
}

// HasUnderlyingComplexEventScheduleEndDate returns true if UnderlyingComplexEventScheduleEndDate is present, Tag 41752.
func (m NoUnderlyingComplexEventSchedules) HasUnderlyingComplexEventScheduleEndDate() bool {
	return m.Has(tag.UnderlyingComplexEventScheduleEndDate)
}

// HasUnderlyingComplexEventScheduleFrequencyPeriod returns true if UnderlyingComplexEventScheduleFrequencyPeriod is present, Tag 41753.
func (m NoUnderlyingComplexEventSchedules) HasUnderlyingComplexEventScheduleFrequencyPeriod() bool {
	return m.Has(tag.UnderlyingComplexEventScheduleFrequencyPeriod)
}

// HasUnderlyingComplexEventScheduleFrequencyUnit returns true if UnderlyingComplexEventScheduleFrequencyUnit is present, Tag 41754.
func (m NoUnderlyingComplexEventSchedules) HasUnderlyingComplexEventScheduleFrequencyUnit() bool {
	return m.Has(tag.UnderlyingComplexEventScheduleFrequencyUnit)
}

// HasUnderlyingComplexEventScheduleRollConvention returns true if UnderlyingComplexEventScheduleRollConvention is present, Tag 41755.
func (m NoUnderlyingComplexEventSchedules) HasUnderlyingComplexEventScheduleRollConvention() bool {
	return m.Has(tag.UnderlyingComplexEventScheduleRollConvention)
}

// NoUnderlyingComplexEventSchedulesRepeatingGroup is a repeating group, Tag 41750.
type NoUnderlyingComplexEventSchedulesRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingComplexEventSchedulesRepeatingGroup returns an initialized, NoUnderlyingComplexEventSchedulesRepeatingGroup.
func NewNoUnderlyingComplexEventSchedulesRepeatingGroup() NoUnderlyingComplexEventSchedulesRepeatingGroup {
	return NoUnderlyingComplexEventSchedulesRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingComplexEventSchedules,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingComplexEventScheduleStartDate),
				quickfix.GroupElement(tag.UnderlyingComplexEventScheduleEndDate),
				quickfix.GroupElement(tag.UnderlyingComplexEventScheduleFrequencyPeriod),
				quickfix.GroupElement(tag.UnderlyingComplexEventScheduleFrequencyUnit),
				quickfix.GroupElement(tag.UnderlyingComplexEventScheduleRollConvention),
			},
		),
	}
}

// Add create and append a new NoUnderlyingComplexEventSchedules to this group.
func (m NoUnderlyingComplexEventSchedulesRepeatingGroup) Add() NoUnderlyingComplexEventSchedules {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingComplexEventSchedules{g}
}

// Get returns the ith NoUnderlyingComplexEventSchedules in the NoUnderlyingComplexEventSchedulesRepeatinGroup.
func (m NoUnderlyingComplexEventSchedulesRepeatingGroup) Get(i int) NoUnderlyingComplexEventSchedules {
	return NoUnderlyingComplexEventSchedules{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingComplexEventPeriodDateTimes is a repeating group element, Tag 41726.
type NoUnderlyingComplexEventPeriodDateTimes struct {
	*quickfix.Group
}

// SetUnderlyingComplexEventPeriodDate sets UnderlyingComplexEventPeriodDate, Tag 41727.
func (m NoUnderlyingComplexEventPeriodDateTimes) SetUnderlyingComplexEventPeriodDate(v string) {
	m.Set(field.NewUnderlyingComplexEventPeriodDate(v))
}

// SetUnderlyingComplexEventPeriodTime sets UnderlyingComplexEventPeriodTime, Tag 41728.
func (m NoUnderlyingComplexEventPeriodDateTimes) SetUnderlyingComplexEventPeriodTime(v string) {
	m.Set(field.NewUnderlyingComplexEventPeriodTime(v))
}

// GetUnderlyingComplexEventPeriodDate gets UnderlyingComplexEventPeriodDate, Tag 41727.
func (m NoUnderlyingComplexEventPeriodDateTimes) GetUnderlyingComplexEventPeriodDate() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingComplexEventPeriodDateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingComplexEventPeriodTime gets UnderlyingComplexEventPeriodTime, Tag 41728.
func (m NoUnderlyingComplexEventPeriodDateTimes) GetUnderlyingComplexEventPeriodTime() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingComplexEventPeriodTimeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingComplexEventPeriodDate returns true if UnderlyingComplexEventPeriodDate is present, Tag 41727.
func (m NoUnderlyingComplexEventPeriodDateTimes) HasUnderlyingComplexEventPeriodDate() bool {
	return m.Has(tag.UnderlyingComplexEventPeriodDate)
}

// HasUnderlyingComplexEventPeriodTime returns true if UnderlyingComplexEventPeriodTime is present, Tag 41728.
func (m NoUnderlyingComplexEventPeriodDateTimes) HasUnderlyingComplexEventPeriodTime() bool {
	return m.Has(tag.UnderlyingComplexEventPeriodTime)
}

// NoUnderlyingComplexEventPeriodDateTimesRepeatingGroup is a repeating group, Tag 41726.
type NoUnderlyingComplexEventPeriodDateTimesRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingComplexEventPeriodDateTimesRepeatingGroup returns an initialized, NoUnderlyingComplexEventPeriodDateTimesRepeatingGroup.
func NewNoUnderlyingComplexEventPeriodDateTimesRepeatingGroup() NoUnderlyingComplexEventPeriodDateTimesRepeatingGroup {
	return NoUnderlyingComplexEventPeriodDateTimesRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingComplexEventPeriodDateTimes,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingComplexEventPeriodDate),
				quickfix.GroupElement(tag.UnderlyingComplexEventPeriodTime),
			},
		),
	}
}

// Add create and append a new NoUnderlyingComplexEventPeriodDateTimes to this group.
func (m NoUnderlyingComplexEventPeriodDateTimesRepeatingGroup) Add() NoUnderlyingComplexEventPeriodDateTimes {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingComplexEventPeriodDateTimes{g}
}

// Get returns the ith NoUnderlyingComplexEventPeriodDateTimes in the NoUnderlyingComplexEventPeriodDateTimesRepeatinGroup.
func (m NoUnderlyingComplexEventPeriodDateTimesRepeatingGroup) Get(i int) NoUnderlyingComplexEventPeriodDateTimes {
	return NoUnderlyingComplexEventPeriodDateTimes{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingComplexEventAveragingObservations is a repeating group element, Tag 41713.
type NoUnderlyingComplexEventAveragingObservations struct {
	*quickfix.Group
}

// SetUnderlyingComplexEventAveragingObservationNumber sets UnderlyingComplexEventAveragingObservationNumber, Tag 41714.
func (m NoUnderlyingComplexEventAveragingObservations) SetUnderlyingComplexEventAveragingObservationNumber(v int) {
	m.Set(field.NewUnderlyingComplexEventAveragingObservationNumber(v))
}

// SetUnderlyingComplexEventAveragingWeight sets UnderlyingComplexEventAveragingWeight, Tag 41715.
func (m NoUnderlyingComplexEventAveragingObservations) SetUnderlyingComplexEventAveragingWeight(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingComplexEventAveragingWeight(value, scale))
}

// GetUnderlyingComplexEventAveragingObservationNumber gets UnderlyingComplexEventAveragingObservationNumber, Tag 41714.
func (m NoUnderlyingComplexEventAveragingObservations) GetUnderlyingComplexEventAveragingObservationNumber() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingComplexEventAveragingObservationNumberField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingComplexEventAveragingWeight gets UnderlyingComplexEventAveragingWeight, Tag 41715.
func (m NoUnderlyingComplexEventAveragingObservations) GetUnderlyingComplexEventAveragingWeight() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingComplexEventAveragingWeightField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingComplexEventAveragingObservationNumber returns true if UnderlyingComplexEventAveragingObservationNumber is present, Tag 41714.
func (m NoUnderlyingComplexEventAveragingObservations) HasUnderlyingComplexEventAveragingObservationNumber() bool {
	return m.Has(tag.UnderlyingComplexEventAveragingObservationNumber)
}

// HasUnderlyingComplexEventAveragingWeight returns true if UnderlyingComplexEventAveragingWeight is present, Tag 41715.
func (m NoUnderlyingComplexEventAveragingObservations) HasUnderlyingComplexEventAveragingWeight() bool {
	return m.Has(tag.UnderlyingComplexEventAveragingWeight)
}

// NoUnderlyingComplexEventAveragingObservationsRepeatingGroup is a repeating group, Tag 41713.
type NoUnderlyingComplexEventAveragingObservationsRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingComplexEventAveragingObservationsRepeatingGroup returns an initialized, NoUnderlyingComplexEventAveragingObservationsRepeatingGroup.
func NewNoUnderlyingComplexEventAveragingObservationsRepeatingGroup() NoUnderlyingComplexEventAveragingObservationsRepeatingGroup {
	return NoUnderlyingComplexEventAveragingObservationsRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingComplexEventAveragingObservations,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingComplexEventAveragingObservationNumber),
				quickfix.GroupElement(tag.UnderlyingComplexEventAveragingWeight),
			},
		),
	}
}

// Add create and append a new NoUnderlyingComplexEventAveragingObservations to this group.
func (m NoUnderlyingComplexEventAveragingObservationsRepeatingGroup) Add() NoUnderlyingComplexEventAveragingObservations {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingComplexEventAveragingObservations{g}
}

// Get returns the ith NoUnderlyingComplexEventAveragingObservations in the NoUnderlyingComplexEventAveragingObservationsRepeatinGroup.
func (m NoUnderlyingComplexEventAveragingObservationsRepeatingGroup) Get(i int) NoUnderlyingComplexEventAveragingObservations {
	return NoUnderlyingComplexEventAveragingObservations{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingComplexEventPeriodsRepeatingGroup is a repeating group, Tag 41729.
type NoUnderlyingComplexEventPeriodsRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingComplexEventPeriodsRepeatingGroup returns an initialized, NoUnderlyingComplexEventPeriodsRepeatingGroup.
func NewNoUnderlyingComplexEventPeriodsRepeatingGroup() NoUnderlyingComplexEventPeriodsRepeatingGroup {
	return NoUnderlyingComplexEventPeriodsRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingComplexEventPeriods,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingComplexEventPeriodType),
				quickfix.GroupElement(tag.UnderlyingComplexEventBusinessCenter),
				NewNoUnderlyingComplexEventSchedulesRepeatingGroup(),
				NewNoUnderlyingComplexEventPeriodDateTimesRepeatingGroup(),
				NewNoUnderlyingComplexEventAveragingObservationsRepeatingGroup(),
			},
		),
	}
}

// Add create and append a new NoUnderlyingComplexEventPeriods to this group.
func (m NoUnderlyingComplexEventPeriodsRepeatingGroup) Add() NoUnderlyingComplexEventPeriods {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingComplexEventPeriods{g}
}

// Get returns the ith NoUnderlyingComplexEventPeriods in the NoUnderlyingComplexEventPeriodsRepeatinGroup.
func (m NoUnderlyingComplexEventPeriodsRepeatingGroup) Get(i int) NoUnderlyingComplexEventPeriods {
	return NoUnderlyingComplexEventPeriods{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingComplexEventCreditEventSources is a repeating group element, Tag 41748.
type NoUnderlyingComplexEventCreditEventSources struct {
	*quickfix.Group
}

// SetUnderlyingComplexEventCreditEventSource sets UnderlyingComplexEventCreditEventSource, Tag 41749.
func (m NoUnderlyingComplexEventCreditEventSources) SetUnderlyingComplexEventCreditEventSource(v string) {
	m.Set(field.NewUnderlyingComplexEventCreditEventSource(v))
}

// GetUnderlyingComplexEventCreditEventSource gets UnderlyingComplexEventCreditEventSource, Tag 41749.
func (m NoUnderlyingComplexEventCreditEventSources) GetUnderlyingComplexEventCreditEventSource() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingComplexEventCreditEventSourceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingComplexEventCreditEventSource returns true if UnderlyingComplexEventCreditEventSource is present, Tag 41749.
func (m NoUnderlyingComplexEventCreditEventSources) HasUnderlyingComplexEventCreditEventSource() bool {
	return m.Has(tag.UnderlyingComplexEventCreditEventSource)
}

// NoUnderlyingComplexEventCreditEventSourcesRepeatingGroup is a repeating group, Tag 41748.
type NoUnderlyingComplexEventCreditEventSourcesRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingComplexEventCreditEventSourcesRepeatingGroup returns an initialized, NoUnderlyingComplexEventCreditEventSourcesRepeatingGroup.
func NewNoUnderlyingComplexEventCreditEventSourcesRepeatingGroup() NoUnderlyingComplexEventCreditEventSourcesRepeatingGroup {
	return NoUnderlyingComplexEventCreditEventSourcesRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingComplexEventCreditEventSources,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingComplexEventCreditEventSource),
			},
		),
	}
}

// Add create and append a new NoUnderlyingComplexEventCreditEventSources to this group.
func (m NoUnderlyingComplexEventCreditEventSourcesRepeatingGroup) Add() NoUnderlyingComplexEventCreditEventSources {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingComplexEventCreditEventSources{g}
}

// Get returns the ith NoUnderlyingComplexEventCreditEventSources in the NoUnderlyingComplexEventCreditEventSourcesRepeatinGroup.
func (m NoUnderlyingComplexEventCreditEventSourcesRepeatingGroup) Get(i int) NoUnderlyingComplexEventCreditEventSources {
	return NoUnderlyingComplexEventCreditEventSources{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingComplexEventCreditEvents is a repeating group element, Tag 41716.
type NoUnderlyingComplexEventCreditEvents struct {
	*quickfix.Group
}

// SetUnderlyingComplexEventCreditEventType sets UnderlyingComplexEventCreditEventType, Tag 41717.
func (m NoUnderlyingComplexEventCreditEvents) SetUnderlyingComplexEventCreditEventType(v string) {
	m.Set(field.NewUnderlyingComplexEventCreditEventType(v))
}

// SetUnderlyingComplexEventCreditEventValue sets UnderlyingComplexEventCreditEventValue, Tag 41718.
func (m NoUnderlyingComplexEventCreditEvents) SetUnderlyingComplexEventCreditEventValue(v string) {
	m.Set(field.NewUnderlyingComplexEventCreditEventValue(v))
}

// SetUnderlyingComplexEventCreditEventCurrency sets UnderlyingComplexEventCreditEventCurrency, Tag 41719.
func (m NoUnderlyingComplexEventCreditEvents) SetUnderlyingComplexEventCreditEventCurrency(v string) {
	m.Set(field.NewUnderlyingComplexEventCreditEventCurrency(v))
}

// SetUnderlyingComplexEventCreditEventPeriod sets UnderlyingComplexEventCreditEventPeriod, Tag 41720.
func (m NoUnderlyingComplexEventCreditEvents) SetUnderlyingComplexEventCreditEventPeriod(v int) {
	m.Set(field.NewUnderlyingComplexEventCreditEventPeriod(v))
}

// SetUnderlyingComplexEventCreditEventUnit sets UnderlyingComplexEventCreditEventUnit, Tag 41721.
func (m NoUnderlyingComplexEventCreditEvents) SetUnderlyingComplexEventCreditEventUnit(v string) {
	m.Set(field.NewUnderlyingComplexEventCreditEventUnit(v))
}

// SetUnderlyingComplexEventCreditEventDayType sets UnderlyingComplexEventCreditEventDayType, Tag 41722.
func (m NoUnderlyingComplexEventCreditEvents) SetUnderlyingComplexEventCreditEventDayType(v int) {
	m.Set(field.NewUnderlyingComplexEventCreditEventDayType(v))
}

// SetUnderlyingComplexEventCreditEventRateSource sets UnderlyingComplexEventCreditEventRateSource, Tag 41723.
func (m NoUnderlyingComplexEventCreditEvents) SetUnderlyingComplexEventCreditEventRateSource(v int) {
	m.Set(field.NewUnderlyingComplexEventCreditEventRateSource(v))
}

// SetNoUnderlyingComplexEventCreditEventQualifiers sets NoUnderlyingComplexEventCreditEventQualifiers, Tag 41724.
func (m NoUnderlyingComplexEventCreditEvents) SetNoUnderlyingComplexEventCreditEventQualifiers(f NoUnderlyingComplexEventCreditEventQualifiersRepeatingGroup) {
	m.SetGroup(f)
}

// GetUnderlyingComplexEventCreditEventType gets UnderlyingComplexEventCreditEventType, Tag 41717.
func (m NoUnderlyingComplexEventCreditEvents) GetUnderlyingComplexEventCreditEventType() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingComplexEventCreditEventTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingComplexEventCreditEventValue gets UnderlyingComplexEventCreditEventValue, Tag 41718.
func (m NoUnderlyingComplexEventCreditEvents) GetUnderlyingComplexEventCreditEventValue() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingComplexEventCreditEventValueField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingComplexEventCreditEventCurrency gets UnderlyingComplexEventCreditEventCurrency, Tag 41719.
func (m NoUnderlyingComplexEventCreditEvents) GetUnderlyingComplexEventCreditEventCurrency() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingComplexEventCreditEventCurrencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingComplexEventCreditEventPeriod gets UnderlyingComplexEventCreditEventPeriod, Tag 41720.
func (m NoUnderlyingComplexEventCreditEvents) GetUnderlyingComplexEventCreditEventPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingComplexEventCreditEventPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingComplexEventCreditEventUnit gets UnderlyingComplexEventCreditEventUnit, Tag 41721.
func (m NoUnderlyingComplexEventCreditEvents) GetUnderlyingComplexEventCreditEventUnit() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingComplexEventCreditEventUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingComplexEventCreditEventDayType gets UnderlyingComplexEventCreditEventDayType, Tag 41722.
func (m NoUnderlyingComplexEventCreditEvents) GetUnderlyingComplexEventCreditEventDayType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingComplexEventCreditEventDayTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingComplexEventCreditEventRateSource gets UnderlyingComplexEventCreditEventRateSource, Tag 41723.
func (m NoUnderlyingComplexEventCreditEvents) GetUnderlyingComplexEventCreditEventRateSource() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingComplexEventCreditEventRateSourceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUnderlyingComplexEventCreditEventQualifiers gets NoUnderlyingComplexEventCreditEventQualifiers, Tag 41724.
func (m NoUnderlyingComplexEventCreditEvents) GetNoUnderlyingComplexEventCreditEventQualifiers() (NoUnderlyingComplexEventCreditEventQualifiersRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingComplexEventCreditEventQualifiersRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// HasUnderlyingComplexEventCreditEventType returns true if UnderlyingComplexEventCreditEventType is present, Tag 41717.
func (m NoUnderlyingComplexEventCreditEvents) HasUnderlyingComplexEventCreditEventType() bool {
	return m.Has(tag.UnderlyingComplexEventCreditEventType)
}

// HasUnderlyingComplexEventCreditEventValue returns true if UnderlyingComplexEventCreditEventValue is present, Tag 41718.
func (m NoUnderlyingComplexEventCreditEvents) HasUnderlyingComplexEventCreditEventValue() bool {
	return m.Has(tag.UnderlyingComplexEventCreditEventValue)
}

// HasUnderlyingComplexEventCreditEventCurrency returns true if UnderlyingComplexEventCreditEventCurrency is present, Tag 41719.
func (m NoUnderlyingComplexEventCreditEvents) HasUnderlyingComplexEventCreditEventCurrency() bool {
	return m.Has(tag.UnderlyingComplexEventCreditEventCurrency)
}

// HasUnderlyingComplexEventCreditEventPeriod returns true if UnderlyingComplexEventCreditEventPeriod is present, Tag 41720.
func (m NoUnderlyingComplexEventCreditEvents) HasUnderlyingComplexEventCreditEventPeriod() bool {
	return m.Has(tag.UnderlyingComplexEventCreditEventPeriod)
}

// HasUnderlyingComplexEventCreditEventUnit returns true if UnderlyingComplexEventCreditEventUnit is present, Tag 41721.
func (m NoUnderlyingComplexEventCreditEvents) HasUnderlyingComplexEventCreditEventUnit() bool {
	return m.Has(tag.UnderlyingComplexEventCreditEventUnit)
}

// HasUnderlyingComplexEventCreditEventDayType returns true if UnderlyingComplexEventCreditEventDayType is present, Tag 41722.
func (m NoUnderlyingComplexEventCreditEvents) HasUnderlyingComplexEventCreditEventDayType() bool {
	return m.Has(tag.UnderlyingComplexEventCreditEventDayType)
}

// HasUnderlyingComplexEventCreditEventRateSource returns true if UnderlyingComplexEventCreditEventRateSource is present, Tag 41723.
func (m NoUnderlyingComplexEventCreditEvents) HasUnderlyingComplexEventCreditEventRateSource() bool {
	return m.Has(tag.UnderlyingComplexEventCreditEventRateSource)
}

// HasNoUnderlyingComplexEventCreditEventQualifiers returns true if NoUnderlyingComplexEventCreditEventQualifiers is present, Tag 41724.
func (m NoUnderlyingComplexEventCreditEvents) HasNoUnderlyingComplexEventCreditEventQualifiers() bool {
	return m.Has(tag.NoUnderlyingComplexEventCreditEventQualifiers)
}

// NoUnderlyingComplexEventCreditEventQualifiers is a repeating group element, Tag 41724.
type NoUnderlyingComplexEventCreditEventQualifiers struct {
	*quickfix.Group
}

// SetUnderlyingComplexEventCreditEventQualifier sets UnderlyingComplexEventCreditEventQualifier, Tag 41725.
func (m NoUnderlyingComplexEventCreditEventQualifiers) SetUnderlyingComplexEventCreditEventQualifier(v string) {
	m.Set(field.NewUnderlyingComplexEventCreditEventQualifier(v))
}

// GetUnderlyingComplexEventCreditEventQualifier gets UnderlyingComplexEventCreditEventQualifier, Tag 41725.
func (m NoUnderlyingComplexEventCreditEventQualifiers) GetUnderlyingComplexEventCreditEventQualifier() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingComplexEventCreditEventQualifierField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingComplexEventCreditEventQualifier returns true if UnderlyingComplexEventCreditEventQualifier is present, Tag 41725.
func (m NoUnderlyingComplexEventCreditEventQualifiers) HasUnderlyingComplexEventCreditEventQualifier() bool {
	return m.Has(tag.UnderlyingComplexEventCreditEventQualifier)
}

// NoUnderlyingComplexEventCreditEventQualifiersRepeatingGroup is a repeating group, Tag 41724.
type NoUnderlyingComplexEventCreditEventQualifiersRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingComplexEventCreditEventQualifiersRepeatingGroup returns an initialized, NoUnderlyingComplexEventCreditEventQualifiersRepeatingGroup.
func NewNoUnderlyingComplexEventCreditEventQualifiersRepeatingGroup() NoUnderlyingComplexEventCreditEventQualifiersRepeatingGroup {
	return NoUnderlyingComplexEventCreditEventQualifiersRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingComplexEventCreditEventQualifiers,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingComplexEventCreditEventQualifier),
			},
		),
	}
}

// Add create and append a new NoUnderlyingComplexEventCreditEventQualifiers to this group.
func (m NoUnderlyingComplexEventCreditEventQualifiersRepeatingGroup) Add() NoUnderlyingComplexEventCreditEventQualifiers {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingComplexEventCreditEventQualifiers{g}
}

// Get returns the ith NoUnderlyingComplexEventCreditEventQualifiers in the NoUnderlyingComplexEventCreditEventQualifiersRepeatinGroup.
func (m NoUnderlyingComplexEventCreditEventQualifiersRepeatingGroup) Get(i int) NoUnderlyingComplexEventCreditEventQualifiers {
	return NoUnderlyingComplexEventCreditEventQualifiers{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingComplexEventCreditEventsRepeatingGroup is a repeating group, Tag 41716.
type NoUnderlyingComplexEventCreditEventsRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingComplexEventCreditEventsRepeatingGroup returns an initialized, NoUnderlyingComplexEventCreditEventsRepeatingGroup.
func NewNoUnderlyingComplexEventCreditEventsRepeatingGroup() NoUnderlyingComplexEventCreditEventsRepeatingGroup {
	return NoUnderlyingComplexEventCreditEventsRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingComplexEventCreditEvents,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingComplexEventCreditEventType),
				quickfix.GroupElement(tag.UnderlyingComplexEventCreditEventValue),
				quickfix.GroupElement(tag.UnderlyingComplexEventCreditEventCurrency),
				quickfix.GroupElement(tag.UnderlyingComplexEventCreditEventPeriod),
				quickfix.GroupElement(tag.UnderlyingComplexEventCreditEventUnit),
				quickfix.GroupElement(tag.UnderlyingComplexEventCreditEventDayType),
				quickfix.GroupElement(tag.UnderlyingComplexEventCreditEventRateSource),
				NewNoUnderlyingComplexEventCreditEventQualifiersRepeatingGroup(),
			},
		),
	}
}

// Add create and append a new NoUnderlyingComplexEventCreditEvents to this group.
func (m NoUnderlyingComplexEventCreditEventsRepeatingGroup) Add() NoUnderlyingComplexEventCreditEvents {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingComplexEventCreditEvents{g}
}

// Get returns the ith NoUnderlyingComplexEventCreditEvents in the NoUnderlyingComplexEventCreditEventsRepeatinGroup.
func (m NoUnderlyingComplexEventCreditEventsRepeatingGroup) Get(i int) NoUnderlyingComplexEventCreditEvents {
	return NoUnderlyingComplexEventCreditEvents{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingComplexEventsRepeatingGroup is a repeating group, Tag 2045.
type NoUnderlyingComplexEventsRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingComplexEventsRepeatingGroup returns an initialized, NoUnderlyingComplexEventsRepeatingGroup.
func NewNoUnderlyingComplexEventsRepeatingGroup() NoUnderlyingComplexEventsRepeatingGroup {
	return NoUnderlyingComplexEventsRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingComplexEvents,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingComplexEventType),
				quickfix.GroupElement(tag.UnderlyingComplexOptPayoutAmount),
				quickfix.GroupElement(tag.UnderlyingComplexEventPrice),
				quickfix.GroupElement(tag.UnderlyingComplexEventPriceBoundaryMethod),
				quickfix.GroupElement(tag.UnderlyingComplexEventPriceBoundaryPrecision),
				quickfix.GroupElement(tag.UnderlyingComplexEventPriceTimeType),
				quickfix.GroupElement(tag.UnderlyingComplexEventCondition),
				NewNoUnderlyingComplexEventDatesRepeatingGroup(),
				quickfix.GroupElement(tag.UnderlyingComplexOptPayoutPaySide),
				quickfix.GroupElement(tag.UnderlyingComplexOptPayoutReceiveSide),
				quickfix.GroupElement(tag.UnderlyingComplexOptPayoutUnderlier),
				quickfix.GroupElement(tag.UnderlyingComplexOptPayoutPercentage),
				quickfix.GroupElement(tag.UnderlyingComplexOptPayoutTime),
				quickfix.GroupElement(tag.UnderlyingComplexOptPayoutCurrency),
				quickfix.GroupElement(tag.UnderlyingComplexEventPricePercentage),
				quickfix.GroupElement(tag.UnderlyingComplexEventCurrencyOne),
				quickfix.GroupElement(tag.UnderlyingComplexEventCurrencyTwo),
				quickfix.GroupElement(tag.UnderlyingComplexEventQuoteBasis),
				quickfix.GroupElement(tag.UnderlyingComplexEventFixedFXRate),
				quickfix.GroupElement(tag.UnderlyingComplexEventDeterminationMethod),
				quickfix.GroupElement(tag.UnderlyingComplexEventCalculationAgent),
				quickfix.GroupElement(tag.UnderlyingComplexEventStrikePrice),
				quickfix.GroupElement(tag.UnderlyingComplexEventStrikeFactor),
				quickfix.GroupElement(tag.UnderlyingComplexEventStrikeNumberOfOptions),
				NewNoUnderlyingComplexEventRateSourcesRepeatingGroup(),
				quickfix.GroupElement(tag.UnderlyingComplexEventDateUnadjusted),
				quickfix.GroupElement(tag.UnderlyingComplexEventDateRelativeTo),
				quickfix.GroupElement(tag.UnderlyingComplexEventDateOffsetPeriod),
				quickfix.GroupElement(tag.UnderlyingComplexEventDateOffsetUnit),
				quickfix.GroupElement(tag.UnderlyingComplexEventDateOffsetDayType),
				quickfix.GroupElement(tag.UnderlyingComplexEventDateBusinessDayConvention),
				NewNoUnderlyingComplexEventDateBusinessCentersRepeatingGroup(),
				quickfix.GroupElement(tag.UnderlyingComplexEventDateAdjusted),
				quickfix.GroupElement(tag.UnderlyingComplexEventFixingTime),
				quickfix.GroupElement(tag.UnderlyingComplexEventFixingTimeBusinessCenter),
				NewNoUnderlyingComplexEventPeriodsRepeatingGroup(),
				quickfix.GroupElement(tag.UnderlyingComplexEventCreditEventsXIDRef),
				quickfix.GroupElement(tag.UnderlyingComplexEventCreditEventNotifyingParty),
				quickfix.GroupElement(tag.UnderlyingComplexEventCreditEventBusinessCenter),
				quickfix.GroupElement(tag.UnderlyingComplexEventCreditEventStandardSources),
				quickfix.GroupElement(tag.UnderlyingComplexEventCreditEventMinimumSources),
				NewNoUnderlyingComplexEventCreditEventSourcesRepeatingGroup(),
				NewNoUnderlyingComplexEventCreditEventsRepeatingGroup(),
				quickfix.GroupElement(tag.UnderlyingComplexEventXID),
				quickfix.GroupElement(tag.UnderlyingComplexEventXIDRef),
				quickfix.GroupElement(tag.UnderlyingComplexEventSpotRate),
				quickfix.GroupElement(tag.UnderlyingComplexEventForwardPoints),
				quickfix.GroupElement(tag.UnderlyingComplexEventFuturesPriceValuation),
				quickfix.GroupElement(tag.UnderlyingComplexEventOptionsPriceValuation),
				quickfix.GroupElement(tag.UnderlyingComplexEventPVFinalPriceElectionFallback),
			},
		),
	}
}

// Add create and append a new NoUnderlyingComplexEvents to this group.
func (m NoUnderlyingComplexEventsRepeatingGroup) Add() NoUnderlyingComplexEvents {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingComplexEvents{g}
}

// Get returns the ith NoUnderlyingComplexEvents in the NoUnderlyingComplexEventsRepeatinGroup.
func (m NoUnderlyingComplexEventsRepeatingGroup) Get(i int) NoUnderlyingComplexEvents {
	return NoUnderlyingComplexEvents{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingSecondaryAssetClasses is a repeating group element, Tag 2080.
type NoUnderlyingSecondaryAssetClasses struct {
	*quickfix.Group
}

// SetUnderlyingSecondaryAssetClass sets UnderlyingSecondaryAssetClass, Tag 2081.
func (m NoUnderlyingSecondaryAssetClasses) SetUnderlyingSecondaryAssetClass(v int) {
	m.Set(field.NewUnderlyingSecondaryAssetClass(v))
}

// SetUnderlyingSecondaryAssetSubClass sets UnderlyingSecondaryAssetSubClass, Tag 2082.
func (m NoUnderlyingSecondaryAssetClasses) SetUnderlyingSecondaryAssetSubClass(v int) {
	m.Set(field.NewUnderlyingSecondaryAssetSubClass(v))
}

// SetUnderlyingSecondaryAssetType sets UnderlyingSecondaryAssetType, Tag 2083.
func (m NoUnderlyingSecondaryAssetClasses) SetUnderlyingSecondaryAssetType(v string) {
	m.Set(field.NewUnderlyingSecondaryAssetType(v))
}

// SetUnderlyingSecondaryAssetSubType sets UnderlyingSecondaryAssetSubType, Tag 2745.
func (m NoUnderlyingSecondaryAssetClasses) SetUnderlyingSecondaryAssetSubType(v string) {
	m.Set(field.NewUnderlyingSecondaryAssetSubType(v))
}

// GetUnderlyingSecondaryAssetClass gets UnderlyingSecondaryAssetClass, Tag 2081.
func (m NoUnderlyingSecondaryAssetClasses) GetUnderlyingSecondaryAssetClass() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingSecondaryAssetClassField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingSecondaryAssetSubClass gets UnderlyingSecondaryAssetSubClass, Tag 2082.
func (m NoUnderlyingSecondaryAssetClasses) GetUnderlyingSecondaryAssetSubClass() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingSecondaryAssetSubClassField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingSecondaryAssetType gets UnderlyingSecondaryAssetType, Tag 2083.
func (m NoUnderlyingSecondaryAssetClasses) GetUnderlyingSecondaryAssetType() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingSecondaryAssetTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingSecondaryAssetSubType gets UnderlyingSecondaryAssetSubType, Tag 2745.
func (m NoUnderlyingSecondaryAssetClasses) GetUnderlyingSecondaryAssetSubType() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingSecondaryAssetSubTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingSecondaryAssetClass returns true if UnderlyingSecondaryAssetClass is present, Tag 2081.
func (m NoUnderlyingSecondaryAssetClasses) HasUnderlyingSecondaryAssetClass() bool {
	return m.Has(tag.UnderlyingSecondaryAssetClass)
}

// HasUnderlyingSecondaryAssetSubClass returns true if UnderlyingSecondaryAssetSubClass is present, Tag 2082.
func (m NoUnderlyingSecondaryAssetClasses) HasUnderlyingSecondaryAssetSubClass() bool {
	return m.Has(tag.UnderlyingSecondaryAssetSubClass)
}

// HasUnderlyingSecondaryAssetType returns true if UnderlyingSecondaryAssetType is present, Tag 2083.
func (m NoUnderlyingSecondaryAssetClasses) HasUnderlyingSecondaryAssetType() bool {
	return m.Has(tag.UnderlyingSecondaryAssetType)
}

// HasUnderlyingSecondaryAssetSubType returns true if UnderlyingSecondaryAssetSubType is present, Tag 2745.
func (m NoUnderlyingSecondaryAssetClasses) HasUnderlyingSecondaryAssetSubType() bool {
	return m.Has(tag.UnderlyingSecondaryAssetSubType)
}

// NoUnderlyingSecondaryAssetClassesRepeatingGroup is a repeating group, Tag 2080.
type NoUnderlyingSecondaryAssetClassesRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingSecondaryAssetClassesRepeatingGroup returns an initialized, NoUnderlyingSecondaryAssetClassesRepeatingGroup.
func NewNoUnderlyingSecondaryAssetClassesRepeatingGroup() NoUnderlyingSecondaryAssetClassesRepeatingGroup {
	return NoUnderlyingSecondaryAssetClassesRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingSecondaryAssetClasses,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingSecondaryAssetClass),
				quickfix.GroupElement(tag.UnderlyingSecondaryAssetSubClass),
				quickfix.GroupElement(tag.UnderlyingSecondaryAssetType),
				quickfix.GroupElement(tag.UnderlyingSecondaryAssetSubType),
			},
		),
	}
}

// Add create and append a new NoUnderlyingSecondaryAssetClasses to this group.
func (m NoUnderlyingSecondaryAssetClassesRepeatingGroup) Add() NoUnderlyingSecondaryAssetClasses {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingSecondaryAssetClasses{g}
}

// Get returns the ith NoUnderlyingSecondaryAssetClasses in the NoUnderlyingSecondaryAssetClassesRepeatinGroup.
func (m NoUnderlyingSecondaryAssetClassesRepeatingGroup) Get(i int) NoUnderlyingSecondaryAssetClasses {
	return NoUnderlyingSecondaryAssetClasses{m.RepeatingGroup.Get(i)}
}

// NoAssetAttributes is a repeating group element, Tag 2304.
type NoAssetAttributes struct {
	*quickfix.Group
}

// SetAssetAttributeType sets AssetAttributeType, Tag 2305.
func (m NoAssetAttributes) SetAssetAttributeType(v string) {
	m.Set(field.NewAssetAttributeType(v))
}

// SetAssetAttributeValue sets AssetAttributeValue, Tag 2306.
func (m NoAssetAttributes) SetAssetAttributeValue(v string) {
	m.Set(field.NewAssetAttributeValue(v))
}

// SetAssetAttributeLimit sets AssetAttributeLimit, Tag 2307.
func (m NoAssetAttributes) SetAssetAttributeLimit(v string) {
	m.Set(field.NewAssetAttributeLimit(v))
}

// GetAssetAttributeType gets AssetAttributeType, Tag 2305.
func (m NoAssetAttributes) GetAssetAttributeType() (v string, err quickfix.MessageRejectError) {
	var f field.AssetAttributeTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetAssetAttributeValue gets AssetAttributeValue, Tag 2306.
func (m NoAssetAttributes) GetAssetAttributeValue() (v string, err quickfix.MessageRejectError) {
	var f field.AssetAttributeValueField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetAssetAttributeLimit gets AssetAttributeLimit, Tag 2307.
func (m NoAssetAttributes) GetAssetAttributeLimit() (v string, err quickfix.MessageRejectError) {
	var f field.AssetAttributeLimitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasAssetAttributeType returns true if AssetAttributeType is present, Tag 2305.
func (m NoAssetAttributes) HasAssetAttributeType() bool {
	return m.Has(tag.AssetAttributeType)
}

// HasAssetAttributeValue returns true if AssetAttributeValue is present, Tag 2306.
func (m NoAssetAttributes) HasAssetAttributeValue() bool {
	return m.Has(tag.AssetAttributeValue)
}

// HasAssetAttributeLimit returns true if AssetAttributeLimit is present, Tag 2307.
func (m NoAssetAttributes) HasAssetAttributeLimit() bool {
	return m.Has(tag.AssetAttributeLimit)
}

// NoAssetAttributesRepeatingGroup is a repeating group, Tag 2304.
type NoAssetAttributesRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoAssetAttributesRepeatingGroup returns an initialized, NoAssetAttributesRepeatingGroup.
func NewNoAssetAttributesRepeatingGroup() NoAssetAttributesRepeatingGroup {
	return NoAssetAttributesRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoAssetAttributes,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.AssetAttributeType),
				quickfix.GroupElement(tag.AssetAttributeValue),
				quickfix.GroupElement(tag.AssetAttributeLimit),
			},
		),
	}
}

// Add create and append a new NoAssetAttributes to this group.
func (m NoAssetAttributesRepeatingGroup) Add() NoAssetAttributes {
	g := m.RepeatingGroup.Add()
	return NoAssetAttributes{g}
}

// Get returns the ith NoAssetAttributes in the NoAssetAttributesRepeatinGroup.
func (m NoAssetAttributesRepeatingGroup) Get(i int) NoAssetAttributes {
	return NoAssetAttributes{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingAssetAttributes is a repeating group element, Tag 2312.
type NoUnderlyingAssetAttributes struct {
	*quickfix.Group
}

// SetUnderlyingAssetAttributeType sets UnderlyingAssetAttributeType, Tag 2313.
func (m NoUnderlyingAssetAttributes) SetUnderlyingAssetAttributeType(v string) {
	m.Set(field.NewUnderlyingAssetAttributeType(v))
}

// SetUnderlyingAssetAttributeValue sets UnderlyingAssetAttributeValue, Tag 2314.
func (m NoUnderlyingAssetAttributes) SetUnderlyingAssetAttributeValue(v string) {
	m.Set(field.NewUnderlyingAssetAttributeValue(v))
}

// SetUnderlyingAssetAttributeLimit sets UnderlyingAssetAttributeLimit, Tag 2315.
func (m NoUnderlyingAssetAttributes) SetUnderlyingAssetAttributeLimit(v string) {
	m.Set(field.NewUnderlyingAssetAttributeLimit(v))
}

// GetUnderlyingAssetAttributeType gets UnderlyingAssetAttributeType, Tag 2313.
func (m NoUnderlyingAssetAttributes) GetUnderlyingAssetAttributeType() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingAssetAttributeTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingAssetAttributeValue gets UnderlyingAssetAttributeValue, Tag 2314.
func (m NoUnderlyingAssetAttributes) GetUnderlyingAssetAttributeValue() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingAssetAttributeValueField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingAssetAttributeLimit gets UnderlyingAssetAttributeLimit, Tag 2315.
func (m NoUnderlyingAssetAttributes) GetUnderlyingAssetAttributeLimit() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingAssetAttributeLimitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingAssetAttributeType returns true if UnderlyingAssetAttributeType is present, Tag 2313.
func (m NoUnderlyingAssetAttributes) HasUnderlyingAssetAttributeType() bool {
	return m.Has(tag.UnderlyingAssetAttributeType)
}

// HasUnderlyingAssetAttributeValue returns true if UnderlyingAssetAttributeValue is present, Tag 2314.
func (m NoUnderlyingAssetAttributes) HasUnderlyingAssetAttributeValue() bool {
	return m.Has(tag.UnderlyingAssetAttributeValue)
}

// HasUnderlyingAssetAttributeLimit returns true if UnderlyingAssetAttributeLimit is present, Tag 2315.
func (m NoUnderlyingAssetAttributes) HasUnderlyingAssetAttributeLimit() bool {
	return m.Has(tag.UnderlyingAssetAttributeLimit)
}

// NoUnderlyingAssetAttributesRepeatingGroup is a repeating group, Tag 2312.
type NoUnderlyingAssetAttributesRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingAssetAttributesRepeatingGroup returns an initialized, NoUnderlyingAssetAttributesRepeatingGroup.
func NewNoUnderlyingAssetAttributesRepeatingGroup() NoUnderlyingAssetAttributesRepeatingGroup {
	return NoUnderlyingAssetAttributesRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingAssetAttributes,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingAssetAttributeType),
				quickfix.GroupElement(tag.UnderlyingAssetAttributeValue),
				quickfix.GroupElement(tag.UnderlyingAssetAttributeLimit),
			},
		),
	}
}

// Add create and append a new NoUnderlyingAssetAttributes to this group.
func (m NoUnderlyingAssetAttributesRepeatingGroup) Add() NoUnderlyingAssetAttributes {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingAssetAttributes{g}
}

// Get returns the ith NoUnderlyingAssetAttributes in the NoUnderlyingAssetAttributesRepeatinGroup.
func (m NoUnderlyingAssetAttributesRepeatingGroup) Get(i int) NoUnderlyingAssetAttributes {
	return NoUnderlyingAssetAttributes{m.RepeatingGroup.Get(i)}
}

// NoAdditionalTerms is a repeating group element, Tag 40019.
type NoAdditionalTerms struct {
	*quickfix.Group
}

// SetAdditionalTermConditionPrecedentBondIndicator sets AdditionalTermConditionPrecedentBondIndicator, Tag 40020.
func (m NoAdditionalTerms) SetAdditionalTermConditionPrecedentBondIndicator(v bool) {
	m.Set(field.NewAdditionalTermConditionPrecedentBondIndicator(v))
}

// SetAdditionalTermDiscrepancyClauseIndicator sets AdditionalTermDiscrepancyClauseIndicator, Tag 40021.
func (m NoAdditionalTerms) SetAdditionalTermDiscrepancyClauseIndicator(v bool) {
	m.Set(field.NewAdditionalTermDiscrepancyClauseIndicator(v))
}

// SetNoAdditionalTermBondRefs sets NoAdditionalTermBondRefs, Tag 40000.
func (m NoAdditionalTerms) SetNoAdditionalTermBondRefs(f NoAdditionalTermBondRefsRepeatingGroup) {
	m.SetGroup(f)
}

// GetAdditionalTermConditionPrecedentBondIndicator gets AdditionalTermConditionPrecedentBondIndicator, Tag 40020.
func (m NoAdditionalTerms) GetAdditionalTermConditionPrecedentBondIndicator() (v bool, err quickfix.MessageRejectError) {
	var f field.AdditionalTermConditionPrecedentBondIndicatorField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetAdditionalTermDiscrepancyClauseIndicator gets AdditionalTermDiscrepancyClauseIndicator, Tag 40021.
func (m NoAdditionalTerms) GetAdditionalTermDiscrepancyClauseIndicator() (v bool, err quickfix.MessageRejectError) {
	var f field.AdditionalTermDiscrepancyClauseIndicatorField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoAdditionalTermBondRefs gets NoAdditionalTermBondRefs, Tag 40000.
func (m NoAdditionalTerms) GetNoAdditionalTermBondRefs() (NoAdditionalTermBondRefsRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoAdditionalTermBondRefsRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// HasAdditionalTermConditionPrecedentBondIndicator returns true if AdditionalTermConditionPrecedentBondIndicator is present, Tag 40020.
func (m NoAdditionalTerms) HasAdditionalTermConditionPrecedentBondIndicator() bool {
	return m.Has(tag.AdditionalTermConditionPrecedentBondIndicator)
}

// HasAdditionalTermDiscrepancyClauseIndicator returns true if AdditionalTermDiscrepancyClauseIndicator is present, Tag 40021.
func (m NoAdditionalTerms) HasAdditionalTermDiscrepancyClauseIndicator() bool {
	return m.Has(tag.AdditionalTermDiscrepancyClauseIndicator)
}

// HasNoAdditionalTermBondRefs returns true if NoAdditionalTermBondRefs is present, Tag 40000.
func (m NoAdditionalTerms) HasNoAdditionalTermBondRefs() bool {
	return m.Has(tag.NoAdditionalTermBondRefs)
}

// NoAdditionalTermBondRefs is a repeating group element, Tag 40000.
type NoAdditionalTermBondRefs struct {
	*quickfix.Group
}

// SetAdditionalTermBondSecurityID sets AdditionalTermBondSecurityID, Tag 40001.
func (m NoAdditionalTermBondRefs) SetAdditionalTermBondSecurityID(v string) {
	m.Set(field.NewAdditionalTermBondSecurityID(v))
}

// SetAdditionalTermBondSecurityIDSource sets AdditionalTermBondSecurityIDSource, Tag 40002.
func (m NoAdditionalTermBondRefs) SetAdditionalTermBondSecurityIDSource(v string) {
	m.Set(field.NewAdditionalTermBondSecurityIDSource(v))
}

// SetAdditionalTermBondDesc sets AdditionalTermBondDesc, Tag 40003.
func (m NoAdditionalTermBondRefs) SetAdditionalTermBondDesc(v string) {
	m.Set(field.NewAdditionalTermBondDesc(v))
}

// SetEncodedAdditionalTermBondDescLen sets EncodedAdditionalTermBondDescLen, Tag 40004.
func (m NoAdditionalTermBondRefs) SetEncodedAdditionalTermBondDescLen(v int) {
	m.Set(field.NewEncodedAdditionalTermBondDescLen(v))
}

// SetEncodedAdditionalTermBondDesc sets EncodedAdditionalTermBondDesc, Tag 40005.
func (m NoAdditionalTermBondRefs) SetEncodedAdditionalTermBondDesc(v string) {
	m.Set(field.NewEncodedAdditionalTermBondDesc(v))
}

// SetAdditionalTermBondCurrency sets AdditionalTermBondCurrency, Tag 40006.
func (m NoAdditionalTermBondRefs) SetAdditionalTermBondCurrency(v string) {
	m.Set(field.NewAdditionalTermBondCurrency(v))
}

// SetAdditionalTermBondIssuer sets AdditionalTermBondIssuer, Tag 40007.
func (m NoAdditionalTermBondRefs) SetAdditionalTermBondIssuer(v string) {
	m.Set(field.NewAdditionalTermBondIssuer(v))
}

// SetEncodedAdditionalTermBondIssuerLen sets EncodedAdditionalTermBondIssuerLen, Tag 40008.
func (m NoAdditionalTermBondRefs) SetEncodedAdditionalTermBondIssuerLen(v int) {
	m.Set(field.NewEncodedAdditionalTermBondIssuerLen(v))
}

// SetEncodedAdditionalTermBondIssuer sets EncodedAdditionalTermBondIssuer, Tag 40009.
func (m NoAdditionalTermBondRefs) SetEncodedAdditionalTermBondIssuer(v string) {
	m.Set(field.NewEncodedAdditionalTermBondIssuer(v))
}

// SetAdditionalTermBondSeniority sets AdditionalTermBondSeniority, Tag 40010.
func (m NoAdditionalTermBondRefs) SetAdditionalTermBondSeniority(v string) {
	m.Set(field.NewAdditionalTermBondSeniority(v))
}

// SetAdditionalTermBondCouponType sets AdditionalTermBondCouponType, Tag 40011.
func (m NoAdditionalTermBondRefs) SetAdditionalTermBondCouponType(v int) {
	m.Set(field.NewAdditionalTermBondCouponType(v))
}

// SetAdditionalTermBondCouponRate sets AdditionalTermBondCouponRate, Tag 40012.
func (m NoAdditionalTermBondRefs) SetAdditionalTermBondCouponRate(value decimal.Decimal, scale int32) {
	m.Set(field.NewAdditionalTermBondCouponRate(value, scale))
}

// SetAdditionalTermBondMaturityDate sets AdditionalTermBondMaturityDate, Tag 40013.
func (m NoAdditionalTermBondRefs) SetAdditionalTermBondMaturityDate(v string) {
	m.Set(field.NewAdditionalTermBondMaturityDate(v))
}

// SetAdditionalTermBondParValue sets AdditionalTermBondParValue, Tag 40014.
func (m NoAdditionalTermBondRefs) SetAdditionalTermBondParValue(value decimal.Decimal, scale int32) {
	m.Set(field.NewAdditionalTermBondParValue(value, scale))
}

// SetAdditionalTermBondCurrentTotalIssuedAmount sets AdditionalTermBondCurrentTotalIssuedAmount, Tag 40015.
func (m NoAdditionalTermBondRefs) SetAdditionalTermBondCurrentTotalIssuedAmount(value decimal.Decimal, scale int32) {
	m.Set(field.NewAdditionalTermBondCurrentTotalIssuedAmount(value, scale))
}

// SetAdditionalTermBondCouponFrequencyPeriod sets AdditionalTermBondCouponFrequencyPeriod, Tag 40016.
func (m NoAdditionalTermBondRefs) SetAdditionalTermBondCouponFrequencyPeriod(v int) {
	m.Set(field.NewAdditionalTermBondCouponFrequencyPeriod(v))
}

// SetAdditionalTermBondCouponFrequencyUnit sets AdditionalTermBondCouponFrequencyUnit, Tag 40017.
func (m NoAdditionalTermBondRefs) SetAdditionalTermBondCouponFrequencyUnit(v string) {
	m.Set(field.NewAdditionalTermBondCouponFrequencyUnit(v))
}

// SetAdditionalTermBondDayCount sets AdditionalTermBondDayCount, Tag 40018.
func (m NoAdditionalTermBondRefs) SetAdditionalTermBondDayCount(v int) {
	m.Set(field.NewAdditionalTermBondDayCount(v))
}

// GetAdditionalTermBondSecurityID gets AdditionalTermBondSecurityID, Tag 40001.
func (m NoAdditionalTermBondRefs) GetAdditionalTermBondSecurityID() (v string, err quickfix.MessageRejectError) {
	var f field.AdditionalTermBondSecurityIDField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetAdditionalTermBondSecurityIDSource gets AdditionalTermBondSecurityIDSource, Tag 40002.
func (m NoAdditionalTermBondRefs) GetAdditionalTermBondSecurityIDSource() (v string, err quickfix.MessageRejectError) {
	var f field.AdditionalTermBondSecurityIDSourceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetAdditionalTermBondDesc gets AdditionalTermBondDesc, Tag 40003.
func (m NoAdditionalTermBondRefs) GetAdditionalTermBondDesc() (v string, err quickfix.MessageRejectError) {
	var f field.AdditionalTermBondDescField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetEncodedAdditionalTermBondDescLen gets EncodedAdditionalTermBondDescLen, Tag 40004.
func (m NoAdditionalTermBondRefs) GetEncodedAdditionalTermBondDescLen() (v int, err quickfix.MessageRejectError) {
	var f field.EncodedAdditionalTermBondDescLenField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetEncodedAdditionalTermBondDesc gets EncodedAdditionalTermBondDesc, Tag 40005.
func (m NoAdditionalTermBondRefs) GetEncodedAdditionalTermBondDesc() (v string, err quickfix.MessageRejectError) {
	var f field.EncodedAdditionalTermBondDescField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetAdditionalTermBondCurrency gets AdditionalTermBondCurrency, Tag 40006.
func (m NoAdditionalTermBondRefs) GetAdditionalTermBondCurrency() (v string, err quickfix.MessageRejectError) {
	var f field.AdditionalTermBondCurrencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetAdditionalTermBondIssuer gets AdditionalTermBondIssuer, Tag 40007.
func (m NoAdditionalTermBondRefs) GetAdditionalTermBondIssuer() (v string, err quickfix.MessageRejectError) {
	var f field.AdditionalTermBondIssuerField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetEncodedAdditionalTermBondIssuerLen gets EncodedAdditionalTermBondIssuerLen, Tag 40008.
func (m NoAdditionalTermBondRefs) GetEncodedAdditionalTermBondIssuerLen() (v int, err quickfix.MessageRejectError) {
	var f field.EncodedAdditionalTermBondIssuerLenField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetEncodedAdditionalTermBondIssuer gets EncodedAdditionalTermBondIssuer, Tag 40009.
func (m NoAdditionalTermBondRefs) GetEncodedAdditionalTermBondIssuer() (v string, err quickfix.MessageRejectError) {
	var f field.EncodedAdditionalTermBondIssuerField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetAdditionalTermBondSeniority gets AdditionalTermBondSeniority, Tag 40010.
func (m NoAdditionalTermBondRefs) GetAdditionalTermBondSeniority() (v string, err quickfix.MessageRejectError) {
	var f field.AdditionalTermBondSeniorityField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetAdditionalTermBondCouponType gets AdditionalTermBondCouponType, Tag 40011.
func (m NoAdditionalTermBondRefs) GetAdditionalTermBondCouponType() (v int, err quickfix.MessageRejectError) {
	var f field.AdditionalTermBondCouponTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetAdditionalTermBondCouponRate gets AdditionalTermBondCouponRate, Tag 40012.
func (m NoAdditionalTermBondRefs) GetAdditionalTermBondCouponRate() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.AdditionalTermBondCouponRateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetAdditionalTermBondMaturityDate gets AdditionalTermBondMaturityDate, Tag 40013.
func (m NoAdditionalTermBondRefs) GetAdditionalTermBondMaturityDate() (v string, err quickfix.MessageRejectError) {
	var f field.AdditionalTermBondMaturityDateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetAdditionalTermBondParValue gets AdditionalTermBondParValue, Tag 40014.
func (m NoAdditionalTermBondRefs) GetAdditionalTermBondParValue() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.AdditionalTermBondParValueField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetAdditionalTermBondCurrentTotalIssuedAmount gets AdditionalTermBondCurrentTotalIssuedAmount, Tag 40015.
func (m NoAdditionalTermBondRefs) GetAdditionalTermBondCurrentTotalIssuedAmount() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.AdditionalTermBondCurrentTotalIssuedAmountField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetAdditionalTermBondCouponFrequencyPeriod gets AdditionalTermBondCouponFrequencyPeriod, Tag 40016.
func (m NoAdditionalTermBondRefs) GetAdditionalTermBondCouponFrequencyPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.AdditionalTermBondCouponFrequencyPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetAdditionalTermBondCouponFrequencyUnit gets AdditionalTermBondCouponFrequencyUnit, Tag 40017.
func (m NoAdditionalTermBondRefs) GetAdditionalTermBondCouponFrequencyUnit() (v string, err quickfix.MessageRejectError) {
	var f field.AdditionalTermBondCouponFrequencyUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetAdditionalTermBondDayCount gets AdditionalTermBondDayCount, Tag 40018.
func (m NoAdditionalTermBondRefs) GetAdditionalTermBondDayCount() (v int, err quickfix.MessageRejectError) {
	var f field.AdditionalTermBondDayCountField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasAdditionalTermBondSecurityID returns true if AdditionalTermBondSecurityID is present, Tag 40001.
func (m NoAdditionalTermBondRefs) HasAdditionalTermBondSecurityID() bool {
	return m.Has(tag.AdditionalTermBondSecurityID)
}

// HasAdditionalTermBondSecurityIDSource returns true if AdditionalTermBondSecurityIDSource is present, Tag 40002.
func (m NoAdditionalTermBondRefs) HasAdditionalTermBondSecurityIDSource() bool {
	return m.Has(tag.AdditionalTermBondSecurityIDSource)
}

// HasAdditionalTermBondDesc returns true if AdditionalTermBondDesc is present, Tag 40003.
func (m NoAdditionalTermBondRefs) HasAdditionalTermBondDesc() bool {
	return m.Has(tag.AdditionalTermBondDesc)
}

// HasEncodedAdditionalTermBondDescLen returns true if EncodedAdditionalTermBondDescLen is present, Tag 40004.
func (m NoAdditionalTermBondRefs) HasEncodedAdditionalTermBondDescLen() bool {
	return m.Has(tag.EncodedAdditionalTermBondDescLen)
}

// HasEncodedAdditionalTermBondDesc returns true if EncodedAdditionalTermBondDesc is present, Tag 40005.
func (m NoAdditionalTermBondRefs) HasEncodedAdditionalTermBondDesc() bool {
	return m.Has(tag.EncodedAdditionalTermBondDesc)
}

// HasAdditionalTermBondCurrency returns true if AdditionalTermBondCurrency is present, Tag 40006.
func (m NoAdditionalTermBondRefs) HasAdditionalTermBondCurrency() bool {
	return m.Has(tag.AdditionalTermBondCurrency)
}

// HasAdditionalTermBondIssuer returns true if AdditionalTermBondIssuer is present, Tag 40007.
func (m NoAdditionalTermBondRefs) HasAdditionalTermBondIssuer() bool {
	return m.Has(tag.AdditionalTermBondIssuer)
}

// HasEncodedAdditionalTermBondIssuerLen returns true if EncodedAdditionalTermBondIssuerLen is present, Tag 40008.
func (m NoAdditionalTermBondRefs) HasEncodedAdditionalTermBondIssuerLen() bool {
	return m.Has(tag.EncodedAdditionalTermBondIssuerLen)
}

// HasEncodedAdditionalTermBondIssuer returns true if EncodedAdditionalTermBondIssuer is present, Tag 40009.
func (m NoAdditionalTermBondRefs) HasEncodedAdditionalTermBondIssuer() bool {
	return m.Has(tag.EncodedAdditionalTermBondIssuer)
}

// HasAdditionalTermBondSeniority returns true if AdditionalTermBondSeniority is present, Tag 40010.
func (m NoAdditionalTermBondRefs) HasAdditionalTermBondSeniority() bool {
	return m.Has(tag.AdditionalTermBondSeniority)
}

// HasAdditionalTermBondCouponType returns true if AdditionalTermBondCouponType is present, Tag 40011.
func (m NoAdditionalTermBondRefs) HasAdditionalTermBondCouponType() bool {
	return m.Has(tag.AdditionalTermBondCouponType)
}

// HasAdditionalTermBondCouponRate returns true if AdditionalTermBondCouponRate is present, Tag 40012.
func (m NoAdditionalTermBondRefs) HasAdditionalTermBondCouponRate() bool {
	return m.Has(tag.AdditionalTermBondCouponRate)
}

// HasAdditionalTermBondMaturityDate returns true if AdditionalTermBondMaturityDate is present, Tag 40013.
func (m NoAdditionalTermBondRefs) HasAdditionalTermBondMaturityDate() bool {
	return m.Has(tag.AdditionalTermBondMaturityDate)
}

// HasAdditionalTermBondParValue returns true if AdditionalTermBondParValue is present, Tag 40014.
func (m NoAdditionalTermBondRefs) HasAdditionalTermBondParValue() bool {
	return m.Has(tag.AdditionalTermBondParValue)
}

// HasAdditionalTermBondCurrentTotalIssuedAmount returns true if AdditionalTermBondCurrentTotalIssuedAmount is present, Tag 40015.
func (m NoAdditionalTermBondRefs) HasAdditionalTermBondCurrentTotalIssuedAmount() bool {
	return m.Has(tag.AdditionalTermBondCurrentTotalIssuedAmount)
}

// HasAdditionalTermBondCouponFrequencyPeriod returns true if AdditionalTermBondCouponFrequencyPeriod is present, Tag 40016.
func (m NoAdditionalTermBondRefs) HasAdditionalTermBondCouponFrequencyPeriod() bool {
	return m.Has(tag.AdditionalTermBondCouponFrequencyPeriod)
}

// HasAdditionalTermBondCouponFrequencyUnit returns true if AdditionalTermBondCouponFrequencyUnit is present, Tag 40017.
func (m NoAdditionalTermBondRefs) HasAdditionalTermBondCouponFrequencyUnit() bool {
	return m.Has(tag.AdditionalTermBondCouponFrequencyUnit)
}

// HasAdditionalTermBondDayCount returns true if AdditionalTermBondDayCount is present, Tag 40018.
func (m NoAdditionalTermBondRefs) HasAdditionalTermBondDayCount() bool {
	return m.Has(tag.AdditionalTermBondDayCount)
}

// NoAdditionalTermBondRefsRepeatingGroup is a repeating group, Tag 40000.
type NoAdditionalTermBondRefsRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoAdditionalTermBondRefsRepeatingGroup returns an initialized, NoAdditionalTermBondRefsRepeatingGroup.
func NewNoAdditionalTermBondRefsRepeatingGroup() NoAdditionalTermBondRefsRepeatingGroup {
	return NoAdditionalTermBondRefsRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoAdditionalTermBondRefs,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.AdditionalTermBondSecurityID),
				quickfix.GroupElement(tag.AdditionalTermBondSecurityIDSource),
				quickfix.GroupElement(tag.AdditionalTermBondDesc),
				quickfix.GroupElement(tag.EncodedAdditionalTermBondDescLen),
				quickfix.GroupElement(tag.EncodedAdditionalTermBondDesc),
				quickfix.GroupElement(tag.AdditionalTermBondCurrency),
				quickfix.GroupElement(tag.AdditionalTermBondIssuer),
				quickfix.GroupElement(tag.EncodedAdditionalTermBondIssuerLen),
				quickfix.GroupElement(tag.EncodedAdditionalTermBondIssuer),
				quickfix.GroupElement(tag.AdditionalTermBondSeniority),
				quickfix.GroupElement(tag.AdditionalTermBondCouponType),
				quickfix.GroupElement(tag.AdditionalTermBondCouponRate),
				quickfix.GroupElement(tag.AdditionalTermBondMaturityDate),
				quickfix.GroupElement(tag.AdditionalTermBondParValue),
				quickfix.GroupElement(tag.AdditionalTermBondCurrentTotalIssuedAmount),
				quickfix.GroupElement(tag.AdditionalTermBondCouponFrequencyPeriod),
				quickfix.GroupElement(tag.AdditionalTermBondCouponFrequencyUnit),
				quickfix.GroupElement(tag.AdditionalTermBondDayCount),
			},
		),
	}
}

// Add create and append a new NoAdditionalTermBondRefs to this group.
func (m NoAdditionalTermBondRefsRepeatingGroup) Add() NoAdditionalTermBondRefs {
	g := m.RepeatingGroup.Add()
	return NoAdditionalTermBondRefs{g}
}

// Get returns the ith NoAdditionalTermBondRefs in the NoAdditionalTermBondRefsRepeatinGroup.
func (m NoAdditionalTermBondRefsRepeatingGroup) Get(i int) NoAdditionalTermBondRefs {
	return NoAdditionalTermBondRefs{m.RepeatingGroup.Get(i)}
}

// NoAdditionalTermsRepeatingGroup is a repeating group, Tag 40019.
type NoAdditionalTermsRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoAdditionalTermsRepeatingGroup returns an initialized, NoAdditionalTermsRepeatingGroup.
func NewNoAdditionalTermsRepeatingGroup() NoAdditionalTermsRepeatingGroup {
	return NoAdditionalTermsRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoAdditionalTerms,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.AdditionalTermConditionPrecedentBondIndicator),
				quickfix.GroupElement(tag.AdditionalTermDiscrepancyClauseIndicator),
				NewNoAdditionalTermBondRefsRepeatingGroup(),
			},
		),
	}
}

// Add create and append a new NoAdditionalTerms to this group.
func (m NoAdditionalTermsRepeatingGroup) Add() NoAdditionalTerms {
	g := m.RepeatingGroup.Add()
	return NoAdditionalTerms{g}
}

// Get returns the ith NoAdditionalTerms in the NoAdditionalTermsRepeatinGroup.
func (m NoAdditionalTermsRepeatingGroup) Get(i int) NoAdditionalTerms {
	return NoAdditionalTerms{m.RepeatingGroup.Get(i)}
}

// NoCashSettlTerms is a repeating group element, Tag 40022.
type NoCashSettlTerms struct {
	*quickfix.Group
}

// SetCashSettlCurrency sets CashSettlCurrency, Tag 40023.
func (m NoCashSettlTerms) SetCashSettlCurrency(v string) {
	m.Set(field.NewCashSettlCurrency(v))
}

// SetCashSettlValuationFirstBusinessDayOffset sets CashSettlValuationFirstBusinessDayOffset, Tag 40024.
func (m NoCashSettlTerms) SetCashSettlValuationFirstBusinessDayOffset(v int) {
	m.Set(field.NewCashSettlValuationFirstBusinessDayOffset(v))
}

// SetCashSettlValuationSubsequentBusinessDaysOffset sets CashSettlValuationSubsequentBusinessDaysOffset, Tag 40916.
func (m NoCashSettlTerms) SetCashSettlValuationSubsequentBusinessDaysOffset(v int) {
	m.Set(field.NewCashSettlValuationSubsequentBusinessDaysOffset(v))
}

// SetCashSettlNumOfValuationDates sets CashSettlNumOfValuationDates, Tag 40917.
func (m NoCashSettlTerms) SetCashSettlNumOfValuationDates(v int) {
	m.Set(field.NewCashSettlNumOfValuationDates(v))
}

// SetCashSettlValuationTime sets CashSettlValuationTime, Tag 40025.
func (m NoCashSettlTerms) SetCashSettlValuationTime(v string) {
	m.Set(field.NewCashSettlValuationTime(v))
}

// SetCashSettlBusinessCenter sets CashSettlBusinessCenter, Tag 40026.
func (m NoCashSettlTerms) SetCashSettlBusinessCenter(v string) {
	m.Set(field.NewCashSettlBusinessCenter(v))
}

// SetCashSettlQuoteMethod sets CashSettlQuoteMethod, Tag 40027.
func (m NoCashSettlTerms) SetCashSettlQuoteMethod(v enum.CashSettlQuoteMethod) {
	m.Set(field.NewCashSettlQuoteMethod(v))
}

// SetCashSettlQuoteAmount sets CashSettlQuoteAmount, Tag 40028.
func (m NoCashSettlTerms) SetCashSettlQuoteAmount(value decimal.Decimal, scale int32) {
	m.Set(field.NewCashSettlQuoteAmount(value, scale))
}

// SetCashSettlQuoteCurrency sets CashSettlQuoteCurrency, Tag 40029.
func (m NoCashSettlTerms) SetCashSettlQuoteCurrency(v string) {
	m.Set(field.NewCashSettlQuoteCurrency(v))
}

// SetCashSettlMinimumQuoteAmount sets CashSettlMinimumQuoteAmount, Tag 40030.
func (m NoCashSettlTerms) SetCashSettlMinimumQuoteAmount(value decimal.Decimal, scale int32) {
	m.Set(field.NewCashSettlMinimumQuoteAmount(value, scale))
}

// SetCashSettlMinimumQuoteCurrency sets CashSettlMinimumQuoteCurrency, Tag 40031.
func (m NoCashSettlTerms) SetCashSettlMinimumQuoteCurrency(v string) {
	m.Set(field.NewCashSettlMinimumQuoteCurrency(v))
}

// SetNoCashSettlDealers sets NoCashSettlDealers, Tag 40277.
func (m NoCashSettlTerms) SetNoCashSettlDealers(f NoCashSettlDealersRepeatingGroup) {
	m.SetGroup(f)
}

// SetCashSettlBusinessDays sets CashSettlBusinessDays, Tag 40033.
func (m NoCashSettlTerms) SetCashSettlBusinessDays(v int) {
	m.Set(field.NewCashSettlBusinessDays(v))
}

// SetCashSettlAmount sets CashSettlAmount, Tag 40034.
func (m NoCashSettlTerms) SetCashSettlAmount(value decimal.Decimal, scale int32) {
	m.Set(field.NewCashSettlAmount(value, scale))
}

// SetCashSettlRecoveryFactor sets CashSettlRecoveryFactor, Tag 40035.
func (m NoCashSettlTerms) SetCashSettlRecoveryFactor(value decimal.Decimal, scale int32) {
	m.Set(field.NewCashSettlRecoveryFactor(value, scale))
}

// SetCashSettlFixedTermIndicator sets CashSettlFixedTermIndicator, Tag 40036.
func (m NoCashSettlTerms) SetCashSettlFixedTermIndicator(v bool) {
	m.Set(field.NewCashSettlFixedTermIndicator(v))
}

// SetCashSettlAccruedInterestIndicator sets CashSettlAccruedInterestIndicator, Tag 40037.
func (m NoCashSettlTerms) SetCashSettlAccruedInterestIndicator(v bool) {
	m.Set(field.NewCashSettlAccruedInterestIndicator(v))
}

// SetCashSettlValuationMethod sets CashSettlValuationMethod, Tag 40038.
func (m NoCashSettlTerms) SetCashSettlValuationMethod(v enum.CashSettlValuationMethod) {
	m.Set(field.NewCashSettlValuationMethod(v))
}

// SetCashSettlTermXID sets CashSettlTermXID, Tag 40039.
func (m NoCashSettlTerms) SetCashSettlTermXID(v string) {
	m.Set(field.NewCashSettlTermXID(v))
}

// SetCashSettlPriceSource sets CashSettlPriceSource, Tag 42216.
func (m NoCashSettlTerms) SetCashSettlPriceSource(v string) {
	m.Set(field.NewCashSettlPriceSource(v))
}

// SetCashSettlPriceDefault sets CashSettlPriceDefault, Tag 42217.
func (m NoCashSettlTerms) SetCashSettlPriceDefault(v enum.CashSettlPriceDefault) {
	m.Set(field.NewCashSettlPriceDefault(v))
}

// SetCashSettlDateUnadjusted sets CashSettlDateUnadjusted, Tag 42207.
func (m NoCashSettlTerms) SetCashSettlDateUnadjusted(v string) {
	m.Set(field.NewCashSettlDateUnadjusted(v))
}

// SetCashSettlDateBusinessDayConvention sets CashSettlDateBusinessDayConvention, Tag 42208.
func (m NoCashSettlTerms) SetCashSettlDateBusinessDayConvention(v int) {
	m.Set(field.NewCashSettlDateBusinessDayConvention(v))
}

// SetNoCashSettlDateBusinessCenters sets NoCashSettlDateBusinessCenters, Tag 42214.
func (m NoCashSettlTerms) SetNoCashSettlDateBusinessCenters(f NoCashSettlDateBusinessCentersRepeatingGroup) {
	m.SetGroup(f)
}

// SetCashSettlDateRelativeTo sets CashSettlDateRelativeTo, Tag 42209.
func (m NoCashSettlTerms) SetCashSettlDateRelativeTo(v int) {
	m.Set(field.NewCashSettlDateRelativeTo(v))
}

// SetCashSettlDateOffsetPeriod sets CashSettlDateOffsetPeriod, Tag 42210.
func (m NoCashSettlTerms) SetCashSettlDateOffsetPeriod(v int) {
	m.Set(field.NewCashSettlDateOffsetPeriod(v))
}

// SetCashSettlDateOffsetUnit sets CashSettlDateOffsetUnit, Tag 42211.
func (m NoCashSettlTerms) SetCashSettlDateOffsetUnit(v string) {
	m.Set(field.NewCashSettlDateOffsetUnit(v))
}

// SetCashSettlDateOffsetDayType sets CashSettlDateOffsetDayType, Tag 42212.
func (m NoCashSettlTerms) SetCashSettlDateOffsetDayType(v int) {
	m.Set(field.NewCashSettlDateOffsetDayType(v))
}

// SetCashSettlDateAdjusted sets CashSettlDateAdjusted, Tag 42213.
func (m NoCashSettlTerms) SetCashSettlDateAdjusted(v string) {
	m.Set(field.NewCashSettlDateAdjusted(v))
}

// GetCashSettlCurrency gets CashSettlCurrency, Tag 40023.
func (m NoCashSettlTerms) GetCashSettlCurrency() (v string, err quickfix.MessageRejectError) {
	var f field.CashSettlCurrencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetCashSettlValuationFirstBusinessDayOffset gets CashSettlValuationFirstBusinessDayOffset, Tag 40024.
func (m NoCashSettlTerms) GetCashSettlValuationFirstBusinessDayOffset() (v int, err quickfix.MessageRejectError) {
	var f field.CashSettlValuationFirstBusinessDayOffsetField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetCashSettlValuationSubsequentBusinessDaysOffset gets CashSettlValuationSubsequentBusinessDaysOffset, Tag 40916.
func (m NoCashSettlTerms) GetCashSettlValuationSubsequentBusinessDaysOffset() (v int, err quickfix.MessageRejectError) {
	var f field.CashSettlValuationSubsequentBusinessDaysOffsetField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetCashSettlNumOfValuationDates gets CashSettlNumOfValuationDates, Tag 40917.
func (m NoCashSettlTerms) GetCashSettlNumOfValuationDates() (v int, err quickfix.MessageRejectError) {
	var f field.CashSettlNumOfValuationDatesField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetCashSettlValuationTime gets CashSettlValuationTime, Tag 40025.
func (m NoCashSettlTerms) GetCashSettlValuationTime() (v string, err quickfix.MessageRejectError) {
	var f field.CashSettlValuationTimeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetCashSettlBusinessCenter gets CashSettlBusinessCenter, Tag 40026.
func (m NoCashSettlTerms) GetCashSettlBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.CashSettlBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetCashSettlQuoteMethod gets CashSettlQuoteMethod, Tag 40027.
func (m NoCashSettlTerms) GetCashSettlQuoteMethod() (v enum.CashSettlQuoteMethod, err quickfix.MessageRejectError) {
	var f field.CashSettlQuoteMethodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetCashSettlQuoteAmount gets CashSettlQuoteAmount, Tag 40028.
func (m NoCashSettlTerms) GetCashSettlQuoteAmount() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.CashSettlQuoteAmountField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetCashSettlQuoteCurrency gets CashSettlQuoteCurrency, Tag 40029.
func (m NoCashSettlTerms) GetCashSettlQuoteCurrency() (v string, err quickfix.MessageRejectError) {
	var f field.CashSettlQuoteCurrencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetCashSettlMinimumQuoteAmount gets CashSettlMinimumQuoteAmount, Tag 40030.
func (m NoCashSettlTerms) GetCashSettlMinimumQuoteAmount() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.CashSettlMinimumQuoteAmountField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetCashSettlMinimumQuoteCurrency gets CashSettlMinimumQuoteCurrency, Tag 40031.
func (m NoCashSettlTerms) GetCashSettlMinimumQuoteCurrency() (v string, err quickfix.MessageRejectError) {
	var f field.CashSettlMinimumQuoteCurrencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoCashSettlDealers gets NoCashSettlDealers, Tag 40277.
func (m NoCashSettlTerms) GetNoCashSettlDealers() (NoCashSettlDealersRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoCashSettlDealersRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetCashSettlBusinessDays gets CashSettlBusinessDays, Tag 40033.
func (m NoCashSettlTerms) GetCashSettlBusinessDays() (v int, err quickfix.MessageRejectError) {
	var f field.CashSettlBusinessDaysField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetCashSettlAmount gets CashSettlAmount, Tag 40034.
func (m NoCashSettlTerms) GetCashSettlAmount() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.CashSettlAmountField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetCashSettlRecoveryFactor gets CashSettlRecoveryFactor, Tag 40035.
func (m NoCashSettlTerms) GetCashSettlRecoveryFactor() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.CashSettlRecoveryFactorField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetCashSettlFixedTermIndicator gets CashSettlFixedTermIndicator, Tag 40036.
func (m NoCashSettlTerms) GetCashSettlFixedTermIndicator() (v bool, err quickfix.MessageRejectError) {
	var f field.CashSettlFixedTermIndicatorField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetCashSettlAccruedInterestIndicator gets CashSettlAccruedInterestIndicator, Tag 40037.
func (m NoCashSettlTerms) GetCashSettlAccruedInterestIndicator() (v bool, err quickfix.MessageRejectError) {
	var f field.CashSettlAccruedInterestIndicatorField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetCashSettlValuationMethod gets CashSettlValuationMethod, Tag 40038.
func (m NoCashSettlTerms) GetCashSettlValuationMethod() (v enum.CashSettlValuationMethod, err quickfix.MessageRejectError) {
	var f field.CashSettlValuationMethodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetCashSettlTermXID gets CashSettlTermXID, Tag 40039.
func (m NoCashSettlTerms) GetCashSettlTermXID() (v string, err quickfix.MessageRejectError) {
	var f field.CashSettlTermXIDField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetCashSettlPriceSource gets CashSettlPriceSource, Tag 42216.
func (m NoCashSettlTerms) GetCashSettlPriceSource() (v string, err quickfix.MessageRejectError) {
	var f field.CashSettlPriceSourceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetCashSettlPriceDefault gets CashSettlPriceDefault, Tag 42217.
func (m NoCashSettlTerms) GetCashSettlPriceDefault() (v enum.CashSettlPriceDefault, err quickfix.MessageRejectError) {
	var f field.CashSettlPriceDefaultField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetCashSettlDateUnadjusted gets CashSettlDateUnadjusted, Tag 42207.
func (m NoCashSettlTerms) GetCashSettlDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.CashSettlDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetCashSettlDateBusinessDayConvention gets CashSettlDateBusinessDayConvention, Tag 42208.
func (m NoCashSettlTerms) GetCashSettlDateBusinessDayConvention() (v int, err quickfix.MessageRejectError) {
	var f field.CashSettlDateBusinessDayConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoCashSettlDateBusinessCenters gets NoCashSettlDateBusinessCenters, Tag 42214.
func (m NoCashSettlTerms) GetNoCashSettlDateBusinessCenters() (NoCashSettlDateBusinessCentersRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoCashSettlDateBusinessCentersRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetCashSettlDateRelativeTo gets CashSettlDateRelativeTo, Tag 42209.
func (m NoCashSettlTerms) GetCashSettlDateRelativeTo() (v int, err quickfix.MessageRejectError) {
	var f field.CashSettlDateRelativeToField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetCashSettlDateOffsetPeriod gets CashSettlDateOffsetPeriod, Tag 42210.
func (m NoCashSettlTerms) GetCashSettlDateOffsetPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.CashSettlDateOffsetPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetCashSettlDateOffsetUnit gets CashSettlDateOffsetUnit, Tag 42211.
func (m NoCashSettlTerms) GetCashSettlDateOffsetUnit() (v string, err quickfix.MessageRejectError) {
	var f field.CashSettlDateOffsetUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetCashSettlDateOffsetDayType gets CashSettlDateOffsetDayType, Tag 42212.
func (m NoCashSettlTerms) GetCashSettlDateOffsetDayType() (v int, err quickfix.MessageRejectError) {
	var f field.CashSettlDateOffsetDayTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetCashSettlDateAdjusted gets CashSettlDateAdjusted, Tag 42213.
func (m NoCashSettlTerms) GetCashSettlDateAdjusted() (v string, err quickfix.MessageRejectError) {
	var f field.CashSettlDateAdjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasCashSettlCurrency returns true if CashSettlCurrency is present, Tag 40023.
func (m NoCashSettlTerms) HasCashSettlCurrency() bool {
	return m.Has(tag.CashSettlCurrency)
}

// HasCashSettlValuationFirstBusinessDayOffset returns true if CashSettlValuationFirstBusinessDayOffset is present, Tag 40024.
func (m NoCashSettlTerms) HasCashSettlValuationFirstBusinessDayOffset() bool {
	return m.Has(tag.CashSettlValuationFirstBusinessDayOffset)
}

// HasCashSettlValuationSubsequentBusinessDaysOffset returns true if CashSettlValuationSubsequentBusinessDaysOffset is present, Tag 40916.
func (m NoCashSettlTerms) HasCashSettlValuationSubsequentBusinessDaysOffset() bool {
	return m.Has(tag.CashSettlValuationSubsequentBusinessDaysOffset)
}

// HasCashSettlNumOfValuationDates returns true if CashSettlNumOfValuationDates is present, Tag 40917.
func (m NoCashSettlTerms) HasCashSettlNumOfValuationDates() bool {
	return m.Has(tag.CashSettlNumOfValuationDates)
}

// HasCashSettlValuationTime returns true if CashSettlValuationTime is present, Tag 40025.
func (m NoCashSettlTerms) HasCashSettlValuationTime() bool {
	return m.Has(tag.CashSettlValuationTime)
}

// HasCashSettlBusinessCenter returns true if CashSettlBusinessCenter is present, Tag 40026.
func (m NoCashSettlTerms) HasCashSettlBusinessCenter() bool {
	return m.Has(tag.CashSettlBusinessCenter)
}

// HasCashSettlQuoteMethod returns true if CashSettlQuoteMethod is present, Tag 40027.
func (m NoCashSettlTerms) HasCashSettlQuoteMethod() bool {
	return m.Has(tag.CashSettlQuoteMethod)
}

// HasCashSettlQuoteAmount returns true if CashSettlQuoteAmount is present, Tag 40028.
func (m NoCashSettlTerms) HasCashSettlQuoteAmount() bool {
	return m.Has(tag.CashSettlQuoteAmount)
}

// HasCashSettlQuoteCurrency returns true if CashSettlQuoteCurrency is present, Tag 40029.
func (m NoCashSettlTerms) HasCashSettlQuoteCurrency() bool {
	return m.Has(tag.CashSettlQuoteCurrency)
}

// HasCashSettlMinimumQuoteAmount returns true if CashSettlMinimumQuoteAmount is present, Tag 40030.
func (m NoCashSettlTerms) HasCashSettlMinimumQuoteAmount() bool {
	return m.Has(tag.CashSettlMinimumQuoteAmount)
}

// HasCashSettlMinimumQuoteCurrency returns true if CashSettlMinimumQuoteCurrency is present, Tag 40031.
func (m NoCashSettlTerms) HasCashSettlMinimumQuoteCurrency() bool {
	return m.Has(tag.CashSettlMinimumQuoteCurrency)
}

// HasNoCashSettlDealers returns true if NoCashSettlDealers is present, Tag 40277.
func (m NoCashSettlTerms) HasNoCashSettlDealers() bool {
	return m.Has(tag.NoCashSettlDealers)
}

// HasCashSettlBusinessDays returns true if CashSettlBusinessDays is present, Tag 40033.
func (m NoCashSettlTerms) HasCashSettlBusinessDays() bool {
	return m.Has(tag.CashSettlBusinessDays)
}

// HasCashSettlAmount returns true if CashSettlAmount is present, Tag 40034.
func (m NoCashSettlTerms) HasCashSettlAmount() bool {
	return m.Has(tag.CashSettlAmount)
}

// HasCashSettlRecoveryFactor returns true if CashSettlRecoveryFactor is present, Tag 40035.
func (m NoCashSettlTerms) HasCashSettlRecoveryFactor() bool {
	return m.Has(tag.CashSettlRecoveryFactor)
}

// HasCashSettlFixedTermIndicator returns true if CashSettlFixedTermIndicator is present, Tag 40036.
func (m NoCashSettlTerms) HasCashSettlFixedTermIndicator() bool {
	return m.Has(tag.CashSettlFixedTermIndicator)
}

// HasCashSettlAccruedInterestIndicator returns true if CashSettlAccruedInterestIndicator is present, Tag 40037.
func (m NoCashSettlTerms) HasCashSettlAccruedInterestIndicator() bool {
	return m.Has(tag.CashSettlAccruedInterestIndicator)
}

// HasCashSettlValuationMethod returns true if CashSettlValuationMethod is present, Tag 40038.
func (m NoCashSettlTerms) HasCashSettlValuationMethod() bool {
	return m.Has(tag.CashSettlValuationMethod)
}

// HasCashSettlTermXID returns true if CashSettlTermXID is present, Tag 40039.
func (m NoCashSettlTerms) HasCashSettlTermXID() bool {
	return m.Has(tag.CashSettlTermXID)
}

// HasCashSettlPriceSource returns true if CashSettlPriceSource is present, Tag 42216.
func (m NoCashSettlTerms) HasCashSettlPriceSource() bool {
	return m.Has(tag.CashSettlPriceSource)
}

// HasCashSettlPriceDefault returns true if CashSettlPriceDefault is present, Tag 42217.
func (m NoCashSettlTerms) HasCashSettlPriceDefault() bool {
	return m.Has(tag.CashSettlPriceDefault)
}

// HasCashSettlDateUnadjusted returns true if CashSettlDateUnadjusted is present, Tag 42207.
func (m NoCashSettlTerms) HasCashSettlDateUnadjusted() bool {
	return m.Has(tag.CashSettlDateUnadjusted)
}

// HasCashSettlDateBusinessDayConvention returns true if CashSettlDateBusinessDayConvention is present, Tag 42208.
func (m NoCashSettlTerms) HasCashSettlDateBusinessDayConvention() bool {
	return m.Has(tag.CashSettlDateBusinessDayConvention)
}

// HasNoCashSettlDateBusinessCenters returns true if NoCashSettlDateBusinessCenters is present, Tag 42214.
func (m NoCashSettlTerms) HasNoCashSettlDateBusinessCenters() bool {
	return m.Has(tag.NoCashSettlDateBusinessCenters)
}

// HasCashSettlDateRelativeTo returns true if CashSettlDateRelativeTo is present, Tag 42209.
func (m NoCashSettlTerms) HasCashSettlDateRelativeTo() bool {
	return m.Has(tag.CashSettlDateRelativeTo)
}

// HasCashSettlDateOffsetPeriod returns true if CashSettlDateOffsetPeriod is present, Tag 42210.
func (m NoCashSettlTerms) HasCashSettlDateOffsetPeriod() bool {
	return m.Has(tag.CashSettlDateOffsetPeriod)
}

// HasCashSettlDateOffsetUnit returns true if CashSettlDateOffsetUnit is present, Tag 42211.
func (m NoCashSettlTerms) HasCashSettlDateOffsetUnit() bool {
	return m.Has(tag.CashSettlDateOffsetUnit)
}

// HasCashSettlDateOffsetDayType returns true if CashSettlDateOffsetDayType is present, Tag 42212.
func (m NoCashSettlTerms) HasCashSettlDateOffsetDayType() bool {
	return m.Has(tag.CashSettlDateOffsetDayType)
}

// HasCashSettlDateAdjusted returns true if CashSettlDateAdjusted is present, Tag 42213.
func (m NoCashSettlTerms) HasCashSettlDateAdjusted() bool {
	return m.Has(tag.CashSettlDateAdjusted)
}

// NoCashSettlDealers is a repeating group element, Tag 40277.
type NoCashSettlDealers struct {
	*quickfix.Group
}

// SetCashSettlDealer sets CashSettlDealer, Tag 40032.
func (m NoCashSettlDealers) SetCashSettlDealer(v string) {
	m.Set(field.NewCashSettlDealer(v))
}

// GetCashSettlDealer gets CashSettlDealer, Tag 40032.
func (m NoCashSettlDealers) GetCashSettlDealer() (v string, err quickfix.MessageRejectError) {
	var f field.CashSettlDealerField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasCashSettlDealer returns true if CashSettlDealer is present, Tag 40032.
func (m NoCashSettlDealers) HasCashSettlDealer() bool {
	return m.Has(tag.CashSettlDealer)
}

// NoCashSettlDealersRepeatingGroup is a repeating group, Tag 40277.
type NoCashSettlDealersRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoCashSettlDealersRepeatingGroup returns an initialized, NoCashSettlDealersRepeatingGroup.
func NewNoCashSettlDealersRepeatingGroup() NoCashSettlDealersRepeatingGroup {
	return NoCashSettlDealersRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoCashSettlDealers,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.CashSettlDealer),
			},
		),
	}
}

// Add create and append a new NoCashSettlDealers to this group.
func (m NoCashSettlDealersRepeatingGroup) Add() NoCashSettlDealers {
	g := m.RepeatingGroup.Add()
	return NoCashSettlDealers{g}
}

// Get returns the ith NoCashSettlDealers in the NoCashSettlDealersRepeatinGroup.
func (m NoCashSettlDealersRepeatingGroup) Get(i int) NoCashSettlDealers {
	return NoCashSettlDealers{m.RepeatingGroup.Get(i)}
}

// NoCashSettlDateBusinessCenters is a repeating group element, Tag 42214.
type NoCashSettlDateBusinessCenters struct {
	*quickfix.Group
}

// SetCashSettlDateBusinessCenter sets CashSettlDateBusinessCenter, Tag 42215.
func (m NoCashSettlDateBusinessCenters) SetCashSettlDateBusinessCenter(v string) {
	m.Set(field.NewCashSettlDateBusinessCenter(v))
}

// GetCashSettlDateBusinessCenter gets CashSettlDateBusinessCenter, Tag 42215.
func (m NoCashSettlDateBusinessCenters) GetCashSettlDateBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.CashSettlDateBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasCashSettlDateBusinessCenter returns true if CashSettlDateBusinessCenter is present, Tag 42215.
func (m NoCashSettlDateBusinessCenters) HasCashSettlDateBusinessCenter() bool {
	return m.Has(tag.CashSettlDateBusinessCenter)
}

// NoCashSettlDateBusinessCentersRepeatingGroup is a repeating group, Tag 42214.
type NoCashSettlDateBusinessCentersRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoCashSettlDateBusinessCentersRepeatingGroup returns an initialized, NoCashSettlDateBusinessCentersRepeatingGroup.
func NewNoCashSettlDateBusinessCentersRepeatingGroup() NoCashSettlDateBusinessCentersRepeatingGroup {
	return NoCashSettlDateBusinessCentersRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoCashSettlDateBusinessCenters,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.CashSettlDateBusinessCenter),
			},
		),
	}
}

// Add create and append a new NoCashSettlDateBusinessCenters to this group.
func (m NoCashSettlDateBusinessCentersRepeatingGroup) Add() NoCashSettlDateBusinessCenters {
	g := m.RepeatingGroup.Add()
	return NoCashSettlDateBusinessCenters{g}
}

// Get returns the ith NoCashSettlDateBusinessCenters in the NoCashSettlDateBusinessCentersRepeatinGroup.
func (m NoCashSettlDateBusinessCentersRepeatingGroup) Get(i int) NoCashSettlDateBusinessCenters {
	return NoCashSettlDateBusinessCenters{m.RepeatingGroup.Get(i)}
}

// NoCashSettlTermsRepeatingGroup is a repeating group, Tag 40022.
type NoCashSettlTermsRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoCashSettlTermsRepeatingGroup returns an initialized, NoCashSettlTermsRepeatingGroup.
func NewNoCashSettlTermsRepeatingGroup() NoCashSettlTermsRepeatingGroup {
	return NoCashSettlTermsRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoCashSettlTerms,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.CashSettlCurrency),
				quickfix.GroupElement(tag.CashSettlValuationFirstBusinessDayOffset),
				quickfix.GroupElement(tag.CashSettlValuationSubsequentBusinessDaysOffset),
				quickfix.GroupElement(tag.CashSettlNumOfValuationDates),
				quickfix.GroupElement(tag.CashSettlValuationTime),
				quickfix.GroupElement(tag.CashSettlBusinessCenter),
				quickfix.GroupElement(tag.CashSettlQuoteMethod),
				quickfix.GroupElement(tag.CashSettlQuoteAmount),
				quickfix.GroupElement(tag.CashSettlQuoteCurrency),
				quickfix.GroupElement(tag.CashSettlMinimumQuoteAmount),
				quickfix.GroupElement(tag.CashSettlMinimumQuoteCurrency),
				NewNoCashSettlDealersRepeatingGroup(),
				quickfix.GroupElement(tag.CashSettlBusinessDays),
				quickfix.GroupElement(tag.CashSettlAmount),
				quickfix.GroupElement(tag.CashSettlRecoveryFactor),
				quickfix.GroupElement(tag.CashSettlFixedTermIndicator),
				quickfix.GroupElement(tag.CashSettlAccruedInterestIndicator),
				quickfix.GroupElement(tag.CashSettlValuationMethod),
				quickfix.GroupElement(tag.CashSettlTermXID),
				quickfix.GroupElement(tag.CashSettlPriceSource),
				quickfix.GroupElement(tag.CashSettlPriceDefault),
				quickfix.GroupElement(tag.CashSettlDateUnadjusted),
				quickfix.GroupElement(tag.CashSettlDateBusinessDayConvention),
				NewNoCashSettlDateBusinessCentersRepeatingGroup(),
				quickfix.GroupElement(tag.CashSettlDateRelativeTo),
				quickfix.GroupElement(tag.CashSettlDateOffsetPeriod),
				quickfix.GroupElement(tag.CashSettlDateOffsetUnit),
				quickfix.GroupElement(tag.CashSettlDateOffsetDayType),
				quickfix.GroupElement(tag.CashSettlDateAdjusted),
			},
		),
	}
}

// Add create and append a new NoCashSettlTerms to this group.
func (m NoCashSettlTermsRepeatingGroup) Add() NoCashSettlTerms {
	g := m.RepeatingGroup.Add()
	return NoCashSettlTerms{g}
}

// Get returns the ith NoCashSettlTerms in the NoCashSettlTermsRepeatinGroup.
func (m NoCashSettlTermsRepeatingGroup) Get(i int) NoCashSettlTerms {
	return NoCashSettlTerms{m.RepeatingGroup.Get(i)}
}

// NoStreams is a repeating group element, Tag 40049.
type NoStreams struct {
	*quickfix.Group
}

// SetStreamType sets StreamType, Tag 40050.
func (m NoStreams) SetStreamType(v enum.StreamType) {
	m.Set(field.NewStreamType(v))
}

// SetStreamDesc sets StreamDesc, Tag 40051.
func (m NoStreams) SetStreamDesc(v string) {
	m.Set(field.NewStreamDesc(v))
}

// SetStreamPaySide sets StreamPaySide, Tag 40052.
func (m NoStreams) SetStreamPaySide(v int) {
	m.Set(field.NewStreamPaySide(v))
}

// SetStreamReceiveSide sets StreamReceiveSide, Tag 40053.
func (m NoStreams) SetStreamReceiveSide(v int) {
	m.Set(field.NewStreamReceiveSide(v))
}

// SetStreamNotional sets StreamNotional, Tag 40054.
func (m NoStreams) SetStreamNotional(value decimal.Decimal, scale int32) {
	m.Set(field.NewStreamNotional(value, scale))
}

// SetStreamCurrency sets StreamCurrency, Tag 40055.
func (m NoStreams) SetStreamCurrency(v string) {
	m.Set(field.NewStreamCurrency(v))
}

// SetStreamEffectiveDateUnadjusted sets StreamEffectiveDateUnadjusted, Tag 40907.
func (m NoStreams) SetStreamEffectiveDateUnadjusted(v string) {
	m.Set(field.NewStreamEffectiveDateUnadjusted(v))
}

// SetStreamEffectiveDateBusinessDayConvention sets StreamEffectiveDateBusinessDayConvention, Tag 40908.
func (m NoStreams) SetStreamEffectiveDateBusinessDayConvention(v int) {
	m.Set(field.NewStreamEffectiveDateBusinessDayConvention(v))
}

// SetNoStreamEffectiveBusinessCenters sets NoStreamEffectiveBusinessCenters, Tag 40960.
func (m NoStreams) SetNoStreamEffectiveBusinessCenters(f NoStreamEffectiveBusinessCentersRepeatingGroup) {
	m.SetGroup(f)
}

// SetStreamEffectiveDateRelativeTo sets StreamEffectiveDateRelativeTo, Tag 40910.
func (m NoStreams) SetStreamEffectiveDateRelativeTo(v int) {
	m.Set(field.NewStreamEffectiveDateRelativeTo(v))
}

// SetStreamEffectiveDateOffsetPeriod sets StreamEffectiveDateOffsetPeriod, Tag 40911.
func (m NoStreams) SetStreamEffectiveDateOffsetPeriod(v int) {
	m.Set(field.NewStreamEffectiveDateOffsetPeriod(v))
}

// SetStreamEffectiveDateOffsetUnit sets StreamEffectiveDateOffsetUnit, Tag 40912.
func (m NoStreams) SetStreamEffectiveDateOffsetUnit(v string) {
	m.Set(field.NewStreamEffectiveDateOffsetUnit(v))
}

// SetStreamEffectiveDateOffsetDayType sets StreamEffectiveDateOffsetDayType, Tag 40913.
func (m NoStreams) SetStreamEffectiveDateOffsetDayType(v int) {
	m.Set(field.NewStreamEffectiveDateOffsetDayType(v))
}

// SetStreamEffectiveDateAdjusted sets StreamEffectiveDateAdjusted, Tag 40914.
func (m NoStreams) SetStreamEffectiveDateAdjusted(v string) {
	m.Set(field.NewStreamEffectiveDateAdjusted(v))
}

// SetStreamTerminationDateUnadjusted sets StreamTerminationDateUnadjusted, Tag 40065.
func (m NoStreams) SetStreamTerminationDateUnadjusted(v string) {
	m.Set(field.NewStreamTerminationDateUnadjusted(v))
}

// SetStreamTerminationDateBusinessDayConvention sets StreamTerminationDateBusinessDayConvention, Tag 40066.
func (m NoStreams) SetStreamTerminationDateBusinessDayConvention(v int) {
	m.Set(field.NewStreamTerminationDateBusinessDayConvention(v))
}

// SetNoStreamTerminationDateBusinessCenters sets NoStreamTerminationDateBusinessCenters, Tag 40961.
func (m NoStreams) SetNoStreamTerminationDateBusinessCenters(f NoStreamTerminationDateBusinessCentersRepeatingGroup) {
	m.SetGroup(f)
}

// SetStreamTerminationDateRelativeTo sets StreamTerminationDateRelativeTo, Tag 40068.
func (m NoStreams) SetStreamTerminationDateRelativeTo(v int) {
	m.Set(field.NewStreamTerminationDateRelativeTo(v))
}

// SetStreamTerminationDateOffsetPeriod sets StreamTerminationDateOffsetPeriod, Tag 40069.
func (m NoStreams) SetStreamTerminationDateOffsetPeriod(v int) {
	m.Set(field.NewStreamTerminationDateOffsetPeriod(v))
}

// SetStreamTerminationDateOffsetUnit sets StreamTerminationDateOffsetUnit, Tag 40070.
func (m NoStreams) SetStreamTerminationDateOffsetUnit(v string) {
	m.Set(field.NewStreamTerminationDateOffsetUnit(v))
}

// SetStreamTerminationDateOffsetDayType sets StreamTerminationDateOffsetDayType, Tag 40071.
func (m NoStreams) SetStreamTerminationDateOffsetDayType(v int) {
	m.Set(field.NewStreamTerminationDateOffsetDayType(v))
}

// SetStreamTerminationDateAdjusted sets StreamTerminationDateAdjusted, Tag 40072.
func (m NoStreams) SetStreamTerminationDateAdjusted(v string) {
	m.Set(field.NewStreamTerminationDateAdjusted(v))
}

// SetStreamCalculationPeriodBusinessDayConvention sets StreamCalculationPeriodBusinessDayConvention, Tag 40073.
func (m NoStreams) SetStreamCalculationPeriodBusinessDayConvention(v int) {
	m.Set(field.NewStreamCalculationPeriodBusinessDayConvention(v))
}

// SetNoStreamCalculationPeriodBusinessCenters sets NoStreamCalculationPeriodBusinessCenters, Tag 40958.
func (m NoStreams) SetNoStreamCalculationPeriodBusinessCenters(f NoStreamCalculationPeriodBusinessCentersRepeatingGroup) {
	m.SetGroup(f)
}

// SetStreamFirstPeriodStartDateUnadjusted sets StreamFirstPeriodStartDateUnadjusted, Tag 40075.
func (m NoStreams) SetStreamFirstPeriodStartDateUnadjusted(v string) {
	m.Set(field.NewStreamFirstPeriodStartDateUnadjusted(v))
}

// SetStreamFirstPeriodStartDateBusinessDayConvention sets StreamFirstPeriodStartDateBusinessDayConvention, Tag 40076.
func (m NoStreams) SetStreamFirstPeriodStartDateBusinessDayConvention(v int) {
	m.Set(field.NewStreamFirstPeriodStartDateBusinessDayConvention(v))
}

// SetNoStreamFirstPeriodStartDateBusinessCenters sets NoStreamFirstPeriodStartDateBusinessCenters, Tag 40959.
func (m NoStreams) SetNoStreamFirstPeriodStartDateBusinessCenters(f NoStreamFirstPeriodStartDateBusinessCentersRepeatingGroup) {
	m.SetGroup(f)
}

// SetStreamFirstPeriodStartDateAdjusted sets StreamFirstPeriodStartDateAdjusted, Tag 40078.
func (m NoStreams) SetStreamFirstPeriodStartDateAdjusted(v string) {
	m.Set(field.NewStreamFirstPeriodStartDateAdjusted(v))
}

// SetStreamFirstRegularPeriodStartDateUnadjusted sets StreamFirstRegularPeriodStartDateUnadjusted, Tag 40079.
func (m NoStreams) SetStreamFirstRegularPeriodStartDateUnadjusted(v string) {
	m.Set(field.NewStreamFirstRegularPeriodStartDateUnadjusted(v))
}

// SetStreamFirstCompoundingPeriodEndDateUnadjusted sets StreamFirstCompoundingPeriodEndDateUnadjusted, Tag 40080.
func (m NoStreams) SetStreamFirstCompoundingPeriodEndDateUnadjusted(v string) {
	m.Set(field.NewStreamFirstCompoundingPeriodEndDateUnadjusted(v))
}

// SetStreamLastRegularPeriodEndDateUnadjusted sets StreamLastRegularPeriodEndDateUnadjusted, Tag 40081.
func (m NoStreams) SetStreamLastRegularPeriodEndDateUnadjusted(v string) {
	m.Set(field.NewStreamLastRegularPeriodEndDateUnadjusted(v))
}

// SetStreamCalculationFrequencyPeriod sets StreamCalculationFrequencyPeriod, Tag 40082.
func (m NoStreams) SetStreamCalculationFrequencyPeriod(v int) {
	m.Set(field.NewStreamCalculationFrequencyPeriod(v))
}

// SetStreamCalculationFrequencyUnit sets StreamCalculationFrequencyUnit, Tag 40083.
func (m NoStreams) SetStreamCalculationFrequencyUnit(v string) {
	m.Set(field.NewStreamCalculationFrequencyUnit(v))
}

// SetStreamCalculationRollConvention sets StreamCalculationRollConvention, Tag 40084.
func (m NoStreams) SetStreamCalculationRollConvention(v string) {
	m.Set(field.NewStreamCalculationRollConvention(v))
}

// SetStreamCalculationPeriodDatesXID sets StreamCalculationPeriodDatesXID, Tag 41244.
func (m NoStreams) SetStreamCalculationPeriodDatesXID(v string) {
	m.Set(field.NewStreamCalculationPeriodDatesXID(v))
}

// SetStreamCalculationPeriodDatesXIDRef sets StreamCalculationPeriodDatesXIDRef, Tag 41245.
func (m NoStreams) SetStreamCalculationPeriodDatesXIDRef(v string) {
	m.Set(field.NewStreamCalculationPeriodDatesXIDRef(v))
}

// SetNoStreamCalculationPeriodDates sets NoStreamCalculationPeriodDates, Tag 41241.
func (m NoStreams) SetNoStreamCalculationPeriodDates(f NoStreamCalculationPeriodDatesRepeatingGroup) {
	m.SetGroup(f)
}

// SetStreamCalculationBalanceOfFirstPeriod sets StreamCalculationBalanceOfFirstPeriod, Tag 41246.
func (m NoStreams) SetStreamCalculationBalanceOfFirstPeriod(v bool) {
	m.Set(field.NewStreamCalculationBalanceOfFirstPeriod(v))
}

// SetStreamCalculationCorrectionPeriod sets StreamCalculationCorrectionPeriod, Tag 41247.
func (m NoStreams) SetStreamCalculationCorrectionPeriod(v int) {
	m.Set(field.NewStreamCalculationCorrectionPeriod(v))
}

// SetStreamCalculationCorrectionUnit sets StreamCalculationCorrectionUnit, Tag 41248.
func (m NoStreams) SetStreamCalculationCorrectionUnit(v string) {
	m.Set(field.NewStreamCalculationCorrectionUnit(v))
}

// SetPaymentStreamType sets PaymentStreamType, Tag 40738.
func (m NoStreams) SetPaymentStreamType(v enum.PaymentStreamType) {
	m.Set(field.NewPaymentStreamType(v))
}

// SetPaymentStreamMarketRate sets PaymentStreamMarketRate, Tag 40739.
func (m NoStreams) SetPaymentStreamMarketRate(v int) {
	m.Set(field.NewPaymentStreamMarketRate(v))
}

// SetPaymentStreamDelayIndicator sets PaymentStreamDelayIndicator, Tag 40740.
func (m NoStreams) SetPaymentStreamDelayIndicator(v bool) {
	m.Set(field.NewPaymentStreamDelayIndicator(v))
}

// SetPaymentStreamSettlCurrency sets PaymentStreamSettlCurrency, Tag 40741.
func (m NoStreams) SetPaymentStreamSettlCurrency(v string) {
	m.Set(field.NewPaymentStreamSettlCurrency(v))
}

// SetPaymentStreamDayCount sets PaymentStreamDayCount, Tag 40742.
func (m NoStreams) SetPaymentStreamDayCount(v int) {
	m.Set(field.NewPaymentStreamDayCount(v))
}

// SetPaymentStreamAccrualDays sets PaymentStreamAccrualDays, Tag 40743.
func (m NoStreams) SetPaymentStreamAccrualDays(v int) {
	m.Set(field.NewPaymentStreamAccrualDays(v))
}

// SetPaymentStreamDiscountType sets PaymentStreamDiscountType, Tag 40744.
func (m NoStreams) SetPaymentStreamDiscountType(v enum.PaymentStreamDiscountType) {
	m.Set(field.NewPaymentStreamDiscountType(v))
}

// SetPaymentStreamDiscountRate sets PaymentStreamDiscountRate, Tag 40745.
func (m NoStreams) SetPaymentStreamDiscountRate(value decimal.Decimal, scale int32) {
	m.Set(field.NewPaymentStreamDiscountRate(value, scale))
}

// SetPaymentStreamDiscountRateDayCount sets PaymentStreamDiscountRateDayCount, Tag 40746.
func (m NoStreams) SetPaymentStreamDiscountRateDayCount(v int) {
	m.Set(field.NewPaymentStreamDiscountRateDayCount(v))
}

// SetPaymentStreamCompoundingMethod sets PaymentStreamCompoundingMethod, Tag 40747.
func (m NoStreams) SetPaymentStreamCompoundingMethod(v enum.PaymentStreamCompoundingMethod) {
	m.Set(field.NewPaymentStreamCompoundingMethod(v))
}

// SetPaymentStreamInitialPrincipalExchangeIndicator sets PaymentStreamInitialPrincipalExchangeIndicator, Tag 40748.
func (m NoStreams) SetPaymentStreamInitialPrincipalExchangeIndicator(v bool) {
	m.Set(field.NewPaymentStreamInitialPrincipalExchangeIndicator(v))
}

// SetPaymentStreamInterimPrincipalExchangeIndicator sets PaymentStreamInterimPrincipalExchangeIndicator, Tag 40749.
func (m NoStreams) SetPaymentStreamInterimPrincipalExchangeIndicator(v bool) {
	m.Set(field.NewPaymentStreamInterimPrincipalExchangeIndicator(v))
}

// SetPaymentStreamFinalPrincipalExchangeIndicator sets PaymentStreamFinalPrincipalExchangeIndicator, Tag 40750.
func (m NoStreams) SetPaymentStreamFinalPrincipalExchangeIndicator(v bool) {
	m.Set(field.NewPaymentStreamFinalPrincipalExchangeIndicator(v))
}

// SetPaymentStreamPaymentDateBusinessDayConvention sets PaymentStreamPaymentDateBusinessDayConvention, Tag 40751.
func (m NoStreams) SetPaymentStreamPaymentDateBusinessDayConvention(v int) {
	m.Set(field.NewPaymentStreamPaymentDateBusinessDayConvention(v))
}

// SetNoPaymentStreamPaymentDateBusinessCenters sets NoPaymentStreamPaymentDateBusinessCenters, Tag 40947.
func (m NoStreams) SetNoPaymentStreamPaymentDateBusinessCenters(f NoPaymentStreamPaymentDateBusinessCentersRepeatingGroup) {
	m.SetGroup(f)
}

// SetPaymentStreamPaymentFrequencyPeriod sets PaymentStreamPaymentFrequencyPeriod, Tag 40753.
func (m NoStreams) SetPaymentStreamPaymentFrequencyPeriod(v int) {
	m.Set(field.NewPaymentStreamPaymentFrequencyPeriod(v))
}

// SetPaymentStreamPaymentFrequencyUnit sets PaymentStreamPaymentFrequencyUnit, Tag 40754.
func (m NoStreams) SetPaymentStreamPaymentFrequencyUnit(v enum.PaymentStreamPaymentFrequencyUnit) {
	m.Set(field.NewPaymentStreamPaymentFrequencyUnit(v))
}

// SetPaymentStreamPaymentRollConvention sets PaymentStreamPaymentRollConvention, Tag 40755.
func (m NoStreams) SetPaymentStreamPaymentRollConvention(v string) {
	m.Set(field.NewPaymentStreamPaymentRollConvention(v))
}

// SetPaymentStreamFirstPaymentDateUnadjusted sets PaymentStreamFirstPaymentDateUnadjusted, Tag 40756.
func (m NoStreams) SetPaymentStreamFirstPaymentDateUnadjusted(v string) {
	m.Set(field.NewPaymentStreamFirstPaymentDateUnadjusted(v))
}

// SetPaymentStreamLastRegularPaymentDateUnadjusted sets PaymentStreamLastRegularPaymentDateUnadjusted, Tag 40757.
func (m NoStreams) SetPaymentStreamLastRegularPaymentDateUnadjusted(v string) {
	m.Set(field.NewPaymentStreamLastRegularPaymentDateUnadjusted(v))
}

// SetPaymentStreamPaymentDateRelativeTo sets PaymentStreamPaymentDateRelativeTo, Tag 40758.
func (m NoStreams) SetPaymentStreamPaymentDateRelativeTo(v int) {
	m.Set(field.NewPaymentStreamPaymentDateRelativeTo(v))
}

// SetPaymentStreamPaymentDateOffsetPeriod sets PaymentStreamPaymentDateOffsetPeriod, Tag 40759.
func (m NoStreams) SetPaymentStreamPaymentDateOffsetPeriod(v int) {
	m.Set(field.NewPaymentStreamPaymentDateOffsetPeriod(v))
}

// SetPaymentStreamPaymentDateOffsetUnit sets PaymentStreamPaymentDateOffsetUnit, Tag 40760.
func (m NoStreams) SetPaymentStreamPaymentDateOffsetUnit(v enum.PaymentStreamPaymentDateOffsetUnit) {
	m.Set(field.NewPaymentStreamPaymentDateOffsetUnit(v))
}

// SetPaymentStreamPaymentDateOffsetDayType sets PaymentStreamPaymentDateOffsetDayType, Tag 40920.
func (m NoStreams) SetPaymentStreamPaymentDateOffsetDayType(v enum.PaymentStreamPaymentDateOffsetDayType) {
	m.Set(field.NewPaymentStreamPaymentDateOffsetDayType(v))
}

// SetNoPaymentStreamPaymentDates sets NoPaymentStreamPaymentDates, Tag 41220.
func (m NoStreams) SetNoPaymentStreamPaymentDates(f NoPaymentStreamPaymentDatesRepeatingGroup) {
	m.SetGroup(f)
}

// SetPaymentStreamMasterAgreementPaymentDatesIndicator sets PaymentStreamMasterAgreementPaymentDatesIndicator, Tag 41223.
func (m NoStreams) SetPaymentStreamMasterAgreementPaymentDatesIndicator(v bool) {
	m.Set(field.NewPaymentStreamMasterAgreementPaymentDatesIndicator(v))
}

// SetPaymentStreamFinalPricePaymentDateUnadjusted sets PaymentStreamFinalPricePaymentDateUnadjusted, Tag 42654.
func (m NoStreams) SetPaymentStreamFinalPricePaymentDateUnadjusted(v string) {
	m.Set(field.NewPaymentStreamFinalPricePaymentDateUnadjusted(v))
}

// SetPaymentStreamFinalPricePaymentDateRelativeTo sets PaymentStreamFinalPricePaymentDateRelativeTo, Tag 42655.
func (m NoStreams) SetPaymentStreamFinalPricePaymentDateRelativeTo(v int) {
	m.Set(field.NewPaymentStreamFinalPricePaymentDateRelativeTo(v))
}

// SetPaymentStreamFinalPricePaymentDateOffsetfPeriod sets PaymentStreamFinalPricePaymentDateOffsetfPeriod, Tag 42656.
func (m NoStreams) SetPaymentStreamFinalPricePaymentDateOffsetfPeriod(v int) {
	m.Set(field.NewPaymentStreamFinalPricePaymentDateOffsetfPeriod(v))
}

// SetPaymentStreamFinalPricePaymentDateOffsetUnit sets PaymentStreamFinalPricePaymentDateOffsetUnit, Tag 42657.
func (m NoStreams) SetPaymentStreamFinalPricePaymentDateOffsetUnit(v string) {
	m.Set(field.NewPaymentStreamFinalPricePaymentDateOffsetUnit(v))
}

// SetPaymentStreamFinalPricePaymentDateOffsetDayType sets PaymentStreamFinalPricePaymentDateOffsetDayType, Tag 42658.
func (m NoStreams) SetPaymentStreamFinalPricePaymentDateOffsetDayType(v int) {
	m.Set(field.NewPaymentStreamFinalPricePaymentDateOffsetDayType(v))
}

// SetPaymentStreamFinalPricePaymentDateAdjusted sets PaymentStreamFinalPricePaymentDateAdjusted, Tag 42659.
func (m NoStreams) SetPaymentStreamFinalPricePaymentDateAdjusted(v string) {
	m.Set(field.NewPaymentStreamFinalPricePaymentDateAdjusted(v))
}

// SetPaymentStreamResetDateRelativeTo sets PaymentStreamResetDateRelativeTo, Tag 40761.
func (m NoStreams) SetPaymentStreamResetDateRelativeTo(v int) {
	m.Set(field.NewPaymentStreamResetDateRelativeTo(v))
}

// SetPaymentStreamResetDateBusinessDayConvention sets PaymentStreamResetDateBusinessDayConvention, Tag 40762.
func (m NoStreams) SetPaymentStreamResetDateBusinessDayConvention(v int) {
	m.Set(field.NewPaymentStreamResetDateBusinessDayConvention(v))
}

// SetNoPaymentStreamResetDateBusinessCenters sets NoPaymentStreamResetDateBusinessCenters, Tag 40948.
func (m NoStreams) SetNoPaymentStreamResetDateBusinessCenters(f NoPaymentStreamResetDateBusinessCentersRepeatingGroup) {
	m.SetGroup(f)
}

// SetPaymentStreamResetFrequencyPeriod sets PaymentStreamResetFrequencyPeriod, Tag 40764.
func (m NoStreams) SetPaymentStreamResetFrequencyPeriod(v int) {
	m.Set(field.NewPaymentStreamResetFrequencyPeriod(v))
}

// SetPaymentStreamResetFrequencyUnit sets PaymentStreamResetFrequencyUnit, Tag 40765.
func (m NoStreams) SetPaymentStreamResetFrequencyUnit(v string) {
	m.Set(field.NewPaymentStreamResetFrequencyUnit(v))
}

// SetPaymentStreamResetWeeklyRollConvention sets PaymentStreamResetWeeklyRollConvention, Tag 40766.
func (m NoStreams) SetPaymentStreamResetWeeklyRollConvention(v enum.PaymentStreamResetWeeklyRollConvention) {
	m.Set(field.NewPaymentStreamResetWeeklyRollConvention(v))
}

// SetPaymentStreamInitialFixingDateRelativeTo sets PaymentStreamInitialFixingDateRelativeTo, Tag 40767.
func (m NoStreams) SetPaymentStreamInitialFixingDateRelativeTo(v int) {
	m.Set(field.NewPaymentStreamInitialFixingDateRelativeTo(v))
}

// SetPaymentStreamInitialFixingDateBusinessDayConvention sets PaymentStreamInitialFixingDateBusinessDayConvention, Tag 40768.
func (m NoStreams) SetPaymentStreamInitialFixingDateBusinessDayConvention(v int) {
	m.Set(field.NewPaymentStreamInitialFixingDateBusinessDayConvention(v))
}

// SetNoPaymentStreamInitialFixingDateBusinessCenters sets NoPaymentStreamInitialFixingDateBusinessCenters, Tag 40949.
func (m NoStreams) SetNoPaymentStreamInitialFixingDateBusinessCenters(f NoPaymentStreamInitialFixingDateBusinessCentersRepeatingGroup) {
	m.SetGroup(f)
}

// SetPaymentStreamInitialFixingDateOffsetPeriod sets PaymentStreamInitialFixingDateOffsetPeriod, Tag 40770.
func (m NoStreams) SetPaymentStreamInitialFixingDateOffsetPeriod(v int) {
	m.Set(field.NewPaymentStreamInitialFixingDateOffsetPeriod(v))
}

// SetPaymentStreamInitialFixingDateOffsetUnit sets PaymentStreamInitialFixingDateOffsetUnit, Tag 40771.
func (m NoStreams) SetPaymentStreamInitialFixingDateOffsetUnit(v string) {
	m.Set(field.NewPaymentStreamInitialFixingDateOffsetUnit(v))
}

// SetPaymentStreamInitialFixingDateOffsetDayType sets PaymentStreamInitialFixingDateOffsetDayType, Tag 40772.
func (m NoStreams) SetPaymentStreamInitialFixingDateOffsetDayType(v int) {
	m.Set(field.NewPaymentStreamInitialFixingDateOffsetDayType(v))
}

// SetPaymentStreamInitialFixingDateAdjusted sets PaymentStreamInitialFixingDateAdjusted, Tag 40773.
func (m NoStreams) SetPaymentStreamInitialFixingDateAdjusted(v string) {
	m.Set(field.NewPaymentStreamInitialFixingDateAdjusted(v))
}

// SetPaymentStreamFixingDateRelativeTo sets PaymentStreamFixingDateRelativeTo, Tag 40774.
func (m NoStreams) SetPaymentStreamFixingDateRelativeTo(v int) {
	m.Set(field.NewPaymentStreamFixingDateRelativeTo(v))
}

// SetPaymentStreamFixingDateBusinessDayConvention sets PaymentStreamFixingDateBusinessDayConvention, Tag 40775.
func (m NoStreams) SetPaymentStreamFixingDateBusinessDayConvention(v int) {
	m.Set(field.NewPaymentStreamFixingDateBusinessDayConvention(v))
}

// SetNoPaymentStreamFixingDateBusinessCenters sets NoPaymentStreamFixingDateBusinessCenters, Tag 40950.
func (m NoStreams) SetNoPaymentStreamFixingDateBusinessCenters(f NoPaymentStreamFixingDateBusinessCentersRepeatingGroup) {
	m.SetGroup(f)
}

// SetPaymentStreamFixingDateOffsetPeriod sets PaymentStreamFixingDateOffsetPeriod, Tag 40777.
func (m NoStreams) SetPaymentStreamFixingDateOffsetPeriod(v int) {
	m.Set(field.NewPaymentStreamFixingDateOffsetPeriod(v))
}

// SetPaymentStreamFixingDateOffsetUnit sets PaymentStreamFixingDateOffsetUnit, Tag 40778.
func (m NoStreams) SetPaymentStreamFixingDateOffsetUnit(v string) {
	m.Set(field.NewPaymentStreamFixingDateOffsetUnit(v))
}

// SetPaymentStreamFixingDateOffsetDayType sets PaymentStreamFixingDateOffsetDayType, Tag 40779.
func (m NoStreams) SetPaymentStreamFixingDateOffsetDayType(v int) {
	m.Set(field.NewPaymentStreamFixingDateOffsetDayType(v))
}

// SetPaymentStreamFixingDateAdjusted sets PaymentStreamFixingDateAdjusted, Tag 40780.
func (m NoStreams) SetPaymentStreamFixingDateAdjusted(v string) {
	m.Set(field.NewPaymentStreamFixingDateAdjusted(v))
}

// SetPaymentStreamRateCutoffDateOffsetPeriod sets PaymentStreamRateCutoffDateOffsetPeriod, Tag 40781.
func (m NoStreams) SetPaymentStreamRateCutoffDateOffsetPeriod(v int) {
	m.Set(field.NewPaymentStreamRateCutoffDateOffsetPeriod(v))
}

// SetPaymentStreamRateCutoffDateOffsetUnit sets PaymentStreamRateCutoffDateOffsetUnit, Tag 40782.
func (m NoStreams) SetPaymentStreamRateCutoffDateOffsetUnit(v string) {
	m.Set(field.NewPaymentStreamRateCutoffDateOffsetUnit(v))
}

// SetPaymentStreamRateCutoffDateOffsetDayType sets PaymentStreamRateCutoffDateOffsetDayType, Tag 40783.
func (m NoStreams) SetPaymentStreamRateCutoffDateOffsetDayType(v int) {
	m.Set(field.NewPaymentStreamRateCutoffDateOffsetDayType(v))
}

// SetNoPaymentStreamFixingDates sets NoPaymentStreamFixingDates, Tag 42660.
func (m NoStreams) SetNoPaymentStreamFixingDates(f NoPaymentStreamFixingDatesRepeatingGroup) {
	m.SetGroup(f)
}

// SetPaymentStreamRate sets PaymentStreamRate, Tag 40784.
func (m NoStreams) SetPaymentStreamRate(value decimal.Decimal, scale int32) {
	m.Set(field.NewPaymentStreamRate(value, scale))
}

// SetPaymentStreamFixedAmount sets PaymentStreamFixedAmount, Tag 40785.
func (m NoStreams) SetPaymentStreamFixedAmount(value decimal.Decimal, scale int32) {
	m.Set(field.NewPaymentStreamFixedAmount(value, scale))
}

// SetPaymentStreamRateOrAmountCurrency sets PaymentStreamRateOrAmountCurrency, Tag 40786.
func (m NoStreams) SetPaymentStreamRateOrAmountCurrency(v string) {
	m.Set(field.NewPaymentStreamRateOrAmountCurrency(v))
}

// SetPaymentStreamFutureValueNotional sets PaymentStreamFutureValueNotional, Tag 40787.
func (m NoStreams) SetPaymentStreamFutureValueNotional(value decimal.Decimal, scale int32) {
	m.Set(field.NewPaymentStreamFutureValueNotional(value, scale))
}

// SetPaymentStreamFutureValueDateAdjusted sets PaymentStreamFutureValueDateAdjusted, Tag 40788.
func (m NoStreams) SetPaymentStreamFutureValueDateAdjusted(v string) {
	m.Set(field.NewPaymentStreamFutureValueDateAdjusted(v))
}

// SetPaymentStreamFixedAmountUnitOfMeasure sets PaymentStreamFixedAmountUnitOfMeasure, Tag 41187.
func (m NoStreams) SetPaymentStreamFixedAmountUnitOfMeasure(v string) {
	m.Set(field.NewPaymentStreamFixedAmountUnitOfMeasure(v))
}

// SetPaymentStreamTotalFixedAmount sets PaymentStreamTotalFixedAmount, Tag 41188.
func (m NoStreams) SetPaymentStreamTotalFixedAmount(value decimal.Decimal, scale int32) {
	m.Set(field.NewPaymentStreamTotalFixedAmount(value, scale))
}

// SetPaymentStreamWorldScaleRate sets PaymentStreamWorldScaleRate, Tag 41189.
func (m NoStreams) SetPaymentStreamWorldScaleRate(value decimal.Decimal, scale int32) {
	m.Set(field.NewPaymentStreamWorldScaleRate(value, scale))
}

// SetPaymentStreamContractPrice sets PaymentStreamContractPrice, Tag 41190.
func (m NoStreams) SetPaymentStreamContractPrice(value decimal.Decimal, scale int32) {
	m.Set(field.NewPaymentStreamContractPrice(value, scale))
}

// SetPaymentStreamContractPriceCurrency sets PaymentStreamContractPriceCurrency, Tag 41191.
func (m NoStreams) SetPaymentStreamContractPriceCurrency(v string) {
	m.Set(field.NewPaymentStreamContractPriceCurrency(v))
}

// SetPaymentStreamRateIndex sets PaymentStreamRateIndex, Tag 40789.
func (m NoStreams) SetPaymentStreamRateIndex(v string) {
	m.Set(field.NewPaymentStreamRateIndex(v))
}

// SetPaymentStreamRateIndexSource sets PaymentStreamRateIndexSource, Tag 40790.
func (m NoStreams) SetPaymentStreamRateIndexSource(v enum.PaymentStreamRateIndexSource) {
	m.Set(field.NewPaymentStreamRateIndexSource(v))
}

// SetPaymentStreamRateIndexCurveUnit sets PaymentStreamRateIndexCurveUnit, Tag 40791.
func (m NoStreams) SetPaymentStreamRateIndexCurveUnit(v enum.PaymentStreamRateIndexCurveUnit) {
	m.Set(field.NewPaymentStreamRateIndexCurveUnit(v))
}

// SetPaymentStreamRateIndexCurvePeriod sets PaymentStreamRateIndexCurvePeriod, Tag 40792.
func (m NoStreams) SetPaymentStreamRateIndexCurvePeriod(v int) {
	m.Set(field.NewPaymentStreamRateIndexCurvePeriod(v))
}

// SetPaymentStreamRateMultiplier sets PaymentStreamRateMultiplier, Tag 40793.
func (m NoStreams) SetPaymentStreamRateMultiplier(value decimal.Decimal, scale int32) {
	m.Set(field.NewPaymentStreamRateMultiplier(value, scale))
}

// SetPaymentStreamRateSpread sets PaymentStreamRateSpread, Tag 40794.
func (m NoStreams) SetPaymentStreamRateSpread(value decimal.Decimal, scale int32) {
	m.Set(field.NewPaymentStreamRateSpread(value, scale))
}

// SetPaymentStreamRateSpreadPositionType sets PaymentStreamRateSpreadPositionType, Tag 40795.
func (m NoStreams) SetPaymentStreamRateSpreadPositionType(v enum.PaymentStreamRateSpreadPositionType) {
	m.Set(field.NewPaymentStreamRateSpreadPositionType(v))
}

// SetPaymentStreamRateTreatment sets PaymentStreamRateTreatment, Tag 40796.
func (m NoStreams) SetPaymentStreamRateTreatment(v enum.PaymentStreamRateTreatment) {
	m.Set(field.NewPaymentStreamRateTreatment(v))
}

// SetPaymentStreamCapRate sets PaymentStreamCapRate, Tag 40797.
func (m NoStreams) SetPaymentStreamCapRate(value decimal.Decimal, scale int32) {
	m.Set(field.NewPaymentStreamCapRate(value, scale))
}

// SetPaymentStreamCapRateBuySide sets PaymentStreamCapRateBuySide, Tag 40798.
func (m NoStreams) SetPaymentStreamCapRateBuySide(v enum.PaymentStreamCapRateBuySide) {
	m.Set(field.NewPaymentStreamCapRateBuySide(v))
}

// SetPaymentStreamCapRateSellSide sets PaymentStreamCapRateSellSide, Tag 40799.
func (m NoStreams) SetPaymentStreamCapRateSellSide(v int) {
	m.Set(field.NewPaymentStreamCapRateSellSide(v))
}

// SetPaymentStreamFloorRate sets PaymentStreamFloorRate, Tag 40800.
func (m NoStreams) SetPaymentStreamFloorRate(value decimal.Decimal, scale int32) {
	m.Set(field.NewPaymentStreamFloorRate(value, scale))
}

// SetPaymentStreamFloorRateBuySide sets PaymentStreamFloorRateBuySide, Tag 40801.
func (m NoStreams) SetPaymentStreamFloorRateBuySide(v enum.PaymentStreamFloorRateBuySide) {
	m.Set(field.NewPaymentStreamFloorRateBuySide(v))
}

// SetPaymentStreamFloorRateSellSide sets PaymentStreamFloorRateSellSide, Tag 40802.
func (m NoStreams) SetPaymentStreamFloorRateSellSide(v int) {
	m.Set(field.NewPaymentStreamFloorRateSellSide(v))
}

// SetPaymentStreamInitialRate sets PaymentStreamInitialRate, Tag 40803.
func (m NoStreams) SetPaymentStreamInitialRate(value decimal.Decimal, scale int32) {
	m.Set(field.NewPaymentStreamInitialRate(value, scale))
}

// SetPaymentStreamFinalRateRoundingDirection sets PaymentStreamFinalRateRoundingDirection, Tag 40804.
func (m NoStreams) SetPaymentStreamFinalRateRoundingDirection(v string) {
	m.Set(field.NewPaymentStreamFinalRateRoundingDirection(v))
}

// SetPaymentStreamFinalRatePrecision sets PaymentStreamFinalRatePrecision, Tag 40805.
func (m NoStreams) SetPaymentStreamFinalRatePrecision(v int) {
	m.Set(field.NewPaymentStreamFinalRatePrecision(v))
}

// SetPaymentStreamAveragingMethod sets PaymentStreamAveragingMethod, Tag 40806.
func (m NoStreams) SetPaymentStreamAveragingMethod(v enum.PaymentStreamAveragingMethod) {
	m.Set(field.NewPaymentStreamAveragingMethod(v))
}

// SetPaymentStreamNegativeRateTreatment sets PaymentStreamNegativeRateTreatment, Tag 40807.
func (m NoStreams) SetPaymentStreamNegativeRateTreatment(v enum.PaymentStreamNegativeRateTreatment) {
	m.Set(field.NewPaymentStreamNegativeRateTreatment(v))
}

// SetPaymentStreamInflationLagPeriod sets PaymentStreamInflationLagPeriod, Tag 40808.
func (m NoStreams) SetPaymentStreamInflationLagPeriod(v int) {
	m.Set(field.NewPaymentStreamInflationLagPeriod(v))
}

// SetPaymentStreamInflationLagUnit sets PaymentStreamInflationLagUnit, Tag 40809.
func (m NoStreams) SetPaymentStreamInflationLagUnit(v enum.PaymentStreamInflationLagUnit) {
	m.Set(field.NewPaymentStreamInflationLagUnit(v))
}

// SetPaymentStreamInflationLagDayType sets PaymentStreamInflationLagDayType, Tag 40810.
func (m NoStreams) SetPaymentStreamInflationLagDayType(v enum.PaymentStreamInflationLagDayType) {
	m.Set(field.NewPaymentStreamInflationLagDayType(v))
}

// SetPaymentStreamInflationInterpolationMethod sets PaymentStreamInflationInterpolationMethod, Tag 40811.
func (m NoStreams) SetPaymentStreamInflationInterpolationMethod(v enum.PaymentStreamInflationInterpolationMethod) {
	m.Set(field.NewPaymentStreamInflationInterpolationMethod(v))
}

// SetPaymentStreamInflationIndexSource sets PaymentStreamInflationIndexSource, Tag 40812.
func (m NoStreams) SetPaymentStreamInflationIndexSource(v int) {
	m.Set(field.NewPaymentStreamInflationIndexSource(v))
}

// SetPaymentStreamInflationPublicationSource sets PaymentStreamInflationPublicationSource, Tag 40813.
func (m NoStreams) SetPaymentStreamInflationPublicationSource(v string) {
	m.Set(field.NewPaymentStreamInflationPublicationSource(v))
}

// SetPaymentStreamInflationInitialIndexLevel sets PaymentStreamInflationInitialIndexLevel, Tag 40814.
func (m NoStreams) SetPaymentStreamInflationInitialIndexLevel(value decimal.Decimal, scale int32) {
	m.Set(field.NewPaymentStreamInflationInitialIndexLevel(value, scale))
}

// SetPaymentStreamInflationFallbackBondApplicable sets PaymentStreamInflationFallbackBondApplicable, Tag 40815.
func (m NoStreams) SetPaymentStreamInflationFallbackBondApplicable(v bool) {
	m.Set(field.NewPaymentStreamInflationFallbackBondApplicable(v))
}

// SetPaymentStreamFRADiscounting sets PaymentStreamFRADiscounting, Tag 40816.
func (m NoStreams) SetPaymentStreamFRADiscounting(v enum.PaymentStreamFRADiscounting) {
	m.Set(field.NewPaymentStreamFRADiscounting(v))
}

// SetPaymentStreamRateIndex2CurvePeriod sets PaymentStreamRateIndex2CurvePeriod, Tag 41194.
func (m NoStreams) SetPaymentStreamRateIndex2CurvePeriod(v int) {
	m.Set(field.NewPaymentStreamRateIndex2CurvePeriod(v))
}

// SetPaymentStreamRateIndex2CurveUnit sets PaymentStreamRateIndex2CurveUnit, Tag 41195.
func (m NoStreams) SetPaymentStreamRateIndex2CurveUnit(v string) {
	m.Set(field.NewPaymentStreamRateIndex2CurveUnit(v))
}

// SetPaymentStreamRateIndexLocation sets PaymentStreamRateIndexLocation, Tag 41196.
func (m NoStreams) SetPaymentStreamRateIndexLocation(v string) {
	m.Set(field.NewPaymentStreamRateIndexLocation(v))
}

// SetPaymentStreamRateIndexLevel sets PaymentStreamRateIndexLevel, Tag 41197.
func (m NoStreams) SetPaymentStreamRateIndexLevel(value decimal.Decimal, scale int32) {
	m.Set(field.NewPaymentStreamRateIndexLevel(value, scale))
}

// SetPaymentStreamRateIndexUnitOfMeasure sets PaymentStreamRateIndexUnitOfMeasure, Tag 41198.
func (m NoStreams) SetPaymentStreamRateIndexUnitOfMeasure(v string) {
	m.Set(field.NewPaymentStreamRateIndexUnitOfMeasure(v))
}

// SetPaymentStreamSettlLevel sets PaymentStreamSettlLevel, Tag 41199.
func (m NoStreams) SetPaymentStreamSettlLevel(v enum.PaymentStreamSettlLevel) {
	m.Set(field.NewPaymentStreamSettlLevel(v))
}

// SetPaymentStreamReferenceLevel sets PaymentStreamReferenceLevel, Tag 41200.
func (m NoStreams) SetPaymentStreamReferenceLevel(value decimal.Decimal, scale int32) {
	m.Set(field.NewPaymentStreamReferenceLevel(value, scale))
}

// SetPaymentStreamReferenceLevelUnitOfMeasure sets PaymentStreamReferenceLevelUnitOfMeasure, Tag 41201.
func (m NoStreams) SetPaymentStreamReferenceLevelUnitOfMeasure(v string) {
	m.Set(field.NewPaymentStreamReferenceLevelUnitOfMeasure(v))
}

// SetPaymentStreamReferenceLevelEqualsZeroIndicator sets PaymentStreamReferenceLevelEqualsZeroIndicator, Tag 41202.
func (m NoStreams) SetPaymentStreamReferenceLevelEqualsZeroIndicator(v bool) {
	m.Set(field.NewPaymentStreamReferenceLevelEqualsZeroIndicator(v))
}

// SetPaymentStreamRateSpreadCurrency sets PaymentStreamRateSpreadCurrency, Tag 41203.
func (m NoStreams) SetPaymentStreamRateSpreadCurrency(v string) {
	m.Set(field.NewPaymentStreamRateSpreadCurrency(v))
}

// SetPaymentStreamRateSpreadUnitOfMeasure sets PaymentStreamRateSpreadUnitOfMeasure, Tag 41204.
func (m NoStreams) SetPaymentStreamRateSpreadUnitOfMeasure(v string) {
	m.Set(field.NewPaymentStreamRateSpreadUnitOfMeasure(v))
}

// SetPaymentStreamRateConversionFactor sets PaymentStreamRateConversionFactor, Tag 41205.
func (m NoStreams) SetPaymentStreamRateConversionFactor(value decimal.Decimal, scale int32) {
	m.Set(field.NewPaymentStreamRateConversionFactor(value, scale))
}

// SetPaymentStreamRateSpreadType sets PaymentStreamRateSpreadType, Tag 41206.
func (m NoStreams) SetPaymentStreamRateSpreadType(v enum.PaymentStreamRateSpreadType) {
	m.Set(field.NewPaymentStreamRateSpreadType(v))
}

// SetPaymentStreamLastResetRate sets PaymentStreamLastResetRate, Tag 41207.
func (m NoStreams) SetPaymentStreamLastResetRate(value decimal.Decimal, scale int32) {
	m.Set(field.NewPaymentStreamLastResetRate(value, scale))
}

// SetPaymentStreamFinalRate sets PaymentStreamFinalRate, Tag 41208.
func (m NoStreams) SetPaymentStreamFinalRate(value decimal.Decimal, scale int32) {
	m.Set(field.NewPaymentStreamFinalRate(value, scale))
}

// SetPaymentStreamCalculationLagPeriod sets PaymentStreamCalculationLagPeriod, Tag 41209.
func (m NoStreams) SetPaymentStreamCalculationLagPeriod(v int) {
	m.Set(field.NewPaymentStreamCalculationLagPeriod(v))
}

// SetPaymentStreamCalculationLagUnit sets PaymentStreamCalculationLagUnit, Tag 41210.
func (m NoStreams) SetPaymentStreamCalculationLagUnit(v string) {
	m.Set(field.NewPaymentStreamCalculationLagUnit(v))
}

// SetPaymentStreamFirstObservationDateOffsetPeriod sets PaymentStreamFirstObservationDateOffsetPeriod, Tag 41211.
func (m NoStreams) SetPaymentStreamFirstObservationDateOffsetPeriod(v int) {
	m.Set(field.NewPaymentStreamFirstObservationDateOffsetPeriod(v))
}

// SetPaymentStreamFirstObservationDateOffsetUnit sets PaymentStreamFirstObservationDateOffsetUnit, Tag 41212.
func (m NoStreams) SetPaymentStreamFirstObservationDateOffsetUnit(v string) {
	m.Set(field.NewPaymentStreamFirstObservationDateOffsetUnit(v))
}

// SetPaymentStreamPricingDayType sets PaymentStreamPricingDayType, Tag 41213.
func (m NoStreams) SetPaymentStreamPricingDayType(v int) {
	m.Set(field.NewPaymentStreamPricingDayType(v))
}

// SetPaymentStreamPricingDayDistribution sets PaymentStreamPricingDayDistribution, Tag 41214.
func (m NoStreams) SetPaymentStreamPricingDayDistribution(v enum.PaymentStreamPricingDayDistribution) {
	m.Set(field.NewPaymentStreamPricingDayDistribution(v))
}

// SetPaymentStreamPricingDayCount sets PaymentStreamPricingDayCount, Tag 41215.
func (m NoStreams) SetPaymentStreamPricingDayCount(v int) {
	m.Set(field.NewPaymentStreamPricingDayCount(v))
}

// SetPaymentStreamPricingBusinessCalendar sets PaymentStreamPricingBusinessCalendar, Tag 41216.
func (m NoStreams) SetPaymentStreamPricingBusinessCalendar(v string) {
	m.Set(field.NewPaymentStreamPricingBusinessCalendar(v))
}

// SetPaymentStreamPricingBusinessDayConvention sets PaymentStreamPricingBusinessDayConvention, Tag 41217.
func (m NoStreams) SetPaymentStreamPricingBusinessDayConvention(v int) {
	m.Set(field.NewPaymentStreamPricingBusinessDayConvention(v))
}

// SetNoPaymentStreamPricingBusinessCenters sets NoPaymentStreamPricingBusinessCenters, Tag 41192.
func (m NoStreams) SetNoPaymentStreamPricingBusinessCenters(f NoPaymentStreamPricingBusinessCentersRepeatingGroup) {
	m.SetGroup(f)
}

// SetNoPaymentStreamPricingDays sets NoPaymentStreamPricingDays, Tag 41227.
func (m NoStreams) SetNoPaymentStreamPricingDays(f NoPaymentStreamPricingDaysRepeatingGroup) {
	m.SetGroup(f)
}

// SetNoPaymentStreamPricingDates sets NoPaymentStreamPricingDates, Tag 41224.
func (m NoStreams) SetNoPaymentStreamPricingDates(f NoPaymentStreamPricingDatesRepeatingGroup) {
	m.SetGroup(f)
}

// SetPaymentStreamFirstObservationDateUnadjusted sets PaymentStreamFirstObservationDateUnadjusted, Tag 42663.
func (m NoStreams) SetPaymentStreamFirstObservationDateUnadjusted(v string) {
	m.Set(field.NewPaymentStreamFirstObservationDateUnadjusted(v))
}

// SetPaymentStreamFirstObservationDateRelativeTo sets PaymentStreamFirstObservationDateRelativeTo, Tag 42664.
func (m NoStreams) SetPaymentStreamFirstObservationDateRelativeTo(v int) {
	m.Set(field.NewPaymentStreamFirstObservationDateRelativeTo(v))
}

// SetPaymentStreamFirstObservationDateOffsetDayType sets PaymentStreamFirstObservationDateOffsetDayType, Tag 42665.
func (m NoStreams) SetPaymentStreamFirstObservationDateOffsetDayType(v int) {
	m.Set(field.NewPaymentStreamFirstObservationDateOffsetDayType(v))
}

// SetPaymentStreamFirstObservationDateAdjusted sets PaymentStreamFirstObservationDateAdjusted, Tag 42666.
func (m NoStreams) SetPaymentStreamFirstObservationDateAdjusted(v string) {
	m.Set(field.NewPaymentStreamFirstObservationDateAdjusted(v))
}

// SetPaymentStreamUnderlierRefID sets PaymentStreamUnderlierRefID, Tag 42667.
func (m NoStreams) SetPaymentStreamUnderlierRefID(v string) {
	m.Set(field.NewPaymentStreamUnderlierRefID(v))
}

// SetPaymentStreamFormulaCurrency sets PaymentStreamFormulaCurrency, Tag 42686.
func (m NoStreams) SetPaymentStreamFormulaCurrency(v string) {
	m.Set(field.NewPaymentStreamFormulaCurrency(v))
}

// SetPaymentStreamFormulaCurrencyDeterminationMethod sets PaymentStreamFormulaCurrencyDeterminationMethod, Tag 42687.
func (m NoStreams) SetPaymentStreamFormulaCurrencyDeterminationMethod(v string) {
	m.Set(field.NewPaymentStreamFormulaCurrencyDeterminationMethod(v))
}

// SetPaymentStreamFormulaReferenceAmount sets PaymentStreamFormulaReferenceAmount, Tag 42688.
func (m NoStreams) SetPaymentStreamFormulaReferenceAmount(v int) {
	m.Set(field.NewPaymentStreamFormulaReferenceAmount(v))
}

// SetNoPaymentStreamFormulas sets NoPaymentStreamFormulas, Tag 42683.
func (m NoStreams) SetNoPaymentStreamFormulas(f NoPaymentStreamFormulasRepeatingGroup) {
	m.SetGroup(f)
}

// SetPaymentStreamFormulaImageLength sets PaymentStreamFormulaImageLength, Tag 42652.
func (m NoStreams) SetPaymentStreamFormulaImageLength(v int) {
	m.Set(field.NewPaymentStreamFormulaImageLength(v))
}

// SetPaymentStreamFormulaImage sets PaymentStreamFormulaImage, Tag 42653.
func (m NoStreams) SetPaymentStreamFormulaImage(v string) {
	m.Set(field.NewPaymentStreamFormulaImage(v))
}

// SetDividendReinvestmentIndicator sets DividendReinvestmentIndicator, Tag 42245.
func (m NoStreams) SetDividendReinvestmentIndicator(v bool) {
	m.Set(field.NewDividendReinvestmentIndicator(v))
}

// SetDividendEntitlementEvent sets DividendEntitlementEvent, Tag 42246.
func (m NoStreams) SetDividendEntitlementEvent(v enum.DividendEntitlementEvent) {
	m.Set(field.NewDividendEntitlementEvent(v))
}

// SetDividendAmountType sets DividendAmountType, Tag 42247.
func (m NoStreams) SetDividendAmountType(v enum.DividendAmountType) {
	m.Set(field.NewDividendAmountType(v))
}

// SetDividendUnderlierRefID sets DividendUnderlierRefID, Tag 42248.
func (m NoStreams) SetDividendUnderlierRefID(v string) {
	m.Set(field.NewDividendUnderlierRefID(v))
}

// SetNoDividendPeriods sets NoDividendPeriods, Tag 42274.
func (m NoStreams) SetNoDividendPeriods(f NoDividendPeriodsRepeatingGroup) {
	m.SetGroup(f)
}

// SetExtraordinaryDividendPartySide sets ExtraordinaryDividendPartySide, Tag 42249.
func (m NoStreams) SetExtraordinaryDividendPartySide(v int) {
	m.Set(field.NewExtraordinaryDividendPartySide(v))
}

// SetExtraordinaryDividendAmountType sets ExtraordinaryDividendAmountType, Tag 42250.
func (m NoStreams) SetExtraordinaryDividendAmountType(v int) {
	m.Set(field.NewExtraordinaryDividendAmountType(v))
}

// SetExtraordinaryDividendCurrency sets ExtraordinaryDividendCurrency, Tag 42251.
func (m NoStreams) SetExtraordinaryDividendCurrency(v string) {
	m.Set(field.NewExtraordinaryDividendCurrency(v))
}

// SetExtraordinaryDividendDeterminationMethod sets ExtraordinaryDividendDeterminationMethod, Tag 42252.
func (m NoStreams) SetExtraordinaryDividendDeterminationMethod(v string) {
	m.Set(field.NewExtraordinaryDividendDeterminationMethod(v))
}

// SetDividendFXTriggerDateRelativeTo sets DividendFXTriggerDateRelativeTo, Tag 42265.
func (m NoStreams) SetDividendFXTriggerDateRelativeTo(v int) {
	m.Set(field.NewDividendFXTriggerDateRelativeTo(v))
}

// SetDividendFXTriggerDateOffsetPeriod sets DividendFXTriggerDateOffsetPeriod, Tag 42266.
func (m NoStreams) SetDividendFXTriggerDateOffsetPeriod(v int) {
	m.Set(field.NewDividendFXTriggerDateOffsetPeriod(v))
}

// SetDividendFXTriggerDateOffsetUnit sets DividendFXTriggerDateOffsetUnit, Tag 42267.
func (m NoStreams) SetDividendFXTriggerDateOffsetUnit(v string) {
	m.Set(field.NewDividendFXTriggerDateOffsetUnit(v))
}

// SetDividendFXTriggerDateOffsetDayType sets DividendFXTriggerDateOffsetDayType, Tag 42268.
func (m NoStreams) SetDividendFXTriggerDateOffsetDayType(v int) {
	m.Set(field.NewDividendFXTriggerDateOffsetDayType(v))
}

// SetDividendFXTriggerDateUnadjusted sets DividendFXTriggerDateUnadjusted, Tag 42269.
func (m NoStreams) SetDividendFXTriggerDateUnadjusted(v string) {
	m.Set(field.NewDividendFXTriggerDateUnadjusted(v))
}

// SetDividendFXTriggerDateBusinessDayConvention sets DividendFXTriggerDateBusinessDayConvention, Tag 42270.
func (m NoStreams) SetDividendFXTriggerDateBusinessDayConvention(v int) {
	m.Set(field.NewDividendFXTriggerDateBusinessDayConvention(v))
}

// SetNoDividendFXTriggerDateBusinessCenters sets NoDividendFXTriggerDateBusinessCenters, Tag 42272.
func (m NoStreams) SetNoDividendFXTriggerDateBusinessCenters(f NoDividendFXTriggerDateBusinessCentersRepeatingGroup) {
	m.SetGroup(f)
}

// SetDividendFXTriggerDateAdjusted sets DividendFXTriggerDateAdjusted, Tag 42271.
func (m NoStreams) SetDividendFXTriggerDateAdjusted(v string) {
	m.Set(field.NewDividendFXTriggerDateAdjusted(v))
}

// SetDividendFloatingRateIndex sets DividendFloatingRateIndex, Tag 42218.
func (m NoStreams) SetDividendFloatingRateIndex(v string) {
	m.Set(field.NewDividendFloatingRateIndex(v))
}

// SetDividendFloatingRateIndexCurvePeriod sets DividendFloatingRateIndexCurvePeriod, Tag 42219.
func (m NoStreams) SetDividendFloatingRateIndexCurvePeriod(v int) {
	m.Set(field.NewDividendFloatingRateIndexCurvePeriod(v))
}

// SetDividendFloatingRateIndexCurveUnit sets DividendFloatingRateIndexCurveUnit, Tag 42220.
func (m NoStreams) SetDividendFloatingRateIndexCurveUnit(v string) {
	m.Set(field.NewDividendFloatingRateIndexCurveUnit(v))
}

// SetDividendFloatingRateMultiplier sets DividendFloatingRateMultiplier, Tag 42221.
func (m NoStreams) SetDividendFloatingRateMultiplier(value decimal.Decimal, scale int32) {
	m.Set(field.NewDividendFloatingRateMultiplier(value, scale))
}

// SetDividendFloatingRateSpread sets DividendFloatingRateSpread, Tag 42222.
func (m NoStreams) SetDividendFloatingRateSpread(value decimal.Decimal, scale int32) {
	m.Set(field.NewDividendFloatingRateSpread(value, scale))
}

// SetDividendFloatingRateSpreadPositionType sets DividendFloatingRateSpreadPositionType, Tag 42223.
func (m NoStreams) SetDividendFloatingRateSpreadPositionType(v int) {
	m.Set(field.NewDividendFloatingRateSpreadPositionType(v))
}

// SetDividendFloatingRateTreatment sets DividendFloatingRateTreatment, Tag 42224.
func (m NoStreams) SetDividendFloatingRateTreatment(v int) {
	m.Set(field.NewDividendFloatingRateTreatment(v))
}

// SetDividendCapRate sets DividendCapRate, Tag 42225.
func (m NoStreams) SetDividendCapRate(value decimal.Decimal, scale int32) {
	m.Set(field.NewDividendCapRate(value, scale))
}

// SetDividendCapRateBuySide sets DividendCapRateBuySide, Tag 42226.
func (m NoStreams) SetDividendCapRateBuySide(v int) {
	m.Set(field.NewDividendCapRateBuySide(v))
}

// SetDividendCapRateSellSide sets DividendCapRateSellSide, Tag 42227.
func (m NoStreams) SetDividendCapRateSellSide(v int) {
	m.Set(field.NewDividendCapRateSellSide(v))
}

// SetDividendFloorRate sets DividendFloorRate, Tag 42228.
func (m NoStreams) SetDividendFloorRate(value decimal.Decimal, scale int32) {
	m.Set(field.NewDividendFloorRate(value, scale))
}

// SetDividendFloorRateBuySide sets DividendFloorRateBuySide, Tag 42229.
func (m NoStreams) SetDividendFloorRateBuySide(v int) {
	m.Set(field.NewDividendFloorRateBuySide(v))
}

// SetDividendFloorRateSellSide sets DividendFloorRateSellSide, Tag 42230.
func (m NoStreams) SetDividendFloorRateSellSide(v int) {
	m.Set(field.NewDividendFloorRateSellSide(v))
}

// SetDividendInitialRate sets DividendInitialRate, Tag 42231.
func (m NoStreams) SetDividendInitialRate(value decimal.Decimal, scale int32) {
	m.Set(field.NewDividendInitialRate(value, scale))
}

// SetDividendFinalRateRoundingDirection sets DividendFinalRateRoundingDirection, Tag 42232.
func (m NoStreams) SetDividendFinalRateRoundingDirection(v string) {
	m.Set(field.NewDividendFinalRateRoundingDirection(v))
}

// SetDividendFinalRatePrecision sets DividendFinalRatePrecision, Tag 42233.
func (m NoStreams) SetDividendFinalRatePrecision(v int) {
	m.Set(field.NewDividendFinalRatePrecision(v))
}

// SetDividendAveragingMethod sets DividendAveragingMethod, Tag 42234.
func (m NoStreams) SetDividendAveragingMethod(v int) {
	m.Set(field.NewDividendAveragingMethod(v))
}

// SetDividendNegativeRateTreatment sets DividendNegativeRateTreatment, Tag 42235.
func (m NoStreams) SetDividendNegativeRateTreatment(v int) {
	m.Set(field.NewDividendNegativeRateTreatment(v))
}

// SetDividendAccrualFixedRate sets DividendAccrualFixedRate, Tag 42253.
func (m NoStreams) SetDividendAccrualFixedRate(value decimal.Decimal, scale int32) {
	m.Set(field.NewDividendAccrualFixedRate(value, scale))
}

// SetDividendAccrualPaymentDateRelativeTo sets DividendAccrualPaymentDateRelativeTo, Tag 42238.
func (m NoStreams) SetDividendAccrualPaymentDateRelativeTo(v int) {
	m.Set(field.NewDividendAccrualPaymentDateRelativeTo(v))
}

// SetDividendAccrualPaymentDateOffsetPeriod sets DividendAccrualPaymentDateOffsetPeriod, Tag 42239.
func (m NoStreams) SetDividendAccrualPaymentDateOffsetPeriod(v int) {
	m.Set(field.NewDividendAccrualPaymentDateOffsetPeriod(v))
}

// SetDividendAccrualPaymentDateOffsetUnit sets DividendAccrualPaymentDateOffsetUnit, Tag 42240.
func (m NoStreams) SetDividendAccrualPaymentDateOffsetUnit(v string) {
	m.Set(field.NewDividendAccrualPaymentDateOffsetUnit(v))
}

// SetDividendAccrualPaymentDateOffsetDayType sets DividendAccrualPaymentDateOffsetDayType, Tag 42241.
func (m NoStreams) SetDividendAccrualPaymentDateOffsetDayType(v int) {
	m.Set(field.NewDividendAccrualPaymentDateOffsetDayType(v))
}

// SetDividendAccrualPaymentDateUnadjusted sets DividendAccrualPaymentDateUnadjusted, Tag 42242.
func (m NoStreams) SetDividendAccrualPaymentDateUnadjusted(v string) {
	m.Set(field.NewDividendAccrualPaymentDateUnadjusted(v))
}

// SetDividendAccrualPaymeentDateBusinessDayConvention sets DividendAccrualPaymeentDateBusinessDayConvention, Tag 42243.
func (m NoStreams) SetDividendAccrualPaymeentDateBusinessDayConvention(v int) {
	m.Set(field.NewDividendAccrualPaymeentDateBusinessDayConvention(v))
}

// SetNoDividendAccrualPaymentDateBusinessCenters sets NoDividendAccrualPaymentDateBusinessCenters, Tag 42236.
func (m NoStreams) SetNoDividendAccrualPaymentDateBusinessCenters(f NoDividendAccrualPaymentDateBusinessCentersRepeatingGroup) {
	m.SetGroup(f)
}

// SetDividendAccrualPaymentDateAdjusted sets DividendAccrualPaymentDateAdjusted, Tag 42244.
func (m NoStreams) SetDividendAccrualPaymentDateAdjusted(v string) {
	m.Set(field.NewDividendAccrualPaymentDateAdjusted(v))
}

// SetDividendCompoundingMethod sets DividendCompoundingMethod, Tag 42254.
func (m NoStreams) SetDividendCompoundingMethod(v int) {
	m.Set(field.NewDividendCompoundingMethod(v))
}

// SetDividendNumOfIndexUnits sets DividendNumOfIndexUnits, Tag 42255.
func (m NoStreams) SetDividendNumOfIndexUnits(v int) {
	m.Set(field.NewDividendNumOfIndexUnits(v))
}

// SetDividendCashPercentage sets DividendCashPercentage, Tag 42256.
func (m NoStreams) SetDividendCashPercentage(value decimal.Decimal, scale int32) {
	m.Set(field.NewDividendCashPercentage(value, scale))
}

// SetDividendCashEquivalentPercentage sets DividendCashEquivalentPercentage, Tag 42257.
func (m NoStreams) SetDividendCashEquivalentPercentage(value decimal.Decimal, scale int32) {
	m.Set(field.NewDividendCashEquivalentPercentage(value, scale))
}

// SetNonCashDividendTreatment sets NonCashDividendTreatment, Tag 42258.
func (m NoStreams) SetNonCashDividendTreatment(v enum.NonCashDividendTreatment) {
	m.Set(field.NewNonCashDividendTreatment(v))
}

// SetDividendComposition sets DividendComposition, Tag 42259.
func (m NoStreams) SetDividendComposition(v enum.DividendComposition) {
	m.Set(field.NewDividendComposition(v))
}

// SetSpecialDividendsIndicator sets SpecialDividendsIndicator, Tag 42260.
func (m NoStreams) SetSpecialDividendsIndicator(v bool) {
	m.Set(field.NewSpecialDividendsIndicator(v))
}

// SetMaterialDividendsIndicator sets MaterialDividendsIndicator, Tag 42261.
func (m NoStreams) SetMaterialDividendsIndicator(v bool) {
	m.Set(field.NewMaterialDividendsIndicator(v))
}

// SetOptionsExchangeDividendsIndicator sets OptionsExchangeDividendsIndicator, Tag 42262.
func (m NoStreams) SetOptionsExchangeDividendsIndicator(v bool) {
	m.Set(field.NewOptionsExchangeDividendsIndicator(v))
}

// SetAdditionalDividendsIndicator sets AdditionalDividendsIndicator, Tag 42263.
func (m NoStreams) SetAdditionalDividendsIndicator(v bool) {
	m.Set(field.NewAdditionalDividendsIndicator(v))
}

// SetAllDividendsIndicator sets AllDividendsIndicator, Tag 42264.
func (m NoStreams) SetAllDividendsIndicator(v bool) {
	m.Set(field.NewAllDividendsIndicator(v))
}

// SetReturnRateNotionalReset sets ReturnRateNotionalReset, Tag 42668.
func (m NoStreams) SetReturnRateNotionalReset(v bool) {
	m.Set(field.NewReturnRateNotionalReset(v))
}

// SetNoReturnRates sets NoReturnRates, Tag 42735.
func (m NoStreams) SetNoReturnRates(f NoReturnRatesRepeatingGroup) {
	m.SetGroup(f)
}

// SetPaymentStreamLinkInitialLevel sets PaymentStreamLinkInitialLevel, Tag 42669.
func (m NoStreams) SetPaymentStreamLinkInitialLevel(value decimal.Decimal, scale int32) {
	m.Set(field.NewPaymentStreamLinkInitialLevel(value, scale))
}

// SetPaymentStreamLinkClosingLevelIndicator sets PaymentStreamLinkClosingLevelIndicator, Tag 42670.
func (m NoStreams) SetPaymentStreamLinkClosingLevelIndicator(v bool) {
	m.Set(field.NewPaymentStreamLinkClosingLevelIndicator(v))
}

// SetPaymentStreamLinkExpiringLevelIndicator sets PaymentStreamLinkExpiringLevelIndicator, Tag 42671.
func (m NoStreams) SetPaymentStreamLinkExpiringLevelIndicator(v bool) {
	m.Set(field.NewPaymentStreamLinkExpiringLevelIndicator(v))
}

// SetPaymentStreamLinkEstimatedTradingDays sets PaymentStreamLinkEstimatedTradingDays, Tag 42672.
func (m NoStreams) SetPaymentStreamLinkEstimatedTradingDays(v int) {
	m.Set(field.NewPaymentStreamLinkEstimatedTradingDays(v))
}

// SetPaymentStreamLinkStrikePrice sets PaymentStreamLinkStrikePrice, Tag 42673.
func (m NoStreams) SetPaymentStreamLinkStrikePrice(value decimal.Decimal, scale int32) {
	m.Set(field.NewPaymentStreamLinkStrikePrice(value, scale))
}

// SetPaymentStreamLinkStrikePriceType sets PaymentStreamLinkStrikePriceType, Tag 42674.
func (m NoStreams) SetPaymentStreamLinkStrikePriceType(v enum.PaymentStreamLinkStrikePriceType) {
	m.Set(field.NewPaymentStreamLinkStrikePriceType(v))
}

// SetPaymentStreamLinkMaximumBoundary sets PaymentStreamLinkMaximumBoundary, Tag 42675.
func (m NoStreams) SetPaymentStreamLinkMaximumBoundary(value decimal.Decimal, scale int32) {
	m.Set(field.NewPaymentStreamLinkMaximumBoundary(value, scale))
}

// SetPaymentStreamLinkMinimumBoundary sets PaymentStreamLinkMinimumBoundary, Tag 42676.
func (m NoStreams) SetPaymentStreamLinkMinimumBoundary(value decimal.Decimal, scale int32) {
	m.Set(field.NewPaymentStreamLinkMinimumBoundary(value, scale))
}

// SetPaymentStreamLinkNumberOfDataSeries sets PaymentStreamLinkNumberOfDataSeries, Tag 42677.
func (m NoStreams) SetPaymentStreamLinkNumberOfDataSeries(v int) {
	m.Set(field.NewPaymentStreamLinkNumberOfDataSeries(v))
}

// SetPaymentStreamVarianceUnadjustedCap sets PaymentStreamVarianceUnadjustedCap, Tag 42678.
func (m NoStreams) SetPaymentStreamVarianceUnadjustedCap(value decimal.Decimal, scale int32) {
	m.Set(field.NewPaymentStreamVarianceUnadjustedCap(value, scale))
}

// SetPaymentStreamRealizedVarianceMethod sets PaymentStreamRealizedVarianceMethod, Tag 42679.
func (m NoStreams) SetPaymentStreamRealizedVarianceMethod(v enum.PaymentStreamRealizedVarianceMethod) {
	m.Set(field.NewPaymentStreamRealizedVarianceMethod(v))
}

// SetPaymentStreamDaysAdjustmentIndicator sets PaymentStreamDaysAdjustmentIndicator, Tag 42680.
func (m NoStreams) SetPaymentStreamDaysAdjustmentIndicator(v bool) {
	m.Set(field.NewPaymentStreamDaysAdjustmentIndicator(v))
}

// SetPaymentStreamNearestExchangeContractRefID sets PaymentStreamNearestExchangeContractRefID, Tag 42681.
func (m NoStreams) SetPaymentStreamNearestExchangeContractRefID(v string) {
	m.Set(field.NewPaymentStreamNearestExchangeContractRefID(v))
}

// SetPaymentStreamVegaNotionalAmount sets PaymentStreamVegaNotionalAmount, Tag 42682.
func (m NoStreams) SetPaymentStreamVegaNotionalAmount(value decimal.Decimal, scale int32) {
	m.Set(field.NewPaymentStreamVegaNotionalAmount(value, scale))
}

// SetPaymentStreamRateIndexID sets PaymentStreamRateIndexID, Tag 43090.
func (m NoStreams) SetPaymentStreamRateIndexID(v string) {
	m.Set(field.NewPaymentStreamRateIndexID(v))
}

// SetPaymentStreamRateIndexIDSource sets PaymentStreamRateIndexIDSource, Tag 43091.
func (m NoStreams) SetPaymentStreamRateIndexIDSource(v string) {
	m.Set(field.NewPaymentStreamRateIndexIDSource(v))
}

// SetPaymentStreamNonDeliverableRefCurrency sets PaymentStreamNonDeliverableRefCurrency, Tag 40817.
func (m NoStreams) SetPaymentStreamNonDeliverableRefCurrency(v string) {
	m.Set(field.NewPaymentStreamNonDeliverableRefCurrency(v))
}

// SetPaymentStreamNonDeliverableFixingDatesBusinessDayConvention sets PaymentStreamNonDeliverableFixingDatesBusinessDayConvention, Tag 40818.
func (m NoStreams) SetPaymentStreamNonDeliverableFixingDatesBusinessDayConvention(v int) {
	m.Set(field.NewPaymentStreamNonDeliverableFixingDatesBusinessDayConvention(v))
}

// SetNoPaymentStreamNonDeliverableFixingDatesBusinessCenters sets NoPaymentStreamNonDeliverableFixingDatesBusinessCenters, Tag 40946.
func (m NoStreams) SetNoPaymentStreamNonDeliverableFixingDatesBusinessCenters(f NoPaymentStreamNonDeliverableFixingDatesBusinessCentersRepeatingGroup) {
	m.SetGroup(f)
}

// SetPaymentStreamNonDeliverableFixingDatesRelativeTo sets PaymentStreamNonDeliverableFixingDatesRelativeTo, Tag 40820.
func (m NoStreams) SetPaymentStreamNonDeliverableFixingDatesRelativeTo(v int) {
	m.Set(field.NewPaymentStreamNonDeliverableFixingDatesRelativeTo(v))
}

// SetPaymentStreamNonDeliverableFixingDatesOffsetPeriod sets PaymentStreamNonDeliverableFixingDatesOffsetPeriod, Tag 40821.
func (m NoStreams) SetPaymentStreamNonDeliverableFixingDatesOffsetPeriod(v int) {
	m.Set(field.NewPaymentStreamNonDeliverableFixingDatesOffsetPeriod(v))
}

// SetPaymentStreamNonDeliverableFixingDatesOffsetUnit sets PaymentStreamNonDeliverableFixingDatesOffsetUnit, Tag 40822.
func (m NoStreams) SetPaymentStreamNonDeliverableFixingDatesOffsetUnit(v string) {
	m.Set(field.NewPaymentStreamNonDeliverableFixingDatesOffsetUnit(v))
}

// SetPaymentStreamNonDeliverableFixingDatesOffsetDayType sets PaymentStreamNonDeliverableFixingDatesOffsetDayType, Tag 40823.
func (m NoStreams) SetPaymentStreamNonDeliverableFixingDatesOffsetDayType(v int) {
	m.Set(field.NewPaymentStreamNonDeliverableFixingDatesOffsetDayType(v))
}

// SetPaymentStreamNonDeliverableSettlRateSource sets PaymentStreamNonDeliverableSettlRateSource, Tag 40371.
func (m NoStreams) SetPaymentStreamNonDeliverableSettlRateSource(v int) {
	m.Set(field.NewPaymentStreamNonDeliverableSettlRateSource(v))
}

// SetPaymentStreamNonDeliverableSettlReferencePage sets PaymentStreamNonDeliverableSettlReferencePage, Tag 40372.
func (m NoStreams) SetPaymentStreamNonDeliverableSettlReferencePage(v string) {
	m.Set(field.NewPaymentStreamNonDeliverableSettlReferencePage(v))
}

// SetNoNonDeliverableFixingDates sets NoNonDeliverableFixingDates, Tag 40825.
func (m NoStreams) SetNoNonDeliverableFixingDates(f NoNonDeliverableFixingDatesRepeatingGroup) {
	m.SetGroup(f)
}

// SetNoSettlRateFallbacks sets NoSettlRateFallbacks, Tag 40085.
func (m NoStreams) SetNoSettlRateFallbacks(f NoSettlRateFallbacksRepeatingGroup) {
	m.SetGroup(f)
}

// SetPaymentStreamFlatRateIndicator sets PaymentStreamFlatRateIndicator, Tag 41180.
func (m NoStreams) SetPaymentStreamFlatRateIndicator(v bool) {
	m.Set(field.NewPaymentStreamFlatRateIndicator(v))
}

// SetPaymentStreamFlatRateAmount sets PaymentStreamFlatRateAmount, Tag 41181.
func (m NoStreams) SetPaymentStreamFlatRateAmount(value decimal.Decimal, scale int32) {
	m.Set(field.NewPaymentStreamFlatRateAmount(value, scale))
}

// SetPaymentStreamFlatRateCurrency sets PaymentStreamFlatRateCurrency, Tag 41182.
func (m NoStreams) SetPaymentStreamFlatRateCurrency(v string) {
	m.Set(field.NewPaymentStreamFlatRateCurrency(v))
}

// SetPaymentStreamMaximumPaymentAmount sets PaymentStreamMaximumPaymentAmount, Tag 41183.
func (m NoStreams) SetPaymentStreamMaximumPaymentAmount(value decimal.Decimal, scale int32) {
	m.Set(field.NewPaymentStreamMaximumPaymentAmount(value, scale))
}

// SetPaymentStreamMaximumPaymentCurrency sets PaymentStreamMaximumPaymentCurrency, Tag 41184.
func (m NoStreams) SetPaymentStreamMaximumPaymentCurrency(v string) {
	m.Set(field.NewPaymentStreamMaximumPaymentCurrency(v))
}

// SetPaymentStreamMaximumTransactionAmount sets PaymentStreamMaximumTransactionAmount, Tag 41185.
func (m NoStreams) SetPaymentStreamMaximumTransactionAmount(value decimal.Decimal, scale int32) {
	m.Set(field.NewPaymentStreamMaximumTransactionAmount(value, scale))
}

// SetPaymentStreamMaximumTransactionCurrency sets PaymentStreamMaximumTransactionCurrency, Tag 41186.
func (m NoStreams) SetPaymentStreamMaximumTransactionCurrency(v string) {
	m.Set(field.NewPaymentStreamMaximumTransactionCurrency(v))
}

// SetPaymentStreamCashSettlIndicator sets PaymentStreamCashSettlIndicator, Tag 42600.
func (m NoStreams) SetPaymentStreamCashSettlIndicator(v bool) {
	m.Set(field.NewPaymentStreamCashSettlIndicator(v))
}

// SetPaymentStreamCompoundingXIDRef sets PaymentStreamCompoundingXIDRef, Tag 42601.
func (m NoStreams) SetPaymentStreamCompoundingXIDRef(v string) {
	m.Set(field.NewPaymentStreamCompoundingXIDRef(v))
}

// SetPaymentStreamCompoundingSpread sets PaymentStreamCompoundingSpread, Tag 42602.
func (m NoStreams) SetPaymentStreamCompoundingSpread(value decimal.Decimal, scale int32) {
	m.Set(field.NewPaymentStreamCompoundingSpread(value, scale))
}

// SetPaymentStreamInterpolationMethod sets PaymentStreamInterpolationMethod, Tag 42603.
func (m NoStreams) SetPaymentStreamInterpolationMethod(v int) {
	m.Set(field.NewPaymentStreamInterpolationMethod(v))
}

// SetPaymentStreamInterpolationPeriod sets PaymentStreamInterpolationPeriod, Tag 42604.
func (m NoStreams) SetPaymentStreamInterpolationPeriod(v enum.PaymentStreamInterpolationPeriod) {
	m.Set(field.NewPaymentStreamInterpolationPeriod(v))
}

// SetPaymentStreamCompoundingFixedRate sets PaymentStreamCompoundingFixedRate, Tag 42605.
func (m NoStreams) SetPaymentStreamCompoundingFixedRate(value decimal.Decimal, scale int32) {
	m.Set(field.NewPaymentStreamCompoundingFixedRate(value, scale))
}

// SetPaymentStreamCompoundingRateIndex sets PaymentStreamCompoundingRateIndex, Tag 42628.
func (m NoStreams) SetPaymentStreamCompoundingRateIndex(v string) {
	m.Set(field.NewPaymentStreamCompoundingRateIndex(v))
}

// SetPaymentStreamCompoundingRateIndexCurvePeriod sets PaymentStreamCompoundingRateIndexCurvePeriod, Tag 42629.
func (m NoStreams) SetPaymentStreamCompoundingRateIndexCurvePeriod(v int) {
	m.Set(field.NewPaymentStreamCompoundingRateIndexCurvePeriod(v))
}

// SetPaymentStreamCompoundingRateIndexCurveUnit sets PaymentStreamCompoundingRateIndexCurveUnit, Tag 42630.
func (m NoStreams) SetPaymentStreamCompoundingRateIndexCurveUnit(v string) {
	m.Set(field.NewPaymentStreamCompoundingRateIndexCurveUnit(v))
}

// SetPaymentStreamCompoundingRateMultiplier sets PaymentStreamCompoundingRateMultiplier, Tag 42631.
func (m NoStreams) SetPaymentStreamCompoundingRateMultiplier(value decimal.Decimal, scale int32) {
	m.Set(field.NewPaymentStreamCompoundingRateMultiplier(value, scale))
}

// SetPaymentStreamCompoundingRateSpread sets PaymentStreamCompoundingRateSpread, Tag 42632.
func (m NoStreams) SetPaymentStreamCompoundingRateSpread(value decimal.Decimal, scale int32) {
	m.Set(field.NewPaymentStreamCompoundingRateSpread(value, scale))
}

// SetPaymentStreamCompoundingRateSpreadPositionType sets PaymentStreamCompoundingRateSpreadPositionType, Tag 42633.
func (m NoStreams) SetPaymentStreamCompoundingRateSpreadPositionType(v int) {
	m.Set(field.NewPaymentStreamCompoundingRateSpreadPositionType(v))
}

// SetPaymentStreamCompoundingRateTreatment sets PaymentStreamCompoundingRateTreatment, Tag 42634.
func (m NoStreams) SetPaymentStreamCompoundingRateTreatment(v int) {
	m.Set(field.NewPaymentStreamCompoundingRateTreatment(v))
}

// SetPaymentStreamCompoundingCapRate sets PaymentStreamCompoundingCapRate, Tag 42635.
func (m NoStreams) SetPaymentStreamCompoundingCapRate(value decimal.Decimal, scale int32) {
	m.Set(field.NewPaymentStreamCompoundingCapRate(value, scale))
}

// SetPaymentStreamCompoundingCapRateBuySide sets PaymentStreamCompoundingCapRateBuySide, Tag 42636.
func (m NoStreams) SetPaymentStreamCompoundingCapRateBuySide(v int) {
	m.Set(field.NewPaymentStreamCompoundingCapRateBuySide(v))
}

// SetPaymentStreamCompoundingCapRateSellSide sets PaymentStreamCompoundingCapRateSellSide, Tag 42637.
func (m NoStreams) SetPaymentStreamCompoundingCapRateSellSide(v int) {
	m.Set(field.NewPaymentStreamCompoundingCapRateSellSide(v))
}

// SetPaymentStreamCompoundingFloorRate sets PaymentStreamCompoundingFloorRate, Tag 42638.
func (m NoStreams) SetPaymentStreamCompoundingFloorRate(value decimal.Decimal, scale int32) {
	m.Set(field.NewPaymentStreamCompoundingFloorRate(value, scale))
}

// SetPaymentStreamCompoundingFloorRateBuySide sets PaymentStreamCompoundingFloorRateBuySide, Tag 42639.
func (m NoStreams) SetPaymentStreamCompoundingFloorRateBuySide(v int) {
	m.Set(field.NewPaymentStreamCompoundingFloorRateBuySide(v))
}

// SetPaymentStreamCompoundingFloorRateSellSide sets PaymentStreamCompoundingFloorRateSellSide, Tag 42640.
func (m NoStreams) SetPaymentStreamCompoundingFloorRateSellSide(v int) {
	m.Set(field.NewPaymentStreamCompoundingFloorRateSellSide(v))
}

// SetPaymentStreamCompoundingInitialRate sets PaymentStreamCompoundingInitialRate, Tag 42641.
func (m NoStreams) SetPaymentStreamCompoundingInitialRate(value decimal.Decimal, scale int32) {
	m.Set(field.NewPaymentStreamCompoundingInitialRate(value, scale))
}

// SetPaymentStreamCompoundingFinalRateRoundingDirection sets PaymentStreamCompoundingFinalRateRoundingDirection, Tag 42642.
func (m NoStreams) SetPaymentStreamCompoundingFinalRateRoundingDirection(v string) {
	m.Set(field.NewPaymentStreamCompoundingFinalRateRoundingDirection(v))
}

// SetPaymentStreamCompoundingFinalRatePrecision sets PaymentStreamCompoundingFinalRatePrecision, Tag 42643.
func (m NoStreams) SetPaymentStreamCompoundingFinalRatePrecision(v int) {
	m.Set(field.NewPaymentStreamCompoundingFinalRatePrecision(v))
}

// SetPaymentStreamCompoundingAveragingMethod sets PaymentStreamCompoundingAveragingMethod, Tag 42644.
func (m NoStreams) SetPaymentStreamCompoundingAveragingMethod(v int) {
	m.Set(field.NewPaymentStreamCompoundingAveragingMethod(v))
}

// SetPaymentStreamCompoundingNegativeRateTreatment sets PaymentStreamCompoundingNegativeRateTreatment, Tag 42645.
func (m NoStreams) SetPaymentStreamCompoundingNegativeRateTreatment(v int) {
	m.Set(field.NewPaymentStreamCompoundingNegativeRateTreatment(v))
}

// SetPaymentStreamCompoundingDatesBusinessDayConvention sets PaymentStreamCompoundingDatesBusinessDayConvention, Tag 42609.
func (m NoStreams) SetPaymentStreamCompoundingDatesBusinessDayConvention(v int) {
	m.Set(field.NewPaymentStreamCompoundingDatesBusinessDayConvention(v))
}

// SetNoPaymentStreamCompoundingDatesBusinessCenters sets NoPaymentStreamCompoundingDatesBusinessCenters, Tag 42620.
func (m NoStreams) SetNoPaymentStreamCompoundingDatesBusinessCenters(f NoPaymentStreamCompoundingDatesBusinessCentersRepeatingGroup) {
	m.SetGroup(f)
}

// SetNoPaymentStreamCompoundingDates sets NoPaymentStreamCompoundingDates, Tag 42606.
func (m NoStreams) SetNoPaymentStreamCompoundingDates(f NoPaymentStreamCompoundingDatesRepeatingGroup) {
	m.SetGroup(f)
}

// SetPaymentStreamCompoundingDatesRelativeTo sets PaymentStreamCompoundingDatesRelativeTo, Tag 42610.
func (m NoStreams) SetPaymentStreamCompoundingDatesRelativeTo(v int) {
	m.Set(field.NewPaymentStreamCompoundingDatesRelativeTo(v))
}

// SetPaymentStreamCompoundingDatesOffsetPeriod sets PaymentStreamCompoundingDatesOffsetPeriod, Tag 42611.
func (m NoStreams) SetPaymentStreamCompoundingDatesOffsetPeriod(v int) {
	m.Set(field.NewPaymentStreamCompoundingDatesOffsetPeriod(v))
}

// SetPaymentStreamCompoundingDatesOffsetUnit sets PaymentStreamCompoundingDatesOffsetUnit, Tag 42612.
func (m NoStreams) SetPaymentStreamCompoundingDatesOffsetUnit(v string) {
	m.Set(field.NewPaymentStreamCompoundingDatesOffsetUnit(v))
}

// SetPaymentStreamCompoundingDatesOffsetDayType sets PaymentStreamCompoundingDatesOffsetDayType, Tag 42613.
func (m NoStreams) SetPaymentStreamCompoundingDatesOffsetDayType(v int) {
	m.Set(field.NewPaymentStreamCompoundingDatesOffsetDayType(v))
}

// SetPaymentStreamCompoundingPeriodSkip sets PaymentStreamCompoundingPeriodSkip, Tag 42614.
func (m NoStreams) SetPaymentStreamCompoundingPeriodSkip(v int) {
	m.Set(field.NewPaymentStreamCompoundingPeriodSkip(v))
}

// SetPaymentStreamCompoundingStartDateUnadjusted sets PaymentStreamCompoundingStartDateUnadjusted, Tag 42646.
func (m NoStreams) SetPaymentStreamCompoundingStartDateUnadjusted(v string) {
	m.Set(field.NewPaymentStreamCompoundingStartDateUnadjusted(v))
}

// SetPaymentStreamCompoundingStartDateRelativeTo sets PaymentStreamCompoundingStartDateRelativeTo, Tag 42647.
func (m NoStreams) SetPaymentStreamCompoundingStartDateRelativeTo(v int) {
	m.Set(field.NewPaymentStreamCompoundingStartDateRelativeTo(v))
}

// SetPaymentStreamCompoundingStartDateOffsetPeriod sets PaymentStreamCompoundingStartDateOffsetPeriod, Tag 42648.
func (m NoStreams) SetPaymentStreamCompoundingStartDateOffsetPeriod(v int) {
	m.Set(field.NewPaymentStreamCompoundingStartDateOffsetPeriod(v))
}

// SetPaymentStreamCompoundingStartDateOffsetUnit sets PaymentStreamCompoundingStartDateOffsetUnit, Tag 42649.
func (m NoStreams) SetPaymentStreamCompoundingStartDateOffsetUnit(v string) {
	m.Set(field.NewPaymentStreamCompoundingStartDateOffsetUnit(v))
}

// SetPaymentStreamCompoundingStartDateOffsetDayType sets PaymentStreamCompoundingStartDateOffsetDayType, Tag 42650.
func (m NoStreams) SetPaymentStreamCompoundingStartDateOffsetDayType(v int) {
	m.Set(field.NewPaymentStreamCompoundingStartDateOffsetDayType(v))
}

// SetPaymentStreamCompoundingStartDateAdjusted sets PaymentStreamCompoundingStartDateAdjusted, Tag 42651.
func (m NoStreams) SetPaymentStreamCompoundingStartDateAdjusted(v string) {
	m.Set(field.NewPaymentStreamCompoundingStartDateAdjusted(v))
}

// SetPaymentStreamCompoundingEndDateUnadjusted sets PaymentStreamCompoundingEndDateUnadjusted, Tag 42622.
func (m NoStreams) SetPaymentStreamCompoundingEndDateUnadjusted(v string) {
	m.Set(field.NewPaymentStreamCompoundingEndDateUnadjusted(v))
}

// SetPaymentStreamCompoundingEndDateRelativeTo sets PaymentStreamCompoundingEndDateRelativeTo, Tag 42623.
func (m NoStreams) SetPaymentStreamCompoundingEndDateRelativeTo(v int) {
	m.Set(field.NewPaymentStreamCompoundingEndDateRelativeTo(v))
}

// SetPaymentStreamCompoundingEndDateOffsetPeriod sets PaymentStreamCompoundingEndDateOffsetPeriod, Tag 42624.
func (m NoStreams) SetPaymentStreamCompoundingEndDateOffsetPeriod(v int) {
	m.Set(field.NewPaymentStreamCompoundingEndDateOffsetPeriod(v))
}

// SetPaymentStreamCompoundingEndDateOffsetUnit sets PaymentStreamCompoundingEndDateOffsetUnit, Tag 42625.
func (m NoStreams) SetPaymentStreamCompoundingEndDateOffsetUnit(v string) {
	m.Set(field.NewPaymentStreamCompoundingEndDateOffsetUnit(v))
}

// SetPaymentStreamCompoundingEndDateOffsetDayType sets PaymentStreamCompoundingEndDateOffsetDayType, Tag 42626.
func (m NoStreams) SetPaymentStreamCompoundingEndDateOffsetDayType(v int) {
	m.Set(field.NewPaymentStreamCompoundingEndDateOffsetDayType(v))
}

// SetPaymentStreamCompoundingEndDateAdjusted sets PaymentStreamCompoundingEndDateAdjusted, Tag 42627.
func (m NoStreams) SetPaymentStreamCompoundingEndDateAdjusted(v string) {
	m.Set(field.NewPaymentStreamCompoundingEndDateAdjusted(v))
}

// SetPaymentStreamCompoundingFrequencyPeriod sets PaymentStreamCompoundingFrequencyPeriod, Tag 42615.
func (m NoStreams) SetPaymentStreamCompoundingFrequencyPeriod(v int) {
	m.Set(field.NewPaymentStreamCompoundingFrequencyPeriod(v))
}

// SetPaymentStreamCompoundingFrequencyUnit sets PaymentStreamCompoundingFrequencyUnit, Tag 42616.
func (m NoStreams) SetPaymentStreamCompoundingFrequencyUnit(v string) {
	m.Set(field.NewPaymentStreamCompoundingFrequencyUnit(v))
}

// SetPaymentStreamCompoundingRollConvention sets PaymentStreamCompoundingRollConvention, Tag 42617.
func (m NoStreams) SetPaymentStreamCompoundingRollConvention(v string) {
	m.Set(field.NewPaymentStreamCompoundingRollConvention(v))
}

// SetPaymentStreamBoundsFirstDateUnadjusted sets PaymentStreamBoundsFirstDateUnadjusted, Tag 42618.
func (m NoStreams) SetPaymentStreamBoundsFirstDateUnadjusted(v string) {
	m.Set(field.NewPaymentStreamBoundsFirstDateUnadjusted(v))
}

// SetPaymentStreamBoundsLastDateUnadjusted sets PaymentStreamBoundsLastDateUnadjusted, Tag 42619.
func (m NoStreams) SetPaymentStreamBoundsLastDateUnadjusted(v string) {
	m.Set(field.NewPaymentStreamBoundsLastDateUnadjusted(v))
}

// SetPaymentStreamOtherDayCount sets PaymentStreamOtherDayCount, Tag 43106.
func (m NoStreams) SetPaymentStreamOtherDayCount(v string) {
	m.Set(field.NewPaymentStreamOtherDayCount(v))
}

// SetNoPaymentSchedules sets NoPaymentSchedules, Tag 40828.
func (m NoStreams) SetNoPaymentSchedules(f NoPaymentSchedulesRepeatingGroup) {
	m.SetGroup(f)
}

// SetNoPaymentStubs sets NoPaymentStubs, Tag 40872.
func (m NoStreams) SetNoPaymentStubs(f NoPaymentStubsRepeatingGroup) {
	m.SetGroup(f)
}

// SetStreamText sets StreamText, Tag 40056.
func (m NoStreams) SetStreamText(v string) {
	m.Set(field.NewStreamText(v))
}

// SetEncodedStreamTextLen sets EncodedStreamTextLen, Tag 40982.
func (m NoStreams) SetEncodedStreamTextLen(v int) {
	m.Set(field.NewEncodedStreamTextLen(v))
}

// SetEncodedStreamText sets EncodedStreamText, Tag 40983.
func (m NoStreams) SetEncodedStreamText(v string) {
	m.Set(field.NewEncodedStreamText(v))
}

// SetStreamXID sets StreamXID, Tag 41303.
func (m NoStreams) SetStreamXID(v string) {
	m.Set(field.NewStreamXID(v))
}

// SetStreamNotionalXIDRef sets StreamNotionalXIDRef, Tag 41305.
func (m NoStreams) SetStreamNotionalXIDRef(v string) {
	m.Set(field.NewStreamNotionalXIDRef(v))
}

// SetStreamNotionalFrequencyPeriod sets StreamNotionalFrequencyPeriod, Tag 41306.
func (m NoStreams) SetStreamNotionalFrequencyPeriod(v int) {
	m.Set(field.NewStreamNotionalFrequencyPeriod(v))
}

// SetStreamNotionalFrequencyUnit sets StreamNotionalFrequencyUnit, Tag 41307.
func (m NoStreams) SetStreamNotionalFrequencyUnit(v string) {
	m.Set(field.NewStreamNotionalFrequencyUnit(v))
}

// SetStreamNotionalCommodityFrequency sets StreamNotionalCommodityFrequency, Tag 41308.
func (m NoStreams) SetStreamNotionalCommodityFrequency(v enum.StreamNotionalCommodityFrequency) {
	m.Set(field.NewStreamNotionalCommodityFrequency(v))
}

// SetStreamNotionalUnitOfMeasure sets StreamNotionalUnitOfMeasure, Tag 41309.
func (m NoStreams) SetStreamNotionalUnitOfMeasure(v string) {
	m.Set(field.NewStreamNotionalUnitOfMeasure(v))
}

// SetStreamTotalNotional sets StreamTotalNotional, Tag 41310.
func (m NoStreams) SetStreamTotalNotional(value decimal.Decimal, scale int32) {
	m.Set(field.NewStreamTotalNotional(value, scale))
}

// SetStreamTotalNotionalUnitOfMeasure sets StreamTotalNotionalUnitOfMeasure, Tag 41311.
func (m NoStreams) SetStreamTotalNotionalUnitOfMeasure(v string) {
	m.Set(field.NewStreamTotalNotionalUnitOfMeasure(v))
}

// SetStreamCommodityBase sets StreamCommodityBase, Tag 41251.
func (m NoStreams) SetStreamCommodityBase(v string) {
	m.Set(field.NewStreamCommodityBase(v))
}

// SetStreamCommodityType sets StreamCommodityType, Tag 41252.
func (m NoStreams) SetStreamCommodityType(v string) {
	m.Set(field.NewStreamCommodityType(v))
}

// SetStreamCommoditySecurityID sets StreamCommoditySecurityID, Tag 41253.
func (m NoStreams) SetStreamCommoditySecurityID(v string) {
	m.Set(field.NewStreamCommoditySecurityID(v))
}

// SetStreamCommoditySecurityIDSource sets StreamCommoditySecurityIDSource, Tag 41254.
func (m NoStreams) SetStreamCommoditySecurityIDSource(v string) {
	m.Set(field.NewStreamCommoditySecurityIDSource(v))
}

// SetNoStreamCommodityAltIDs sets NoStreamCommodityAltIDs, Tag 41277.
func (m NoStreams) SetNoStreamCommodityAltIDs(f NoStreamCommodityAltIDsRepeatingGroup) {
	m.SetGroup(f)
}

// SetStreamCommodityDesc sets StreamCommodityDesc, Tag 41255.
func (m NoStreams) SetStreamCommodityDesc(v string) {
	m.Set(field.NewStreamCommodityDesc(v))
}

// SetEncodedStreamCommodityDescLen sets EncodedStreamCommodityDescLen, Tag 41256.
func (m NoStreams) SetEncodedStreamCommodityDescLen(v int) {
	m.Set(field.NewEncodedStreamCommodityDescLen(v))
}

// SetEncodedStreamCommodityDesc sets EncodedStreamCommodityDesc, Tag 41257.
func (m NoStreams) SetEncodedStreamCommodityDesc(v string) {
	m.Set(field.NewEncodedStreamCommodityDesc(v))
}

// SetNoStreamAssetAttributes sets NoStreamAssetAttributes, Tag 41237.
func (m NoStreams) SetNoStreamAssetAttributes(f NoStreamAssetAttributesRepeatingGroup) {
	m.SetGroup(f)
}

// SetStreamCommodityUnitOfMeasure sets StreamCommodityUnitOfMeasure, Tag 41258.
func (m NoStreams) SetStreamCommodityUnitOfMeasure(v string) {
	m.Set(field.NewStreamCommodityUnitOfMeasure(v))
}

// SetStreamCommodityCurrency sets StreamCommodityCurrency, Tag 41259.
func (m NoStreams) SetStreamCommodityCurrency(v string) {
	m.Set(field.NewStreamCommodityCurrency(v))
}

// SetStreamCommodityExchange sets StreamCommodityExchange, Tag 41260.
func (m NoStreams) SetStreamCommodityExchange(v string) {
	m.Set(field.NewStreamCommodityExchange(v))
}

// SetStreamCommodityRateSource sets StreamCommodityRateSource, Tag 41261.
func (m NoStreams) SetStreamCommodityRateSource(v int) {
	m.Set(field.NewStreamCommodityRateSource(v))
}

// SetStreamCommodityRateReferencePage sets StreamCommodityRateReferencePage, Tag 41262.
func (m NoStreams) SetStreamCommodityRateReferencePage(v string) {
	m.Set(field.NewStreamCommodityRateReferencePage(v))
}

// SetStreamCommodityRateReferencePageHeading sets StreamCommodityRateReferencePageHeading, Tag 41263.
func (m NoStreams) SetStreamCommodityRateReferencePageHeading(v string) {
	m.Set(field.NewStreamCommodityRateReferencePageHeading(v))
}

// SetStreamDataProvider sets StreamDataProvider, Tag 41264.
func (m NoStreams) SetStreamDataProvider(v string) {
	m.Set(field.NewStreamDataProvider(v))
}

// SetNoStreamCommodityDataSources sets NoStreamCommodityDataSources, Tag 41280.
func (m NoStreams) SetNoStreamCommodityDataSources(f NoStreamCommodityDataSourcesRepeatingGroup) {
	m.SetGroup(f)
}

// SetStreamCommodityPricingType sets StreamCommodityPricingType, Tag 41265.
func (m NoStreams) SetStreamCommodityPricingType(v string) {
	m.Set(field.NewStreamCommodityPricingType(v))
}

// SetStreamCommodityNearbySettlDayPeriod sets StreamCommodityNearbySettlDayPeriod, Tag 41266.
func (m NoStreams) SetStreamCommodityNearbySettlDayPeriod(v int) {
	m.Set(field.NewStreamCommodityNearbySettlDayPeriod(v))
}

// SetStreamCommodityNearbySettlDayUnit sets StreamCommodityNearbySettlDayUnit, Tag 41267.
func (m NoStreams) SetStreamCommodityNearbySettlDayUnit(v enum.StreamCommodityNearbySettlDayUnit) {
	m.Set(field.NewStreamCommodityNearbySettlDayUnit(v))
}

// SetStreamCommoditySettlDateUnadjusted sets StreamCommoditySettlDateUnadjusted, Tag 41268.
func (m NoStreams) SetStreamCommoditySettlDateUnadjusted(v string) {
	m.Set(field.NewStreamCommoditySettlDateUnadjusted(v))
}

// SetStreamCommoditySettlDateBusinessDayConvention sets StreamCommoditySettlDateBusinessDayConvention, Tag 41269.
func (m NoStreams) SetStreamCommoditySettlDateBusinessDayConvention(v int) {
	m.Set(field.NewStreamCommoditySettlDateBusinessDayConvention(v))
}

// SetNoStreamCommoditySettlBusinessCenters sets NoStreamCommoditySettlBusinessCenters, Tag 41249.
func (m NoStreams) SetNoStreamCommoditySettlBusinessCenters(f NoStreamCommoditySettlBusinessCentersRepeatingGroup) {
	m.SetGroup(f)
}

// SetStreamCommoditySettlDateAdjusted sets StreamCommoditySettlDateAdjusted, Tag 41270.
func (m NoStreams) SetStreamCommoditySettlDateAdjusted(v string) {
	m.Set(field.NewStreamCommoditySettlDateAdjusted(v))
}

// SetStreamCommoditySettlMonth sets StreamCommoditySettlMonth, Tag 41271.
func (m NoStreams) SetStreamCommoditySettlMonth(v int) {
	m.Set(field.NewStreamCommoditySettlMonth(v))
}

// SetStreamCommoditySettlDateRollPeriod sets StreamCommoditySettlDateRollPeriod, Tag 41272.
func (m NoStreams) SetStreamCommoditySettlDateRollPeriod(v int) {
	m.Set(field.NewStreamCommoditySettlDateRollPeriod(v))
}

// SetStreamCommoditySettlDateRollUnit sets StreamCommoditySettlDateRollUnit, Tag 41273.
func (m NoStreams) SetStreamCommoditySettlDateRollUnit(v enum.StreamCommoditySettlDateRollUnit) {
	m.Set(field.NewStreamCommoditySettlDateRollUnit(v))
}

// SetStreamCommoditySettlDayType sets StreamCommoditySettlDayType, Tag 41274.
func (m NoStreams) SetStreamCommoditySettlDayType(v int) {
	m.Set(field.NewStreamCommoditySettlDayType(v))
}

// SetNoStreamCommoditySettlPeriods sets NoStreamCommoditySettlPeriods, Tag 41289.
func (m NoStreams) SetNoStreamCommoditySettlPeriods(f NoStreamCommoditySettlPeriodsRepeatingGroup) {
	m.SetGroup(f)
}

// SetStreamCommodityXID sets StreamCommodityXID, Tag 41275.
func (m NoStreams) SetStreamCommodityXID(v string) {
	m.Set(field.NewStreamCommodityXID(v))
}

// SetStreamCommodityXIDRef sets StreamCommodityXIDRef, Tag 41276.
func (m NoStreams) SetStreamCommodityXIDRef(v string) {
	m.Set(field.NewStreamCommodityXIDRef(v))
}

// SetStreamCommodityDeliveryPricingRegion sets StreamCommodityDeliveryPricingRegion, Tag 42587.
func (m NoStreams) SetStreamCommodityDeliveryPricingRegion(v string) {
	m.Set(field.NewStreamCommodityDeliveryPricingRegion(v))
}

// SetDeliveryStreamType sets DeliveryStreamType, Tag 41058.
func (m NoStreams) SetDeliveryStreamType(v enum.DeliveryStreamType) {
	m.Set(field.NewDeliveryStreamType(v))
}

// SetNoDeliveryStreamCommoditySources sets NoDeliveryStreamCommoditySources, Tag 41085.
func (m NoStreams) SetNoDeliveryStreamCommoditySources(f NoDeliveryStreamCommoditySourcesRepeatingGroup) {
	m.SetGroup(f)
}

// SetDeliveryStreamPipeline sets DeliveryStreamPipeline, Tag 41059.
func (m NoStreams) SetDeliveryStreamPipeline(v string) {
	m.Set(field.NewDeliveryStreamPipeline(v))
}

// SetDeliveryStreamEntryPoint sets DeliveryStreamEntryPoint, Tag 41060.
func (m NoStreams) SetDeliveryStreamEntryPoint(v string) {
	m.Set(field.NewDeliveryStreamEntryPoint(v))
}

// SetDeliveryStreamWithdrawalPoint sets DeliveryStreamWithdrawalPoint, Tag 41061.
func (m NoStreams) SetDeliveryStreamWithdrawalPoint(v string) {
	m.Set(field.NewDeliveryStreamWithdrawalPoint(v))
}

// SetDeliveryStreamDeliveryPoint sets DeliveryStreamDeliveryPoint, Tag 41062.
func (m NoStreams) SetDeliveryStreamDeliveryPoint(v string) {
	m.Set(field.NewDeliveryStreamDeliveryPoint(v))
}

// SetDeliveryStreamDeliveryRestriction sets DeliveryStreamDeliveryRestriction, Tag 41063.
func (m NoStreams) SetDeliveryStreamDeliveryRestriction(v enum.DeliveryStreamDeliveryRestriction) {
	m.Set(field.NewDeliveryStreamDeliveryRestriction(v))
}

// SetDeliveryStreamDeliveryContingency sets DeliveryStreamDeliveryContingency, Tag 41064.
func (m NoStreams) SetDeliveryStreamDeliveryContingency(v string) {
	m.Set(field.NewDeliveryStreamDeliveryContingency(v))
}

// SetDeliveryStreamDeliveryContingentPartySide sets DeliveryStreamDeliveryContingentPartySide, Tag 41065.
func (m NoStreams) SetDeliveryStreamDeliveryContingentPartySide(v int) {
	m.Set(field.NewDeliveryStreamDeliveryContingentPartySide(v))
}

// SetDeliveryStreamDeliverAtSourceIndicator sets DeliveryStreamDeliverAtSourceIndicator, Tag 41066.
func (m NoStreams) SetDeliveryStreamDeliverAtSourceIndicator(v bool) {
	m.Set(field.NewDeliveryStreamDeliverAtSourceIndicator(v))
}

// SetDeliveryStreamRiskApportionment sets DeliveryStreamRiskApportionment, Tag 41067.
func (m NoStreams) SetDeliveryStreamRiskApportionment(v string) {
	m.Set(field.NewDeliveryStreamRiskApportionment(v))
}

// SetDeliveryStreamRiskApportionmentSource sets DeliveryStreamRiskApportionmentSource, Tag 41218.
func (m NoStreams) SetDeliveryStreamRiskApportionmentSource(v string) {
	m.Set(field.NewDeliveryStreamRiskApportionmentSource(v))
}

// SetNoDeliveryStreamCycles sets NoDeliveryStreamCycles, Tag 41081.
func (m NoStreams) SetNoDeliveryStreamCycles(f NoDeliveryStreamCyclesRepeatingGroup) {
	m.SetGroup(f)
}

// SetDeliveryStreamTitleTransferLocation sets DeliveryStreamTitleTransferLocation, Tag 41068.
func (m NoStreams) SetDeliveryStreamTitleTransferLocation(v string) {
	m.Set(field.NewDeliveryStreamTitleTransferLocation(v))
}

// SetDeliveryStreamTitleTransferCondition sets DeliveryStreamTitleTransferCondition, Tag 41069.
func (m NoStreams) SetDeliveryStreamTitleTransferCondition(v enum.DeliveryStreamTitleTransferCondition) {
	m.Set(field.NewDeliveryStreamTitleTransferCondition(v))
}

// SetDeliveryStreamImporterOfRecord sets DeliveryStreamImporterOfRecord, Tag 41070.
func (m NoStreams) SetDeliveryStreamImporterOfRecord(v string) {
	m.Set(field.NewDeliveryStreamImporterOfRecord(v))
}

// SetDeliveryStreamNegativeTolerance sets DeliveryStreamNegativeTolerance, Tag 41071.
func (m NoStreams) SetDeliveryStreamNegativeTolerance(value decimal.Decimal, scale int32) {
	m.Set(field.NewDeliveryStreamNegativeTolerance(value, scale))
}

// SetDeliveryStreamPositiveTolerance sets DeliveryStreamPositiveTolerance, Tag 41072.
func (m NoStreams) SetDeliveryStreamPositiveTolerance(value decimal.Decimal, scale int32) {
	m.Set(field.NewDeliveryStreamPositiveTolerance(value, scale))
}

// SetDeliveryStreamToleranceUnitOfMeasure sets DeliveryStreamToleranceUnitOfMeasure, Tag 41073.
func (m NoStreams) SetDeliveryStreamToleranceUnitOfMeasure(v string) {
	m.Set(field.NewDeliveryStreamToleranceUnitOfMeasure(v))
}

// SetDeliveryStreamToleranceType sets DeliveryStreamToleranceType, Tag 41074.
func (m NoStreams) SetDeliveryStreamToleranceType(v int) {
	m.Set(field.NewDeliveryStreamToleranceType(v))
}

// SetDeliveryStreamToleranceOptionSide sets DeliveryStreamToleranceOptionSide, Tag 41075.
func (m NoStreams) SetDeliveryStreamToleranceOptionSide(v enum.DeliveryStreamToleranceOptionSide) {
	m.Set(field.NewDeliveryStreamToleranceOptionSide(v))
}

// SetDeliveryStreamTotalPositiveTolerance sets DeliveryStreamTotalPositiveTolerance, Tag 41076.
func (m NoStreams) SetDeliveryStreamTotalPositiveTolerance(value decimal.Decimal, scale int32) {
	m.Set(field.NewDeliveryStreamTotalPositiveTolerance(value, scale))
}

// SetDeliveryStreamTotalNegativeTolerance sets DeliveryStreamTotalNegativeTolerance, Tag 41077.
func (m NoStreams) SetDeliveryStreamTotalNegativeTolerance(value decimal.Decimal, scale int32) {
	m.Set(field.NewDeliveryStreamTotalNegativeTolerance(value, scale))
}

// SetDeliveryStreamNotionalConversionFactor sets DeliveryStreamNotionalConversionFactor, Tag 41078.
func (m NoStreams) SetDeliveryStreamNotionalConversionFactor(value decimal.Decimal, scale int32) {
	m.Set(field.NewDeliveryStreamNotionalConversionFactor(value, scale))
}

// SetDeliveryStreamTransportEquipment sets DeliveryStreamTransportEquipment, Tag 41079.
func (m NoStreams) SetDeliveryStreamTransportEquipment(v string) {
	m.Set(field.NewDeliveryStreamTransportEquipment(v))
}

// SetDeliveryStreamElectingPartySide sets DeliveryStreamElectingPartySide, Tag 41080.
func (m NoStreams) SetDeliveryStreamElectingPartySide(v enum.DeliveryStreamElectingPartySide) {
	m.Set(field.NewDeliveryStreamElectingPartySide(v))
}

// SetDeliveryStreamDeliveryPointSource sets DeliveryStreamDeliveryPointSource, Tag 42192.
func (m NoStreams) SetDeliveryStreamDeliveryPointSource(v enum.DeliveryStreamDeliveryPointSource) {
	m.Set(field.NewDeliveryStreamDeliveryPointSource(v))
}

// SetDeliveryStreamDeliveryPointDesc sets DeliveryStreamDeliveryPointDesc, Tag 42193.
func (m NoStreams) SetDeliveryStreamDeliveryPointDesc(v string) {
	m.Set(field.NewDeliveryStreamDeliveryPointDesc(v))
}

// SetDeliveryStreamRouteOrCharter sets DeliveryStreamRouteOrCharter, Tag 43094.
func (m NoStreams) SetDeliveryStreamRouteOrCharter(v string) {
	m.Set(field.NewDeliveryStreamRouteOrCharter(v))
}

// SetNoDeliverySchedules sets NoDeliverySchedules, Tag 41037.
func (m NoStreams) SetNoDeliverySchedules(f NoDeliverySchedulesRepeatingGroup) {
	m.SetGroup(f)
}

// SetStreamVersion sets StreamVersion, Tag 42784.
func (m NoStreams) SetStreamVersion(v string) {
	m.Set(field.NewStreamVersion(v))
}

// SetStreamVersionEffectiveDate sets StreamVersionEffectiveDate, Tag 42785.
func (m NoStreams) SetStreamVersionEffectiveDate(v string) {
	m.Set(field.NewStreamVersionEffectiveDate(v))
}

// SetStreamNotionalDeterminationMethod sets StreamNotionalDeterminationMethod, Tag 42786.
func (m NoStreams) SetStreamNotionalDeterminationMethod(v string) {
	m.Set(field.NewStreamNotionalDeterminationMethod(v))
}

// SetStreamNotionalAdjustments sets StreamNotionalAdjustments, Tag 42787.
func (m NoStreams) SetStreamNotionalAdjustments(v enum.StreamNotionalAdjustments) {
	m.Set(field.NewStreamNotionalAdjustments(v))
}

// GetStreamType gets StreamType, Tag 40050.
func (m NoStreams) GetStreamType() (v enum.StreamType, err quickfix.MessageRejectError) {
	var f field.StreamTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStreamDesc gets StreamDesc, Tag 40051.
func (m NoStreams) GetStreamDesc() (v string, err quickfix.MessageRejectError) {
	var f field.StreamDescField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStreamPaySide gets StreamPaySide, Tag 40052.
func (m NoStreams) GetStreamPaySide() (v int, err quickfix.MessageRejectError) {
	var f field.StreamPaySideField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStreamReceiveSide gets StreamReceiveSide, Tag 40053.
func (m NoStreams) GetStreamReceiveSide() (v int, err quickfix.MessageRejectError) {
	var f field.StreamReceiveSideField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStreamNotional gets StreamNotional, Tag 40054.
func (m NoStreams) GetStreamNotional() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.StreamNotionalField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStreamCurrency gets StreamCurrency, Tag 40055.
func (m NoStreams) GetStreamCurrency() (v string, err quickfix.MessageRejectError) {
	var f field.StreamCurrencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStreamEffectiveDateUnadjusted gets StreamEffectiveDateUnadjusted, Tag 40907.
func (m NoStreams) GetStreamEffectiveDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.StreamEffectiveDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStreamEffectiveDateBusinessDayConvention gets StreamEffectiveDateBusinessDayConvention, Tag 40908.
func (m NoStreams) GetStreamEffectiveDateBusinessDayConvention() (v int, err quickfix.MessageRejectError) {
	var f field.StreamEffectiveDateBusinessDayConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoStreamEffectiveBusinessCenters gets NoStreamEffectiveBusinessCenters, Tag 40960.
func (m NoStreams) GetNoStreamEffectiveBusinessCenters() (NoStreamEffectiveBusinessCentersRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoStreamEffectiveBusinessCentersRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetStreamEffectiveDateRelativeTo gets StreamEffectiveDateRelativeTo, Tag 40910.
func (m NoStreams) GetStreamEffectiveDateRelativeTo() (v int, err quickfix.MessageRejectError) {
	var f field.StreamEffectiveDateRelativeToField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStreamEffectiveDateOffsetPeriod gets StreamEffectiveDateOffsetPeriod, Tag 40911.
func (m NoStreams) GetStreamEffectiveDateOffsetPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.StreamEffectiveDateOffsetPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStreamEffectiveDateOffsetUnit gets StreamEffectiveDateOffsetUnit, Tag 40912.
func (m NoStreams) GetStreamEffectiveDateOffsetUnit() (v string, err quickfix.MessageRejectError) {
	var f field.StreamEffectiveDateOffsetUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStreamEffectiveDateOffsetDayType gets StreamEffectiveDateOffsetDayType, Tag 40913.
func (m NoStreams) GetStreamEffectiveDateOffsetDayType() (v int, err quickfix.MessageRejectError) {
	var f field.StreamEffectiveDateOffsetDayTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStreamEffectiveDateAdjusted gets StreamEffectiveDateAdjusted, Tag 40914.
func (m NoStreams) GetStreamEffectiveDateAdjusted() (v string, err quickfix.MessageRejectError) {
	var f field.StreamEffectiveDateAdjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStreamTerminationDateUnadjusted gets StreamTerminationDateUnadjusted, Tag 40065.
func (m NoStreams) GetStreamTerminationDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.StreamTerminationDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStreamTerminationDateBusinessDayConvention gets StreamTerminationDateBusinessDayConvention, Tag 40066.
func (m NoStreams) GetStreamTerminationDateBusinessDayConvention() (v int, err quickfix.MessageRejectError) {
	var f field.StreamTerminationDateBusinessDayConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoStreamTerminationDateBusinessCenters gets NoStreamTerminationDateBusinessCenters, Tag 40961.
func (m NoStreams) GetNoStreamTerminationDateBusinessCenters() (NoStreamTerminationDateBusinessCentersRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoStreamTerminationDateBusinessCentersRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetStreamTerminationDateRelativeTo gets StreamTerminationDateRelativeTo, Tag 40068.
func (m NoStreams) GetStreamTerminationDateRelativeTo() (v int, err quickfix.MessageRejectError) {
	var f field.StreamTerminationDateRelativeToField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStreamTerminationDateOffsetPeriod gets StreamTerminationDateOffsetPeriod, Tag 40069.
func (m NoStreams) GetStreamTerminationDateOffsetPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.StreamTerminationDateOffsetPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStreamTerminationDateOffsetUnit gets StreamTerminationDateOffsetUnit, Tag 40070.
func (m NoStreams) GetStreamTerminationDateOffsetUnit() (v string, err quickfix.MessageRejectError) {
	var f field.StreamTerminationDateOffsetUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStreamTerminationDateOffsetDayType gets StreamTerminationDateOffsetDayType, Tag 40071.
func (m NoStreams) GetStreamTerminationDateOffsetDayType() (v int, err quickfix.MessageRejectError) {
	var f field.StreamTerminationDateOffsetDayTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStreamTerminationDateAdjusted gets StreamTerminationDateAdjusted, Tag 40072.
func (m NoStreams) GetStreamTerminationDateAdjusted() (v string, err quickfix.MessageRejectError) {
	var f field.StreamTerminationDateAdjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStreamCalculationPeriodBusinessDayConvention gets StreamCalculationPeriodBusinessDayConvention, Tag 40073.
func (m NoStreams) GetStreamCalculationPeriodBusinessDayConvention() (v int, err quickfix.MessageRejectError) {
	var f field.StreamCalculationPeriodBusinessDayConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoStreamCalculationPeriodBusinessCenters gets NoStreamCalculationPeriodBusinessCenters, Tag 40958.
func (m NoStreams) GetNoStreamCalculationPeriodBusinessCenters() (NoStreamCalculationPeriodBusinessCentersRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoStreamCalculationPeriodBusinessCentersRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetStreamFirstPeriodStartDateUnadjusted gets StreamFirstPeriodStartDateUnadjusted, Tag 40075.
func (m NoStreams) GetStreamFirstPeriodStartDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.StreamFirstPeriodStartDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStreamFirstPeriodStartDateBusinessDayConvention gets StreamFirstPeriodStartDateBusinessDayConvention, Tag 40076.
func (m NoStreams) GetStreamFirstPeriodStartDateBusinessDayConvention() (v int, err quickfix.MessageRejectError) {
	var f field.StreamFirstPeriodStartDateBusinessDayConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoStreamFirstPeriodStartDateBusinessCenters gets NoStreamFirstPeriodStartDateBusinessCenters, Tag 40959.
func (m NoStreams) GetNoStreamFirstPeriodStartDateBusinessCenters() (NoStreamFirstPeriodStartDateBusinessCentersRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoStreamFirstPeriodStartDateBusinessCentersRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetStreamFirstPeriodStartDateAdjusted gets StreamFirstPeriodStartDateAdjusted, Tag 40078.
func (m NoStreams) GetStreamFirstPeriodStartDateAdjusted() (v string, err quickfix.MessageRejectError) {
	var f field.StreamFirstPeriodStartDateAdjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStreamFirstRegularPeriodStartDateUnadjusted gets StreamFirstRegularPeriodStartDateUnadjusted, Tag 40079.
func (m NoStreams) GetStreamFirstRegularPeriodStartDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.StreamFirstRegularPeriodStartDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStreamFirstCompoundingPeriodEndDateUnadjusted gets StreamFirstCompoundingPeriodEndDateUnadjusted, Tag 40080.
func (m NoStreams) GetStreamFirstCompoundingPeriodEndDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.StreamFirstCompoundingPeriodEndDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStreamLastRegularPeriodEndDateUnadjusted gets StreamLastRegularPeriodEndDateUnadjusted, Tag 40081.
func (m NoStreams) GetStreamLastRegularPeriodEndDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.StreamLastRegularPeriodEndDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStreamCalculationFrequencyPeriod gets StreamCalculationFrequencyPeriod, Tag 40082.
func (m NoStreams) GetStreamCalculationFrequencyPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.StreamCalculationFrequencyPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStreamCalculationFrequencyUnit gets StreamCalculationFrequencyUnit, Tag 40083.
func (m NoStreams) GetStreamCalculationFrequencyUnit() (v string, err quickfix.MessageRejectError) {
	var f field.StreamCalculationFrequencyUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStreamCalculationRollConvention gets StreamCalculationRollConvention, Tag 40084.
func (m NoStreams) GetStreamCalculationRollConvention() (v string, err quickfix.MessageRejectError) {
	var f field.StreamCalculationRollConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStreamCalculationPeriodDatesXID gets StreamCalculationPeriodDatesXID, Tag 41244.
func (m NoStreams) GetStreamCalculationPeriodDatesXID() (v string, err quickfix.MessageRejectError) {
	var f field.StreamCalculationPeriodDatesXIDField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStreamCalculationPeriodDatesXIDRef gets StreamCalculationPeriodDatesXIDRef, Tag 41245.
func (m NoStreams) GetStreamCalculationPeriodDatesXIDRef() (v string, err quickfix.MessageRejectError) {
	var f field.StreamCalculationPeriodDatesXIDRefField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoStreamCalculationPeriodDates gets NoStreamCalculationPeriodDates, Tag 41241.
func (m NoStreams) GetNoStreamCalculationPeriodDates() (NoStreamCalculationPeriodDatesRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoStreamCalculationPeriodDatesRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetStreamCalculationBalanceOfFirstPeriod gets StreamCalculationBalanceOfFirstPeriod, Tag 41246.
func (m NoStreams) GetStreamCalculationBalanceOfFirstPeriod() (v bool, err quickfix.MessageRejectError) {
	var f field.StreamCalculationBalanceOfFirstPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStreamCalculationCorrectionPeriod gets StreamCalculationCorrectionPeriod, Tag 41247.
func (m NoStreams) GetStreamCalculationCorrectionPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.StreamCalculationCorrectionPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStreamCalculationCorrectionUnit gets StreamCalculationCorrectionUnit, Tag 41248.
func (m NoStreams) GetStreamCalculationCorrectionUnit() (v string, err quickfix.MessageRejectError) {
	var f field.StreamCalculationCorrectionUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamType gets PaymentStreamType, Tag 40738.
func (m NoStreams) GetPaymentStreamType() (v enum.PaymentStreamType, err quickfix.MessageRejectError) {
	var f field.PaymentStreamTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamMarketRate gets PaymentStreamMarketRate, Tag 40739.
func (m NoStreams) GetPaymentStreamMarketRate() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStreamMarketRateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamDelayIndicator gets PaymentStreamDelayIndicator, Tag 40740.
func (m NoStreams) GetPaymentStreamDelayIndicator() (v bool, err quickfix.MessageRejectError) {
	var f field.PaymentStreamDelayIndicatorField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamSettlCurrency gets PaymentStreamSettlCurrency, Tag 40741.
func (m NoStreams) GetPaymentStreamSettlCurrency() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStreamSettlCurrencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamDayCount gets PaymentStreamDayCount, Tag 40742.
func (m NoStreams) GetPaymentStreamDayCount() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStreamDayCountField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamAccrualDays gets PaymentStreamAccrualDays, Tag 40743.
func (m NoStreams) GetPaymentStreamAccrualDays() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStreamAccrualDaysField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamDiscountType gets PaymentStreamDiscountType, Tag 40744.
func (m NoStreams) GetPaymentStreamDiscountType() (v enum.PaymentStreamDiscountType, err quickfix.MessageRejectError) {
	var f field.PaymentStreamDiscountTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamDiscountRate gets PaymentStreamDiscountRate, Tag 40745.
func (m NoStreams) GetPaymentStreamDiscountRate() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.PaymentStreamDiscountRateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamDiscountRateDayCount gets PaymentStreamDiscountRateDayCount, Tag 40746.
func (m NoStreams) GetPaymentStreamDiscountRateDayCount() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStreamDiscountRateDayCountField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamCompoundingMethod gets PaymentStreamCompoundingMethod, Tag 40747.
func (m NoStreams) GetPaymentStreamCompoundingMethod() (v enum.PaymentStreamCompoundingMethod, err quickfix.MessageRejectError) {
	var f field.PaymentStreamCompoundingMethodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamInitialPrincipalExchangeIndicator gets PaymentStreamInitialPrincipalExchangeIndicator, Tag 40748.
func (m NoStreams) GetPaymentStreamInitialPrincipalExchangeIndicator() (v bool, err quickfix.MessageRejectError) {
	var f field.PaymentStreamInitialPrincipalExchangeIndicatorField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamInterimPrincipalExchangeIndicator gets PaymentStreamInterimPrincipalExchangeIndicator, Tag 40749.
func (m NoStreams) GetPaymentStreamInterimPrincipalExchangeIndicator() (v bool, err quickfix.MessageRejectError) {
	var f field.PaymentStreamInterimPrincipalExchangeIndicatorField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamFinalPrincipalExchangeIndicator gets PaymentStreamFinalPrincipalExchangeIndicator, Tag 40750.
func (m NoStreams) GetPaymentStreamFinalPrincipalExchangeIndicator() (v bool, err quickfix.MessageRejectError) {
	var f field.PaymentStreamFinalPrincipalExchangeIndicatorField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamPaymentDateBusinessDayConvention gets PaymentStreamPaymentDateBusinessDayConvention, Tag 40751.
func (m NoStreams) GetPaymentStreamPaymentDateBusinessDayConvention() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStreamPaymentDateBusinessDayConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoPaymentStreamPaymentDateBusinessCenters gets NoPaymentStreamPaymentDateBusinessCenters, Tag 40947.
func (m NoStreams) GetNoPaymentStreamPaymentDateBusinessCenters() (NoPaymentStreamPaymentDateBusinessCentersRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoPaymentStreamPaymentDateBusinessCentersRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetPaymentStreamPaymentFrequencyPeriod gets PaymentStreamPaymentFrequencyPeriod, Tag 40753.
func (m NoStreams) GetPaymentStreamPaymentFrequencyPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStreamPaymentFrequencyPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamPaymentFrequencyUnit gets PaymentStreamPaymentFrequencyUnit, Tag 40754.
func (m NoStreams) GetPaymentStreamPaymentFrequencyUnit() (v enum.PaymentStreamPaymentFrequencyUnit, err quickfix.MessageRejectError) {
	var f field.PaymentStreamPaymentFrequencyUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamPaymentRollConvention gets PaymentStreamPaymentRollConvention, Tag 40755.
func (m NoStreams) GetPaymentStreamPaymentRollConvention() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStreamPaymentRollConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamFirstPaymentDateUnadjusted gets PaymentStreamFirstPaymentDateUnadjusted, Tag 40756.
func (m NoStreams) GetPaymentStreamFirstPaymentDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStreamFirstPaymentDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamLastRegularPaymentDateUnadjusted gets PaymentStreamLastRegularPaymentDateUnadjusted, Tag 40757.
func (m NoStreams) GetPaymentStreamLastRegularPaymentDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStreamLastRegularPaymentDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamPaymentDateRelativeTo gets PaymentStreamPaymentDateRelativeTo, Tag 40758.
func (m NoStreams) GetPaymentStreamPaymentDateRelativeTo() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStreamPaymentDateRelativeToField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamPaymentDateOffsetPeriod gets PaymentStreamPaymentDateOffsetPeriod, Tag 40759.
func (m NoStreams) GetPaymentStreamPaymentDateOffsetPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStreamPaymentDateOffsetPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamPaymentDateOffsetUnit gets PaymentStreamPaymentDateOffsetUnit, Tag 40760.
func (m NoStreams) GetPaymentStreamPaymentDateOffsetUnit() (v enum.PaymentStreamPaymentDateOffsetUnit, err quickfix.MessageRejectError) {
	var f field.PaymentStreamPaymentDateOffsetUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamPaymentDateOffsetDayType gets PaymentStreamPaymentDateOffsetDayType, Tag 40920.
func (m NoStreams) GetPaymentStreamPaymentDateOffsetDayType() (v enum.PaymentStreamPaymentDateOffsetDayType, err quickfix.MessageRejectError) {
	var f field.PaymentStreamPaymentDateOffsetDayTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoPaymentStreamPaymentDates gets NoPaymentStreamPaymentDates, Tag 41220.
func (m NoStreams) GetNoPaymentStreamPaymentDates() (NoPaymentStreamPaymentDatesRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoPaymentStreamPaymentDatesRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetPaymentStreamMasterAgreementPaymentDatesIndicator gets PaymentStreamMasterAgreementPaymentDatesIndicator, Tag 41223.
func (m NoStreams) GetPaymentStreamMasterAgreementPaymentDatesIndicator() (v bool, err quickfix.MessageRejectError) {
	var f field.PaymentStreamMasterAgreementPaymentDatesIndicatorField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamFinalPricePaymentDateUnadjusted gets PaymentStreamFinalPricePaymentDateUnadjusted, Tag 42654.
func (m NoStreams) GetPaymentStreamFinalPricePaymentDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStreamFinalPricePaymentDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamFinalPricePaymentDateRelativeTo gets PaymentStreamFinalPricePaymentDateRelativeTo, Tag 42655.
func (m NoStreams) GetPaymentStreamFinalPricePaymentDateRelativeTo() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStreamFinalPricePaymentDateRelativeToField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamFinalPricePaymentDateOffsetfPeriod gets PaymentStreamFinalPricePaymentDateOffsetfPeriod, Tag 42656.
func (m NoStreams) GetPaymentStreamFinalPricePaymentDateOffsetfPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStreamFinalPricePaymentDateOffsetfPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamFinalPricePaymentDateOffsetUnit gets PaymentStreamFinalPricePaymentDateOffsetUnit, Tag 42657.
func (m NoStreams) GetPaymentStreamFinalPricePaymentDateOffsetUnit() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStreamFinalPricePaymentDateOffsetUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamFinalPricePaymentDateOffsetDayType gets PaymentStreamFinalPricePaymentDateOffsetDayType, Tag 42658.
func (m NoStreams) GetPaymentStreamFinalPricePaymentDateOffsetDayType() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStreamFinalPricePaymentDateOffsetDayTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamFinalPricePaymentDateAdjusted gets PaymentStreamFinalPricePaymentDateAdjusted, Tag 42659.
func (m NoStreams) GetPaymentStreamFinalPricePaymentDateAdjusted() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStreamFinalPricePaymentDateAdjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamResetDateRelativeTo gets PaymentStreamResetDateRelativeTo, Tag 40761.
func (m NoStreams) GetPaymentStreamResetDateRelativeTo() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStreamResetDateRelativeToField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamResetDateBusinessDayConvention gets PaymentStreamResetDateBusinessDayConvention, Tag 40762.
func (m NoStreams) GetPaymentStreamResetDateBusinessDayConvention() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStreamResetDateBusinessDayConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoPaymentStreamResetDateBusinessCenters gets NoPaymentStreamResetDateBusinessCenters, Tag 40948.
func (m NoStreams) GetNoPaymentStreamResetDateBusinessCenters() (NoPaymentStreamResetDateBusinessCentersRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoPaymentStreamResetDateBusinessCentersRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetPaymentStreamResetFrequencyPeriod gets PaymentStreamResetFrequencyPeriod, Tag 40764.
func (m NoStreams) GetPaymentStreamResetFrequencyPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStreamResetFrequencyPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamResetFrequencyUnit gets PaymentStreamResetFrequencyUnit, Tag 40765.
func (m NoStreams) GetPaymentStreamResetFrequencyUnit() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStreamResetFrequencyUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamResetWeeklyRollConvention gets PaymentStreamResetWeeklyRollConvention, Tag 40766.
func (m NoStreams) GetPaymentStreamResetWeeklyRollConvention() (v enum.PaymentStreamResetWeeklyRollConvention, err quickfix.MessageRejectError) {
	var f field.PaymentStreamResetWeeklyRollConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamInitialFixingDateRelativeTo gets PaymentStreamInitialFixingDateRelativeTo, Tag 40767.
func (m NoStreams) GetPaymentStreamInitialFixingDateRelativeTo() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStreamInitialFixingDateRelativeToField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamInitialFixingDateBusinessDayConvention gets PaymentStreamInitialFixingDateBusinessDayConvention, Tag 40768.
func (m NoStreams) GetPaymentStreamInitialFixingDateBusinessDayConvention() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStreamInitialFixingDateBusinessDayConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoPaymentStreamInitialFixingDateBusinessCenters gets NoPaymentStreamInitialFixingDateBusinessCenters, Tag 40949.
func (m NoStreams) GetNoPaymentStreamInitialFixingDateBusinessCenters() (NoPaymentStreamInitialFixingDateBusinessCentersRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoPaymentStreamInitialFixingDateBusinessCentersRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetPaymentStreamInitialFixingDateOffsetPeriod gets PaymentStreamInitialFixingDateOffsetPeriod, Tag 40770.
func (m NoStreams) GetPaymentStreamInitialFixingDateOffsetPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStreamInitialFixingDateOffsetPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamInitialFixingDateOffsetUnit gets PaymentStreamInitialFixingDateOffsetUnit, Tag 40771.
func (m NoStreams) GetPaymentStreamInitialFixingDateOffsetUnit() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStreamInitialFixingDateOffsetUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamInitialFixingDateOffsetDayType gets PaymentStreamInitialFixingDateOffsetDayType, Tag 40772.
func (m NoStreams) GetPaymentStreamInitialFixingDateOffsetDayType() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStreamInitialFixingDateOffsetDayTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamInitialFixingDateAdjusted gets PaymentStreamInitialFixingDateAdjusted, Tag 40773.
func (m NoStreams) GetPaymentStreamInitialFixingDateAdjusted() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStreamInitialFixingDateAdjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamFixingDateRelativeTo gets PaymentStreamFixingDateRelativeTo, Tag 40774.
func (m NoStreams) GetPaymentStreamFixingDateRelativeTo() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStreamFixingDateRelativeToField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamFixingDateBusinessDayConvention gets PaymentStreamFixingDateBusinessDayConvention, Tag 40775.
func (m NoStreams) GetPaymentStreamFixingDateBusinessDayConvention() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStreamFixingDateBusinessDayConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoPaymentStreamFixingDateBusinessCenters gets NoPaymentStreamFixingDateBusinessCenters, Tag 40950.
func (m NoStreams) GetNoPaymentStreamFixingDateBusinessCenters() (NoPaymentStreamFixingDateBusinessCentersRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoPaymentStreamFixingDateBusinessCentersRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetPaymentStreamFixingDateOffsetPeriod gets PaymentStreamFixingDateOffsetPeriod, Tag 40777.
func (m NoStreams) GetPaymentStreamFixingDateOffsetPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStreamFixingDateOffsetPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamFixingDateOffsetUnit gets PaymentStreamFixingDateOffsetUnit, Tag 40778.
func (m NoStreams) GetPaymentStreamFixingDateOffsetUnit() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStreamFixingDateOffsetUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamFixingDateOffsetDayType gets PaymentStreamFixingDateOffsetDayType, Tag 40779.
func (m NoStreams) GetPaymentStreamFixingDateOffsetDayType() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStreamFixingDateOffsetDayTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamFixingDateAdjusted gets PaymentStreamFixingDateAdjusted, Tag 40780.
func (m NoStreams) GetPaymentStreamFixingDateAdjusted() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStreamFixingDateAdjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamRateCutoffDateOffsetPeriod gets PaymentStreamRateCutoffDateOffsetPeriod, Tag 40781.
func (m NoStreams) GetPaymentStreamRateCutoffDateOffsetPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStreamRateCutoffDateOffsetPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamRateCutoffDateOffsetUnit gets PaymentStreamRateCutoffDateOffsetUnit, Tag 40782.
func (m NoStreams) GetPaymentStreamRateCutoffDateOffsetUnit() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStreamRateCutoffDateOffsetUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamRateCutoffDateOffsetDayType gets PaymentStreamRateCutoffDateOffsetDayType, Tag 40783.
func (m NoStreams) GetPaymentStreamRateCutoffDateOffsetDayType() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStreamRateCutoffDateOffsetDayTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoPaymentStreamFixingDates gets NoPaymentStreamFixingDates, Tag 42660.
func (m NoStreams) GetNoPaymentStreamFixingDates() (NoPaymentStreamFixingDatesRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoPaymentStreamFixingDatesRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetPaymentStreamRate gets PaymentStreamRate, Tag 40784.
func (m NoStreams) GetPaymentStreamRate() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.PaymentStreamRateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamFixedAmount gets PaymentStreamFixedAmount, Tag 40785.
func (m NoStreams) GetPaymentStreamFixedAmount() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.PaymentStreamFixedAmountField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamRateOrAmountCurrency gets PaymentStreamRateOrAmountCurrency, Tag 40786.
func (m NoStreams) GetPaymentStreamRateOrAmountCurrency() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStreamRateOrAmountCurrencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamFutureValueNotional gets PaymentStreamFutureValueNotional, Tag 40787.
func (m NoStreams) GetPaymentStreamFutureValueNotional() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.PaymentStreamFutureValueNotionalField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamFutureValueDateAdjusted gets PaymentStreamFutureValueDateAdjusted, Tag 40788.
func (m NoStreams) GetPaymentStreamFutureValueDateAdjusted() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStreamFutureValueDateAdjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamFixedAmountUnitOfMeasure gets PaymentStreamFixedAmountUnitOfMeasure, Tag 41187.
func (m NoStreams) GetPaymentStreamFixedAmountUnitOfMeasure() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStreamFixedAmountUnitOfMeasureField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamTotalFixedAmount gets PaymentStreamTotalFixedAmount, Tag 41188.
func (m NoStreams) GetPaymentStreamTotalFixedAmount() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.PaymentStreamTotalFixedAmountField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamWorldScaleRate gets PaymentStreamWorldScaleRate, Tag 41189.
func (m NoStreams) GetPaymentStreamWorldScaleRate() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.PaymentStreamWorldScaleRateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamContractPrice gets PaymentStreamContractPrice, Tag 41190.
func (m NoStreams) GetPaymentStreamContractPrice() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.PaymentStreamContractPriceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamContractPriceCurrency gets PaymentStreamContractPriceCurrency, Tag 41191.
func (m NoStreams) GetPaymentStreamContractPriceCurrency() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStreamContractPriceCurrencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamRateIndex gets PaymentStreamRateIndex, Tag 40789.
func (m NoStreams) GetPaymentStreamRateIndex() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStreamRateIndexField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamRateIndexSource gets PaymentStreamRateIndexSource, Tag 40790.
func (m NoStreams) GetPaymentStreamRateIndexSource() (v enum.PaymentStreamRateIndexSource, err quickfix.MessageRejectError) {
	var f field.PaymentStreamRateIndexSourceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamRateIndexCurveUnit gets PaymentStreamRateIndexCurveUnit, Tag 40791.
func (m NoStreams) GetPaymentStreamRateIndexCurveUnit() (v enum.PaymentStreamRateIndexCurveUnit, err quickfix.MessageRejectError) {
	var f field.PaymentStreamRateIndexCurveUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamRateIndexCurvePeriod gets PaymentStreamRateIndexCurvePeriod, Tag 40792.
func (m NoStreams) GetPaymentStreamRateIndexCurvePeriod() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStreamRateIndexCurvePeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamRateMultiplier gets PaymentStreamRateMultiplier, Tag 40793.
func (m NoStreams) GetPaymentStreamRateMultiplier() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.PaymentStreamRateMultiplierField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamRateSpread gets PaymentStreamRateSpread, Tag 40794.
func (m NoStreams) GetPaymentStreamRateSpread() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.PaymentStreamRateSpreadField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamRateSpreadPositionType gets PaymentStreamRateSpreadPositionType, Tag 40795.
func (m NoStreams) GetPaymentStreamRateSpreadPositionType() (v enum.PaymentStreamRateSpreadPositionType, err quickfix.MessageRejectError) {
	var f field.PaymentStreamRateSpreadPositionTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamRateTreatment gets PaymentStreamRateTreatment, Tag 40796.
func (m NoStreams) GetPaymentStreamRateTreatment() (v enum.PaymentStreamRateTreatment, err quickfix.MessageRejectError) {
	var f field.PaymentStreamRateTreatmentField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamCapRate gets PaymentStreamCapRate, Tag 40797.
func (m NoStreams) GetPaymentStreamCapRate() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.PaymentStreamCapRateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamCapRateBuySide gets PaymentStreamCapRateBuySide, Tag 40798.
func (m NoStreams) GetPaymentStreamCapRateBuySide() (v enum.PaymentStreamCapRateBuySide, err quickfix.MessageRejectError) {
	var f field.PaymentStreamCapRateBuySideField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamCapRateSellSide gets PaymentStreamCapRateSellSide, Tag 40799.
func (m NoStreams) GetPaymentStreamCapRateSellSide() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStreamCapRateSellSideField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamFloorRate gets PaymentStreamFloorRate, Tag 40800.
func (m NoStreams) GetPaymentStreamFloorRate() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.PaymentStreamFloorRateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamFloorRateBuySide gets PaymentStreamFloorRateBuySide, Tag 40801.
func (m NoStreams) GetPaymentStreamFloorRateBuySide() (v enum.PaymentStreamFloorRateBuySide, err quickfix.MessageRejectError) {
	var f field.PaymentStreamFloorRateBuySideField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamFloorRateSellSide gets PaymentStreamFloorRateSellSide, Tag 40802.
func (m NoStreams) GetPaymentStreamFloorRateSellSide() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStreamFloorRateSellSideField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamInitialRate gets PaymentStreamInitialRate, Tag 40803.
func (m NoStreams) GetPaymentStreamInitialRate() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.PaymentStreamInitialRateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamFinalRateRoundingDirection gets PaymentStreamFinalRateRoundingDirection, Tag 40804.
func (m NoStreams) GetPaymentStreamFinalRateRoundingDirection() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStreamFinalRateRoundingDirectionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamFinalRatePrecision gets PaymentStreamFinalRatePrecision, Tag 40805.
func (m NoStreams) GetPaymentStreamFinalRatePrecision() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStreamFinalRatePrecisionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamAveragingMethod gets PaymentStreamAveragingMethod, Tag 40806.
func (m NoStreams) GetPaymentStreamAveragingMethod() (v enum.PaymentStreamAveragingMethod, err quickfix.MessageRejectError) {
	var f field.PaymentStreamAveragingMethodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamNegativeRateTreatment gets PaymentStreamNegativeRateTreatment, Tag 40807.
func (m NoStreams) GetPaymentStreamNegativeRateTreatment() (v enum.PaymentStreamNegativeRateTreatment, err quickfix.MessageRejectError) {
	var f field.PaymentStreamNegativeRateTreatmentField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamInflationLagPeriod gets PaymentStreamInflationLagPeriod, Tag 40808.
func (m NoStreams) GetPaymentStreamInflationLagPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStreamInflationLagPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamInflationLagUnit gets PaymentStreamInflationLagUnit, Tag 40809.
func (m NoStreams) GetPaymentStreamInflationLagUnit() (v enum.PaymentStreamInflationLagUnit, err quickfix.MessageRejectError) {
	var f field.PaymentStreamInflationLagUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamInflationLagDayType gets PaymentStreamInflationLagDayType, Tag 40810.
func (m NoStreams) GetPaymentStreamInflationLagDayType() (v enum.PaymentStreamInflationLagDayType, err quickfix.MessageRejectError) {
	var f field.PaymentStreamInflationLagDayTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamInflationInterpolationMethod gets PaymentStreamInflationInterpolationMethod, Tag 40811.
func (m NoStreams) GetPaymentStreamInflationInterpolationMethod() (v enum.PaymentStreamInflationInterpolationMethod, err quickfix.MessageRejectError) {
	var f field.PaymentStreamInflationInterpolationMethodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamInflationIndexSource gets PaymentStreamInflationIndexSource, Tag 40812.
func (m NoStreams) GetPaymentStreamInflationIndexSource() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStreamInflationIndexSourceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamInflationPublicationSource gets PaymentStreamInflationPublicationSource, Tag 40813.
func (m NoStreams) GetPaymentStreamInflationPublicationSource() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStreamInflationPublicationSourceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamInflationInitialIndexLevel gets PaymentStreamInflationInitialIndexLevel, Tag 40814.
func (m NoStreams) GetPaymentStreamInflationInitialIndexLevel() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.PaymentStreamInflationInitialIndexLevelField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamInflationFallbackBondApplicable gets PaymentStreamInflationFallbackBondApplicable, Tag 40815.
func (m NoStreams) GetPaymentStreamInflationFallbackBondApplicable() (v bool, err quickfix.MessageRejectError) {
	var f field.PaymentStreamInflationFallbackBondApplicableField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamFRADiscounting gets PaymentStreamFRADiscounting, Tag 40816.
func (m NoStreams) GetPaymentStreamFRADiscounting() (v enum.PaymentStreamFRADiscounting, err quickfix.MessageRejectError) {
	var f field.PaymentStreamFRADiscountingField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamRateIndex2CurvePeriod gets PaymentStreamRateIndex2CurvePeriod, Tag 41194.
func (m NoStreams) GetPaymentStreamRateIndex2CurvePeriod() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStreamRateIndex2CurvePeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamRateIndex2CurveUnit gets PaymentStreamRateIndex2CurveUnit, Tag 41195.
func (m NoStreams) GetPaymentStreamRateIndex2CurveUnit() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStreamRateIndex2CurveUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamRateIndexLocation gets PaymentStreamRateIndexLocation, Tag 41196.
func (m NoStreams) GetPaymentStreamRateIndexLocation() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStreamRateIndexLocationField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamRateIndexLevel gets PaymentStreamRateIndexLevel, Tag 41197.
func (m NoStreams) GetPaymentStreamRateIndexLevel() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.PaymentStreamRateIndexLevelField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamRateIndexUnitOfMeasure gets PaymentStreamRateIndexUnitOfMeasure, Tag 41198.
func (m NoStreams) GetPaymentStreamRateIndexUnitOfMeasure() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStreamRateIndexUnitOfMeasureField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamSettlLevel gets PaymentStreamSettlLevel, Tag 41199.
func (m NoStreams) GetPaymentStreamSettlLevel() (v enum.PaymentStreamSettlLevel, err quickfix.MessageRejectError) {
	var f field.PaymentStreamSettlLevelField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamReferenceLevel gets PaymentStreamReferenceLevel, Tag 41200.
func (m NoStreams) GetPaymentStreamReferenceLevel() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.PaymentStreamReferenceLevelField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamReferenceLevelUnitOfMeasure gets PaymentStreamReferenceLevelUnitOfMeasure, Tag 41201.
func (m NoStreams) GetPaymentStreamReferenceLevelUnitOfMeasure() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStreamReferenceLevelUnitOfMeasureField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamReferenceLevelEqualsZeroIndicator gets PaymentStreamReferenceLevelEqualsZeroIndicator, Tag 41202.
func (m NoStreams) GetPaymentStreamReferenceLevelEqualsZeroIndicator() (v bool, err quickfix.MessageRejectError) {
	var f field.PaymentStreamReferenceLevelEqualsZeroIndicatorField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamRateSpreadCurrency gets PaymentStreamRateSpreadCurrency, Tag 41203.
func (m NoStreams) GetPaymentStreamRateSpreadCurrency() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStreamRateSpreadCurrencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamRateSpreadUnitOfMeasure gets PaymentStreamRateSpreadUnitOfMeasure, Tag 41204.
func (m NoStreams) GetPaymentStreamRateSpreadUnitOfMeasure() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStreamRateSpreadUnitOfMeasureField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamRateConversionFactor gets PaymentStreamRateConversionFactor, Tag 41205.
func (m NoStreams) GetPaymentStreamRateConversionFactor() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.PaymentStreamRateConversionFactorField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamRateSpreadType gets PaymentStreamRateSpreadType, Tag 41206.
func (m NoStreams) GetPaymentStreamRateSpreadType() (v enum.PaymentStreamRateSpreadType, err quickfix.MessageRejectError) {
	var f field.PaymentStreamRateSpreadTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamLastResetRate gets PaymentStreamLastResetRate, Tag 41207.
func (m NoStreams) GetPaymentStreamLastResetRate() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.PaymentStreamLastResetRateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamFinalRate gets PaymentStreamFinalRate, Tag 41208.
func (m NoStreams) GetPaymentStreamFinalRate() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.PaymentStreamFinalRateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamCalculationLagPeriod gets PaymentStreamCalculationLagPeriod, Tag 41209.
func (m NoStreams) GetPaymentStreamCalculationLagPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStreamCalculationLagPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamCalculationLagUnit gets PaymentStreamCalculationLagUnit, Tag 41210.
func (m NoStreams) GetPaymentStreamCalculationLagUnit() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStreamCalculationLagUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamFirstObservationDateOffsetPeriod gets PaymentStreamFirstObservationDateOffsetPeriod, Tag 41211.
func (m NoStreams) GetPaymentStreamFirstObservationDateOffsetPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStreamFirstObservationDateOffsetPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamFirstObservationDateOffsetUnit gets PaymentStreamFirstObservationDateOffsetUnit, Tag 41212.
func (m NoStreams) GetPaymentStreamFirstObservationDateOffsetUnit() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStreamFirstObservationDateOffsetUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamPricingDayType gets PaymentStreamPricingDayType, Tag 41213.
func (m NoStreams) GetPaymentStreamPricingDayType() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStreamPricingDayTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamPricingDayDistribution gets PaymentStreamPricingDayDistribution, Tag 41214.
func (m NoStreams) GetPaymentStreamPricingDayDistribution() (v enum.PaymentStreamPricingDayDistribution, err quickfix.MessageRejectError) {
	var f field.PaymentStreamPricingDayDistributionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamPricingDayCount gets PaymentStreamPricingDayCount, Tag 41215.
func (m NoStreams) GetPaymentStreamPricingDayCount() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStreamPricingDayCountField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamPricingBusinessCalendar gets PaymentStreamPricingBusinessCalendar, Tag 41216.
func (m NoStreams) GetPaymentStreamPricingBusinessCalendar() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStreamPricingBusinessCalendarField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamPricingBusinessDayConvention gets PaymentStreamPricingBusinessDayConvention, Tag 41217.
func (m NoStreams) GetPaymentStreamPricingBusinessDayConvention() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStreamPricingBusinessDayConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoPaymentStreamPricingBusinessCenters gets NoPaymentStreamPricingBusinessCenters, Tag 41192.
func (m NoStreams) GetNoPaymentStreamPricingBusinessCenters() (NoPaymentStreamPricingBusinessCentersRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoPaymentStreamPricingBusinessCentersRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetNoPaymentStreamPricingDays gets NoPaymentStreamPricingDays, Tag 41227.
func (m NoStreams) GetNoPaymentStreamPricingDays() (NoPaymentStreamPricingDaysRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoPaymentStreamPricingDaysRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetNoPaymentStreamPricingDates gets NoPaymentStreamPricingDates, Tag 41224.
func (m NoStreams) GetNoPaymentStreamPricingDates() (NoPaymentStreamPricingDatesRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoPaymentStreamPricingDatesRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetPaymentStreamFirstObservationDateUnadjusted gets PaymentStreamFirstObservationDateUnadjusted, Tag 42663.
func (m NoStreams) GetPaymentStreamFirstObservationDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStreamFirstObservationDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamFirstObservationDateRelativeTo gets PaymentStreamFirstObservationDateRelativeTo, Tag 42664.
func (m NoStreams) GetPaymentStreamFirstObservationDateRelativeTo() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStreamFirstObservationDateRelativeToField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamFirstObservationDateOffsetDayType gets PaymentStreamFirstObservationDateOffsetDayType, Tag 42665.
func (m NoStreams) GetPaymentStreamFirstObservationDateOffsetDayType() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStreamFirstObservationDateOffsetDayTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamFirstObservationDateAdjusted gets PaymentStreamFirstObservationDateAdjusted, Tag 42666.
func (m NoStreams) GetPaymentStreamFirstObservationDateAdjusted() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStreamFirstObservationDateAdjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamUnderlierRefID gets PaymentStreamUnderlierRefID, Tag 42667.
func (m NoStreams) GetPaymentStreamUnderlierRefID() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStreamUnderlierRefIDField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamFormulaCurrency gets PaymentStreamFormulaCurrency, Tag 42686.
func (m NoStreams) GetPaymentStreamFormulaCurrency() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStreamFormulaCurrencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamFormulaCurrencyDeterminationMethod gets PaymentStreamFormulaCurrencyDeterminationMethod, Tag 42687.
func (m NoStreams) GetPaymentStreamFormulaCurrencyDeterminationMethod() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStreamFormulaCurrencyDeterminationMethodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamFormulaReferenceAmount gets PaymentStreamFormulaReferenceAmount, Tag 42688.
func (m NoStreams) GetPaymentStreamFormulaReferenceAmount() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStreamFormulaReferenceAmountField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoPaymentStreamFormulas gets NoPaymentStreamFormulas, Tag 42683.
func (m NoStreams) GetNoPaymentStreamFormulas() (NoPaymentStreamFormulasRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoPaymentStreamFormulasRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetPaymentStreamFormulaImageLength gets PaymentStreamFormulaImageLength, Tag 42652.
func (m NoStreams) GetPaymentStreamFormulaImageLength() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStreamFormulaImageLengthField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamFormulaImage gets PaymentStreamFormulaImage, Tag 42653.
func (m NoStreams) GetPaymentStreamFormulaImage() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStreamFormulaImageField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDividendReinvestmentIndicator gets DividendReinvestmentIndicator, Tag 42245.
func (m NoStreams) GetDividendReinvestmentIndicator() (v bool, err quickfix.MessageRejectError) {
	var f field.DividendReinvestmentIndicatorField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDividendEntitlementEvent gets DividendEntitlementEvent, Tag 42246.
func (m NoStreams) GetDividendEntitlementEvent() (v enum.DividendEntitlementEvent, err quickfix.MessageRejectError) {
	var f field.DividendEntitlementEventField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDividendAmountType gets DividendAmountType, Tag 42247.
func (m NoStreams) GetDividendAmountType() (v enum.DividendAmountType, err quickfix.MessageRejectError) {
	var f field.DividendAmountTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDividendUnderlierRefID gets DividendUnderlierRefID, Tag 42248.
func (m NoStreams) GetDividendUnderlierRefID() (v string, err quickfix.MessageRejectError) {
	var f field.DividendUnderlierRefIDField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoDividendPeriods gets NoDividendPeriods, Tag 42274.
func (m NoStreams) GetNoDividendPeriods() (NoDividendPeriodsRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoDividendPeriodsRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetExtraordinaryDividendPartySide gets ExtraordinaryDividendPartySide, Tag 42249.
func (m NoStreams) GetExtraordinaryDividendPartySide() (v int, err quickfix.MessageRejectError) {
	var f field.ExtraordinaryDividendPartySideField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetExtraordinaryDividendAmountType gets ExtraordinaryDividendAmountType, Tag 42250.
func (m NoStreams) GetExtraordinaryDividendAmountType() (v int, err quickfix.MessageRejectError) {
	var f field.ExtraordinaryDividendAmountTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetExtraordinaryDividendCurrency gets ExtraordinaryDividendCurrency, Tag 42251.
func (m NoStreams) GetExtraordinaryDividendCurrency() (v string, err quickfix.MessageRejectError) {
	var f field.ExtraordinaryDividendCurrencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetExtraordinaryDividendDeterminationMethod gets ExtraordinaryDividendDeterminationMethod, Tag 42252.
func (m NoStreams) GetExtraordinaryDividendDeterminationMethod() (v string, err quickfix.MessageRejectError) {
	var f field.ExtraordinaryDividendDeterminationMethodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDividendFXTriggerDateRelativeTo gets DividendFXTriggerDateRelativeTo, Tag 42265.
func (m NoStreams) GetDividendFXTriggerDateRelativeTo() (v int, err quickfix.MessageRejectError) {
	var f field.DividendFXTriggerDateRelativeToField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDividendFXTriggerDateOffsetPeriod gets DividendFXTriggerDateOffsetPeriod, Tag 42266.
func (m NoStreams) GetDividendFXTriggerDateOffsetPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.DividendFXTriggerDateOffsetPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDividendFXTriggerDateOffsetUnit gets DividendFXTriggerDateOffsetUnit, Tag 42267.
func (m NoStreams) GetDividendFXTriggerDateOffsetUnit() (v string, err quickfix.MessageRejectError) {
	var f field.DividendFXTriggerDateOffsetUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDividendFXTriggerDateOffsetDayType gets DividendFXTriggerDateOffsetDayType, Tag 42268.
func (m NoStreams) GetDividendFXTriggerDateOffsetDayType() (v int, err quickfix.MessageRejectError) {
	var f field.DividendFXTriggerDateOffsetDayTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDividendFXTriggerDateUnadjusted gets DividendFXTriggerDateUnadjusted, Tag 42269.
func (m NoStreams) GetDividendFXTriggerDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.DividendFXTriggerDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDividendFXTriggerDateBusinessDayConvention gets DividendFXTriggerDateBusinessDayConvention, Tag 42270.
func (m NoStreams) GetDividendFXTriggerDateBusinessDayConvention() (v int, err quickfix.MessageRejectError) {
	var f field.DividendFXTriggerDateBusinessDayConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoDividendFXTriggerDateBusinessCenters gets NoDividendFXTriggerDateBusinessCenters, Tag 42272.
func (m NoStreams) GetNoDividendFXTriggerDateBusinessCenters() (NoDividendFXTriggerDateBusinessCentersRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoDividendFXTriggerDateBusinessCentersRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetDividendFXTriggerDateAdjusted gets DividendFXTriggerDateAdjusted, Tag 42271.
func (m NoStreams) GetDividendFXTriggerDateAdjusted() (v string, err quickfix.MessageRejectError) {
	var f field.DividendFXTriggerDateAdjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDividendFloatingRateIndex gets DividendFloatingRateIndex, Tag 42218.
func (m NoStreams) GetDividendFloatingRateIndex() (v string, err quickfix.MessageRejectError) {
	var f field.DividendFloatingRateIndexField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDividendFloatingRateIndexCurvePeriod gets DividendFloatingRateIndexCurvePeriod, Tag 42219.
func (m NoStreams) GetDividendFloatingRateIndexCurvePeriod() (v int, err quickfix.MessageRejectError) {
	var f field.DividendFloatingRateIndexCurvePeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDividendFloatingRateIndexCurveUnit gets DividendFloatingRateIndexCurveUnit, Tag 42220.
func (m NoStreams) GetDividendFloatingRateIndexCurveUnit() (v string, err quickfix.MessageRejectError) {
	var f field.DividendFloatingRateIndexCurveUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDividendFloatingRateMultiplier gets DividendFloatingRateMultiplier, Tag 42221.
func (m NoStreams) GetDividendFloatingRateMultiplier() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.DividendFloatingRateMultiplierField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDividendFloatingRateSpread gets DividendFloatingRateSpread, Tag 42222.
func (m NoStreams) GetDividendFloatingRateSpread() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.DividendFloatingRateSpreadField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDividendFloatingRateSpreadPositionType gets DividendFloatingRateSpreadPositionType, Tag 42223.
func (m NoStreams) GetDividendFloatingRateSpreadPositionType() (v int, err quickfix.MessageRejectError) {
	var f field.DividendFloatingRateSpreadPositionTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDividendFloatingRateTreatment gets DividendFloatingRateTreatment, Tag 42224.
func (m NoStreams) GetDividendFloatingRateTreatment() (v int, err quickfix.MessageRejectError) {
	var f field.DividendFloatingRateTreatmentField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDividendCapRate gets DividendCapRate, Tag 42225.
func (m NoStreams) GetDividendCapRate() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.DividendCapRateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDividendCapRateBuySide gets DividendCapRateBuySide, Tag 42226.
func (m NoStreams) GetDividendCapRateBuySide() (v int, err quickfix.MessageRejectError) {
	var f field.DividendCapRateBuySideField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDividendCapRateSellSide gets DividendCapRateSellSide, Tag 42227.
func (m NoStreams) GetDividendCapRateSellSide() (v int, err quickfix.MessageRejectError) {
	var f field.DividendCapRateSellSideField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDividendFloorRate gets DividendFloorRate, Tag 42228.
func (m NoStreams) GetDividendFloorRate() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.DividendFloorRateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDividendFloorRateBuySide gets DividendFloorRateBuySide, Tag 42229.
func (m NoStreams) GetDividendFloorRateBuySide() (v int, err quickfix.MessageRejectError) {
	var f field.DividendFloorRateBuySideField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDividendFloorRateSellSide gets DividendFloorRateSellSide, Tag 42230.
func (m NoStreams) GetDividendFloorRateSellSide() (v int, err quickfix.MessageRejectError) {
	var f field.DividendFloorRateSellSideField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDividendInitialRate gets DividendInitialRate, Tag 42231.
func (m NoStreams) GetDividendInitialRate() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.DividendInitialRateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDividendFinalRateRoundingDirection gets DividendFinalRateRoundingDirection, Tag 42232.
func (m NoStreams) GetDividendFinalRateRoundingDirection() (v string, err quickfix.MessageRejectError) {
	var f field.DividendFinalRateRoundingDirectionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDividendFinalRatePrecision gets DividendFinalRatePrecision, Tag 42233.
func (m NoStreams) GetDividendFinalRatePrecision() (v int, err quickfix.MessageRejectError) {
	var f field.DividendFinalRatePrecisionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDividendAveragingMethod gets DividendAveragingMethod, Tag 42234.
func (m NoStreams) GetDividendAveragingMethod() (v int, err quickfix.MessageRejectError) {
	var f field.DividendAveragingMethodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDividendNegativeRateTreatment gets DividendNegativeRateTreatment, Tag 42235.
func (m NoStreams) GetDividendNegativeRateTreatment() (v int, err quickfix.MessageRejectError) {
	var f field.DividendNegativeRateTreatmentField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDividendAccrualFixedRate gets DividendAccrualFixedRate, Tag 42253.
func (m NoStreams) GetDividendAccrualFixedRate() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.DividendAccrualFixedRateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDividendAccrualPaymentDateRelativeTo gets DividendAccrualPaymentDateRelativeTo, Tag 42238.
func (m NoStreams) GetDividendAccrualPaymentDateRelativeTo() (v int, err quickfix.MessageRejectError) {
	var f field.DividendAccrualPaymentDateRelativeToField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDividendAccrualPaymentDateOffsetPeriod gets DividendAccrualPaymentDateOffsetPeriod, Tag 42239.
func (m NoStreams) GetDividendAccrualPaymentDateOffsetPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.DividendAccrualPaymentDateOffsetPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDividendAccrualPaymentDateOffsetUnit gets DividendAccrualPaymentDateOffsetUnit, Tag 42240.
func (m NoStreams) GetDividendAccrualPaymentDateOffsetUnit() (v string, err quickfix.MessageRejectError) {
	var f field.DividendAccrualPaymentDateOffsetUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDividendAccrualPaymentDateOffsetDayType gets DividendAccrualPaymentDateOffsetDayType, Tag 42241.
func (m NoStreams) GetDividendAccrualPaymentDateOffsetDayType() (v int, err quickfix.MessageRejectError) {
	var f field.DividendAccrualPaymentDateOffsetDayTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDividendAccrualPaymentDateUnadjusted gets DividendAccrualPaymentDateUnadjusted, Tag 42242.
func (m NoStreams) GetDividendAccrualPaymentDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.DividendAccrualPaymentDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDividendAccrualPaymeentDateBusinessDayConvention gets DividendAccrualPaymeentDateBusinessDayConvention, Tag 42243.
func (m NoStreams) GetDividendAccrualPaymeentDateBusinessDayConvention() (v int, err quickfix.MessageRejectError) {
	var f field.DividendAccrualPaymeentDateBusinessDayConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoDividendAccrualPaymentDateBusinessCenters gets NoDividendAccrualPaymentDateBusinessCenters, Tag 42236.
func (m NoStreams) GetNoDividendAccrualPaymentDateBusinessCenters() (NoDividendAccrualPaymentDateBusinessCentersRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoDividendAccrualPaymentDateBusinessCentersRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetDividendAccrualPaymentDateAdjusted gets DividendAccrualPaymentDateAdjusted, Tag 42244.
func (m NoStreams) GetDividendAccrualPaymentDateAdjusted() (v string, err quickfix.MessageRejectError) {
	var f field.DividendAccrualPaymentDateAdjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDividendCompoundingMethod gets DividendCompoundingMethod, Tag 42254.
func (m NoStreams) GetDividendCompoundingMethod() (v int, err quickfix.MessageRejectError) {
	var f field.DividendCompoundingMethodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDividendNumOfIndexUnits gets DividendNumOfIndexUnits, Tag 42255.
func (m NoStreams) GetDividendNumOfIndexUnits() (v int, err quickfix.MessageRejectError) {
	var f field.DividendNumOfIndexUnitsField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDividendCashPercentage gets DividendCashPercentage, Tag 42256.
func (m NoStreams) GetDividendCashPercentage() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.DividendCashPercentageField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDividendCashEquivalentPercentage gets DividendCashEquivalentPercentage, Tag 42257.
func (m NoStreams) GetDividendCashEquivalentPercentage() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.DividendCashEquivalentPercentageField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNonCashDividendTreatment gets NonCashDividendTreatment, Tag 42258.
func (m NoStreams) GetNonCashDividendTreatment() (v enum.NonCashDividendTreatment, err quickfix.MessageRejectError) {
	var f field.NonCashDividendTreatmentField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDividendComposition gets DividendComposition, Tag 42259.
func (m NoStreams) GetDividendComposition() (v enum.DividendComposition, err quickfix.MessageRejectError) {
	var f field.DividendCompositionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetSpecialDividendsIndicator gets SpecialDividendsIndicator, Tag 42260.
func (m NoStreams) GetSpecialDividendsIndicator() (v bool, err quickfix.MessageRejectError) {
	var f field.SpecialDividendsIndicatorField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetMaterialDividendsIndicator gets MaterialDividendsIndicator, Tag 42261.
func (m NoStreams) GetMaterialDividendsIndicator() (v bool, err quickfix.MessageRejectError) {
	var f field.MaterialDividendsIndicatorField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetOptionsExchangeDividendsIndicator gets OptionsExchangeDividendsIndicator, Tag 42262.
func (m NoStreams) GetOptionsExchangeDividendsIndicator() (v bool, err quickfix.MessageRejectError) {
	var f field.OptionsExchangeDividendsIndicatorField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetAdditionalDividendsIndicator gets AdditionalDividendsIndicator, Tag 42263.
func (m NoStreams) GetAdditionalDividendsIndicator() (v bool, err quickfix.MessageRejectError) {
	var f field.AdditionalDividendsIndicatorField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetAllDividendsIndicator gets AllDividendsIndicator, Tag 42264.
func (m NoStreams) GetAllDividendsIndicator() (v bool, err quickfix.MessageRejectError) {
	var f field.AllDividendsIndicatorField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetReturnRateNotionalReset gets ReturnRateNotionalReset, Tag 42668.
func (m NoStreams) GetReturnRateNotionalReset() (v bool, err quickfix.MessageRejectError) {
	var f field.ReturnRateNotionalResetField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoReturnRates gets NoReturnRates, Tag 42735.
func (m NoStreams) GetNoReturnRates() (NoReturnRatesRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoReturnRatesRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetPaymentStreamLinkInitialLevel gets PaymentStreamLinkInitialLevel, Tag 42669.
func (m NoStreams) GetPaymentStreamLinkInitialLevel() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.PaymentStreamLinkInitialLevelField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamLinkClosingLevelIndicator gets PaymentStreamLinkClosingLevelIndicator, Tag 42670.
func (m NoStreams) GetPaymentStreamLinkClosingLevelIndicator() (v bool, err quickfix.MessageRejectError) {
	var f field.PaymentStreamLinkClosingLevelIndicatorField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamLinkExpiringLevelIndicator gets PaymentStreamLinkExpiringLevelIndicator, Tag 42671.
func (m NoStreams) GetPaymentStreamLinkExpiringLevelIndicator() (v bool, err quickfix.MessageRejectError) {
	var f field.PaymentStreamLinkExpiringLevelIndicatorField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamLinkEstimatedTradingDays gets PaymentStreamLinkEstimatedTradingDays, Tag 42672.
func (m NoStreams) GetPaymentStreamLinkEstimatedTradingDays() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStreamLinkEstimatedTradingDaysField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamLinkStrikePrice gets PaymentStreamLinkStrikePrice, Tag 42673.
func (m NoStreams) GetPaymentStreamLinkStrikePrice() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.PaymentStreamLinkStrikePriceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamLinkStrikePriceType gets PaymentStreamLinkStrikePriceType, Tag 42674.
func (m NoStreams) GetPaymentStreamLinkStrikePriceType() (v enum.PaymentStreamLinkStrikePriceType, err quickfix.MessageRejectError) {
	var f field.PaymentStreamLinkStrikePriceTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamLinkMaximumBoundary gets PaymentStreamLinkMaximumBoundary, Tag 42675.
func (m NoStreams) GetPaymentStreamLinkMaximumBoundary() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.PaymentStreamLinkMaximumBoundaryField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamLinkMinimumBoundary gets PaymentStreamLinkMinimumBoundary, Tag 42676.
func (m NoStreams) GetPaymentStreamLinkMinimumBoundary() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.PaymentStreamLinkMinimumBoundaryField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamLinkNumberOfDataSeries gets PaymentStreamLinkNumberOfDataSeries, Tag 42677.
func (m NoStreams) GetPaymentStreamLinkNumberOfDataSeries() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStreamLinkNumberOfDataSeriesField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamVarianceUnadjustedCap gets PaymentStreamVarianceUnadjustedCap, Tag 42678.
func (m NoStreams) GetPaymentStreamVarianceUnadjustedCap() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.PaymentStreamVarianceUnadjustedCapField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamRealizedVarianceMethod gets PaymentStreamRealizedVarianceMethod, Tag 42679.
func (m NoStreams) GetPaymentStreamRealizedVarianceMethod() (v enum.PaymentStreamRealizedVarianceMethod, err quickfix.MessageRejectError) {
	var f field.PaymentStreamRealizedVarianceMethodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamDaysAdjustmentIndicator gets PaymentStreamDaysAdjustmentIndicator, Tag 42680.
func (m NoStreams) GetPaymentStreamDaysAdjustmentIndicator() (v bool, err quickfix.MessageRejectError) {
	var f field.PaymentStreamDaysAdjustmentIndicatorField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamNearestExchangeContractRefID gets PaymentStreamNearestExchangeContractRefID, Tag 42681.
func (m NoStreams) GetPaymentStreamNearestExchangeContractRefID() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStreamNearestExchangeContractRefIDField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamVegaNotionalAmount gets PaymentStreamVegaNotionalAmount, Tag 42682.
func (m NoStreams) GetPaymentStreamVegaNotionalAmount() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.PaymentStreamVegaNotionalAmountField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamRateIndexID gets PaymentStreamRateIndexID, Tag 43090.
func (m NoStreams) GetPaymentStreamRateIndexID() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStreamRateIndexIDField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamRateIndexIDSource gets PaymentStreamRateIndexIDSource, Tag 43091.
func (m NoStreams) GetPaymentStreamRateIndexIDSource() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStreamRateIndexIDSourceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamNonDeliverableRefCurrency gets PaymentStreamNonDeliverableRefCurrency, Tag 40817.
func (m NoStreams) GetPaymentStreamNonDeliverableRefCurrency() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStreamNonDeliverableRefCurrencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamNonDeliverableFixingDatesBusinessDayConvention gets PaymentStreamNonDeliverableFixingDatesBusinessDayConvention, Tag 40818.
func (m NoStreams) GetPaymentStreamNonDeliverableFixingDatesBusinessDayConvention() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStreamNonDeliverableFixingDatesBusinessDayConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoPaymentStreamNonDeliverableFixingDatesBusinessCenters gets NoPaymentStreamNonDeliverableFixingDatesBusinessCenters, Tag 40946.
func (m NoStreams) GetNoPaymentStreamNonDeliverableFixingDatesBusinessCenters() (NoPaymentStreamNonDeliverableFixingDatesBusinessCentersRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoPaymentStreamNonDeliverableFixingDatesBusinessCentersRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetPaymentStreamNonDeliverableFixingDatesRelativeTo gets PaymentStreamNonDeliverableFixingDatesRelativeTo, Tag 40820.
func (m NoStreams) GetPaymentStreamNonDeliverableFixingDatesRelativeTo() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStreamNonDeliverableFixingDatesRelativeToField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamNonDeliverableFixingDatesOffsetPeriod gets PaymentStreamNonDeliverableFixingDatesOffsetPeriod, Tag 40821.
func (m NoStreams) GetPaymentStreamNonDeliverableFixingDatesOffsetPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStreamNonDeliverableFixingDatesOffsetPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamNonDeliverableFixingDatesOffsetUnit gets PaymentStreamNonDeliverableFixingDatesOffsetUnit, Tag 40822.
func (m NoStreams) GetPaymentStreamNonDeliverableFixingDatesOffsetUnit() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStreamNonDeliverableFixingDatesOffsetUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamNonDeliverableFixingDatesOffsetDayType gets PaymentStreamNonDeliverableFixingDatesOffsetDayType, Tag 40823.
func (m NoStreams) GetPaymentStreamNonDeliverableFixingDatesOffsetDayType() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStreamNonDeliverableFixingDatesOffsetDayTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamNonDeliverableSettlRateSource gets PaymentStreamNonDeliverableSettlRateSource, Tag 40371.
func (m NoStreams) GetPaymentStreamNonDeliverableSettlRateSource() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStreamNonDeliverableSettlRateSourceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamNonDeliverableSettlReferencePage gets PaymentStreamNonDeliverableSettlReferencePage, Tag 40372.
func (m NoStreams) GetPaymentStreamNonDeliverableSettlReferencePage() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStreamNonDeliverableSettlReferencePageField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoNonDeliverableFixingDates gets NoNonDeliverableFixingDates, Tag 40825.
func (m NoStreams) GetNoNonDeliverableFixingDates() (NoNonDeliverableFixingDatesRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoNonDeliverableFixingDatesRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetNoSettlRateFallbacks gets NoSettlRateFallbacks, Tag 40085.
func (m NoStreams) GetNoSettlRateFallbacks() (NoSettlRateFallbacksRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoSettlRateFallbacksRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetPaymentStreamFlatRateIndicator gets PaymentStreamFlatRateIndicator, Tag 41180.
func (m NoStreams) GetPaymentStreamFlatRateIndicator() (v bool, err quickfix.MessageRejectError) {
	var f field.PaymentStreamFlatRateIndicatorField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamFlatRateAmount gets PaymentStreamFlatRateAmount, Tag 41181.
func (m NoStreams) GetPaymentStreamFlatRateAmount() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.PaymentStreamFlatRateAmountField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamFlatRateCurrency gets PaymentStreamFlatRateCurrency, Tag 41182.
func (m NoStreams) GetPaymentStreamFlatRateCurrency() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStreamFlatRateCurrencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamMaximumPaymentAmount gets PaymentStreamMaximumPaymentAmount, Tag 41183.
func (m NoStreams) GetPaymentStreamMaximumPaymentAmount() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.PaymentStreamMaximumPaymentAmountField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamMaximumPaymentCurrency gets PaymentStreamMaximumPaymentCurrency, Tag 41184.
func (m NoStreams) GetPaymentStreamMaximumPaymentCurrency() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStreamMaximumPaymentCurrencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamMaximumTransactionAmount gets PaymentStreamMaximumTransactionAmount, Tag 41185.
func (m NoStreams) GetPaymentStreamMaximumTransactionAmount() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.PaymentStreamMaximumTransactionAmountField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamMaximumTransactionCurrency gets PaymentStreamMaximumTransactionCurrency, Tag 41186.
func (m NoStreams) GetPaymentStreamMaximumTransactionCurrency() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStreamMaximumTransactionCurrencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamCashSettlIndicator gets PaymentStreamCashSettlIndicator, Tag 42600.
func (m NoStreams) GetPaymentStreamCashSettlIndicator() (v bool, err quickfix.MessageRejectError) {
	var f field.PaymentStreamCashSettlIndicatorField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamCompoundingXIDRef gets PaymentStreamCompoundingXIDRef, Tag 42601.
func (m NoStreams) GetPaymentStreamCompoundingXIDRef() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStreamCompoundingXIDRefField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamCompoundingSpread gets PaymentStreamCompoundingSpread, Tag 42602.
func (m NoStreams) GetPaymentStreamCompoundingSpread() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.PaymentStreamCompoundingSpreadField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamInterpolationMethod gets PaymentStreamInterpolationMethod, Tag 42603.
func (m NoStreams) GetPaymentStreamInterpolationMethod() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStreamInterpolationMethodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamInterpolationPeriod gets PaymentStreamInterpolationPeriod, Tag 42604.
func (m NoStreams) GetPaymentStreamInterpolationPeriod() (v enum.PaymentStreamInterpolationPeriod, err quickfix.MessageRejectError) {
	var f field.PaymentStreamInterpolationPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamCompoundingFixedRate gets PaymentStreamCompoundingFixedRate, Tag 42605.
func (m NoStreams) GetPaymentStreamCompoundingFixedRate() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.PaymentStreamCompoundingFixedRateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamCompoundingRateIndex gets PaymentStreamCompoundingRateIndex, Tag 42628.
func (m NoStreams) GetPaymentStreamCompoundingRateIndex() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStreamCompoundingRateIndexField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamCompoundingRateIndexCurvePeriod gets PaymentStreamCompoundingRateIndexCurvePeriod, Tag 42629.
func (m NoStreams) GetPaymentStreamCompoundingRateIndexCurvePeriod() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStreamCompoundingRateIndexCurvePeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamCompoundingRateIndexCurveUnit gets PaymentStreamCompoundingRateIndexCurveUnit, Tag 42630.
func (m NoStreams) GetPaymentStreamCompoundingRateIndexCurveUnit() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStreamCompoundingRateIndexCurveUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamCompoundingRateMultiplier gets PaymentStreamCompoundingRateMultiplier, Tag 42631.
func (m NoStreams) GetPaymentStreamCompoundingRateMultiplier() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.PaymentStreamCompoundingRateMultiplierField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamCompoundingRateSpread gets PaymentStreamCompoundingRateSpread, Tag 42632.
func (m NoStreams) GetPaymentStreamCompoundingRateSpread() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.PaymentStreamCompoundingRateSpreadField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamCompoundingRateSpreadPositionType gets PaymentStreamCompoundingRateSpreadPositionType, Tag 42633.
func (m NoStreams) GetPaymentStreamCompoundingRateSpreadPositionType() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStreamCompoundingRateSpreadPositionTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamCompoundingRateTreatment gets PaymentStreamCompoundingRateTreatment, Tag 42634.
func (m NoStreams) GetPaymentStreamCompoundingRateTreatment() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStreamCompoundingRateTreatmentField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamCompoundingCapRate gets PaymentStreamCompoundingCapRate, Tag 42635.
func (m NoStreams) GetPaymentStreamCompoundingCapRate() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.PaymentStreamCompoundingCapRateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamCompoundingCapRateBuySide gets PaymentStreamCompoundingCapRateBuySide, Tag 42636.
func (m NoStreams) GetPaymentStreamCompoundingCapRateBuySide() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStreamCompoundingCapRateBuySideField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamCompoundingCapRateSellSide gets PaymentStreamCompoundingCapRateSellSide, Tag 42637.
func (m NoStreams) GetPaymentStreamCompoundingCapRateSellSide() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStreamCompoundingCapRateSellSideField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamCompoundingFloorRate gets PaymentStreamCompoundingFloorRate, Tag 42638.
func (m NoStreams) GetPaymentStreamCompoundingFloorRate() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.PaymentStreamCompoundingFloorRateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamCompoundingFloorRateBuySide gets PaymentStreamCompoundingFloorRateBuySide, Tag 42639.
func (m NoStreams) GetPaymentStreamCompoundingFloorRateBuySide() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStreamCompoundingFloorRateBuySideField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamCompoundingFloorRateSellSide gets PaymentStreamCompoundingFloorRateSellSide, Tag 42640.
func (m NoStreams) GetPaymentStreamCompoundingFloorRateSellSide() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStreamCompoundingFloorRateSellSideField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamCompoundingInitialRate gets PaymentStreamCompoundingInitialRate, Tag 42641.
func (m NoStreams) GetPaymentStreamCompoundingInitialRate() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.PaymentStreamCompoundingInitialRateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamCompoundingFinalRateRoundingDirection gets PaymentStreamCompoundingFinalRateRoundingDirection, Tag 42642.
func (m NoStreams) GetPaymentStreamCompoundingFinalRateRoundingDirection() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStreamCompoundingFinalRateRoundingDirectionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamCompoundingFinalRatePrecision gets PaymentStreamCompoundingFinalRatePrecision, Tag 42643.
func (m NoStreams) GetPaymentStreamCompoundingFinalRatePrecision() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStreamCompoundingFinalRatePrecisionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamCompoundingAveragingMethod gets PaymentStreamCompoundingAveragingMethod, Tag 42644.
func (m NoStreams) GetPaymentStreamCompoundingAveragingMethod() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStreamCompoundingAveragingMethodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamCompoundingNegativeRateTreatment gets PaymentStreamCompoundingNegativeRateTreatment, Tag 42645.
func (m NoStreams) GetPaymentStreamCompoundingNegativeRateTreatment() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStreamCompoundingNegativeRateTreatmentField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamCompoundingDatesBusinessDayConvention gets PaymentStreamCompoundingDatesBusinessDayConvention, Tag 42609.
func (m NoStreams) GetPaymentStreamCompoundingDatesBusinessDayConvention() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStreamCompoundingDatesBusinessDayConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoPaymentStreamCompoundingDatesBusinessCenters gets NoPaymentStreamCompoundingDatesBusinessCenters, Tag 42620.
func (m NoStreams) GetNoPaymentStreamCompoundingDatesBusinessCenters() (NoPaymentStreamCompoundingDatesBusinessCentersRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoPaymentStreamCompoundingDatesBusinessCentersRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetNoPaymentStreamCompoundingDates gets NoPaymentStreamCompoundingDates, Tag 42606.
func (m NoStreams) GetNoPaymentStreamCompoundingDates() (NoPaymentStreamCompoundingDatesRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoPaymentStreamCompoundingDatesRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetPaymentStreamCompoundingDatesRelativeTo gets PaymentStreamCompoundingDatesRelativeTo, Tag 42610.
func (m NoStreams) GetPaymentStreamCompoundingDatesRelativeTo() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStreamCompoundingDatesRelativeToField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamCompoundingDatesOffsetPeriod gets PaymentStreamCompoundingDatesOffsetPeriod, Tag 42611.
func (m NoStreams) GetPaymentStreamCompoundingDatesOffsetPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStreamCompoundingDatesOffsetPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamCompoundingDatesOffsetUnit gets PaymentStreamCompoundingDatesOffsetUnit, Tag 42612.
func (m NoStreams) GetPaymentStreamCompoundingDatesOffsetUnit() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStreamCompoundingDatesOffsetUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamCompoundingDatesOffsetDayType gets PaymentStreamCompoundingDatesOffsetDayType, Tag 42613.
func (m NoStreams) GetPaymentStreamCompoundingDatesOffsetDayType() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStreamCompoundingDatesOffsetDayTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamCompoundingPeriodSkip gets PaymentStreamCompoundingPeriodSkip, Tag 42614.
func (m NoStreams) GetPaymentStreamCompoundingPeriodSkip() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStreamCompoundingPeriodSkipField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamCompoundingStartDateUnadjusted gets PaymentStreamCompoundingStartDateUnadjusted, Tag 42646.
func (m NoStreams) GetPaymentStreamCompoundingStartDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStreamCompoundingStartDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamCompoundingStartDateRelativeTo gets PaymentStreamCompoundingStartDateRelativeTo, Tag 42647.
func (m NoStreams) GetPaymentStreamCompoundingStartDateRelativeTo() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStreamCompoundingStartDateRelativeToField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamCompoundingStartDateOffsetPeriod gets PaymentStreamCompoundingStartDateOffsetPeriod, Tag 42648.
func (m NoStreams) GetPaymentStreamCompoundingStartDateOffsetPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStreamCompoundingStartDateOffsetPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamCompoundingStartDateOffsetUnit gets PaymentStreamCompoundingStartDateOffsetUnit, Tag 42649.
func (m NoStreams) GetPaymentStreamCompoundingStartDateOffsetUnit() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStreamCompoundingStartDateOffsetUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamCompoundingStartDateOffsetDayType gets PaymentStreamCompoundingStartDateOffsetDayType, Tag 42650.
func (m NoStreams) GetPaymentStreamCompoundingStartDateOffsetDayType() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStreamCompoundingStartDateOffsetDayTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamCompoundingStartDateAdjusted gets PaymentStreamCompoundingStartDateAdjusted, Tag 42651.
func (m NoStreams) GetPaymentStreamCompoundingStartDateAdjusted() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStreamCompoundingStartDateAdjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamCompoundingEndDateUnadjusted gets PaymentStreamCompoundingEndDateUnadjusted, Tag 42622.
func (m NoStreams) GetPaymentStreamCompoundingEndDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStreamCompoundingEndDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamCompoundingEndDateRelativeTo gets PaymentStreamCompoundingEndDateRelativeTo, Tag 42623.
func (m NoStreams) GetPaymentStreamCompoundingEndDateRelativeTo() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStreamCompoundingEndDateRelativeToField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamCompoundingEndDateOffsetPeriod gets PaymentStreamCompoundingEndDateOffsetPeriod, Tag 42624.
func (m NoStreams) GetPaymentStreamCompoundingEndDateOffsetPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStreamCompoundingEndDateOffsetPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamCompoundingEndDateOffsetUnit gets PaymentStreamCompoundingEndDateOffsetUnit, Tag 42625.
func (m NoStreams) GetPaymentStreamCompoundingEndDateOffsetUnit() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStreamCompoundingEndDateOffsetUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamCompoundingEndDateOffsetDayType gets PaymentStreamCompoundingEndDateOffsetDayType, Tag 42626.
func (m NoStreams) GetPaymentStreamCompoundingEndDateOffsetDayType() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStreamCompoundingEndDateOffsetDayTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamCompoundingEndDateAdjusted gets PaymentStreamCompoundingEndDateAdjusted, Tag 42627.
func (m NoStreams) GetPaymentStreamCompoundingEndDateAdjusted() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStreamCompoundingEndDateAdjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamCompoundingFrequencyPeriod gets PaymentStreamCompoundingFrequencyPeriod, Tag 42615.
func (m NoStreams) GetPaymentStreamCompoundingFrequencyPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStreamCompoundingFrequencyPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamCompoundingFrequencyUnit gets PaymentStreamCompoundingFrequencyUnit, Tag 42616.
func (m NoStreams) GetPaymentStreamCompoundingFrequencyUnit() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStreamCompoundingFrequencyUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamCompoundingRollConvention gets PaymentStreamCompoundingRollConvention, Tag 42617.
func (m NoStreams) GetPaymentStreamCompoundingRollConvention() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStreamCompoundingRollConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamBoundsFirstDateUnadjusted gets PaymentStreamBoundsFirstDateUnadjusted, Tag 42618.
func (m NoStreams) GetPaymentStreamBoundsFirstDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStreamBoundsFirstDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamBoundsLastDateUnadjusted gets PaymentStreamBoundsLastDateUnadjusted, Tag 42619.
func (m NoStreams) GetPaymentStreamBoundsLastDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStreamBoundsLastDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamOtherDayCount gets PaymentStreamOtherDayCount, Tag 43106.
func (m NoStreams) GetPaymentStreamOtherDayCount() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStreamOtherDayCountField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoPaymentSchedules gets NoPaymentSchedules, Tag 40828.
func (m NoStreams) GetNoPaymentSchedules() (NoPaymentSchedulesRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoPaymentSchedulesRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetNoPaymentStubs gets NoPaymentStubs, Tag 40872.
func (m NoStreams) GetNoPaymentStubs() (NoPaymentStubsRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoPaymentStubsRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetStreamText gets StreamText, Tag 40056.
func (m NoStreams) GetStreamText() (v string, err quickfix.MessageRejectError) {
	var f field.StreamTextField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetEncodedStreamTextLen gets EncodedStreamTextLen, Tag 40982.
func (m NoStreams) GetEncodedStreamTextLen() (v int, err quickfix.MessageRejectError) {
	var f field.EncodedStreamTextLenField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetEncodedStreamText gets EncodedStreamText, Tag 40983.
func (m NoStreams) GetEncodedStreamText() (v string, err quickfix.MessageRejectError) {
	var f field.EncodedStreamTextField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStreamXID gets StreamXID, Tag 41303.
func (m NoStreams) GetStreamXID() (v string, err quickfix.MessageRejectError) {
	var f field.StreamXIDField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStreamNotionalXIDRef gets StreamNotionalXIDRef, Tag 41305.
func (m NoStreams) GetStreamNotionalXIDRef() (v string, err quickfix.MessageRejectError) {
	var f field.StreamNotionalXIDRefField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStreamNotionalFrequencyPeriod gets StreamNotionalFrequencyPeriod, Tag 41306.
func (m NoStreams) GetStreamNotionalFrequencyPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.StreamNotionalFrequencyPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStreamNotionalFrequencyUnit gets StreamNotionalFrequencyUnit, Tag 41307.
func (m NoStreams) GetStreamNotionalFrequencyUnit() (v string, err quickfix.MessageRejectError) {
	var f field.StreamNotionalFrequencyUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStreamNotionalCommodityFrequency gets StreamNotionalCommodityFrequency, Tag 41308.
func (m NoStreams) GetStreamNotionalCommodityFrequency() (v enum.StreamNotionalCommodityFrequency, err quickfix.MessageRejectError) {
	var f field.StreamNotionalCommodityFrequencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStreamNotionalUnitOfMeasure gets StreamNotionalUnitOfMeasure, Tag 41309.
func (m NoStreams) GetStreamNotionalUnitOfMeasure() (v string, err quickfix.MessageRejectError) {
	var f field.StreamNotionalUnitOfMeasureField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStreamTotalNotional gets StreamTotalNotional, Tag 41310.
func (m NoStreams) GetStreamTotalNotional() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.StreamTotalNotionalField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStreamTotalNotionalUnitOfMeasure gets StreamTotalNotionalUnitOfMeasure, Tag 41311.
func (m NoStreams) GetStreamTotalNotionalUnitOfMeasure() (v string, err quickfix.MessageRejectError) {
	var f field.StreamTotalNotionalUnitOfMeasureField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStreamCommodityBase gets StreamCommodityBase, Tag 41251.
func (m NoStreams) GetStreamCommodityBase() (v string, err quickfix.MessageRejectError) {
	var f field.StreamCommodityBaseField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStreamCommodityType gets StreamCommodityType, Tag 41252.
func (m NoStreams) GetStreamCommodityType() (v string, err quickfix.MessageRejectError) {
	var f field.StreamCommodityTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStreamCommoditySecurityID gets StreamCommoditySecurityID, Tag 41253.
func (m NoStreams) GetStreamCommoditySecurityID() (v string, err quickfix.MessageRejectError) {
	var f field.StreamCommoditySecurityIDField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStreamCommoditySecurityIDSource gets StreamCommoditySecurityIDSource, Tag 41254.
func (m NoStreams) GetStreamCommoditySecurityIDSource() (v string, err quickfix.MessageRejectError) {
	var f field.StreamCommoditySecurityIDSourceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoStreamCommodityAltIDs gets NoStreamCommodityAltIDs, Tag 41277.
func (m NoStreams) GetNoStreamCommodityAltIDs() (NoStreamCommodityAltIDsRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoStreamCommodityAltIDsRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetStreamCommodityDesc gets StreamCommodityDesc, Tag 41255.
func (m NoStreams) GetStreamCommodityDesc() (v string, err quickfix.MessageRejectError) {
	var f field.StreamCommodityDescField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetEncodedStreamCommodityDescLen gets EncodedStreamCommodityDescLen, Tag 41256.
func (m NoStreams) GetEncodedStreamCommodityDescLen() (v int, err quickfix.MessageRejectError) {
	var f field.EncodedStreamCommodityDescLenField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetEncodedStreamCommodityDesc gets EncodedStreamCommodityDesc, Tag 41257.
func (m NoStreams) GetEncodedStreamCommodityDesc() (v string, err quickfix.MessageRejectError) {
	var f field.EncodedStreamCommodityDescField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoStreamAssetAttributes gets NoStreamAssetAttributes, Tag 41237.
func (m NoStreams) GetNoStreamAssetAttributes() (NoStreamAssetAttributesRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoStreamAssetAttributesRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetStreamCommodityUnitOfMeasure gets StreamCommodityUnitOfMeasure, Tag 41258.
func (m NoStreams) GetStreamCommodityUnitOfMeasure() (v string, err quickfix.MessageRejectError) {
	var f field.StreamCommodityUnitOfMeasureField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStreamCommodityCurrency gets StreamCommodityCurrency, Tag 41259.
func (m NoStreams) GetStreamCommodityCurrency() (v string, err quickfix.MessageRejectError) {
	var f field.StreamCommodityCurrencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStreamCommodityExchange gets StreamCommodityExchange, Tag 41260.
func (m NoStreams) GetStreamCommodityExchange() (v string, err quickfix.MessageRejectError) {
	var f field.StreamCommodityExchangeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStreamCommodityRateSource gets StreamCommodityRateSource, Tag 41261.
func (m NoStreams) GetStreamCommodityRateSource() (v int, err quickfix.MessageRejectError) {
	var f field.StreamCommodityRateSourceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStreamCommodityRateReferencePage gets StreamCommodityRateReferencePage, Tag 41262.
func (m NoStreams) GetStreamCommodityRateReferencePage() (v string, err quickfix.MessageRejectError) {
	var f field.StreamCommodityRateReferencePageField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStreamCommodityRateReferencePageHeading gets StreamCommodityRateReferencePageHeading, Tag 41263.
func (m NoStreams) GetStreamCommodityRateReferencePageHeading() (v string, err quickfix.MessageRejectError) {
	var f field.StreamCommodityRateReferencePageHeadingField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStreamDataProvider gets StreamDataProvider, Tag 41264.
func (m NoStreams) GetStreamDataProvider() (v string, err quickfix.MessageRejectError) {
	var f field.StreamDataProviderField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoStreamCommodityDataSources gets NoStreamCommodityDataSources, Tag 41280.
func (m NoStreams) GetNoStreamCommodityDataSources() (NoStreamCommodityDataSourcesRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoStreamCommodityDataSourcesRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetStreamCommodityPricingType gets StreamCommodityPricingType, Tag 41265.
func (m NoStreams) GetStreamCommodityPricingType() (v string, err quickfix.MessageRejectError) {
	var f field.StreamCommodityPricingTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStreamCommodityNearbySettlDayPeriod gets StreamCommodityNearbySettlDayPeriod, Tag 41266.
func (m NoStreams) GetStreamCommodityNearbySettlDayPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.StreamCommodityNearbySettlDayPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStreamCommodityNearbySettlDayUnit gets StreamCommodityNearbySettlDayUnit, Tag 41267.
func (m NoStreams) GetStreamCommodityNearbySettlDayUnit() (v enum.StreamCommodityNearbySettlDayUnit, err quickfix.MessageRejectError) {
	var f field.StreamCommodityNearbySettlDayUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStreamCommoditySettlDateUnadjusted gets StreamCommoditySettlDateUnadjusted, Tag 41268.
func (m NoStreams) GetStreamCommoditySettlDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.StreamCommoditySettlDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStreamCommoditySettlDateBusinessDayConvention gets StreamCommoditySettlDateBusinessDayConvention, Tag 41269.
func (m NoStreams) GetStreamCommoditySettlDateBusinessDayConvention() (v int, err quickfix.MessageRejectError) {
	var f field.StreamCommoditySettlDateBusinessDayConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoStreamCommoditySettlBusinessCenters gets NoStreamCommoditySettlBusinessCenters, Tag 41249.
func (m NoStreams) GetNoStreamCommoditySettlBusinessCenters() (NoStreamCommoditySettlBusinessCentersRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoStreamCommoditySettlBusinessCentersRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetStreamCommoditySettlDateAdjusted gets StreamCommoditySettlDateAdjusted, Tag 41270.
func (m NoStreams) GetStreamCommoditySettlDateAdjusted() (v string, err quickfix.MessageRejectError) {
	var f field.StreamCommoditySettlDateAdjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStreamCommoditySettlMonth gets StreamCommoditySettlMonth, Tag 41271.
func (m NoStreams) GetStreamCommoditySettlMonth() (v int, err quickfix.MessageRejectError) {
	var f field.StreamCommoditySettlMonthField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStreamCommoditySettlDateRollPeriod gets StreamCommoditySettlDateRollPeriod, Tag 41272.
func (m NoStreams) GetStreamCommoditySettlDateRollPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.StreamCommoditySettlDateRollPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStreamCommoditySettlDateRollUnit gets StreamCommoditySettlDateRollUnit, Tag 41273.
func (m NoStreams) GetStreamCommoditySettlDateRollUnit() (v enum.StreamCommoditySettlDateRollUnit, err quickfix.MessageRejectError) {
	var f field.StreamCommoditySettlDateRollUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStreamCommoditySettlDayType gets StreamCommoditySettlDayType, Tag 41274.
func (m NoStreams) GetStreamCommoditySettlDayType() (v int, err quickfix.MessageRejectError) {
	var f field.StreamCommoditySettlDayTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoStreamCommoditySettlPeriods gets NoStreamCommoditySettlPeriods, Tag 41289.
func (m NoStreams) GetNoStreamCommoditySettlPeriods() (NoStreamCommoditySettlPeriodsRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoStreamCommoditySettlPeriodsRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetStreamCommodityXID gets StreamCommodityXID, Tag 41275.
func (m NoStreams) GetStreamCommodityXID() (v string, err quickfix.MessageRejectError) {
	var f field.StreamCommodityXIDField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStreamCommodityXIDRef gets StreamCommodityXIDRef, Tag 41276.
func (m NoStreams) GetStreamCommodityXIDRef() (v string, err quickfix.MessageRejectError) {
	var f field.StreamCommodityXIDRefField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStreamCommodityDeliveryPricingRegion gets StreamCommodityDeliveryPricingRegion, Tag 42587.
func (m NoStreams) GetStreamCommodityDeliveryPricingRegion() (v string, err quickfix.MessageRejectError) {
	var f field.StreamCommodityDeliveryPricingRegionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDeliveryStreamType gets DeliveryStreamType, Tag 41058.
func (m NoStreams) GetDeliveryStreamType() (v enum.DeliveryStreamType, err quickfix.MessageRejectError) {
	var f field.DeliveryStreamTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoDeliveryStreamCommoditySources gets NoDeliveryStreamCommoditySources, Tag 41085.
func (m NoStreams) GetNoDeliveryStreamCommoditySources() (NoDeliveryStreamCommoditySourcesRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoDeliveryStreamCommoditySourcesRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetDeliveryStreamPipeline gets DeliveryStreamPipeline, Tag 41059.
func (m NoStreams) GetDeliveryStreamPipeline() (v string, err quickfix.MessageRejectError) {
	var f field.DeliveryStreamPipelineField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDeliveryStreamEntryPoint gets DeliveryStreamEntryPoint, Tag 41060.
func (m NoStreams) GetDeliveryStreamEntryPoint() (v string, err quickfix.MessageRejectError) {
	var f field.DeliveryStreamEntryPointField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDeliveryStreamWithdrawalPoint gets DeliveryStreamWithdrawalPoint, Tag 41061.
func (m NoStreams) GetDeliveryStreamWithdrawalPoint() (v string, err quickfix.MessageRejectError) {
	var f field.DeliveryStreamWithdrawalPointField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDeliveryStreamDeliveryPoint gets DeliveryStreamDeliveryPoint, Tag 41062.
func (m NoStreams) GetDeliveryStreamDeliveryPoint() (v string, err quickfix.MessageRejectError) {
	var f field.DeliveryStreamDeliveryPointField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDeliveryStreamDeliveryRestriction gets DeliveryStreamDeliveryRestriction, Tag 41063.
func (m NoStreams) GetDeliveryStreamDeliveryRestriction() (v enum.DeliveryStreamDeliveryRestriction, err quickfix.MessageRejectError) {
	var f field.DeliveryStreamDeliveryRestrictionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDeliveryStreamDeliveryContingency gets DeliveryStreamDeliveryContingency, Tag 41064.
func (m NoStreams) GetDeliveryStreamDeliveryContingency() (v string, err quickfix.MessageRejectError) {
	var f field.DeliveryStreamDeliveryContingencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDeliveryStreamDeliveryContingentPartySide gets DeliveryStreamDeliveryContingentPartySide, Tag 41065.
func (m NoStreams) GetDeliveryStreamDeliveryContingentPartySide() (v int, err quickfix.MessageRejectError) {
	var f field.DeliveryStreamDeliveryContingentPartySideField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDeliveryStreamDeliverAtSourceIndicator gets DeliveryStreamDeliverAtSourceIndicator, Tag 41066.
func (m NoStreams) GetDeliveryStreamDeliverAtSourceIndicator() (v bool, err quickfix.MessageRejectError) {
	var f field.DeliveryStreamDeliverAtSourceIndicatorField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDeliveryStreamRiskApportionment gets DeliveryStreamRiskApportionment, Tag 41067.
func (m NoStreams) GetDeliveryStreamRiskApportionment() (v string, err quickfix.MessageRejectError) {
	var f field.DeliveryStreamRiskApportionmentField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDeliveryStreamRiskApportionmentSource gets DeliveryStreamRiskApportionmentSource, Tag 41218.
func (m NoStreams) GetDeliveryStreamRiskApportionmentSource() (v string, err quickfix.MessageRejectError) {
	var f field.DeliveryStreamRiskApportionmentSourceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoDeliveryStreamCycles gets NoDeliveryStreamCycles, Tag 41081.
func (m NoStreams) GetNoDeliveryStreamCycles() (NoDeliveryStreamCyclesRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoDeliveryStreamCyclesRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetDeliveryStreamTitleTransferLocation gets DeliveryStreamTitleTransferLocation, Tag 41068.
func (m NoStreams) GetDeliveryStreamTitleTransferLocation() (v string, err quickfix.MessageRejectError) {
	var f field.DeliveryStreamTitleTransferLocationField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDeliveryStreamTitleTransferCondition gets DeliveryStreamTitleTransferCondition, Tag 41069.
func (m NoStreams) GetDeliveryStreamTitleTransferCondition() (v enum.DeliveryStreamTitleTransferCondition, err quickfix.MessageRejectError) {
	var f field.DeliveryStreamTitleTransferConditionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDeliveryStreamImporterOfRecord gets DeliveryStreamImporterOfRecord, Tag 41070.
func (m NoStreams) GetDeliveryStreamImporterOfRecord() (v string, err quickfix.MessageRejectError) {
	var f field.DeliveryStreamImporterOfRecordField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDeliveryStreamNegativeTolerance gets DeliveryStreamNegativeTolerance, Tag 41071.
func (m NoStreams) GetDeliveryStreamNegativeTolerance() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.DeliveryStreamNegativeToleranceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDeliveryStreamPositiveTolerance gets DeliveryStreamPositiveTolerance, Tag 41072.
func (m NoStreams) GetDeliveryStreamPositiveTolerance() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.DeliveryStreamPositiveToleranceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDeliveryStreamToleranceUnitOfMeasure gets DeliveryStreamToleranceUnitOfMeasure, Tag 41073.
func (m NoStreams) GetDeliveryStreamToleranceUnitOfMeasure() (v string, err quickfix.MessageRejectError) {
	var f field.DeliveryStreamToleranceUnitOfMeasureField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDeliveryStreamToleranceType gets DeliveryStreamToleranceType, Tag 41074.
func (m NoStreams) GetDeliveryStreamToleranceType() (v int, err quickfix.MessageRejectError) {
	var f field.DeliveryStreamToleranceTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDeliveryStreamToleranceOptionSide gets DeliveryStreamToleranceOptionSide, Tag 41075.
func (m NoStreams) GetDeliveryStreamToleranceOptionSide() (v enum.DeliveryStreamToleranceOptionSide, err quickfix.MessageRejectError) {
	var f field.DeliveryStreamToleranceOptionSideField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDeliveryStreamTotalPositiveTolerance gets DeliveryStreamTotalPositiveTolerance, Tag 41076.
func (m NoStreams) GetDeliveryStreamTotalPositiveTolerance() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.DeliveryStreamTotalPositiveToleranceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDeliveryStreamTotalNegativeTolerance gets DeliveryStreamTotalNegativeTolerance, Tag 41077.
func (m NoStreams) GetDeliveryStreamTotalNegativeTolerance() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.DeliveryStreamTotalNegativeToleranceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDeliveryStreamNotionalConversionFactor gets DeliveryStreamNotionalConversionFactor, Tag 41078.
func (m NoStreams) GetDeliveryStreamNotionalConversionFactor() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.DeliveryStreamNotionalConversionFactorField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDeliveryStreamTransportEquipment gets DeliveryStreamTransportEquipment, Tag 41079.
func (m NoStreams) GetDeliveryStreamTransportEquipment() (v string, err quickfix.MessageRejectError) {
	var f field.DeliveryStreamTransportEquipmentField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDeliveryStreamElectingPartySide gets DeliveryStreamElectingPartySide, Tag 41080.
func (m NoStreams) GetDeliveryStreamElectingPartySide() (v enum.DeliveryStreamElectingPartySide, err quickfix.MessageRejectError) {
	var f field.DeliveryStreamElectingPartySideField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDeliveryStreamDeliveryPointSource gets DeliveryStreamDeliveryPointSource, Tag 42192.
func (m NoStreams) GetDeliveryStreamDeliveryPointSource() (v enum.DeliveryStreamDeliveryPointSource, err quickfix.MessageRejectError) {
	var f field.DeliveryStreamDeliveryPointSourceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDeliveryStreamDeliveryPointDesc gets DeliveryStreamDeliveryPointDesc, Tag 42193.
func (m NoStreams) GetDeliveryStreamDeliveryPointDesc() (v string, err quickfix.MessageRejectError) {
	var f field.DeliveryStreamDeliveryPointDescField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDeliveryStreamRouteOrCharter gets DeliveryStreamRouteOrCharter, Tag 43094.
func (m NoStreams) GetDeliveryStreamRouteOrCharter() (v string, err quickfix.MessageRejectError) {
	var f field.DeliveryStreamRouteOrCharterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoDeliverySchedules gets NoDeliverySchedules, Tag 41037.
func (m NoStreams) GetNoDeliverySchedules() (NoDeliverySchedulesRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoDeliverySchedulesRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetStreamVersion gets StreamVersion, Tag 42784.
func (m NoStreams) GetStreamVersion() (v string, err quickfix.MessageRejectError) {
	var f field.StreamVersionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStreamVersionEffectiveDate gets StreamVersionEffectiveDate, Tag 42785.
func (m NoStreams) GetStreamVersionEffectiveDate() (v string, err quickfix.MessageRejectError) {
	var f field.StreamVersionEffectiveDateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStreamNotionalDeterminationMethod gets StreamNotionalDeterminationMethod, Tag 42786.
func (m NoStreams) GetStreamNotionalDeterminationMethod() (v string, err quickfix.MessageRejectError) {
	var f field.StreamNotionalDeterminationMethodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStreamNotionalAdjustments gets StreamNotionalAdjustments, Tag 42787.
func (m NoStreams) GetStreamNotionalAdjustments() (v enum.StreamNotionalAdjustments, err quickfix.MessageRejectError) {
	var f field.StreamNotionalAdjustmentsField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasStreamType returns true if StreamType is present, Tag 40050.
func (m NoStreams) HasStreamType() bool {
	return m.Has(tag.StreamType)
}

// HasStreamDesc returns true if StreamDesc is present, Tag 40051.
func (m NoStreams) HasStreamDesc() bool {
	return m.Has(tag.StreamDesc)
}

// HasStreamPaySide returns true if StreamPaySide is present, Tag 40052.
func (m NoStreams) HasStreamPaySide() bool {
	return m.Has(tag.StreamPaySide)
}

// HasStreamReceiveSide returns true if StreamReceiveSide is present, Tag 40053.
func (m NoStreams) HasStreamReceiveSide() bool {
	return m.Has(tag.StreamReceiveSide)
}

// HasStreamNotional returns true if StreamNotional is present, Tag 40054.
func (m NoStreams) HasStreamNotional() bool {
	return m.Has(tag.StreamNotional)
}

// HasStreamCurrency returns true if StreamCurrency is present, Tag 40055.
func (m NoStreams) HasStreamCurrency() bool {
	return m.Has(tag.StreamCurrency)
}

// HasStreamEffectiveDateUnadjusted returns true if StreamEffectiveDateUnadjusted is present, Tag 40907.
func (m NoStreams) HasStreamEffectiveDateUnadjusted() bool {
	return m.Has(tag.StreamEffectiveDateUnadjusted)
}

// HasStreamEffectiveDateBusinessDayConvention returns true if StreamEffectiveDateBusinessDayConvention is present, Tag 40908.
func (m NoStreams) HasStreamEffectiveDateBusinessDayConvention() bool {
	return m.Has(tag.StreamEffectiveDateBusinessDayConvention)
}

// HasNoStreamEffectiveBusinessCenters returns true if NoStreamEffectiveBusinessCenters is present, Tag 40960.
func (m NoStreams) HasNoStreamEffectiveBusinessCenters() bool {
	return m.Has(tag.NoStreamEffectiveBusinessCenters)
}

// HasStreamEffectiveDateRelativeTo returns true if StreamEffectiveDateRelativeTo is present, Tag 40910.
func (m NoStreams) HasStreamEffectiveDateRelativeTo() bool {
	return m.Has(tag.StreamEffectiveDateRelativeTo)
}

// HasStreamEffectiveDateOffsetPeriod returns true if StreamEffectiveDateOffsetPeriod is present, Tag 40911.
func (m NoStreams) HasStreamEffectiveDateOffsetPeriod() bool {
	return m.Has(tag.StreamEffectiveDateOffsetPeriod)
}

// HasStreamEffectiveDateOffsetUnit returns true if StreamEffectiveDateOffsetUnit is present, Tag 40912.
func (m NoStreams) HasStreamEffectiveDateOffsetUnit() bool {
	return m.Has(tag.StreamEffectiveDateOffsetUnit)
}

// HasStreamEffectiveDateOffsetDayType returns true if StreamEffectiveDateOffsetDayType is present, Tag 40913.
func (m NoStreams) HasStreamEffectiveDateOffsetDayType() bool {
	return m.Has(tag.StreamEffectiveDateOffsetDayType)
}

// HasStreamEffectiveDateAdjusted returns true if StreamEffectiveDateAdjusted is present, Tag 40914.
func (m NoStreams) HasStreamEffectiveDateAdjusted() bool {
	return m.Has(tag.StreamEffectiveDateAdjusted)
}

// HasStreamTerminationDateUnadjusted returns true if StreamTerminationDateUnadjusted is present, Tag 40065.
func (m NoStreams) HasStreamTerminationDateUnadjusted() bool {
	return m.Has(tag.StreamTerminationDateUnadjusted)
}

// HasStreamTerminationDateBusinessDayConvention returns true if StreamTerminationDateBusinessDayConvention is present, Tag 40066.
func (m NoStreams) HasStreamTerminationDateBusinessDayConvention() bool {
	return m.Has(tag.StreamTerminationDateBusinessDayConvention)
}

// HasNoStreamTerminationDateBusinessCenters returns true if NoStreamTerminationDateBusinessCenters is present, Tag 40961.
func (m NoStreams) HasNoStreamTerminationDateBusinessCenters() bool {
	return m.Has(tag.NoStreamTerminationDateBusinessCenters)
}

// HasStreamTerminationDateRelativeTo returns true if StreamTerminationDateRelativeTo is present, Tag 40068.
func (m NoStreams) HasStreamTerminationDateRelativeTo() bool {
	return m.Has(tag.StreamTerminationDateRelativeTo)
}

// HasStreamTerminationDateOffsetPeriod returns true if StreamTerminationDateOffsetPeriod is present, Tag 40069.
func (m NoStreams) HasStreamTerminationDateOffsetPeriod() bool {
	return m.Has(tag.StreamTerminationDateOffsetPeriod)
}

// HasStreamTerminationDateOffsetUnit returns true if StreamTerminationDateOffsetUnit is present, Tag 40070.
func (m NoStreams) HasStreamTerminationDateOffsetUnit() bool {
	return m.Has(tag.StreamTerminationDateOffsetUnit)
}

// HasStreamTerminationDateOffsetDayType returns true if StreamTerminationDateOffsetDayType is present, Tag 40071.
func (m NoStreams) HasStreamTerminationDateOffsetDayType() bool {
	return m.Has(tag.StreamTerminationDateOffsetDayType)
}

// HasStreamTerminationDateAdjusted returns true if StreamTerminationDateAdjusted is present, Tag 40072.
func (m NoStreams) HasStreamTerminationDateAdjusted() bool {
	return m.Has(tag.StreamTerminationDateAdjusted)
}

// HasStreamCalculationPeriodBusinessDayConvention returns true if StreamCalculationPeriodBusinessDayConvention is present, Tag 40073.
func (m NoStreams) HasStreamCalculationPeriodBusinessDayConvention() bool {
	return m.Has(tag.StreamCalculationPeriodBusinessDayConvention)
}

// HasNoStreamCalculationPeriodBusinessCenters returns true if NoStreamCalculationPeriodBusinessCenters is present, Tag 40958.
func (m NoStreams) HasNoStreamCalculationPeriodBusinessCenters() bool {
	return m.Has(tag.NoStreamCalculationPeriodBusinessCenters)
}

// HasStreamFirstPeriodStartDateUnadjusted returns true if StreamFirstPeriodStartDateUnadjusted is present, Tag 40075.
func (m NoStreams) HasStreamFirstPeriodStartDateUnadjusted() bool {
	return m.Has(tag.StreamFirstPeriodStartDateUnadjusted)
}

// HasStreamFirstPeriodStartDateBusinessDayConvention returns true if StreamFirstPeriodStartDateBusinessDayConvention is present, Tag 40076.
func (m NoStreams) HasStreamFirstPeriodStartDateBusinessDayConvention() bool {
	return m.Has(tag.StreamFirstPeriodStartDateBusinessDayConvention)
}

// HasNoStreamFirstPeriodStartDateBusinessCenters returns true if NoStreamFirstPeriodStartDateBusinessCenters is present, Tag 40959.
func (m NoStreams) HasNoStreamFirstPeriodStartDateBusinessCenters() bool {
	return m.Has(tag.NoStreamFirstPeriodStartDateBusinessCenters)
}

// HasStreamFirstPeriodStartDateAdjusted returns true if StreamFirstPeriodStartDateAdjusted is present, Tag 40078.
func (m NoStreams) HasStreamFirstPeriodStartDateAdjusted() bool {
	return m.Has(tag.StreamFirstPeriodStartDateAdjusted)
}

// HasStreamFirstRegularPeriodStartDateUnadjusted returns true if StreamFirstRegularPeriodStartDateUnadjusted is present, Tag 40079.
func (m NoStreams) HasStreamFirstRegularPeriodStartDateUnadjusted() bool {
	return m.Has(tag.StreamFirstRegularPeriodStartDateUnadjusted)
}

// HasStreamFirstCompoundingPeriodEndDateUnadjusted returns true if StreamFirstCompoundingPeriodEndDateUnadjusted is present, Tag 40080.
func (m NoStreams) HasStreamFirstCompoundingPeriodEndDateUnadjusted() bool {
	return m.Has(tag.StreamFirstCompoundingPeriodEndDateUnadjusted)
}

// HasStreamLastRegularPeriodEndDateUnadjusted returns true if StreamLastRegularPeriodEndDateUnadjusted is present, Tag 40081.
func (m NoStreams) HasStreamLastRegularPeriodEndDateUnadjusted() bool {
	return m.Has(tag.StreamLastRegularPeriodEndDateUnadjusted)
}

// HasStreamCalculationFrequencyPeriod returns true if StreamCalculationFrequencyPeriod is present, Tag 40082.
func (m NoStreams) HasStreamCalculationFrequencyPeriod() bool {
	return m.Has(tag.StreamCalculationFrequencyPeriod)
}

// HasStreamCalculationFrequencyUnit returns true if StreamCalculationFrequencyUnit is present, Tag 40083.
func (m NoStreams) HasStreamCalculationFrequencyUnit() bool {
	return m.Has(tag.StreamCalculationFrequencyUnit)
}

// HasStreamCalculationRollConvention returns true if StreamCalculationRollConvention is present, Tag 40084.
func (m NoStreams) HasStreamCalculationRollConvention() bool {
	return m.Has(tag.StreamCalculationRollConvention)
}

// HasStreamCalculationPeriodDatesXID returns true if StreamCalculationPeriodDatesXID is present, Tag 41244.
func (m NoStreams) HasStreamCalculationPeriodDatesXID() bool {
	return m.Has(tag.StreamCalculationPeriodDatesXID)
}

// HasStreamCalculationPeriodDatesXIDRef returns true if StreamCalculationPeriodDatesXIDRef is present, Tag 41245.
func (m NoStreams) HasStreamCalculationPeriodDatesXIDRef() bool {
	return m.Has(tag.StreamCalculationPeriodDatesXIDRef)
}

// HasNoStreamCalculationPeriodDates returns true if NoStreamCalculationPeriodDates is present, Tag 41241.
func (m NoStreams) HasNoStreamCalculationPeriodDates() bool {
	return m.Has(tag.NoStreamCalculationPeriodDates)
}

// HasStreamCalculationBalanceOfFirstPeriod returns true if StreamCalculationBalanceOfFirstPeriod is present, Tag 41246.
func (m NoStreams) HasStreamCalculationBalanceOfFirstPeriod() bool {
	return m.Has(tag.StreamCalculationBalanceOfFirstPeriod)
}

// HasStreamCalculationCorrectionPeriod returns true if StreamCalculationCorrectionPeriod is present, Tag 41247.
func (m NoStreams) HasStreamCalculationCorrectionPeriod() bool {
	return m.Has(tag.StreamCalculationCorrectionPeriod)
}

// HasStreamCalculationCorrectionUnit returns true if StreamCalculationCorrectionUnit is present, Tag 41248.
func (m NoStreams) HasStreamCalculationCorrectionUnit() bool {
	return m.Has(tag.StreamCalculationCorrectionUnit)
}

// HasPaymentStreamType returns true if PaymentStreamType is present, Tag 40738.
func (m NoStreams) HasPaymentStreamType() bool {
	return m.Has(tag.PaymentStreamType)
}

// HasPaymentStreamMarketRate returns true if PaymentStreamMarketRate is present, Tag 40739.
func (m NoStreams) HasPaymentStreamMarketRate() bool {
	return m.Has(tag.PaymentStreamMarketRate)
}

// HasPaymentStreamDelayIndicator returns true if PaymentStreamDelayIndicator is present, Tag 40740.
func (m NoStreams) HasPaymentStreamDelayIndicator() bool {
	return m.Has(tag.PaymentStreamDelayIndicator)
}

// HasPaymentStreamSettlCurrency returns true if PaymentStreamSettlCurrency is present, Tag 40741.
func (m NoStreams) HasPaymentStreamSettlCurrency() bool {
	return m.Has(tag.PaymentStreamSettlCurrency)
}

// HasPaymentStreamDayCount returns true if PaymentStreamDayCount is present, Tag 40742.
func (m NoStreams) HasPaymentStreamDayCount() bool {
	return m.Has(tag.PaymentStreamDayCount)
}

// HasPaymentStreamAccrualDays returns true if PaymentStreamAccrualDays is present, Tag 40743.
func (m NoStreams) HasPaymentStreamAccrualDays() bool {
	return m.Has(tag.PaymentStreamAccrualDays)
}

// HasPaymentStreamDiscountType returns true if PaymentStreamDiscountType is present, Tag 40744.
func (m NoStreams) HasPaymentStreamDiscountType() bool {
	return m.Has(tag.PaymentStreamDiscountType)
}

// HasPaymentStreamDiscountRate returns true if PaymentStreamDiscountRate is present, Tag 40745.
func (m NoStreams) HasPaymentStreamDiscountRate() bool {
	return m.Has(tag.PaymentStreamDiscountRate)
}

// HasPaymentStreamDiscountRateDayCount returns true if PaymentStreamDiscountRateDayCount is present, Tag 40746.
func (m NoStreams) HasPaymentStreamDiscountRateDayCount() bool {
	return m.Has(tag.PaymentStreamDiscountRateDayCount)
}

// HasPaymentStreamCompoundingMethod returns true if PaymentStreamCompoundingMethod is present, Tag 40747.
func (m NoStreams) HasPaymentStreamCompoundingMethod() bool {
	return m.Has(tag.PaymentStreamCompoundingMethod)
}

// HasPaymentStreamInitialPrincipalExchangeIndicator returns true if PaymentStreamInitialPrincipalExchangeIndicator is present, Tag 40748.
func (m NoStreams) HasPaymentStreamInitialPrincipalExchangeIndicator() bool {
	return m.Has(tag.PaymentStreamInitialPrincipalExchangeIndicator)
}

// HasPaymentStreamInterimPrincipalExchangeIndicator returns true if PaymentStreamInterimPrincipalExchangeIndicator is present, Tag 40749.
func (m NoStreams) HasPaymentStreamInterimPrincipalExchangeIndicator() bool {
	return m.Has(tag.PaymentStreamInterimPrincipalExchangeIndicator)
}

// HasPaymentStreamFinalPrincipalExchangeIndicator returns true if PaymentStreamFinalPrincipalExchangeIndicator is present, Tag 40750.
func (m NoStreams) HasPaymentStreamFinalPrincipalExchangeIndicator() bool {
	return m.Has(tag.PaymentStreamFinalPrincipalExchangeIndicator)
}

// HasPaymentStreamPaymentDateBusinessDayConvention returns true if PaymentStreamPaymentDateBusinessDayConvention is present, Tag 40751.
func (m NoStreams) HasPaymentStreamPaymentDateBusinessDayConvention() bool {
	return m.Has(tag.PaymentStreamPaymentDateBusinessDayConvention)
}

// HasNoPaymentStreamPaymentDateBusinessCenters returns true if NoPaymentStreamPaymentDateBusinessCenters is present, Tag 40947.
func (m NoStreams) HasNoPaymentStreamPaymentDateBusinessCenters() bool {
	return m.Has(tag.NoPaymentStreamPaymentDateBusinessCenters)
}

// HasPaymentStreamPaymentFrequencyPeriod returns true if PaymentStreamPaymentFrequencyPeriod is present, Tag 40753.
func (m NoStreams) HasPaymentStreamPaymentFrequencyPeriod() bool {
	return m.Has(tag.PaymentStreamPaymentFrequencyPeriod)
}

// HasPaymentStreamPaymentFrequencyUnit returns true if PaymentStreamPaymentFrequencyUnit is present, Tag 40754.
func (m NoStreams) HasPaymentStreamPaymentFrequencyUnit() bool {
	return m.Has(tag.PaymentStreamPaymentFrequencyUnit)
}

// HasPaymentStreamPaymentRollConvention returns true if PaymentStreamPaymentRollConvention is present, Tag 40755.
func (m NoStreams) HasPaymentStreamPaymentRollConvention() bool {
	return m.Has(tag.PaymentStreamPaymentRollConvention)
}

// HasPaymentStreamFirstPaymentDateUnadjusted returns true if PaymentStreamFirstPaymentDateUnadjusted is present, Tag 40756.
func (m NoStreams) HasPaymentStreamFirstPaymentDateUnadjusted() bool {
	return m.Has(tag.PaymentStreamFirstPaymentDateUnadjusted)
}

// HasPaymentStreamLastRegularPaymentDateUnadjusted returns true if PaymentStreamLastRegularPaymentDateUnadjusted is present, Tag 40757.
func (m NoStreams) HasPaymentStreamLastRegularPaymentDateUnadjusted() bool {
	return m.Has(tag.PaymentStreamLastRegularPaymentDateUnadjusted)
}

// HasPaymentStreamPaymentDateRelativeTo returns true if PaymentStreamPaymentDateRelativeTo is present, Tag 40758.
func (m NoStreams) HasPaymentStreamPaymentDateRelativeTo() bool {
	return m.Has(tag.PaymentStreamPaymentDateRelativeTo)
}

// HasPaymentStreamPaymentDateOffsetPeriod returns true if PaymentStreamPaymentDateOffsetPeriod is present, Tag 40759.
func (m NoStreams) HasPaymentStreamPaymentDateOffsetPeriod() bool {
	return m.Has(tag.PaymentStreamPaymentDateOffsetPeriod)
}

// HasPaymentStreamPaymentDateOffsetUnit returns true if PaymentStreamPaymentDateOffsetUnit is present, Tag 40760.
func (m NoStreams) HasPaymentStreamPaymentDateOffsetUnit() bool {
	return m.Has(tag.PaymentStreamPaymentDateOffsetUnit)
}

// HasPaymentStreamPaymentDateOffsetDayType returns true if PaymentStreamPaymentDateOffsetDayType is present, Tag 40920.
func (m NoStreams) HasPaymentStreamPaymentDateOffsetDayType() bool {
	return m.Has(tag.PaymentStreamPaymentDateOffsetDayType)
}

// HasNoPaymentStreamPaymentDates returns true if NoPaymentStreamPaymentDates is present, Tag 41220.
func (m NoStreams) HasNoPaymentStreamPaymentDates() bool {
	return m.Has(tag.NoPaymentStreamPaymentDates)
}

// HasPaymentStreamMasterAgreementPaymentDatesIndicator returns true if PaymentStreamMasterAgreementPaymentDatesIndicator is present, Tag 41223.
func (m NoStreams) HasPaymentStreamMasterAgreementPaymentDatesIndicator() bool {
	return m.Has(tag.PaymentStreamMasterAgreementPaymentDatesIndicator)
}

// HasPaymentStreamFinalPricePaymentDateUnadjusted returns true if PaymentStreamFinalPricePaymentDateUnadjusted is present, Tag 42654.
func (m NoStreams) HasPaymentStreamFinalPricePaymentDateUnadjusted() bool {
	return m.Has(tag.PaymentStreamFinalPricePaymentDateUnadjusted)
}

// HasPaymentStreamFinalPricePaymentDateRelativeTo returns true if PaymentStreamFinalPricePaymentDateRelativeTo is present, Tag 42655.
func (m NoStreams) HasPaymentStreamFinalPricePaymentDateRelativeTo() bool {
	return m.Has(tag.PaymentStreamFinalPricePaymentDateRelativeTo)
}

// HasPaymentStreamFinalPricePaymentDateOffsetfPeriod returns true if PaymentStreamFinalPricePaymentDateOffsetfPeriod is present, Tag 42656.
func (m NoStreams) HasPaymentStreamFinalPricePaymentDateOffsetfPeriod() bool {
	return m.Has(tag.PaymentStreamFinalPricePaymentDateOffsetfPeriod)
}

// HasPaymentStreamFinalPricePaymentDateOffsetUnit returns true if PaymentStreamFinalPricePaymentDateOffsetUnit is present, Tag 42657.
func (m NoStreams) HasPaymentStreamFinalPricePaymentDateOffsetUnit() bool {
	return m.Has(tag.PaymentStreamFinalPricePaymentDateOffsetUnit)
}

// HasPaymentStreamFinalPricePaymentDateOffsetDayType returns true if PaymentStreamFinalPricePaymentDateOffsetDayType is present, Tag 42658.
func (m NoStreams) HasPaymentStreamFinalPricePaymentDateOffsetDayType() bool {
	return m.Has(tag.PaymentStreamFinalPricePaymentDateOffsetDayType)
}

// HasPaymentStreamFinalPricePaymentDateAdjusted returns true if PaymentStreamFinalPricePaymentDateAdjusted is present, Tag 42659.
func (m NoStreams) HasPaymentStreamFinalPricePaymentDateAdjusted() bool {
	return m.Has(tag.PaymentStreamFinalPricePaymentDateAdjusted)
}

// HasPaymentStreamResetDateRelativeTo returns true if PaymentStreamResetDateRelativeTo is present, Tag 40761.
func (m NoStreams) HasPaymentStreamResetDateRelativeTo() bool {
	return m.Has(tag.PaymentStreamResetDateRelativeTo)
}

// HasPaymentStreamResetDateBusinessDayConvention returns true if PaymentStreamResetDateBusinessDayConvention is present, Tag 40762.
func (m NoStreams) HasPaymentStreamResetDateBusinessDayConvention() bool {
	return m.Has(tag.PaymentStreamResetDateBusinessDayConvention)
}

// HasNoPaymentStreamResetDateBusinessCenters returns true if NoPaymentStreamResetDateBusinessCenters is present, Tag 40948.
func (m NoStreams) HasNoPaymentStreamResetDateBusinessCenters() bool {
	return m.Has(tag.NoPaymentStreamResetDateBusinessCenters)
}

// HasPaymentStreamResetFrequencyPeriod returns true if PaymentStreamResetFrequencyPeriod is present, Tag 40764.
func (m NoStreams) HasPaymentStreamResetFrequencyPeriod() bool {
	return m.Has(tag.PaymentStreamResetFrequencyPeriod)
}

// HasPaymentStreamResetFrequencyUnit returns true if PaymentStreamResetFrequencyUnit is present, Tag 40765.
func (m NoStreams) HasPaymentStreamResetFrequencyUnit() bool {
	return m.Has(tag.PaymentStreamResetFrequencyUnit)
}

// HasPaymentStreamResetWeeklyRollConvention returns true if PaymentStreamResetWeeklyRollConvention is present, Tag 40766.
func (m NoStreams) HasPaymentStreamResetWeeklyRollConvention() bool {
	return m.Has(tag.PaymentStreamResetWeeklyRollConvention)
}

// HasPaymentStreamInitialFixingDateRelativeTo returns true if PaymentStreamInitialFixingDateRelativeTo is present, Tag 40767.
func (m NoStreams) HasPaymentStreamInitialFixingDateRelativeTo() bool {
	return m.Has(tag.PaymentStreamInitialFixingDateRelativeTo)
}

// HasPaymentStreamInitialFixingDateBusinessDayConvention returns true if PaymentStreamInitialFixingDateBusinessDayConvention is present, Tag 40768.
func (m NoStreams) HasPaymentStreamInitialFixingDateBusinessDayConvention() bool {
	return m.Has(tag.PaymentStreamInitialFixingDateBusinessDayConvention)
}

// HasNoPaymentStreamInitialFixingDateBusinessCenters returns true if NoPaymentStreamInitialFixingDateBusinessCenters is present, Tag 40949.
func (m NoStreams) HasNoPaymentStreamInitialFixingDateBusinessCenters() bool {
	return m.Has(tag.NoPaymentStreamInitialFixingDateBusinessCenters)
}

// HasPaymentStreamInitialFixingDateOffsetPeriod returns true if PaymentStreamInitialFixingDateOffsetPeriod is present, Tag 40770.
func (m NoStreams) HasPaymentStreamInitialFixingDateOffsetPeriod() bool {
	return m.Has(tag.PaymentStreamInitialFixingDateOffsetPeriod)
}

// HasPaymentStreamInitialFixingDateOffsetUnit returns true if PaymentStreamInitialFixingDateOffsetUnit is present, Tag 40771.
func (m NoStreams) HasPaymentStreamInitialFixingDateOffsetUnit() bool {
	return m.Has(tag.PaymentStreamInitialFixingDateOffsetUnit)
}

// HasPaymentStreamInitialFixingDateOffsetDayType returns true if PaymentStreamInitialFixingDateOffsetDayType is present, Tag 40772.
func (m NoStreams) HasPaymentStreamInitialFixingDateOffsetDayType() bool {
	return m.Has(tag.PaymentStreamInitialFixingDateOffsetDayType)
}

// HasPaymentStreamInitialFixingDateAdjusted returns true if PaymentStreamInitialFixingDateAdjusted is present, Tag 40773.
func (m NoStreams) HasPaymentStreamInitialFixingDateAdjusted() bool {
	return m.Has(tag.PaymentStreamInitialFixingDateAdjusted)
}

// HasPaymentStreamFixingDateRelativeTo returns true if PaymentStreamFixingDateRelativeTo is present, Tag 40774.
func (m NoStreams) HasPaymentStreamFixingDateRelativeTo() bool {
	return m.Has(tag.PaymentStreamFixingDateRelativeTo)
}

// HasPaymentStreamFixingDateBusinessDayConvention returns true if PaymentStreamFixingDateBusinessDayConvention is present, Tag 40775.
func (m NoStreams) HasPaymentStreamFixingDateBusinessDayConvention() bool {
	return m.Has(tag.PaymentStreamFixingDateBusinessDayConvention)
}

// HasNoPaymentStreamFixingDateBusinessCenters returns true if NoPaymentStreamFixingDateBusinessCenters is present, Tag 40950.
func (m NoStreams) HasNoPaymentStreamFixingDateBusinessCenters() bool {
	return m.Has(tag.NoPaymentStreamFixingDateBusinessCenters)
}

// HasPaymentStreamFixingDateOffsetPeriod returns true if PaymentStreamFixingDateOffsetPeriod is present, Tag 40777.
func (m NoStreams) HasPaymentStreamFixingDateOffsetPeriod() bool {
	return m.Has(tag.PaymentStreamFixingDateOffsetPeriod)
}

// HasPaymentStreamFixingDateOffsetUnit returns true if PaymentStreamFixingDateOffsetUnit is present, Tag 40778.
func (m NoStreams) HasPaymentStreamFixingDateOffsetUnit() bool {
	return m.Has(tag.PaymentStreamFixingDateOffsetUnit)
}

// HasPaymentStreamFixingDateOffsetDayType returns true if PaymentStreamFixingDateOffsetDayType is present, Tag 40779.
func (m NoStreams) HasPaymentStreamFixingDateOffsetDayType() bool {
	return m.Has(tag.PaymentStreamFixingDateOffsetDayType)
}

// HasPaymentStreamFixingDateAdjusted returns true if PaymentStreamFixingDateAdjusted is present, Tag 40780.
func (m NoStreams) HasPaymentStreamFixingDateAdjusted() bool {
	return m.Has(tag.PaymentStreamFixingDateAdjusted)
}

// HasPaymentStreamRateCutoffDateOffsetPeriod returns true if PaymentStreamRateCutoffDateOffsetPeriod is present, Tag 40781.
func (m NoStreams) HasPaymentStreamRateCutoffDateOffsetPeriod() bool {
	return m.Has(tag.PaymentStreamRateCutoffDateOffsetPeriod)
}

// HasPaymentStreamRateCutoffDateOffsetUnit returns true if PaymentStreamRateCutoffDateOffsetUnit is present, Tag 40782.
func (m NoStreams) HasPaymentStreamRateCutoffDateOffsetUnit() bool {
	return m.Has(tag.PaymentStreamRateCutoffDateOffsetUnit)
}

// HasPaymentStreamRateCutoffDateOffsetDayType returns true if PaymentStreamRateCutoffDateOffsetDayType is present, Tag 40783.
func (m NoStreams) HasPaymentStreamRateCutoffDateOffsetDayType() bool {
	return m.Has(tag.PaymentStreamRateCutoffDateOffsetDayType)
}

// HasNoPaymentStreamFixingDates returns true if NoPaymentStreamFixingDates is present, Tag 42660.
func (m NoStreams) HasNoPaymentStreamFixingDates() bool {
	return m.Has(tag.NoPaymentStreamFixingDates)
}

// HasPaymentStreamRate returns true if PaymentStreamRate is present, Tag 40784.
func (m NoStreams) HasPaymentStreamRate() bool {
	return m.Has(tag.PaymentStreamRate)
}

// HasPaymentStreamFixedAmount returns true if PaymentStreamFixedAmount is present, Tag 40785.
func (m NoStreams) HasPaymentStreamFixedAmount() bool {
	return m.Has(tag.PaymentStreamFixedAmount)
}

// HasPaymentStreamRateOrAmountCurrency returns true if PaymentStreamRateOrAmountCurrency is present, Tag 40786.
func (m NoStreams) HasPaymentStreamRateOrAmountCurrency() bool {
	return m.Has(tag.PaymentStreamRateOrAmountCurrency)
}

// HasPaymentStreamFutureValueNotional returns true if PaymentStreamFutureValueNotional is present, Tag 40787.
func (m NoStreams) HasPaymentStreamFutureValueNotional() bool {
	return m.Has(tag.PaymentStreamFutureValueNotional)
}

// HasPaymentStreamFutureValueDateAdjusted returns true if PaymentStreamFutureValueDateAdjusted is present, Tag 40788.
func (m NoStreams) HasPaymentStreamFutureValueDateAdjusted() bool {
	return m.Has(tag.PaymentStreamFutureValueDateAdjusted)
}

// HasPaymentStreamFixedAmountUnitOfMeasure returns true if PaymentStreamFixedAmountUnitOfMeasure is present, Tag 41187.
func (m NoStreams) HasPaymentStreamFixedAmountUnitOfMeasure() bool {
	return m.Has(tag.PaymentStreamFixedAmountUnitOfMeasure)
}

// HasPaymentStreamTotalFixedAmount returns true if PaymentStreamTotalFixedAmount is present, Tag 41188.
func (m NoStreams) HasPaymentStreamTotalFixedAmount() bool {
	return m.Has(tag.PaymentStreamTotalFixedAmount)
}

// HasPaymentStreamWorldScaleRate returns true if PaymentStreamWorldScaleRate is present, Tag 41189.
func (m NoStreams) HasPaymentStreamWorldScaleRate() bool {
	return m.Has(tag.PaymentStreamWorldScaleRate)
}

// HasPaymentStreamContractPrice returns true if PaymentStreamContractPrice is present, Tag 41190.
func (m NoStreams) HasPaymentStreamContractPrice() bool {
	return m.Has(tag.PaymentStreamContractPrice)
}

// HasPaymentStreamContractPriceCurrency returns true if PaymentStreamContractPriceCurrency is present, Tag 41191.
func (m NoStreams) HasPaymentStreamContractPriceCurrency() bool {
	return m.Has(tag.PaymentStreamContractPriceCurrency)
}

// HasPaymentStreamRateIndex returns true if PaymentStreamRateIndex is present, Tag 40789.
func (m NoStreams) HasPaymentStreamRateIndex() bool {
	return m.Has(tag.PaymentStreamRateIndex)
}

// HasPaymentStreamRateIndexSource returns true if PaymentStreamRateIndexSource is present, Tag 40790.
func (m NoStreams) HasPaymentStreamRateIndexSource() bool {
	return m.Has(tag.PaymentStreamRateIndexSource)
}

// HasPaymentStreamRateIndexCurveUnit returns true if PaymentStreamRateIndexCurveUnit is present, Tag 40791.
func (m NoStreams) HasPaymentStreamRateIndexCurveUnit() bool {
	return m.Has(tag.PaymentStreamRateIndexCurveUnit)
}

// HasPaymentStreamRateIndexCurvePeriod returns true if PaymentStreamRateIndexCurvePeriod is present, Tag 40792.
func (m NoStreams) HasPaymentStreamRateIndexCurvePeriod() bool {
	return m.Has(tag.PaymentStreamRateIndexCurvePeriod)
}

// HasPaymentStreamRateMultiplier returns true if PaymentStreamRateMultiplier is present, Tag 40793.
func (m NoStreams) HasPaymentStreamRateMultiplier() bool {
	return m.Has(tag.PaymentStreamRateMultiplier)
}

// HasPaymentStreamRateSpread returns true if PaymentStreamRateSpread is present, Tag 40794.
func (m NoStreams) HasPaymentStreamRateSpread() bool {
	return m.Has(tag.PaymentStreamRateSpread)
}

// HasPaymentStreamRateSpreadPositionType returns true if PaymentStreamRateSpreadPositionType is present, Tag 40795.
func (m NoStreams) HasPaymentStreamRateSpreadPositionType() bool {
	return m.Has(tag.PaymentStreamRateSpreadPositionType)
}

// HasPaymentStreamRateTreatment returns true if PaymentStreamRateTreatment is present, Tag 40796.
func (m NoStreams) HasPaymentStreamRateTreatment() bool {
	return m.Has(tag.PaymentStreamRateTreatment)
}

// HasPaymentStreamCapRate returns true if PaymentStreamCapRate is present, Tag 40797.
func (m NoStreams) HasPaymentStreamCapRate() bool {
	return m.Has(tag.PaymentStreamCapRate)
}

// HasPaymentStreamCapRateBuySide returns true if PaymentStreamCapRateBuySide is present, Tag 40798.
func (m NoStreams) HasPaymentStreamCapRateBuySide() bool {
	return m.Has(tag.PaymentStreamCapRateBuySide)
}

// HasPaymentStreamCapRateSellSide returns true if PaymentStreamCapRateSellSide is present, Tag 40799.
func (m NoStreams) HasPaymentStreamCapRateSellSide() bool {
	return m.Has(tag.PaymentStreamCapRateSellSide)
}

// HasPaymentStreamFloorRate returns true if PaymentStreamFloorRate is present, Tag 40800.
func (m NoStreams) HasPaymentStreamFloorRate() bool {
	return m.Has(tag.PaymentStreamFloorRate)
}

// HasPaymentStreamFloorRateBuySide returns true if PaymentStreamFloorRateBuySide is present, Tag 40801.
func (m NoStreams) HasPaymentStreamFloorRateBuySide() bool {
	return m.Has(tag.PaymentStreamFloorRateBuySide)
}

// HasPaymentStreamFloorRateSellSide returns true if PaymentStreamFloorRateSellSide is present, Tag 40802.
func (m NoStreams) HasPaymentStreamFloorRateSellSide() bool {
	return m.Has(tag.PaymentStreamFloorRateSellSide)
}

// HasPaymentStreamInitialRate returns true if PaymentStreamInitialRate is present, Tag 40803.
func (m NoStreams) HasPaymentStreamInitialRate() bool {
	return m.Has(tag.PaymentStreamInitialRate)
}

// HasPaymentStreamFinalRateRoundingDirection returns true if PaymentStreamFinalRateRoundingDirection is present, Tag 40804.
func (m NoStreams) HasPaymentStreamFinalRateRoundingDirection() bool {
	return m.Has(tag.PaymentStreamFinalRateRoundingDirection)
}

// HasPaymentStreamFinalRatePrecision returns true if PaymentStreamFinalRatePrecision is present, Tag 40805.
func (m NoStreams) HasPaymentStreamFinalRatePrecision() bool {
	return m.Has(tag.PaymentStreamFinalRatePrecision)
}

// HasPaymentStreamAveragingMethod returns true if PaymentStreamAveragingMethod is present, Tag 40806.
func (m NoStreams) HasPaymentStreamAveragingMethod() bool {
	return m.Has(tag.PaymentStreamAveragingMethod)
}

// HasPaymentStreamNegativeRateTreatment returns true if PaymentStreamNegativeRateTreatment is present, Tag 40807.
func (m NoStreams) HasPaymentStreamNegativeRateTreatment() bool {
	return m.Has(tag.PaymentStreamNegativeRateTreatment)
}

// HasPaymentStreamInflationLagPeriod returns true if PaymentStreamInflationLagPeriod is present, Tag 40808.
func (m NoStreams) HasPaymentStreamInflationLagPeriod() bool {
	return m.Has(tag.PaymentStreamInflationLagPeriod)
}

// HasPaymentStreamInflationLagUnit returns true if PaymentStreamInflationLagUnit is present, Tag 40809.
func (m NoStreams) HasPaymentStreamInflationLagUnit() bool {
	return m.Has(tag.PaymentStreamInflationLagUnit)
}

// HasPaymentStreamInflationLagDayType returns true if PaymentStreamInflationLagDayType is present, Tag 40810.
func (m NoStreams) HasPaymentStreamInflationLagDayType() bool {
	return m.Has(tag.PaymentStreamInflationLagDayType)
}

// HasPaymentStreamInflationInterpolationMethod returns true if PaymentStreamInflationInterpolationMethod is present, Tag 40811.
func (m NoStreams) HasPaymentStreamInflationInterpolationMethod() bool {
	return m.Has(tag.PaymentStreamInflationInterpolationMethod)
}

// HasPaymentStreamInflationIndexSource returns true if PaymentStreamInflationIndexSource is present, Tag 40812.
func (m NoStreams) HasPaymentStreamInflationIndexSource() bool {
	return m.Has(tag.PaymentStreamInflationIndexSource)
}

// HasPaymentStreamInflationPublicationSource returns true if PaymentStreamInflationPublicationSource is present, Tag 40813.
func (m NoStreams) HasPaymentStreamInflationPublicationSource() bool {
	return m.Has(tag.PaymentStreamInflationPublicationSource)
}

// HasPaymentStreamInflationInitialIndexLevel returns true if PaymentStreamInflationInitialIndexLevel is present, Tag 40814.
func (m NoStreams) HasPaymentStreamInflationInitialIndexLevel() bool {
	return m.Has(tag.PaymentStreamInflationInitialIndexLevel)
}

// HasPaymentStreamInflationFallbackBondApplicable returns true if PaymentStreamInflationFallbackBondApplicable is present, Tag 40815.
func (m NoStreams) HasPaymentStreamInflationFallbackBondApplicable() bool {
	return m.Has(tag.PaymentStreamInflationFallbackBondApplicable)
}

// HasPaymentStreamFRADiscounting returns true if PaymentStreamFRADiscounting is present, Tag 40816.
func (m NoStreams) HasPaymentStreamFRADiscounting() bool {
	return m.Has(tag.PaymentStreamFRADiscounting)
}

// HasPaymentStreamRateIndex2CurvePeriod returns true if PaymentStreamRateIndex2CurvePeriod is present, Tag 41194.
func (m NoStreams) HasPaymentStreamRateIndex2CurvePeriod() bool {
	return m.Has(tag.PaymentStreamRateIndex2CurvePeriod)
}

// HasPaymentStreamRateIndex2CurveUnit returns true if PaymentStreamRateIndex2CurveUnit is present, Tag 41195.
func (m NoStreams) HasPaymentStreamRateIndex2CurveUnit() bool {
	return m.Has(tag.PaymentStreamRateIndex2CurveUnit)
}

// HasPaymentStreamRateIndexLocation returns true if PaymentStreamRateIndexLocation is present, Tag 41196.
func (m NoStreams) HasPaymentStreamRateIndexLocation() bool {
	return m.Has(tag.PaymentStreamRateIndexLocation)
}

// HasPaymentStreamRateIndexLevel returns true if PaymentStreamRateIndexLevel is present, Tag 41197.
func (m NoStreams) HasPaymentStreamRateIndexLevel() bool {
	return m.Has(tag.PaymentStreamRateIndexLevel)
}

// HasPaymentStreamRateIndexUnitOfMeasure returns true if PaymentStreamRateIndexUnitOfMeasure is present, Tag 41198.
func (m NoStreams) HasPaymentStreamRateIndexUnitOfMeasure() bool {
	return m.Has(tag.PaymentStreamRateIndexUnitOfMeasure)
}

// HasPaymentStreamSettlLevel returns true if PaymentStreamSettlLevel is present, Tag 41199.
func (m NoStreams) HasPaymentStreamSettlLevel() bool {
	return m.Has(tag.PaymentStreamSettlLevel)
}

// HasPaymentStreamReferenceLevel returns true if PaymentStreamReferenceLevel is present, Tag 41200.
func (m NoStreams) HasPaymentStreamReferenceLevel() bool {
	return m.Has(tag.PaymentStreamReferenceLevel)
}

// HasPaymentStreamReferenceLevelUnitOfMeasure returns true if PaymentStreamReferenceLevelUnitOfMeasure is present, Tag 41201.
func (m NoStreams) HasPaymentStreamReferenceLevelUnitOfMeasure() bool {
	return m.Has(tag.PaymentStreamReferenceLevelUnitOfMeasure)
}

// HasPaymentStreamReferenceLevelEqualsZeroIndicator returns true if PaymentStreamReferenceLevelEqualsZeroIndicator is present, Tag 41202.
func (m NoStreams) HasPaymentStreamReferenceLevelEqualsZeroIndicator() bool {
	return m.Has(tag.PaymentStreamReferenceLevelEqualsZeroIndicator)
}

// HasPaymentStreamRateSpreadCurrency returns true if PaymentStreamRateSpreadCurrency is present, Tag 41203.
func (m NoStreams) HasPaymentStreamRateSpreadCurrency() bool {
	return m.Has(tag.PaymentStreamRateSpreadCurrency)
}

// HasPaymentStreamRateSpreadUnitOfMeasure returns true if PaymentStreamRateSpreadUnitOfMeasure is present, Tag 41204.
func (m NoStreams) HasPaymentStreamRateSpreadUnitOfMeasure() bool {
	return m.Has(tag.PaymentStreamRateSpreadUnitOfMeasure)
}

// HasPaymentStreamRateConversionFactor returns true if PaymentStreamRateConversionFactor is present, Tag 41205.
func (m NoStreams) HasPaymentStreamRateConversionFactor() bool {
	return m.Has(tag.PaymentStreamRateConversionFactor)
}

// HasPaymentStreamRateSpreadType returns true if PaymentStreamRateSpreadType is present, Tag 41206.
func (m NoStreams) HasPaymentStreamRateSpreadType() bool {
	return m.Has(tag.PaymentStreamRateSpreadType)
}

// HasPaymentStreamLastResetRate returns true if PaymentStreamLastResetRate is present, Tag 41207.
func (m NoStreams) HasPaymentStreamLastResetRate() bool {
	return m.Has(tag.PaymentStreamLastResetRate)
}

// HasPaymentStreamFinalRate returns true if PaymentStreamFinalRate is present, Tag 41208.
func (m NoStreams) HasPaymentStreamFinalRate() bool {
	return m.Has(tag.PaymentStreamFinalRate)
}

// HasPaymentStreamCalculationLagPeriod returns true if PaymentStreamCalculationLagPeriod is present, Tag 41209.
func (m NoStreams) HasPaymentStreamCalculationLagPeriod() bool {
	return m.Has(tag.PaymentStreamCalculationLagPeriod)
}

// HasPaymentStreamCalculationLagUnit returns true if PaymentStreamCalculationLagUnit is present, Tag 41210.
func (m NoStreams) HasPaymentStreamCalculationLagUnit() bool {
	return m.Has(tag.PaymentStreamCalculationLagUnit)
}

// HasPaymentStreamFirstObservationDateOffsetPeriod returns true if PaymentStreamFirstObservationDateOffsetPeriod is present, Tag 41211.
func (m NoStreams) HasPaymentStreamFirstObservationDateOffsetPeriod() bool {
	return m.Has(tag.PaymentStreamFirstObservationDateOffsetPeriod)
}

// HasPaymentStreamFirstObservationDateOffsetUnit returns true if PaymentStreamFirstObservationDateOffsetUnit is present, Tag 41212.
func (m NoStreams) HasPaymentStreamFirstObservationDateOffsetUnit() bool {
	return m.Has(tag.PaymentStreamFirstObservationDateOffsetUnit)
}

// HasPaymentStreamPricingDayType returns true if PaymentStreamPricingDayType is present, Tag 41213.
func (m NoStreams) HasPaymentStreamPricingDayType() bool {
	return m.Has(tag.PaymentStreamPricingDayType)
}

// HasPaymentStreamPricingDayDistribution returns true if PaymentStreamPricingDayDistribution is present, Tag 41214.
func (m NoStreams) HasPaymentStreamPricingDayDistribution() bool {
	return m.Has(tag.PaymentStreamPricingDayDistribution)
}

// HasPaymentStreamPricingDayCount returns true if PaymentStreamPricingDayCount is present, Tag 41215.
func (m NoStreams) HasPaymentStreamPricingDayCount() bool {
	return m.Has(tag.PaymentStreamPricingDayCount)
}

// HasPaymentStreamPricingBusinessCalendar returns true if PaymentStreamPricingBusinessCalendar is present, Tag 41216.
func (m NoStreams) HasPaymentStreamPricingBusinessCalendar() bool {
	return m.Has(tag.PaymentStreamPricingBusinessCalendar)
}

// HasPaymentStreamPricingBusinessDayConvention returns true if PaymentStreamPricingBusinessDayConvention is present, Tag 41217.
func (m NoStreams) HasPaymentStreamPricingBusinessDayConvention() bool {
	return m.Has(tag.PaymentStreamPricingBusinessDayConvention)
}

// HasNoPaymentStreamPricingBusinessCenters returns true if NoPaymentStreamPricingBusinessCenters is present, Tag 41192.
func (m NoStreams) HasNoPaymentStreamPricingBusinessCenters() bool {
	return m.Has(tag.NoPaymentStreamPricingBusinessCenters)
}

// HasNoPaymentStreamPricingDays returns true if NoPaymentStreamPricingDays is present, Tag 41227.
func (m NoStreams) HasNoPaymentStreamPricingDays() bool {
	return m.Has(tag.NoPaymentStreamPricingDays)
}

// HasNoPaymentStreamPricingDates returns true if NoPaymentStreamPricingDates is present, Tag 41224.
func (m NoStreams) HasNoPaymentStreamPricingDates() bool {
	return m.Has(tag.NoPaymentStreamPricingDates)
}

// HasPaymentStreamFirstObservationDateUnadjusted returns true if PaymentStreamFirstObservationDateUnadjusted is present, Tag 42663.
func (m NoStreams) HasPaymentStreamFirstObservationDateUnadjusted() bool {
	return m.Has(tag.PaymentStreamFirstObservationDateUnadjusted)
}

// HasPaymentStreamFirstObservationDateRelativeTo returns true if PaymentStreamFirstObservationDateRelativeTo is present, Tag 42664.
func (m NoStreams) HasPaymentStreamFirstObservationDateRelativeTo() bool {
	return m.Has(tag.PaymentStreamFirstObservationDateRelativeTo)
}

// HasPaymentStreamFirstObservationDateOffsetDayType returns true if PaymentStreamFirstObservationDateOffsetDayType is present, Tag 42665.
func (m NoStreams) HasPaymentStreamFirstObservationDateOffsetDayType() bool {
	return m.Has(tag.PaymentStreamFirstObservationDateOffsetDayType)
}

// HasPaymentStreamFirstObservationDateAdjusted returns true if PaymentStreamFirstObservationDateAdjusted is present, Tag 42666.
func (m NoStreams) HasPaymentStreamFirstObservationDateAdjusted() bool {
	return m.Has(tag.PaymentStreamFirstObservationDateAdjusted)
}

// HasPaymentStreamUnderlierRefID returns true if PaymentStreamUnderlierRefID is present, Tag 42667.
func (m NoStreams) HasPaymentStreamUnderlierRefID() bool {
	return m.Has(tag.PaymentStreamUnderlierRefID)
}

// HasPaymentStreamFormulaCurrency returns true if PaymentStreamFormulaCurrency is present, Tag 42686.
func (m NoStreams) HasPaymentStreamFormulaCurrency() bool {
	return m.Has(tag.PaymentStreamFormulaCurrency)
}

// HasPaymentStreamFormulaCurrencyDeterminationMethod returns true if PaymentStreamFormulaCurrencyDeterminationMethod is present, Tag 42687.
func (m NoStreams) HasPaymentStreamFormulaCurrencyDeterminationMethod() bool {
	return m.Has(tag.PaymentStreamFormulaCurrencyDeterminationMethod)
}

// HasPaymentStreamFormulaReferenceAmount returns true if PaymentStreamFormulaReferenceAmount is present, Tag 42688.
func (m NoStreams) HasPaymentStreamFormulaReferenceAmount() bool {
	return m.Has(tag.PaymentStreamFormulaReferenceAmount)
}

// HasNoPaymentStreamFormulas returns true if NoPaymentStreamFormulas is present, Tag 42683.
func (m NoStreams) HasNoPaymentStreamFormulas() bool {
	return m.Has(tag.NoPaymentStreamFormulas)
}

// HasPaymentStreamFormulaImageLength returns true if PaymentStreamFormulaImageLength is present, Tag 42652.
func (m NoStreams) HasPaymentStreamFormulaImageLength() bool {
	return m.Has(tag.PaymentStreamFormulaImageLength)
}

// HasPaymentStreamFormulaImage returns true if PaymentStreamFormulaImage is present, Tag 42653.
func (m NoStreams) HasPaymentStreamFormulaImage() bool {
	return m.Has(tag.PaymentStreamFormulaImage)
}

// HasDividendReinvestmentIndicator returns true if DividendReinvestmentIndicator is present, Tag 42245.
func (m NoStreams) HasDividendReinvestmentIndicator() bool {
	return m.Has(tag.DividendReinvestmentIndicator)
}

// HasDividendEntitlementEvent returns true if DividendEntitlementEvent is present, Tag 42246.
func (m NoStreams) HasDividendEntitlementEvent() bool {
	return m.Has(tag.DividendEntitlementEvent)
}

// HasDividendAmountType returns true if DividendAmountType is present, Tag 42247.
func (m NoStreams) HasDividendAmountType() bool {
	return m.Has(tag.DividendAmountType)
}

// HasDividendUnderlierRefID returns true if DividendUnderlierRefID is present, Tag 42248.
func (m NoStreams) HasDividendUnderlierRefID() bool {
	return m.Has(tag.DividendUnderlierRefID)
}

// HasNoDividendPeriods returns true if NoDividendPeriods is present, Tag 42274.
func (m NoStreams) HasNoDividendPeriods() bool {
	return m.Has(tag.NoDividendPeriods)
}

// HasExtraordinaryDividendPartySide returns true if ExtraordinaryDividendPartySide is present, Tag 42249.
func (m NoStreams) HasExtraordinaryDividendPartySide() bool {
	return m.Has(tag.ExtraordinaryDividendPartySide)
}

// HasExtraordinaryDividendAmountType returns true if ExtraordinaryDividendAmountType is present, Tag 42250.
func (m NoStreams) HasExtraordinaryDividendAmountType() bool {
	return m.Has(tag.ExtraordinaryDividendAmountType)
}

// HasExtraordinaryDividendCurrency returns true if ExtraordinaryDividendCurrency is present, Tag 42251.
func (m NoStreams) HasExtraordinaryDividendCurrency() bool {
	return m.Has(tag.ExtraordinaryDividendCurrency)
}

// HasExtraordinaryDividendDeterminationMethod returns true if ExtraordinaryDividendDeterminationMethod is present, Tag 42252.
func (m NoStreams) HasExtraordinaryDividendDeterminationMethod() bool {
	return m.Has(tag.ExtraordinaryDividendDeterminationMethod)
}

// HasDividendFXTriggerDateRelativeTo returns true if DividendFXTriggerDateRelativeTo is present, Tag 42265.
func (m NoStreams) HasDividendFXTriggerDateRelativeTo() bool {
	return m.Has(tag.DividendFXTriggerDateRelativeTo)
}

// HasDividendFXTriggerDateOffsetPeriod returns true if DividendFXTriggerDateOffsetPeriod is present, Tag 42266.
func (m NoStreams) HasDividendFXTriggerDateOffsetPeriod() bool {
	return m.Has(tag.DividendFXTriggerDateOffsetPeriod)
}

// HasDividendFXTriggerDateOffsetUnit returns true if DividendFXTriggerDateOffsetUnit is present, Tag 42267.
func (m NoStreams) HasDividendFXTriggerDateOffsetUnit() bool {
	return m.Has(tag.DividendFXTriggerDateOffsetUnit)
}

// HasDividendFXTriggerDateOffsetDayType returns true if DividendFXTriggerDateOffsetDayType is present, Tag 42268.
func (m NoStreams) HasDividendFXTriggerDateOffsetDayType() bool {
	return m.Has(tag.DividendFXTriggerDateOffsetDayType)
}

// HasDividendFXTriggerDateUnadjusted returns true if DividendFXTriggerDateUnadjusted is present, Tag 42269.
func (m NoStreams) HasDividendFXTriggerDateUnadjusted() bool {
	return m.Has(tag.DividendFXTriggerDateUnadjusted)
}

// HasDividendFXTriggerDateBusinessDayConvention returns true if DividendFXTriggerDateBusinessDayConvention is present, Tag 42270.
func (m NoStreams) HasDividendFXTriggerDateBusinessDayConvention() bool {
	return m.Has(tag.DividendFXTriggerDateBusinessDayConvention)
}

// HasNoDividendFXTriggerDateBusinessCenters returns true if NoDividendFXTriggerDateBusinessCenters is present, Tag 42272.
func (m NoStreams) HasNoDividendFXTriggerDateBusinessCenters() bool {
	return m.Has(tag.NoDividendFXTriggerDateBusinessCenters)
}

// HasDividendFXTriggerDateAdjusted returns true if DividendFXTriggerDateAdjusted is present, Tag 42271.
func (m NoStreams) HasDividendFXTriggerDateAdjusted() bool {
	return m.Has(tag.DividendFXTriggerDateAdjusted)
}

// HasDividendFloatingRateIndex returns true if DividendFloatingRateIndex is present, Tag 42218.
func (m NoStreams) HasDividendFloatingRateIndex() bool {
	return m.Has(tag.DividendFloatingRateIndex)
}

// HasDividendFloatingRateIndexCurvePeriod returns true if DividendFloatingRateIndexCurvePeriod is present, Tag 42219.
func (m NoStreams) HasDividendFloatingRateIndexCurvePeriod() bool {
	return m.Has(tag.DividendFloatingRateIndexCurvePeriod)
}

// HasDividendFloatingRateIndexCurveUnit returns true if DividendFloatingRateIndexCurveUnit is present, Tag 42220.
func (m NoStreams) HasDividendFloatingRateIndexCurveUnit() bool {
	return m.Has(tag.DividendFloatingRateIndexCurveUnit)
}

// HasDividendFloatingRateMultiplier returns true if DividendFloatingRateMultiplier is present, Tag 42221.
func (m NoStreams) HasDividendFloatingRateMultiplier() bool {
	return m.Has(tag.DividendFloatingRateMultiplier)
}

// HasDividendFloatingRateSpread returns true if DividendFloatingRateSpread is present, Tag 42222.
func (m NoStreams) HasDividendFloatingRateSpread() bool {
	return m.Has(tag.DividendFloatingRateSpread)
}

// HasDividendFloatingRateSpreadPositionType returns true if DividendFloatingRateSpreadPositionType is present, Tag 42223.
func (m NoStreams) HasDividendFloatingRateSpreadPositionType() bool {
	return m.Has(tag.DividendFloatingRateSpreadPositionType)
}

// HasDividendFloatingRateTreatment returns true if DividendFloatingRateTreatment is present, Tag 42224.
func (m NoStreams) HasDividendFloatingRateTreatment() bool {
	return m.Has(tag.DividendFloatingRateTreatment)
}

// HasDividendCapRate returns true if DividendCapRate is present, Tag 42225.
func (m NoStreams) HasDividendCapRate() bool {
	return m.Has(tag.DividendCapRate)
}

// HasDividendCapRateBuySide returns true if DividendCapRateBuySide is present, Tag 42226.
func (m NoStreams) HasDividendCapRateBuySide() bool {
	return m.Has(tag.DividendCapRateBuySide)
}

// HasDividendCapRateSellSide returns true if DividendCapRateSellSide is present, Tag 42227.
func (m NoStreams) HasDividendCapRateSellSide() bool {
	return m.Has(tag.DividendCapRateSellSide)
}

// HasDividendFloorRate returns true if DividendFloorRate is present, Tag 42228.
func (m NoStreams) HasDividendFloorRate() bool {
	return m.Has(tag.DividendFloorRate)
}

// HasDividendFloorRateBuySide returns true if DividendFloorRateBuySide is present, Tag 42229.
func (m NoStreams) HasDividendFloorRateBuySide() bool {
	return m.Has(tag.DividendFloorRateBuySide)
}

// HasDividendFloorRateSellSide returns true if DividendFloorRateSellSide is present, Tag 42230.
func (m NoStreams) HasDividendFloorRateSellSide() bool {
	return m.Has(tag.DividendFloorRateSellSide)
}

// HasDividendInitialRate returns true if DividendInitialRate is present, Tag 42231.
func (m NoStreams) HasDividendInitialRate() bool {
	return m.Has(tag.DividendInitialRate)
}

// HasDividendFinalRateRoundingDirection returns true if DividendFinalRateRoundingDirection is present, Tag 42232.
func (m NoStreams) HasDividendFinalRateRoundingDirection() bool {
	return m.Has(tag.DividendFinalRateRoundingDirection)
}

// HasDividendFinalRatePrecision returns true if DividendFinalRatePrecision is present, Tag 42233.
func (m NoStreams) HasDividendFinalRatePrecision() bool {
	return m.Has(tag.DividendFinalRatePrecision)
}

// HasDividendAveragingMethod returns true if DividendAveragingMethod is present, Tag 42234.
func (m NoStreams) HasDividendAveragingMethod() bool {
	return m.Has(tag.DividendAveragingMethod)
}

// HasDividendNegativeRateTreatment returns true if DividendNegativeRateTreatment is present, Tag 42235.
func (m NoStreams) HasDividendNegativeRateTreatment() bool {
	return m.Has(tag.DividendNegativeRateTreatment)
}

// HasDividendAccrualFixedRate returns true if DividendAccrualFixedRate is present, Tag 42253.
func (m NoStreams) HasDividendAccrualFixedRate() bool {
	return m.Has(tag.DividendAccrualFixedRate)
}

// HasDividendAccrualPaymentDateRelativeTo returns true if DividendAccrualPaymentDateRelativeTo is present, Tag 42238.
func (m NoStreams) HasDividendAccrualPaymentDateRelativeTo() bool {
	return m.Has(tag.DividendAccrualPaymentDateRelativeTo)
}

// HasDividendAccrualPaymentDateOffsetPeriod returns true if DividendAccrualPaymentDateOffsetPeriod is present, Tag 42239.
func (m NoStreams) HasDividendAccrualPaymentDateOffsetPeriod() bool {
	return m.Has(tag.DividendAccrualPaymentDateOffsetPeriod)
}

// HasDividendAccrualPaymentDateOffsetUnit returns true if DividendAccrualPaymentDateOffsetUnit is present, Tag 42240.
func (m NoStreams) HasDividendAccrualPaymentDateOffsetUnit() bool {
	return m.Has(tag.DividendAccrualPaymentDateOffsetUnit)
}

// HasDividendAccrualPaymentDateOffsetDayType returns true if DividendAccrualPaymentDateOffsetDayType is present, Tag 42241.
func (m NoStreams) HasDividendAccrualPaymentDateOffsetDayType() bool {
	return m.Has(tag.DividendAccrualPaymentDateOffsetDayType)
}

// HasDividendAccrualPaymentDateUnadjusted returns true if DividendAccrualPaymentDateUnadjusted is present, Tag 42242.
func (m NoStreams) HasDividendAccrualPaymentDateUnadjusted() bool {
	return m.Has(tag.DividendAccrualPaymentDateUnadjusted)
}

// HasDividendAccrualPaymeentDateBusinessDayConvention returns true if DividendAccrualPaymeentDateBusinessDayConvention is present, Tag 42243.
func (m NoStreams) HasDividendAccrualPaymeentDateBusinessDayConvention() bool {
	return m.Has(tag.DividendAccrualPaymeentDateBusinessDayConvention)
}

// HasNoDividendAccrualPaymentDateBusinessCenters returns true if NoDividendAccrualPaymentDateBusinessCenters is present, Tag 42236.
func (m NoStreams) HasNoDividendAccrualPaymentDateBusinessCenters() bool {
	return m.Has(tag.NoDividendAccrualPaymentDateBusinessCenters)
}

// HasDividendAccrualPaymentDateAdjusted returns true if DividendAccrualPaymentDateAdjusted is present, Tag 42244.
func (m NoStreams) HasDividendAccrualPaymentDateAdjusted() bool {
	return m.Has(tag.DividendAccrualPaymentDateAdjusted)
}

// HasDividendCompoundingMethod returns true if DividendCompoundingMethod is present, Tag 42254.
func (m NoStreams) HasDividendCompoundingMethod() bool {
	return m.Has(tag.DividendCompoundingMethod)
}

// HasDividendNumOfIndexUnits returns true if DividendNumOfIndexUnits is present, Tag 42255.
func (m NoStreams) HasDividendNumOfIndexUnits() bool {
	return m.Has(tag.DividendNumOfIndexUnits)
}

// HasDividendCashPercentage returns true if DividendCashPercentage is present, Tag 42256.
func (m NoStreams) HasDividendCashPercentage() bool {
	return m.Has(tag.DividendCashPercentage)
}

// HasDividendCashEquivalentPercentage returns true if DividendCashEquivalentPercentage is present, Tag 42257.
func (m NoStreams) HasDividendCashEquivalentPercentage() bool {
	return m.Has(tag.DividendCashEquivalentPercentage)
}

// HasNonCashDividendTreatment returns true if NonCashDividendTreatment is present, Tag 42258.
func (m NoStreams) HasNonCashDividendTreatment() bool {
	return m.Has(tag.NonCashDividendTreatment)
}

// HasDividendComposition returns true if DividendComposition is present, Tag 42259.
func (m NoStreams) HasDividendComposition() bool {
	return m.Has(tag.DividendComposition)
}

// HasSpecialDividendsIndicator returns true if SpecialDividendsIndicator is present, Tag 42260.
func (m NoStreams) HasSpecialDividendsIndicator() bool {
	return m.Has(tag.SpecialDividendsIndicator)
}

// HasMaterialDividendsIndicator returns true if MaterialDividendsIndicator is present, Tag 42261.
func (m NoStreams) HasMaterialDividendsIndicator() bool {
	return m.Has(tag.MaterialDividendsIndicator)
}

// HasOptionsExchangeDividendsIndicator returns true if OptionsExchangeDividendsIndicator is present, Tag 42262.
func (m NoStreams) HasOptionsExchangeDividendsIndicator() bool {
	return m.Has(tag.OptionsExchangeDividendsIndicator)
}

// HasAdditionalDividendsIndicator returns true if AdditionalDividendsIndicator is present, Tag 42263.
func (m NoStreams) HasAdditionalDividendsIndicator() bool {
	return m.Has(tag.AdditionalDividendsIndicator)
}

// HasAllDividendsIndicator returns true if AllDividendsIndicator is present, Tag 42264.
func (m NoStreams) HasAllDividendsIndicator() bool {
	return m.Has(tag.AllDividendsIndicator)
}

// HasReturnRateNotionalReset returns true if ReturnRateNotionalReset is present, Tag 42668.
func (m NoStreams) HasReturnRateNotionalReset() bool {
	return m.Has(tag.ReturnRateNotionalReset)
}

// HasNoReturnRates returns true if NoReturnRates is present, Tag 42735.
func (m NoStreams) HasNoReturnRates() bool {
	return m.Has(tag.NoReturnRates)
}

// HasPaymentStreamLinkInitialLevel returns true if PaymentStreamLinkInitialLevel is present, Tag 42669.
func (m NoStreams) HasPaymentStreamLinkInitialLevel() bool {
	return m.Has(tag.PaymentStreamLinkInitialLevel)
}

// HasPaymentStreamLinkClosingLevelIndicator returns true if PaymentStreamLinkClosingLevelIndicator is present, Tag 42670.
func (m NoStreams) HasPaymentStreamLinkClosingLevelIndicator() bool {
	return m.Has(tag.PaymentStreamLinkClosingLevelIndicator)
}

// HasPaymentStreamLinkExpiringLevelIndicator returns true if PaymentStreamLinkExpiringLevelIndicator is present, Tag 42671.
func (m NoStreams) HasPaymentStreamLinkExpiringLevelIndicator() bool {
	return m.Has(tag.PaymentStreamLinkExpiringLevelIndicator)
}

// HasPaymentStreamLinkEstimatedTradingDays returns true if PaymentStreamLinkEstimatedTradingDays is present, Tag 42672.
func (m NoStreams) HasPaymentStreamLinkEstimatedTradingDays() bool {
	return m.Has(tag.PaymentStreamLinkEstimatedTradingDays)
}

// HasPaymentStreamLinkStrikePrice returns true if PaymentStreamLinkStrikePrice is present, Tag 42673.
func (m NoStreams) HasPaymentStreamLinkStrikePrice() bool {
	return m.Has(tag.PaymentStreamLinkStrikePrice)
}

// HasPaymentStreamLinkStrikePriceType returns true if PaymentStreamLinkStrikePriceType is present, Tag 42674.
func (m NoStreams) HasPaymentStreamLinkStrikePriceType() bool {
	return m.Has(tag.PaymentStreamLinkStrikePriceType)
}

// HasPaymentStreamLinkMaximumBoundary returns true if PaymentStreamLinkMaximumBoundary is present, Tag 42675.
func (m NoStreams) HasPaymentStreamLinkMaximumBoundary() bool {
	return m.Has(tag.PaymentStreamLinkMaximumBoundary)
}

// HasPaymentStreamLinkMinimumBoundary returns true if PaymentStreamLinkMinimumBoundary is present, Tag 42676.
func (m NoStreams) HasPaymentStreamLinkMinimumBoundary() bool {
	return m.Has(tag.PaymentStreamLinkMinimumBoundary)
}

// HasPaymentStreamLinkNumberOfDataSeries returns true if PaymentStreamLinkNumberOfDataSeries is present, Tag 42677.
func (m NoStreams) HasPaymentStreamLinkNumberOfDataSeries() bool {
	return m.Has(tag.PaymentStreamLinkNumberOfDataSeries)
}

// HasPaymentStreamVarianceUnadjustedCap returns true if PaymentStreamVarianceUnadjustedCap is present, Tag 42678.
func (m NoStreams) HasPaymentStreamVarianceUnadjustedCap() bool {
	return m.Has(tag.PaymentStreamVarianceUnadjustedCap)
}

// HasPaymentStreamRealizedVarianceMethod returns true if PaymentStreamRealizedVarianceMethod is present, Tag 42679.
func (m NoStreams) HasPaymentStreamRealizedVarianceMethod() bool {
	return m.Has(tag.PaymentStreamRealizedVarianceMethod)
}

// HasPaymentStreamDaysAdjustmentIndicator returns true if PaymentStreamDaysAdjustmentIndicator is present, Tag 42680.
func (m NoStreams) HasPaymentStreamDaysAdjustmentIndicator() bool {
	return m.Has(tag.PaymentStreamDaysAdjustmentIndicator)
}

// HasPaymentStreamNearestExchangeContractRefID returns true if PaymentStreamNearestExchangeContractRefID is present, Tag 42681.
func (m NoStreams) HasPaymentStreamNearestExchangeContractRefID() bool {
	return m.Has(tag.PaymentStreamNearestExchangeContractRefID)
}

// HasPaymentStreamVegaNotionalAmount returns true if PaymentStreamVegaNotionalAmount is present, Tag 42682.
func (m NoStreams) HasPaymentStreamVegaNotionalAmount() bool {
	return m.Has(tag.PaymentStreamVegaNotionalAmount)
}

// HasPaymentStreamRateIndexID returns true if PaymentStreamRateIndexID is present, Tag 43090.
func (m NoStreams) HasPaymentStreamRateIndexID() bool {
	return m.Has(tag.PaymentStreamRateIndexID)
}

// HasPaymentStreamRateIndexIDSource returns true if PaymentStreamRateIndexIDSource is present, Tag 43091.
func (m NoStreams) HasPaymentStreamRateIndexIDSource() bool {
	return m.Has(tag.PaymentStreamRateIndexIDSource)
}

// HasPaymentStreamNonDeliverableRefCurrency returns true if PaymentStreamNonDeliverableRefCurrency is present, Tag 40817.
func (m NoStreams) HasPaymentStreamNonDeliverableRefCurrency() bool {
	return m.Has(tag.PaymentStreamNonDeliverableRefCurrency)
}

// HasPaymentStreamNonDeliverableFixingDatesBusinessDayConvention returns true if PaymentStreamNonDeliverableFixingDatesBusinessDayConvention is present, Tag 40818.
func (m NoStreams) HasPaymentStreamNonDeliverableFixingDatesBusinessDayConvention() bool {
	return m.Has(tag.PaymentStreamNonDeliverableFixingDatesBusinessDayConvention)
}

// HasNoPaymentStreamNonDeliverableFixingDatesBusinessCenters returns true if NoPaymentStreamNonDeliverableFixingDatesBusinessCenters is present, Tag 40946.
func (m NoStreams) HasNoPaymentStreamNonDeliverableFixingDatesBusinessCenters() bool {
	return m.Has(tag.NoPaymentStreamNonDeliverableFixingDatesBusinessCenters)
}

// HasPaymentStreamNonDeliverableFixingDatesRelativeTo returns true if PaymentStreamNonDeliverableFixingDatesRelativeTo is present, Tag 40820.
func (m NoStreams) HasPaymentStreamNonDeliverableFixingDatesRelativeTo() bool {
	return m.Has(tag.PaymentStreamNonDeliverableFixingDatesRelativeTo)
}

// HasPaymentStreamNonDeliverableFixingDatesOffsetPeriod returns true if PaymentStreamNonDeliverableFixingDatesOffsetPeriod is present, Tag 40821.
func (m NoStreams) HasPaymentStreamNonDeliverableFixingDatesOffsetPeriod() bool {
	return m.Has(tag.PaymentStreamNonDeliverableFixingDatesOffsetPeriod)
}

// HasPaymentStreamNonDeliverableFixingDatesOffsetUnit returns true if PaymentStreamNonDeliverableFixingDatesOffsetUnit is present, Tag 40822.
func (m NoStreams) HasPaymentStreamNonDeliverableFixingDatesOffsetUnit() bool {
	return m.Has(tag.PaymentStreamNonDeliverableFixingDatesOffsetUnit)
}

// HasPaymentStreamNonDeliverableFixingDatesOffsetDayType returns true if PaymentStreamNonDeliverableFixingDatesOffsetDayType is present, Tag 40823.
func (m NoStreams) HasPaymentStreamNonDeliverableFixingDatesOffsetDayType() bool {
	return m.Has(tag.PaymentStreamNonDeliverableFixingDatesOffsetDayType)
}

// HasPaymentStreamNonDeliverableSettlRateSource returns true if PaymentStreamNonDeliverableSettlRateSource is present, Tag 40371.
func (m NoStreams) HasPaymentStreamNonDeliverableSettlRateSource() bool {
	return m.Has(tag.PaymentStreamNonDeliverableSettlRateSource)
}

// HasPaymentStreamNonDeliverableSettlReferencePage returns true if PaymentStreamNonDeliverableSettlReferencePage is present, Tag 40372.
func (m NoStreams) HasPaymentStreamNonDeliverableSettlReferencePage() bool {
	return m.Has(tag.PaymentStreamNonDeliverableSettlReferencePage)
}

// HasNoNonDeliverableFixingDates returns true if NoNonDeliverableFixingDates is present, Tag 40825.
func (m NoStreams) HasNoNonDeliverableFixingDates() bool {
	return m.Has(tag.NoNonDeliverableFixingDates)
}

// HasNoSettlRateFallbacks returns true if NoSettlRateFallbacks is present, Tag 40085.
func (m NoStreams) HasNoSettlRateFallbacks() bool {
	return m.Has(tag.NoSettlRateFallbacks)
}

// HasPaymentStreamFlatRateIndicator returns true if PaymentStreamFlatRateIndicator is present, Tag 41180.
func (m NoStreams) HasPaymentStreamFlatRateIndicator() bool {
	return m.Has(tag.PaymentStreamFlatRateIndicator)
}

// HasPaymentStreamFlatRateAmount returns true if PaymentStreamFlatRateAmount is present, Tag 41181.
func (m NoStreams) HasPaymentStreamFlatRateAmount() bool {
	return m.Has(tag.PaymentStreamFlatRateAmount)
}

// HasPaymentStreamFlatRateCurrency returns true if PaymentStreamFlatRateCurrency is present, Tag 41182.
func (m NoStreams) HasPaymentStreamFlatRateCurrency() bool {
	return m.Has(tag.PaymentStreamFlatRateCurrency)
}

// HasPaymentStreamMaximumPaymentAmount returns true if PaymentStreamMaximumPaymentAmount is present, Tag 41183.
func (m NoStreams) HasPaymentStreamMaximumPaymentAmount() bool {
	return m.Has(tag.PaymentStreamMaximumPaymentAmount)
}

// HasPaymentStreamMaximumPaymentCurrency returns true if PaymentStreamMaximumPaymentCurrency is present, Tag 41184.
func (m NoStreams) HasPaymentStreamMaximumPaymentCurrency() bool {
	return m.Has(tag.PaymentStreamMaximumPaymentCurrency)
}

// HasPaymentStreamMaximumTransactionAmount returns true if PaymentStreamMaximumTransactionAmount is present, Tag 41185.
func (m NoStreams) HasPaymentStreamMaximumTransactionAmount() bool {
	return m.Has(tag.PaymentStreamMaximumTransactionAmount)
}

// HasPaymentStreamMaximumTransactionCurrency returns true if PaymentStreamMaximumTransactionCurrency is present, Tag 41186.
func (m NoStreams) HasPaymentStreamMaximumTransactionCurrency() bool {
	return m.Has(tag.PaymentStreamMaximumTransactionCurrency)
}

// HasPaymentStreamCashSettlIndicator returns true if PaymentStreamCashSettlIndicator is present, Tag 42600.
func (m NoStreams) HasPaymentStreamCashSettlIndicator() bool {
	return m.Has(tag.PaymentStreamCashSettlIndicator)
}

// HasPaymentStreamCompoundingXIDRef returns true if PaymentStreamCompoundingXIDRef is present, Tag 42601.
func (m NoStreams) HasPaymentStreamCompoundingXIDRef() bool {
	return m.Has(tag.PaymentStreamCompoundingXIDRef)
}

// HasPaymentStreamCompoundingSpread returns true if PaymentStreamCompoundingSpread is present, Tag 42602.
func (m NoStreams) HasPaymentStreamCompoundingSpread() bool {
	return m.Has(tag.PaymentStreamCompoundingSpread)
}

// HasPaymentStreamInterpolationMethod returns true if PaymentStreamInterpolationMethod is present, Tag 42603.
func (m NoStreams) HasPaymentStreamInterpolationMethod() bool {
	return m.Has(tag.PaymentStreamInterpolationMethod)
}

// HasPaymentStreamInterpolationPeriod returns true if PaymentStreamInterpolationPeriod is present, Tag 42604.
func (m NoStreams) HasPaymentStreamInterpolationPeriod() bool {
	return m.Has(tag.PaymentStreamInterpolationPeriod)
}

// HasPaymentStreamCompoundingFixedRate returns true if PaymentStreamCompoundingFixedRate is present, Tag 42605.
func (m NoStreams) HasPaymentStreamCompoundingFixedRate() bool {
	return m.Has(tag.PaymentStreamCompoundingFixedRate)
}

// HasPaymentStreamCompoundingRateIndex returns true if PaymentStreamCompoundingRateIndex is present, Tag 42628.
func (m NoStreams) HasPaymentStreamCompoundingRateIndex() bool {
	return m.Has(tag.PaymentStreamCompoundingRateIndex)
}

// HasPaymentStreamCompoundingRateIndexCurvePeriod returns true if PaymentStreamCompoundingRateIndexCurvePeriod is present, Tag 42629.
func (m NoStreams) HasPaymentStreamCompoundingRateIndexCurvePeriod() bool {
	return m.Has(tag.PaymentStreamCompoundingRateIndexCurvePeriod)
}

// HasPaymentStreamCompoundingRateIndexCurveUnit returns true if PaymentStreamCompoundingRateIndexCurveUnit is present, Tag 42630.
func (m NoStreams) HasPaymentStreamCompoundingRateIndexCurveUnit() bool {
	return m.Has(tag.PaymentStreamCompoundingRateIndexCurveUnit)
}

// HasPaymentStreamCompoundingRateMultiplier returns true if PaymentStreamCompoundingRateMultiplier is present, Tag 42631.
func (m NoStreams) HasPaymentStreamCompoundingRateMultiplier() bool {
	return m.Has(tag.PaymentStreamCompoundingRateMultiplier)
}

// HasPaymentStreamCompoundingRateSpread returns true if PaymentStreamCompoundingRateSpread is present, Tag 42632.
func (m NoStreams) HasPaymentStreamCompoundingRateSpread() bool {
	return m.Has(tag.PaymentStreamCompoundingRateSpread)
}

// HasPaymentStreamCompoundingRateSpreadPositionType returns true if PaymentStreamCompoundingRateSpreadPositionType is present, Tag 42633.
func (m NoStreams) HasPaymentStreamCompoundingRateSpreadPositionType() bool {
	return m.Has(tag.PaymentStreamCompoundingRateSpreadPositionType)
}

// HasPaymentStreamCompoundingRateTreatment returns true if PaymentStreamCompoundingRateTreatment is present, Tag 42634.
func (m NoStreams) HasPaymentStreamCompoundingRateTreatment() bool {
	return m.Has(tag.PaymentStreamCompoundingRateTreatment)
}

// HasPaymentStreamCompoundingCapRate returns true if PaymentStreamCompoundingCapRate is present, Tag 42635.
func (m NoStreams) HasPaymentStreamCompoundingCapRate() bool {
	return m.Has(tag.PaymentStreamCompoundingCapRate)
}

// HasPaymentStreamCompoundingCapRateBuySide returns true if PaymentStreamCompoundingCapRateBuySide is present, Tag 42636.
func (m NoStreams) HasPaymentStreamCompoundingCapRateBuySide() bool {
	return m.Has(tag.PaymentStreamCompoundingCapRateBuySide)
}

// HasPaymentStreamCompoundingCapRateSellSide returns true if PaymentStreamCompoundingCapRateSellSide is present, Tag 42637.
func (m NoStreams) HasPaymentStreamCompoundingCapRateSellSide() bool {
	return m.Has(tag.PaymentStreamCompoundingCapRateSellSide)
}

// HasPaymentStreamCompoundingFloorRate returns true if PaymentStreamCompoundingFloorRate is present, Tag 42638.
func (m NoStreams) HasPaymentStreamCompoundingFloorRate() bool {
	return m.Has(tag.PaymentStreamCompoundingFloorRate)
}

// HasPaymentStreamCompoundingFloorRateBuySide returns true if PaymentStreamCompoundingFloorRateBuySide is present, Tag 42639.
func (m NoStreams) HasPaymentStreamCompoundingFloorRateBuySide() bool {
	return m.Has(tag.PaymentStreamCompoundingFloorRateBuySide)
}

// HasPaymentStreamCompoundingFloorRateSellSide returns true if PaymentStreamCompoundingFloorRateSellSide is present, Tag 42640.
func (m NoStreams) HasPaymentStreamCompoundingFloorRateSellSide() bool {
	return m.Has(tag.PaymentStreamCompoundingFloorRateSellSide)
}

// HasPaymentStreamCompoundingInitialRate returns true if PaymentStreamCompoundingInitialRate is present, Tag 42641.
func (m NoStreams) HasPaymentStreamCompoundingInitialRate() bool {
	return m.Has(tag.PaymentStreamCompoundingInitialRate)
}

// HasPaymentStreamCompoundingFinalRateRoundingDirection returns true if PaymentStreamCompoundingFinalRateRoundingDirection is present, Tag 42642.
func (m NoStreams) HasPaymentStreamCompoundingFinalRateRoundingDirection() bool {
	return m.Has(tag.PaymentStreamCompoundingFinalRateRoundingDirection)
}

// HasPaymentStreamCompoundingFinalRatePrecision returns true if PaymentStreamCompoundingFinalRatePrecision is present, Tag 42643.
func (m NoStreams) HasPaymentStreamCompoundingFinalRatePrecision() bool {
	return m.Has(tag.PaymentStreamCompoundingFinalRatePrecision)
}

// HasPaymentStreamCompoundingAveragingMethod returns true if PaymentStreamCompoundingAveragingMethod is present, Tag 42644.
func (m NoStreams) HasPaymentStreamCompoundingAveragingMethod() bool {
	return m.Has(tag.PaymentStreamCompoundingAveragingMethod)
}

// HasPaymentStreamCompoundingNegativeRateTreatment returns true if PaymentStreamCompoundingNegativeRateTreatment is present, Tag 42645.
func (m NoStreams) HasPaymentStreamCompoundingNegativeRateTreatment() bool {
	return m.Has(tag.PaymentStreamCompoundingNegativeRateTreatment)
}

// HasPaymentStreamCompoundingDatesBusinessDayConvention returns true if PaymentStreamCompoundingDatesBusinessDayConvention is present, Tag 42609.
func (m NoStreams) HasPaymentStreamCompoundingDatesBusinessDayConvention() bool {
	return m.Has(tag.PaymentStreamCompoundingDatesBusinessDayConvention)
}

// HasNoPaymentStreamCompoundingDatesBusinessCenters returns true if NoPaymentStreamCompoundingDatesBusinessCenters is present, Tag 42620.
func (m NoStreams) HasNoPaymentStreamCompoundingDatesBusinessCenters() bool {
	return m.Has(tag.NoPaymentStreamCompoundingDatesBusinessCenters)
}

// HasNoPaymentStreamCompoundingDates returns true if NoPaymentStreamCompoundingDates is present, Tag 42606.
func (m NoStreams) HasNoPaymentStreamCompoundingDates() bool {
	return m.Has(tag.NoPaymentStreamCompoundingDates)
}

// HasPaymentStreamCompoundingDatesRelativeTo returns true if PaymentStreamCompoundingDatesRelativeTo is present, Tag 42610.
func (m NoStreams) HasPaymentStreamCompoundingDatesRelativeTo() bool {
	return m.Has(tag.PaymentStreamCompoundingDatesRelativeTo)
}

// HasPaymentStreamCompoundingDatesOffsetPeriod returns true if PaymentStreamCompoundingDatesOffsetPeriod is present, Tag 42611.
func (m NoStreams) HasPaymentStreamCompoundingDatesOffsetPeriod() bool {
	return m.Has(tag.PaymentStreamCompoundingDatesOffsetPeriod)
}

// HasPaymentStreamCompoundingDatesOffsetUnit returns true if PaymentStreamCompoundingDatesOffsetUnit is present, Tag 42612.
func (m NoStreams) HasPaymentStreamCompoundingDatesOffsetUnit() bool {
	return m.Has(tag.PaymentStreamCompoundingDatesOffsetUnit)
}

// HasPaymentStreamCompoundingDatesOffsetDayType returns true if PaymentStreamCompoundingDatesOffsetDayType is present, Tag 42613.
func (m NoStreams) HasPaymentStreamCompoundingDatesOffsetDayType() bool {
	return m.Has(tag.PaymentStreamCompoundingDatesOffsetDayType)
}

// HasPaymentStreamCompoundingPeriodSkip returns true if PaymentStreamCompoundingPeriodSkip is present, Tag 42614.
func (m NoStreams) HasPaymentStreamCompoundingPeriodSkip() bool {
	return m.Has(tag.PaymentStreamCompoundingPeriodSkip)
}

// HasPaymentStreamCompoundingStartDateUnadjusted returns true if PaymentStreamCompoundingStartDateUnadjusted is present, Tag 42646.
func (m NoStreams) HasPaymentStreamCompoundingStartDateUnadjusted() bool {
	return m.Has(tag.PaymentStreamCompoundingStartDateUnadjusted)
}

// HasPaymentStreamCompoundingStartDateRelativeTo returns true if PaymentStreamCompoundingStartDateRelativeTo is present, Tag 42647.
func (m NoStreams) HasPaymentStreamCompoundingStartDateRelativeTo() bool {
	return m.Has(tag.PaymentStreamCompoundingStartDateRelativeTo)
}

// HasPaymentStreamCompoundingStartDateOffsetPeriod returns true if PaymentStreamCompoundingStartDateOffsetPeriod is present, Tag 42648.
func (m NoStreams) HasPaymentStreamCompoundingStartDateOffsetPeriod() bool {
	return m.Has(tag.PaymentStreamCompoundingStartDateOffsetPeriod)
}

// HasPaymentStreamCompoundingStartDateOffsetUnit returns true if PaymentStreamCompoundingStartDateOffsetUnit is present, Tag 42649.
func (m NoStreams) HasPaymentStreamCompoundingStartDateOffsetUnit() bool {
	return m.Has(tag.PaymentStreamCompoundingStartDateOffsetUnit)
}

// HasPaymentStreamCompoundingStartDateOffsetDayType returns true if PaymentStreamCompoundingStartDateOffsetDayType is present, Tag 42650.
func (m NoStreams) HasPaymentStreamCompoundingStartDateOffsetDayType() bool {
	return m.Has(tag.PaymentStreamCompoundingStartDateOffsetDayType)
}

// HasPaymentStreamCompoundingStartDateAdjusted returns true if PaymentStreamCompoundingStartDateAdjusted is present, Tag 42651.
func (m NoStreams) HasPaymentStreamCompoundingStartDateAdjusted() bool {
	return m.Has(tag.PaymentStreamCompoundingStartDateAdjusted)
}

// HasPaymentStreamCompoundingEndDateUnadjusted returns true if PaymentStreamCompoundingEndDateUnadjusted is present, Tag 42622.
func (m NoStreams) HasPaymentStreamCompoundingEndDateUnadjusted() bool {
	return m.Has(tag.PaymentStreamCompoundingEndDateUnadjusted)
}

// HasPaymentStreamCompoundingEndDateRelativeTo returns true if PaymentStreamCompoundingEndDateRelativeTo is present, Tag 42623.
func (m NoStreams) HasPaymentStreamCompoundingEndDateRelativeTo() bool {
	return m.Has(tag.PaymentStreamCompoundingEndDateRelativeTo)
}

// HasPaymentStreamCompoundingEndDateOffsetPeriod returns true if PaymentStreamCompoundingEndDateOffsetPeriod is present, Tag 42624.
func (m NoStreams) HasPaymentStreamCompoundingEndDateOffsetPeriod() bool {
	return m.Has(tag.PaymentStreamCompoundingEndDateOffsetPeriod)
}

// HasPaymentStreamCompoundingEndDateOffsetUnit returns true if PaymentStreamCompoundingEndDateOffsetUnit is present, Tag 42625.
func (m NoStreams) HasPaymentStreamCompoundingEndDateOffsetUnit() bool {
	return m.Has(tag.PaymentStreamCompoundingEndDateOffsetUnit)
}

// HasPaymentStreamCompoundingEndDateOffsetDayType returns true if PaymentStreamCompoundingEndDateOffsetDayType is present, Tag 42626.
func (m NoStreams) HasPaymentStreamCompoundingEndDateOffsetDayType() bool {
	return m.Has(tag.PaymentStreamCompoundingEndDateOffsetDayType)
}

// HasPaymentStreamCompoundingEndDateAdjusted returns true if PaymentStreamCompoundingEndDateAdjusted is present, Tag 42627.
func (m NoStreams) HasPaymentStreamCompoundingEndDateAdjusted() bool {
	return m.Has(tag.PaymentStreamCompoundingEndDateAdjusted)
}

// HasPaymentStreamCompoundingFrequencyPeriod returns true if PaymentStreamCompoundingFrequencyPeriod is present, Tag 42615.
func (m NoStreams) HasPaymentStreamCompoundingFrequencyPeriod() bool {
	return m.Has(tag.PaymentStreamCompoundingFrequencyPeriod)
}

// HasPaymentStreamCompoundingFrequencyUnit returns true if PaymentStreamCompoundingFrequencyUnit is present, Tag 42616.
func (m NoStreams) HasPaymentStreamCompoundingFrequencyUnit() bool {
	return m.Has(tag.PaymentStreamCompoundingFrequencyUnit)
}

// HasPaymentStreamCompoundingRollConvention returns true if PaymentStreamCompoundingRollConvention is present, Tag 42617.
func (m NoStreams) HasPaymentStreamCompoundingRollConvention() bool {
	return m.Has(tag.PaymentStreamCompoundingRollConvention)
}

// HasPaymentStreamBoundsFirstDateUnadjusted returns true if PaymentStreamBoundsFirstDateUnadjusted is present, Tag 42618.
func (m NoStreams) HasPaymentStreamBoundsFirstDateUnadjusted() bool {
	return m.Has(tag.PaymentStreamBoundsFirstDateUnadjusted)
}

// HasPaymentStreamBoundsLastDateUnadjusted returns true if PaymentStreamBoundsLastDateUnadjusted is present, Tag 42619.
func (m NoStreams) HasPaymentStreamBoundsLastDateUnadjusted() bool {
	return m.Has(tag.PaymentStreamBoundsLastDateUnadjusted)
}

// HasPaymentStreamOtherDayCount returns true if PaymentStreamOtherDayCount is present, Tag 43106.
func (m NoStreams) HasPaymentStreamOtherDayCount() bool {
	return m.Has(tag.PaymentStreamOtherDayCount)
}

// HasNoPaymentSchedules returns true if NoPaymentSchedules is present, Tag 40828.
func (m NoStreams) HasNoPaymentSchedules() bool {
	return m.Has(tag.NoPaymentSchedules)
}

// HasNoPaymentStubs returns true if NoPaymentStubs is present, Tag 40872.
func (m NoStreams) HasNoPaymentStubs() bool {
	return m.Has(tag.NoPaymentStubs)
}

// HasStreamText returns true if StreamText is present, Tag 40056.
func (m NoStreams) HasStreamText() bool {
	return m.Has(tag.StreamText)
}

// HasEncodedStreamTextLen returns true if EncodedStreamTextLen is present, Tag 40982.
func (m NoStreams) HasEncodedStreamTextLen() bool {
	return m.Has(tag.EncodedStreamTextLen)
}

// HasEncodedStreamText returns true if EncodedStreamText is present, Tag 40983.
func (m NoStreams) HasEncodedStreamText() bool {
	return m.Has(tag.EncodedStreamText)
}

// HasStreamXID returns true if StreamXID is present, Tag 41303.
func (m NoStreams) HasStreamXID() bool {
	return m.Has(tag.StreamXID)
}

// HasStreamNotionalXIDRef returns true if StreamNotionalXIDRef is present, Tag 41305.
func (m NoStreams) HasStreamNotionalXIDRef() bool {
	return m.Has(tag.StreamNotionalXIDRef)
}

// HasStreamNotionalFrequencyPeriod returns true if StreamNotionalFrequencyPeriod is present, Tag 41306.
func (m NoStreams) HasStreamNotionalFrequencyPeriod() bool {
	return m.Has(tag.StreamNotionalFrequencyPeriod)
}

// HasStreamNotionalFrequencyUnit returns true if StreamNotionalFrequencyUnit is present, Tag 41307.
func (m NoStreams) HasStreamNotionalFrequencyUnit() bool {
	return m.Has(tag.StreamNotionalFrequencyUnit)
}

// HasStreamNotionalCommodityFrequency returns true if StreamNotionalCommodityFrequency is present, Tag 41308.
func (m NoStreams) HasStreamNotionalCommodityFrequency() bool {
	return m.Has(tag.StreamNotionalCommodityFrequency)
}

// HasStreamNotionalUnitOfMeasure returns true if StreamNotionalUnitOfMeasure is present, Tag 41309.
func (m NoStreams) HasStreamNotionalUnitOfMeasure() bool {
	return m.Has(tag.StreamNotionalUnitOfMeasure)
}

// HasStreamTotalNotional returns true if StreamTotalNotional is present, Tag 41310.
func (m NoStreams) HasStreamTotalNotional() bool {
	return m.Has(tag.StreamTotalNotional)
}

// HasStreamTotalNotionalUnitOfMeasure returns true if StreamTotalNotionalUnitOfMeasure is present, Tag 41311.
func (m NoStreams) HasStreamTotalNotionalUnitOfMeasure() bool {
	return m.Has(tag.StreamTotalNotionalUnitOfMeasure)
}

// HasStreamCommodityBase returns true if StreamCommodityBase is present, Tag 41251.
func (m NoStreams) HasStreamCommodityBase() bool {
	return m.Has(tag.StreamCommodityBase)
}

// HasStreamCommodityType returns true if StreamCommodityType is present, Tag 41252.
func (m NoStreams) HasStreamCommodityType() bool {
	return m.Has(tag.StreamCommodityType)
}

// HasStreamCommoditySecurityID returns true if StreamCommoditySecurityID is present, Tag 41253.
func (m NoStreams) HasStreamCommoditySecurityID() bool {
	return m.Has(tag.StreamCommoditySecurityID)
}

// HasStreamCommoditySecurityIDSource returns true if StreamCommoditySecurityIDSource is present, Tag 41254.
func (m NoStreams) HasStreamCommoditySecurityIDSource() bool {
	return m.Has(tag.StreamCommoditySecurityIDSource)
}

// HasNoStreamCommodityAltIDs returns true if NoStreamCommodityAltIDs is present, Tag 41277.
func (m NoStreams) HasNoStreamCommodityAltIDs() bool {
	return m.Has(tag.NoStreamCommodityAltIDs)
}

// HasStreamCommodityDesc returns true if StreamCommodityDesc is present, Tag 41255.
func (m NoStreams) HasStreamCommodityDesc() bool {
	return m.Has(tag.StreamCommodityDesc)
}

// HasEncodedStreamCommodityDescLen returns true if EncodedStreamCommodityDescLen is present, Tag 41256.
func (m NoStreams) HasEncodedStreamCommodityDescLen() bool {
	return m.Has(tag.EncodedStreamCommodityDescLen)
}

// HasEncodedStreamCommodityDesc returns true if EncodedStreamCommodityDesc is present, Tag 41257.
func (m NoStreams) HasEncodedStreamCommodityDesc() bool {
	return m.Has(tag.EncodedStreamCommodityDesc)
}

// HasNoStreamAssetAttributes returns true if NoStreamAssetAttributes is present, Tag 41237.
func (m NoStreams) HasNoStreamAssetAttributes() bool {
	return m.Has(tag.NoStreamAssetAttributes)
}

// HasStreamCommodityUnitOfMeasure returns true if StreamCommodityUnitOfMeasure is present, Tag 41258.
func (m NoStreams) HasStreamCommodityUnitOfMeasure() bool {
	return m.Has(tag.StreamCommodityUnitOfMeasure)
}

// HasStreamCommodityCurrency returns true if StreamCommodityCurrency is present, Tag 41259.
func (m NoStreams) HasStreamCommodityCurrency() bool {
	return m.Has(tag.StreamCommodityCurrency)
}

// HasStreamCommodityExchange returns true if StreamCommodityExchange is present, Tag 41260.
func (m NoStreams) HasStreamCommodityExchange() bool {
	return m.Has(tag.StreamCommodityExchange)
}

// HasStreamCommodityRateSource returns true if StreamCommodityRateSource is present, Tag 41261.
func (m NoStreams) HasStreamCommodityRateSource() bool {
	return m.Has(tag.StreamCommodityRateSource)
}

// HasStreamCommodityRateReferencePage returns true if StreamCommodityRateReferencePage is present, Tag 41262.
func (m NoStreams) HasStreamCommodityRateReferencePage() bool {
	return m.Has(tag.StreamCommodityRateReferencePage)
}

// HasStreamCommodityRateReferencePageHeading returns true if StreamCommodityRateReferencePageHeading is present, Tag 41263.
func (m NoStreams) HasStreamCommodityRateReferencePageHeading() bool {
	return m.Has(tag.StreamCommodityRateReferencePageHeading)
}

// HasStreamDataProvider returns true if StreamDataProvider is present, Tag 41264.
func (m NoStreams) HasStreamDataProvider() bool {
	return m.Has(tag.StreamDataProvider)
}

// HasNoStreamCommodityDataSources returns true if NoStreamCommodityDataSources is present, Tag 41280.
func (m NoStreams) HasNoStreamCommodityDataSources() bool {
	return m.Has(tag.NoStreamCommodityDataSources)
}

// HasStreamCommodityPricingType returns true if StreamCommodityPricingType is present, Tag 41265.
func (m NoStreams) HasStreamCommodityPricingType() bool {
	return m.Has(tag.StreamCommodityPricingType)
}

// HasStreamCommodityNearbySettlDayPeriod returns true if StreamCommodityNearbySettlDayPeriod is present, Tag 41266.
func (m NoStreams) HasStreamCommodityNearbySettlDayPeriod() bool {
	return m.Has(tag.StreamCommodityNearbySettlDayPeriod)
}

// HasStreamCommodityNearbySettlDayUnit returns true if StreamCommodityNearbySettlDayUnit is present, Tag 41267.
func (m NoStreams) HasStreamCommodityNearbySettlDayUnit() bool {
	return m.Has(tag.StreamCommodityNearbySettlDayUnit)
}

// HasStreamCommoditySettlDateUnadjusted returns true if StreamCommoditySettlDateUnadjusted is present, Tag 41268.
func (m NoStreams) HasStreamCommoditySettlDateUnadjusted() bool {
	return m.Has(tag.StreamCommoditySettlDateUnadjusted)
}

// HasStreamCommoditySettlDateBusinessDayConvention returns true if StreamCommoditySettlDateBusinessDayConvention is present, Tag 41269.
func (m NoStreams) HasStreamCommoditySettlDateBusinessDayConvention() bool {
	return m.Has(tag.StreamCommoditySettlDateBusinessDayConvention)
}

// HasNoStreamCommoditySettlBusinessCenters returns true if NoStreamCommoditySettlBusinessCenters is present, Tag 41249.
func (m NoStreams) HasNoStreamCommoditySettlBusinessCenters() bool {
	return m.Has(tag.NoStreamCommoditySettlBusinessCenters)
}

// HasStreamCommoditySettlDateAdjusted returns true if StreamCommoditySettlDateAdjusted is present, Tag 41270.
func (m NoStreams) HasStreamCommoditySettlDateAdjusted() bool {
	return m.Has(tag.StreamCommoditySettlDateAdjusted)
}

// HasStreamCommoditySettlMonth returns true if StreamCommoditySettlMonth is present, Tag 41271.
func (m NoStreams) HasStreamCommoditySettlMonth() bool {
	return m.Has(tag.StreamCommoditySettlMonth)
}

// HasStreamCommoditySettlDateRollPeriod returns true if StreamCommoditySettlDateRollPeriod is present, Tag 41272.
func (m NoStreams) HasStreamCommoditySettlDateRollPeriod() bool {
	return m.Has(tag.StreamCommoditySettlDateRollPeriod)
}

// HasStreamCommoditySettlDateRollUnit returns true if StreamCommoditySettlDateRollUnit is present, Tag 41273.
func (m NoStreams) HasStreamCommoditySettlDateRollUnit() bool {
	return m.Has(tag.StreamCommoditySettlDateRollUnit)
}

// HasStreamCommoditySettlDayType returns true if StreamCommoditySettlDayType is present, Tag 41274.
func (m NoStreams) HasStreamCommoditySettlDayType() bool {
	return m.Has(tag.StreamCommoditySettlDayType)
}

// HasNoStreamCommoditySettlPeriods returns true if NoStreamCommoditySettlPeriods is present, Tag 41289.
func (m NoStreams) HasNoStreamCommoditySettlPeriods() bool {
	return m.Has(tag.NoStreamCommoditySettlPeriods)
}

// HasStreamCommodityXID returns true if StreamCommodityXID is present, Tag 41275.
func (m NoStreams) HasStreamCommodityXID() bool {
	return m.Has(tag.StreamCommodityXID)
}

// HasStreamCommodityXIDRef returns true if StreamCommodityXIDRef is present, Tag 41276.
func (m NoStreams) HasStreamCommodityXIDRef() bool {
	return m.Has(tag.StreamCommodityXIDRef)
}

// HasStreamCommodityDeliveryPricingRegion returns true if StreamCommodityDeliveryPricingRegion is present, Tag 42587.
func (m NoStreams) HasStreamCommodityDeliveryPricingRegion() bool {
	return m.Has(tag.StreamCommodityDeliveryPricingRegion)
}

// HasDeliveryStreamType returns true if DeliveryStreamType is present, Tag 41058.
func (m NoStreams) HasDeliveryStreamType() bool {
	return m.Has(tag.DeliveryStreamType)
}

// HasNoDeliveryStreamCommoditySources returns true if NoDeliveryStreamCommoditySources is present, Tag 41085.
func (m NoStreams) HasNoDeliveryStreamCommoditySources() bool {
	return m.Has(tag.NoDeliveryStreamCommoditySources)
}

// HasDeliveryStreamPipeline returns true if DeliveryStreamPipeline is present, Tag 41059.
func (m NoStreams) HasDeliveryStreamPipeline() bool {
	return m.Has(tag.DeliveryStreamPipeline)
}

// HasDeliveryStreamEntryPoint returns true if DeliveryStreamEntryPoint is present, Tag 41060.
func (m NoStreams) HasDeliveryStreamEntryPoint() bool {
	return m.Has(tag.DeliveryStreamEntryPoint)
}

// HasDeliveryStreamWithdrawalPoint returns true if DeliveryStreamWithdrawalPoint is present, Tag 41061.
func (m NoStreams) HasDeliveryStreamWithdrawalPoint() bool {
	return m.Has(tag.DeliveryStreamWithdrawalPoint)
}

// HasDeliveryStreamDeliveryPoint returns true if DeliveryStreamDeliveryPoint is present, Tag 41062.
func (m NoStreams) HasDeliveryStreamDeliveryPoint() bool {
	return m.Has(tag.DeliveryStreamDeliveryPoint)
}

// HasDeliveryStreamDeliveryRestriction returns true if DeliveryStreamDeliveryRestriction is present, Tag 41063.
func (m NoStreams) HasDeliveryStreamDeliveryRestriction() bool {
	return m.Has(tag.DeliveryStreamDeliveryRestriction)
}

// HasDeliveryStreamDeliveryContingency returns true if DeliveryStreamDeliveryContingency is present, Tag 41064.
func (m NoStreams) HasDeliveryStreamDeliveryContingency() bool {
	return m.Has(tag.DeliveryStreamDeliveryContingency)
}

// HasDeliveryStreamDeliveryContingentPartySide returns true if DeliveryStreamDeliveryContingentPartySide is present, Tag 41065.
func (m NoStreams) HasDeliveryStreamDeliveryContingentPartySide() bool {
	return m.Has(tag.DeliveryStreamDeliveryContingentPartySide)
}

// HasDeliveryStreamDeliverAtSourceIndicator returns true if DeliveryStreamDeliverAtSourceIndicator is present, Tag 41066.
func (m NoStreams) HasDeliveryStreamDeliverAtSourceIndicator() bool {
	return m.Has(tag.DeliveryStreamDeliverAtSourceIndicator)
}

// HasDeliveryStreamRiskApportionment returns true if DeliveryStreamRiskApportionment is present, Tag 41067.
func (m NoStreams) HasDeliveryStreamRiskApportionment() bool {
	return m.Has(tag.DeliveryStreamRiskApportionment)
}

// HasDeliveryStreamRiskApportionmentSource returns true if DeliveryStreamRiskApportionmentSource is present, Tag 41218.
func (m NoStreams) HasDeliveryStreamRiskApportionmentSource() bool {
	return m.Has(tag.DeliveryStreamRiskApportionmentSource)
}

// HasNoDeliveryStreamCycles returns true if NoDeliveryStreamCycles is present, Tag 41081.
func (m NoStreams) HasNoDeliveryStreamCycles() bool {
	return m.Has(tag.NoDeliveryStreamCycles)
}

// HasDeliveryStreamTitleTransferLocation returns true if DeliveryStreamTitleTransferLocation is present, Tag 41068.
func (m NoStreams) HasDeliveryStreamTitleTransferLocation() bool {
	return m.Has(tag.DeliveryStreamTitleTransferLocation)
}

// HasDeliveryStreamTitleTransferCondition returns true if DeliveryStreamTitleTransferCondition is present, Tag 41069.
func (m NoStreams) HasDeliveryStreamTitleTransferCondition() bool {
	return m.Has(tag.DeliveryStreamTitleTransferCondition)
}

// HasDeliveryStreamImporterOfRecord returns true if DeliveryStreamImporterOfRecord is present, Tag 41070.
func (m NoStreams) HasDeliveryStreamImporterOfRecord() bool {
	return m.Has(tag.DeliveryStreamImporterOfRecord)
}

// HasDeliveryStreamNegativeTolerance returns true if DeliveryStreamNegativeTolerance is present, Tag 41071.
func (m NoStreams) HasDeliveryStreamNegativeTolerance() bool {
	return m.Has(tag.DeliveryStreamNegativeTolerance)
}

// HasDeliveryStreamPositiveTolerance returns true if DeliveryStreamPositiveTolerance is present, Tag 41072.
func (m NoStreams) HasDeliveryStreamPositiveTolerance() bool {
	return m.Has(tag.DeliveryStreamPositiveTolerance)
}

// HasDeliveryStreamToleranceUnitOfMeasure returns true if DeliveryStreamToleranceUnitOfMeasure is present, Tag 41073.
func (m NoStreams) HasDeliveryStreamToleranceUnitOfMeasure() bool {
	return m.Has(tag.DeliveryStreamToleranceUnitOfMeasure)
}

// HasDeliveryStreamToleranceType returns true if DeliveryStreamToleranceType is present, Tag 41074.
func (m NoStreams) HasDeliveryStreamToleranceType() bool {
	return m.Has(tag.DeliveryStreamToleranceType)
}

// HasDeliveryStreamToleranceOptionSide returns true if DeliveryStreamToleranceOptionSide is present, Tag 41075.
func (m NoStreams) HasDeliveryStreamToleranceOptionSide() bool {
	return m.Has(tag.DeliveryStreamToleranceOptionSide)
}

// HasDeliveryStreamTotalPositiveTolerance returns true if DeliveryStreamTotalPositiveTolerance is present, Tag 41076.
func (m NoStreams) HasDeliveryStreamTotalPositiveTolerance() bool {
	return m.Has(tag.DeliveryStreamTotalPositiveTolerance)
}

// HasDeliveryStreamTotalNegativeTolerance returns true if DeliveryStreamTotalNegativeTolerance is present, Tag 41077.
func (m NoStreams) HasDeliveryStreamTotalNegativeTolerance() bool {
	return m.Has(tag.DeliveryStreamTotalNegativeTolerance)
}

// HasDeliveryStreamNotionalConversionFactor returns true if DeliveryStreamNotionalConversionFactor is present, Tag 41078.
func (m NoStreams) HasDeliveryStreamNotionalConversionFactor() bool {
	return m.Has(tag.DeliveryStreamNotionalConversionFactor)
}

// HasDeliveryStreamTransportEquipment returns true if DeliveryStreamTransportEquipment is present, Tag 41079.
func (m NoStreams) HasDeliveryStreamTransportEquipment() bool {
	return m.Has(tag.DeliveryStreamTransportEquipment)
}

// HasDeliveryStreamElectingPartySide returns true if DeliveryStreamElectingPartySide is present, Tag 41080.
func (m NoStreams) HasDeliveryStreamElectingPartySide() bool {
	return m.Has(tag.DeliveryStreamElectingPartySide)
}

// HasDeliveryStreamDeliveryPointSource returns true if DeliveryStreamDeliveryPointSource is present, Tag 42192.
func (m NoStreams) HasDeliveryStreamDeliveryPointSource() bool {
	return m.Has(tag.DeliveryStreamDeliveryPointSource)
}

// HasDeliveryStreamDeliveryPointDesc returns true if DeliveryStreamDeliveryPointDesc is present, Tag 42193.
func (m NoStreams) HasDeliveryStreamDeliveryPointDesc() bool {
	return m.Has(tag.DeliveryStreamDeliveryPointDesc)
}

// HasDeliveryStreamRouteOrCharter returns true if DeliveryStreamRouteOrCharter is present, Tag 43094.
func (m NoStreams) HasDeliveryStreamRouteOrCharter() bool {
	return m.Has(tag.DeliveryStreamRouteOrCharter)
}

// HasNoDeliverySchedules returns true if NoDeliverySchedules is present, Tag 41037.
func (m NoStreams) HasNoDeliverySchedules() bool {
	return m.Has(tag.NoDeliverySchedules)
}

// HasStreamVersion returns true if StreamVersion is present, Tag 42784.
func (m NoStreams) HasStreamVersion() bool {
	return m.Has(tag.StreamVersion)
}

// HasStreamVersionEffectiveDate returns true if StreamVersionEffectiveDate is present, Tag 42785.
func (m NoStreams) HasStreamVersionEffectiveDate() bool {
	return m.Has(tag.StreamVersionEffectiveDate)
}

// HasStreamNotionalDeterminationMethod returns true if StreamNotionalDeterminationMethod is present, Tag 42786.
func (m NoStreams) HasStreamNotionalDeterminationMethod() bool {
	return m.Has(tag.StreamNotionalDeterminationMethod)
}

// HasStreamNotionalAdjustments returns true if StreamNotionalAdjustments is present, Tag 42787.
func (m NoStreams) HasStreamNotionalAdjustments() bool {
	return m.Has(tag.StreamNotionalAdjustments)
}

// NoStreamEffectiveBusinessCenters is a repeating group element, Tag 40960.
type NoStreamEffectiveBusinessCenters struct {
	*quickfix.Group
}

// SetStreamEffectiveDateBusinessCenter sets StreamEffectiveDateBusinessCenter, Tag 40909.
func (m NoStreamEffectiveBusinessCenters) SetStreamEffectiveDateBusinessCenter(v string) {
	m.Set(field.NewStreamEffectiveDateBusinessCenter(v))
}

// GetStreamEffectiveDateBusinessCenter gets StreamEffectiveDateBusinessCenter, Tag 40909.
func (m NoStreamEffectiveBusinessCenters) GetStreamEffectiveDateBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.StreamEffectiveDateBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasStreamEffectiveDateBusinessCenter returns true if StreamEffectiveDateBusinessCenter is present, Tag 40909.
func (m NoStreamEffectiveBusinessCenters) HasStreamEffectiveDateBusinessCenter() bool {
	return m.Has(tag.StreamEffectiveDateBusinessCenter)
}

// NoStreamEffectiveBusinessCentersRepeatingGroup is a repeating group, Tag 40960.
type NoStreamEffectiveBusinessCentersRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoStreamEffectiveBusinessCentersRepeatingGroup returns an initialized, NoStreamEffectiveBusinessCentersRepeatingGroup.
func NewNoStreamEffectiveBusinessCentersRepeatingGroup() NoStreamEffectiveBusinessCentersRepeatingGroup {
	return NoStreamEffectiveBusinessCentersRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoStreamEffectiveBusinessCenters,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.StreamEffectiveDateBusinessCenter),
			},
		),
	}
}

// Add create and append a new NoStreamEffectiveBusinessCenters to this group.
func (m NoStreamEffectiveBusinessCentersRepeatingGroup) Add() NoStreamEffectiveBusinessCenters {
	g := m.RepeatingGroup.Add()
	return NoStreamEffectiveBusinessCenters{g}
}

// Get returns the ith NoStreamEffectiveBusinessCenters in the NoStreamEffectiveBusinessCentersRepeatinGroup.
func (m NoStreamEffectiveBusinessCentersRepeatingGroup) Get(i int) NoStreamEffectiveBusinessCenters {
	return NoStreamEffectiveBusinessCenters{m.RepeatingGroup.Get(i)}
}

// NoStreamTerminationDateBusinessCenters is a repeating group element, Tag 40961.
type NoStreamTerminationDateBusinessCenters struct {
	*quickfix.Group
}

// SetStreamTerminationDateBusinessCenter sets StreamTerminationDateBusinessCenter, Tag 40067.
func (m NoStreamTerminationDateBusinessCenters) SetStreamTerminationDateBusinessCenter(v string) {
	m.Set(field.NewStreamTerminationDateBusinessCenter(v))
}

// GetStreamTerminationDateBusinessCenter gets StreamTerminationDateBusinessCenter, Tag 40067.
func (m NoStreamTerminationDateBusinessCenters) GetStreamTerminationDateBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.StreamTerminationDateBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasStreamTerminationDateBusinessCenter returns true if StreamTerminationDateBusinessCenter is present, Tag 40067.
func (m NoStreamTerminationDateBusinessCenters) HasStreamTerminationDateBusinessCenter() bool {
	return m.Has(tag.StreamTerminationDateBusinessCenter)
}

// NoStreamTerminationDateBusinessCentersRepeatingGroup is a repeating group, Tag 40961.
type NoStreamTerminationDateBusinessCentersRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoStreamTerminationDateBusinessCentersRepeatingGroup returns an initialized, NoStreamTerminationDateBusinessCentersRepeatingGroup.
func NewNoStreamTerminationDateBusinessCentersRepeatingGroup() NoStreamTerminationDateBusinessCentersRepeatingGroup {
	return NoStreamTerminationDateBusinessCentersRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoStreamTerminationDateBusinessCenters,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.StreamTerminationDateBusinessCenter),
			},
		),
	}
}

// Add create and append a new NoStreamTerminationDateBusinessCenters to this group.
func (m NoStreamTerminationDateBusinessCentersRepeatingGroup) Add() NoStreamTerminationDateBusinessCenters {
	g := m.RepeatingGroup.Add()
	return NoStreamTerminationDateBusinessCenters{g}
}

// Get returns the ith NoStreamTerminationDateBusinessCenters in the NoStreamTerminationDateBusinessCentersRepeatinGroup.
func (m NoStreamTerminationDateBusinessCentersRepeatingGroup) Get(i int) NoStreamTerminationDateBusinessCenters {
	return NoStreamTerminationDateBusinessCenters{m.RepeatingGroup.Get(i)}
}

// NoStreamCalculationPeriodBusinessCenters is a repeating group element, Tag 40958.
type NoStreamCalculationPeriodBusinessCenters struct {
	*quickfix.Group
}

// SetStreamCalculationPeriodBusinessCenter sets StreamCalculationPeriodBusinessCenter, Tag 40074.
func (m NoStreamCalculationPeriodBusinessCenters) SetStreamCalculationPeriodBusinessCenter(v string) {
	m.Set(field.NewStreamCalculationPeriodBusinessCenter(v))
}

// GetStreamCalculationPeriodBusinessCenter gets StreamCalculationPeriodBusinessCenter, Tag 40074.
func (m NoStreamCalculationPeriodBusinessCenters) GetStreamCalculationPeriodBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.StreamCalculationPeriodBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasStreamCalculationPeriodBusinessCenter returns true if StreamCalculationPeriodBusinessCenter is present, Tag 40074.
func (m NoStreamCalculationPeriodBusinessCenters) HasStreamCalculationPeriodBusinessCenter() bool {
	return m.Has(tag.StreamCalculationPeriodBusinessCenter)
}

// NoStreamCalculationPeriodBusinessCentersRepeatingGroup is a repeating group, Tag 40958.
type NoStreamCalculationPeriodBusinessCentersRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoStreamCalculationPeriodBusinessCentersRepeatingGroup returns an initialized, NoStreamCalculationPeriodBusinessCentersRepeatingGroup.
func NewNoStreamCalculationPeriodBusinessCentersRepeatingGroup() NoStreamCalculationPeriodBusinessCentersRepeatingGroup {
	return NoStreamCalculationPeriodBusinessCentersRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoStreamCalculationPeriodBusinessCenters,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.StreamCalculationPeriodBusinessCenter),
			},
		),
	}
}

// Add create and append a new NoStreamCalculationPeriodBusinessCenters to this group.
func (m NoStreamCalculationPeriodBusinessCentersRepeatingGroup) Add() NoStreamCalculationPeriodBusinessCenters {
	g := m.RepeatingGroup.Add()
	return NoStreamCalculationPeriodBusinessCenters{g}
}

// Get returns the ith NoStreamCalculationPeriodBusinessCenters in the NoStreamCalculationPeriodBusinessCentersRepeatinGroup.
func (m NoStreamCalculationPeriodBusinessCentersRepeatingGroup) Get(i int) NoStreamCalculationPeriodBusinessCenters {
	return NoStreamCalculationPeriodBusinessCenters{m.RepeatingGroup.Get(i)}
}

// NoStreamFirstPeriodStartDateBusinessCenters is a repeating group element, Tag 40959.
type NoStreamFirstPeriodStartDateBusinessCenters struct {
	*quickfix.Group
}

// SetStreamFirstPeriodStartDateBusinessCenter sets StreamFirstPeriodStartDateBusinessCenter, Tag 40077.
func (m NoStreamFirstPeriodStartDateBusinessCenters) SetStreamFirstPeriodStartDateBusinessCenter(v string) {
	m.Set(field.NewStreamFirstPeriodStartDateBusinessCenter(v))
}

// GetStreamFirstPeriodStartDateBusinessCenter gets StreamFirstPeriodStartDateBusinessCenter, Tag 40077.
func (m NoStreamFirstPeriodStartDateBusinessCenters) GetStreamFirstPeriodStartDateBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.StreamFirstPeriodStartDateBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasStreamFirstPeriodStartDateBusinessCenter returns true if StreamFirstPeriodStartDateBusinessCenter is present, Tag 40077.
func (m NoStreamFirstPeriodStartDateBusinessCenters) HasStreamFirstPeriodStartDateBusinessCenter() bool {
	return m.Has(tag.StreamFirstPeriodStartDateBusinessCenter)
}

// NoStreamFirstPeriodStartDateBusinessCentersRepeatingGroup is a repeating group, Tag 40959.
type NoStreamFirstPeriodStartDateBusinessCentersRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoStreamFirstPeriodStartDateBusinessCentersRepeatingGroup returns an initialized, NoStreamFirstPeriodStartDateBusinessCentersRepeatingGroup.
func NewNoStreamFirstPeriodStartDateBusinessCentersRepeatingGroup() NoStreamFirstPeriodStartDateBusinessCentersRepeatingGroup {
	return NoStreamFirstPeriodStartDateBusinessCentersRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoStreamFirstPeriodStartDateBusinessCenters,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.StreamFirstPeriodStartDateBusinessCenter),
			},
		),
	}
}

// Add create and append a new NoStreamFirstPeriodStartDateBusinessCenters to this group.
func (m NoStreamFirstPeriodStartDateBusinessCentersRepeatingGroup) Add() NoStreamFirstPeriodStartDateBusinessCenters {
	g := m.RepeatingGroup.Add()
	return NoStreamFirstPeriodStartDateBusinessCenters{g}
}

// Get returns the ith NoStreamFirstPeriodStartDateBusinessCenters in the NoStreamFirstPeriodStartDateBusinessCentersRepeatinGroup.
func (m NoStreamFirstPeriodStartDateBusinessCentersRepeatingGroup) Get(i int) NoStreamFirstPeriodStartDateBusinessCenters {
	return NoStreamFirstPeriodStartDateBusinessCenters{m.RepeatingGroup.Get(i)}
}

// NoStreamCalculationPeriodDates is a repeating group element, Tag 41241.
type NoStreamCalculationPeriodDates struct {
	*quickfix.Group
}

// SetStreamCalculationPeriodDate sets StreamCalculationPeriodDate, Tag 41242.
func (m NoStreamCalculationPeriodDates) SetStreamCalculationPeriodDate(v string) {
	m.Set(field.NewStreamCalculationPeriodDate(v))
}

// SetStreamCalculationPeriodDateType sets StreamCalculationPeriodDateType, Tag 41243.
func (m NoStreamCalculationPeriodDates) SetStreamCalculationPeriodDateType(v int) {
	m.Set(field.NewStreamCalculationPeriodDateType(v))
}

// GetStreamCalculationPeriodDate gets StreamCalculationPeriodDate, Tag 41242.
func (m NoStreamCalculationPeriodDates) GetStreamCalculationPeriodDate() (v string, err quickfix.MessageRejectError) {
	var f field.StreamCalculationPeriodDateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStreamCalculationPeriodDateType gets StreamCalculationPeriodDateType, Tag 41243.
func (m NoStreamCalculationPeriodDates) GetStreamCalculationPeriodDateType() (v int, err quickfix.MessageRejectError) {
	var f field.StreamCalculationPeriodDateTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasStreamCalculationPeriodDate returns true if StreamCalculationPeriodDate is present, Tag 41242.
func (m NoStreamCalculationPeriodDates) HasStreamCalculationPeriodDate() bool {
	return m.Has(tag.StreamCalculationPeriodDate)
}

// HasStreamCalculationPeriodDateType returns true if StreamCalculationPeriodDateType is present, Tag 41243.
func (m NoStreamCalculationPeriodDates) HasStreamCalculationPeriodDateType() bool {
	return m.Has(tag.StreamCalculationPeriodDateType)
}

// NoStreamCalculationPeriodDatesRepeatingGroup is a repeating group, Tag 41241.
type NoStreamCalculationPeriodDatesRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoStreamCalculationPeriodDatesRepeatingGroup returns an initialized, NoStreamCalculationPeriodDatesRepeatingGroup.
func NewNoStreamCalculationPeriodDatesRepeatingGroup() NoStreamCalculationPeriodDatesRepeatingGroup {
	return NoStreamCalculationPeriodDatesRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoStreamCalculationPeriodDates,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.StreamCalculationPeriodDate),
				quickfix.GroupElement(tag.StreamCalculationPeriodDateType),
			},
		),
	}
}

// Add create and append a new NoStreamCalculationPeriodDates to this group.
func (m NoStreamCalculationPeriodDatesRepeatingGroup) Add() NoStreamCalculationPeriodDates {
	g := m.RepeatingGroup.Add()
	return NoStreamCalculationPeriodDates{g}
}

// Get returns the ith NoStreamCalculationPeriodDates in the NoStreamCalculationPeriodDatesRepeatinGroup.
func (m NoStreamCalculationPeriodDatesRepeatingGroup) Get(i int) NoStreamCalculationPeriodDates {
	return NoStreamCalculationPeriodDates{m.RepeatingGroup.Get(i)}
}

// NoPaymentStreamPaymentDateBusinessCenters is a repeating group element, Tag 40947.
type NoPaymentStreamPaymentDateBusinessCenters struct {
	*quickfix.Group
}

// SetPaymentStreamPaymentDateBusinessCenter sets PaymentStreamPaymentDateBusinessCenter, Tag 40752.
func (m NoPaymentStreamPaymentDateBusinessCenters) SetPaymentStreamPaymentDateBusinessCenter(v string) {
	m.Set(field.NewPaymentStreamPaymentDateBusinessCenter(v))
}

// GetPaymentStreamPaymentDateBusinessCenter gets PaymentStreamPaymentDateBusinessCenter, Tag 40752.
func (m NoPaymentStreamPaymentDateBusinessCenters) GetPaymentStreamPaymentDateBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStreamPaymentDateBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasPaymentStreamPaymentDateBusinessCenter returns true if PaymentStreamPaymentDateBusinessCenter is present, Tag 40752.
func (m NoPaymentStreamPaymentDateBusinessCenters) HasPaymentStreamPaymentDateBusinessCenter() bool {
	return m.Has(tag.PaymentStreamPaymentDateBusinessCenter)
}

// NoPaymentStreamPaymentDateBusinessCentersRepeatingGroup is a repeating group, Tag 40947.
type NoPaymentStreamPaymentDateBusinessCentersRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoPaymentStreamPaymentDateBusinessCentersRepeatingGroup returns an initialized, NoPaymentStreamPaymentDateBusinessCentersRepeatingGroup.
func NewNoPaymentStreamPaymentDateBusinessCentersRepeatingGroup() NoPaymentStreamPaymentDateBusinessCentersRepeatingGroup {
	return NoPaymentStreamPaymentDateBusinessCentersRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoPaymentStreamPaymentDateBusinessCenters,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.PaymentStreamPaymentDateBusinessCenter),
			},
		),
	}
}

// Add create and append a new NoPaymentStreamPaymentDateBusinessCenters to this group.
func (m NoPaymentStreamPaymentDateBusinessCentersRepeatingGroup) Add() NoPaymentStreamPaymentDateBusinessCenters {
	g := m.RepeatingGroup.Add()
	return NoPaymentStreamPaymentDateBusinessCenters{g}
}

// Get returns the ith NoPaymentStreamPaymentDateBusinessCenters in the NoPaymentStreamPaymentDateBusinessCentersRepeatinGroup.
func (m NoPaymentStreamPaymentDateBusinessCentersRepeatingGroup) Get(i int) NoPaymentStreamPaymentDateBusinessCenters {
	return NoPaymentStreamPaymentDateBusinessCenters{m.RepeatingGroup.Get(i)}
}

// NoPaymentStreamPaymentDates is a repeating group element, Tag 41220.
type NoPaymentStreamPaymentDates struct {
	*quickfix.Group
}

// SetPaymentStreamPaymentDate sets PaymentStreamPaymentDate, Tag 41221.
func (m NoPaymentStreamPaymentDates) SetPaymentStreamPaymentDate(v string) {
	m.Set(field.NewPaymentStreamPaymentDate(v))
}

// SetPaymentStreamPaymentDateType sets PaymentStreamPaymentDateType, Tag 41222.
func (m NoPaymentStreamPaymentDates) SetPaymentStreamPaymentDateType(v int) {
	m.Set(field.NewPaymentStreamPaymentDateType(v))
}

// GetPaymentStreamPaymentDate gets PaymentStreamPaymentDate, Tag 41221.
func (m NoPaymentStreamPaymentDates) GetPaymentStreamPaymentDate() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStreamPaymentDateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamPaymentDateType gets PaymentStreamPaymentDateType, Tag 41222.
func (m NoPaymentStreamPaymentDates) GetPaymentStreamPaymentDateType() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStreamPaymentDateTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasPaymentStreamPaymentDate returns true if PaymentStreamPaymentDate is present, Tag 41221.
func (m NoPaymentStreamPaymentDates) HasPaymentStreamPaymentDate() bool {
	return m.Has(tag.PaymentStreamPaymentDate)
}

// HasPaymentStreamPaymentDateType returns true if PaymentStreamPaymentDateType is present, Tag 41222.
func (m NoPaymentStreamPaymentDates) HasPaymentStreamPaymentDateType() bool {
	return m.Has(tag.PaymentStreamPaymentDateType)
}

// NoPaymentStreamPaymentDatesRepeatingGroup is a repeating group, Tag 41220.
type NoPaymentStreamPaymentDatesRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoPaymentStreamPaymentDatesRepeatingGroup returns an initialized, NoPaymentStreamPaymentDatesRepeatingGroup.
func NewNoPaymentStreamPaymentDatesRepeatingGroup() NoPaymentStreamPaymentDatesRepeatingGroup {
	return NoPaymentStreamPaymentDatesRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoPaymentStreamPaymentDates,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.PaymentStreamPaymentDate),
				quickfix.GroupElement(tag.PaymentStreamPaymentDateType),
			},
		),
	}
}

// Add create and append a new NoPaymentStreamPaymentDates to this group.
func (m NoPaymentStreamPaymentDatesRepeatingGroup) Add() NoPaymentStreamPaymentDates {
	g := m.RepeatingGroup.Add()
	return NoPaymentStreamPaymentDates{g}
}

// Get returns the ith NoPaymentStreamPaymentDates in the NoPaymentStreamPaymentDatesRepeatinGroup.
func (m NoPaymentStreamPaymentDatesRepeatingGroup) Get(i int) NoPaymentStreamPaymentDates {
	return NoPaymentStreamPaymentDates{m.RepeatingGroup.Get(i)}
}

// NoPaymentStreamResetDateBusinessCenters is a repeating group element, Tag 40948.
type NoPaymentStreamResetDateBusinessCenters struct {
	*quickfix.Group
}

// SetPaymentStreamResetDateBusinessCenter sets PaymentStreamResetDateBusinessCenter, Tag 40763.
func (m NoPaymentStreamResetDateBusinessCenters) SetPaymentStreamResetDateBusinessCenter(v string) {
	m.Set(field.NewPaymentStreamResetDateBusinessCenter(v))
}

// GetPaymentStreamResetDateBusinessCenter gets PaymentStreamResetDateBusinessCenter, Tag 40763.
func (m NoPaymentStreamResetDateBusinessCenters) GetPaymentStreamResetDateBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStreamResetDateBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasPaymentStreamResetDateBusinessCenter returns true if PaymentStreamResetDateBusinessCenter is present, Tag 40763.
func (m NoPaymentStreamResetDateBusinessCenters) HasPaymentStreamResetDateBusinessCenter() bool {
	return m.Has(tag.PaymentStreamResetDateBusinessCenter)
}

// NoPaymentStreamResetDateBusinessCentersRepeatingGroup is a repeating group, Tag 40948.
type NoPaymentStreamResetDateBusinessCentersRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoPaymentStreamResetDateBusinessCentersRepeatingGroup returns an initialized, NoPaymentStreamResetDateBusinessCentersRepeatingGroup.
func NewNoPaymentStreamResetDateBusinessCentersRepeatingGroup() NoPaymentStreamResetDateBusinessCentersRepeatingGroup {
	return NoPaymentStreamResetDateBusinessCentersRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoPaymentStreamResetDateBusinessCenters,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.PaymentStreamResetDateBusinessCenter),
			},
		),
	}
}

// Add create and append a new NoPaymentStreamResetDateBusinessCenters to this group.
func (m NoPaymentStreamResetDateBusinessCentersRepeatingGroup) Add() NoPaymentStreamResetDateBusinessCenters {
	g := m.RepeatingGroup.Add()
	return NoPaymentStreamResetDateBusinessCenters{g}
}

// Get returns the ith NoPaymentStreamResetDateBusinessCenters in the NoPaymentStreamResetDateBusinessCentersRepeatinGroup.
func (m NoPaymentStreamResetDateBusinessCentersRepeatingGroup) Get(i int) NoPaymentStreamResetDateBusinessCenters {
	return NoPaymentStreamResetDateBusinessCenters{m.RepeatingGroup.Get(i)}
}

// NoPaymentStreamInitialFixingDateBusinessCenters is a repeating group element, Tag 40949.
type NoPaymentStreamInitialFixingDateBusinessCenters struct {
	*quickfix.Group
}

// SetPaymentStreamInitialFixingDateBusinessCenter sets PaymentStreamInitialFixingDateBusinessCenter, Tag 40769.
func (m NoPaymentStreamInitialFixingDateBusinessCenters) SetPaymentStreamInitialFixingDateBusinessCenter(v string) {
	m.Set(field.NewPaymentStreamInitialFixingDateBusinessCenter(v))
}

// GetPaymentStreamInitialFixingDateBusinessCenter gets PaymentStreamInitialFixingDateBusinessCenter, Tag 40769.
func (m NoPaymentStreamInitialFixingDateBusinessCenters) GetPaymentStreamInitialFixingDateBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStreamInitialFixingDateBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasPaymentStreamInitialFixingDateBusinessCenter returns true if PaymentStreamInitialFixingDateBusinessCenter is present, Tag 40769.
func (m NoPaymentStreamInitialFixingDateBusinessCenters) HasPaymentStreamInitialFixingDateBusinessCenter() bool {
	return m.Has(tag.PaymentStreamInitialFixingDateBusinessCenter)
}

// NoPaymentStreamInitialFixingDateBusinessCentersRepeatingGroup is a repeating group, Tag 40949.
type NoPaymentStreamInitialFixingDateBusinessCentersRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoPaymentStreamInitialFixingDateBusinessCentersRepeatingGroup returns an initialized, NoPaymentStreamInitialFixingDateBusinessCentersRepeatingGroup.
func NewNoPaymentStreamInitialFixingDateBusinessCentersRepeatingGroup() NoPaymentStreamInitialFixingDateBusinessCentersRepeatingGroup {
	return NoPaymentStreamInitialFixingDateBusinessCentersRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoPaymentStreamInitialFixingDateBusinessCenters,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.PaymentStreamInitialFixingDateBusinessCenter),
			},
		),
	}
}

// Add create and append a new NoPaymentStreamInitialFixingDateBusinessCenters to this group.
func (m NoPaymentStreamInitialFixingDateBusinessCentersRepeatingGroup) Add() NoPaymentStreamInitialFixingDateBusinessCenters {
	g := m.RepeatingGroup.Add()
	return NoPaymentStreamInitialFixingDateBusinessCenters{g}
}

// Get returns the ith NoPaymentStreamInitialFixingDateBusinessCenters in the NoPaymentStreamInitialFixingDateBusinessCentersRepeatinGroup.
func (m NoPaymentStreamInitialFixingDateBusinessCentersRepeatingGroup) Get(i int) NoPaymentStreamInitialFixingDateBusinessCenters {
	return NoPaymentStreamInitialFixingDateBusinessCenters{m.RepeatingGroup.Get(i)}
}

// NoPaymentStreamFixingDateBusinessCenters is a repeating group element, Tag 40950.
type NoPaymentStreamFixingDateBusinessCenters struct {
	*quickfix.Group
}

// SetPaymentStreamFixingDateBusinessCenter sets PaymentStreamFixingDateBusinessCenter, Tag 40776.
func (m NoPaymentStreamFixingDateBusinessCenters) SetPaymentStreamFixingDateBusinessCenter(v string) {
	m.Set(field.NewPaymentStreamFixingDateBusinessCenter(v))
}

// GetPaymentStreamFixingDateBusinessCenter gets PaymentStreamFixingDateBusinessCenter, Tag 40776.
func (m NoPaymentStreamFixingDateBusinessCenters) GetPaymentStreamFixingDateBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStreamFixingDateBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasPaymentStreamFixingDateBusinessCenter returns true if PaymentStreamFixingDateBusinessCenter is present, Tag 40776.
func (m NoPaymentStreamFixingDateBusinessCenters) HasPaymentStreamFixingDateBusinessCenter() bool {
	return m.Has(tag.PaymentStreamFixingDateBusinessCenter)
}

// NoPaymentStreamFixingDateBusinessCentersRepeatingGroup is a repeating group, Tag 40950.
type NoPaymentStreamFixingDateBusinessCentersRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoPaymentStreamFixingDateBusinessCentersRepeatingGroup returns an initialized, NoPaymentStreamFixingDateBusinessCentersRepeatingGroup.
func NewNoPaymentStreamFixingDateBusinessCentersRepeatingGroup() NoPaymentStreamFixingDateBusinessCentersRepeatingGroup {
	return NoPaymentStreamFixingDateBusinessCentersRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoPaymentStreamFixingDateBusinessCenters,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.PaymentStreamFixingDateBusinessCenter),
			},
		),
	}
}

// Add create and append a new NoPaymentStreamFixingDateBusinessCenters to this group.
func (m NoPaymentStreamFixingDateBusinessCentersRepeatingGroup) Add() NoPaymentStreamFixingDateBusinessCenters {
	g := m.RepeatingGroup.Add()
	return NoPaymentStreamFixingDateBusinessCenters{g}
}

// Get returns the ith NoPaymentStreamFixingDateBusinessCenters in the NoPaymentStreamFixingDateBusinessCentersRepeatinGroup.
func (m NoPaymentStreamFixingDateBusinessCentersRepeatingGroup) Get(i int) NoPaymentStreamFixingDateBusinessCenters {
	return NoPaymentStreamFixingDateBusinessCenters{m.RepeatingGroup.Get(i)}
}

// NoPaymentStreamFixingDates is a repeating group element, Tag 42660.
type NoPaymentStreamFixingDates struct {
	*quickfix.Group
}

// SetPaymentStreamFixingDate sets PaymentStreamFixingDate, Tag 42661.
func (m NoPaymentStreamFixingDates) SetPaymentStreamFixingDate(v string) {
	m.Set(field.NewPaymentStreamFixingDate(v))
}

// SetPaymentStreamFixingDateType sets PaymentStreamFixingDateType, Tag 42662.
func (m NoPaymentStreamFixingDates) SetPaymentStreamFixingDateType(v int) {
	m.Set(field.NewPaymentStreamFixingDateType(v))
}

// GetPaymentStreamFixingDate gets PaymentStreamFixingDate, Tag 42661.
func (m NoPaymentStreamFixingDates) GetPaymentStreamFixingDate() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStreamFixingDateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamFixingDateType gets PaymentStreamFixingDateType, Tag 42662.
func (m NoPaymentStreamFixingDates) GetPaymentStreamFixingDateType() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStreamFixingDateTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasPaymentStreamFixingDate returns true if PaymentStreamFixingDate is present, Tag 42661.
func (m NoPaymentStreamFixingDates) HasPaymentStreamFixingDate() bool {
	return m.Has(tag.PaymentStreamFixingDate)
}

// HasPaymentStreamFixingDateType returns true if PaymentStreamFixingDateType is present, Tag 42662.
func (m NoPaymentStreamFixingDates) HasPaymentStreamFixingDateType() bool {
	return m.Has(tag.PaymentStreamFixingDateType)
}

// NoPaymentStreamFixingDatesRepeatingGroup is a repeating group, Tag 42660.
type NoPaymentStreamFixingDatesRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoPaymentStreamFixingDatesRepeatingGroup returns an initialized, NoPaymentStreamFixingDatesRepeatingGroup.
func NewNoPaymentStreamFixingDatesRepeatingGroup() NoPaymentStreamFixingDatesRepeatingGroup {
	return NoPaymentStreamFixingDatesRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoPaymentStreamFixingDates,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.PaymentStreamFixingDate),
				quickfix.GroupElement(tag.PaymentStreamFixingDateType),
			},
		),
	}
}

// Add create and append a new NoPaymentStreamFixingDates to this group.
func (m NoPaymentStreamFixingDatesRepeatingGroup) Add() NoPaymentStreamFixingDates {
	g := m.RepeatingGroup.Add()
	return NoPaymentStreamFixingDates{g}
}

// Get returns the ith NoPaymentStreamFixingDates in the NoPaymentStreamFixingDatesRepeatinGroup.
func (m NoPaymentStreamFixingDatesRepeatingGroup) Get(i int) NoPaymentStreamFixingDates {
	return NoPaymentStreamFixingDates{m.RepeatingGroup.Get(i)}
}

// NoPaymentStreamPricingBusinessCenters is a repeating group element, Tag 41192.
type NoPaymentStreamPricingBusinessCenters struct {
	*quickfix.Group
}

// SetPaymentStreamPricingBusinessCenter sets PaymentStreamPricingBusinessCenter, Tag 41193.
func (m NoPaymentStreamPricingBusinessCenters) SetPaymentStreamPricingBusinessCenter(v string) {
	m.Set(field.NewPaymentStreamPricingBusinessCenter(v))
}

// GetPaymentStreamPricingBusinessCenter gets PaymentStreamPricingBusinessCenter, Tag 41193.
func (m NoPaymentStreamPricingBusinessCenters) GetPaymentStreamPricingBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStreamPricingBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasPaymentStreamPricingBusinessCenter returns true if PaymentStreamPricingBusinessCenter is present, Tag 41193.
func (m NoPaymentStreamPricingBusinessCenters) HasPaymentStreamPricingBusinessCenter() bool {
	return m.Has(tag.PaymentStreamPricingBusinessCenter)
}

// NoPaymentStreamPricingBusinessCentersRepeatingGroup is a repeating group, Tag 41192.
type NoPaymentStreamPricingBusinessCentersRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoPaymentStreamPricingBusinessCentersRepeatingGroup returns an initialized, NoPaymentStreamPricingBusinessCentersRepeatingGroup.
func NewNoPaymentStreamPricingBusinessCentersRepeatingGroup() NoPaymentStreamPricingBusinessCentersRepeatingGroup {
	return NoPaymentStreamPricingBusinessCentersRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoPaymentStreamPricingBusinessCenters,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.PaymentStreamPricingBusinessCenter),
			},
		),
	}
}

// Add create and append a new NoPaymentStreamPricingBusinessCenters to this group.
func (m NoPaymentStreamPricingBusinessCentersRepeatingGroup) Add() NoPaymentStreamPricingBusinessCenters {
	g := m.RepeatingGroup.Add()
	return NoPaymentStreamPricingBusinessCenters{g}
}

// Get returns the ith NoPaymentStreamPricingBusinessCenters in the NoPaymentStreamPricingBusinessCentersRepeatinGroup.
func (m NoPaymentStreamPricingBusinessCentersRepeatingGroup) Get(i int) NoPaymentStreamPricingBusinessCenters {
	return NoPaymentStreamPricingBusinessCenters{m.RepeatingGroup.Get(i)}
}

// NoPaymentStreamPricingDays is a repeating group element, Tag 41227.
type NoPaymentStreamPricingDays struct {
	*quickfix.Group
}

// SetPaymentStreamPricingDayOfWeek sets PaymentStreamPricingDayOfWeek, Tag 41228.
func (m NoPaymentStreamPricingDays) SetPaymentStreamPricingDayOfWeek(v enum.PaymentStreamPricingDayOfWeek) {
	m.Set(field.NewPaymentStreamPricingDayOfWeek(v))
}

// SetPaymentStreamPricingDayNumber sets PaymentStreamPricingDayNumber, Tag 41229.
func (m NoPaymentStreamPricingDays) SetPaymentStreamPricingDayNumber(v int) {
	m.Set(field.NewPaymentStreamPricingDayNumber(v))
}

// GetPaymentStreamPricingDayOfWeek gets PaymentStreamPricingDayOfWeek, Tag 41228.
func (m NoPaymentStreamPricingDays) GetPaymentStreamPricingDayOfWeek() (v enum.PaymentStreamPricingDayOfWeek, err quickfix.MessageRejectError) {
	var f field.PaymentStreamPricingDayOfWeekField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamPricingDayNumber gets PaymentStreamPricingDayNumber, Tag 41229.
func (m NoPaymentStreamPricingDays) GetPaymentStreamPricingDayNumber() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStreamPricingDayNumberField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasPaymentStreamPricingDayOfWeek returns true if PaymentStreamPricingDayOfWeek is present, Tag 41228.
func (m NoPaymentStreamPricingDays) HasPaymentStreamPricingDayOfWeek() bool {
	return m.Has(tag.PaymentStreamPricingDayOfWeek)
}

// HasPaymentStreamPricingDayNumber returns true if PaymentStreamPricingDayNumber is present, Tag 41229.
func (m NoPaymentStreamPricingDays) HasPaymentStreamPricingDayNumber() bool {
	return m.Has(tag.PaymentStreamPricingDayNumber)
}

// NoPaymentStreamPricingDaysRepeatingGroup is a repeating group, Tag 41227.
type NoPaymentStreamPricingDaysRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoPaymentStreamPricingDaysRepeatingGroup returns an initialized, NoPaymentStreamPricingDaysRepeatingGroup.
func NewNoPaymentStreamPricingDaysRepeatingGroup() NoPaymentStreamPricingDaysRepeatingGroup {
	return NoPaymentStreamPricingDaysRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoPaymentStreamPricingDays,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.PaymentStreamPricingDayOfWeek),
				quickfix.GroupElement(tag.PaymentStreamPricingDayNumber),
			},
		),
	}
}

// Add create and append a new NoPaymentStreamPricingDays to this group.
func (m NoPaymentStreamPricingDaysRepeatingGroup) Add() NoPaymentStreamPricingDays {
	g := m.RepeatingGroup.Add()
	return NoPaymentStreamPricingDays{g}
}

// Get returns the ith NoPaymentStreamPricingDays in the NoPaymentStreamPricingDaysRepeatinGroup.
func (m NoPaymentStreamPricingDaysRepeatingGroup) Get(i int) NoPaymentStreamPricingDays {
	return NoPaymentStreamPricingDays{m.RepeatingGroup.Get(i)}
}

// NoPaymentStreamPricingDates is a repeating group element, Tag 41224.
type NoPaymentStreamPricingDates struct {
	*quickfix.Group
}

// SetPaymentStreamPricingDate sets PaymentStreamPricingDate, Tag 41225.
func (m NoPaymentStreamPricingDates) SetPaymentStreamPricingDate(v string) {
	m.Set(field.NewPaymentStreamPricingDate(v))
}

// SetPaymentStreamPricingDateType sets PaymentStreamPricingDateType, Tag 41226.
func (m NoPaymentStreamPricingDates) SetPaymentStreamPricingDateType(v int) {
	m.Set(field.NewPaymentStreamPricingDateType(v))
}

// GetPaymentStreamPricingDate gets PaymentStreamPricingDate, Tag 41225.
func (m NoPaymentStreamPricingDates) GetPaymentStreamPricingDate() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStreamPricingDateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamPricingDateType gets PaymentStreamPricingDateType, Tag 41226.
func (m NoPaymentStreamPricingDates) GetPaymentStreamPricingDateType() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStreamPricingDateTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasPaymentStreamPricingDate returns true if PaymentStreamPricingDate is present, Tag 41225.
func (m NoPaymentStreamPricingDates) HasPaymentStreamPricingDate() bool {
	return m.Has(tag.PaymentStreamPricingDate)
}

// HasPaymentStreamPricingDateType returns true if PaymentStreamPricingDateType is present, Tag 41226.
func (m NoPaymentStreamPricingDates) HasPaymentStreamPricingDateType() bool {
	return m.Has(tag.PaymentStreamPricingDateType)
}

// NoPaymentStreamPricingDatesRepeatingGroup is a repeating group, Tag 41224.
type NoPaymentStreamPricingDatesRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoPaymentStreamPricingDatesRepeatingGroup returns an initialized, NoPaymentStreamPricingDatesRepeatingGroup.
func NewNoPaymentStreamPricingDatesRepeatingGroup() NoPaymentStreamPricingDatesRepeatingGroup {
	return NoPaymentStreamPricingDatesRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoPaymentStreamPricingDates,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.PaymentStreamPricingDate),
				quickfix.GroupElement(tag.PaymentStreamPricingDateType),
			},
		),
	}
}

// Add create and append a new NoPaymentStreamPricingDates to this group.
func (m NoPaymentStreamPricingDatesRepeatingGroup) Add() NoPaymentStreamPricingDates {
	g := m.RepeatingGroup.Add()
	return NoPaymentStreamPricingDates{g}
}

// Get returns the ith NoPaymentStreamPricingDates in the NoPaymentStreamPricingDatesRepeatinGroup.
func (m NoPaymentStreamPricingDatesRepeatingGroup) Get(i int) NoPaymentStreamPricingDates {
	return NoPaymentStreamPricingDates{m.RepeatingGroup.Get(i)}
}

// NoPaymentStreamFormulas is a repeating group element, Tag 42683.
type NoPaymentStreamFormulas struct {
	*quickfix.Group
}

// SetPaymentStreamFormula sets PaymentStreamFormula, Tag 42684.
func (m NoPaymentStreamFormulas) SetPaymentStreamFormula(v string) {
	m.Set(field.NewPaymentStreamFormula(v))
}

// SetPaymentStreamFormulaDesc sets PaymentStreamFormulaDesc, Tag 42685.
func (m NoPaymentStreamFormulas) SetPaymentStreamFormulaDesc(v string) {
	m.Set(field.NewPaymentStreamFormulaDesc(v))
}

// SetPaymentStreamFormulaLength sets PaymentStreamFormulaLength, Tag 43109.
func (m NoPaymentStreamFormulas) SetPaymentStreamFormulaLength(v int) {
	m.Set(field.NewPaymentStreamFormulaLength(v))
}

// GetPaymentStreamFormula gets PaymentStreamFormula, Tag 42684.
func (m NoPaymentStreamFormulas) GetPaymentStreamFormula() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStreamFormulaField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamFormulaDesc gets PaymentStreamFormulaDesc, Tag 42685.
func (m NoPaymentStreamFormulas) GetPaymentStreamFormulaDesc() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStreamFormulaDescField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamFormulaLength gets PaymentStreamFormulaLength, Tag 43109.
func (m NoPaymentStreamFormulas) GetPaymentStreamFormulaLength() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStreamFormulaLengthField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasPaymentStreamFormula returns true if PaymentStreamFormula is present, Tag 42684.
func (m NoPaymentStreamFormulas) HasPaymentStreamFormula() bool {
	return m.Has(tag.PaymentStreamFormula)
}

// HasPaymentStreamFormulaDesc returns true if PaymentStreamFormulaDesc is present, Tag 42685.
func (m NoPaymentStreamFormulas) HasPaymentStreamFormulaDesc() bool {
	return m.Has(tag.PaymentStreamFormulaDesc)
}

// HasPaymentStreamFormulaLength returns true if PaymentStreamFormulaLength is present, Tag 43109.
func (m NoPaymentStreamFormulas) HasPaymentStreamFormulaLength() bool {
	return m.Has(tag.PaymentStreamFormulaLength)
}

// NoPaymentStreamFormulasRepeatingGroup is a repeating group, Tag 42683.
type NoPaymentStreamFormulasRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoPaymentStreamFormulasRepeatingGroup returns an initialized, NoPaymentStreamFormulasRepeatingGroup.
func NewNoPaymentStreamFormulasRepeatingGroup() NoPaymentStreamFormulasRepeatingGroup {
	return NoPaymentStreamFormulasRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoPaymentStreamFormulas,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.PaymentStreamFormula),
				quickfix.GroupElement(tag.PaymentStreamFormulaDesc),
				quickfix.GroupElement(tag.PaymentStreamFormulaLength),
			},
		),
	}
}

// Add create and append a new NoPaymentStreamFormulas to this group.
func (m NoPaymentStreamFormulasRepeatingGroup) Add() NoPaymentStreamFormulas {
	g := m.RepeatingGroup.Add()
	return NoPaymentStreamFormulas{g}
}

// Get returns the ith NoPaymentStreamFormulas in the NoPaymentStreamFormulasRepeatinGroup.
func (m NoPaymentStreamFormulasRepeatingGroup) Get(i int) NoPaymentStreamFormulas {
	return NoPaymentStreamFormulas{m.RepeatingGroup.Get(i)}
}

// NoDividendPeriods is a repeating group element, Tag 42274.
type NoDividendPeriods struct {
	*quickfix.Group
}

// SetDividendPeriodSequence sets DividendPeriodSequence, Tag 42275.
func (m NoDividendPeriods) SetDividendPeriodSequence(v int) {
	m.Set(field.NewDividendPeriodSequence(v))
}

// SetDividendPeriodStartDateUnadjusted sets DividendPeriodStartDateUnadjusted, Tag 42276.
func (m NoDividendPeriods) SetDividendPeriodStartDateUnadjusted(v string) {
	m.Set(field.NewDividendPeriodStartDateUnadjusted(v))
}

// SetDividendPeriodEndDateUnadjusted sets DividendPeriodEndDateUnadjusted, Tag 42277.
func (m NoDividendPeriods) SetDividendPeriodEndDateUnadjusted(v string) {
	m.Set(field.NewDividendPeriodEndDateUnadjusted(v))
}

// SetDividendPeriodUnderlierRefID sets DividendPeriodUnderlierRefID, Tag 42278.
func (m NoDividendPeriods) SetDividendPeriodUnderlierRefID(v string) {
	m.Set(field.NewDividendPeriodUnderlierRefID(v))
}

// SetDividendPeriodStrikePrice sets DividendPeriodStrikePrice, Tag 42279.
func (m NoDividendPeriods) SetDividendPeriodStrikePrice(value decimal.Decimal, scale int32) {
	m.Set(field.NewDividendPeriodStrikePrice(value, scale))
}

// SetDividendPeriodBusinessDayConvention sets DividendPeriodBusinessDayConvention, Tag 42280.
func (m NoDividendPeriods) SetDividendPeriodBusinessDayConvention(v int) {
	m.Set(field.NewDividendPeriodBusinessDayConvention(v))
}

// SetNoDividendPeriodBusinessCenters sets NoDividendPeriodBusinessCenters, Tag 42294.
func (m NoDividendPeriods) SetNoDividendPeriodBusinessCenters(f NoDividendPeriodBusinessCentersRepeatingGroup) {
	m.SetGroup(f)
}

// SetDividendPeriodValuationDateUnadjusted sets DividendPeriodValuationDateUnadjusted, Tag 42281.
func (m NoDividendPeriods) SetDividendPeriodValuationDateUnadjusted(v string) {
	m.Set(field.NewDividendPeriodValuationDateUnadjusted(v))
}

// SetDividendPeriodValuationDateRelativeTo sets DividendPeriodValuationDateRelativeTo, Tag 42282.
func (m NoDividendPeriods) SetDividendPeriodValuationDateRelativeTo(v int) {
	m.Set(field.NewDividendPeriodValuationDateRelativeTo(v))
}

// SetDividendPeriodValuationDateOffsetPeriod sets DividendPeriodValuationDateOffsetPeriod, Tag 42283.
func (m NoDividendPeriods) SetDividendPeriodValuationDateOffsetPeriod(v int) {
	m.Set(field.NewDividendPeriodValuationDateOffsetPeriod(v))
}

// SetDividendPeriodValuationDateOffsetUnit sets DividendPeriodValuationDateOffsetUnit, Tag 42284.
func (m NoDividendPeriods) SetDividendPeriodValuationDateOffsetUnit(v string) {
	m.Set(field.NewDividendPeriodValuationDateOffsetUnit(v))
}

// SetDividendPeriodValuationDateOffsetDayType sets DividendPeriodValuationDateOffsetDayType, Tag 42285.
func (m NoDividendPeriods) SetDividendPeriodValuationDateOffsetDayType(v int) {
	m.Set(field.NewDividendPeriodValuationDateOffsetDayType(v))
}

// SetDividendPeriodValuationDateAdjusted sets DividendPeriodValuationDateAdjusted, Tag 42286.
func (m NoDividendPeriods) SetDividendPeriodValuationDateAdjusted(v string) {
	m.Set(field.NewDividendPeriodValuationDateAdjusted(v))
}

// SetDividendPeriodPaymentDateUnadjusted sets DividendPeriodPaymentDateUnadjusted, Tag 42287.
func (m NoDividendPeriods) SetDividendPeriodPaymentDateUnadjusted(v string) {
	m.Set(field.NewDividendPeriodPaymentDateUnadjusted(v))
}

// SetDividendPeriodPaymentDateRelativeTo sets DividendPeriodPaymentDateRelativeTo, Tag 42288.
func (m NoDividendPeriods) SetDividendPeriodPaymentDateRelativeTo(v int) {
	m.Set(field.NewDividendPeriodPaymentDateRelativeTo(v))
}

// SetDividendPeriodPaymentDateOffsetPeriod sets DividendPeriodPaymentDateOffsetPeriod, Tag 42289.
func (m NoDividendPeriods) SetDividendPeriodPaymentDateOffsetPeriod(v int) {
	m.Set(field.NewDividendPeriodPaymentDateOffsetPeriod(v))
}

// SetDividendPeriodPaymentDateOffsetUnit sets DividendPeriodPaymentDateOffsetUnit, Tag 42290.
func (m NoDividendPeriods) SetDividendPeriodPaymentDateOffsetUnit(v string) {
	m.Set(field.NewDividendPeriodPaymentDateOffsetUnit(v))
}

// SetDividendPeriodPaymentDateOffsetDayType sets DividendPeriodPaymentDateOffsetDayType, Tag 42291.
func (m NoDividendPeriods) SetDividendPeriodPaymentDateOffsetDayType(v int) {
	m.Set(field.NewDividendPeriodPaymentDateOffsetDayType(v))
}

// SetDividendPeriodPaymentDateAdjusted sets DividendPeriodPaymentDateAdjusted, Tag 42292.
func (m NoDividendPeriods) SetDividendPeriodPaymentDateAdjusted(v string) {
	m.Set(field.NewDividendPeriodPaymentDateAdjusted(v))
}

// SetDividendPeriodXID sets DividendPeriodXID, Tag 42293.
func (m NoDividendPeriods) SetDividendPeriodXID(v string) {
	m.Set(field.NewDividendPeriodXID(v))
}

// GetDividendPeriodSequence gets DividendPeriodSequence, Tag 42275.
func (m NoDividendPeriods) GetDividendPeriodSequence() (v int, err quickfix.MessageRejectError) {
	var f field.DividendPeriodSequenceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDividendPeriodStartDateUnadjusted gets DividendPeriodStartDateUnadjusted, Tag 42276.
func (m NoDividendPeriods) GetDividendPeriodStartDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.DividendPeriodStartDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDividendPeriodEndDateUnadjusted gets DividendPeriodEndDateUnadjusted, Tag 42277.
func (m NoDividendPeriods) GetDividendPeriodEndDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.DividendPeriodEndDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDividendPeriodUnderlierRefID gets DividendPeriodUnderlierRefID, Tag 42278.
func (m NoDividendPeriods) GetDividendPeriodUnderlierRefID() (v string, err quickfix.MessageRejectError) {
	var f field.DividendPeriodUnderlierRefIDField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDividendPeriodStrikePrice gets DividendPeriodStrikePrice, Tag 42279.
func (m NoDividendPeriods) GetDividendPeriodStrikePrice() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.DividendPeriodStrikePriceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDividendPeriodBusinessDayConvention gets DividendPeriodBusinessDayConvention, Tag 42280.
func (m NoDividendPeriods) GetDividendPeriodBusinessDayConvention() (v int, err quickfix.MessageRejectError) {
	var f field.DividendPeriodBusinessDayConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoDividendPeriodBusinessCenters gets NoDividendPeriodBusinessCenters, Tag 42294.
func (m NoDividendPeriods) GetNoDividendPeriodBusinessCenters() (NoDividendPeriodBusinessCentersRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoDividendPeriodBusinessCentersRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetDividendPeriodValuationDateUnadjusted gets DividendPeriodValuationDateUnadjusted, Tag 42281.
func (m NoDividendPeriods) GetDividendPeriodValuationDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.DividendPeriodValuationDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDividendPeriodValuationDateRelativeTo gets DividendPeriodValuationDateRelativeTo, Tag 42282.
func (m NoDividendPeriods) GetDividendPeriodValuationDateRelativeTo() (v int, err quickfix.MessageRejectError) {
	var f field.DividendPeriodValuationDateRelativeToField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDividendPeriodValuationDateOffsetPeriod gets DividendPeriodValuationDateOffsetPeriod, Tag 42283.
func (m NoDividendPeriods) GetDividendPeriodValuationDateOffsetPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.DividendPeriodValuationDateOffsetPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDividendPeriodValuationDateOffsetUnit gets DividendPeriodValuationDateOffsetUnit, Tag 42284.
func (m NoDividendPeriods) GetDividendPeriodValuationDateOffsetUnit() (v string, err quickfix.MessageRejectError) {
	var f field.DividendPeriodValuationDateOffsetUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDividendPeriodValuationDateOffsetDayType gets DividendPeriodValuationDateOffsetDayType, Tag 42285.
func (m NoDividendPeriods) GetDividendPeriodValuationDateOffsetDayType() (v int, err quickfix.MessageRejectError) {
	var f field.DividendPeriodValuationDateOffsetDayTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDividendPeriodValuationDateAdjusted gets DividendPeriodValuationDateAdjusted, Tag 42286.
func (m NoDividendPeriods) GetDividendPeriodValuationDateAdjusted() (v string, err quickfix.MessageRejectError) {
	var f field.DividendPeriodValuationDateAdjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDividendPeriodPaymentDateUnadjusted gets DividendPeriodPaymentDateUnadjusted, Tag 42287.
func (m NoDividendPeriods) GetDividendPeriodPaymentDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.DividendPeriodPaymentDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDividendPeriodPaymentDateRelativeTo gets DividendPeriodPaymentDateRelativeTo, Tag 42288.
func (m NoDividendPeriods) GetDividendPeriodPaymentDateRelativeTo() (v int, err quickfix.MessageRejectError) {
	var f field.DividendPeriodPaymentDateRelativeToField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDividendPeriodPaymentDateOffsetPeriod gets DividendPeriodPaymentDateOffsetPeriod, Tag 42289.
func (m NoDividendPeriods) GetDividendPeriodPaymentDateOffsetPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.DividendPeriodPaymentDateOffsetPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDividendPeriodPaymentDateOffsetUnit gets DividendPeriodPaymentDateOffsetUnit, Tag 42290.
func (m NoDividendPeriods) GetDividendPeriodPaymentDateOffsetUnit() (v string, err quickfix.MessageRejectError) {
	var f field.DividendPeriodPaymentDateOffsetUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDividendPeriodPaymentDateOffsetDayType gets DividendPeriodPaymentDateOffsetDayType, Tag 42291.
func (m NoDividendPeriods) GetDividendPeriodPaymentDateOffsetDayType() (v int, err quickfix.MessageRejectError) {
	var f field.DividendPeriodPaymentDateOffsetDayTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDividendPeriodPaymentDateAdjusted gets DividendPeriodPaymentDateAdjusted, Tag 42292.
func (m NoDividendPeriods) GetDividendPeriodPaymentDateAdjusted() (v string, err quickfix.MessageRejectError) {
	var f field.DividendPeriodPaymentDateAdjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDividendPeriodXID gets DividendPeriodXID, Tag 42293.
func (m NoDividendPeriods) GetDividendPeriodXID() (v string, err quickfix.MessageRejectError) {
	var f field.DividendPeriodXIDField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasDividendPeriodSequence returns true if DividendPeriodSequence is present, Tag 42275.
func (m NoDividendPeriods) HasDividendPeriodSequence() bool {
	return m.Has(tag.DividendPeriodSequence)
}

// HasDividendPeriodStartDateUnadjusted returns true if DividendPeriodStartDateUnadjusted is present, Tag 42276.
func (m NoDividendPeriods) HasDividendPeriodStartDateUnadjusted() bool {
	return m.Has(tag.DividendPeriodStartDateUnadjusted)
}

// HasDividendPeriodEndDateUnadjusted returns true if DividendPeriodEndDateUnadjusted is present, Tag 42277.
func (m NoDividendPeriods) HasDividendPeriodEndDateUnadjusted() bool {
	return m.Has(tag.DividendPeriodEndDateUnadjusted)
}

// HasDividendPeriodUnderlierRefID returns true if DividendPeriodUnderlierRefID is present, Tag 42278.
func (m NoDividendPeriods) HasDividendPeriodUnderlierRefID() bool {
	return m.Has(tag.DividendPeriodUnderlierRefID)
}

// HasDividendPeriodStrikePrice returns true if DividendPeriodStrikePrice is present, Tag 42279.
func (m NoDividendPeriods) HasDividendPeriodStrikePrice() bool {
	return m.Has(tag.DividendPeriodStrikePrice)
}

// HasDividendPeriodBusinessDayConvention returns true if DividendPeriodBusinessDayConvention is present, Tag 42280.
func (m NoDividendPeriods) HasDividendPeriodBusinessDayConvention() bool {
	return m.Has(tag.DividendPeriodBusinessDayConvention)
}

// HasNoDividendPeriodBusinessCenters returns true if NoDividendPeriodBusinessCenters is present, Tag 42294.
func (m NoDividendPeriods) HasNoDividendPeriodBusinessCenters() bool {
	return m.Has(tag.NoDividendPeriodBusinessCenters)
}

// HasDividendPeriodValuationDateUnadjusted returns true if DividendPeriodValuationDateUnadjusted is present, Tag 42281.
func (m NoDividendPeriods) HasDividendPeriodValuationDateUnadjusted() bool {
	return m.Has(tag.DividendPeriodValuationDateUnadjusted)
}

// HasDividendPeriodValuationDateRelativeTo returns true if DividendPeriodValuationDateRelativeTo is present, Tag 42282.
func (m NoDividendPeriods) HasDividendPeriodValuationDateRelativeTo() bool {
	return m.Has(tag.DividendPeriodValuationDateRelativeTo)
}

// HasDividendPeriodValuationDateOffsetPeriod returns true if DividendPeriodValuationDateOffsetPeriod is present, Tag 42283.
func (m NoDividendPeriods) HasDividendPeriodValuationDateOffsetPeriod() bool {
	return m.Has(tag.DividendPeriodValuationDateOffsetPeriod)
}

// HasDividendPeriodValuationDateOffsetUnit returns true if DividendPeriodValuationDateOffsetUnit is present, Tag 42284.
func (m NoDividendPeriods) HasDividendPeriodValuationDateOffsetUnit() bool {
	return m.Has(tag.DividendPeriodValuationDateOffsetUnit)
}

// HasDividendPeriodValuationDateOffsetDayType returns true if DividendPeriodValuationDateOffsetDayType is present, Tag 42285.
func (m NoDividendPeriods) HasDividendPeriodValuationDateOffsetDayType() bool {
	return m.Has(tag.DividendPeriodValuationDateOffsetDayType)
}

// HasDividendPeriodValuationDateAdjusted returns true if DividendPeriodValuationDateAdjusted is present, Tag 42286.
func (m NoDividendPeriods) HasDividendPeriodValuationDateAdjusted() bool {
	return m.Has(tag.DividendPeriodValuationDateAdjusted)
}

// HasDividendPeriodPaymentDateUnadjusted returns true if DividendPeriodPaymentDateUnadjusted is present, Tag 42287.
func (m NoDividendPeriods) HasDividendPeriodPaymentDateUnadjusted() bool {
	return m.Has(tag.DividendPeriodPaymentDateUnadjusted)
}

// HasDividendPeriodPaymentDateRelativeTo returns true if DividendPeriodPaymentDateRelativeTo is present, Tag 42288.
func (m NoDividendPeriods) HasDividendPeriodPaymentDateRelativeTo() bool {
	return m.Has(tag.DividendPeriodPaymentDateRelativeTo)
}

// HasDividendPeriodPaymentDateOffsetPeriod returns true if DividendPeriodPaymentDateOffsetPeriod is present, Tag 42289.
func (m NoDividendPeriods) HasDividendPeriodPaymentDateOffsetPeriod() bool {
	return m.Has(tag.DividendPeriodPaymentDateOffsetPeriod)
}

// HasDividendPeriodPaymentDateOffsetUnit returns true if DividendPeriodPaymentDateOffsetUnit is present, Tag 42290.
func (m NoDividendPeriods) HasDividendPeriodPaymentDateOffsetUnit() bool {
	return m.Has(tag.DividendPeriodPaymentDateOffsetUnit)
}

// HasDividendPeriodPaymentDateOffsetDayType returns true if DividendPeriodPaymentDateOffsetDayType is present, Tag 42291.
func (m NoDividendPeriods) HasDividendPeriodPaymentDateOffsetDayType() bool {
	return m.Has(tag.DividendPeriodPaymentDateOffsetDayType)
}

// HasDividendPeriodPaymentDateAdjusted returns true if DividendPeriodPaymentDateAdjusted is present, Tag 42292.
func (m NoDividendPeriods) HasDividendPeriodPaymentDateAdjusted() bool {
	return m.Has(tag.DividendPeriodPaymentDateAdjusted)
}

// HasDividendPeriodXID returns true if DividendPeriodXID is present, Tag 42293.
func (m NoDividendPeriods) HasDividendPeriodXID() bool {
	return m.Has(tag.DividendPeriodXID)
}

// NoDividendPeriodBusinessCenters is a repeating group element, Tag 42294.
type NoDividendPeriodBusinessCenters struct {
	*quickfix.Group
}

// SetDividendPeriodBusinessCenter sets DividendPeriodBusinessCenter, Tag 42295.
func (m NoDividendPeriodBusinessCenters) SetDividendPeriodBusinessCenter(v string) {
	m.Set(field.NewDividendPeriodBusinessCenter(v))
}

// GetDividendPeriodBusinessCenter gets DividendPeriodBusinessCenter, Tag 42295.
func (m NoDividendPeriodBusinessCenters) GetDividendPeriodBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.DividendPeriodBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasDividendPeriodBusinessCenter returns true if DividendPeriodBusinessCenter is present, Tag 42295.
func (m NoDividendPeriodBusinessCenters) HasDividendPeriodBusinessCenter() bool {
	return m.Has(tag.DividendPeriodBusinessCenter)
}

// NoDividendPeriodBusinessCentersRepeatingGroup is a repeating group, Tag 42294.
type NoDividendPeriodBusinessCentersRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoDividendPeriodBusinessCentersRepeatingGroup returns an initialized, NoDividendPeriodBusinessCentersRepeatingGroup.
func NewNoDividendPeriodBusinessCentersRepeatingGroup() NoDividendPeriodBusinessCentersRepeatingGroup {
	return NoDividendPeriodBusinessCentersRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoDividendPeriodBusinessCenters,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.DividendPeriodBusinessCenter),
			},
		),
	}
}

// Add create and append a new NoDividendPeriodBusinessCenters to this group.
func (m NoDividendPeriodBusinessCentersRepeatingGroup) Add() NoDividendPeriodBusinessCenters {
	g := m.RepeatingGroup.Add()
	return NoDividendPeriodBusinessCenters{g}
}

// Get returns the ith NoDividendPeriodBusinessCenters in the NoDividendPeriodBusinessCentersRepeatinGroup.
func (m NoDividendPeriodBusinessCentersRepeatingGroup) Get(i int) NoDividendPeriodBusinessCenters {
	return NoDividendPeriodBusinessCenters{m.RepeatingGroup.Get(i)}
}

// NoDividendPeriodsRepeatingGroup is a repeating group, Tag 42274.
type NoDividendPeriodsRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoDividendPeriodsRepeatingGroup returns an initialized, NoDividendPeriodsRepeatingGroup.
func NewNoDividendPeriodsRepeatingGroup() NoDividendPeriodsRepeatingGroup {
	return NoDividendPeriodsRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoDividendPeriods,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.DividendPeriodSequence),
				quickfix.GroupElement(tag.DividendPeriodStartDateUnadjusted),
				quickfix.GroupElement(tag.DividendPeriodEndDateUnadjusted),
				quickfix.GroupElement(tag.DividendPeriodUnderlierRefID),
				quickfix.GroupElement(tag.DividendPeriodStrikePrice),
				quickfix.GroupElement(tag.DividendPeriodBusinessDayConvention),
				NewNoDividendPeriodBusinessCentersRepeatingGroup(),
				quickfix.GroupElement(tag.DividendPeriodValuationDateUnadjusted),
				quickfix.GroupElement(tag.DividendPeriodValuationDateRelativeTo),
				quickfix.GroupElement(tag.DividendPeriodValuationDateOffsetPeriod),
				quickfix.GroupElement(tag.DividendPeriodValuationDateOffsetUnit),
				quickfix.GroupElement(tag.DividendPeriodValuationDateOffsetDayType),
				quickfix.GroupElement(tag.DividendPeriodValuationDateAdjusted),
				quickfix.GroupElement(tag.DividendPeriodPaymentDateUnadjusted),
				quickfix.GroupElement(tag.DividendPeriodPaymentDateRelativeTo),
				quickfix.GroupElement(tag.DividendPeriodPaymentDateOffsetPeriod),
				quickfix.GroupElement(tag.DividendPeriodPaymentDateOffsetUnit),
				quickfix.GroupElement(tag.DividendPeriodPaymentDateOffsetDayType),
				quickfix.GroupElement(tag.DividendPeriodPaymentDateAdjusted),
				quickfix.GroupElement(tag.DividendPeriodXID),
			},
		),
	}
}

// Add create and append a new NoDividendPeriods to this group.
func (m NoDividendPeriodsRepeatingGroup) Add() NoDividendPeriods {
	g := m.RepeatingGroup.Add()
	return NoDividendPeriods{g}
}

// Get returns the ith NoDividendPeriods in the NoDividendPeriodsRepeatinGroup.
func (m NoDividendPeriodsRepeatingGroup) Get(i int) NoDividendPeriods {
	return NoDividendPeriods{m.RepeatingGroup.Get(i)}
}

// NoDividendFXTriggerDateBusinessCenters is a repeating group element, Tag 42272.
type NoDividendFXTriggerDateBusinessCenters struct {
	*quickfix.Group
}

// SetDividendFXTriggerDateBusinessCenter sets DividendFXTriggerDateBusinessCenter, Tag 42273.
func (m NoDividendFXTriggerDateBusinessCenters) SetDividendFXTriggerDateBusinessCenter(v string) {
	m.Set(field.NewDividendFXTriggerDateBusinessCenter(v))
}

// GetDividendFXTriggerDateBusinessCenter gets DividendFXTriggerDateBusinessCenter, Tag 42273.
func (m NoDividendFXTriggerDateBusinessCenters) GetDividendFXTriggerDateBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.DividendFXTriggerDateBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasDividendFXTriggerDateBusinessCenter returns true if DividendFXTriggerDateBusinessCenter is present, Tag 42273.
func (m NoDividendFXTriggerDateBusinessCenters) HasDividendFXTriggerDateBusinessCenter() bool {
	return m.Has(tag.DividendFXTriggerDateBusinessCenter)
}

// NoDividendFXTriggerDateBusinessCentersRepeatingGroup is a repeating group, Tag 42272.
type NoDividendFXTriggerDateBusinessCentersRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoDividendFXTriggerDateBusinessCentersRepeatingGroup returns an initialized, NoDividendFXTriggerDateBusinessCentersRepeatingGroup.
func NewNoDividendFXTriggerDateBusinessCentersRepeatingGroup() NoDividendFXTriggerDateBusinessCentersRepeatingGroup {
	return NoDividendFXTriggerDateBusinessCentersRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoDividendFXTriggerDateBusinessCenters,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.DividendFXTriggerDateBusinessCenter),
			},
		),
	}
}

// Add create and append a new NoDividendFXTriggerDateBusinessCenters to this group.
func (m NoDividendFXTriggerDateBusinessCentersRepeatingGroup) Add() NoDividendFXTriggerDateBusinessCenters {
	g := m.RepeatingGroup.Add()
	return NoDividendFXTriggerDateBusinessCenters{g}
}

// Get returns the ith NoDividendFXTriggerDateBusinessCenters in the NoDividendFXTriggerDateBusinessCentersRepeatinGroup.
func (m NoDividendFXTriggerDateBusinessCentersRepeatingGroup) Get(i int) NoDividendFXTriggerDateBusinessCenters {
	return NoDividendFXTriggerDateBusinessCenters{m.RepeatingGroup.Get(i)}
}

// NoDividendAccrualPaymentDateBusinessCenters is a repeating group element, Tag 42236.
type NoDividendAccrualPaymentDateBusinessCenters struct {
	*quickfix.Group
}

// SetDividendAccrualPaymentDateBusinessCenter sets DividendAccrualPaymentDateBusinessCenter, Tag 42237.
func (m NoDividendAccrualPaymentDateBusinessCenters) SetDividendAccrualPaymentDateBusinessCenter(v string) {
	m.Set(field.NewDividendAccrualPaymentDateBusinessCenter(v))
}

// GetDividendAccrualPaymentDateBusinessCenter gets DividendAccrualPaymentDateBusinessCenter, Tag 42237.
func (m NoDividendAccrualPaymentDateBusinessCenters) GetDividendAccrualPaymentDateBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.DividendAccrualPaymentDateBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasDividendAccrualPaymentDateBusinessCenter returns true if DividendAccrualPaymentDateBusinessCenter is present, Tag 42237.
func (m NoDividendAccrualPaymentDateBusinessCenters) HasDividendAccrualPaymentDateBusinessCenter() bool {
	return m.Has(tag.DividendAccrualPaymentDateBusinessCenter)
}

// NoDividendAccrualPaymentDateBusinessCentersRepeatingGroup is a repeating group, Tag 42236.
type NoDividendAccrualPaymentDateBusinessCentersRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoDividendAccrualPaymentDateBusinessCentersRepeatingGroup returns an initialized, NoDividendAccrualPaymentDateBusinessCentersRepeatingGroup.
func NewNoDividendAccrualPaymentDateBusinessCentersRepeatingGroup() NoDividendAccrualPaymentDateBusinessCentersRepeatingGroup {
	return NoDividendAccrualPaymentDateBusinessCentersRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoDividendAccrualPaymentDateBusinessCenters,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.DividendAccrualPaymentDateBusinessCenter),
			},
		),
	}
}

// Add create and append a new NoDividendAccrualPaymentDateBusinessCenters to this group.
func (m NoDividendAccrualPaymentDateBusinessCentersRepeatingGroup) Add() NoDividendAccrualPaymentDateBusinessCenters {
	g := m.RepeatingGroup.Add()
	return NoDividendAccrualPaymentDateBusinessCenters{g}
}

// Get returns the ith NoDividendAccrualPaymentDateBusinessCenters in the NoDividendAccrualPaymentDateBusinessCentersRepeatinGroup.
func (m NoDividendAccrualPaymentDateBusinessCentersRepeatingGroup) Get(i int) NoDividendAccrualPaymentDateBusinessCenters {
	return NoDividendAccrualPaymentDateBusinessCenters{m.RepeatingGroup.Get(i)}
}

// NoReturnRates is a repeating group element, Tag 42735.
type NoReturnRates struct {
	*quickfix.Group
}

// SetReturnRatePriceSequence sets ReturnRatePriceSequence, Tag 42736.
func (m NoReturnRates) SetReturnRatePriceSequence(v enum.ReturnRatePriceSequence) {
	m.Set(field.NewReturnRatePriceSequence(v))
}

// SetReturnRateCommissionBasis sets ReturnRateCommissionBasis, Tag 42737.
func (m NoReturnRates) SetReturnRateCommissionBasis(v string) {
	m.Set(field.NewReturnRateCommissionBasis(v))
}

// SetReturnRateCommissionAmount sets ReturnRateCommissionAmount, Tag 42738.
func (m NoReturnRates) SetReturnRateCommissionAmount(value decimal.Decimal, scale int32) {
	m.Set(field.NewReturnRateCommissionAmount(value, scale))
}

// SetReturnRateCommissionCurrency sets ReturnRateCommissionCurrency, Tag 42739.
func (m NoReturnRates) SetReturnRateCommissionCurrency(v string) {
	m.Set(field.NewReturnRateCommissionCurrency(v))
}

// SetReturnRateTotalCommissionPerTrade sets ReturnRateTotalCommissionPerTrade, Tag 42740.
func (m NoReturnRates) SetReturnRateTotalCommissionPerTrade(value decimal.Decimal, scale int32) {
	m.Set(field.NewReturnRateTotalCommissionPerTrade(value, scale))
}

// SetReturnRateDeterminationMethod sets ReturnRateDeterminationMethod, Tag 42741.
func (m NoReturnRates) SetReturnRateDeterminationMethod(v string) {
	m.Set(field.NewReturnRateDeterminationMethod(v))
}

// SetNoReturnRatePrices sets NoReturnRatePrices, Tag 42765.
func (m NoReturnRates) SetNoReturnRatePrices(f NoReturnRatePricesRepeatingGroup) {
	m.SetGroup(f)
}

// SetNoReturnRateFXConversions sets NoReturnRateFXConversions, Tag 42731.
func (m NoReturnRates) SetNoReturnRateFXConversions(f NoReturnRateFXConversionsRepeatingGroup) {
	m.SetGroup(f)
}

// SetReturnRateAmountRelativeTo sets ReturnRateAmountRelativeTo, Tag 42742.
func (m NoReturnRates) SetReturnRateAmountRelativeTo(v int) {
	m.Set(field.NewReturnRateAmountRelativeTo(v))
}

// SetReturnRateQuoteMeasureType sets ReturnRateQuoteMeasureType, Tag 42743.
func (m NoReturnRates) SetReturnRateQuoteMeasureType(v string) {
	m.Set(field.NewReturnRateQuoteMeasureType(v))
}

// SetReturnRateQuoteUnits sets ReturnRateQuoteUnits, Tag 42744.
func (m NoReturnRates) SetReturnRateQuoteUnits(v string) {
	m.Set(field.NewReturnRateQuoteUnits(v))
}

// SetReturnRateQuoteMethod sets ReturnRateQuoteMethod, Tag 42745.
func (m NoReturnRates) SetReturnRateQuoteMethod(v int) {
	m.Set(field.NewReturnRateQuoteMethod(v))
}

// SetReturnRateQuoteCurrency sets ReturnRateQuoteCurrency, Tag 42746.
func (m NoReturnRates) SetReturnRateQuoteCurrency(v string) {
	m.Set(field.NewReturnRateQuoteCurrency(v))
}

// SetReturnRateQuoteCurrencyType sets ReturnRateQuoteCurrencyType, Tag 42747.
func (m NoReturnRates) SetReturnRateQuoteCurrencyType(v string) {
	m.Set(field.NewReturnRateQuoteCurrencyType(v))
}

// SetReturnRateQuoteTimeType sets ReturnRateQuoteTimeType, Tag 42748.
func (m NoReturnRates) SetReturnRateQuoteTimeType(v enum.ReturnRateQuoteTimeType) {
	m.Set(field.NewReturnRateQuoteTimeType(v))
}

// SetReturnRateQuoteTime sets ReturnRateQuoteTime, Tag 42749.
func (m NoReturnRates) SetReturnRateQuoteTime(v string) {
	m.Set(field.NewReturnRateQuoteTime(v))
}

// SetReturnRateQuoteDate sets ReturnRateQuoteDate, Tag 42750.
func (m NoReturnRates) SetReturnRateQuoteDate(v string) {
	m.Set(field.NewReturnRateQuoteDate(v))
}

// SetReturnRateQuoteExpirationTime sets ReturnRateQuoteExpirationTime, Tag 42751.
func (m NoReturnRates) SetReturnRateQuoteExpirationTime(v string) {
	m.Set(field.NewReturnRateQuoteExpirationTime(v))
}

// SetReturnRateQuoteBusinessCenter sets ReturnRateQuoteBusinessCenter, Tag 42752.
func (m NoReturnRates) SetReturnRateQuoteBusinessCenter(v string) {
	m.Set(field.NewReturnRateQuoteBusinessCenter(v))
}

// SetReturnRateQuoteExchange sets ReturnRateQuoteExchange, Tag 42753.
func (m NoReturnRates) SetReturnRateQuoteExchange(v string) {
	m.Set(field.NewReturnRateQuoteExchange(v))
}

// SetNoReturnRateInformationSources sets NoReturnRateInformationSources, Tag 42761.
func (m NoReturnRates) SetNoReturnRateInformationSources(f NoReturnRateInformationSourcesRepeatingGroup) {
	m.SetGroup(f)
}

// SetReturnRateQuotePricingModel sets ReturnRateQuotePricingModel, Tag 42754.
func (m NoReturnRates) SetReturnRateQuotePricingModel(v string) {
	m.Set(field.NewReturnRateQuotePricingModel(v))
}

// SetReturnRateCashFlowType sets ReturnRateCashFlowType, Tag 42755.
func (m NoReturnRates) SetReturnRateCashFlowType(v string) {
	m.Set(field.NewReturnRateCashFlowType(v))
}

// SetNoReturnRateDates sets NoReturnRateDates, Tag 42709.
func (m NoReturnRates) SetNoReturnRateDates(f NoReturnRateDatesRepeatingGroup) {
	m.SetGroup(f)
}

// SetReturnRateValuationTimeType sets ReturnRateValuationTimeType, Tag 42756.
func (m NoReturnRates) SetReturnRateValuationTimeType(v int) {
	m.Set(field.NewReturnRateValuationTimeType(v))
}

// SetReturnRateValuationTime sets ReturnRateValuationTime, Tag 42757.
func (m NoReturnRates) SetReturnRateValuationTime(v string) {
	m.Set(field.NewReturnRateValuationTime(v))
}

// SetReturnRateValuationTimeBusinessCenter sets ReturnRateValuationTimeBusinessCenter, Tag 42758.
func (m NoReturnRates) SetReturnRateValuationTimeBusinessCenter(v string) {
	m.Set(field.NewReturnRateValuationTimeBusinessCenter(v))
}

// SetReturnRateValuationPriceOption sets ReturnRateValuationPriceOption, Tag 42759.
func (m NoReturnRates) SetReturnRateValuationPriceOption(v enum.ReturnRateValuationPriceOption) {
	m.Set(field.NewReturnRateValuationPriceOption(v))
}

// SetReturnRateFinalPriceFallback sets ReturnRateFinalPriceFallback, Tag 42760.
func (m NoReturnRates) SetReturnRateFinalPriceFallback(v int) {
	m.Set(field.NewReturnRateFinalPriceFallback(v))
}

// GetReturnRatePriceSequence gets ReturnRatePriceSequence, Tag 42736.
func (m NoReturnRates) GetReturnRatePriceSequence() (v enum.ReturnRatePriceSequence, err quickfix.MessageRejectError) {
	var f field.ReturnRatePriceSequenceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetReturnRateCommissionBasis gets ReturnRateCommissionBasis, Tag 42737.
func (m NoReturnRates) GetReturnRateCommissionBasis() (v string, err quickfix.MessageRejectError) {
	var f field.ReturnRateCommissionBasisField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetReturnRateCommissionAmount gets ReturnRateCommissionAmount, Tag 42738.
func (m NoReturnRates) GetReturnRateCommissionAmount() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.ReturnRateCommissionAmountField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetReturnRateCommissionCurrency gets ReturnRateCommissionCurrency, Tag 42739.
func (m NoReturnRates) GetReturnRateCommissionCurrency() (v string, err quickfix.MessageRejectError) {
	var f field.ReturnRateCommissionCurrencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetReturnRateTotalCommissionPerTrade gets ReturnRateTotalCommissionPerTrade, Tag 42740.
func (m NoReturnRates) GetReturnRateTotalCommissionPerTrade() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.ReturnRateTotalCommissionPerTradeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetReturnRateDeterminationMethod gets ReturnRateDeterminationMethod, Tag 42741.
func (m NoReturnRates) GetReturnRateDeterminationMethod() (v string, err quickfix.MessageRejectError) {
	var f field.ReturnRateDeterminationMethodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoReturnRatePrices gets NoReturnRatePrices, Tag 42765.
func (m NoReturnRates) GetNoReturnRatePrices() (NoReturnRatePricesRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoReturnRatePricesRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetNoReturnRateFXConversions gets NoReturnRateFXConversions, Tag 42731.
func (m NoReturnRates) GetNoReturnRateFXConversions() (NoReturnRateFXConversionsRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoReturnRateFXConversionsRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetReturnRateAmountRelativeTo gets ReturnRateAmountRelativeTo, Tag 42742.
func (m NoReturnRates) GetReturnRateAmountRelativeTo() (v int, err quickfix.MessageRejectError) {
	var f field.ReturnRateAmountRelativeToField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetReturnRateQuoteMeasureType gets ReturnRateQuoteMeasureType, Tag 42743.
func (m NoReturnRates) GetReturnRateQuoteMeasureType() (v string, err quickfix.MessageRejectError) {
	var f field.ReturnRateQuoteMeasureTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetReturnRateQuoteUnits gets ReturnRateQuoteUnits, Tag 42744.
func (m NoReturnRates) GetReturnRateQuoteUnits() (v string, err quickfix.MessageRejectError) {
	var f field.ReturnRateQuoteUnitsField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetReturnRateQuoteMethod gets ReturnRateQuoteMethod, Tag 42745.
func (m NoReturnRates) GetReturnRateQuoteMethod() (v int, err quickfix.MessageRejectError) {
	var f field.ReturnRateQuoteMethodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetReturnRateQuoteCurrency gets ReturnRateQuoteCurrency, Tag 42746.
func (m NoReturnRates) GetReturnRateQuoteCurrency() (v string, err quickfix.MessageRejectError) {
	var f field.ReturnRateQuoteCurrencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetReturnRateQuoteCurrencyType gets ReturnRateQuoteCurrencyType, Tag 42747.
func (m NoReturnRates) GetReturnRateQuoteCurrencyType() (v string, err quickfix.MessageRejectError) {
	var f field.ReturnRateQuoteCurrencyTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetReturnRateQuoteTimeType gets ReturnRateQuoteTimeType, Tag 42748.
func (m NoReturnRates) GetReturnRateQuoteTimeType() (v enum.ReturnRateQuoteTimeType, err quickfix.MessageRejectError) {
	var f field.ReturnRateQuoteTimeTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetReturnRateQuoteTime gets ReturnRateQuoteTime, Tag 42749.
func (m NoReturnRates) GetReturnRateQuoteTime() (v string, err quickfix.MessageRejectError) {
	var f field.ReturnRateQuoteTimeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetReturnRateQuoteDate gets ReturnRateQuoteDate, Tag 42750.
func (m NoReturnRates) GetReturnRateQuoteDate() (v string, err quickfix.MessageRejectError) {
	var f field.ReturnRateQuoteDateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetReturnRateQuoteExpirationTime gets ReturnRateQuoteExpirationTime, Tag 42751.
func (m NoReturnRates) GetReturnRateQuoteExpirationTime() (v string, err quickfix.MessageRejectError) {
	var f field.ReturnRateQuoteExpirationTimeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetReturnRateQuoteBusinessCenter gets ReturnRateQuoteBusinessCenter, Tag 42752.
func (m NoReturnRates) GetReturnRateQuoteBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.ReturnRateQuoteBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetReturnRateQuoteExchange gets ReturnRateQuoteExchange, Tag 42753.
func (m NoReturnRates) GetReturnRateQuoteExchange() (v string, err quickfix.MessageRejectError) {
	var f field.ReturnRateQuoteExchangeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoReturnRateInformationSources gets NoReturnRateInformationSources, Tag 42761.
func (m NoReturnRates) GetNoReturnRateInformationSources() (NoReturnRateInformationSourcesRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoReturnRateInformationSourcesRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetReturnRateQuotePricingModel gets ReturnRateQuotePricingModel, Tag 42754.
func (m NoReturnRates) GetReturnRateQuotePricingModel() (v string, err quickfix.MessageRejectError) {
	var f field.ReturnRateQuotePricingModelField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetReturnRateCashFlowType gets ReturnRateCashFlowType, Tag 42755.
func (m NoReturnRates) GetReturnRateCashFlowType() (v string, err quickfix.MessageRejectError) {
	var f field.ReturnRateCashFlowTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoReturnRateDates gets NoReturnRateDates, Tag 42709.
func (m NoReturnRates) GetNoReturnRateDates() (NoReturnRateDatesRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoReturnRateDatesRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetReturnRateValuationTimeType gets ReturnRateValuationTimeType, Tag 42756.
func (m NoReturnRates) GetReturnRateValuationTimeType() (v int, err quickfix.MessageRejectError) {
	var f field.ReturnRateValuationTimeTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetReturnRateValuationTime gets ReturnRateValuationTime, Tag 42757.
func (m NoReturnRates) GetReturnRateValuationTime() (v string, err quickfix.MessageRejectError) {
	var f field.ReturnRateValuationTimeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetReturnRateValuationTimeBusinessCenter gets ReturnRateValuationTimeBusinessCenter, Tag 42758.
func (m NoReturnRates) GetReturnRateValuationTimeBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.ReturnRateValuationTimeBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetReturnRateValuationPriceOption gets ReturnRateValuationPriceOption, Tag 42759.
func (m NoReturnRates) GetReturnRateValuationPriceOption() (v enum.ReturnRateValuationPriceOption, err quickfix.MessageRejectError) {
	var f field.ReturnRateValuationPriceOptionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetReturnRateFinalPriceFallback gets ReturnRateFinalPriceFallback, Tag 42760.
func (m NoReturnRates) GetReturnRateFinalPriceFallback() (v int, err quickfix.MessageRejectError) {
	var f field.ReturnRateFinalPriceFallbackField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasReturnRatePriceSequence returns true if ReturnRatePriceSequence is present, Tag 42736.
func (m NoReturnRates) HasReturnRatePriceSequence() bool {
	return m.Has(tag.ReturnRatePriceSequence)
}

// HasReturnRateCommissionBasis returns true if ReturnRateCommissionBasis is present, Tag 42737.
func (m NoReturnRates) HasReturnRateCommissionBasis() bool {
	return m.Has(tag.ReturnRateCommissionBasis)
}

// HasReturnRateCommissionAmount returns true if ReturnRateCommissionAmount is present, Tag 42738.
func (m NoReturnRates) HasReturnRateCommissionAmount() bool {
	return m.Has(tag.ReturnRateCommissionAmount)
}

// HasReturnRateCommissionCurrency returns true if ReturnRateCommissionCurrency is present, Tag 42739.
func (m NoReturnRates) HasReturnRateCommissionCurrency() bool {
	return m.Has(tag.ReturnRateCommissionCurrency)
}

// HasReturnRateTotalCommissionPerTrade returns true if ReturnRateTotalCommissionPerTrade is present, Tag 42740.
func (m NoReturnRates) HasReturnRateTotalCommissionPerTrade() bool {
	return m.Has(tag.ReturnRateTotalCommissionPerTrade)
}

// HasReturnRateDeterminationMethod returns true if ReturnRateDeterminationMethod is present, Tag 42741.
func (m NoReturnRates) HasReturnRateDeterminationMethod() bool {
	return m.Has(tag.ReturnRateDeterminationMethod)
}

// HasNoReturnRatePrices returns true if NoReturnRatePrices is present, Tag 42765.
func (m NoReturnRates) HasNoReturnRatePrices() bool {
	return m.Has(tag.NoReturnRatePrices)
}

// HasNoReturnRateFXConversions returns true if NoReturnRateFXConversions is present, Tag 42731.
func (m NoReturnRates) HasNoReturnRateFXConversions() bool {
	return m.Has(tag.NoReturnRateFXConversions)
}

// HasReturnRateAmountRelativeTo returns true if ReturnRateAmountRelativeTo is present, Tag 42742.
func (m NoReturnRates) HasReturnRateAmountRelativeTo() bool {
	return m.Has(tag.ReturnRateAmountRelativeTo)
}

// HasReturnRateQuoteMeasureType returns true if ReturnRateQuoteMeasureType is present, Tag 42743.
func (m NoReturnRates) HasReturnRateQuoteMeasureType() bool {
	return m.Has(tag.ReturnRateQuoteMeasureType)
}

// HasReturnRateQuoteUnits returns true if ReturnRateQuoteUnits is present, Tag 42744.
func (m NoReturnRates) HasReturnRateQuoteUnits() bool {
	return m.Has(tag.ReturnRateQuoteUnits)
}

// HasReturnRateQuoteMethod returns true if ReturnRateQuoteMethod is present, Tag 42745.
func (m NoReturnRates) HasReturnRateQuoteMethod() bool {
	return m.Has(tag.ReturnRateQuoteMethod)
}

// HasReturnRateQuoteCurrency returns true if ReturnRateQuoteCurrency is present, Tag 42746.
func (m NoReturnRates) HasReturnRateQuoteCurrency() bool {
	return m.Has(tag.ReturnRateQuoteCurrency)
}

// HasReturnRateQuoteCurrencyType returns true if ReturnRateQuoteCurrencyType is present, Tag 42747.
func (m NoReturnRates) HasReturnRateQuoteCurrencyType() bool {
	return m.Has(tag.ReturnRateQuoteCurrencyType)
}

// HasReturnRateQuoteTimeType returns true if ReturnRateQuoteTimeType is present, Tag 42748.
func (m NoReturnRates) HasReturnRateQuoteTimeType() bool {
	return m.Has(tag.ReturnRateQuoteTimeType)
}

// HasReturnRateQuoteTime returns true if ReturnRateQuoteTime is present, Tag 42749.
func (m NoReturnRates) HasReturnRateQuoteTime() bool {
	return m.Has(tag.ReturnRateQuoteTime)
}

// HasReturnRateQuoteDate returns true if ReturnRateQuoteDate is present, Tag 42750.
func (m NoReturnRates) HasReturnRateQuoteDate() bool {
	return m.Has(tag.ReturnRateQuoteDate)
}

// HasReturnRateQuoteExpirationTime returns true if ReturnRateQuoteExpirationTime is present, Tag 42751.
func (m NoReturnRates) HasReturnRateQuoteExpirationTime() bool {
	return m.Has(tag.ReturnRateQuoteExpirationTime)
}

// HasReturnRateQuoteBusinessCenter returns true if ReturnRateQuoteBusinessCenter is present, Tag 42752.
func (m NoReturnRates) HasReturnRateQuoteBusinessCenter() bool {
	return m.Has(tag.ReturnRateQuoteBusinessCenter)
}

// HasReturnRateQuoteExchange returns true if ReturnRateQuoteExchange is present, Tag 42753.
func (m NoReturnRates) HasReturnRateQuoteExchange() bool {
	return m.Has(tag.ReturnRateQuoteExchange)
}

// HasNoReturnRateInformationSources returns true if NoReturnRateInformationSources is present, Tag 42761.
func (m NoReturnRates) HasNoReturnRateInformationSources() bool {
	return m.Has(tag.NoReturnRateInformationSources)
}

// HasReturnRateQuotePricingModel returns true if ReturnRateQuotePricingModel is present, Tag 42754.
func (m NoReturnRates) HasReturnRateQuotePricingModel() bool {
	return m.Has(tag.ReturnRateQuotePricingModel)
}

// HasReturnRateCashFlowType returns true if ReturnRateCashFlowType is present, Tag 42755.
func (m NoReturnRates) HasReturnRateCashFlowType() bool {
	return m.Has(tag.ReturnRateCashFlowType)
}

// HasNoReturnRateDates returns true if NoReturnRateDates is present, Tag 42709.
func (m NoReturnRates) HasNoReturnRateDates() bool {
	return m.Has(tag.NoReturnRateDates)
}

// HasReturnRateValuationTimeType returns true if ReturnRateValuationTimeType is present, Tag 42756.
func (m NoReturnRates) HasReturnRateValuationTimeType() bool {
	return m.Has(tag.ReturnRateValuationTimeType)
}

// HasReturnRateValuationTime returns true if ReturnRateValuationTime is present, Tag 42757.
func (m NoReturnRates) HasReturnRateValuationTime() bool {
	return m.Has(tag.ReturnRateValuationTime)
}

// HasReturnRateValuationTimeBusinessCenter returns true if ReturnRateValuationTimeBusinessCenter is present, Tag 42758.
func (m NoReturnRates) HasReturnRateValuationTimeBusinessCenter() bool {
	return m.Has(tag.ReturnRateValuationTimeBusinessCenter)
}

// HasReturnRateValuationPriceOption returns true if ReturnRateValuationPriceOption is present, Tag 42759.
func (m NoReturnRates) HasReturnRateValuationPriceOption() bool {
	return m.Has(tag.ReturnRateValuationPriceOption)
}

// HasReturnRateFinalPriceFallback returns true if ReturnRateFinalPriceFallback is present, Tag 42760.
func (m NoReturnRates) HasReturnRateFinalPriceFallback() bool {
	return m.Has(tag.ReturnRateFinalPriceFallback)
}

// NoReturnRatePrices is a repeating group element, Tag 42765.
type NoReturnRatePrices struct {
	*quickfix.Group
}

// SetReturnRatePriceBasis sets ReturnRatePriceBasis, Tag 42766.
func (m NoReturnRatePrices) SetReturnRatePriceBasis(v enum.ReturnRatePriceBasis) {
	m.Set(field.NewReturnRatePriceBasis(v))
}

// SetReturnRatePrice sets ReturnRatePrice, Tag 42767.
func (m NoReturnRatePrices) SetReturnRatePrice(value decimal.Decimal, scale int32) {
	m.Set(field.NewReturnRatePrice(value, scale))
}

// SetReturnRatePriceCurrency sets ReturnRatePriceCurrency, Tag 42768.
func (m NoReturnRatePrices) SetReturnRatePriceCurrency(v string) {
	m.Set(field.NewReturnRatePriceCurrency(v))
}

// SetReturnRatePriceType sets ReturnRatePriceType, Tag 42769.
func (m NoReturnRatePrices) SetReturnRatePriceType(v enum.ReturnRatePriceType) {
	m.Set(field.NewReturnRatePriceType(v))
}

// GetReturnRatePriceBasis gets ReturnRatePriceBasis, Tag 42766.
func (m NoReturnRatePrices) GetReturnRatePriceBasis() (v enum.ReturnRatePriceBasis, err quickfix.MessageRejectError) {
	var f field.ReturnRatePriceBasisField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetReturnRatePrice gets ReturnRatePrice, Tag 42767.
func (m NoReturnRatePrices) GetReturnRatePrice() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.ReturnRatePriceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetReturnRatePriceCurrency gets ReturnRatePriceCurrency, Tag 42768.
func (m NoReturnRatePrices) GetReturnRatePriceCurrency() (v string, err quickfix.MessageRejectError) {
	var f field.ReturnRatePriceCurrencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetReturnRatePriceType gets ReturnRatePriceType, Tag 42769.
func (m NoReturnRatePrices) GetReturnRatePriceType() (v enum.ReturnRatePriceType, err quickfix.MessageRejectError) {
	var f field.ReturnRatePriceTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasReturnRatePriceBasis returns true if ReturnRatePriceBasis is present, Tag 42766.
func (m NoReturnRatePrices) HasReturnRatePriceBasis() bool {
	return m.Has(tag.ReturnRatePriceBasis)
}

// HasReturnRatePrice returns true if ReturnRatePrice is present, Tag 42767.
func (m NoReturnRatePrices) HasReturnRatePrice() bool {
	return m.Has(tag.ReturnRatePrice)
}

// HasReturnRatePriceCurrency returns true if ReturnRatePriceCurrency is present, Tag 42768.
func (m NoReturnRatePrices) HasReturnRatePriceCurrency() bool {
	return m.Has(tag.ReturnRatePriceCurrency)
}

// HasReturnRatePriceType returns true if ReturnRatePriceType is present, Tag 42769.
func (m NoReturnRatePrices) HasReturnRatePriceType() bool {
	return m.Has(tag.ReturnRatePriceType)
}

// NoReturnRatePricesRepeatingGroup is a repeating group, Tag 42765.
type NoReturnRatePricesRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoReturnRatePricesRepeatingGroup returns an initialized, NoReturnRatePricesRepeatingGroup.
func NewNoReturnRatePricesRepeatingGroup() NoReturnRatePricesRepeatingGroup {
	return NoReturnRatePricesRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoReturnRatePrices,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.ReturnRatePriceBasis),
				quickfix.GroupElement(tag.ReturnRatePrice),
				quickfix.GroupElement(tag.ReturnRatePriceCurrency),
				quickfix.GroupElement(tag.ReturnRatePriceType),
			},
		),
	}
}

// Add create and append a new NoReturnRatePrices to this group.
func (m NoReturnRatePricesRepeatingGroup) Add() NoReturnRatePrices {
	g := m.RepeatingGroup.Add()
	return NoReturnRatePrices{g}
}

// Get returns the ith NoReturnRatePrices in the NoReturnRatePricesRepeatinGroup.
func (m NoReturnRatePricesRepeatingGroup) Get(i int) NoReturnRatePrices {
	return NoReturnRatePrices{m.RepeatingGroup.Get(i)}
}

// NoReturnRateFXConversions is a repeating group element, Tag 42731.
type NoReturnRateFXConversions struct {
	*quickfix.Group
}

// SetReturnRateFXCurrencySymbol sets ReturnRateFXCurrencySymbol, Tag 42732.
func (m NoReturnRateFXConversions) SetReturnRateFXCurrencySymbol(v string) {
	m.Set(field.NewReturnRateFXCurrencySymbol(v))
}

// SetReturnRateFXRate sets ReturnRateFXRate, Tag 42733.
func (m NoReturnRateFXConversions) SetReturnRateFXRate(value decimal.Decimal, scale int32) {
	m.Set(field.NewReturnRateFXRate(value, scale))
}

// SetReturnRateFXRateCalc sets ReturnRateFXRateCalc, Tag 42734.
func (m NoReturnRateFXConversions) SetReturnRateFXRateCalc(v string) {
	m.Set(field.NewReturnRateFXRateCalc(v))
}

// GetReturnRateFXCurrencySymbol gets ReturnRateFXCurrencySymbol, Tag 42732.
func (m NoReturnRateFXConversions) GetReturnRateFXCurrencySymbol() (v string, err quickfix.MessageRejectError) {
	var f field.ReturnRateFXCurrencySymbolField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetReturnRateFXRate gets ReturnRateFXRate, Tag 42733.
func (m NoReturnRateFXConversions) GetReturnRateFXRate() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.ReturnRateFXRateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetReturnRateFXRateCalc gets ReturnRateFXRateCalc, Tag 42734.
func (m NoReturnRateFXConversions) GetReturnRateFXRateCalc() (v string, err quickfix.MessageRejectError) {
	var f field.ReturnRateFXRateCalcField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasReturnRateFXCurrencySymbol returns true if ReturnRateFXCurrencySymbol is present, Tag 42732.
func (m NoReturnRateFXConversions) HasReturnRateFXCurrencySymbol() bool {
	return m.Has(tag.ReturnRateFXCurrencySymbol)
}

// HasReturnRateFXRate returns true if ReturnRateFXRate is present, Tag 42733.
func (m NoReturnRateFXConversions) HasReturnRateFXRate() bool {
	return m.Has(tag.ReturnRateFXRate)
}

// HasReturnRateFXRateCalc returns true if ReturnRateFXRateCalc is present, Tag 42734.
func (m NoReturnRateFXConversions) HasReturnRateFXRateCalc() bool {
	return m.Has(tag.ReturnRateFXRateCalc)
}

// NoReturnRateFXConversionsRepeatingGroup is a repeating group, Tag 42731.
type NoReturnRateFXConversionsRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoReturnRateFXConversionsRepeatingGroup returns an initialized, NoReturnRateFXConversionsRepeatingGroup.
func NewNoReturnRateFXConversionsRepeatingGroup() NoReturnRateFXConversionsRepeatingGroup {
	return NoReturnRateFXConversionsRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoReturnRateFXConversions,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.ReturnRateFXCurrencySymbol),
				quickfix.GroupElement(tag.ReturnRateFXRate),
				quickfix.GroupElement(tag.ReturnRateFXRateCalc),
			},
		),
	}
}

// Add create and append a new NoReturnRateFXConversions to this group.
func (m NoReturnRateFXConversionsRepeatingGroup) Add() NoReturnRateFXConversions {
	g := m.RepeatingGroup.Add()
	return NoReturnRateFXConversions{g}
}

// Get returns the ith NoReturnRateFXConversions in the NoReturnRateFXConversionsRepeatinGroup.
func (m NoReturnRateFXConversionsRepeatingGroup) Get(i int) NoReturnRateFXConversions {
	return NoReturnRateFXConversions{m.RepeatingGroup.Get(i)}
}

// NoReturnRateInformationSources is a repeating group element, Tag 42761.
type NoReturnRateInformationSources struct {
	*quickfix.Group
}

// SetReturnRateInformationSource sets ReturnRateInformationSource, Tag 42762.
func (m NoReturnRateInformationSources) SetReturnRateInformationSource(v int) {
	m.Set(field.NewReturnRateInformationSource(v))
}

// SetReturnRateReferencePage sets ReturnRateReferencePage, Tag 42763.
func (m NoReturnRateInformationSources) SetReturnRateReferencePage(v string) {
	m.Set(field.NewReturnRateReferencePage(v))
}

// SetReturnRateReferencePageHeading sets ReturnRateReferencePageHeading, Tag 42764.
func (m NoReturnRateInformationSources) SetReturnRateReferencePageHeading(v string) {
	m.Set(field.NewReturnRateReferencePageHeading(v))
}

// GetReturnRateInformationSource gets ReturnRateInformationSource, Tag 42762.
func (m NoReturnRateInformationSources) GetReturnRateInformationSource() (v int, err quickfix.MessageRejectError) {
	var f field.ReturnRateInformationSourceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetReturnRateReferencePage gets ReturnRateReferencePage, Tag 42763.
func (m NoReturnRateInformationSources) GetReturnRateReferencePage() (v string, err quickfix.MessageRejectError) {
	var f field.ReturnRateReferencePageField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetReturnRateReferencePageHeading gets ReturnRateReferencePageHeading, Tag 42764.
func (m NoReturnRateInformationSources) GetReturnRateReferencePageHeading() (v string, err quickfix.MessageRejectError) {
	var f field.ReturnRateReferencePageHeadingField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasReturnRateInformationSource returns true if ReturnRateInformationSource is present, Tag 42762.
func (m NoReturnRateInformationSources) HasReturnRateInformationSource() bool {
	return m.Has(tag.ReturnRateInformationSource)
}

// HasReturnRateReferencePage returns true if ReturnRateReferencePage is present, Tag 42763.
func (m NoReturnRateInformationSources) HasReturnRateReferencePage() bool {
	return m.Has(tag.ReturnRateReferencePage)
}

// HasReturnRateReferencePageHeading returns true if ReturnRateReferencePageHeading is present, Tag 42764.
func (m NoReturnRateInformationSources) HasReturnRateReferencePageHeading() bool {
	return m.Has(tag.ReturnRateReferencePageHeading)
}

// NoReturnRateInformationSourcesRepeatingGroup is a repeating group, Tag 42761.
type NoReturnRateInformationSourcesRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoReturnRateInformationSourcesRepeatingGroup returns an initialized, NoReturnRateInformationSourcesRepeatingGroup.
func NewNoReturnRateInformationSourcesRepeatingGroup() NoReturnRateInformationSourcesRepeatingGroup {
	return NoReturnRateInformationSourcesRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoReturnRateInformationSources,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.ReturnRateInformationSource),
				quickfix.GroupElement(tag.ReturnRateReferencePage),
				quickfix.GroupElement(tag.ReturnRateReferencePageHeading),
			},
		),
	}
}

// Add create and append a new NoReturnRateInformationSources to this group.
func (m NoReturnRateInformationSourcesRepeatingGroup) Add() NoReturnRateInformationSources {
	g := m.RepeatingGroup.Add()
	return NoReturnRateInformationSources{g}
}

// Get returns the ith NoReturnRateInformationSources in the NoReturnRateInformationSourcesRepeatinGroup.
func (m NoReturnRateInformationSourcesRepeatingGroup) Get(i int) NoReturnRateInformationSources {
	return NoReturnRateInformationSources{m.RepeatingGroup.Get(i)}
}

// NoReturnRateDates is a repeating group element, Tag 42709.
type NoReturnRateDates struct {
	*quickfix.Group
}

// SetReturnRateDateMode sets ReturnRateDateMode, Tag 42710.
func (m NoReturnRateDates) SetReturnRateDateMode(v enum.ReturnRateDateMode) {
	m.Set(field.NewReturnRateDateMode(v))
}

// SetNoReturnRateValuationDates sets NoReturnRateValuationDates, Tag 42772.
func (m NoReturnRateDates) SetNoReturnRateValuationDates(f NoReturnRateValuationDatesRepeatingGroup) {
	m.SetGroup(f)
}

// SetReturnRateValuationDateRelativeTo sets ReturnRateValuationDateRelativeTo, Tag 42711.
func (m NoReturnRateDates) SetReturnRateValuationDateRelativeTo(v int) {
	m.Set(field.NewReturnRateValuationDateRelativeTo(v))
}

// SetReturnRateValuationDateOffsetPeriod sets ReturnRateValuationDateOffsetPeriod, Tag 42712.
func (m NoReturnRateDates) SetReturnRateValuationDateOffsetPeriod(v int) {
	m.Set(field.NewReturnRateValuationDateOffsetPeriod(v))
}

// SetReturnRateValuationDateOffsetUnit sets ReturnRateValuationDateOffsetUnit, Tag 42713.
func (m NoReturnRateDates) SetReturnRateValuationDateOffsetUnit(v string) {
	m.Set(field.NewReturnRateValuationDateOffsetUnit(v))
}

// SetReturnRateValuationDateOffsetDayType sets ReturnRateValuationDateOffsetDayType, Tag 42714.
func (m NoReturnRateDates) SetReturnRateValuationDateOffsetDayType(v int) {
	m.Set(field.NewReturnRateValuationDateOffsetDayType(v))
}

// SetReturnRateValuationStartDateUnadjusted sets ReturnRateValuationStartDateUnadjusted, Tag 42715.
func (m NoReturnRateDates) SetReturnRateValuationStartDateUnadjusted(v string) {
	m.Set(field.NewReturnRateValuationStartDateUnadjusted(v))
}

// SetReturnRateValuationStartDateRelativeTo sets ReturnRateValuationStartDateRelativeTo, Tag 42716.
func (m NoReturnRateDates) SetReturnRateValuationStartDateRelativeTo(v int) {
	m.Set(field.NewReturnRateValuationStartDateRelativeTo(v))
}

// SetReturnRateValuationStartDateOffsetPeriod sets ReturnRateValuationStartDateOffsetPeriod, Tag 42717.
func (m NoReturnRateDates) SetReturnRateValuationStartDateOffsetPeriod(v int) {
	m.Set(field.NewReturnRateValuationStartDateOffsetPeriod(v))
}

// SetReturnRateValuationStartDateOffsetUnit sets ReturnRateValuationStartDateOffsetUnit, Tag 42718.
func (m NoReturnRateDates) SetReturnRateValuationStartDateOffsetUnit(v string) {
	m.Set(field.NewReturnRateValuationStartDateOffsetUnit(v))
}

// SetReturnRateValuationStartDateOffsetDayType sets ReturnRateValuationStartDateOffsetDayType, Tag 42719.
func (m NoReturnRateDates) SetReturnRateValuationStartDateOffsetDayType(v int) {
	m.Set(field.NewReturnRateValuationStartDateOffsetDayType(v))
}

// SetReturnRateValuationStartDateAdjusted sets ReturnRateValuationStartDateAdjusted, Tag 42720.
func (m NoReturnRateDates) SetReturnRateValuationStartDateAdjusted(v string) {
	m.Set(field.NewReturnRateValuationStartDateAdjusted(v))
}

// SetReturnRateValuationEndDateUnadjusted sets ReturnRateValuationEndDateUnadjusted, Tag 42721.
func (m NoReturnRateDates) SetReturnRateValuationEndDateUnadjusted(v string) {
	m.Set(field.NewReturnRateValuationEndDateUnadjusted(v))
}

// SetReturnRateValuationEndDateRelativeTo sets ReturnRateValuationEndDateRelativeTo, Tag 42722.
func (m NoReturnRateDates) SetReturnRateValuationEndDateRelativeTo(v int) {
	m.Set(field.NewReturnRateValuationEndDateRelativeTo(v))
}

// SetReturnRateValuationEndDateOffsetPeriod sets ReturnRateValuationEndDateOffsetPeriod, Tag 42723.
func (m NoReturnRateDates) SetReturnRateValuationEndDateOffsetPeriod(v int) {
	m.Set(field.NewReturnRateValuationEndDateOffsetPeriod(v))
}

// SetReturnRateValuationEndDateOffsetUnit sets ReturnRateValuationEndDateOffsetUnit, Tag 42724.
func (m NoReturnRateDates) SetReturnRateValuationEndDateOffsetUnit(v string) {
	m.Set(field.NewReturnRateValuationEndDateOffsetUnit(v))
}

// SetReturnRateValuationEndDateOffsetDayType sets ReturnRateValuationEndDateOffsetDayType, Tag 42725.
func (m NoReturnRateDates) SetReturnRateValuationEndDateOffsetDayType(v int) {
	m.Set(field.NewReturnRateValuationEndDateOffsetDayType(v))
}

// SetReturnRateValuationEndDateAdjusted sets ReturnRateValuationEndDateAdjusted, Tag 42726.
func (m NoReturnRateDates) SetReturnRateValuationEndDateAdjusted(v string) {
	m.Set(field.NewReturnRateValuationEndDateAdjusted(v))
}

// SetReturnRateValuationFrequencyPeriod sets ReturnRateValuationFrequencyPeriod, Tag 42727.
func (m NoReturnRateDates) SetReturnRateValuationFrequencyPeriod(v int) {
	m.Set(field.NewReturnRateValuationFrequencyPeriod(v))
}

// SetReturnRateValuationFrequencyUnit sets ReturnRateValuationFrequencyUnit, Tag 42728.
func (m NoReturnRateDates) SetReturnRateValuationFrequencyUnit(v string) {
	m.Set(field.NewReturnRateValuationFrequencyUnit(v))
}

// SetReturnRateValuationFrequencyRollConvention sets ReturnRateValuationFrequencyRollConvention, Tag 42729.
func (m NoReturnRateDates) SetReturnRateValuationFrequencyRollConvention(v string) {
	m.Set(field.NewReturnRateValuationFrequencyRollConvention(v))
}

// SetReturnRateValuationDateBusinessDayConvention sets ReturnRateValuationDateBusinessDayConvention, Tag 42730.
func (m NoReturnRateDates) SetReturnRateValuationDateBusinessDayConvention(v int) {
	m.Set(field.NewReturnRateValuationDateBusinessDayConvention(v))
}

// SetNoReturnRateValuationDateBusinessCenters sets NoReturnRateValuationDateBusinessCenters, Tag 42770.
func (m NoReturnRateDates) SetNoReturnRateValuationDateBusinessCenters(f NoReturnRateValuationDateBusinessCentersRepeatingGroup) {
	m.SetGroup(f)
}

// GetReturnRateDateMode gets ReturnRateDateMode, Tag 42710.
func (m NoReturnRateDates) GetReturnRateDateMode() (v enum.ReturnRateDateMode, err quickfix.MessageRejectError) {
	var f field.ReturnRateDateModeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoReturnRateValuationDates gets NoReturnRateValuationDates, Tag 42772.
func (m NoReturnRateDates) GetNoReturnRateValuationDates() (NoReturnRateValuationDatesRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoReturnRateValuationDatesRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetReturnRateValuationDateRelativeTo gets ReturnRateValuationDateRelativeTo, Tag 42711.
func (m NoReturnRateDates) GetReturnRateValuationDateRelativeTo() (v int, err quickfix.MessageRejectError) {
	var f field.ReturnRateValuationDateRelativeToField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetReturnRateValuationDateOffsetPeriod gets ReturnRateValuationDateOffsetPeriod, Tag 42712.
func (m NoReturnRateDates) GetReturnRateValuationDateOffsetPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.ReturnRateValuationDateOffsetPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetReturnRateValuationDateOffsetUnit gets ReturnRateValuationDateOffsetUnit, Tag 42713.
func (m NoReturnRateDates) GetReturnRateValuationDateOffsetUnit() (v string, err quickfix.MessageRejectError) {
	var f field.ReturnRateValuationDateOffsetUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetReturnRateValuationDateOffsetDayType gets ReturnRateValuationDateOffsetDayType, Tag 42714.
func (m NoReturnRateDates) GetReturnRateValuationDateOffsetDayType() (v int, err quickfix.MessageRejectError) {
	var f field.ReturnRateValuationDateOffsetDayTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetReturnRateValuationStartDateUnadjusted gets ReturnRateValuationStartDateUnadjusted, Tag 42715.
func (m NoReturnRateDates) GetReturnRateValuationStartDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.ReturnRateValuationStartDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetReturnRateValuationStartDateRelativeTo gets ReturnRateValuationStartDateRelativeTo, Tag 42716.
func (m NoReturnRateDates) GetReturnRateValuationStartDateRelativeTo() (v int, err quickfix.MessageRejectError) {
	var f field.ReturnRateValuationStartDateRelativeToField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetReturnRateValuationStartDateOffsetPeriod gets ReturnRateValuationStartDateOffsetPeriod, Tag 42717.
func (m NoReturnRateDates) GetReturnRateValuationStartDateOffsetPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.ReturnRateValuationStartDateOffsetPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetReturnRateValuationStartDateOffsetUnit gets ReturnRateValuationStartDateOffsetUnit, Tag 42718.
func (m NoReturnRateDates) GetReturnRateValuationStartDateOffsetUnit() (v string, err quickfix.MessageRejectError) {
	var f field.ReturnRateValuationStartDateOffsetUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetReturnRateValuationStartDateOffsetDayType gets ReturnRateValuationStartDateOffsetDayType, Tag 42719.
func (m NoReturnRateDates) GetReturnRateValuationStartDateOffsetDayType() (v int, err quickfix.MessageRejectError) {
	var f field.ReturnRateValuationStartDateOffsetDayTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetReturnRateValuationStartDateAdjusted gets ReturnRateValuationStartDateAdjusted, Tag 42720.
func (m NoReturnRateDates) GetReturnRateValuationStartDateAdjusted() (v string, err quickfix.MessageRejectError) {
	var f field.ReturnRateValuationStartDateAdjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetReturnRateValuationEndDateUnadjusted gets ReturnRateValuationEndDateUnadjusted, Tag 42721.
func (m NoReturnRateDates) GetReturnRateValuationEndDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.ReturnRateValuationEndDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetReturnRateValuationEndDateRelativeTo gets ReturnRateValuationEndDateRelativeTo, Tag 42722.
func (m NoReturnRateDates) GetReturnRateValuationEndDateRelativeTo() (v int, err quickfix.MessageRejectError) {
	var f field.ReturnRateValuationEndDateRelativeToField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetReturnRateValuationEndDateOffsetPeriod gets ReturnRateValuationEndDateOffsetPeriod, Tag 42723.
func (m NoReturnRateDates) GetReturnRateValuationEndDateOffsetPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.ReturnRateValuationEndDateOffsetPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetReturnRateValuationEndDateOffsetUnit gets ReturnRateValuationEndDateOffsetUnit, Tag 42724.
func (m NoReturnRateDates) GetReturnRateValuationEndDateOffsetUnit() (v string, err quickfix.MessageRejectError) {
	var f field.ReturnRateValuationEndDateOffsetUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetReturnRateValuationEndDateOffsetDayType gets ReturnRateValuationEndDateOffsetDayType, Tag 42725.
func (m NoReturnRateDates) GetReturnRateValuationEndDateOffsetDayType() (v int, err quickfix.MessageRejectError) {
	var f field.ReturnRateValuationEndDateOffsetDayTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetReturnRateValuationEndDateAdjusted gets ReturnRateValuationEndDateAdjusted, Tag 42726.
func (m NoReturnRateDates) GetReturnRateValuationEndDateAdjusted() (v string, err quickfix.MessageRejectError) {
	var f field.ReturnRateValuationEndDateAdjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetReturnRateValuationFrequencyPeriod gets ReturnRateValuationFrequencyPeriod, Tag 42727.
func (m NoReturnRateDates) GetReturnRateValuationFrequencyPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.ReturnRateValuationFrequencyPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetReturnRateValuationFrequencyUnit gets ReturnRateValuationFrequencyUnit, Tag 42728.
func (m NoReturnRateDates) GetReturnRateValuationFrequencyUnit() (v string, err quickfix.MessageRejectError) {
	var f field.ReturnRateValuationFrequencyUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetReturnRateValuationFrequencyRollConvention gets ReturnRateValuationFrequencyRollConvention, Tag 42729.
func (m NoReturnRateDates) GetReturnRateValuationFrequencyRollConvention() (v string, err quickfix.MessageRejectError) {
	var f field.ReturnRateValuationFrequencyRollConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetReturnRateValuationDateBusinessDayConvention gets ReturnRateValuationDateBusinessDayConvention, Tag 42730.
func (m NoReturnRateDates) GetReturnRateValuationDateBusinessDayConvention() (v int, err quickfix.MessageRejectError) {
	var f field.ReturnRateValuationDateBusinessDayConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoReturnRateValuationDateBusinessCenters gets NoReturnRateValuationDateBusinessCenters, Tag 42770.
func (m NoReturnRateDates) GetNoReturnRateValuationDateBusinessCenters() (NoReturnRateValuationDateBusinessCentersRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoReturnRateValuationDateBusinessCentersRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// HasReturnRateDateMode returns true if ReturnRateDateMode is present, Tag 42710.
func (m NoReturnRateDates) HasReturnRateDateMode() bool {
	return m.Has(tag.ReturnRateDateMode)
}

// HasNoReturnRateValuationDates returns true if NoReturnRateValuationDates is present, Tag 42772.
func (m NoReturnRateDates) HasNoReturnRateValuationDates() bool {
	return m.Has(tag.NoReturnRateValuationDates)
}

// HasReturnRateValuationDateRelativeTo returns true if ReturnRateValuationDateRelativeTo is present, Tag 42711.
func (m NoReturnRateDates) HasReturnRateValuationDateRelativeTo() bool {
	return m.Has(tag.ReturnRateValuationDateRelativeTo)
}

// HasReturnRateValuationDateOffsetPeriod returns true if ReturnRateValuationDateOffsetPeriod is present, Tag 42712.
func (m NoReturnRateDates) HasReturnRateValuationDateOffsetPeriod() bool {
	return m.Has(tag.ReturnRateValuationDateOffsetPeriod)
}

// HasReturnRateValuationDateOffsetUnit returns true if ReturnRateValuationDateOffsetUnit is present, Tag 42713.
func (m NoReturnRateDates) HasReturnRateValuationDateOffsetUnit() bool {
	return m.Has(tag.ReturnRateValuationDateOffsetUnit)
}

// HasReturnRateValuationDateOffsetDayType returns true if ReturnRateValuationDateOffsetDayType is present, Tag 42714.
func (m NoReturnRateDates) HasReturnRateValuationDateOffsetDayType() bool {
	return m.Has(tag.ReturnRateValuationDateOffsetDayType)
}

// HasReturnRateValuationStartDateUnadjusted returns true if ReturnRateValuationStartDateUnadjusted is present, Tag 42715.
func (m NoReturnRateDates) HasReturnRateValuationStartDateUnadjusted() bool {
	return m.Has(tag.ReturnRateValuationStartDateUnadjusted)
}

// HasReturnRateValuationStartDateRelativeTo returns true if ReturnRateValuationStartDateRelativeTo is present, Tag 42716.
func (m NoReturnRateDates) HasReturnRateValuationStartDateRelativeTo() bool {
	return m.Has(tag.ReturnRateValuationStartDateRelativeTo)
}

// HasReturnRateValuationStartDateOffsetPeriod returns true if ReturnRateValuationStartDateOffsetPeriod is present, Tag 42717.
func (m NoReturnRateDates) HasReturnRateValuationStartDateOffsetPeriod() bool {
	return m.Has(tag.ReturnRateValuationStartDateOffsetPeriod)
}

// HasReturnRateValuationStartDateOffsetUnit returns true if ReturnRateValuationStartDateOffsetUnit is present, Tag 42718.
func (m NoReturnRateDates) HasReturnRateValuationStartDateOffsetUnit() bool {
	return m.Has(tag.ReturnRateValuationStartDateOffsetUnit)
}

// HasReturnRateValuationStartDateOffsetDayType returns true if ReturnRateValuationStartDateOffsetDayType is present, Tag 42719.
func (m NoReturnRateDates) HasReturnRateValuationStartDateOffsetDayType() bool {
	return m.Has(tag.ReturnRateValuationStartDateOffsetDayType)
}

// HasReturnRateValuationStartDateAdjusted returns true if ReturnRateValuationStartDateAdjusted is present, Tag 42720.
func (m NoReturnRateDates) HasReturnRateValuationStartDateAdjusted() bool {
	return m.Has(tag.ReturnRateValuationStartDateAdjusted)
}

// HasReturnRateValuationEndDateUnadjusted returns true if ReturnRateValuationEndDateUnadjusted is present, Tag 42721.
func (m NoReturnRateDates) HasReturnRateValuationEndDateUnadjusted() bool {
	return m.Has(tag.ReturnRateValuationEndDateUnadjusted)
}

// HasReturnRateValuationEndDateRelativeTo returns true if ReturnRateValuationEndDateRelativeTo is present, Tag 42722.
func (m NoReturnRateDates) HasReturnRateValuationEndDateRelativeTo() bool {
	return m.Has(tag.ReturnRateValuationEndDateRelativeTo)
}

// HasReturnRateValuationEndDateOffsetPeriod returns true if ReturnRateValuationEndDateOffsetPeriod is present, Tag 42723.
func (m NoReturnRateDates) HasReturnRateValuationEndDateOffsetPeriod() bool {
	return m.Has(tag.ReturnRateValuationEndDateOffsetPeriod)
}

// HasReturnRateValuationEndDateOffsetUnit returns true if ReturnRateValuationEndDateOffsetUnit is present, Tag 42724.
func (m NoReturnRateDates) HasReturnRateValuationEndDateOffsetUnit() bool {
	return m.Has(tag.ReturnRateValuationEndDateOffsetUnit)
}

// HasReturnRateValuationEndDateOffsetDayType returns true if ReturnRateValuationEndDateOffsetDayType is present, Tag 42725.
func (m NoReturnRateDates) HasReturnRateValuationEndDateOffsetDayType() bool {
	return m.Has(tag.ReturnRateValuationEndDateOffsetDayType)
}

// HasReturnRateValuationEndDateAdjusted returns true if ReturnRateValuationEndDateAdjusted is present, Tag 42726.
func (m NoReturnRateDates) HasReturnRateValuationEndDateAdjusted() bool {
	return m.Has(tag.ReturnRateValuationEndDateAdjusted)
}

// HasReturnRateValuationFrequencyPeriod returns true if ReturnRateValuationFrequencyPeriod is present, Tag 42727.
func (m NoReturnRateDates) HasReturnRateValuationFrequencyPeriod() bool {
	return m.Has(tag.ReturnRateValuationFrequencyPeriod)
}

// HasReturnRateValuationFrequencyUnit returns true if ReturnRateValuationFrequencyUnit is present, Tag 42728.
func (m NoReturnRateDates) HasReturnRateValuationFrequencyUnit() bool {
	return m.Has(tag.ReturnRateValuationFrequencyUnit)
}

// HasReturnRateValuationFrequencyRollConvention returns true if ReturnRateValuationFrequencyRollConvention is present, Tag 42729.
func (m NoReturnRateDates) HasReturnRateValuationFrequencyRollConvention() bool {
	return m.Has(tag.ReturnRateValuationFrequencyRollConvention)
}

// HasReturnRateValuationDateBusinessDayConvention returns true if ReturnRateValuationDateBusinessDayConvention is present, Tag 42730.
func (m NoReturnRateDates) HasReturnRateValuationDateBusinessDayConvention() bool {
	return m.Has(tag.ReturnRateValuationDateBusinessDayConvention)
}

// HasNoReturnRateValuationDateBusinessCenters returns true if NoReturnRateValuationDateBusinessCenters is present, Tag 42770.
func (m NoReturnRateDates) HasNoReturnRateValuationDateBusinessCenters() bool {
	return m.Has(tag.NoReturnRateValuationDateBusinessCenters)
}

// NoReturnRateValuationDates is a repeating group element, Tag 42772.
type NoReturnRateValuationDates struct {
	*quickfix.Group
}

// SetReturnRateValuationDate sets ReturnRateValuationDate, Tag 42773.
func (m NoReturnRateValuationDates) SetReturnRateValuationDate(v string) {
	m.Set(field.NewReturnRateValuationDate(v))
}

// SetReturnRateValuationDateType sets ReturnRateValuationDateType, Tag 42774.
func (m NoReturnRateValuationDates) SetReturnRateValuationDateType(v int) {
	m.Set(field.NewReturnRateValuationDateType(v))
}

// GetReturnRateValuationDate gets ReturnRateValuationDate, Tag 42773.
func (m NoReturnRateValuationDates) GetReturnRateValuationDate() (v string, err quickfix.MessageRejectError) {
	var f field.ReturnRateValuationDateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetReturnRateValuationDateType gets ReturnRateValuationDateType, Tag 42774.
func (m NoReturnRateValuationDates) GetReturnRateValuationDateType() (v int, err quickfix.MessageRejectError) {
	var f field.ReturnRateValuationDateTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasReturnRateValuationDate returns true if ReturnRateValuationDate is present, Tag 42773.
func (m NoReturnRateValuationDates) HasReturnRateValuationDate() bool {
	return m.Has(tag.ReturnRateValuationDate)
}

// HasReturnRateValuationDateType returns true if ReturnRateValuationDateType is present, Tag 42774.
func (m NoReturnRateValuationDates) HasReturnRateValuationDateType() bool {
	return m.Has(tag.ReturnRateValuationDateType)
}

// NoReturnRateValuationDatesRepeatingGroup is a repeating group, Tag 42772.
type NoReturnRateValuationDatesRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoReturnRateValuationDatesRepeatingGroup returns an initialized, NoReturnRateValuationDatesRepeatingGroup.
func NewNoReturnRateValuationDatesRepeatingGroup() NoReturnRateValuationDatesRepeatingGroup {
	return NoReturnRateValuationDatesRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoReturnRateValuationDates,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.ReturnRateValuationDate),
				quickfix.GroupElement(tag.ReturnRateValuationDateType),
			},
		),
	}
}

// Add create and append a new NoReturnRateValuationDates to this group.
func (m NoReturnRateValuationDatesRepeatingGroup) Add() NoReturnRateValuationDates {
	g := m.RepeatingGroup.Add()
	return NoReturnRateValuationDates{g}
}

// Get returns the ith NoReturnRateValuationDates in the NoReturnRateValuationDatesRepeatinGroup.
func (m NoReturnRateValuationDatesRepeatingGroup) Get(i int) NoReturnRateValuationDates {
	return NoReturnRateValuationDates{m.RepeatingGroup.Get(i)}
}

// NoReturnRateValuationDateBusinessCenters is a repeating group element, Tag 42770.
type NoReturnRateValuationDateBusinessCenters struct {
	*quickfix.Group
}

// SetReturnRateValuationDateBusinessCenter sets ReturnRateValuationDateBusinessCenter, Tag 42771.
func (m NoReturnRateValuationDateBusinessCenters) SetReturnRateValuationDateBusinessCenter(v string) {
	m.Set(field.NewReturnRateValuationDateBusinessCenter(v))
}

// GetReturnRateValuationDateBusinessCenter gets ReturnRateValuationDateBusinessCenter, Tag 42771.
func (m NoReturnRateValuationDateBusinessCenters) GetReturnRateValuationDateBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.ReturnRateValuationDateBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasReturnRateValuationDateBusinessCenter returns true if ReturnRateValuationDateBusinessCenter is present, Tag 42771.
func (m NoReturnRateValuationDateBusinessCenters) HasReturnRateValuationDateBusinessCenter() bool {
	return m.Has(tag.ReturnRateValuationDateBusinessCenter)
}

// NoReturnRateValuationDateBusinessCentersRepeatingGroup is a repeating group, Tag 42770.
type NoReturnRateValuationDateBusinessCentersRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoReturnRateValuationDateBusinessCentersRepeatingGroup returns an initialized, NoReturnRateValuationDateBusinessCentersRepeatingGroup.
func NewNoReturnRateValuationDateBusinessCentersRepeatingGroup() NoReturnRateValuationDateBusinessCentersRepeatingGroup {
	return NoReturnRateValuationDateBusinessCentersRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoReturnRateValuationDateBusinessCenters,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.ReturnRateValuationDateBusinessCenter),
			},
		),
	}
}

// Add create and append a new NoReturnRateValuationDateBusinessCenters to this group.
func (m NoReturnRateValuationDateBusinessCentersRepeatingGroup) Add() NoReturnRateValuationDateBusinessCenters {
	g := m.RepeatingGroup.Add()
	return NoReturnRateValuationDateBusinessCenters{g}
}

// Get returns the ith NoReturnRateValuationDateBusinessCenters in the NoReturnRateValuationDateBusinessCentersRepeatinGroup.
func (m NoReturnRateValuationDateBusinessCentersRepeatingGroup) Get(i int) NoReturnRateValuationDateBusinessCenters {
	return NoReturnRateValuationDateBusinessCenters{m.RepeatingGroup.Get(i)}
}

// NoReturnRateDatesRepeatingGroup is a repeating group, Tag 42709.
type NoReturnRateDatesRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoReturnRateDatesRepeatingGroup returns an initialized, NoReturnRateDatesRepeatingGroup.
func NewNoReturnRateDatesRepeatingGroup() NoReturnRateDatesRepeatingGroup {
	return NoReturnRateDatesRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoReturnRateDates,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.ReturnRateDateMode),
				NewNoReturnRateValuationDatesRepeatingGroup(),
				quickfix.GroupElement(tag.ReturnRateValuationDateRelativeTo),
				quickfix.GroupElement(tag.ReturnRateValuationDateOffsetPeriod),
				quickfix.GroupElement(tag.ReturnRateValuationDateOffsetUnit),
				quickfix.GroupElement(tag.ReturnRateValuationDateOffsetDayType),
				quickfix.GroupElement(tag.ReturnRateValuationStartDateUnadjusted),
				quickfix.GroupElement(tag.ReturnRateValuationStartDateRelativeTo),
				quickfix.GroupElement(tag.ReturnRateValuationStartDateOffsetPeriod),
				quickfix.GroupElement(tag.ReturnRateValuationStartDateOffsetUnit),
				quickfix.GroupElement(tag.ReturnRateValuationStartDateOffsetDayType),
				quickfix.GroupElement(tag.ReturnRateValuationStartDateAdjusted),
				quickfix.GroupElement(tag.ReturnRateValuationEndDateUnadjusted),
				quickfix.GroupElement(tag.ReturnRateValuationEndDateRelativeTo),
				quickfix.GroupElement(tag.ReturnRateValuationEndDateOffsetPeriod),
				quickfix.GroupElement(tag.ReturnRateValuationEndDateOffsetUnit),
				quickfix.GroupElement(tag.ReturnRateValuationEndDateOffsetDayType),
				quickfix.GroupElement(tag.ReturnRateValuationEndDateAdjusted),
				quickfix.GroupElement(tag.ReturnRateValuationFrequencyPeriod),
				quickfix.GroupElement(tag.ReturnRateValuationFrequencyUnit),
				quickfix.GroupElement(tag.ReturnRateValuationFrequencyRollConvention),
				quickfix.GroupElement(tag.ReturnRateValuationDateBusinessDayConvention),
				NewNoReturnRateValuationDateBusinessCentersRepeatingGroup(),
			},
		),
	}
}

// Add create and append a new NoReturnRateDates to this group.
func (m NoReturnRateDatesRepeatingGroup) Add() NoReturnRateDates {
	g := m.RepeatingGroup.Add()
	return NoReturnRateDates{g}
}

// Get returns the ith NoReturnRateDates in the NoReturnRateDatesRepeatinGroup.
func (m NoReturnRateDatesRepeatingGroup) Get(i int) NoReturnRateDates {
	return NoReturnRateDates{m.RepeatingGroup.Get(i)}
}

// NoReturnRatesRepeatingGroup is a repeating group, Tag 42735.
type NoReturnRatesRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoReturnRatesRepeatingGroup returns an initialized, NoReturnRatesRepeatingGroup.
func NewNoReturnRatesRepeatingGroup() NoReturnRatesRepeatingGroup {
	return NoReturnRatesRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoReturnRates,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.ReturnRatePriceSequence),
				quickfix.GroupElement(tag.ReturnRateCommissionBasis),
				quickfix.GroupElement(tag.ReturnRateCommissionAmount),
				quickfix.GroupElement(tag.ReturnRateCommissionCurrency),
				quickfix.GroupElement(tag.ReturnRateTotalCommissionPerTrade),
				quickfix.GroupElement(tag.ReturnRateDeterminationMethod),
				NewNoReturnRatePricesRepeatingGroup(),
				NewNoReturnRateFXConversionsRepeatingGroup(),
				quickfix.GroupElement(tag.ReturnRateAmountRelativeTo),
				quickfix.GroupElement(tag.ReturnRateQuoteMeasureType),
				quickfix.GroupElement(tag.ReturnRateQuoteUnits),
				quickfix.GroupElement(tag.ReturnRateQuoteMethod),
				quickfix.GroupElement(tag.ReturnRateQuoteCurrency),
				quickfix.GroupElement(tag.ReturnRateQuoteCurrencyType),
				quickfix.GroupElement(tag.ReturnRateQuoteTimeType),
				quickfix.GroupElement(tag.ReturnRateQuoteTime),
				quickfix.GroupElement(tag.ReturnRateQuoteDate),
				quickfix.GroupElement(tag.ReturnRateQuoteExpirationTime),
				quickfix.GroupElement(tag.ReturnRateQuoteBusinessCenter),
				quickfix.GroupElement(tag.ReturnRateQuoteExchange),
				NewNoReturnRateInformationSourcesRepeatingGroup(),
				quickfix.GroupElement(tag.ReturnRateQuotePricingModel),
				quickfix.GroupElement(tag.ReturnRateCashFlowType),
				NewNoReturnRateDatesRepeatingGroup(),
				quickfix.GroupElement(tag.ReturnRateValuationTimeType),
				quickfix.GroupElement(tag.ReturnRateValuationTime),
				quickfix.GroupElement(tag.ReturnRateValuationTimeBusinessCenter),
				quickfix.GroupElement(tag.ReturnRateValuationPriceOption),
				quickfix.GroupElement(tag.ReturnRateFinalPriceFallback),
			},
		),
	}
}

// Add create and append a new NoReturnRates to this group.
func (m NoReturnRatesRepeatingGroup) Add() NoReturnRates {
	g := m.RepeatingGroup.Add()
	return NoReturnRates{g}
}

// Get returns the ith NoReturnRates in the NoReturnRatesRepeatinGroup.
func (m NoReturnRatesRepeatingGroup) Get(i int) NoReturnRates {
	return NoReturnRates{m.RepeatingGroup.Get(i)}
}

// NoPaymentStreamNonDeliverableFixingDatesBusinessCenters is a repeating group element, Tag 40946.
type NoPaymentStreamNonDeliverableFixingDatesBusinessCenters struct {
	*quickfix.Group
}

// SetPaymentStreamNonDeliverableFixingDatesBusinessCenter sets PaymentStreamNonDeliverableFixingDatesBusinessCenter, Tag 40819.
func (m NoPaymentStreamNonDeliverableFixingDatesBusinessCenters) SetPaymentStreamNonDeliverableFixingDatesBusinessCenter(v string) {
	m.Set(field.NewPaymentStreamNonDeliverableFixingDatesBusinessCenter(v))
}

// GetPaymentStreamNonDeliverableFixingDatesBusinessCenter gets PaymentStreamNonDeliverableFixingDatesBusinessCenter, Tag 40819.
func (m NoPaymentStreamNonDeliverableFixingDatesBusinessCenters) GetPaymentStreamNonDeliverableFixingDatesBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStreamNonDeliverableFixingDatesBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasPaymentStreamNonDeliverableFixingDatesBusinessCenter returns true if PaymentStreamNonDeliverableFixingDatesBusinessCenter is present, Tag 40819.
func (m NoPaymentStreamNonDeliverableFixingDatesBusinessCenters) HasPaymentStreamNonDeliverableFixingDatesBusinessCenter() bool {
	return m.Has(tag.PaymentStreamNonDeliverableFixingDatesBusinessCenter)
}

// NoPaymentStreamNonDeliverableFixingDatesBusinessCentersRepeatingGroup is a repeating group, Tag 40946.
type NoPaymentStreamNonDeliverableFixingDatesBusinessCentersRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoPaymentStreamNonDeliverableFixingDatesBusinessCentersRepeatingGroup returns an initialized, NoPaymentStreamNonDeliverableFixingDatesBusinessCentersRepeatingGroup.
func NewNoPaymentStreamNonDeliverableFixingDatesBusinessCentersRepeatingGroup() NoPaymentStreamNonDeliverableFixingDatesBusinessCentersRepeatingGroup {
	return NoPaymentStreamNonDeliverableFixingDatesBusinessCentersRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoPaymentStreamNonDeliverableFixingDatesBusinessCenters,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.PaymentStreamNonDeliverableFixingDatesBusinessCenter),
			},
		),
	}
}

// Add create and append a new NoPaymentStreamNonDeliverableFixingDatesBusinessCenters to this group.
func (m NoPaymentStreamNonDeliverableFixingDatesBusinessCentersRepeatingGroup) Add() NoPaymentStreamNonDeliverableFixingDatesBusinessCenters {
	g := m.RepeatingGroup.Add()
	return NoPaymentStreamNonDeliverableFixingDatesBusinessCenters{g}
}

// Get returns the ith NoPaymentStreamNonDeliverableFixingDatesBusinessCenters in the NoPaymentStreamNonDeliverableFixingDatesBusinessCentersRepeatinGroup.
func (m NoPaymentStreamNonDeliverableFixingDatesBusinessCentersRepeatingGroup) Get(i int) NoPaymentStreamNonDeliverableFixingDatesBusinessCenters {
	return NoPaymentStreamNonDeliverableFixingDatesBusinessCenters{m.RepeatingGroup.Get(i)}
}

// NoNonDeliverableFixingDates is a repeating group element, Tag 40825.
type NoNonDeliverableFixingDates struct {
	*quickfix.Group
}

// SetNonDeliverableFixingDate sets NonDeliverableFixingDate, Tag 40826.
func (m NoNonDeliverableFixingDates) SetNonDeliverableFixingDate(v string) {
	m.Set(field.NewNonDeliverableFixingDate(v))
}

// SetNonDeliverableFixingDateType sets NonDeliverableFixingDateType, Tag 40827.
func (m NoNonDeliverableFixingDates) SetNonDeliverableFixingDateType(v enum.NonDeliverableFixingDateType) {
	m.Set(field.NewNonDeliverableFixingDateType(v))
}

// GetNonDeliverableFixingDate gets NonDeliverableFixingDate, Tag 40826.
func (m NoNonDeliverableFixingDates) GetNonDeliverableFixingDate() (v string, err quickfix.MessageRejectError) {
	var f field.NonDeliverableFixingDateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNonDeliverableFixingDateType gets NonDeliverableFixingDateType, Tag 40827.
func (m NoNonDeliverableFixingDates) GetNonDeliverableFixingDateType() (v enum.NonDeliverableFixingDateType, err quickfix.MessageRejectError) {
	var f field.NonDeliverableFixingDateTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasNonDeliverableFixingDate returns true if NonDeliverableFixingDate is present, Tag 40826.
func (m NoNonDeliverableFixingDates) HasNonDeliverableFixingDate() bool {
	return m.Has(tag.NonDeliverableFixingDate)
}

// HasNonDeliverableFixingDateType returns true if NonDeliverableFixingDateType is present, Tag 40827.
func (m NoNonDeliverableFixingDates) HasNonDeliverableFixingDateType() bool {
	return m.Has(tag.NonDeliverableFixingDateType)
}

// NoNonDeliverableFixingDatesRepeatingGroup is a repeating group, Tag 40825.
type NoNonDeliverableFixingDatesRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoNonDeliverableFixingDatesRepeatingGroup returns an initialized, NoNonDeliverableFixingDatesRepeatingGroup.
func NewNoNonDeliverableFixingDatesRepeatingGroup() NoNonDeliverableFixingDatesRepeatingGroup {
	return NoNonDeliverableFixingDatesRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoNonDeliverableFixingDates,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.NonDeliverableFixingDate),
				quickfix.GroupElement(tag.NonDeliverableFixingDateType),
			},
		),
	}
}

// Add create and append a new NoNonDeliverableFixingDates to this group.
func (m NoNonDeliverableFixingDatesRepeatingGroup) Add() NoNonDeliverableFixingDates {
	g := m.RepeatingGroup.Add()
	return NoNonDeliverableFixingDates{g}
}

// Get returns the ith NoNonDeliverableFixingDates in the NoNonDeliverableFixingDatesRepeatinGroup.
func (m NoNonDeliverableFixingDatesRepeatingGroup) Get(i int) NoNonDeliverableFixingDates {
	return NoNonDeliverableFixingDates{m.RepeatingGroup.Get(i)}
}

// NoSettlRateFallbacks is a repeating group element, Tag 40085.
type NoSettlRateFallbacks struct {
	*quickfix.Group
}

// SetSettlRatePostponementMaximumDays sets SettlRatePostponementMaximumDays, Tag 40086.
func (m NoSettlRateFallbacks) SetSettlRatePostponementMaximumDays(v int) {
	m.Set(field.NewSettlRatePostponementMaximumDays(v))
}

// SetSettlRateFallbackRateSource sets SettlRateFallbackRateSource, Tag 40373.
func (m NoSettlRateFallbacks) SetSettlRateFallbackRateSource(v int) {
	m.Set(field.NewSettlRateFallbackRateSource(v))
}

// SetSettlRateFallbackReferencePage sets SettlRateFallbackReferencePage, Tag 40655.
func (m NoSettlRateFallbacks) SetSettlRateFallbackReferencePage(v string) {
	m.Set(field.NewSettlRateFallbackReferencePage(v))
}

// SetSettlRatePostponementSurvey sets SettlRatePostponementSurvey, Tag 40088.
func (m NoSettlRateFallbacks) SetSettlRatePostponementSurvey(v bool) {
	m.Set(field.NewSettlRatePostponementSurvey(v))
}

// SetSettlRatePostponementCalculationAgent sets SettlRatePostponementCalculationAgent, Tag 40089.
func (m NoSettlRateFallbacks) SetSettlRatePostponementCalculationAgent(v int) {
	m.Set(field.NewSettlRatePostponementCalculationAgent(v))
}

// GetSettlRatePostponementMaximumDays gets SettlRatePostponementMaximumDays, Tag 40086.
func (m NoSettlRateFallbacks) GetSettlRatePostponementMaximumDays() (v int, err quickfix.MessageRejectError) {
	var f field.SettlRatePostponementMaximumDaysField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetSettlRateFallbackRateSource gets SettlRateFallbackRateSource, Tag 40373.
func (m NoSettlRateFallbacks) GetSettlRateFallbackRateSource() (v int, err quickfix.MessageRejectError) {
	var f field.SettlRateFallbackRateSourceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetSettlRateFallbackReferencePage gets SettlRateFallbackReferencePage, Tag 40655.
func (m NoSettlRateFallbacks) GetSettlRateFallbackReferencePage() (v string, err quickfix.MessageRejectError) {
	var f field.SettlRateFallbackReferencePageField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetSettlRatePostponementSurvey gets SettlRatePostponementSurvey, Tag 40088.
func (m NoSettlRateFallbacks) GetSettlRatePostponementSurvey() (v bool, err quickfix.MessageRejectError) {
	var f field.SettlRatePostponementSurveyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetSettlRatePostponementCalculationAgent gets SettlRatePostponementCalculationAgent, Tag 40089.
func (m NoSettlRateFallbacks) GetSettlRatePostponementCalculationAgent() (v int, err quickfix.MessageRejectError) {
	var f field.SettlRatePostponementCalculationAgentField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasSettlRatePostponementMaximumDays returns true if SettlRatePostponementMaximumDays is present, Tag 40086.
func (m NoSettlRateFallbacks) HasSettlRatePostponementMaximumDays() bool {
	return m.Has(tag.SettlRatePostponementMaximumDays)
}

// HasSettlRateFallbackRateSource returns true if SettlRateFallbackRateSource is present, Tag 40373.
func (m NoSettlRateFallbacks) HasSettlRateFallbackRateSource() bool {
	return m.Has(tag.SettlRateFallbackRateSource)
}

// HasSettlRateFallbackReferencePage returns true if SettlRateFallbackReferencePage is present, Tag 40655.
func (m NoSettlRateFallbacks) HasSettlRateFallbackReferencePage() bool {
	return m.Has(tag.SettlRateFallbackReferencePage)
}

// HasSettlRatePostponementSurvey returns true if SettlRatePostponementSurvey is present, Tag 40088.
func (m NoSettlRateFallbacks) HasSettlRatePostponementSurvey() bool {
	return m.Has(tag.SettlRatePostponementSurvey)
}

// HasSettlRatePostponementCalculationAgent returns true if SettlRatePostponementCalculationAgent is present, Tag 40089.
func (m NoSettlRateFallbacks) HasSettlRatePostponementCalculationAgent() bool {
	return m.Has(tag.SettlRatePostponementCalculationAgent)
}

// NoSettlRateFallbacksRepeatingGroup is a repeating group, Tag 40085.
type NoSettlRateFallbacksRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoSettlRateFallbacksRepeatingGroup returns an initialized, NoSettlRateFallbacksRepeatingGroup.
func NewNoSettlRateFallbacksRepeatingGroup() NoSettlRateFallbacksRepeatingGroup {
	return NoSettlRateFallbacksRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoSettlRateFallbacks,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.SettlRatePostponementMaximumDays),
				quickfix.GroupElement(tag.SettlRateFallbackRateSource),
				quickfix.GroupElement(tag.SettlRateFallbackReferencePage),
				quickfix.GroupElement(tag.SettlRatePostponementSurvey),
				quickfix.GroupElement(tag.SettlRatePostponementCalculationAgent),
			},
		),
	}
}

// Add create and append a new NoSettlRateFallbacks to this group.
func (m NoSettlRateFallbacksRepeatingGroup) Add() NoSettlRateFallbacks {
	g := m.RepeatingGroup.Add()
	return NoSettlRateFallbacks{g}
}

// Get returns the ith NoSettlRateFallbacks in the NoSettlRateFallbacksRepeatinGroup.
func (m NoSettlRateFallbacksRepeatingGroup) Get(i int) NoSettlRateFallbacks {
	return NoSettlRateFallbacks{m.RepeatingGroup.Get(i)}
}

// NoPaymentStreamCompoundingDatesBusinessCenters is a repeating group element, Tag 42620.
type NoPaymentStreamCompoundingDatesBusinessCenters struct {
	*quickfix.Group
}

// SetPaymentStreamCompoundingDatesBusinessCenter sets PaymentStreamCompoundingDatesBusinessCenter, Tag 42621.
func (m NoPaymentStreamCompoundingDatesBusinessCenters) SetPaymentStreamCompoundingDatesBusinessCenter(v string) {
	m.Set(field.NewPaymentStreamCompoundingDatesBusinessCenter(v))
}

// GetPaymentStreamCompoundingDatesBusinessCenter gets PaymentStreamCompoundingDatesBusinessCenter, Tag 42621.
func (m NoPaymentStreamCompoundingDatesBusinessCenters) GetPaymentStreamCompoundingDatesBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStreamCompoundingDatesBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasPaymentStreamCompoundingDatesBusinessCenter returns true if PaymentStreamCompoundingDatesBusinessCenter is present, Tag 42621.
func (m NoPaymentStreamCompoundingDatesBusinessCenters) HasPaymentStreamCompoundingDatesBusinessCenter() bool {
	return m.Has(tag.PaymentStreamCompoundingDatesBusinessCenter)
}

// NoPaymentStreamCompoundingDatesBusinessCentersRepeatingGroup is a repeating group, Tag 42620.
type NoPaymentStreamCompoundingDatesBusinessCentersRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoPaymentStreamCompoundingDatesBusinessCentersRepeatingGroup returns an initialized, NoPaymentStreamCompoundingDatesBusinessCentersRepeatingGroup.
func NewNoPaymentStreamCompoundingDatesBusinessCentersRepeatingGroup() NoPaymentStreamCompoundingDatesBusinessCentersRepeatingGroup {
	return NoPaymentStreamCompoundingDatesBusinessCentersRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoPaymentStreamCompoundingDatesBusinessCenters,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.PaymentStreamCompoundingDatesBusinessCenter),
			},
		),
	}
}

// Add create and append a new NoPaymentStreamCompoundingDatesBusinessCenters to this group.
func (m NoPaymentStreamCompoundingDatesBusinessCentersRepeatingGroup) Add() NoPaymentStreamCompoundingDatesBusinessCenters {
	g := m.RepeatingGroup.Add()
	return NoPaymentStreamCompoundingDatesBusinessCenters{g}
}

// Get returns the ith NoPaymentStreamCompoundingDatesBusinessCenters in the NoPaymentStreamCompoundingDatesBusinessCentersRepeatinGroup.
func (m NoPaymentStreamCompoundingDatesBusinessCentersRepeatingGroup) Get(i int) NoPaymentStreamCompoundingDatesBusinessCenters {
	return NoPaymentStreamCompoundingDatesBusinessCenters{m.RepeatingGroup.Get(i)}
}

// NoPaymentStreamCompoundingDates is a repeating group element, Tag 42606.
type NoPaymentStreamCompoundingDates struct {
	*quickfix.Group
}

// SetPaymentStreamCompoundingDate sets PaymentStreamCompoundingDate, Tag 42607.
func (m NoPaymentStreamCompoundingDates) SetPaymentStreamCompoundingDate(v string) {
	m.Set(field.NewPaymentStreamCompoundingDate(v))
}

// SetPaymentStreamCompoundingDateType sets PaymentStreamCompoundingDateType, Tag 42608.
func (m NoPaymentStreamCompoundingDates) SetPaymentStreamCompoundingDateType(v int) {
	m.Set(field.NewPaymentStreamCompoundingDateType(v))
}

// GetPaymentStreamCompoundingDate gets PaymentStreamCompoundingDate, Tag 42607.
func (m NoPaymentStreamCompoundingDates) GetPaymentStreamCompoundingDate() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStreamCompoundingDateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamCompoundingDateType gets PaymentStreamCompoundingDateType, Tag 42608.
func (m NoPaymentStreamCompoundingDates) GetPaymentStreamCompoundingDateType() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStreamCompoundingDateTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasPaymentStreamCompoundingDate returns true if PaymentStreamCompoundingDate is present, Tag 42607.
func (m NoPaymentStreamCompoundingDates) HasPaymentStreamCompoundingDate() bool {
	return m.Has(tag.PaymentStreamCompoundingDate)
}

// HasPaymentStreamCompoundingDateType returns true if PaymentStreamCompoundingDateType is present, Tag 42608.
func (m NoPaymentStreamCompoundingDates) HasPaymentStreamCompoundingDateType() bool {
	return m.Has(tag.PaymentStreamCompoundingDateType)
}

// NoPaymentStreamCompoundingDatesRepeatingGroup is a repeating group, Tag 42606.
type NoPaymentStreamCompoundingDatesRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoPaymentStreamCompoundingDatesRepeatingGroup returns an initialized, NoPaymentStreamCompoundingDatesRepeatingGroup.
func NewNoPaymentStreamCompoundingDatesRepeatingGroup() NoPaymentStreamCompoundingDatesRepeatingGroup {
	return NoPaymentStreamCompoundingDatesRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoPaymentStreamCompoundingDates,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.PaymentStreamCompoundingDate),
				quickfix.GroupElement(tag.PaymentStreamCompoundingDateType),
			},
		),
	}
}

// Add create and append a new NoPaymentStreamCompoundingDates to this group.
func (m NoPaymentStreamCompoundingDatesRepeatingGroup) Add() NoPaymentStreamCompoundingDates {
	g := m.RepeatingGroup.Add()
	return NoPaymentStreamCompoundingDates{g}
}

// Get returns the ith NoPaymentStreamCompoundingDates in the NoPaymentStreamCompoundingDatesRepeatinGroup.
func (m NoPaymentStreamCompoundingDatesRepeatingGroup) Get(i int) NoPaymentStreamCompoundingDates {
	return NoPaymentStreamCompoundingDates{m.RepeatingGroup.Get(i)}
}

// NoPaymentSchedules is a repeating group element, Tag 40828.
type NoPaymentSchedules struct {
	*quickfix.Group
}

// SetPaymentScheduleType sets PaymentScheduleType, Tag 40829.
func (m NoPaymentSchedules) SetPaymentScheduleType(v enum.PaymentScheduleType) {
	m.Set(field.NewPaymentScheduleType(v))
}

// SetPaymentScheduleStubType sets PaymentScheduleStubType, Tag 40830.
func (m NoPaymentSchedules) SetPaymentScheduleStubType(v int) {
	m.Set(field.NewPaymentScheduleStubType(v))
}

// SetPaymentScheduleStartDateUnadjusted sets PaymentScheduleStartDateUnadjusted, Tag 40831.
func (m NoPaymentSchedules) SetPaymentScheduleStartDateUnadjusted(v string) {
	m.Set(field.NewPaymentScheduleStartDateUnadjusted(v))
}

// SetPaymentScheduleEndDateUnadjusted sets PaymentScheduleEndDateUnadjusted, Tag 40832.
func (m NoPaymentSchedules) SetPaymentScheduleEndDateUnadjusted(v string) {
	m.Set(field.NewPaymentScheduleEndDateUnadjusted(v))
}

// SetPaymentSchedulePaySide sets PaymentSchedulePaySide, Tag 40833.
func (m NoPaymentSchedules) SetPaymentSchedulePaySide(v int) {
	m.Set(field.NewPaymentSchedulePaySide(v))
}

// SetPaymentScheduleReceiveSide sets PaymentScheduleReceiveSide, Tag 40834.
func (m NoPaymentSchedules) SetPaymentScheduleReceiveSide(v int) {
	m.Set(field.NewPaymentScheduleReceiveSide(v))
}

// SetPaymentScheduleNotional sets PaymentScheduleNotional, Tag 40835.
func (m NoPaymentSchedules) SetPaymentScheduleNotional(value decimal.Decimal, scale int32) {
	m.Set(field.NewPaymentScheduleNotional(value, scale))
}

// SetPaymentScheduleCurrency sets PaymentScheduleCurrency, Tag 40836.
func (m NoPaymentSchedules) SetPaymentScheduleCurrency(v string) {
	m.Set(field.NewPaymentScheduleCurrency(v))
}

// SetPaymentScheduleRate sets PaymentScheduleRate, Tag 40837.
func (m NoPaymentSchedules) SetPaymentScheduleRate(value decimal.Decimal, scale int32) {
	m.Set(field.NewPaymentScheduleRate(value, scale))
}

// SetPaymentScheduleRateMultiplier sets PaymentScheduleRateMultiplier, Tag 40838.
func (m NoPaymentSchedules) SetPaymentScheduleRateMultiplier(value decimal.Decimal, scale int32) {
	m.Set(field.NewPaymentScheduleRateMultiplier(value, scale))
}

// SetPaymentScheduleRateSpread sets PaymentScheduleRateSpread, Tag 40839.
func (m NoPaymentSchedules) SetPaymentScheduleRateSpread(value decimal.Decimal, scale int32) {
	m.Set(field.NewPaymentScheduleRateSpread(value, scale))
}

// SetPaymentScheduleRateSpreadPositionType sets PaymentScheduleRateSpreadPositionType, Tag 40840.
func (m NoPaymentSchedules) SetPaymentScheduleRateSpreadPositionType(v int) {
	m.Set(field.NewPaymentScheduleRateSpreadPositionType(v))
}

// SetPaymentScheduleRateTreatment sets PaymentScheduleRateTreatment, Tag 40841.
func (m NoPaymentSchedules) SetPaymentScheduleRateTreatment(v int) {
	m.Set(field.NewPaymentScheduleRateTreatment(v))
}

// SetPaymentScheduleFixedAmount sets PaymentScheduleFixedAmount, Tag 40842.
func (m NoPaymentSchedules) SetPaymentScheduleFixedAmount(value decimal.Decimal, scale int32) {
	m.Set(field.NewPaymentScheduleFixedAmount(value, scale))
}

// SetPaymentScheduleFixedCurrency sets PaymentScheduleFixedCurrency, Tag 40843.
func (m NoPaymentSchedules) SetPaymentScheduleFixedCurrency(v string) {
	m.Set(field.NewPaymentScheduleFixedCurrency(v))
}

// SetPaymentScheduleStepFrequencyPeriod sets PaymentScheduleStepFrequencyPeriod, Tag 40844.
func (m NoPaymentSchedules) SetPaymentScheduleStepFrequencyPeriod(v int) {
	m.Set(field.NewPaymentScheduleStepFrequencyPeriod(v))
}

// SetPaymentScheduleStepFrequencyUnit sets PaymentScheduleStepFrequencyUnit, Tag 40845.
func (m NoPaymentSchedules) SetPaymentScheduleStepFrequencyUnit(v string) {
	m.Set(field.NewPaymentScheduleStepFrequencyUnit(v))
}

// SetPaymentScheduleStepOffsetValue sets PaymentScheduleStepOffsetValue, Tag 40846.
func (m NoPaymentSchedules) SetPaymentScheduleStepOffsetValue(value decimal.Decimal, scale int32) {
	m.Set(field.NewPaymentScheduleStepOffsetValue(value, scale))
}

// SetPaymentScheduleStepRate sets PaymentScheduleStepRate, Tag 40847.
func (m NoPaymentSchedules) SetPaymentScheduleStepRate(value decimal.Decimal, scale int32) {
	m.Set(field.NewPaymentScheduleStepRate(value, scale))
}

// SetPaymentScheduleStepOffsetRate sets PaymentScheduleStepOffsetRate, Tag 40848.
func (m NoPaymentSchedules) SetPaymentScheduleStepOffsetRate(value decimal.Decimal, scale int32) {
	m.Set(field.NewPaymentScheduleStepOffsetRate(value, scale))
}

// SetPaymentScheduleStepRelativeTo sets PaymentScheduleStepRelativeTo, Tag 40849.
func (m NoPaymentSchedules) SetPaymentScheduleStepRelativeTo(v enum.PaymentScheduleStepRelativeTo) {
	m.Set(field.NewPaymentScheduleStepRelativeTo(v))
}

// SetNoPaymentScheduleRateSources sets NoPaymentScheduleRateSources, Tag 40868.
func (m NoPaymentSchedules) SetNoPaymentScheduleRateSources(f NoPaymentScheduleRateSourcesRepeatingGroup) {
	m.SetGroup(f)
}

// SetPaymentScheduleFixingDateUnadjusted sets PaymentScheduleFixingDateUnadjusted, Tag 40850.
func (m NoPaymentSchedules) SetPaymentScheduleFixingDateUnadjusted(v string) {
	m.Set(field.NewPaymentScheduleFixingDateUnadjusted(v))
}

// SetPaymentScheduleWeight sets PaymentScheduleWeight, Tag 40851.
func (m NoPaymentSchedules) SetPaymentScheduleWeight(value decimal.Decimal, scale int32) {
	m.Set(field.NewPaymentScheduleWeight(value, scale))
}

// SetPaymentScheduleFixingDateRelativeTo sets PaymentScheduleFixingDateRelativeTo, Tag 40852.
func (m NoPaymentSchedules) SetPaymentScheduleFixingDateRelativeTo(v int) {
	m.Set(field.NewPaymentScheduleFixingDateRelativeTo(v))
}

// SetPaymentScheduleFixingDateBusinessDayConvention sets PaymentScheduleFixingDateBusinessDayConvention, Tag 40853.
func (m NoPaymentSchedules) SetPaymentScheduleFixingDateBusinessDayConvention(v int) {
	m.Set(field.NewPaymentScheduleFixingDateBusinessDayConvention(v))
}

// SetNoPaymentScheduleFixingDateBusinessCenters sets NoPaymentScheduleFixingDateBusinessCenters, Tag 40977.
func (m NoPaymentSchedules) SetNoPaymentScheduleFixingDateBusinessCenters(f NoPaymentScheduleFixingDateBusinessCentersRepeatingGroup) {
	m.SetGroup(f)
}

// SetPaymentScheduleFixingDateOffsetPeriod sets PaymentScheduleFixingDateOffsetPeriod, Tag 40855.
func (m NoPaymentSchedules) SetPaymentScheduleFixingDateOffsetPeriod(v int) {
	m.Set(field.NewPaymentScheduleFixingDateOffsetPeriod(v))
}

// SetPaymentScheduleFixingDateOffsetUnit sets PaymentScheduleFixingDateOffsetUnit, Tag 40856.
func (m NoPaymentSchedules) SetPaymentScheduleFixingDateOffsetUnit(v string) {
	m.Set(field.NewPaymentScheduleFixingDateOffsetUnit(v))
}

// SetPaymentScheduleFixingDateOffsetDayType sets PaymentScheduleFixingDateOffsetDayType, Tag 40857.
func (m NoPaymentSchedules) SetPaymentScheduleFixingDateOffsetDayType(v int) {
	m.Set(field.NewPaymentScheduleFixingDateOffsetDayType(v))
}

// SetPaymentScheduleFixingDateAdjusted sets PaymentScheduleFixingDateAdjusted, Tag 40858.
func (m NoPaymentSchedules) SetPaymentScheduleFixingDateAdjusted(v string) {
	m.Set(field.NewPaymentScheduleFixingDateAdjusted(v))
}

// SetPaymentScheduleFixingTime sets PaymentScheduleFixingTime, Tag 40859.
func (m NoPaymentSchedules) SetPaymentScheduleFixingTime(v string) {
	m.Set(field.NewPaymentScheduleFixingTime(v))
}

// SetPaymentScheduleFixingTimeBusinessCenter sets PaymentScheduleFixingTimeBusinessCenter, Tag 40860.
func (m NoPaymentSchedules) SetPaymentScheduleFixingTimeBusinessCenter(v string) {
	m.Set(field.NewPaymentScheduleFixingTimeBusinessCenter(v))
}

// SetPaymentScheduleInterimExchangePaymentDateRelativeTo sets PaymentScheduleInterimExchangePaymentDateRelativeTo, Tag 40861.
func (m NoPaymentSchedules) SetPaymentScheduleInterimExchangePaymentDateRelativeTo(v int) {
	m.Set(field.NewPaymentScheduleInterimExchangePaymentDateRelativeTo(v))
}

// SetPaymentScheduleInterimExchangeDatesBusinessDayConvention sets PaymentScheduleInterimExchangeDatesBusinessDayConvention, Tag 40862.
func (m NoPaymentSchedules) SetPaymentScheduleInterimExchangeDatesBusinessDayConvention(v int) {
	m.Set(field.NewPaymentScheduleInterimExchangeDatesBusinessDayConvention(v))
}

// SetNoPaymentScheduleInterimExchangeDateBusinessCenters sets NoPaymentScheduleInterimExchangeDateBusinessCenters, Tag 40945.
func (m NoPaymentSchedules) SetNoPaymentScheduleInterimExchangeDateBusinessCenters(f NoPaymentScheduleInterimExchangeDateBusinessCentersRepeatingGroup) {
	m.SetGroup(f)
}

// SetPaymentScheduleInterimExchangeDatesOffsetPeriod sets PaymentScheduleInterimExchangeDatesOffsetPeriod, Tag 40864.
func (m NoPaymentSchedules) SetPaymentScheduleInterimExchangeDatesOffsetPeriod(v int) {
	m.Set(field.NewPaymentScheduleInterimExchangeDatesOffsetPeriod(v))
}

// SetPaymentScheduleInterimExchangeDatesOffsetUnit sets PaymentScheduleInterimExchangeDatesOffsetUnit, Tag 40865.
func (m NoPaymentSchedules) SetPaymentScheduleInterimExchangeDatesOffsetUnit(v string) {
	m.Set(field.NewPaymentScheduleInterimExchangeDatesOffsetUnit(v))
}

// SetPaymentScheduleInterimExchangeDatesOffsetDayType sets PaymentScheduleInterimExchangeDatesOffsetDayType, Tag 40866.
func (m NoPaymentSchedules) SetPaymentScheduleInterimExchangeDatesOffsetDayType(v int) {
	m.Set(field.NewPaymentScheduleInterimExchangeDatesOffsetDayType(v))
}

// SetPaymentScheduleInterimExchangeDateAdjusted sets PaymentScheduleInterimExchangeDateAdjusted, Tag 40867.
func (m NoPaymentSchedules) SetPaymentScheduleInterimExchangeDateAdjusted(v string) {
	m.Set(field.NewPaymentScheduleInterimExchangeDateAdjusted(v))
}

// SetPaymentScheduleXID sets PaymentScheduleXID, Tag 41164.
func (m NoPaymentSchedules) SetPaymentScheduleXID(v string) {
	m.Set(field.NewPaymentScheduleXID(v))
}

// SetPaymentScheduleXIDRef sets PaymentScheduleXIDRef, Tag 41165.
func (m NoPaymentSchedules) SetPaymentScheduleXIDRef(v string) {
	m.Set(field.NewPaymentScheduleXIDRef(v))
}

// SetPaymentScheduleRateCurrency sets PaymentScheduleRateCurrency, Tag 41166.
func (m NoPaymentSchedules) SetPaymentScheduleRateCurrency(v string) {
	m.Set(field.NewPaymentScheduleRateCurrency(v))
}

// SetPaymentScheduleRateUnitOfMeasure sets PaymentScheduleRateUnitOfMeasure, Tag 41167.
func (m NoPaymentSchedules) SetPaymentScheduleRateUnitOfMeasure(v string) {
	m.Set(field.NewPaymentScheduleRateUnitOfMeasure(v))
}

// SetPaymentScheduleRateConversionFactor sets PaymentScheduleRateConversionFactor, Tag 41168.
func (m NoPaymentSchedules) SetPaymentScheduleRateConversionFactor(value decimal.Decimal, scale int32) {
	m.Set(field.NewPaymentScheduleRateConversionFactor(value, scale))
}

// SetPaymentScheduleRateSpreadType sets PaymentScheduleRateSpreadType, Tag 41169.
func (m NoPaymentSchedules) SetPaymentScheduleRateSpreadType(v int) {
	m.Set(field.NewPaymentScheduleRateSpreadType(v))
}

// SetPaymentScheduleSettlPeriodPrice sets PaymentScheduleSettlPeriodPrice, Tag 41170.
func (m NoPaymentSchedules) SetPaymentScheduleSettlPeriodPrice(value decimal.Decimal, scale int32) {
	m.Set(field.NewPaymentScheduleSettlPeriodPrice(value, scale))
}

// SetPaymentScheduleSettlPeriodPriceCurrency sets PaymentScheduleSettlPeriodPriceCurrency, Tag 41171.
func (m NoPaymentSchedules) SetPaymentScheduleSettlPeriodPriceCurrency(v string) {
	m.Set(field.NewPaymentScheduleSettlPeriodPriceCurrency(v))
}

// SetPaymentScheduleSettlPeriodPriceUnitOfMeasure sets PaymentScheduleSettlPeriodPriceUnitOfMeasure, Tag 41172.
func (m NoPaymentSchedules) SetPaymentScheduleSettlPeriodPriceUnitOfMeasure(v string) {
	m.Set(field.NewPaymentScheduleSettlPeriodPriceUnitOfMeasure(v))
}

// SetPaymentScheduleStepUnitOfMeasure sets PaymentScheduleStepUnitOfMeasure, Tag 41173.
func (m NoPaymentSchedules) SetPaymentScheduleStepUnitOfMeasure(v string) {
	m.Set(field.NewPaymentScheduleStepUnitOfMeasure(v))
}

// SetPaymentScheduleFixingDayDistribution sets PaymentScheduleFixingDayDistribution, Tag 41174.
func (m NoPaymentSchedules) SetPaymentScheduleFixingDayDistribution(v int) {
	m.Set(field.NewPaymentScheduleFixingDayDistribution(v))
}

// SetPaymentScheduleFixingDayCount sets PaymentScheduleFixingDayCount, Tag 41175.
func (m NoPaymentSchedules) SetPaymentScheduleFixingDayCount(v int) {
	m.Set(field.NewPaymentScheduleFixingDayCount(v))
}

// SetNoPaymentScheduleFixingDays sets NoPaymentScheduleFixingDays, Tag 41161.
func (m NoPaymentSchedules) SetNoPaymentScheduleFixingDays(f NoPaymentScheduleFixingDaysRepeatingGroup) {
	m.SetGroup(f)
}

// SetPaymentScheduleFixingLagPeriod sets PaymentScheduleFixingLagPeriod, Tag 41176.
func (m NoPaymentSchedules) SetPaymentScheduleFixingLagPeriod(v int) {
	m.Set(field.NewPaymentScheduleFixingLagPeriod(v))
}

// SetPaymentScheduleFixingLagUnit sets PaymentScheduleFixingLagUnit, Tag 41177.
func (m NoPaymentSchedules) SetPaymentScheduleFixingLagUnit(v string) {
	m.Set(field.NewPaymentScheduleFixingLagUnit(v))
}

// SetPaymentScheduleFixingFirstObservationDateOffsetPeriod sets PaymentScheduleFixingFirstObservationDateOffsetPeriod, Tag 41178.
func (m NoPaymentSchedules) SetPaymentScheduleFixingFirstObservationDateOffsetPeriod(v int) {
	m.Set(field.NewPaymentScheduleFixingFirstObservationDateOffsetPeriod(v))
}

// SetPaymentScheduleFixingFirstObservationDateOffsetUnit sets PaymentScheduleFixingFirstObservationDateOffsetUnit, Tag 41179.
func (m NoPaymentSchedules) SetPaymentScheduleFixingFirstObservationDateOffsetUnit(v string) {
	m.Set(field.NewPaymentScheduleFixingFirstObservationDateOffsetUnit(v))
}

// GetPaymentScheduleType gets PaymentScheduleType, Tag 40829.
func (m NoPaymentSchedules) GetPaymentScheduleType() (v enum.PaymentScheduleType, err quickfix.MessageRejectError) {
	var f field.PaymentScheduleTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentScheduleStubType gets PaymentScheduleStubType, Tag 40830.
func (m NoPaymentSchedules) GetPaymentScheduleStubType() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentScheduleStubTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentScheduleStartDateUnadjusted gets PaymentScheduleStartDateUnadjusted, Tag 40831.
func (m NoPaymentSchedules) GetPaymentScheduleStartDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentScheduleStartDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentScheduleEndDateUnadjusted gets PaymentScheduleEndDateUnadjusted, Tag 40832.
func (m NoPaymentSchedules) GetPaymentScheduleEndDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentScheduleEndDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentSchedulePaySide gets PaymentSchedulePaySide, Tag 40833.
func (m NoPaymentSchedules) GetPaymentSchedulePaySide() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentSchedulePaySideField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentScheduleReceiveSide gets PaymentScheduleReceiveSide, Tag 40834.
func (m NoPaymentSchedules) GetPaymentScheduleReceiveSide() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentScheduleReceiveSideField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentScheduleNotional gets PaymentScheduleNotional, Tag 40835.
func (m NoPaymentSchedules) GetPaymentScheduleNotional() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.PaymentScheduleNotionalField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentScheduleCurrency gets PaymentScheduleCurrency, Tag 40836.
func (m NoPaymentSchedules) GetPaymentScheduleCurrency() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentScheduleCurrencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentScheduleRate gets PaymentScheduleRate, Tag 40837.
func (m NoPaymentSchedules) GetPaymentScheduleRate() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.PaymentScheduleRateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentScheduleRateMultiplier gets PaymentScheduleRateMultiplier, Tag 40838.
func (m NoPaymentSchedules) GetPaymentScheduleRateMultiplier() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.PaymentScheduleRateMultiplierField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentScheduleRateSpread gets PaymentScheduleRateSpread, Tag 40839.
func (m NoPaymentSchedules) GetPaymentScheduleRateSpread() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.PaymentScheduleRateSpreadField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentScheduleRateSpreadPositionType gets PaymentScheduleRateSpreadPositionType, Tag 40840.
func (m NoPaymentSchedules) GetPaymentScheduleRateSpreadPositionType() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentScheduleRateSpreadPositionTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentScheduleRateTreatment gets PaymentScheduleRateTreatment, Tag 40841.
func (m NoPaymentSchedules) GetPaymentScheduleRateTreatment() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentScheduleRateTreatmentField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentScheduleFixedAmount gets PaymentScheduleFixedAmount, Tag 40842.
func (m NoPaymentSchedules) GetPaymentScheduleFixedAmount() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.PaymentScheduleFixedAmountField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentScheduleFixedCurrency gets PaymentScheduleFixedCurrency, Tag 40843.
func (m NoPaymentSchedules) GetPaymentScheduleFixedCurrency() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentScheduleFixedCurrencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentScheduleStepFrequencyPeriod gets PaymentScheduleStepFrequencyPeriod, Tag 40844.
func (m NoPaymentSchedules) GetPaymentScheduleStepFrequencyPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentScheduleStepFrequencyPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentScheduleStepFrequencyUnit gets PaymentScheduleStepFrequencyUnit, Tag 40845.
func (m NoPaymentSchedules) GetPaymentScheduleStepFrequencyUnit() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentScheduleStepFrequencyUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentScheduleStepOffsetValue gets PaymentScheduleStepOffsetValue, Tag 40846.
func (m NoPaymentSchedules) GetPaymentScheduleStepOffsetValue() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.PaymentScheduleStepOffsetValueField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentScheduleStepRate gets PaymentScheduleStepRate, Tag 40847.
func (m NoPaymentSchedules) GetPaymentScheduleStepRate() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.PaymentScheduleStepRateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentScheduleStepOffsetRate gets PaymentScheduleStepOffsetRate, Tag 40848.
func (m NoPaymentSchedules) GetPaymentScheduleStepOffsetRate() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.PaymentScheduleStepOffsetRateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentScheduleStepRelativeTo gets PaymentScheduleStepRelativeTo, Tag 40849.
func (m NoPaymentSchedules) GetPaymentScheduleStepRelativeTo() (v enum.PaymentScheduleStepRelativeTo, err quickfix.MessageRejectError) {
	var f field.PaymentScheduleStepRelativeToField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoPaymentScheduleRateSources gets NoPaymentScheduleRateSources, Tag 40868.
func (m NoPaymentSchedules) GetNoPaymentScheduleRateSources() (NoPaymentScheduleRateSourcesRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoPaymentScheduleRateSourcesRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetPaymentScheduleFixingDateUnadjusted gets PaymentScheduleFixingDateUnadjusted, Tag 40850.
func (m NoPaymentSchedules) GetPaymentScheduleFixingDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentScheduleFixingDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentScheduleWeight gets PaymentScheduleWeight, Tag 40851.
func (m NoPaymentSchedules) GetPaymentScheduleWeight() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.PaymentScheduleWeightField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentScheduleFixingDateRelativeTo gets PaymentScheduleFixingDateRelativeTo, Tag 40852.
func (m NoPaymentSchedules) GetPaymentScheduleFixingDateRelativeTo() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentScheduleFixingDateRelativeToField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentScheduleFixingDateBusinessDayConvention gets PaymentScheduleFixingDateBusinessDayConvention, Tag 40853.
func (m NoPaymentSchedules) GetPaymentScheduleFixingDateBusinessDayConvention() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentScheduleFixingDateBusinessDayConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoPaymentScheduleFixingDateBusinessCenters gets NoPaymentScheduleFixingDateBusinessCenters, Tag 40977.
func (m NoPaymentSchedules) GetNoPaymentScheduleFixingDateBusinessCenters() (NoPaymentScheduleFixingDateBusinessCentersRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoPaymentScheduleFixingDateBusinessCentersRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetPaymentScheduleFixingDateOffsetPeriod gets PaymentScheduleFixingDateOffsetPeriod, Tag 40855.
func (m NoPaymentSchedules) GetPaymentScheduleFixingDateOffsetPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentScheduleFixingDateOffsetPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentScheduleFixingDateOffsetUnit gets PaymentScheduleFixingDateOffsetUnit, Tag 40856.
func (m NoPaymentSchedules) GetPaymentScheduleFixingDateOffsetUnit() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentScheduleFixingDateOffsetUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentScheduleFixingDateOffsetDayType gets PaymentScheduleFixingDateOffsetDayType, Tag 40857.
func (m NoPaymentSchedules) GetPaymentScheduleFixingDateOffsetDayType() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentScheduleFixingDateOffsetDayTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentScheduleFixingDateAdjusted gets PaymentScheduleFixingDateAdjusted, Tag 40858.
func (m NoPaymentSchedules) GetPaymentScheduleFixingDateAdjusted() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentScheduleFixingDateAdjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentScheduleFixingTime gets PaymentScheduleFixingTime, Tag 40859.
func (m NoPaymentSchedules) GetPaymentScheduleFixingTime() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentScheduleFixingTimeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentScheduleFixingTimeBusinessCenter gets PaymentScheduleFixingTimeBusinessCenter, Tag 40860.
func (m NoPaymentSchedules) GetPaymentScheduleFixingTimeBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentScheduleFixingTimeBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentScheduleInterimExchangePaymentDateRelativeTo gets PaymentScheduleInterimExchangePaymentDateRelativeTo, Tag 40861.
func (m NoPaymentSchedules) GetPaymentScheduleInterimExchangePaymentDateRelativeTo() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentScheduleInterimExchangePaymentDateRelativeToField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentScheduleInterimExchangeDatesBusinessDayConvention gets PaymentScheduleInterimExchangeDatesBusinessDayConvention, Tag 40862.
func (m NoPaymentSchedules) GetPaymentScheduleInterimExchangeDatesBusinessDayConvention() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentScheduleInterimExchangeDatesBusinessDayConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoPaymentScheduleInterimExchangeDateBusinessCenters gets NoPaymentScheduleInterimExchangeDateBusinessCenters, Tag 40945.
func (m NoPaymentSchedules) GetNoPaymentScheduleInterimExchangeDateBusinessCenters() (NoPaymentScheduleInterimExchangeDateBusinessCentersRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoPaymentScheduleInterimExchangeDateBusinessCentersRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetPaymentScheduleInterimExchangeDatesOffsetPeriod gets PaymentScheduleInterimExchangeDatesOffsetPeriod, Tag 40864.
func (m NoPaymentSchedules) GetPaymentScheduleInterimExchangeDatesOffsetPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentScheduleInterimExchangeDatesOffsetPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentScheduleInterimExchangeDatesOffsetUnit gets PaymentScheduleInterimExchangeDatesOffsetUnit, Tag 40865.
func (m NoPaymentSchedules) GetPaymentScheduleInterimExchangeDatesOffsetUnit() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentScheduleInterimExchangeDatesOffsetUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentScheduleInterimExchangeDatesOffsetDayType gets PaymentScheduleInterimExchangeDatesOffsetDayType, Tag 40866.
func (m NoPaymentSchedules) GetPaymentScheduleInterimExchangeDatesOffsetDayType() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentScheduleInterimExchangeDatesOffsetDayTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentScheduleInterimExchangeDateAdjusted gets PaymentScheduleInterimExchangeDateAdjusted, Tag 40867.
func (m NoPaymentSchedules) GetPaymentScheduleInterimExchangeDateAdjusted() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentScheduleInterimExchangeDateAdjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentScheduleXID gets PaymentScheduleXID, Tag 41164.
func (m NoPaymentSchedules) GetPaymentScheduleXID() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentScheduleXIDField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentScheduleXIDRef gets PaymentScheduleXIDRef, Tag 41165.
func (m NoPaymentSchedules) GetPaymentScheduleXIDRef() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentScheduleXIDRefField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentScheduleRateCurrency gets PaymentScheduleRateCurrency, Tag 41166.
func (m NoPaymentSchedules) GetPaymentScheduleRateCurrency() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentScheduleRateCurrencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentScheduleRateUnitOfMeasure gets PaymentScheduleRateUnitOfMeasure, Tag 41167.
func (m NoPaymentSchedules) GetPaymentScheduleRateUnitOfMeasure() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentScheduleRateUnitOfMeasureField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentScheduleRateConversionFactor gets PaymentScheduleRateConversionFactor, Tag 41168.
func (m NoPaymentSchedules) GetPaymentScheduleRateConversionFactor() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.PaymentScheduleRateConversionFactorField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentScheduleRateSpreadType gets PaymentScheduleRateSpreadType, Tag 41169.
func (m NoPaymentSchedules) GetPaymentScheduleRateSpreadType() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentScheduleRateSpreadTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentScheduleSettlPeriodPrice gets PaymentScheduleSettlPeriodPrice, Tag 41170.
func (m NoPaymentSchedules) GetPaymentScheduleSettlPeriodPrice() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.PaymentScheduleSettlPeriodPriceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentScheduleSettlPeriodPriceCurrency gets PaymentScheduleSettlPeriodPriceCurrency, Tag 41171.
func (m NoPaymentSchedules) GetPaymentScheduleSettlPeriodPriceCurrency() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentScheduleSettlPeriodPriceCurrencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentScheduleSettlPeriodPriceUnitOfMeasure gets PaymentScheduleSettlPeriodPriceUnitOfMeasure, Tag 41172.
func (m NoPaymentSchedules) GetPaymentScheduleSettlPeriodPriceUnitOfMeasure() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentScheduleSettlPeriodPriceUnitOfMeasureField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentScheduleStepUnitOfMeasure gets PaymentScheduleStepUnitOfMeasure, Tag 41173.
func (m NoPaymentSchedules) GetPaymentScheduleStepUnitOfMeasure() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentScheduleStepUnitOfMeasureField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentScheduleFixingDayDistribution gets PaymentScheduleFixingDayDistribution, Tag 41174.
func (m NoPaymentSchedules) GetPaymentScheduleFixingDayDistribution() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentScheduleFixingDayDistributionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentScheduleFixingDayCount gets PaymentScheduleFixingDayCount, Tag 41175.
func (m NoPaymentSchedules) GetPaymentScheduleFixingDayCount() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentScheduleFixingDayCountField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoPaymentScheduleFixingDays gets NoPaymentScheduleFixingDays, Tag 41161.
func (m NoPaymentSchedules) GetNoPaymentScheduleFixingDays() (NoPaymentScheduleFixingDaysRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoPaymentScheduleFixingDaysRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetPaymentScheduleFixingLagPeriod gets PaymentScheduleFixingLagPeriod, Tag 41176.
func (m NoPaymentSchedules) GetPaymentScheduleFixingLagPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentScheduleFixingLagPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentScheduleFixingLagUnit gets PaymentScheduleFixingLagUnit, Tag 41177.
func (m NoPaymentSchedules) GetPaymentScheduleFixingLagUnit() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentScheduleFixingLagUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentScheduleFixingFirstObservationDateOffsetPeriod gets PaymentScheduleFixingFirstObservationDateOffsetPeriod, Tag 41178.
func (m NoPaymentSchedules) GetPaymentScheduleFixingFirstObservationDateOffsetPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentScheduleFixingFirstObservationDateOffsetPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentScheduleFixingFirstObservationDateOffsetUnit gets PaymentScheduleFixingFirstObservationDateOffsetUnit, Tag 41179.
func (m NoPaymentSchedules) GetPaymentScheduleFixingFirstObservationDateOffsetUnit() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentScheduleFixingFirstObservationDateOffsetUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasPaymentScheduleType returns true if PaymentScheduleType is present, Tag 40829.
func (m NoPaymentSchedules) HasPaymentScheduleType() bool {
	return m.Has(tag.PaymentScheduleType)
}

// HasPaymentScheduleStubType returns true if PaymentScheduleStubType is present, Tag 40830.
func (m NoPaymentSchedules) HasPaymentScheduleStubType() bool {
	return m.Has(tag.PaymentScheduleStubType)
}

// HasPaymentScheduleStartDateUnadjusted returns true if PaymentScheduleStartDateUnadjusted is present, Tag 40831.
func (m NoPaymentSchedules) HasPaymentScheduleStartDateUnadjusted() bool {
	return m.Has(tag.PaymentScheduleStartDateUnadjusted)
}

// HasPaymentScheduleEndDateUnadjusted returns true if PaymentScheduleEndDateUnadjusted is present, Tag 40832.
func (m NoPaymentSchedules) HasPaymentScheduleEndDateUnadjusted() bool {
	return m.Has(tag.PaymentScheduleEndDateUnadjusted)
}

// HasPaymentSchedulePaySide returns true if PaymentSchedulePaySide is present, Tag 40833.
func (m NoPaymentSchedules) HasPaymentSchedulePaySide() bool {
	return m.Has(tag.PaymentSchedulePaySide)
}

// HasPaymentScheduleReceiveSide returns true if PaymentScheduleReceiveSide is present, Tag 40834.
func (m NoPaymentSchedules) HasPaymentScheduleReceiveSide() bool {
	return m.Has(tag.PaymentScheduleReceiveSide)
}

// HasPaymentScheduleNotional returns true if PaymentScheduleNotional is present, Tag 40835.
func (m NoPaymentSchedules) HasPaymentScheduleNotional() bool {
	return m.Has(tag.PaymentScheduleNotional)
}

// HasPaymentScheduleCurrency returns true if PaymentScheduleCurrency is present, Tag 40836.
func (m NoPaymentSchedules) HasPaymentScheduleCurrency() bool {
	return m.Has(tag.PaymentScheduleCurrency)
}

// HasPaymentScheduleRate returns true if PaymentScheduleRate is present, Tag 40837.
func (m NoPaymentSchedules) HasPaymentScheduleRate() bool {
	return m.Has(tag.PaymentScheduleRate)
}

// HasPaymentScheduleRateMultiplier returns true if PaymentScheduleRateMultiplier is present, Tag 40838.
func (m NoPaymentSchedules) HasPaymentScheduleRateMultiplier() bool {
	return m.Has(tag.PaymentScheduleRateMultiplier)
}

// HasPaymentScheduleRateSpread returns true if PaymentScheduleRateSpread is present, Tag 40839.
func (m NoPaymentSchedules) HasPaymentScheduleRateSpread() bool {
	return m.Has(tag.PaymentScheduleRateSpread)
}

// HasPaymentScheduleRateSpreadPositionType returns true if PaymentScheduleRateSpreadPositionType is present, Tag 40840.
func (m NoPaymentSchedules) HasPaymentScheduleRateSpreadPositionType() bool {
	return m.Has(tag.PaymentScheduleRateSpreadPositionType)
}

// HasPaymentScheduleRateTreatment returns true if PaymentScheduleRateTreatment is present, Tag 40841.
func (m NoPaymentSchedules) HasPaymentScheduleRateTreatment() bool {
	return m.Has(tag.PaymentScheduleRateTreatment)
}

// HasPaymentScheduleFixedAmount returns true if PaymentScheduleFixedAmount is present, Tag 40842.
func (m NoPaymentSchedules) HasPaymentScheduleFixedAmount() bool {
	return m.Has(tag.PaymentScheduleFixedAmount)
}

// HasPaymentScheduleFixedCurrency returns true if PaymentScheduleFixedCurrency is present, Tag 40843.
func (m NoPaymentSchedules) HasPaymentScheduleFixedCurrency() bool {
	return m.Has(tag.PaymentScheduleFixedCurrency)
}

// HasPaymentScheduleStepFrequencyPeriod returns true if PaymentScheduleStepFrequencyPeriod is present, Tag 40844.
func (m NoPaymentSchedules) HasPaymentScheduleStepFrequencyPeriod() bool {
	return m.Has(tag.PaymentScheduleStepFrequencyPeriod)
}

// HasPaymentScheduleStepFrequencyUnit returns true if PaymentScheduleStepFrequencyUnit is present, Tag 40845.
func (m NoPaymentSchedules) HasPaymentScheduleStepFrequencyUnit() bool {
	return m.Has(tag.PaymentScheduleStepFrequencyUnit)
}

// HasPaymentScheduleStepOffsetValue returns true if PaymentScheduleStepOffsetValue is present, Tag 40846.
func (m NoPaymentSchedules) HasPaymentScheduleStepOffsetValue() bool {
	return m.Has(tag.PaymentScheduleStepOffsetValue)
}

// HasPaymentScheduleStepRate returns true if PaymentScheduleStepRate is present, Tag 40847.
func (m NoPaymentSchedules) HasPaymentScheduleStepRate() bool {
	return m.Has(tag.PaymentScheduleStepRate)
}

// HasPaymentScheduleStepOffsetRate returns true if PaymentScheduleStepOffsetRate is present, Tag 40848.
func (m NoPaymentSchedules) HasPaymentScheduleStepOffsetRate() bool {
	return m.Has(tag.PaymentScheduleStepOffsetRate)
}

// HasPaymentScheduleStepRelativeTo returns true if PaymentScheduleStepRelativeTo is present, Tag 40849.
func (m NoPaymentSchedules) HasPaymentScheduleStepRelativeTo() bool {
	return m.Has(tag.PaymentScheduleStepRelativeTo)
}

// HasNoPaymentScheduleRateSources returns true if NoPaymentScheduleRateSources is present, Tag 40868.
func (m NoPaymentSchedules) HasNoPaymentScheduleRateSources() bool {
	return m.Has(tag.NoPaymentScheduleRateSources)
}

// HasPaymentScheduleFixingDateUnadjusted returns true if PaymentScheduleFixingDateUnadjusted is present, Tag 40850.
func (m NoPaymentSchedules) HasPaymentScheduleFixingDateUnadjusted() bool {
	return m.Has(tag.PaymentScheduleFixingDateUnadjusted)
}

// HasPaymentScheduleWeight returns true if PaymentScheduleWeight is present, Tag 40851.
func (m NoPaymentSchedules) HasPaymentScheduleWeight() bool {
	return m.Has(tag.PaymentScheduleWeight)
}

// HasPaymentScheduleFixingDateRelativeTo returns true if PaymentScheduleFixingDateRelativeTo is present, Tag 40852.
func (m NoPaymentSchedules) HasPaymentScheduleFixingDateRelativeTo() bool {
	return m.Has(tag.PaymentScheduleFixingDateRelativeTo)
}

// HasPaymentScheduleFixingDateBusinessDayConvention returns true if PaymentScheduleFixingDateBusinessDayConvention is present, Tag 40853.
func (m NoPaymentSchedules) HasPaymentScheduleFixingDateBusinessDayConvention() bool {
	return m.Has(tag.PaymentScheduleFixingDateBusinessDayConvention)
}

// HasNoPaymentScheduleFixingDateBusinessCenters returns true if NoPaymentScheduleFixingDateBusinessCenters is present, Tag 40977.
func (m NoPaymentSchedules) HasNoPaymentScheduleFixingDateBusinessCenters() bool {
	return m.Has(tag.NoPaymentScheduleFixingDateBusinessCenters)
}

// HasPaymentScheduleFixingDateOffsetPeriod returns true if PaymentScheduleFixingDateOffsetPeriod is present, Tag 40855.
func (m NoPaymentSchedules) HasPaymentScheduleFixingDateOffsetPeriod() bool {
	return m.Has(tag.PaymentScheduleFixingDateOffsetPeriod)
}

// HasPaymentScheduleFixingDateOffsetUnit returns true if PaymentScheduleFixingDateOffsetUnit is present, Tag 40856.
func (m NoPaymentSchedules) HasPaymentScheduleFixingDateOffsetUnit() bool {
	return m.Has(tag.PaymentScheduleFixingDateOffsetUnit)
}

// HasPaymentScheduleFixingDateOffsetDayType returns true if PaymentScheduleFixingDateOffsetDayType is present, Tag 40857.
func (m NoPaymentSchedules) HasPaymentScheduleFixingDateOffsetDayType() bool {
	return m.Has(tag.PaymentScheduleFixingDateOffsetDayType)
}

// HasPaymentScheduleFixingDateAdjusted returns true if PaymentScheduleFixingDateAdjusted is present, Tag 40858.
func (m NoPaymentSchedules) HasPaymentScheduleFixingDateAdjusted() bool {
	return m.Has(tag.PaymentScheduleFixingDateAdjusted)
}

// HasPaymentScheduleFixingTime returns true if PaymentScheduleFixingTime is present, Tag 40859.
func (m NoPaymentSchedules) HasPaymentScheduleFixingTime() bool {
	return m.Has(tag.PaymentScheduleFixingTime)
}

// HasPaymentScheduleFixingTimeBusinessCenter returns true if PaymentScheduleFixingTimeBusinessCenter is present, Tag 40860.
func (m NoPaymentSchedules) HasPaymentScheduleFixingTimeBusinessCenter() bool {
	return m.Has(tag.PaymentScheduleFixingTimeBusinessCenter)
}

// HasPaymentScheduleInterimExchangePaymentDateRelativeTo returns true if PaymentScheduleInterimExchangePaymentDateRelativeTo is present, Tag 40861.
func (m NoPaymentSchedules) HasPaymentScheduleInterimExchangePaymentDateRelativeTo() bool {
	return m.Has(tag.PaymentScheduleInterimExchangePaymentDateRelativeTo)
}

// HasPaymentScheduleInterimExchangeDatesBusinessDayConvention returns true if PaymentScheduleInterimExchangeDatesBusinessDayConvention is present, Tag 40862.
func (m NoPaymentSchedules) HasPaymentScheduleInterimExchangeDatesBusinessDayConvention() bool {
	return m.Has(tag.PaymentScheduleInterimExchangeDatesBusinessDayConvention)
}

// HasNoPaymentScheduleInterimExchangeDateBusinessCenters returns true if NoPaymentScheduleInterimExchangeDateBusinessCenters is present, Tag 40945.
func (m NoPaymentSchedules) HasNoPaymentScheduleInterimExchangeDateBusinessCenters() bool {
	return m.Has(tag.NoPaymentScheduleInterimExchangeDateBusinessCenters)
}

// HasPaymentScheduleInterimExchangeDatesOffsetPeriod returns true if PaymentScheduleInterimExchangeDatesOffsetPeriod is present, Tag 40864.
func (m NoPaymentSchedules) HasPaymentScheduleInterimExchangeDatesOffsetPeriod() bool {
	return m.Has(tag.PaymentScheduleInterimExchangeDatesOffsetPeriod)
}

// HasPaymentScheduleInterimExchangeDatesOffsetUnit returns true if PaymentScheduleInterimExchangeDatesOffsetUnit is present, Tag 40865.
func (m NoPaymentSchedules) HasPaymentScheduleInterimExchangeDatesOffsetUnit() bool {
	return m.Has(tag.PaymentScheduleInterimExchangeDatesOffsetUnit)
}

// HasPaymentScheduleInterimExchangeDatesOffsetDayType returns true if PaymentScheduleInterimExchangeDatesOffsetDayType is present, Tag 40866.
func (m NoPaymentSchedules) HasPaymentScheduleInterimExchangeDatesOffsetDayType() bool {
	return m.Has(tag.PaymentScheduleInterimExchangeDatesOffsetDayType)
}

// HasPaymentScheduleInterimExchangeDateAdjusted returns true if PaymentScheduleInterimExchangeDateAdjusted is present, Tag 40867.
func (m NoPaymentSchedules) HasPaymentScheduleInterimExchangeDateAdjusted() bool {
	return m.Has(tag.PaymentScheduleInterimExchangeDateAdjusted)
}

// HasPaymentScheduleXID returns true if PaymentScheduleXID is present, Tag 41164.
func (m NoPaymentSchedules) HasPaymentScheduleXID() bool {
	return m.Has(tag.PaymentScheduleXID)
}

// HasPaymentScheduleXIDRef returns true if PaymentScheduleXIDRef is present, Tag 41165.
func (m NoPaymentSchedules) HasPaymentScheduleXIDRef() bool {
	return m.Has(tag.PaymentScheduleXIDRef)
}

// HasPaymentScheduleRateCurrency returns true if PaymentScheduleRateCurrency is present, Tag 41166.
func (m NoPaymentSchedules) HasPaymentScheduleRateCurrency() bool {
	return m.Has(tag.PaymentScheduleRateCurrency)
}

// HasPaymentScheduleRateUnitOfMeasure returns true if PaymentScheduleRateUnitOfMeasure is present, Tag 41167.
func (m NoPaymentSchedules) HasPaymentScheduleRateUnitOfMeasure() bool {
	return m.Has(tag.PaymentScheduleRateUnitOfMeasure)
}

// HasPaymentScheduleRateConversionFactor returns true if PaymentScheduleRateConversionFactor is present, Tag 41168.
func (m NoPaymentSchedules) HasPaymentScheduleRateConversionFactor() bool {
	return m.Has(tag.PaymentScheduleRateConversionFactor)
}

// HasPaymentScheduleRateSpreadType returns true if PaymentScheduleRateSpreadType is present, Tag 41169.
func (m NoPaymentSchedules) HasPaymentScheduleRateSpreadType() bool {
	return m.Has(tag.PaymentScheduleRateSpreadType)
}

// HasPaymentScheduleSettlPeriodPrice returns true if PaymentScheduleSettlPeriodPrice is present, Tag 41170.
func (m NoPaymentSchedules) HasPaymentScheduleSettlPeriodPrice() bool {
	return m.Has(tag.PaymentScheduleSettlPeriodPrice)
}

// HasPaymentScheduleSettlPeriodPriceCurrency returns true if PaymentScheduleSettlPeriodPriceCurrency is present, Tag 41171.
func (m NoPaymentSchedules) HasPaymentScheduleSettlPeriodPriceCurrency() bool {
	return m.Has(tag.PaymentScheduleSettlPeriodPriceCurrency)
}

// HasPaymentScheduleSettlPeriodPriceUnitOfMeasure returns true if PaymentScheduleSettlPeriodPriceUnitOfMeasure is present, Tag 41172.
func (m NoPaymentSchedules) HasPaymentScheduleSettlPeriodPriceUnitOfMeasure() bool {
	return m.Has(tag.PaymentScheduleSettlPeriodPriceUnitOfMeasure)
}

// HasPaymentScheduleStepUnitOfMeasure returns true if PaymentScheduleStepUnitOfMeasure is present, Tag 41173.
func (m NoPaymentSchedules) HasPaymentScheduleStepUnitOfMeasure() bool {
	return m.Has(tag.PaymentScheduleStepUnitOfMeasure)
}

// HasPaymentScheduleFixingDayDistribution returns true if PaymentScheduleFixingDayDistribution is present, Tag 41174.
func (m NoPaymentSchedules) HasPaymentScheduleFixingDayDistribution() bool {
	return m.Has(tag.PaymentScheduleFixingDayDistribution)
}

// HasPaymentScheduleFixingDayCount returns true if PaymentScheduleFixingDayCount is present, Tag 41175.
func (m NoPaymentSchedules) HasPaymentScheduleFixingDayCount() bool {
	return m.Has(tag.PaymentScheduleFixingDayCount)
}

// HasNoPaymentScheduleFixingDays returns true if NoPaymentScheduleFixingDays is present, Tag 41161.
func (m NoPaymentSchedules) HasNoPaymentScheduleFixingDays() bool {
	return m.Has(tag.NoPaymentScheduleFixingDays)
}

// HasPaymentScheduleFixingLagPeriod returns true if PaymentScheduleFixingLagPeriod is present, Tag 41176.
func (m NoPaymentSchedules) HasPaymentScheduleFixingLagPeriod() bool {
	return m.Has(tag.PaymentScheduleFixingLagPeriod)
}

// HasPaymentScheduleFixingLagUnit returns true if PaymentScheduleFixingLagUnit is present, Tag 41177.
func (m NoPaymentSchedules) HasPaymentScheduleFixingLagUnit() bool {
	return m.Has(tag.PaymentScheduleFixingLagUnit)
}

// HasPaymentScheduleFixingFirstObservationDateOffsetPeriod returns true if PaymentScheduleFixingFirstObservationDateOffsetPeriod is present, Tag 41178.
func (m NoPaymentSchedules) HasPaymentScheduleFixingFirstObservationDateOffsetPeriod() bool {
	return m.Has(tag.PaymentScheduleFixingFirstObservationDateOffsetPeriod)
}

// HasPaymentScheduleFixingFirstObservationDateOffsetUnit returns true if PaymentScheduleFixingFirstObservationDateOffsetUnit is present, Tag 41179.
func (m NoPaymentSchedules) HasPaymentScheduleFixingFirstObservationDateOffsetUnit() bool {
	return m.Has(tag.PaymentScheduleFixingFirstObservationDateOffsetUnit)
}

// NoPaymentScheduleRateSources is a repeating group element, Tag 40868.
type NoPaymentScheduleRateSources struct {
	*quickfix.Group
}

// SetPaymentScheduleRateSource sets PaymentScheduleRateSource, Tag 40869.
func (m NoPaymentScheduleRateSources) SetPaymentScheduleRateSource(v int) {
	m.Set(field.NewPaymentScheduleRateSource(v))
}

// SetPaymentScheduleRateSourceType sets PaymentScheduleRateSourceType, Tag 40870.
func (m NoPaymentScheduleRateSources) SetPaymentScheduleRateSourceType(v int) {
	m.Set(field.NewPaymentScheduleRateSourceType(v))
}

// SetPaymentScheduleReferencePage sets PaymentScheduleReferencePage, Tag 40871.
func (m NoPaymentScheduleRateSources) SetPaymentScheduleReferencePage(v string) {
	m.Set(field.NewPaymentScheduleReferencePage(v))
}

// GetPaymentScheduleRateSource gets PaymentScheduleRateSource, Tag 40869.
func (m NoPaymentScheduleRateSources) GetPaymentScheduleRateSource() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentScheduleRateSourceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentScheduleRateSourceType gets PaymentScheduleRateSourceType, Tag 40870.
func (m NoPaymentScheduleRateSources) GetPaymentScheduleRateSourceType() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentScheduleRateSourceTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentScheduleReferencePage gets PaymentScheduleReferencePage, Tag 40871.
func (m NoPaymentScheduleRateSources) GetPaymentScheduleReferencePage() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentScheduleReferencePageField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasPaymentScheduleRateSource returns true if PaymentScheduleRateSource is present, Tag 40869.
func (m NoPaymentScheduleRateSources) HasPaymentScheduleRateSource() bool {
	return m.Has(tag.PaymentScheduleRateSource)
}

// HasPaymentScheduleRateSourceType returns true if PaymentScheduleRateSourceType is present, Tag 40870.
func (m NoPaymentScheduleRateSources) HasPaymentScheduleRateSourceType() bool {
	return m.Has(tag.PaymentScheduleRateSourceType)
}

// HasPaymentScheduleReferencePage returns true if PaymentScheduleReferencePage is present, Tag 40871.
func (m NoPaymentScheduleRateSources) HasPaymentScheduleReferencePage() bool {
	return m.Has(tag.PaymentScheduleReferencePage)
}

// NoPaymentScheduleRateSourcesRepeatingGroup is a repeating group, Tag 40868.
type NoPaymentScheduleRateSourcesRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoPaymentScheduleRateSourcesRepeatingGroup returns an initialized, NoPaymentScheduleRateSourcesRepeatingGroup.
func NewNoPaymentScheduleRateSourcesRepeatingGroup() NoPaymentScheduleRateSourcesRepeatingGroup {
	return NoPaymentScheduleRateSourcesRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoPaymentScheduleRateSources,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.PaymentScheduleRateSource),
				quickfix.GroupElement(tag.PaymentScheduleRateSourceType),
				quickfix.GroupElement(tag.PaymentScheduleReferencePage),
			},
		),
	}
}

// Add create and append a new NoPaymentScheduleRateSources to this group.
func (m NoPaymentScheduleRateSourcesRepeatingGroup) Add() NoPaymentScheduleRateSources {
	g := m.RepeatingGroup.Add()
	return NoPaymentScheduleRateSources{g}
}

// Get returns the ith NoPaymentScheduleRateSources in the NoPaymentScheduleRateSourcesRepeatinGroup.
func (m NoPaymentScheduleRateSourcesRepeatingGroup) Get(i int) NoPaymentScheduleRateSources {
	return NoPaymentScheduleRateSources{m.RepeatingGroup.Get(i)}
}

// NoPaymentScheduleFixingDateBusinessCenters is a repeating group element, Tag 40977.
type NoPaymentScheduleFixingDateBusinessCenters struct {
	*quickfix.Group
}

// SetPaymentScheduleFixingDateBusinessCenter sets PaymentScheduleFixingDateBusinessCenter, Tag 40854.
func (m NoPaymentScheduleFixingDateBusinessCenters) SetPaymentScheduleFixingDateBusinessCenter(v string) {
	m.Set(field.NewPaymentScheduleFixingDateBusinessCenter(v))
}

// GetPaymentScheduleFixingDateBusinessCenter gets PaymentScheduleFixingDateBusinessCenter, Tag 40854.
func (m NoPaymentScheduleFixingDateBusinessCenters) GetPaymentScheduleFixingDateBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentScheduleFixingDateBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasPaymentScheduleFixingDateBusinessCenter returns true if PaymentScheduleFixingDateBusinessCenter is present, Tag 40854.
func (m NoPaymentScheduleFixingDateBusinessCenters) HasPaymentScheduleFixingDateBusinessCenter() bool {
	return m.Has(tag.PaymentScheduleFixingDateBusinessCenter)
}

// NoPaymentScheduleFixingDateBusinessCentersRepeatingGroup is a repeating group, Tag 40977.
type NoPaymentScheduleFixingDateBusinessCentersRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoPaymentScheduleFixingDateBusinessCentersRepeatingGroup returns an initialized, NoPaymentScheduleFixingDateBusinessCentersRepeatingGroup.
func NewNoPaymentScheduleFixingDateBusinessCentersRepeatingGroup() NoPaymentScheduleFixingDateBusinessCentersRepeatingGroup {
	return NoPaymentScheduleFixingDateBusinessCentersRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoPaymentScheduleFixingDateBusinessCenters,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.PaymentScheduleFixingDateBusinessCenter),
			},
		),
	}
}

// Add create and append a new NoPaymentScheduleFixingDateBusinessCenters to this group.
func (m NoPaymentScheduleFixingDateBusinessCentersRepeatingGroup) Add() NoPaymentScheduleFixingDateBusinessCenters {
	g := m.RepeatingGroup.Add()
	return NoPaymentScheduleFixingDateBusinessCenters{g}
}

// Get returns the ith NoPaymentScheduleFixingDateBusinessCenters in the NoPaymentScheduleFixingDateBusinessCentersRepeatinGroup.
func (m NoPaymentScheduleFixingDateBusinessCentersRepeatingGroup) Get(i int) NoPaymentScheduleFixingDateBusinessCenters {
	return NoPaymentScheduleFixingDateBusinessCenters{m.RepeatingGroup.Get(i)}
}

// NoPaymentScheduleInterimExchangeDateBusinessCenters is a repeating group element, Tag 40945.
type NoPaymentScheduleInterimExchangeDateBusinessCenters struct {
	*quickfix.Group
}

// SetPaymentScheduleInterimExchangeDatesBusinessCenter sets PaymentScheduleInterimExchangeDatesBusinessCenter, Tag 40863.
func (m NoPaymentScheduleInterimExchangeDateBusinessCenters) SetPaymentScheduleInterimExchangeDatesBusinessCenter(v string) {
	m.Set(field.NewPaymentScheduleInterimExchangeDatesBusinessCenter(v))
}

// GetPaymentScheduleInterimExchangeDatesBusinessCenter gets PaymentScheduleInterimExchangeDatesBusinessCenter, Tag 40863.
func (m NoPaymentScheduleInterimExchangeDateBusinessCenters) GetPaymentScheduleInterimExchangeDatesBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentScheduleInterimExchangeDatesBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasPaymentScheduleInterimExchangeDatesBusinessCenter returns true if PaymentScheduleInterimExchangeDatesBusinessCenter is present, Tag 40863.
func (m NoPaymentScheduleInterimExchangeDateBusinessCenters) HasPaymentScheduleInterimExchangeDatesBusinessCenter() bool {
	return m.Has(tag.PaymentScheduleInterimExchangeDatesBusinessCenter)
}

// NoPaymentScheduleInterimExchangeDateBusinessCentersRepeatingGroup is a repeating group, Tag 40945.
type NoPaymentScheduleInterimExchangeDateBusinessCentersRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoPaymentScheduleInterimExchangeDateBusinessCentersRepeatingGroup returns an initialized, NoPaymentScheduleInterimExchangeDateBusinessCentersRepeatingGroup.
func NewNoPaymentScheduleInterimExchangeDateBusinessCentersRepeatingGroup() NoPaymentScheduleInterimExchangeDateBusinessCentersRepeatingGroup {
	return NoPaymentScheduleInterimExchangeDateBusinessCentersRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoPaymentScheduleInterimExchangeDateBusinessCenters,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.PaymentScheduleInterimExchangeDatesBusinessCenter),
			},
		),
	}
}

// Add create and append a new NoPaymentScheduleInterimExchangeDateBusinessCenters to this group.
func (m NoPaymentScheduleInterimExchangeDateBusinessCentersRepeatingGroup) Add() NoPaymentScheduleInterimExchangeDateBusinessCenters {
	g := m.RepeatingGroup.Add()
	return NoPaymentScheduleInterimExchangeDateBusinessCenters{g}
}

// Get returns the ith NoPaymentScheduleInterimExchangeDateBusinessCenters in the NoPaymentScheduleInterimExchangeDateBusinessCentersRepeatinGroup.
func (m NoPaymentScheduleInterimExchangeDateBusinessCentersRepeatingGroup) Get(i int) NoPaymentScheduleInterimExchangeDateBusinessCenters {
	return NoPaymentScheduleInterimExchangeDateBusinessCenters{m.RepeatingGroup.Get(i)}
}

// NoPaymentScheduleFixingDays is a repeating group element, Tag 41161.
type NoPaymentScheduleFixingDays struct {
	*quickfix.Group
}

// SetPaymentScheduleFixingDayOfWeek sets PaymentScheduleFixingDayOfWeek, Tag 41162.
func (m NoPaymentScheduleFixingDays) SetPaymentScheduleFixingDayOfWeek(v int) {
	m.Set(field.NewPaymentScheduleFixingDayOfWeek(v))
}

// SetPaymentScheduleFixingDayNumber sets PaymentScheduleFixingDayNumber, Tag 41163.
func (m NoPaymentScheduleFixingDays) SetPaymentScheduleFixingDayNumber(v int) {
	m.Set(field.NewPaymentScheduleFixingDayNumber(v))
}

// GetPaymentScheduleFixingDayOfWeek gets PaymentScheduleFixingDayOfWeek, Tag 41162.
func (m NoPaymentScheduleFixingDays) GetPaymentScheduleFixingDayOfWeek() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentScheduleFixingDayOfWeekField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentScheduleFixingDayNumber gets PaymentScheduleFixingDayNumber, Tag 41163.
func (m NoPaymentScheduleFixingDays) GetPaymentScheduleFixingDayNumber() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentScheduleFixingDayNumberField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasPaymentScheduleFixingDayOfWeek returns true if PaymentScheduleFixingDayOfWeek is present, Tag 41162.
func (m NoPaymentScheduleFixingDays) HasPaymentScheduleFixingDayOfWeek() bool {
	return m.Has(tag.PaymentScheduleFixingDayOfWeek)
}

// HasPaymentScheduleFixingDayNumber returns true if PaymentScheduleFixingDayNumber is present, Tag 41163.
func (m NoPaymentScheduleFixingDays) HasPaymentScheduleFixingDayNumber() bool {
	return m.Has(tag.PaymentScheduleFixingDayNumber)
}

// NoPaymentScheduleFixingDaysRepeatingGroup is a repeating group, Tag 41161.
type NoPaymentScheduleFixingDaysRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoPaymentScheduleFixingDaysRepeatingGroup returns an initialized, NoPaymentScheduleFixingDaysRepeatingGroup.
func NewNoPaymentScheduleFixingDaysRepeatingGroup() NoPaymentScheduleFixingDaysRepeatingGroup {
	return NoPaymentScheduleFixingDaysRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoPaymentScheduleFixingDays,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.PaymentScheduleFixingDayOfWeek),
				quickfix.GroupElement(tag.PaymentScheduleFixingDayNumber),
			},
		),
	}
}

// Add create and append a new NoPaymentScheduleFixingDays to this group.
func (m NoPaymentScheduleFixingDaysRepeatingGroup) Add() NoPaymentScheduleFixingDays {
	g := m.RepeatingGroup.Add()
	return NoPaymentScheduleFixingDays{g}
}

// Get returns the ith NoPaymentScheduleFixingDays in the NoPaymentScheduleFixingDaysRepeatinGroup.
func (m NoPaymentScheduleFixingDaysRepeatingGroup) Get(i int) NoPaymentScheduleFixingDays {
	return NoPaymentScheduleFixingDays{m.RepeatingGroup.Get(i)}
}

// NoPaymentSchedulesRepeatingGroup is a repeating group, Tag 40828.
type NoPaymentSchedulesRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoPaymentSchedulesRepeatingGroup returns an initialized, NoPaymentSchedulesRepeatingGroup.
func NewNoPaymentSchedulesRepeatingGroup() NoPaymentSchedulesRepeatingGroup {
	return NoPaymentSchedulesRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoPaymentSchedules,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.PaymentScheduleType),
				quickfix.GroupElement(tag.PaymentScheduleStubType),
				quickfix.GroupElement(tag.PaymentScheduleStartDateUnadjusted),
				quickfix.GroupElement(tag.PaymentScheduleEndDateUnadjusted),
				quickfix.GroupElement(tag.PaymentSchedulePaySide),
				quickfix.GroupElement(tag.PaymentScheduleReceiveSide),
				quickfix.GroupElement(tag.PaymentScheduleNotional),
				quickfix.GroupElement(tag.PaymentScheduleCurrency),
				quickfix.GroupElement(tag.PaymentScheduleRate),
				quickfix.GroupElement(tag.PaymentScheduleRateMultiplier),
				quickfix.GroupElement(tag.PaymentScheduleRateSpread),
				quickfix.GroupElement(tag.PaymentScheduleRateSpreadPositionType),
				quickfix.GroupElement(tag.PaymentScheduleRateTreatment),
				quickfix.GroupElement(tag.PaymentScheduleFixedAmount),
				quickfix.GroupElement(tag.PaymentScheduleFixedCurrency),
				quickfix.GroupElement(tag.PaymentScheduleStepFrequencyPeriod),
				quickfix.GroupElement(tag.PaymentScheduleStepFrequencyUnit),
				quickfix.GroupElement(tag.PaymentScheduleStepOffsetValue),
				quickfix.GroupElement(tag.PaymentScheduleStepRate),
				quickfix.GroupElement(tag.PaymentScheduleStepOffsetRate),
				quickfix.GroupElement(tag.PaymentScheduleStepRelativeTo),
				NewNoPaymentScheduleRateSourcesRepeatingGroup(),
				quickfix.GroupElement(tag.PaymentScheduleFixingDateUnadjusted),
				quickfix.GroupElement(tag.PaymentScheduleWeight),
				quickfix.GroupElement(tag.PaymentScheduleFixingDateRelativeTo),
				quickfix.GroupElement(tag.PaymentScheduleFixingDateBusinessDayConvention),
				NewNoPaymentScheduleFixingDateBusinessCentersRepeatingGroup(),
				quickfix.GroupElement(tag.PaymentScheduleFixingDateOffsetPeriod),
				quickfix.GroupElement(tag.PaymentScheduleFixingDateOffsetUnit),
				quickfix.GroupElement(tag.PaymentScheduleFixingDateOffsetDayType),
				quickfix.GroupElement(tag.PaymentScheduleFixingDateAdjusted),
				quickfix.GroupElement(tag.PaymentScheduleFixingTime),
				quickfix.GroupElement(tag.PaymentScheduleFixingTimeBusinessCenter),
				quickfix.GroupElement(tag.PaymentScheduleInterimExchangePaymentDateRelativeTo),
				quickfix.GroupElement(tag.PaymentScheduleInterimExchangeDatesBusinessDayConvention),
				NewNoPaymentScheduleInterimExchangeDateBusinessCentersRepeatingGroup(),
				quickfix.GroupElement(tag.PaymentScheduleInterimExchangeDatesOffsetPeriod),
				quickfix.GroupElement(tag.PaymentScheduleInterimExchangeDatesOffsetUnit),
				quickfix.GroupElement(tag.PaymentScheduleInterimExchangeDatesOffsetDayType),
				quickfix.GroupElement(tag.PaymentScheduleInterimExchangeDateAdjusted),
				quickfix.GroupElement(tag.PaymentScheduleXID),
				quickfix.GroupElement(tag.PaymentScheduleXIDRef),
				quickfix.GroupElement(tag.PaymentScheduleRateCurrency),
				quickfix.GroupElement(tag.PaymentScheduleRateUnitOfMeasure),
				quickfix.GroupElement(tag.PaymentScheduleRateConversionFactor),
				quickfix.GroupElement(tag.PaymentScheduleRateSpreadType),
				quickfix.GroupElement(tag.PaymentScheduleSettlPeriodPrice),
				quickfix.GroupElement(tag.PaymentScheduleSettlPeriodPriceCurrency),
				quickfix.GroupElement(tag.PaymentScheduleSettlPeriodPriceUnitOfMeasure),
				quickfix.GroupElement(tag.PaymentScheduleStepUnitOfMeasure),
				quickfix.GroupElement(tag.PaymentScheduleFixingDayDistribution),
				quickfix.GroupElement(tag.PaymentScheduleFixingDayCount),
				NewNoPaymentScheduleFixingDaysRepeatingGroup(),
				quickfix.GroupElement(tag.PaymentScheduleFixingLagPeriod),
				quickfix.GroupElement(tag.PaymentScheduleFixingLagUnit),
				quickfix.GroupElement(tag.PaymentScheduleFixingFirstObservationDateOffsetPeriod),
				quickfix.GroupElement(tag.PaymentScheduleFixingFirstObservationDateOffsetUnit),
			},
		),
	}
}

// Add create and append a new NoPaymentSchedules to this group.
func (m NoPaymentSchedulesRepeatingGroup) Add() NoPaymentSchedules {
	g := m.RepeatingGroup.Add()
	return NoPaymentSchedules{g}
}

// Get returns the ith NoPaymentSchedules in the NoPaymentSchedulesRepeatinGroup.
func (m NoPaymentSchedulesRepeatingGroup) Get(i int) NoPaymentSchedules {
	return NoPaymentSchedules{m.RepeatingGroup.Get(i)}
}

// NoPaymentStubs is a repeating group element, Tag 40872.
type NoPaymentStubs struct {
	*quickfix.Group
}

// SetPaymentStubType sets PaymentStubType, Tag 40873.
func (m NoPaymentStubs) SetPaymentStubType(v enum.PaymentStubType) {
	m.Set(field.NewPaymentStubType(v))
}

// SetPaymentStubLength sets PaymentStubLength, Tag 40874.
func (m NoPaymentStubs) SetPaymentStubLength(v enum.PaymentStubLength) {
	m.Set(field.NewPaymentStubLength(v))
}

// SetPaymentStubRate sets PaymentStubRate, Tag 40875.
func (m NoPaymentStubs) SetPaymentStubRate(value decimal.Decimal, scale int32) {
	m.Set(field.NewPaymentStubRate(value, scale))
}

// SetPaymentStubFixedAmount sets PaymentStubFixedAmount, Tag 40876.
func (m NoPaymentStubs) SetPaymentStubFixedAmount(value decimal.Decimal, scale int32) {
	m.Set(field.NewPaymentStubFixedAmount(value, scale))
}

// SetPaymentStubFixedCurrency sets PaymentStubFixedCurrency, Tag 40877.
func (m NoPaymentStubs) SetPaymentStubFixedCurrency(v string) {
	m.Set(field.NewPaymentStubFixedCurrency(v))
}

// SetPaymentStubIndex sets PaymentStubIndex, Tag 40878.
func (m NoPaymentStubs) SetPaymentStubIndex(v string) {
	m.Set(field.NewPaymentStubIndex(v))
}

// SetPaymentStubIndexSource sets PaymentStubIndexSource, Tag 40879.
func (m NoPaymentStubs) SetPaymentStubIndexSource(v int) {
	m.Set(field.NewPaymentStubIndexSource(v))
}

// SetPaymentStubIndexCurvePeriod sets PaymentStubIndexCurvePeriod, Tag 40880.
func (m NoPaymentStubs) SetPaymentStubIndexCurvePeriod(v int) {
	m.Set(field.NewPaymentStubIndexCurvePeriod(v))
}

// SetPaymentStubIndexCurveUnit sets PaymentStubIndexCurveUnit, Tag 40881.
func (m NoPaymentStubs) SetPaymentStubIndexCurveUnit(v string) {
	m.Set(field.NewPaymentStubIndexCurveUnit(v))
}

// SetPaymentStubIndexRateMultiplier sets PaymentStubIndexRateMultiplier, Tag 40882.
func (m NoPaymentStubs) SetPaymentStubIndexRateMultiplier(value decimal.Decimal, scale int32) {
	m.Set(field.NewPaymentStubIndexRateMultiplier(value, scale))
}

// SetPaymentStubIndexRateSpread sets PaymentStubIndexRateSpread, Tag 40883.
func (m NoPaymentStubs) SetPaymentStubIndexRateSpread(value decimal.Decimal, scale int32) {
	m.Set(field.NewPaymentStubIndexRateSpread(value, scale))
}

// SetPaymentStubIndexRateSpreadPositionType sets PaymentStubIndexRateSpreadPositionType, Tag 40884.
func (m NoPaymentStubs) SetPaymentStubIndexRateSpreadPositionType(v int) {
	m.Set(field.NewPaymentStubIndexRateSpreadPositionType(v))
}

// SetPaymentStubIndexRateTreatment sets PaymentStubIndexRateTreatment, Tag 40885.
func (m NoPaymentStubs) SetPaymentStubIndexRateTreatment(v int) {
	m.Set(field.NewPaymentStubIndexRateTreatment(v))
}

// SetPaymentStubIndexCapRate sets PaymentStubIndexCapRate, Tag 40886.
func (m NoPaymentStubs) SetPaymentStubIndexCapRate(value decimal.Decimal, scale int32) {
	m.Set(field.NewPaymentStubIndexCapRate(value, scale))
}

// SetPaymentStubIndexCapRateBuySide sets PaymentStubIndexCapRateBuySide, Tag 40887.
func (m NoPaymentStubs) SetPaymentStubIndexCapRateBuySide(v int) {
	m.Set(field.NewPaymentStubIndexCapRateBuySide(v))
}

// SetPaymentStubIndexCapRateSellSide sets PaymentStubIndexCapRateSellSide, Tag 40888.
func (m NoPaymentStubs) SetPaymentStubIndexCapRateSellSide(v int) {
	m.Set(field.NewPaymentStubIndexCapRateSellSide(v))
}

// SetPaymentStubIndexFloorRate sets PaymentStubIndexFloorRate, Tag 40889.
func (m NoPaymentStubs) SetPaymentStubIndexFloorRate(value decimal.Decimal, scale int32) {
	m.Set(field.NewPaymentStubIndexFloorRate(value, scale))
}

// SetPaymentStubIndexFloorRateBuySide sets PaymentStubIndexFloorRateBuySide, Tag 40890.
func (m NoPaymentStubs) SetPaymentStubIndexFloorRateBuySide(v int) {
	m.Set(field.NewPaymentStubIndexFloorRateBuySide(v))
}

// SetPaymentStubIndexFloorRateSellSide sets PaymentStubIndexFloorRateSellSide, Tag 40891.
func (m NoPaymentStubs) SetPaymentStubIndexFloorRateSellSide(v int) {
	m.Set(field.NewPaymentStubIndexFloorRateSellSide(v))
}

// SetPaymentStubIndex2 sets PaymentStubIndex2, Tag 40892.
func (m NoPaymentStubs) SetPaymentStubIndex2(v string) {
	m.Set(field.NewPaymentStubIndex2(v))
}

// SetPaymentStubIndex2Source sets PaymentStubIndex2Source, Tag 40893.
func (m NoPaymentStubs) SetPaymentStubIndex2Source(v int) {
	m.Set(field.NewPaymentStubIndex2Source(v))
}

// SetPaymentStubIndex2CurvePeriod sets PaymentStubIndex2CurvePeriod, Tag 40894.
func (m NoPaymentStubs) SetPaymentStubIndex2CurvePeriod(v int) {
	m.Set(field.NewPaymentStubIndex2CurvePeriod(v))
}

// SetPaymentStubIndex2CurveUnit sets PaymentStubIndex2CurveUnit, Tag 40895.
func (m NoPaymentStubs) SetPaymentStubIndex2CurveUnit(v string) {
	m.Set(field.NewPaymentStubIndex2CurveUnit(v))
}

// SetPaymentStubIndex2RateMultiplier sets PaymentStubIndex2RateMultiplier, Tag 40896.
func (m NoPaymentStubs) SetPaymentStubIndex2RateMultiplier(value decimal.Decimal, scale int32) {
	m.Set(field.NewPaymentStubIndex2RateMultiplier(value, scale))
}

// SetPaymentStubIndex2RateSpread sets PaymentStubIndex2RateSpread, Tag 40897.
func (m NoPaymentStubs) SetPaymentStubIndex2RateSpread(value decimal.Decimal, scale int32) {
	m.Set(field.NewPaymentStubIndex2RateSpread(value, scale))
}

// SetPaymentStubIndex2RateSpreadPositionType sets PaymentStubIndex2RateSpreadPositionType, Tag 40898.
func (m NoPaymentStubs) SetPaymentStubIndex2RateSpreadPositionType(v int) {
	m.Set(field.NewPaymentStubIndex2RateSpreadPositionType(v))
}

// SetPaymentStubIndex2RateTreatment sets PaymentStubIndex2RateTreatment, Tag 40899.
func (m NoPaymentStubs) SetPaymentStubIndex2RateTreatment(v int) {
	m.Set(field.NewPaymentStubIndex2RateTreatment(v))
}

// SetPaymentStubIndex2CapRate sets PaymentStubIndex2CapRate, Tag 40900.
func (m NoPaymentStubs) SetPaymentStubIndex2CapRate(value decimal.Decimal, scale int32) {
	m.Set(field.NewPaymentStubIndex2CapRate(value, scale))
}

// SetPaymentStubIndex2FloorRate sets PaymentStubIndex2FloorRate, Tag 40901.
func (m NoPaymentStubs) SetPaymentStubIndex2FloorRate(value decimal.Decimal, scale int32) {
	m.Set(field.NewPaymentStubIndex2FloorRate(value, scale))
}

// SetPaymentStubStartDateUnadjusted sets PaymentStubStartDateUnadjusted, Tag 42698.
func (m NoPaymentStubs) SetPaymentStubStartDateUnadjusted(v string) {
	m.Set(field.NewPaymentStubStartDateUnadjusted(v))
}

// SetPaymentStubStartDateBusinessDayConvention sets PaymentStubStartDateBusinessDayConvention, Tag 42699.
func (m NoPaymentStubs) SetPaymentStubStartDateBusinessDayConvention(v int) {
	m.Set(field.NewPaymentStubStartDateBusinessDayConvention(v))
}

// SetNoPaymentStubStartDateBusinessCenters sets NoPaymentStubStartDateBusinessCenters, Tag 42705.
func (m NoPaymentStubs) SetNoPaymentStubStartDateBusinessCenters(f NoPaymentStubStartDateBusinessCentersRepeatingGroup) {
	m.SetGroup(f)
}

// SetPaymentStubStartDateRelativeTo sets PaymentStubStartDateRelativeTo, Tag 42700.
func (m NoPaymentStubs) SetPaymentStubStartDateRelativeTo(v int) {
	m.Set(field.NewPaymentStubStartDateRelativeTo(v))
}

// SetPaymentStubStartDateOffsetPeriod sets PaymentStubStartDateOffsetPeriod, Tag 42701.
func (m NoPaymentStubs) SetPaymentStubStartDateOffsetPeriod(v int) {
	m.Set(field.NewPaymentStubStartDateOffsetPeriod(v))
}

// SetPaymentStubStartDateOffsetUnit sets PaymentStubStartDateOffsetUnit, Tag 42702.
func (m NoPaymentStubs) SetPaymentStubStartDateOffsetUnit(v string) {
	m.Set(field.NewPaymentStubStartDateOffsetUnit(v))
}

// SetPaymentStubStartDateOffsetDayType sets PaymentStubStartDateOffsetDayType, Tag 42703.
func (m NoPaymentStubs) SetPaymentStubStartDateOffsetDayType(v int) {
	m.Set(field.NewPaymentStubStartDateOffsetDayType(v))
}

// SetPaymentStubStartDateAdjusted sets PaymentStubStartDateAdjusted, Tag 42704.
func (m NoPaymentStubs) SetPaymentStubStartDateAdjusted(v string) {
	m.Set(field.NewPaymentStubStartDateAdjusted(v))
}

// SetPaymentStubEndDateUnadjusted sets PaymentStubEndDateUnadjusted, Tag 42689.
func (m NoPaymentStubs) SetPaymentStubEndDateUnadjusted(v string) {
	m.Set(field.NewPaymentStubEndDateUnadjusted(v))
}

// SetPaymentStubEndDateBusinessDayConvention sets PaymentStubEndDateBusinessDayConvention, Tag 42690.
func (m NoPaymentStubs) SetPaymentStubEndDateBusinessDayConvention(v int) {
	m.Set(field.NewPaymentStubEndDateBusinessDayConvention(v))
}

// SetNoPaymentStubEndDateBusinessCenters sets NoPaymentStubEndDateBusinessCenters, Tag 42696.
func (m NoPaymentStubs) SetNoPaymentStubEndDateBusinessCenters(f NoPaymentStubEndDateBusinessCentersRepeatingGroup) {
	m.SetGroup(f)
}

// SetPaymentStubEndDateRelativeTo sets PaymentStubEndDateRelativeTo, Tag 42691.
func (m NoPaymentStubs) SetPaymentStubEndDateRelativeTo(v int) {
	m.Set(field.NewPaymentStubEndDateRelativeTo(v))
}

// SetPaymentStubEndDateOffsetPeriod sets PaymentStubEndDateOffsetPeriod, Tag 42692.
func (m NoPaymentStubs) SetPaymentStubEndDateOffsetPeriod(v int) {
	m.Set(field.NewPaymentStubEndDateOffsetPeriod(v))
}

// SetPaymentStubEndDateOffsetUnit sets PaymentStubEndDateOffsetUnit, Tag 42693.
func (m NoPaymentStubs) SetPaymentStubEndDateOffsetUnit(v string) {
	m.Set(field.NewPaymentStubEndDateOffsetUnit(v))
}

// SetPaymentStubEndDateOffsetDayType sets PaymentStubEndDateOffsetDayType, Tag 42694.
func (m NoPaymentStubs) SetPaymentStubEndDateOffsetDayType(v int) {
	m.Set(field.NewPaymentStubEndDateOffsetDayType(v))
}

// SetPaymentStubEndDateAdjusted sets PaymentStubEndDateAdjusted, Tag 42695.
func (m NoPaymentStubs) SetPaymentStubEndDateAdjusted(v string) {
	m.Set(field.NewPaymentStubEndDateAdjusted(v))
}

// GetPaymentStubType gets PaymentStubType, Tag 40873.
func (m NoPaymentStubs) GetPaymentStubType() (v enum.PaymentStubType, err quickfix.MessageRejectError) {
	var f field.PaymentStubTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStubLength gets PaymentStubLength, Tag 40874.
func (m NoPaymentStubs) GetPaymentStubLength() (v enum.PaymentStubLength, err quickfix.MessageRejectError) {
	var f field.PaymentStubLengthField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStubRate gets PaymentStubRate, Tag 40875.
func (m NoPaymentStubs) GetPaymentStubRate() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.PaymentStubRateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStubFixedAmount gets PaymentStubFixedAmount, Tag 40876.
func (m NoPaymentStubs) GetPaymentStubFixedAmount() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.PaymentStubFixedAmountField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStubFixedCurrency gets PaymentStubFixedCurrency, Tag 40877.
func (m NoPaymentStubs) GetPaymentStubFixedCurrency() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStubFixedCurrencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStubIndex gets PaymentStubIndex, Tag 40878.
func (m NoPaymentStubs) GetPaymentStubIndex() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStubIndexField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStubIndexSource gets PaymentStubIndexSource, Tag 40879.
func (m NoPaymentStubs) GetPaymentStubIndexSource() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStubIndexSourceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStubIndexCurvePeriod gets PaymentStubIndexCurvePeriod, Tag 40880.
func (m NoPaymentStubs) GetPaymentStubIndexCurvePeriod() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStubIndexCurvePeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStubIndexCurveUnit gets PaymentStubIndexCurveUnit, Tag 40881.
func (m NoPaymentStubs) GetPaymentStubIndexCurveUnit() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStubIndexCurveUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStubIndexRateMultiplier gets PaymentStubIndexRateMultiplier, Tag 40882.
func (m NoPaymentStubs) GetPaymentStubIndexRateMultiplier() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.PaymentStubIndexRateMultiplierField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStubIndexRateSpread gets PaymentStubIndexRateSpread, Tag 40883.
func (m NoPaymentStubs) GetPaymentStubIndexRateSpread() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.PaymentStubIndexRateSpreadField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStubIndexRateSpreadPositionType gets PaymentStubIndexRateSpreadPositionType, Tag 40884.
func (m NoPaymentStubs) GetPaymentStubIndexRateSpreadPositionType() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStubIndexRateSpreadPositionTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStubIndexRateTreatment gets PaymentStubIndexRateTreatment, Tag 40885.
func (m NoPaymentStubs) GetPaymentStubIndexRateTreatment() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStubIndexRateTreatmentField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStubIndexCapRate gets PaymentStubIndexCapRate, Tag 40886.
func (m NoPaymentStubs) GetPaymentStubIndexCapRate() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.PaymentStubIndexCapRateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStubIndexCapRateBuySide gets PaymentStubIndexCapRateBuySide, Tag 40887.
func (m NoPaymentStubs) GetPaymentStubIndexCapRateBuySide() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStubIndexCapRateBuySideField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStubIndexCapRateSellSide gets PaymentStubIndexCapRateSellSide, Tag 40888.
func (m NoPaymentStubs) GetPaymentStubIndexCapRateSellSide() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStubIndexCapRateSellSideField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStubIndexFloorRate gets PaymentStubIndexFloorRate, Tag 40889.
func (m NoPaymentStubs) GetPaymentStubIndexFloorRate() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.PaymentStubIndexFloorRateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStubIndexFloorRateBuySide gets PaymentStubIndexFloorRateBuySide, Tag 40890.
func (m NoPaymentStubs) GetPaymentStubIndexFloorRateBuySide() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStubIndexFloorRateBuySideField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStubIndexFloorRateSellSide gets PaymentStubIndexFloorRateSellSide, Tag 40891.
func (m NoPaymentStubs) GetPaymentStubIndexFloorRateSellSide() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStubIndexFloorRateSellSideField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStubIndex2 gets PaymentStubIndex2, Tag 40892.
func (m NoPaymentStubs) GetPaymentStubIndex2() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStubIndex2Field
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStubIndex2Source gets PaymentStubIndex2Source, Tag 40893.
func (m NoPaymentStubs) GetPaymentStubIndex2Source() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStubIndex2SourceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStubIndex2CurvePeriod gets PaymentStubIndex2CurvePeriod, Tag 40894.
func (m NoPaymentStubs) GetPaymentStubIndex2CurvePeriod() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStubIndex2CurvePeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStubIndex2CurveUnit gets PaymentStubIndex2CurveUnit, Tag 40895.
func (m NoPaymentStubs) GetPaymentStubIndex2CurveUnit() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStubIndex2CurveUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStubIndex2RateMultiplier gets PaymentStubIndex2RateMultiplier, Tag 40896.
func (m NoPaymentStubs) GetPaymentStubIndex2RateMultiplier() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.PaymentStubIndex2RateMultiplierField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStubIndex2RateSpread gets PaymentStubIndex2RateSpread, Tag 40897.
func (m NoPaymentStubs) GetPaymentStubIndex2RateSpread() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.PaymentStubIndex2RateSpreadField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStubIndex2RateSpreadPositionType gets PaymentStubIndex2RateSpreadPositionType, Tag 40898.
func (m NoPaymentStubs) GetPaymentStubIndex2RateSpreadPositionType() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStubIndex2RateSpreadPositionTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStubIndex2RateTreatment gets PaymentStubIndex2RateTreatment, Tag 40899.
func (m NoPaymentStubs) GetPaymentStubIndex2RateTreatment() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStubIndex2RateTreatmentField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStubIndex2CapRate gets PaymentStubIndex2CapRate, Tag 40900.
func (m NoPaymentStubs) GetPaymentStubIndex2CapRate() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.PaymentStubIndex2CapRateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStubIndex2FloorRate gets PaymentStubIndex2FloorRate, Tag 40901.
func (m NoPaymentStubs) GetPaymentStubIndex2FloorRate() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.PaymentStubIndex2FloorRateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStubStartDateUnadjusted gets PaymentStubStartDateUnadjusted, Tag 42698.
func (m NoPaymentStubs) GetPaymentStubStartDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStubStartDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStubStartDateBusinessDayConvention gets PaymentStubStartDateBusinessDayConvention, Tag 42699.
func (m NoPaymentStubs) GetPaymentStubStartDateBusinessDayConvention() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStubStartDateBusinessDayConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoPaymentStubStartDateBusinessCenters gets NoPaymentStubStartDateBusinessCenters, Tag 42705.
func (m NoPaymentStubs) GetNoPaymentStubStartDateBusinessCenters() (NoPaymentStubStartDateBusinessCentersRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoPaymentStubStartDateBusinessCentersRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetPaymentStubStartDateRelativeTo gets PaymentStubStartDateRelativeTo, Tag 42700.
func (m NoPaymentStubs) GetPaymentStubStartDateRelativeTo() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStubStartDateRelativeToField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStubStartDateOffsetPeriod gets PaymentStubStartDateOffsetPeriod, Tag 42701.
func (m NoPaymentStubs) GetPaymentStubStartDateOffsetPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStubStartDateOffsetPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStubStartDateOffsetUnit gets PaymentStubStartDateOffsetUnit, Tag 42702.
func (m NoPaymentStubs) GetPaymentStubStartDateOffsetUnit() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStubStartDateOffsetUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStubStartDateOffsetDayType gets PaymentStubStartDateOffsetDayType, Tag 42703.
func (m NoPaymentStubs) GetPaymentStubStartDateOffsetDayType() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStubStartDateOffsetDayTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStubStartDateAdjusted gets PaymentStubStartDateAdjusted, Tag 42704.
func (m NoPaymentStubs) GetPaymentStubStartDateAdjusted() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStubStartDateAdjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStubEndDateUnadjusted gets PaymentStubEndDateUnadjusted, Tag 42689.
func (m NoPaymentStubs) GetPaymentStubEndDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStubEndDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStubEndDateBusinessDayConvention gets PaymentStubEndDateBusinessDayConvention, Tag 42690.
func (m NoPaymentStubs) GetPaymentStubEndDateBusinessDayConvention() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStubEndDateBusinessDayConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoPaymentStubEndDateBusinessCenters gets NoPaymentStubEndDateBusinessCenters, Tag 42696.
func (m NoPaymentStubs) GetNoPaymentStubEndDateBusinessCenters() (NoPaymentStubEndDateBusinessCentersRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoPaymentStubEndDateBusinessCentersRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetPaymentStubEndDateRelativeTo gets PaymentStubEndDateRelativeTo, Tag 42691.
func (m NoPaymentStubs) GetPaymentStubEndDateRelativeTo() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStubEndDateRelativeToField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStubEndDateOffsetPeriod gets PaymentStubEndDateOffsetPeriod, Tag 42692.
func (m NoPaymentStubs) GetPaymentStubEndDateOffsetPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStubEndDateOffsetPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStubEndDateOffsetUnit gets PaymentStubEndDateOffsetUnit, Tag 42693.
func (m NoPaymentStubs) GetPaymentStubEndDateOffsetUnit() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStubEndDateOffsetUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStubEndDateOffsetDayType gets PaymentStubEndDateOffsetDayType, Tag 42694.
func (m NoPaymentStubs) GetPaymentStubEndDateOffsetDayType() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStubEndDateOffsetDayTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStubEndDateAdjusted gets PaymentStubEndDateAdjusted, Tag 42695.
func (m NoPaymentStubs) GetPaymentStubEndDateAdjusted() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStubEndDateAdjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasPaymentStubType returns true if PaymentStubType is present, Tag 40873.
func (m NoPaymentStubs) HasPaymentStubType() bool {
	return m.Has(tag.PaymentStubType)
}

// HasPaymentStubLength returns true if PaymentStubLength is present, Tag 40874.
func (m NoPaymentStubs) HasPaymentStubLength() bool {
	return m.Has(tag.PaymentStubLength)
}

// HasPaymentStubRate returns true if PaymentStubRate is present, Tag 40875.
func (m NoPaymentStubs) HasPaymentStubRate() bool {
	return m.Has(tag.PaymentStubRate)
}

// HasPaymentStubFixedAmount returns true if PaymentStubFixedAmount is present, Tag 40876.
func (m NoPaymentStubs) HasPaymentStubFixedAmount() bool {
	return m.Has(tag.PaymentStubFixedAmount)
}

// HasPaymentStubFixedCurrency returns true if PaymentStubFixedCurrency is present, Tag 40877.
func (m NoPaymentStubs) HasPaymentStubFixedCurrency() bool {
	return m.Has(tag.PaymentStubFixedCurrency)
}

// HasPaymentStubIndex returns true if PaymentStubIndex is present, Tag 40878.
func (m NoPaymentStubs) HasPaymentStubIndex() bool {
	return m.Has(tag.PaymentStubIndex)
}

// HasPaymentStubIndexSource returns true if PaymentStubIndexSource is present, Tag 40879.
func (m NoPaymentStubs) HasPaymentStubIndexSource() bool {
	return m.Has(tag.PaymentStubIndexSource)
}

// HasPaymentStubIndexCurvePeriod returns true if PaymentStubIndexCurvePeriod is present, Tag 40880.
func (m NoPaymentStubs) HasPaymentStubIndexCurvePeriod() bool {
	return m.Has(tag.PaymentStubIndexCurvePeriod)
}

// HasPaymentStubIndexCurveUnit returns true if PaymentStubIndexCurveUnit is present, Tag 40881.
func (m NoPaymentStubs) HasPaymentStubIndexCurveUnit() bool {
	return m.Has(tag.PaymentStubIndexCurveUnit)
}

// HasPaymentStubIndexRateMultiplier returns true if PaymentStubIndexRateMultiplier is present, Tag 40882.
func (m NoPaymentStubs) HasPaymentStubIndexRateMultiplier() bool {
	return m.Has(tag.PaymentStubIndexRateMultiplier)
}

// HasPaymentStubIndexRateSpread returns true if PaymentStubIndexRateSpread is present, Tag 40883.
func (m NoPaymentStubs) HasPaymentStubIndexRateSpread() bool {
	return m.Has(tag.PaymentStubIndexRateSpread)
}

// HasPaymentStubIndexRateSpreadPositionType returns true if PaymentStubIndexRateSpreadPositionType is present, Tag 40884.
func (m NoPaymentStubs) HasPaymentStubIndexRateSpreadPositionType() bool {
	return m.Has(tag.PaymentStubIndexRateSpreadPositionType)
}

// HasPaymentStubIndexRateTreatment returns true if PaymentStubIndexRateTreatment is present, Tag 40885.
func (m NoPaymentStubs) HasPaymentStubIndexRateTreatment() bool {
	return m.Has(tag.PaymentStubIndexRateTreatment)
}

// HasPaymentStubIndexCapRate returns true if PaymentStubIndexCapRate is present, Tag 40886.
func (m NoPaymentStubs) HasPaymentStubIndexCapRate() bool {
	return m.Has(tag.PaymentStubIndexCapRate)
}

// HasPaymentStubIndexCapRateBuySide returns true if PaymentStubIndexCapRateBuySide is present, Tag 40887.
func (m NoPaymentStubs) HasPaymentStubIndexCapRateBuySide() bool {
	return m.Has(tag.PaymentStubIndexCapRateBuySide)
}

// HasPaymentStubIndexCapRateSellSide returns true if PaymentStubIndexCapRateSellSide is present, Tag 40888.
func (m NoPaymentStubs) HasPaymentStubIndexCapRateSellSide() bool {
	return m.Has(tag.PaymentStubIndexCapRateSellSide)
}

// HasPaymentStubIndexFloorRate returns true if PaymentStubIndexFloorRate is present, Tag 40889.
func (m NoPaymentStubs) HasPaymentStubIndexFloorRate() bool {
	return m.Has(tag.PaymentStubIndexFloorRate)
}

// HasPaymentStubIndexFloorRateBuySide returns true if PaymentStubIndexFloorRateBuySide is present, Tag 40890.
func (m NoPaymentStubs) HasPaymentStubIndexFloorRateBuySide() bool {
	return m.Has(tag.PaymentStubIndexFloorRateBuySide)
}

// HasPaymentStubIndexFloorRateSellSide returns true if PaymentStubIndexFloorRateSellSide is present, Tag 40891.
func (m NoPaymentStubs) HasPaymentStubIndexFloorRateSellSide() bool {
	return m.Has(tag.PaymentStubIndexFloorRateSellSide)
}

// HasPaymentStubIndex2 returns true if PaymentStubIndex2 is present, Tag 40892.
func (m NoPaymentStubs) HasPaymentStubIndex2() bool {
	return m.Has(tag.PaymentStubIndex2)
}

// HasPaymentStubIndex2Source returns true if PaymentStubIndex2Source is present, Tag 40893.
func (m NoPaymentStubs) HasPaymentStubIndex2Source() bool {
	return m.Has(tag.PaymentStubIndex2Source)
}

// HasPaymentStubIndex2CurvePeriod returns true if PaymentStubIndex2CurvePeriod is present, Tag 40894.
func (m NoPaymentStubs) HasPaymentStubIndex2CurvePeriod() bool {
	return m.Has(tag.PaymentStubIndex2CurvePeriod)
}

// HasPaymentStubIndex2CurveUnit returns true if PaymentStubIndex2CurveUnit is present, Tag 40895.
func (m NoPaymentStubs) HasPaymentStubIndex2CurveUnit() bool {
	return m.Has(tag.PaymentStubIndex2CurveUnit)
}

// HasPaymentStubIndex2RateMultiplier returns true if PaymentStubIndex2RateMultiplier is present, Tag 40896.
func (m NoPaymentStubs) HasPaymentStubIndex2RateMultiplier() bool {
	return m.Has(tag.PaymentStubIndex2RateMultiplier)
}

// HasPaymentStubIndex2RateSpread returns true if PaymentStubIndex2RateSpread is present, Tag 40897.
func (m NoPaymentStubs) HasPaymentStubIndex2RateSpread() bool {
	return m.Has(tag.PaymentStubIndex2RateSpread)
}

// HasPaymentStubIndex2RateSpreadPositionType returns true if PaymentStubIndex2RateSpreadPositionType is present, Tag 40898.
func (m NoPaymentStubs) HasPaymentStubIndex2RateSpreadPositionType() bool {
	return m.Has(tag.PaymentStubIndex2RateSpreadPositionType)
}

// HasPaymentStubIndex2RateTreatment returns true if PaymentStubIndex2RateTreatment is present, Tag 40899.
func (m NoPaymentStubs) HasPaymentStubIndex2RateTreatment() bool {
	return m.Has(tag.PaymentStubIndex2RateTreatment)
}

// HasPaymentStubIndex2CapRate returns true if PaymentStubIndex2CapRate is present, Tag 40900.
func (m NoPaymentStubs) HasPaymentStubIndex2CapRate() bool {
	return m.Has(tag.PaymentStubIndex2CapRate)
}

// HasPaymentStubIndex2FloorRate returns true if PaymentStubIndex2FloorRate is present, Tag 40901.
func (m NoPaymentStubs) HasPaymentStubIndex2FloorRate() bool {
	return m.Has(tag.PaymentStubIndex2FloorRate)
}

// HasPaymentStubStartDateUnadjusted returns true if PaymentStubStartDateUnadjusted is present, Tag 42698.
func (m NoPaymentStubs) HasPaymentStubStartDateUnadjusted() bool {
	return m.Has(tag.PaymentStubStartDateUnadjusted)
}

// HasPaymentStubStartDateBusinessDayConvention returns true if PaymentStubStartDateBusinessDayConvention is present, Tag 42699.
func (m NoPaymentStubs) HasPaymentStubStartDateBusinessDayConvention() bool {
	return m.Has(tag.PaymentStubStartDateBusinessDayConvention)
}

// HasNoPaymentStubStartDateBusinessCenters returns true if NoPaymentStubStartDateBusinessCenters is present, Tag 42705.
func (m NoPaymentStubs) HasNoPaymentStubStartDateBusinessCenters() bool {
	return m.Has(tag.NoPaymentStubStartDateBusinessCenters)
}

// HasPaymentStubStartDateRelativeTo returns true if PaymentStubStartDateRelativeTo is present, Tag 42700.
func (m NoPaymentStubs) HasPaymentStubStartDateRelativeTo() bool {
	return m.Has(tag.PaymentStubStartDateRelativeTo)
}

// HasPaymentStubStartDateOffsetPeriod returns true if PaymentStubStartDateOffsetPeriod is present, Tag 42701.
func (m NoPaymentStubs) HasPaymentStubStartDateOffsetPeriod() bool {
	return m.Has(tag.PaymentStubStartDateOffsetPeriod)
}

// HasPaymentStubStartDateOffsetUnit returns true if PaymentStubStartDateOffsetUnit is present, Tag 42702.
func (m NoPaymentStubs) HasPaymentStubStartDateOffsetUnit() bool {
	return m.Has(tag.PaymentStubStartDateOffsetUnit)
}

// HasPaymentStubStartDateOffsetDayType returns true if PaymentStubStartDateOffsetDayType is present, Tag 42703.
func (m NoPaymentStubs) HasPaymentStubStartDateOffsetDayType() bool {
	return m.Has(tag.PaymentStubStartDateOffsetDayType)
}

// HasPaymentStubStartDateAdjusted returns true if PaymentStubStartDateAdjusted is present, Tag 42704.
func (m NoPaymentStubs) HasPaymentStubStartDateAdjusted() bool {
	return m.Has(tag.PaymentStubStartDateAdjusted)
}

// HasPaymentStubEndDateUnadjusted returns true if PaymentStubEndDateUnadjusted is present, Tag 42689.
func (m NoPaymentStubs) HasPaymentStubEndDateUnadjusted() bool {
	return m.Has(tag.PaymentStubEndDateUnadjusted)
}

// HasPaymentStubEndDateBusinessDayConvention returns true if PaymentStubEndDateBusinessDayConvention is present, Tag 42690.
func (m NoPaymentStubs) HasPaymentStubEndDateBusinessDayConvention() bool {
	return m.Has(tag.PaymentStubEndDateBusinessDayConvention)
}

// HasNoPaymentStubEndDateBusinessCenters returns true if NoPaymentStubEndDateBusinessCenters is present, Tag 42696.
func (m NoPaymentStubs) HasNoPaymentStubEndDateBusinessCenters() bool {
	return m.Has(tag.NoPaymentStubEndDateBusinessCenters)
}

// HasPaymentStubEndDateRelativeTo returns true if PaymentStubEndDateRelativeTo is present, Tag 42691.
func (m NoPaymentStubs) HasPaymentStubEndDateRelativeTo() bool {
	return m.Has(tag.PaymentStubEndDateRelativeTo)
}

// HasPaymentStubEndDateOffsetPeriod returns true if PaymentStubEndDateOffsetPeriod is present, Tag 42692.
func (m NoPaymentStubs) HasPaymentStubEndDateOffsetPeriod() bool {
	return m.Has(tag.PaymentStubEndDateOffsetPeriod)
}

// HasPaymentStubEndDateOffsetUnit returns true if PaymentStubEndDateOffsetUnit is present, Tag 42693.
func (m NoPaymentStubs) HasPaymentStubEndDateOffsetUnit() bool {
	return m.Has(tag.PaymentStubEndDateOffsetUnit)
}

// HasPaymentStubEndDateOffsetDayType returns true if PaymentStubEndDateOffsetDayType is present, Tag 42694.
func (m NoPaymentStubs) HasPaymentStubEndDateOffsetDayType() bool {
	return m.Has(tag.PaymentStubEndDateOffsetDayType)
}

// HasPaymentStubEndDateAdjusted returns true if PaymentStubEndDateAdjusted is present, Tag 42695.
func (m NoPaymentStubs) HasPaymentStubEndDateAdjusted() bool {
	return m.Has(tag.PaymentStubEndDateAdjusted)
}

// NoPaymentStubStartDateBusinessCenters is a repeating group element, Tag 42705.
type NoPaymentStubStartDateBusinessCenters struct {
	*quickfix.Group
}

// SetPaymentStubStartDateBusinessCenter sets PaymentStubStartDateBusinessCenter, Tag 42706.
func (m NoPaymentStubStartDateBusinessCenters) SetPaymentStubStartDateBusinessCenter(v string) {
	m.Set(field.NewPaymentStubStartDateBusinessCenter(v))
}

// GetPaymentStubStartDateBusinessCenter gets PaymentStubStartDateBusinessCenter, Tag 42706.
func (m NoPaymentStubStartDateBusinessCenters) GetPaymentStubStartDateBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStubStartDateBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasPaymentStubStartDateBusinessCenter returns true if PaymentStubStartDateBusinessCenter is present, Tag 42706.
func (m NoPaymentStubStartDateBusinessCenters) HasPaymentStubStartDateBusinessCenter() bool {
	return m.Has(tag.PaymentStubStartDateBusinessCenter)
}

// NoPaymentStubStartDateBusinessCentersRepeatingGroup is a repeating group, Tag 42705.
type NoPaymentStubStartDateBusinessCentersRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoPaymentStubStartDateBusinessCentersRepeatingGroup returns an initialized, NoPaymentStubStartDateBusinessCentersRepeatingGroup.
func NewNoPaymentStubStartDateBusinessCentersRepeatingGroup() NoPaymentStubStartDateBusinessCentersRepeatingGroup {
	return NoPaymentStubStartDateBusinessCentersRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoPaymentStubStartDateBusinessCenters,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.PaymentStubStartDateBusinessCenter),
			},
		),
	}
}

// Add create and append a new NoPaymentStubStartDateBusinessCenters to this group.
func (m NoPaymentStubStartDateBusinessCentersRepeatingGroup) Add() NoPaymentStubStartDateBusinessCenters {
	g := m.RepeatingGroup.Add()
	return NoPaymentStubStartDateBusinessCenters{g}
}

// Get returns the ith NoPaymentStubStartDateBusinessCenters in the NoPaymentStubStartDateBusinessCentersRepeatinGroup.
func (m NoPaymentStubStartDateBusinessCentersRepeatingGroup) Get(i int) NoPaymentStubStartDateBusinessCenters {
	return NoPaymentStubStartDateBusinessCenters{m.RepeatingGroup.Get(i)}
}

// NoPaymentStubEndDateBusinessCenters is a repeating group element, Tag 42696.
type NoPaymentStubEndDateBusinessCenters struct {
	*quickfix.Group
}

// SetPaymentStubEndDateBusinessCenter sets PaymentStubEndDateBusinessCenter, Tag 42697.
func (m NoPaymentStubEndDateBusinessCenters) SetPaymentStubEndDateBusinessCenter(v string) {
	m.Set(field.NewPaymentStubEndDateBusinessCenter(v))
}

// GetPaymentStubEndDateBusinessCenter gets PaymentStubEndDateBusinessCenter, Tag 42697.
func (m NoPaymentStubEndDateBusinessCenters) GetPaymentStubEndDateBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStubEndDateBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasPaymentStubEndDateBusinessCenter returns true if PaymentStubEndDateBusinessCenter is present, Tag 42697.
func (m NoPaymentStubEndDateBusinessCenters) HasPaymentStubEndDateBusinessCenter() bool {
	return m.Has(tag.PaymentStubEndDateBusinessCenter)
}

// NoPaymentStubEndDateBusinessCentersRepeatingGroup is a repeating group, Tag 42696.
type NoPaymentStubEndDateBusinessCentersRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoPaymentStubEndDateBusinessCentersRepeatingGroup returns an initialized, NoPaymentStubEndDateBusinessCentersRepeatingGroup.
func NewNoPaymentStubEndDateBusinessCentersRepeatingGroup() NoPaymentStubEndDateBusinessCentersRepeatingGroup {
	return NoPaymentStubEndDateBusinessCentersRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoPaymentStubEndDateBusinessCenters,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.PaymentStubEndDateBusinessCenter),
			},
		),
	}
}

// Add create and append a new NoPaymentStubEndDateBusinessCenters to this group.
func (m NoPaymentStubEndDateBusinessCentersRepeatingGroup) Add() NoPaymentStubEndDateBusinessCenters {
	g := m.RepeatingGroup.Add()
	return NoPaymentStubEndDateBusinessCenters{g}
}

// Get returns the ith NoPaymentStubEndDateBusinessCenters in the NoPaymentStubEndDateBusinessCentersRepeatinGroup.
func (m NoPaymentStubEndDateBusinessCentersRepeatingGroup) Get(i int) NoPaymentStubEndDateBusinessCenters {
	return NoPaymentStubEndDateBusinessCenters{m.RepeatingGroup.Get(i)}
}

// NoPaymentStubsRepeatingGroup is a repeating group, Tag 40872.
type NoPaymentStubsRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoPaymentStubsRepeatingGroup returns an initialized, NoPaymentStubsRepeatingGroup.
func NewNoPaymentStubsRepeatingGroup() NoPaymentStubsRepeatingGroup {
	return NoPaymentStubsRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoPaymentStubs,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.PaymentStubType),
				quickfix.GroupElement(tag.PaymentStubLength),
				quickfix.GroupElement(tag.PaymentStubRate),
				quickfix.GroupElement(tag.PaymentStubFixedAmount),
				quickfix.GroupElement(tag.PaymentStubFixedCurrency),
				quickfix.GroupElement(tag.PaymentStubIndex),
				quickfix.GroupElement(tag.PaymentStubIndexSource),
				quickfix.GroupElement(tag.PaymentStubIndexCurvePeriod),
				quickfix.GroupElement(tag.PaymentStubIndexCurveUnit),
				quickfix.GroupElement(tag.PaymentStubIndexRateMultiplier),
				quickfix.GroupElement(tag.PaymentStubIndexRateSpread),
				quickfix.GroupElement(tag.PaymentStubIndexRateSpreadPositionType),
				quickfix.GroupElement(tag.PaymentStubIndexRateTreatment),
				quickfix.GroupElement(tag.PaymentStubIndexCapRate),
				quickfix.GroupElement(tag.PaymentStubIndexCapRateBuySide),
				quickfix.GroupElement(tag.PaymentStubIndexCapRateSellSide),
				quickfix.GroupElement(tag.PaymentStubIndexFloorRate),
				quickfix.GroupElement(tag.PaymentStubIndexFloorRateBuySide),
				quickfix.GroupElement(tag.PaymentStubIndexFloorRateSellSide),
				quickfix.GroupElement(tag.PaymentStubIndex2),
				quickfix.GroupElement(tag.PaymentStubIndex2Source),
				quickfix.GroupElement(tag.PaymentStubIndex2CurvePeriod),
				quickfix.GroupElement(tag.PaymentStubIndex2CurveUnit),
				quickfix.GroupElement(tag.PaymentStubIndex2RateMultiplier),
				quickfix.GroupElement(tag.PaymentStubIndex2RateSpread),
				quickfix.GroupElement(tag.PaymentStubIndex2RateSpreadPositionType),
				quickfix.GroupElement(tag.PaymentStubIndex2RateTreatment),
				quickfix.GroupElement(tag.PaymentStubIndex2CapRate),
				quickfix.GroupElement(tag.PaymentStubIndex2FloorRate),
				quickfix.GroupElement(tag.PaymentStubStartDateUnadjusted),
				quickfix.GroupElement(tag.PaymentStubStartDateBusinessDayConvention),
				NewNoPaymentStubStartDateBusinessCentersRepeatingGroup(),
				quickfix.GroupElement(tag.PaymentStubStartDateRelativeTo),
				quickfix.GroupElement(tag.PaymentStubStartDateOffsetPeriod),
				quickfix.GroupElement(tag.PaymentStubStartDateOffsetUnit),
				quickfix.GroupElement(tag.PaymentStubStartDateOffsetDayType),
				quickfix.GroupElement(tag.PaymentStubStartDateAdjusted),
				quickfix.GroupElement(tag.PaymentStubEndDateUnadjusted),
				quickfix.GroupElement(tag.PaymentStubEndDateBusinessDayConvention),
				NewNoPaymentStubEndDateBusinessCentersRepeatingGroup(),
				quickfix.GroupElement(tag.PaymentStubEndDateRelativeTo),
				quickfix.GroupElement(tag.PaymentStubEndDateOffsetPeriod),
				quickfix.GroupElement(tag.PaymentStubEndDateOffsetUnit),
				quickfix.GroupElement(tag.PaymentStubEndDateOffsetDayType),
				quickfix.GroupElement(tag.PaymentStubEndDateAdjusted),
			},
		),
	}
}

// Add create and append a new NoPaymentStubs to this group.
func (m NoPaymentStubsRepeatingGroup) Add() NoPaymentStubs {
	g := m.RepeatingGroup.Add()
	return NoPaymentStubs{g}
}

// Get returns the ith NoPaymentStubs in the NoPaymentStubsRepeatinGroup.
func (m NoPaymentStubsRepeatingGroup) Get(i int) NoPaymentStubs {
	return NoPaymentStubs{m.RepeatingGroup.Get(i)}
}

// NoStreamCommodityAltIDs is a repeating group element, Tag 41277.
type NoStreamCommodityAltIDs struct {
	*quickfix.Group
}

// SetStreamCommodityAltID sets StreamCommodityAltID, Tag 41278.
func (m NoStreamCommodityAltIDs) SetStreamCommodityAltID(v string) {
	m.Set(field.NewStreamCommodityAltID(v))
}

// SetStreamCommodityAltIDSource sets StreamCommodityAltIDSource, Tag 41279.
func (m NoStreamCommodityAltIDs) SetStreamCommodityAltIDSource(v string) {
	m.Set(field.NewStreamCommodityAltIDSource(v))
}

// GetStreamCommodityAltID gets StreamCommodityAltID, Tag 41278.
func (m NoStreamCommodityAltIDs) GetStreamCommodityAltID() (v string, err quickfix.MessageRejectError) {
	var f field.StreamCommodityAltIDField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStreamCommodityAltIDSource gets StreamCommodityAltIDSource, Tag 41279.
func (m NoStreamCommodityAltIDs) GetStreamCommodityAltIDSource() (v string, err quickfix.MessageRejectError) {
	var f field.StreamCommodityAltIDSourceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasStreamCommodityAltID returns true if StreamCommodityAltID is present, Tag 41278.
func (m NoStreamCommodityAltIDs) HasStreamCommodityAltID() bool {
	return m.Has(tag.StreamCommodityAltID)
}

// HasStreamCommodityAltIDSource returns true if StreamCommodityAltIDSource is present, Tag 41279.
func (m NoStreamCommodityAltIDs) HasStreamCommodityAltIDSource() bool {
	return m.Has(tag.StreamCommodityAltIDSource)
}

// NoStreamCommodityAltIDsRepeatingGroup is a repeating group, Tag 41277.
type NoStreamCommodityAltIDsRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoStreamCommodityAltIDsRepeatingGroup returns an initialized, NoStreamCommodityAltIDsRepeatingGroup.
func NewNoStreamCommodityAltIDsRepeatingGroup() NoStreamCommodityAltIDsRepeatingGroup {
	return NoStreamCommodityAltIDsRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoStreamCommodityAltIDs,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.StreamCommodityAltID),
				quickfix.GroupElement(tag.StreamCommodityAltIDSource),
			},
		),
	}
}

// Add create and append a new NoStreamCommodityAltIDs to this group.
func (m NoStreamCommodityAltIDsRepeatingGroup) Add() NoStreamCommodityAltIDs {
	g := m.RepeatingGroup.Add()
	return NoStreamCommodityAltIDs{g}
}

// Get returns the ith NoStreamCommodityAltIDs in the NoStreamCommodityAltIDsRepeatinGroup.
func (m NoStreamCommodityAltIDsRepeatingGroup) Get(i int) NoStreamCommodityAltIDs {
	return NoStreamCommodityAltIDs{m.RepeatingGroup.Get(i)}
}

// NoStreamAssetAttributes is a repeating group element, Tag 41237.
type NoStreamAssetAttributes struct {
	*quickfix.Group
}

// SetStreamAssetAttributeType sets StreamAssetAttributeType, Tag 41238.
func (m NoStreamAssetAttributes) SetStreamAssetAttributeType(v string) {
	m.Set(field.NewStreamAssetAttributeType(v))
}

// SetStreamAssetAttributeValue sets StreamAssetAttributeValue, Tag 41239.
func (m NoStreamAssetAttributes) SetStreamAssetAttributeValue(v string) {
	m.Set(field.NewStreamAssetAttributeValue(v))
}

// SetStreamAssetAttributeLimit sets StreamAssetAttributeLimit, Tag 41240.
func (m NoStreamAssetAttributes) SetStreamAssetAttributeLimit(v string) {
	m.Set(field.NewStreamAssetAttributeLimit(v))
}

// GetStreamAssetAttributeType gets StreamAssetAttributeType, Tag 41238.
func (m NoStreamAssetAttributes) GetStreamAssetAttributeType() (v string, err quickfix.MessageRejectError) {
	var f field.StreamAssetAttributeTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStreamAssetAttributeValue gets StreamAssetAttributeValue, Tag 41239.
func (m NoStreamAssetAttributes) GetStreamAssetAttributeValue() (v string, err quickfix.MessageRejectError) {
	var f field.StreamAssetAttributeValueField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStreamAssetAttributeLimit gets StreamAssetAttributeLimit, Tag 41240.
func (m NoStreamAssetAttributes) GetStreamAssetAttributeLimit() (v string, err quickfix.MessageRejectError) {
	var f field.StreamAssetAttributeLimitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasStreamAssetAttributeType returns true if StreamAssetAttributeType is present, Tag 41238.
func (m NoStreamAssetAttributes) HasStreamAssetAttributeType() bool {
	return m.Has(tag.StreamAssetAttributeType)
}

// HasStreamAssetAttributeValue returns true if StreamAssetAttributeValue is present, Tag 41239.
func (m NoStreamAssetAttributes) HasStreamAssetAttributeValue() bool {
	return m.Has(tag.StreamAssetAttributeValue)
}

// HasStreamAssetAttributeLimit returns true if StreamAssetAttributeLimit is present, Tag 41240.
func (m NoStreamAssetAttributes) HasStreamAssetAttributeLimit() bool {
	return m.Has(tag.StreamAssetAttributeLimit)
}

// NoStreamAssetAttributesRepeatingGroup is a repeating group, Tag 41237.
type NoStreamAssetAttributesRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoStreamAssetAttributesRepeatingGroup returns an initialized, NoStreamAssetAttributesRepeatingGroup.
func NewNoStreamAssetAttributesRepeatingGroup() NoStreamAssetAttributesRepeatingGroup {
	return NoStreamAssetAttributesRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoStreamAssetAttributes,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.StreamAssetAttributeType),
				quickfix.GroupElement(tag.StreamAssetAttributeValue),
				quickfix.GroupElement(tag.StreamAssetAttributeLimit),
			},
		),
	}
}

// Add create and append a new NoStreamAssetAttributes to this group.
func (m NoStreamAssetAttributesRepeatingGroup) Add() NoStreamAssetAttributes {
	g := m.RepeatingGroup.Add()
	return NoStreamAssetAttributes{g}
}

// Get returns the ith NoStreamAssetAttributes in the NoStreamAssetAttributesRepeatinGroup.
func (m NoStreamAssetAttributesRepeatingGroup) Get(i int) NoStreamAssetAttributes {
	return NoStreamAssetAttributes{m.RepeatingGroup.Get(i)}
}

// NoStreamCommodityDataSources is a repeating group element, Tag 41280.
type NoStreamCommodityDataSources struct {
	*quickfix.Group
}

// SetStreamCommodityDataSourceID sets StreamCommodityDataSourceID, Tag 41281.
func (m NoStreamCommodityDataSources) SetStreamCommodityDataSourceID(v string) {
	m.Set(field.NewStreamCommodityDataSourceID(v))
}

// SetStreamCommodityDataSourceIDType sets StreamCommodityDataSourceIDType, Tag 41282.
func (m NoStreamCommodityDataSources) SetStreamCommodityDataSourceIDType(v enum.StreamCommodityDataSourceIDType) {
	m.Set(field.NewStreamCommodityDataSourceIDType(v))
}

// GetStreamCommodityDataSourceID gets StreamCommodityDataSourceID, Tag 41281.
func (m NoStreamCommodityDataSources) GetStreamCommodityDataSourceID() (v string, err quickfix.MessageRejectError) {
	var f field.StreamCommodityDataSourceIDField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStreamCommodityDataSourceIDType gets StreamCommodityDataSourceIDType, Tag 41282.
func (m NoStreamCommodityDataSources) GetStreamCommodityDataSourceIDType() (v enum.StreamCommodityDataSourceIDType, err quickfix.MessageRejectError) {
	var f field.StreamCommodityDataSourceIDTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasStreamCommodityDataSourceID returns true if StreamCommodityDataSourceID is present, Tag 41281.
func (m NoStreamCommodityDataSources) HasStreamCommodityDataSourceID() bool {
	return m.Has(tag.StreamCommodityDataSourceID)
}

// HasStreamCommodityDataSourceIDType returns true if StreamCommodityDataSourceIDType is present, Tag 41282.
func (m NoStreamCommodityDataSources) HasStreamCommodityDataSourceIDType() bool {
	return m.Has(tag.StreamCommodityDataSourceIDType)
}

// NoStreamCommodityDataSourcesRepeatingGroup is a repeating group, Tag 41280.
type NoStreamCommodityDataSourcesRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoStreamCommodityDataSourcesRepeatingGroup returns an initialized, NoStreamCommodityDataSourcesRepeatingGroup.
func NewNoStreamCommodityDataSourcesRepeatingGroup() NoStreamCommodityDataSourcesRepeatingGroup {
	return NoStreamCommodityDataSourcesRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoStreamCommodityDataSources,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.StreamCommodityDataSourceID),
				quickfix.GroupElement(tag.StreamCommodityDataSourceIDType),
			},
		),
	}
}

// Add create and append a new NoStreamCommodityDataSources to this group.
func (m NoStreamCommodityDataSourcesRepeatingGroup) Add() NoStreamCommodityDataSources {
	g := m.RepeatingGroup.Add()
	return NoStreamCommodityDataSources{g}
}

// Get returns the ith NoStreamCommodityDataSources in the NoStreamCommodityDataSourcesRepeatinGroup.
func (m NoStreamCommodityDataSourcesRepeatingGroup) Get(i int) NoStreamCommodityDataSources {
	return NoStreamCommodityDataSources{m.RepeatingGroup.Get(i)}
}

// NoStreamCommoditySettlBusinessCenters is a repeating group element, Tag 41249.
type NoStreamCommoditySettlBusinessCenters struct {
	*quickfix.Group
}

// SetStreamCommoditySettlBusinessCenter sets StreamCommoditySettlBusinessCenter, Tag 41250.
func (m NoStreamCommoditySettlBusinessCenters) SetStreamCommoditySettlBusinessCenter(v string) {
	m.Set(field.NewStreamCommoditySettlBusinessCenter(v))
}

// GetStreamCommoditySettlBusinessCenter gets StreamCommoditySettlBusinessCenter, Tag 41250.
func (m NoStreamCommoditySettlBusinessCenters) GetStreamCommoditySettlBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.StreamCommoditySettlBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasStreamCommoditySettlBusinessCenter returns true if StreamCommoditySettlBusinessCenter is present, Tag 41250.
func (m NoStreamCommoditySettlBusinessCenters) HasStreamCommoditySettlBusinessCenter() bool {
	return m.Has(tag.StreamCommoditySettlBusinessCenter)
}

// NoStreamCommoditySettlBusinessCentersRepeatingGroup is a repeating group, Tag 41249.
type NoStreamCommoditySettlBusinessCentersRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoStreamCommoditySettlBusinessCentersRepeatingGroup returns an initialized, NoStreamCommoditySettlBusinessCentersRepeatingGroup.
func NewNoStreamCommoditySettlBusinessCentersRepeatingGroup() NoStreamCommoditySettlBusinessCentersRepeatingGroup {
	return NoStreamCommoditySettlBusinessCentersRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoStreamCommoditySettlBusinessCenters,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.StreamCommoditySettlBusinessCenter),
			},
		),
	}
}

// Add create and append a new NoStreamCommoditySettlBusinessCenters to this group.
func (m NoStreamCommoditySettlBusinessCentersRepeatingGroup) Add() NoStreamCommoditySettlBusinessCenters {
	g := m.RepeatingGroup.Add()
	return NoStreamCommoditySettlBusinessCenters{g}
}

// Get returns the ith NoStreamCommoditySettlBusinessCenters in the NoStreamCommoditySettlBusinessCentersRepeatinGroup.
func (m NoStreamCommoditySettlBusinessCentersRepeatingGroup) Get(i int) NoStreamCommoditySettlBusinessCenters {
	return NoStreamCommoditySettlBusinessCenters{m.RepeatingGroup.Get(i)}
}

// NoStreamCommoditySettlPeriods is a repeating group element, Tag 41289.
type NoStreamCommoditySettlPeriods struct {
	*quickfix.Group
}

// SetStreamCommoditySettlCountry sets StreamCommoditySettlCountry, Tag 41290.
func (m NoStreamCommoditySettlPeriods) SetStreamCommoditySettlCountry(v string) {
	m.Set(field.NewStreamCommoditySettlCountry(v))
}

// SetStreamCommoditySettlTimeZone sets StreamCommoditySettlTimeZone, Tag 41291.
func (m NoStreamCommoditySettlPeriods) SetStreamCommoditySettlTimeZone(v string) {
	m.Set(field.NewStreamCommoditySettlTimeZone(v))
}

// SetStreamCommoditySettlFlowType sets StreamCommoditySettlFlowType, Tag 41292.
func (m NoStreamCommoditySettlPeriods) SetStreamCommoditySettlFlowType(v int) {
	m.Set(field.NewStreamCommoditySettlFlowType(v))
}

// SetStreamCommoditySettlPeriodNotional sets StreamCommoditySettlPeriodNotional, Tag 41293.
func (m NoStreamCommoditySettlPeriods) SetStreamCommoditySettlPeriodNotional(value decimal.Decimal, scale int32) {
	m.Set(field.NewStreamCommoditySettlPeriodNotional(value, scale))
}

// SetStreamCommoditySettlPeriodNotionalUnitOfMeasure sets StreamCommoditySettlPeriodNotionalUnitOfMeasure, Tag 41294.
func (m NoStreamCommoditySettlPeriods) SetStreamCommoditySettlPeriodNotionalUnitOfMeasure(v string) {
	m.Set(field.NewStreamCommoditySettlPeriodNotionalUnitOfMeasure(v))
}

// SetStreamCommoditySettlPeriodFrequencyPeriod sets StreamCommoditySettlPeriodFrequencyPeriod, Tag 41295.
func (m NoStreamCommoditySettlPeriods) SetStreamCommoditySettlPeriodFrequencyPeriod(v int) {
	m.Set(field.NewStreamCommoditySettlPeriodFrequencyPeriod(v))
}

// SetStreamCommoditySettlPeriodFrequencyUnit sets StreamCommoditySettlPeriodFrequencyUnit, Tag 41296.
func (m NoStreamCommoditySettlPeriods) SetStreamCommoditySettlPeriodFrequencyUnit(v string) {
	m.Set(field.NewStreamCommoditySettlPeriodFrequencyUnit(v))
}

// SetStreamCommoditySettlPeriodPrice sets StreamCommoditySettlPeriodPrice, Tag 41297.
func (m NoStreamCommoditySettlPeriods) SetStreamCommoditySettlPeriodPrice(value decimal.Decimal, scale int32) {
	m.Set(field.NewStreamCommoditySettlPeriodPrice(value, scale))
}

// SetStreamCommoditySettlPeriodPriceUnitOfMeasure sets StreamCommoditySettlPeriodPriceUnitOfMeasure, Tag 41298.
func (m NoStreamCommoditySettlPeriods) SetStreamCommoditySettlPeriodPriceUnitOfMeasure(v string) {
	m.Set(field.NewStreamCommoditySettlPeriodPriceUnitOfMeasure(v))
}

// SetStreamCommoditySettlPeriodPriceCurrency sets StreamCommoditySettlPeriodPriceCurrency, Tag 41299.
func (m NoStreamCommoditySettlPeriods) SetStreamCommoditySettlPeriodPriceCurrency(v string) {
	m.Set(field.NewStreamCommoditySettlPeriodPriceCurrency(v))
}

// SetStreamCommoditySettlHolidaysProcessingInstruction sets StreamCommoditySettlHolidaysProcessingInstruction, Tag 41300.
func (m NoStreamCommoditySettlPeriods) SetStreamCommoditySettlHolidaysProcessingInstruction(v int) {
	m.Set(field.NewStreamCommoditySettlHolidaysProcessingInstruction(v))
}

// SetNoStreamCommoditySettlDays sets NoStreamCommoditySettlDays, Tag 41283.
func (m NoStreamCommoditySettlPeriods) SetNoStreamCommoditySettlDays(f NoStreamCommoditySettlDaysRepeatingGroup) {
	m.SetGroup(f)
}

// SetStreamCommoditySettlPeriodXID sets StreamCommoditySettlPeriodXID, Tag 41301.
func (m NoStreamCommoditySettlPeriods) SetStreamCommoditySettlPeriodXID(v string) {
	m.Set(field.NewStreamCommoditySettlPeriodXID(v))
}

// SetStreamCommoditySettlPeriodXIDRef sets StreamCommoditySettlPeriodXIDRef, Tag 41302.
func (m NoStreamCommoditySettlPeriods) SetStreamCommoditySettlPeriodXIDRef(v string) {
	m.Set(field.NewStreamCommoditySettlPeriodXIDRef(v))
}

// GetStreamCommoditySettlCountry gets StreamCommoditySettlCountry, Tag 41290.
func (m NoStreamCommoditySettlPeriods) GetStreamCommoditySettlCountry() (v string, err quickfix.MessageRejectError) {
	var f field.StreamCommoditySettlCountryField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStreamCommoditySettlTimeZone gets StreamCommoditySettlTimeZone, Tag 41291.
func (m NoStreamCommoditySettlPeriods) GetStreamCommoditySettlTimeZone() (v string, err quickfix.MessageRejectError) {
	var f field.StreamCommoditySettlTimeZoneField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStreamCommoditySettlFlowType gets StreamCommoditySettlFlowType, Tag 41292.
func (m NoStreamCommoditySettlPeriods) GetStreamCommoditySettlFlowType() (v int, err quickfix.MessageRejectError) {
	var f field.StreamCommoditySettlFlowTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStreamCommoditySettlPeriodNotional gets StreamCommoditySettlPeriodNotional, Tag 41293.
func (m NoStreamCommoditySettlPeriods) GetStreamCommoditySettlPeriodNotional() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.StreamCommoditySettlPeriodNotionalField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStreamCommoditySettlPeriodNotionalUnitOfMeasure gets StreamCommoditySettlPeriodNotionalUnitOfMeasure, Tag 41294.
func (m NoStreamCommoditySettlPeriods) GetStreamCommoditySettlPeriodNotionalUnitOfMeasure() (v string, err quickfix.MessageRejectError) {
	var f field.StreamCommoditySettlPeriodNotionalUnitOfMeasureField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStreamCommoditySettlPeriodFrequencyPeriod gets StreamCommoditySettlPeriodFrequencyPeriod, Tag 41295.
func (m NoStreamCommoditySettlPeriods) GetStreamCommoditySettlPeriodFrequencyPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.StreamCommoditySettlPeriodFrequencyPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStreamCommoditySettlPeriodFrequencyUnit gets StreamCommoditySettlPeriodFrequencyUnit, Tag 41296.
func (m NoStreamCommoditySettlPeriods) GetStreamCommoditySettlPeriodFrequencyUnit() (v string, err quickfix.MessageRejectError) {
	var f field.StreamCommoditySettlPeriodFrequencyUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStreamCommoditySettlPeriodPrice gets StreamCommoditySettlPeriodPrice, Tag 41297.
func (m NoStreamCommoditySettlPeriods) GetStreamCommoditySettlPeriodPrice() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.StreamCommoditySettlPeriodPriceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStreamCommoditySettlPeriodPriceUnitOfMeasure gets StreamCommoditySettlPeriodPriceUnitOfMeasure, Tag 41298.
func (m NoStreamCommoditySettlPeriods) GetStreamCommoditySettlPeriodPriceUnitOfMeasure() (v string, err quickfix.MessageRejectError) {
	var f field.StreamCommoditySettlPeriodPriceUnitOfMeasureField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStreamCommoditySettlPeriodPriceCurrency gets StreamCommoditySettlPeriodPriceCurrency, Tag 41299.
func (m NoStreamCommoditySettlPeriods) GetStreamCommoditySettlPeriodPriceCurrency() (v string, err quickfix.MessageRejectError) {
	var f field.StreamCommoditySettlPeriodPriceCurrencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStreamCommoditySettlHolidaysProcessingInstruction gets StreamCommoditySettlHolidaysProcessingInstruction, Tag 41300.
func (m NoStreamCommoditySettlPeriods) GetStreamCommoditySettlHolidaysProcessingInstruction() (v int, err quickfix.MessageRejectError) {
	var f field.StreamCommoditySettlHolidaysProcessingInstructionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoStreamCommoditySettlDays gets NoStreamCommoditySettlDays, Tag 41283.
func (m NoStreamCommoditySettlPeriods) GetNoStreamCommoditySettlDays() (NoStreamCommoditySettlDaysRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoStreamCommoditySettlDaysRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetStreamCommoditySettlPeriodXID gets StreamCommoditySettlPeriodXID, Tag 41301.
func (m NoStreamCommoditySettlPeriods) GetStreamCommoditySettlPeriodXID() (v string, err quickfix.MessageRejectError) {
	var f field.StreamCommoditySettlPeriodXIDField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStreamCommoditySettlPeriodXIDRef gets StreamCommoditySettlPeriodXIDRef, Tag 41302.
func (m NoStreamCommoditySettlPeriods) GetStreamCommoditySettlPeriodXIDRef() (v string, err quickfix.MessageRejectError) {
	var f field.StreamCommoditySettlPeriodXIDRefField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasStreamCommoditySettlCountry returns true if StreamCommoditySettlCountry is present, Tag 41290.
func (m NoStreamCommoditySettlPeriods) HasStreamCommoditySettlCountry() bool {
	return m.Has(tag.StreamCommoditySettlCountry)
}

// HasStreamCommoditySettlTimeZone returns true if StreamCommoditySettlTimeZone is present, Tag 41291.
func (m NoStreamCommoditySettlPeriods) HasStreamCommoditySettlTimeZone() bool {
	return m.Has(tag.StreamCommoditySettlTimeZone)
}

// HasStreamCommoditySettlFlowType returns true if StreamCommoditySettlFlowType is present, Tag 41292.
func (m NoStreamCommoditySettlPeriods) HasStreamCommoditySettlFlowType() bool {
	return m.Has(tag.StreamCommoditySettlFlowType)
}

// HasStreamCommoditySettlPeriodNotional returns true if StreamCommoditySettlPeriodNotional is present, Tag 41293.
func (m NoStreamCommoditySettlPeriods) HasStreamCommoditySettlPeriodNotional() bool {
	return m.Has(tag.StreamCommoditySettlPeriodNotional)
}

// HasStreamCommoditySettlPeriodNotionalUnitOfMeasure returns true if StreamCommoditySettlPeriodNotionalUnitOfMeasure is present, Tag 41294.
func (m NoStreamCommoditySettlPeriods) HasStreamCommoditySettlPeriodNotionalUnitOfMeasure() bool {
	return m.Has(tag.StreamCommoditySettlPeriodNotionalUnitOfMeasure)
}

// HasStreamCommoditySettlPeriodFrequencyPeriod returns true if StreamCommoditySettlPeriodFrequencyPeriod is present, Tag 41295.
func (m NoStreamCommoditySettlPeriods) HasStreamCommoditySettlPeriodFrequencyPeriod() bool {
	return m.Has(tag.StreamCommoditySettlPeriodFrequencyPeriod)
}

// HasStreamCommoditySettlPeriodFrequencyUnit returns true if StreamCommoditySettlPeriodFrequencyUnit is present, Tag 41296.
func (m NoStreamCommoditySettlPeriods) HasStreamCommoditySettlPeriodFrequencyUnit() bool {
	return m.Has(tag.StreamCommoditySettlPeriodFrequencyUnit)
}

// HasStreamCommoditySettlPeriodPrice returns true if StreamCommoditySettlPeriodPrice is present, Tag 41297.
func (m NoStreamCommoditySettlPeriods) HasStreamCommoditySettlPeriodPrice() bool {
	return m.Has(tag.StreamCommoditySettlPeriodPrice)
}

// HasStreamCommoditySettlPeriodPriceUnitOfMeasure returns true if StreamCommoditySettlPeriodPriceUnitOfMeasure is present, Tag 41298.
func (m NoStreamCommoditySettlPeriods) HasStreamCommoditySettlPeriodPriceUnitOfMeasure() bool {
	return m.Has(tag.StreamCommoditySettlPeriodPriceUnitOfMeasure)
}

// HasStreamCommoditySettlPeriodPriceCurrency returns true if StreamCommoditySettlPeriodPriceCurrency is present, Tag 41299.
func (m NoStreamCommoditySettlPeriods) HasStreamCommoditySettlPeriodPriceCurrency() bool {
	return m.Has(tag.StreamCommoditySettlPeriodPriceCurrency)
}

// HasStreamCommoditySettlHolidaysProcessingInstruction returns true if StreamCommoditySettlHolidaysProcessingInstruction is present, Tag 41300.
func (m NoStreamCommoditySettlPeriods) HasStreamCommoditySettlHolidaysProcessingInstruction() bool {
	return m.Has(tag.StreamCommoditySettlHolidaysProcessingInstruction)
}

// HasNoStreamCommoditySettlDays returns true if NoStreamCommoditySettlDays is present, Tag 41283.
func (m NoStreamCommoditySettlPeriods) HasNoStreamCommoditySettlDays() bool {
	return m.Has(tag.NoStreamCommoditySettlDays)
}

// HasStreamCommoditySettlPeriodXID returns true if StreamCommoditySettlPeriodXID is present, Tag 41301.
func (m NoStreamCommoditySettlPeriods) HasStreamCommoditySettlPeriodXID() bool {
	return m.Has(tag.StreamCommoditySettlPeriodXID)
}

// HasStreamCommoditySettlPeriodXIDRef returns true if StreamCommoditySettlPeriodXIDRef is present, Tag 41302.
func (m NoStreamCommoditySettlPeriods) HasStreamCommoditySettlPeriodXIDRef() bool {
	return m.Has(tag.StreamCommoditySettlPeriodXIDRef)
}

// NoStreamCommoditySettlDays is a repeating group element, Tag 41283.
type NoStreamCommoditySettlDays struct {
	*quickfix.Group
}

// SetStreamCommoditySettlDay sets StreamCommoditySettlDay, Tag 41284.
func (m NoStreamCommoditySettlDays) SetStreamCommoditySettlDay(v int) {
	m.Set(field.NewStreamCommoditySettlDay(v))
}

// SetStreamCommoditySettlTotalHours sets StreamCommoditySettlTotalHours, Tag 41285.
func (m NoStreamCommoditySettlDays) SetStreamCommoditySettlTotalHours(v int) {
	m.Set(field.NewStreamCommoditySettlTotalHours(v))
}

// SetNoStreamCommoditySettlTimes sets NoStreamCommoditySettlTimes, Tag 41286.
func (m NoStreamCommoditySettlDays) SetNoStreamCommoditySettlTimes(f NoStreamCommoditySettlTimesRepeatingGroup) {
	m.SetGroup(f)
}

// GetStreamCommoditySettlDay gets StreamCommoditySettlDay, Tag 41284.
func (m NoStreamCommoditySettlDays) GetStreamCommoditySettlDay() (v int, err quickfix.MessageRejectError) {
	var f field.StreamCommoditySettlDayField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStreamCommoditySettlTotalHours gets StreamCommoditySettlTotalHours, Tag 41285.
func (m NoStreamCommoditySettlDays) GetStreamCommoditySettlTotalHours() (v int, err quickfix.MessageRejectError) {
	var f field.StreamCommoditySettlTotalHoursField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoStreamCommoditySettlTimes gets NoStreamCommoditySettlTimes, Tag 41286.
func (m NoStreamCommoditySettlDays) GetNoStreamCommoditySettlTimes() (NoStreamCommoditySettlTimesRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoStreamCommoditySettlTimesRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// HasStreamCommoditySettlDay returns true if StreamCommoditySettlDay is present, Tag 41284.
func (m NoStreamCommoditySettlDays) HasStreamCommoditySettlDay() bool {
	return m.Has(tag.StreamCommoditySettlDay)
}

// HasStreamCommoditySettlTotalHours returns true if StreamCommoditySettlTotalHours is present, Tag 41285.
func (m NoStreamCommoditySettlDays) HasStreamCommoditySettlTotalHours() bool {
	return m.Has(tag.StreamCommoditySettlTotalHours)
}

// HasNoStreamCommoditySettlTimes returns true if NoStreamCommoditySettlTimes is present, Tag 41286.
func (m NoStreamCommoditySettlDays) HasNoStreamCommoditySettlTimes() bool {
	return m.Has(tag.NoStreamCommoditySettlTimes)
}

// NoStreamCommoditySettlTimes is a repeating group element, Tag 41286.
type NoStreamCommoditySettlTimes struct {
	*quickfix.Group
}

// SetStreamCommoditySettlStart sets StreamCommoditySettlStart, Tag 41287.
func (m NoStreamCommoditySettlTimes) SetStreamCommoditySettlStart(v string) {
	m.Set(field.NewStreamCommoditySettlStart(v))
}

// SetStreamCommoditySettlEnd sets StreamCommoditySettlEnd, Tag 41288.
func (m NoStreamCommoditySettlTimes) SetStreamCommoditySettlEnd(v string) {
	m.Set(field.NewStreamCommoditySettlEnd(v))
}

// SetStreamCommoditySettlTimeType sets StreamCommoditySettlTimeType, Tag 41588.
func (m NoStreamCommoditySettlTimes) SetStreamCommoditySettlTimeType(v int) {
	m.Set(field.NewStreamCommoditySettlTimeType(v))
}

// GetStreamCommoditySettlStart gets StreamCommoditySettlStart, Tag 41287.
func (m NoStreamCommoditySettlTimes) GetStreamCommoditySettlStart() (v string, err quickfix.MessageRejectError) {
	var f field.StreamCommoditySettlStartField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStreamCommoditySettlEnd gets StreamCommoditySettlEnd, Tag 41288.
func (m NoStreamCommoditySettlTimes) GetStreamCommoditySettlEnd() (v string, err quickfix.MessageRejectError) {
	var f field.StreamCommoditySettlEndField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStreamCommoditySettlTimeType gets StreamCommoditySettlTimeType, Tag 41588.
func (m NoStreamCommoditySettlTimes) GetStreamCommoditySettlTimeType() (v int, err quickfix.MessageRejectError) {
	var f field.StreamCommoditySettlTimeTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasStreamCommoditySettlStart returns true if StreamCommoditySettlStart is present, Tag 41287.
func (m NoStreamCommoditySettlTimes) HasStreamCommoditySettlStart() bool {
	return m.Has(tag.StreamCommoditySettlStart)
}

// HasStreamCommoditySettlEnd returns true if StreamCommoditySettlEnd is present, Tag 41288.
func (m NoStreamCommoditySettlTimes) HasStreamCommoditySettlEnd() bool {
	return m.Has(tag.StreamCommoditySettlEnd)
}

// HasStreamCommoditySettlTimeType returns true if StreamCommoditySettlTimeType is present, Tag 41588.
func (m NoStreamCommoditySettlTimes) HasStreamCommoditySettlTimeType() bool {
	return m.Has(tag.StreamCommoditySettlTimeType)
}

// NoStreamCommoditySettlTimesRepeatingGroup is a repeating group, Tag 41286.
type NoStreamCommoditySettlTimesRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoStreamCommoditySettlTimesRepeatingGroup returns an initialized, NoStreamCommoditySettlTimesRepeatingGroup.
func NewNoStreamCommoditySettlTimesRepeatingGroup() NoStreamCommoditySettlTimesRepeatingGroup {
	return NoStreamCommoditySettlTimesRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoStreamCommoditySettlTimes,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.StreamCommoditySettlStart),
				quickfix.GroupElement(tag.StreamCommoditySettlEnd),
				quickfix.GroupElement(tag.StreamCommoditySettlTimeType),
			},
		),
	}
}

// Add create and append a new NoStreamCommoditySettlTimes to this group.
func (m NoStreamCommoditySettlTimesRepeatingGroup) Add() NoStreamCommoditySettlTimes {
	g := m.RepeatingGroup.Add()
	return NoStreamCommoditySettlTimes{g}
}

// Get returns the ith NoStreamCommoditySettlTimes in the NoStreamCommoditySettlTimesRepeatinGroup.
func (m NoStreamCommoditySettlTimesRepeatingGroup) Get(i int) NoStreamCommoditySettlTimes {
	return NoStreamCommoditySettlTimes{m.RepeatingGroup.Get(i)}
}

// NoStreamCommoditySettlDaysRepeatingGroup is a repeating group, Tag 41283.
type NoStreamCommoditySettlDaysRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoStreamCommoditySettlDaysRepeatingGroup returns an initialized, NoStreamCommoditySettlDaysRepeatingGroup.
func NewNoStreamCommoditySettlDaysRepeatingGroup() NoStreamCommoditySettlDaysRepeatingGroup {
	return NoStreamCommoditySettlDaysRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoStreamCommoditySettlDays,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.StreamCommoditySettlDay),
				quickfix.GroupElement(tag.StreamCommoditySettlTotalHours),
				NewNoStreamCommoditySettlTimesRepeatingGroup(),
			},
		),
	}
}

// Add create and append a new NoStreamCommoditySettlDays to this group.
func (m NoStreamCommoditySettlDaysRepeatingGroup) Add() NoStreamCommoditySettlDays {
	g := m.RepeatingGroup.Add()
	return NoStreamCommoditySettlDays{g}
}

// Get returns the ith NoStreamCommoditySettlDays in the NoStreamCommoditySettlDaysRepeatinGroup.
func (m NoStreamCommoditySettlDaysRepeatingGroup) Get(i int) NoStreamCommoditySettlDays {
	return NoStreamCommoditySettlDays{m.RepeatingGroup.Get(i)}
}

// NoStreamCommoditySettlPeriodsRepeatingGroup is a repeating group, Tag 41289.
type NoStreamCommoditySettlPeriodsRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoStreamCommoditySettlPeriodsRepeatingGroup returns an initialized, NoStreamCommoditySettlPeriodsRepeatingGroup.
func NewNoStreamCommoditySettlPeriodsRepeatingGroup() NoStreamCommoditySettlPeriodsRepeatingGroup {
	return NoStreamCommoditySettlPeriodsRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoStreamCommoditySettlPeriods,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.StreamCommoditySettlCountry),
				quickfix.GroupElement(tag.StreamCommoditySettlTimeZone),
				quickfix.GroupElement(tag.StreamCommoditySettlFlowType),
				quickfix.GroupElement(tag.StreamCommoditySettlPeriodNotional),
				quickfix.GroupElement(tag.StreamCommoditySettlPeriodNotionalUnitOfMeasure),
				quickfix.GroupElement(tag.StreamCommoditySettlPeriodFrequencyPeriod),
				quickfix.GroupElement(tag.StreamCommoditySettlPeriodFrequencyUnit),
				quickfix.GroupElement(tag.StreamCommoditySettlPeriodPrice),
				quickfix.GroupElement(tag.StreamCommoditySettlPeriodPriceUnitOfMeasure),
				quickfix.GroupElement(tag.StreamCommoditySettlPeriodPriceCurrency),
				quickfix.GroupElement(tag.StreamCommoditySettlHolidaysProcessingInstruction),
				NewNoStreamCommoditySettlDaysRepeatingGroup(),
				quickfix.GroupElement(tag.StreamCommoditySettlPeriodXID),
				quickfix.GroupElement(tag.StreamCommoditySettlPeriodXIDRef),
			},
		),
	}
}

// Add create and append a new NoStreamCommoditySettlPeriods to this group.
func (m NoStreamCommoditySettlPeriodsRepeatingGroup) Add() NoStreamCommoditySettlPeriods {
	g := m.RepeatingGroup.Add()
	return NoStreamCommoditySettlPeriods{g}
}

// Get returns the ith NoStreamCommoditySettlPeriods in the NoStreamCommoditySettlPeriodsRepeatinGroup.
func (m NoStreamCommoditySettlPeriodsRepeatingGroup) Get(i int) NoStreamCommoditySettlPeriods {
	return NoStreamCommoditySettlPeriods{m.RepeatingGroup.Get(i)}
}

// NoDeliveryStreamCommoditySources is a repeating group element, Tag 41085.
type NoDeliveryStreamCommoditySources struct {
	*quickfix.Group
}

// SetDeliveryStreamCommoditySource sets DeliveryStreamCommoditySource, Tag 41086.
func (m NoDeliveryStreamCommoditySources) SetDeliveryStreamCommoditySource(v string) {
	m.Set(field.NewDeliveryStreamCommoditySource(v))
}

// GetDeliveryStreamCommoditySource gets DeliveryStreamCommoditySource, Tag 41086.
func (m NoDeliveryStreamCommoditySources) GetDeliveryStreamCommoditySource() (v string, err quickfix.MessageRejectError) {
	var f field.DeliveryStreamCommoditySourceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasDeliveryStreamCommoditySource returns true if DeliveryStreamCommoditySource is present, Tag 41086.
func (m NoDeliveryStreamCommoditySources) HasDeliveryStreamCommoditySource() bool {
	return m.Has(tag.DeliveryStreamCommoditySource)
}

// NoDeliveryStreamCommoditySourcesRepeatingGroup is a repeating group, Tag 41085.
type NoDeliveryStreamCommoditySourcesRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoDeliveryStreamCommoditySourcesRepeatingGroup returns an initialized, NoDeliveryStreamCommoditySourcesRepeatingGroup.
func NewNoDeliveryStreamCommoditySourcesRepeatingGroup() NoDeliveryStreamCommoditySourcesRepeatingGroup {
	return NoDeliveryStreamCommoditySourcesRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoDeliveryStreamCommoditySources,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.DeliveryStreamCommoditySource),
			},
		),
	}
}

// Add create and append a new NoDeliveryStreamCommoditySources to this group.
func (m NoDeliveryStreamCommoditySourcesRepeatingGroup) Add() NoDeliveryStreamCommoditySources {
	g := m.RepeatingGroup.Add()
	return NoDeliveryStreamCommoditySources{g}
}

// Get returns the ith NoDeliveryStreamCommoditySources in the NoDeliveryStreamCommoditySourcesRepeatinGroup.
func (m NoDeliveryStreamCommoditySourcesRepeatingGroup) Get(i int) NoDeliveryStreamCommoditySources {
	return NoDeliveryStreamCommoditySources{m.RepeatingGroup.Get(i)}
}

// NoDeliveryStreamCycles is a repeating group element, Tag 41081.
type NoDeliveryStreamCycles struct {
	*quickfix.Group
}

// SetDeliveryStreamCycleDesc sets DeliveryStreamCycleDesc, Tag 41082.
func (m NoDeliveryStreamCycles) SetDeliveryStreamCycleDesc(v string) {
	m.Set(field.NewDeliveryStreamCycleDesc(v))
}

// SetEncodedDeliveryStreamCycleDescLen sets EncodedDeliveryStreamCycleDescLen, Tag 41083.
func (m NoDeliveryStreamCycles) SetEncodedDeliveryStreamCycleDescLen(v int) {
	m.Set(field.NewEncodedDeliveryStreamCycleDescLen(v))
}

// SetEncodedDeliveryStreamCycleDesc sets EncodedDeliveryStreamCycleDesc, Tag 41084.
func (m NoDeliveryStreamCycles) SetEncodedDeliveryStreamCycleDesc(v string) {
	m.Set(field.NewEncodedDeliveryStreamCycleDesc(v))
}

// GetDeliveryStreamCycleDesc gets DeliveryStreamCycleDesc, Tag 41082.
func (m NoDeliveryStreamCycles) GetDeliveryStreamCycleDesc() (v string, err quickfix.MessageRejectError) {
	var f field.DeliveryStreamCycleDescField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetEncodedDeliveryStreamCycleDescLen gets EncodedDeliveryStreamCycleDescLen, Tag 41083.
func (m NoDeliveryStreamCycles) GetEncodedDeliveryStreamCycleDescLen() (v int, err quickfix.MessageRejectError) {
	var f field.EncodedDeliveryStreamCycleDescLenField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetEncodedDeliveryStreamCycleDesc gets EncodedDeliveryStreamCycleDesc, Tag 41084.
func (m NoDeliveryStreamCycles) GetEncodedDeliveryStreamCycleDesc() (v string, err quickfix.MessageRejectError) {
	var f field.EncodedDeliveryStreamCycleDescField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasDeliveryStreamCycleDesc returns true if DeliveryStreamCycleDesc is present, Tag 41082.
func (m NoDeliveryStreamCycles) HasDeliveryStreamCycleDesc() bool {
	return m.Has(tag.DeliveryStreamCycleDesc)
}

// HasEncodedDeliveryStreamCycleDescLen returns true if EncodedDeliveryStreamCycleDescLen is present, Tag 41083.
func (m NoDeliveryStreamCycles) HasEncodedDeliveryStreamCycleDescLen() bool {
	return m.Has(tag.EncodedDeliveryStreamCycleDescLen)
}

// HasEncodedDeliveryStreamCycleDesc returns true if EncodedDeliveryStreamCycleDesc is present, Tag 41084.
func (m NoDeliveryStreamCycles) HasEncodedDeliveryStreamCycleDesc() bool {
	return m.Has(tag.EncodedDeliveryStreamCycleDesc)
}

// NoDeliveryStreamCyclesRepeatingGroup is a repeating group, Tag 41081.
type NoDeliveryStreamCyclesRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoDeliveryStreamCyclesRepeatingGroup returns an initialized, NoDeliveryStreamCyclesRepeatingGroup.
func NewNoDeliveryStreamCyclesRepeatingGroup() NoDeliveryStreamCyclesRepeatingGroup {
	return NoDeliveryStreamCyclesRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoDeliveryStreamCycles,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.DeliveryStreamCycleDesc),
				quickfix.GroupElement(tag.EncodedDeliveryStreamCycleDescLen),
				quickfix.GroupElement(tag.EncodedDeliveryStreamCycleDesc),
			},
		),
	}
}

// Add create and append a new NoDeliveryStreamCycles to this group.
func (m NoDeliveryStreamCyclesRepeatingGroup) Add() NoDeliveryStreamCycles {
	g := m.RepeatingGroup.Add()
	return NoDeliveryStreamCycles{g}
}

// Get returns the ith NoDeliveryStreamCycles in the NoDeliveryStreamCyclesRepeatinGroup.
func (m NoDeliveryStreamCyclesRepeatingGroup) Get(i int) NoDeliveryStreamCycles {
	return NoDeliveryStreamCycles{m.RepeatingGroup.Get(i)}
}

// NoDeliverySchedules is a repeating group element, Tag 41037.
type NoDeliverySchedules struct {
	*quickfix.Group
}

// SetDeliveryScheduleType sets DeliveryScheduleType, Tag 41038.
func (m NoDeliverySchedules) SetDeliveryScheduleType(v enum.DeliveryScheduleType) {
	m.Set(field.NewDeliveryScheduleType(v))
}

// SetDeliveryScheduleXID sets DeliveryScheduleXID, Tag 41039.
func (m NoDeliverySchedules) SetDeliveryScheduleXID(v string) {
	m.Set(field.NewDeliveryScheduleXID(v))
}

// SetDeliveryScheduleNotional sets DeliveryScheduleNotional, Tag 41040.
func (m NoDeliverySchedules) SetDeliveryScheduleNotional(value decimal.Decimal, scale int32) {
	m.Set(field.NewDeliveryScheduleNotional(value, scale))
}

// SetDeliveryScheduleNotionalUnitOfMeasure sets DeliveryScheduleNotionalUnitOfMeasure, Tag 41041.
func (m NoDeliverySchedules) SetDeliveryScheduleNotionalUnitOfMeasure(v string) {
	m.Set(field.NewDeliveryScheduleNotionalUnitOfMeasure(v))
}

// SetDeliveryScheduleNotionalCommodityFrequency sets DeliveryScheduleNotionalCommodityFrequency, Tag 41042.
func (m NoDeliverySchedules) SetDeliveryScheduleNotionalCommodityFrequency(v int) {
	m.Set(field.NewDeliveryScheduleNotionalCommodityFrequency(v))
}

// SetDeliveryScheduleNegativeTolerance sets DeliveryScheduleNegativeTolerance, Tag 41043.
func (m NoDeliverySchedules) SetDeliveryScheduleNegativeTolerance(value decimal.Decimal, scale int32) {
	m.Set(field.NewDeliveryScheduleNegativeTolerance(value, scale))
}

// SetDeliverySchedulePositiveTolerance sets DeliverySchedulePositiveTolerance, Tag 41044.
func (m NoDeliverySchedules) SetDeliverySchedulePositiveTolerance(value decimal.Decimal, scale int32) {
	m.Set(field.NewDeliverySchedulePositiveTolerance(value, scale))
}

// SetDeliveryScheduleToleranceUnitOfMeasure sets DeliveryScheduleToleranceUnitOfMeasure, Tag 41045.
func (m NoDeliverySchedules) SetDeliveryScheduleToleranceUnitOfMeasure(v string) {
	m.Set(field.NewDeliveryScheduleToleranceUnitOfMeasure(v))
}

// SetDeliveryScheduleToleranceType sets DeliveryScheduleToleranceType, Tag 41046.
func (m NoDeliverySchedules) SetDeliveryScheduleToleranceType(v enum.DeliveryScheduleToleranceType) {
	m.Set(field.NewDeliveryScheduleToleranceType(v))
}

// SetDeliveryScheduleSettlCountry sets DeliveryScheduleSettlCountry, Tag 41047.
func (m NoDeliverySchedules) SetDeliveryScheduleSettlCountry(v string) {
	m.Set(field.NewDeliveryScheduleSettlCountry(v))
}

// SetDeliveryScheduleSettlTimeZone sets DeliveryScheduleSettlTimeZone, Tag 41048.
func (m NoDeliverySchedules) SetDeliveryScheduleSettlTimeZone(v string) {
	m.Set(field.NewDeliveryScheduleSettlTimeZone(v))
}

// SetDeliveryScheduleSettlFlowType sets DeliveryScheduleSettlFlowType, Tag 41049.
func (m NoDeliverySchedules) SetDeliveryScheduleSettlFlowType(v enum.DeliveryScheduleSettlFlowType) {
	m.Set(field.NewDeliveryScheduleSettlFlowType(v))
}

// SetDeliveryScheduleSettlHolidaysProcessingInstruction sets DeliveryScheduleSettlHolidaysProcessingInstruction, Tag 41050.
func (m NoDeliverySchedules) SetDeliveryScheduleSettlHolidaysProcessingInstruction(v enum.DeliveryScheduleSettlHolidaysProcessingInstruction) {
	m.Set(field.NewDeliveryScheduleSettlHolidaysProcessingInstruction(v))
}

// SetNoDeliveryScheduleSettlDays sets NoDeliveryScheduleSettlDays, Tag 41051.
func (m NoDeliverySchedules) SetNoDeliveryScheduleSettlDays(f NoDeliveryScheduleSettlDaysRepeatingGroup) {
	m.SetGroup(f)
}

// GetDeliveryScheduleType gets DeliveryScheduleType, Tag 41038.
func (m NoDeliverySchedules) GetDeliveryScheduleType() (v enum.DeliveryScheduleType, err quickfix.MessageRejectError) {
	var f field.DeliveryScheduleTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDeliveryScheduleXID gets DeliveryScheduleXID, Tag 41039.
func (m NoDeliverySchedules) GetDeliveryScheduleXID() (v string, err quickfix.MessageRejectError) {
	var f field.DeliveryScheduleXIDField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDeliveryScheduleNotional gets DeliveryScheduleNotional, Tag 41040.
func (m NoDeliverySchedules) GetDeliveryScheduleNotional() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.DeliveryScheduleNotionalField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDeliveryScheduleNotionalUnitOfMeasure gets DeliveryScheduleNotionalUnitOfMeasure, Tag 41041.
func (m NoDeliverySchedules) GetDeliveryScheduleNotionalUnitOfMeasure() (v string, err quickfix.MessageRejectError) {
	var f field.DeliveryScheduleNotionalUnitOfMeasureField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDeliveryScheduleNotionalCommodityFrequency gets DeliveryScheduleNotionalCommodityFrequency, Tag 41042.
func (m NoDeliverySchedules) GetDeliveryScheduleNotionalCommodityFrequency() (v int, err quickfix.MessageRejectError) {
	var f field.DeliveryScheduleNotionalCommodityFrequencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDeliveryScheduleNegativeTolerance gets DeliveryScheduleNegativeTolerance, Tag 41043.
func (m NoDeliverySchedules) GetDeliveryScheduleNegativeTolerance() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.DeliveryScheduleNegativeToleranceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDeliverySchedulePositiveTolerance gets DeliverySchedulePositiveTolerance, Tag 41044.
func (m NoDeliverySchedules) GetDeliverySchedulePositiveTolerance() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.DeliverySchedulePositiveToleranceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDeliveryScheduleToleranceUnitOfMeasure gets DeliveryScheduleToleranceUnitOfMeasure, Tag 41045.
func (m NoDeliverySchedules) GetDeliveryScheduleToleranceUnitOfMeasure() (v string, err quickfix.MessageRejectError) {
	var f field.DeliveryScheduleToleranceUnitOfMeasureField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDeliveryScheduleToleranceType gets DeliveryScheduleToleranceType, Tag 41046.
func (m NoDeliverySchedules) GetDeliveryScheduleToleranceType() (v enum.DeliveryScheduleToleranceType, err quickfix.MessageRejectError) {
	var f field.DeliveryScheduleToleranceTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDeliveryScheduleSettlCountry gets DeliveryScheduleSettlCountry, Tag 41047.
func (m NoDeliverySchedules) GetDeliveryScheduleSettlCountry() (v string, err quickfix.MessageRejectError) {
	var f field.DeliveryScheduleSettlCountryField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDeliveryScheduleSettlTimeZone gets DeliveryScheduleSettlTimeZone, Tag 41048.
func (m NoDeliverySchedules) GetDeliveryScheduleSettlTimeZone() (v string, err quickfix.MessageRejectError) {
	var f field.DeliveryScheduleSettlTimeZoneField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDeliveryScheduleSettlFlowType gets DeliveryScheduleSettlFlowType, Tag 41049.
func (m NoDeliverySchedules) GetDeliveryScheduleSettlFlowType() (v enum.DeliveryScheduleSettlFlowType, err quickfix.MessageRejectError) {
	var f field.DeliveryScheduleSettlFlowTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDeliveryScheduleSettlHolidaysProcessingInstruction gets DeliveryScheduleSettlHolidaysProcessingInstruction, Tag 41050.
func (m NoDeliverySchedules) GetDeliveryScheduleSettlHolidaysProcessingInstruction() (v enum.DeliveryScheduleSettlHolidaysProcessingInstruction, err quickfix.MessageRejectError) {
	var f field.DeliveryScheduleSettlHolidaysProcessingInstructionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoDeliveryScheduleSettlDays gets NoDeliveryScheduleSettlDays, Tag 41051.
func (m NoDeliverySchedules) GetNoDeliveryScheduleSettlDays() (NoDeliveryScheduleSettlDaysRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoDeliveryScheduleSettlDaysRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// HasDeliveryScheduleType returns true if DeliveryScheduleType is present, Tag 41038.
func (m NoDeliverySchedules) HasDeliveryScheduleType() bool {
	return m.Has(tag.DeliveryScheduleType)
}

// HasDeliveryScheduleXID returns true if DeliveryScheduleXID is present, Tag 41039.
func (m NoDeliverySchedules) HasDeliveryScheduleXID() bool {
	return m.Has(tag.DeliveryScheduleXID)
}

// HasDeliveryScheduleNotional returns true if DeliveryScheduleNotional is present, Tag 41040.
func (m NoDeliverySchedules) HasDeliveryScheduleNotional() bool {
	return m.Has(tag.DeliveryScheduleNotional)
}

// HasDeliveryScheduleNotionalUnitOfMeasure returns true if DeliveryScheduleNotionalUnitOfMeasure is present, Tag 41041.
func (m NoDeliverySchedules) HasDeliveryScheduleNotionalUnitOfMeasure() bool {
	return m.Has(tag.DeliveryScheduleNotionalUnitOfMeasure)
}

// HasDeliveryScheduleNotionalCommodityFrequency returns true if DeliveryScheduleNotionalCommodityFrequency is present, Tag 41042.
func (m NoDeliverySchedules) HasDeliveryScheduleNotionalCommodityFrequency() bool {
	return m.Has(tag.DeliveryScheduleNotionalCommodityFrequency)
}

// HasDeliveryScheduleNegativeTolerance returns true if DeliveryScheduleNegativeTolerance is present, Tag 41043.
func (m NoDeliverySchedules) HasDeliveryScheduleNegativeTolerance() bool {
	return m.Has(tag.DeliveryScheduleNegativeTolerance)
}

// HasDeliverySchedulePositiveTolerance returns true if DeliverySchedulePositiveTolerance is present, Tag 41044.
func (m NoDeliverySchedules) HasDeliverySchedulePositiveTolerance() bool {
	return m.Has(tag.DeliverySchedulePositiveTolerance)
}

// HasDeliveryScheduleToleranceUnitOfMeasure returns true if DeliveryScheduleToleranceUnitOfMeasure is present, Tag 41045.
func (m NoDeliverySchedules) HasDeliveryScheduleToleranceUnitOfMeasure() bool {
	return m.Has(tag.DeliveryScheduleToleranceUnitOfMeasure)
}

// HasDeliveryScheduleToleranceType returns true if DeliveryScheduleToleranceType is present, Tag 41046.
func (m NoDeliverySchedules) HasDeliveryScheduleToleranceType() bool {
	return m.Has(tag.DeliveryScheduleToleranceType)
}

// HasDeliveryScheduleSettlCountry returns true if DeliveryScheduleSettlCountry is present, Tag 41047.
func (m NoDeliverySchedules) HasDeliveryScheduleSettlCountry() bool {
	return m.Has(tag.DeliveryScheduleSettlCountry)
}

// HasDeliveryScheduleSettlTimeZone returns true if DeliveryScheduleSettlTimeZone is present, Tag 41048.
func (m NoDeliverySchedules) HasDeliveryScheduleSettlTimeZone() bool {
	return m.Has(tag.DeliveryScheduleSettlTimeZone)
}

// HasDeliveryScheduleSettlFlowType returns true if DeliveryScheduleSettlFlowType is present, Tag 41049.
func (m NoDeliverySchedules) HasDeliveryScheduleSettlFlowType() bool {
	return m.Has(tag.DeliveryScheduleSettlFlowType)
}

// HasDeliveryScheduleSettlHolidaysProcessingInstruction returns true if DeliveryScheduleSettlHolidaysProcessingInstruction is present, Tag 41050.
func (m NoDeliverySchedules) HasDeliveryScheduleSettlHolidaysProcessingInstruction() bool {
	return m.Has(tag.DeliveryScheduleSettlHolidaysProcessingInstruction)
}

// HasNoDeliveryScheduleSettlDays returns true if NoDeliveryScheduleSettlDays is present, Tag 41051.
func (m NoDeliverySchedules) HasNoDeliveryScheduleSettlDays() bool {
	return m.Has(tag.NoDeliveryScheduleSettlDays)
}

// NoDeliveryScheduleSettlDays is a repeating group element, Tag 41051.
type NoDeliveryScheduleSettlDays struct {
	*quickfix.Group
}

// SetDeliveryScheduleSettlDay sets DeliveryScheduleSettlDay, Tag 41052.
func (m NoDeliveryScheduleSettlDays) SetDeliveryScheduleSettlDay(v enum.DeliveryScheduleSettlDay) {
	m.Set(field.NewDeliveryScheduleSettlDay(v))
}

// SetDeliveryScheduleSettlTotalHours sets DeliveryScheduleSettlTotalHours, Tag 41053.
func (m NoDeliveryScheduleSettlDays) SetDeliveryScheduleSettlTotalHours(v int) {
	m.Set(field.NewDeliveryScheduleSettlTotalHours(v))
}

// SetNoDeliveryScheduleSettlTimes sets NoDeliveryScheduleSettlTimes, Tag 41054.
func (m NoDeliveryScheduleSettlDays) SetNoDeliveryScheduleSettlTimes(f NoDeliveryScheduleSettlTimesRepeatingGroup) {
	m.SetGroup(f)
}

// GetDeliveryScheduleSettlDay gets DeliveryScheduleSettlDay, Tag 41052.
func (m NoDeliveryScheduleSettlDays) GetDeliveryScheduleSettlDay() (v enum.DeliveryScheduleSettlDay, err quickfix.MessageRejectError) {
	var f field.DeliveryScheduleSettlDayField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDeliveryScheduleSettlTotalHours gets DeliveryScheduleSettlTotalHours, Tag 41053.
func (m NoDeliveryScheduleSettlDays) GetDeliveryScheduleSettlTotalHours() (v int, err quickfix.MessageRejectError) {
	var f field.DeliveryScheduleSettlTotalHoursField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoDeliveryScheduleSettlTimes gets NoDeliveryScheduleSettlTimes, Tag 41054.
func (m NoDeliveryScheduleSettlDays) GetNoDeliveryScheduleSettlTimes() (NoDeliveryScheduleSettlTimesRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoDeliveryScheduleSettlTimesRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// HasDeliveryScheduleSettlDay returns true if DeliveryScheduleSettlDay is present, Tag 41052.
func (m NoDeliveryScheduleSettlDays) HasDeliveryScheduleSettlDay() bool {
	return m.Has(tag.DeliveryScheduleSettlDay)
}

// HasDeliveryScheduleSettlTotalHours returns true if DeliveryScheduleSettlTotalHours is present, Tag 41053.
func (m NoDeliveryScheduleSettlDays) HasDeliveryScheduleSettlTotalHours() bool {
	return m.Has(tag.DeliveryScheduleSettlTotalHours)
}

// HasNoDeliveryScheduleSettlTimes returns true if NoDeliveryScheduleSettlTimes is present, Tag 41054.
func (m NoDeliveryScheduleSettlDays) HasNoDeliveryScheduleSettlTimes() bool {
	return m.Has(tag.NoDeliveryScheduleSettlTimes)
}

// NoDeliveryScheduleSettlTimes is a repeating group element, Tag 41054.
type NoDeliveryScheduleSettlTimes struct {
	*quickfix.Group
}

// SetDeliveryScheduleSettlStart sets DeliveryScheduleSettlStart, Tag 41055.
func (m NoDeliveryScheduleSettlTimes) SetDeliveryScheduleSettlStart(v string) {
	m.Set(field.NewDeliveryScheduleSettlStart(v))
}

// SetDeliveryScheduleSettlEnd sets DeliveryScheduleSettlEnd, Tag 41056.
func (m NoDeliveryScheduleSettlTimes) SetDeliveryScheduleSettlEnd(v string) {
	m.Set(field.NewDeliveryScheduleSettlEnd(v))
}

// SetDeliveryScheduleSettlTimeType sets DeliveryScheduleSettlTimeType, Tag 41057.
func (m NoDeliveryScheduleSettlTimes) SetDeliveryScheduleSettlTimeType(v enum.DeliveryScheduleSettlTimeType) {
	m.Set(field.NewDeliveryScheduleSettlTimeType(v))
}

// GetDeliveryScheduleSettlStart gets DeliveryScheduleSettlStart, Tag 41055.
func (m NoDeliveryScheduleSettlTimes) GetDeliveryScheduleSettlStart() (v string, err quickfix.MessageRejectError) {
	var f field.DeliveryScheduleSettlStartField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDeliveryScheduleSettlEnd gets DeliveryScheduleSettlEnd, Tag 41056.
func (m NoDeliveryScheduleSettlTimes) GetDeliveryScheduleSettlEnd() (v string, err quickfix.MessageRejectError) {
	var f field.DeliveryScheduleSettlEndField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDeliveryScheduleSettlTimeType gets DeliveryScheduleSettlTimeType, Tag 41057.
func (m NoDeliveryScheduleSettlTimes) GetDeliveryScheduleSettlTimeType() (v enum.DeliveryScheduleSettlTimeType, err quickfix.MessageRejectError) {
	var f field.DeliveryScheduleSettlTimeTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasDeliveryScheduleSettlStart returns true if DeliveryScheduleSettlStart is present, Tag 41055.
func (m NoDeliveryScheduleSettlTimes) HasDeliveryScheduleSettlStart() bool {
	return m.Has(tag.DeliveryScheduleSettlStart)
}

// HasDeliveryScheduleSettlEnd returns true if DeliveryScheduleSettlEnd is present, Tag 41056.
func (m NoDeliveryScheduleSettlTimes) HasDeliveryScheduleSettlEnd() bool {
	return m.Has(tag.DeliveryScheduleSettlEnd)
}

// HasDeliveryScheduleSettlTimeType returns true if DeliveryScheduleSettlTimeType is present, Tag 41057.
func (m NoDeliveryScheduleSettlTimes) HasDeliveryScheduleSettlTimeType() bool {
	return m.Has(tag.DeliveryScheduleSettlTimeType)
}

// NoDeliveryScheduleSettlTimesRepeatingGroup is a repeating group, Tag 41054.
type NoDeliveryScheduleSettlTimesRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoDeliveryScheduleSettlTimesRepeatingGroup returns an initialized, NoDeliveryScheduleSettlTimesRepeatingGroup.
func NewNoDeliveryScheduleSettlTimesRepeatingGroup() NoDeliveryScheduleSettlTimesRepeatingGroup {
	return NoDeliveryScheduleSettlTimesRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoDeliveryScheduleSettlTimes,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.DeliveryScheduleSettlStart),
				quickfix.GroupElement(tag.DeliveryScheduleSettlEnd),
				quickfix.GroupElement(tag.DeliveryScheduleSettlTimeType),
			},
		),
	}
}

// Add create and append a new NoDeliveryScheduleSettlTimes to this group.
func (m NoDeliveryScheduleSettlTimesRepeatingGroup) Add() NoDeliveryScheduleSettlTimes {
	g := m.RepeatingGroup.Add()
	return NoDeliveryScheduleSettlTimes{g}
}

// Get returns the ith NoDeliveryScheduleSettlTimes in the NoDeliveryScheduleSettlTimesRepeatinGroup.
func (m NoDeliveryScheduleSettlTimesRepeatingGroup) Get(i int) NoDeliveryScheduleSettlTimes {
	return NoDeliveryScheduleSettlTimes{m.RepeatingGroup.Get(i)}
}

// NoDeliveryScheduleSettlDaysRepeatingGroup is a repeating group, Tag 41051.
type NoDeliveryScheduleSettlDaysRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoDeliveryScheduleSettlDaysRepeatingGroup returns an initialized, NoDeliveryScheduleSettlDaysRepeatingGroup.
func NewNoDeliveryScheduleSettlDaysRepeatingGroup() NoDeliveryScheduleSettlDaysRepeatingGroup {
	return NoDeliveryScheduleSettlDaysRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoDeliveryScheduleSettlDays,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.DeliveryScheduleSettlDay),
				quickfix.GroupElement(tag.DeliveryScheduleSettlTotalHours),
				NewNoDeliveryScheduleSettlTimesRepeatingGroup(),
			},
		),
	}
}

// Add create and append a new NoDeliveryScheduleSettlDays to this group.
func (m NoDeliveryScheduleSettlDaysRepeatingGroup) Add() NoDeliveryScheduleSettlDays {
	g := m.RepeatingGroup.Add()
	return NoDeliveryScheduleSettlDays{g}
}

// Get returns the ith NoDeliveryScheduleSettlDays in the NoDeliveryScheduleSettlDaysRepeatinGroup.
func (m NoDeliveryScheduleSettlDaysRepeatingGroup) Get(i int) NoDeliveryScheduleSettlDays {
	return NoDeliveryScheduleSettlDays{m.RepeatingGroup.Get(i)}
}

// NoDeliverySchedulesRepeatingGroup is a repeating group, Tag 41037.
type NoDeliverySchedulesRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoDeliverySchedulesRepeatingGroup returns an initialized, NoDeliverySchedulesRepeatingGroup.
func NewNoDeliverySchedulesRepeatingGroup() NoDeliverySchedulesRepeatingGroup {
	return NoDeliverySchedulesRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoDeliverySchedules,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.DeliveryScheduleType),
				quickfix.GroupElement(tag.DeliveryScheduleXID),
				quickfix.GroupElement(tag.DeliveryScheduleNotional),
				quickfix.GroupElement(tag.DeliveryScheduleNotionalUnitOfMeasure),
				quickfix.GroupElement(tag.DeliveryScheduleNotionalCommodityFrequency),
				quickfix.GroupElement(tag.DeliveryScheduleNegativeTolerance),
				quickfix.GroupElement(tag.DeliverySchedulePositiveTolerance),
				quickfix.GroupElement(tag.DeliveryScheduleToleranceUnitOfMeasure),
				quickfix.GroupElement(tag.DeliveryScheduleToleranceType),
				quickfix.GroupElement(tag.DeliveryScheduleSettlCountry),
				quickfix.GroupElement(tag.DeliveryScheduleSettlTimeZone),
				quickfix.GroupElement(tag.DeliveryScheduleSettlFlowType),
				quickfix.GroupElement(tag.DeliveryScheduleSettlHolidaysProcessingInstruction),
				NewNoDeliveryScheduleSettlDaysRepeatingGroup(),
			},
		),
	}
}

// Add create and append a new NoDeliverySchedules to this group.
func (m NoDeliverySchedulesRepeatingGroup) Add() NoDeliverySchedules {
	g := m.RepeatingGroup.Add()
	return NoDeliverySchedules{g}
}

// Get returns the ith NoDeliverySchedules in the NoDeliverySchedulesRepeatinGroup.
func (m NoDeliverySchedulesRepeatingGroup) Get(i int) NoDeliverySchedules {
	return NoDeliverySchedules{m.RepeatingGroup.Get(i)}
}

// NoStreamsRepeatingGroup is a repeating group, Tag 40049.
type NoStreamsRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoStreamsRepeatingGroup returns an initialized, NoStreamsRepeatingGroup.
func NewNoStreamsRepeatingGroup() NoStreamsRepeatingGroup {
	return NoStreamsRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoStreams,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.StreamType),
				quickfix.GroupElement(tag.StreamDesc),
				quickfix.GroupElement(tag.StreamPaySide),
				quickfix.GroupElement(tag.StreamReceiveSide),
				quickfix.GroupElement(tag.StreamNotional),
				quickfix.GroupElement(tag.StreamCurrency),
				quickfix.GroupElement(tag.StreamEffectiveDateUnadjusted),
				quickfix.GroupElement(tag.StreamEffectiveDateBusinessDayConvention),
				NewNoStreamEffectiveBusinessCentersRepeatingGroup(),
				quickfix.GroupElement(tag.StreamEffectiveDateRelativeTo),
				quickfix.GroupElement(tag.StreamEffectiveDateOffsetPeriod),
				quickfix.GroupElement(tag.StreamEffectiveDateOffsetUnit),
				quickfix.GroupElement(tag.StreamEffectiveDateOffsetDayType),
				quickfix.GroupElement(tag.StreamEffectiveDateAdjusted),
				quickfix.GroupElement(tag.StreamTerminationDateUnadjusted),
				quickfix.GroupElement(tag.StreamTerminationDateBusinessDayConvention),
				NewNoStreamTerminationDateBusinessCentersRepeatingGroup(),
				quickfix.GroupElement(tag.StreamTerminationDateRelativeTo),
				quickfix.GroupElement(tag.StreamTerminationDateOffsetPeriod),
				quickfix.GroupElement(tag.StreamTerminationDateOffsetUnit),
				quickfix.GroupElement(tag.StreamTerminationDateOffsetDayType),
				quickfix.GroupElement(tag.StreamTerminationDateAdjusted),
				quickfix.GroupElement(tag.StreamCalculationPeriodBusinessDayConvention),
				NewNoStreamCalculationPeriodBusinessCentersRepeatingGroup(),
				quickfix.GroupElement(tag.StreamFirstPeriodStartDateUnadjusted),
				quickfix.GroupElement(tag.StreamFirstPeriodStartDateBusinessDayConvention),
				NewNoStreamFirstPeriodStartDateBusinessCentersRepeatingGroup(),
				quickfix.GroupElement(tag.StreamFirstPeriodStartDateAdjusted),
				quickfix.GroupElement(tag.StreamFirstRegularPeriodStartDateUnadjusted),
				quickfix.GroupElement(tag.StreamFirstCompoundingPeriodEndDateUnadjusted),
				quickfix.GroupElement(tag.StreamLastRegularPeriodEndDateUnadjusted),
				quickfix.GroupElement(tag.StreamCalculationFrequencyPeriod),
				quickfix.GroupElement(tag.StreamCalculationFrequencyUnit),
				quickfix.GroupElement(tag.StreamCalculationRollConvention),
				quickfix.GroupElement(tag.StreamCalculationPeriodDatesXID),
				quickfix.GroupElement(tag.StreamCalculationPeriodDatesXIDRef),
				NewNoStreamCalculationPeriodDatesRepeatingGroup(),
				quickfix.GroupElement(tag.StreamCalculationBalanceOfFirstPeriod),
				quickfix.GroupElement(tag.StreamCalculationCorrectionPeriod),
				quickfix.GroupElement(tag.StreamCalculationCorrectionUnit),
				quickfix.GroupElement(tag.PaymentStreamType),
				quickfix.GroupElement(tag.PaymentStreamMarketRate),
				quickfix.GroupElement(tag.PaymentStreamDelayIndicator),
				quickfix.GroupElement(tag.PaymentStreamSettlCurrency),
				quickfix.GroupElement(tag.PaymentStreamDayCount),
				quickfix.GroupElement(tag.PaymentStreamAccrualDays),
				quickfix.GroupElement(tag.PaymentStreamDiscountType),
				quickfix.GroupElement(tag.PaymentStreamDiscountRate),
				quickfix.GroupElement(tag.PaymentStreamDiscountRateDayCount),
				quickfix.GroupElement(tag.PaymentStreamCompoundingMethod),
				quickfix.GroupElement(tag.PaymentStreamInitialPrincipalExchangeIndicator),
				quickfix.GroupElement(tag.PaymentStreamInterimPrincipalExchangeIndicator),
				quickfix.GroupElement(tag.PaymentStreamFinalPrincipalExchangeIndicator),
				quickfix.GroupElement(tag.PaymentStreamPaymentDateBusinessDayConvention),
				NewNoPaymentStreamPaymentDateBusinessCentersRepeatingGroup(),
				quickfix.GroupElement(tag.PaymentStreamPaymentFrequencyPeriod),
				quickfix.GroupElement(tag.PaymentStreamPaymentFrequencyUnit),
				quickfix.GroupElement(tag.PaymentStreamPaymentRollConvention),
				quickfix.GroupElement(tag.PaymentStreamFirstPaymentDateUnadjusted),
				quickfix.GroupElement(tag.PaymentStreamLastRegularPaymentDateUnadjusted),
				quickfix.GroupElement(tag.PaymentStreamPaymentDateRelativeTo),
				quickfix.GroupElement(tag.PaymentStreamPaymentDateOffsetPeriod),
				quickfix.GroupElement(tag.PaymentStreamPaymentDateOffsetUnit),
				quickfix.GroupElement(tag.PaymentStreamPaymentDateOffsetDayType),
				NewNoPaymentStreamPaymentDatesRepeatingGroup(),
				quickfix.GroupElement(tag.PaymentStreamMasterAgreementPaymentDatesIndicator),
				quickfix.GroupElement(tag.PaymentStreamFinalPricePaymentDateUnadjusted),
				quickfix.GroupElement(tag.PaymentStreamFinalPricePaymentDateRelativeTo),
				quickfix.GroupElement(tag.PaymentStreamFinalPricePaymentDateOffsetfPeriod),
				quickfix.GroupElement(tag.PaymentStreamFinalPricePaymentDateOffsetUnit),
				quickfix.GroupElement(tag.PaymentStreamFinalPricePaymentDateOffsetDayType),
				quickfix.GroupElement(tag.PaymentStreamFinalPricePaymentDateAdjusted),
				quickfix.GroupElement(tag.PaymentStreamResetDateRelativeTo),
				quickfix.GroupElement(tag.PaymentStreamResetDateBusinessDayConvention),
				NewNoPaymentStreamResetDateBusinessCentersRepeatingGroup(),
				quickfix.GroupElement(tag.PaymentStreamResetFrequencyPeriod),
				quickfix.GroupElement(tag.PaymentStreamResetFrequencyUnit),
				quickfix.GroupElement(tag.PaymentStreamResetWeeklyRollConvention),
				quickfix.GroupElement(tag.PaymentStreamInitialFixingDateRelativeTo),
				quickfix.GroupElement(tag.PaymentStreamInitialFixingDateBusinessDayConvention),
				NewNoPaymentStreamInitialFixingDateBusinessCentersRepeatingGroup(),
				quickfix.GroupElement(tag.PaymentStreamInitialFixingDateOffsetPeriod),
				quickfix.GroupElement(tag.PaymentStreamInitialFixingDateOffsetUnit),
				quickfix.GroupElement(tag.PaymentStreamInitialFixingDateOffsetDayType),
				quickfix.GroupElement(tag.PaymentStreamInitialFixingDateAdjusted),
				quickfix.GroupElement(tag.PaymentStreamFixingDateRelativeTo),
				quickfix.GroupElement(tag.PaymentStreamFixingDateBusinessDayConvention),
				NewNoPaymentStreamFixingDateBusinessCentersRepeatingGroup(),
				quickfix.GroupElement(tag.PaymentStreamFixingDateOffsetPeriod),
				quickfix.GroupElement(tag.PaymentStreamFixingDateOffsetUnit),
				quickfix.GroupElement(tag.PaymentStreamFixingDateOffsetDayType),
				quickfix.GroupElement(tag.PaymentStreamFixingDateAdjusted),
				quickfix.GroupElement(tag.PaymentStreamRateCutoffDateOffsetPeriod),
				quickfix.GroupElement(tag.PaymentStreamRateCutoffDateOffsetUnit),
				quickfix.GroupElement(tag.PaymentStreamRateCutoffDateOffsetDayType),
				NewNoPaymentStreamFixingDatesRepeatingGroup(),
				quickfix.GroupElement(tag.PaymentStreamRate),
				quickfix.GroupElement(tag.PaymentStreamFixedAmount),
				quickfix.GroupElement(tag.PaymentStreamRateOrAmountCurrency),
				quickfix.GroupElement(tag.PaymentStreamFutureValueNotional),
				quickfix.GroupElement(tag.PaymentStreamFutureValueDateAdjusted),
				quickfix.GroupElement(tag.PaymentStreamFixedAmountUnitOfMeasure),
				quickfix.GroupElement(tag.PaymentStreamTotalFixedAmount),
				quickfix.GroupElement(tag.PaymentStreamWorldScaleRate),
				quickfix.GroupElement(tag.PaymentStreamContractPrice),
				quickfix.GroupElement(tag.PaymentStreamContractPriceCurrency),
				quickfix.GroupElement(tag.PaymentStreamRateIndex),
				quickfix.GroupElement(tag.PaymentStreamRateIndexSource),
				quickfix.GroupElement(tag.PaymentStreamRateIndexCurveUnit),
				quickfix.GroupElement(tag.PaymentStreamRateIndexCurvePeriod),
				quickfix.GroupElement(tag.PaymentStreamRateMultiplier),
				quickfix.GroupElement(tag.PaymentStreamRateSpread),
				quickfix.GroupElement(tag.PaymentStreamRateSpreadPositionType),
				quickfix.GroupElement(tag.PaymentStreamRateTreatment),
				quickfix.GroupElement(tag.PaymentStreamCapRate),
				quickfix.GroupElement(tag.PaymentStreamCapRateBuySide),
				quickfix.GroupElement(tag.PaymentStreamCapRateSellSide),
				quickfix.GroupElement(tag.PaymentStreamFloorRate),
				quickfix.GroupElement(tag.PaymentStreamFloorRateBuySide),
				quickfix.GroupElement(tag.PaymentStreamFloorRateSellSide),
				quickfix.GroupElement(tag.PaymentStreamInitialRate),
				quickfix.GroupElement(tag.PaymentStreamFinalRateRoundingDirection),
				quickfix.GroupElement(tag.PaymentStreamFinalRatePrecision),
				quickfix.GroupElement(tag.PaymentStreamAveragingMethod),
				quickfix.GroupElement(tag.PaymentStreamNegativeRateTreatment),
				quickfix.GroupElement(tag.PaymentStreamInflationLagPeriod),
				quickfix.GroupElement(tag.PaymentStreamInflationLagUnit),
				quickfix.GroupElement(tag.PaymentStreamInflationLagDayType),
				quickfix.GroupElement(tag.PaymentStreamInflationInterpolationMethod),
				quickfix.GroupElement(tag.PaymentStreamInflationIndexSource),
				quickfix.GroupElement(tag.PaymentStreamInflationPublicationSource),
				quickfix.GroupElement(tag.PaymentStreamInflationInitialIndexLevel),
				quickfix.GroupElement(tag.PaymentStreamInflationFallbackBondApplicable),
				quickfix.GroupElement(tag.PaymentStreamFRADiscounting),
				quickfix.GroupElement(tag.PaymentStreamRateIndex2CurvePeriod),
				quickfix.GroupElement(tag.PaymentStreamRateIndex2CurveUnit),
				quickfix.GroupElement(tag.PaymentStreamRateIndexLocation),
				quickfix.GroupElement(tag.PaymentStreamRateIndexLevel),
				quickfix.GroupElement(tag.PaymentStreamRateIndexUnitOfMeasure),
				quickfix.GroupElement(tag.PaymentStreamSettlLevel),
				quickfix.GroupElement(tag.PaymentStreamReferenceLevel),
				quickfix.GroupElement(tag.PaymentStreamReferenceLevelUnitOfMeasure),
				quickfix.GroupElement(tag.PaymentStreamReferenceLevelEqualsZeroIndicator),
				quickfix.GroupElement(tag.PaymentStreamRateSpreadCurrency),
				quickfix.GroupElement(tag.PaymentStreamRateSpreadUnitOfMeasure),
				quickfix.GroupElement(tag.PaymentStreamRateConversionFactor),
				quickfix.GroupElement(tag.PaymentStreamRateSpreadType),
				quickfix.GroupElement(tag.PaymentStreamLastResetRate),
				quickfix.GroupElement(tag.PaymentStreamFinalRate),
				quickfix.GroupElement(tag.PaymentStreamCalculationLagPeriod),
				quickfix.GroupElement(tag.PaymentStreamCalculationLagUnit),
				quickfix.GroupElement(tag.PaymentStreamFirstObservationDateOffsetPeriod),
				quickfix.GroupElement(tag.PaymentStreamFirstObservationDateOffsetUnit),
				quickfix.GroupElement(tag.PaymentStreamPricingDayType),
				quickfix.GroupElement(tag.PaymentStreamPricingDayDistribution),
				quickfix.GroupElement(tag.PaymentStreamPricingDayCount),
				quickfix.GroupElement(tag.PaymentStreamPricingBusinessCalendar),
				quickfix.GroupElement(tag.PaymentStreamPricingBusinessDayConvention),
				NewNoPaymentStreamPricingBusinessCentersRepeatingGroup(),
				NewNoPaymentStreamPricingDaysRepeatingGroup(),
				NewNoPaymentStreamPricingDatesRepeatingGroup(),
				quickfix.GroupElement(tag.PaymentStreamFirstObservationDateUnadjusted),
				quickfix.GroupElement(tag.PaymentStreamFirstObservationDateRelativeTo),
				quickfix.GroupElement(tag.PaymentStreamFirstObservationDateOffsetDayType),
				quickfix.GroupElement(tag.PaymentStreamFirstObservationDateAdjusted),
				quickfix.GroupElement(tag.PaymentStreamUnderlierRefID),
				quickfix.GroupElement(tag.PaymentStreamFormulaCurrency),
				quickfix.GroupElement(tag.PaymentStreamFormulaCurrencyDeterminationMethod),
				quickfix.GroupElement(tag.PaymentStreamFormulaReferenceAmount),
				NewNoPaymentStreamFormulasRepeatingGroup(),
				quickfix.GroupElement(tag.PaymentStreamFormulaImageLength),
				quickfix.GroupElement(tag.PaymentStreamFormulaImage),
				quickfix.GroupElement(tag.DividendReinvestmentIndicator),
				quickfix.GroupElement(tag.DividendEntitlementEvent),
				quickfix.GroupElement(tag.DividendAmountType),
				quickfix.GroupElement(tag.DividendUnderlierRefID),
				NewNoDividendPeriodsRepeatingGroup(),
				quickfix.GroupElement(tag.ExtraordinaryDividendPartySide),
				quickfix.GroupElement(tag.ExtraordinaryDividendAmountType),
				quickfix.GroupElement(tag.ExtraordinaryDividendCurrency),
				quickfix.GroupElement(tag.ExtraordinaryDividendDeterminationMethod),
				quickfix.GroupElement(tag.DividendFXTriggerDateRelativeTo),
				quickfix.GroupElement(tag.DividendFXTriggerDateOffsetPeriod),
				quickfix.GroupElement(tag.DividendFXTriggerDateOffsetUnit),
				quickfix.GroupElement(tag.DividendFXTriggerDateOffsetDayType),
				quickfix.GroupElement(tag.DividendFXTriggerDateUnadjusted),
				quickfix.GroupElement(tag.DividendFXTriggerDateBusinessDayConvention),
				NewNoDividendFXTriggerDateBusinessCentersRepeatingGroup(),
				quickfix.GroupElement(tag.DividendFXTriggerDateAdjusted),
				quickfix.GroupElement(tag.DividendFloatingRateIndex),
				quickfix.GroupElement(tag.DividendFloatingRateIndexCurvePeriod),
				quickfix.GroupElement(tag.DividendFloatingRateIndexCurveUnit),
				quickfix.GroupElement(tag.DividendFloatingRateMultiplier),
				quickfix.GroupElement(tag.DividendFloatingRateSpread),
				quickfix.GroupElement(tag.DividendFloatingRateSpreadPositionType),
				quickfix.GroupElement(tag.DividendFloatingRateTreatment),
				quickfix.GroupElement(tag.DividendCapRate),
				quickfix.GroupElement(tag.DividendCapRateBuySide),
				quickfix.GroupElement(tag.DividendCapRateSellSide),
				quickfix.GroupElement(tag.DividendFloorRate),
				quickfix.GroupElement(tag.DividendFloorRateBuySide),
				quickfix.GroupElement(tag.DividendFloorRateSellSide),
				quickfix.GroupElement(tag.DividendInitialRate),
				quickfix.GroupElement(tag.DividendFinalRateRoundingDirection),
				quickfix.GroupElement(tag.DividendFinalRatePrecision),
				quickfix.GroupElement(tag.DividendAveragingMethod),
				quickfix.GroupElement(tag.DividendNegativeRateTreatment),
				quickfix.GroupElement(tag.DividendAccrualFixedRate),
				quickfix.GroupElement(tag.DividendAccrualPaymentDateRelativeTo),
				quickfix.GroupElement(tag.DividendAccrualPaymentDateOffsetPeriod),
				quickfix.GroupElement(tag.DividendAccrualPaymentDateOffsetUnit),
				quickfix.GroupElement(tag.DividendAccrualPaymentDateOffsetDayType),
				quickfix.GroupElement(tag.DividendAccrualPaymentDateUnadjusted),
				quickfix.GroupElement(tag.DividendAccrualPaymeentDateBusinessDayConvention),
				NewNoDividendAccrualPaymentDateBusinessCentersRepeatingGroup(),
				quickfix.GroupElement(tag.DividendAccrualPaymentDateAdjusted),
				quickfix.GroupElement(tag.DividendCompoundingMethod),
				quickfix.GroupElement(tag.DividendNumOfIndexUnits),
				quickfix.GroupElement(tag.DividendCashPercentage),
				quickfix.GroupElement(tag.DividendCashEquivalentPercentage),
				quickfix.GroupElement(tag.NonCashDividendTreatment),
				quickfix.GroupElement(tag.DividendComposition),
				quickfix.GroupElement(tag.SpecialDividendsIndicator),
				quickfix.GroupElement(tag.MaterialDividendsIndicator),
				quickfix.GroupElement(tag.OptionsExchangeDividendsIndicator),
				quickfix.GroupElement(tag.AdditionalDividendsIndicator),
				quickfix.GroupElement(tag.AllDividendsIndicator),
				quickfix.GroupElement(tag.ReturnRateNotionalReset),
				NewNoReturnRatesRepeatingGroup(),
				quickfix.GroupElement(tag.PaymentStreamLinkInitialLevel),
				quickfix.GroupElement(tag.PaymentStreamLinkClosingLevelIndicator),
				quickfix.GroupElement(tag.PaymentStreamLinkExpiringLevelIndicator),
				quickfix.GroupElement(tag.PaymentStreamLinkEstimatedTradingDays),
				quickfix.GroupElement(tag.PaymentStreamLinkStrikePrice),
				quickfix.GroupElement(tag.PaymentStreamLinkStrikePriceType),
				quickfix.GroupElement(tag.PaymentStreamLinkMaximumBoundary),
				quickfix.GroupElement(tag.PaymentStreamLinkMinimumBoundary),
				quickfix.GroupElement(tag.PaymentStreamLinkNumberOfDataSeries),
				quickfix.GroupElement(tag.PaymentStreamVarianceUnadjustedCap),
				quickfix.GroupElement(tag.PaymentStreamRealizedVarianceMethod),
				quickfix.GroupElement(tag.PaymentStreamDaysAdjustmentIndicator),
				quickfix.GroupElement(tag.PaymentStreamNearestExchangeContractRefID),
				quickfix.GroupElement(tag.PaymentStreamVegaNotionalAmount),
				quickfix.GroupElement(tag.PaymentStreamRateIndexID),
				quickfix.GroupElement(tag.PaymentStreamRateIndexIDSource),
				quickfix.GroupElement(tag.PaymentStreamNonDeliverableRefCurrency),
				quickfix.GroupElement(tag.PaymentStreamNonDeliverableFixingDatesBusinessDayConvention),
				NewNoPaymentStreamNonDeliverableFixingDatesBusinessCentersRepeatingGroup(),
				quickfix.GroupElement(tag.PaymentStreamNonDeliverableFixingDatesRelativeTo),
				quickfix.GroupElement(tag.PaymentStreamNonDeliverableFixingDatesOffsetPeriod),
				quickfix.GroupElement(tag.PaymentStreamNonDeliverableFixingDatesOffsetUnit),
				quickfix.GroupElement(tag.PaymentStreamNonDeliverableFixingDatesOffsetDayType),
				quickfix.GroupElement(tag.PaymentStreamNonDeliverableSettlRateSource),
				quickfix.GroupElement(tag.PaymentStreamNonDeliverableSettlReferencePage),
				NewNoNonDeliverableFixingDatesRepeatingGroup(),
				NewNoSettlRateFallbacksRepeatingGroup(),
				quickfix.GroupElement(tag.PaymentStreamFlatRateIndicator),
				quickfix.GroupElement(tag.PaymentStreamFlatRateAmount),
				quickfix.GroupElement(tag.PaymentStreamFlatRateCurrency),
				quickfix.GroupElement(tag.PaymentStreamMaximumPaymentAmount),
				quickfix.GroupElement(tag.PaymentStreamMaximumPaymentCurrency),
				quickfix.GroupElement(tag.PaymentStreamMaximumTransactionAmount),
				quickfix.GroupElement(tag.PaymentStreamMaximumTransactionCurrency),
				quickfix.GroupElement(tag.PaymentStreamCashSettlIndicator),
				quickfix.GroupElement(tag.PaymentStreamCompoundingXIDRef),
				quickfix.GroupElement(tag.PaymentStreamCompoundingSpread),
				quickfix.GroupElement(tag.PaymentStreamInterpolationMethod),
				quickfix.GroupElement(tag.PaymentStreamInterpolationPeriod),
				quickfix.GroupElement(tag.PaymentStreamCompoundingFixedRate),
				quickfix.GroupElement(tag.PaymentStreamCompoundingRateIndex),
				quickfix.GroupElement(tag.PaymentStreamCompoundingRateIndexCurvePeriod),
				quickfix.GroupElement(tag.PaymentStreamCompoundingRateIndexCurveUnit),
				quickfix.GroupElement(tag.PaymentStreamCompoundingRateMultiplier),
				quickfix.GroupElement(tag.PaymentStreamCompoundingRateSpread),
				quickfix.GroupElement(tag.PaymentStreamCompoundingRateSpreadPositionType),
				quickfix.GroupElement(tag.PaymentStreamCompoundingRateTreatment),
				quickfix.GroupElement(tag.PaymentStreamCompoundingCapRate),
				quickfix.GroupElement(tag.PaymentStreamCompoundingCapRateBuySide),
				quickfix.GroupElement(tag.PaymentStreamCompoundingCapRateSellSide),
				quickfix.GroupElement(tag.PaymentStreamCompoundingFloorRate),
				quickfix.GroupElement(tag.PaymentStreamCompoundingFloorRateBuySide),
				quickfix.GroupElement(tag.PaymentStreamCompoundingFloorRateSellSide),
				quickfix.GroupElement(tag.PaymentStreamCompoundingInitialRate),
				quickfix.GroupElement(tag.PaymentStreamCompoundingFinalRateRoundingDirection),
				quickfix.GroupElement(tag.PaymentStreamCompoundingFinalRatePrecision),
				quickfix.GroupElement(tag.PaymentStreamCompoundingAveragingMethod),
				quickfix.GroupElement(tag.PaymentStreamCompoundingNegativeRateTreatment),
				quickfix.GroupElement(tag.PaymentStreamCompoundingDatesBusinessDayConvention),
				NewNoPaymentStreamCompoundingDatesBusinessCentersRepeatingGroup(),
				NewNoPaymentStreamCompoundingDatesRepeatingGroup(),
				quickfix.GroupElement(tag.PaymentStreamCompoundingDatesRelativeTo),
				quickfix.GroupElement(tag.PaymentStreamCompoundingDatesOffsetPeriod),
				quickfix.GroupElement(tag.PaymentStreamCompoundingDatesOffsetUnit),
				quickfix.GroupElement(tag.PaymentStreamCompoundingDatesOffsetDayType),
				quickfix.GroupElement(tag.PaymentStreamCompoundingPeriodSkip),
				quickfix.GroupElement(tag.PaymentStreamCompoundingStartDateUnadjusted),
				quickfix.GroupElement(tag.PaymentStreamCompoundingStartDateRelativeTo),
				quickfix.GroupElement(tag.PaymentStreamCompoundingStartDateOffsetPeriod),
				quickfix.GroupElement(tag.PaymentStreamCompoundingStartDateOffsetUnit),
				quickfix.GroupElement(tag.PaymentStreamCompoundingStartDateOffsetDayType),
				quickfix.GroupElement(tag.PaymentStreamCompoundingStartDateAdjusted),
				quickfix.GroupElement(tag.PaymentStreamCompoundingEndDateUnadjusted),
				quickfix.GroupElement(tag.PaymentStreamCompoundingEndDateRelativeTo),
				quickfix.GroupElement(tag.PaymentStreamCompoundingEndDateOffsetPeriod),
				quickfix.GroupElement(tag.PaymentStreamCompoundingEndDateOffsetUnit),
				quickfix.GroupElement(tag.PaymentStreamCompoundingEndDateOffsetDayType),
				quickfix.GroupElement(tag.PaymentStreamCompoundingEndDateAdjusted),
				quickfix.GroupElement(tag.PaymentStreamCompoundingFrequencyPeriod),
				quickfix.GroupElement(tag.PaymentStreamCompoundingFrequencyUnit),
				quickfix.GroupElement(tag.PaymentStreamCompoundingRollConvention),
				quickfix.GroupElement(tag.PaymentStreamBoundsFirstDateUnadjusted),
				quickfix.GroupElement(tag.PaymentStreamBoundsLastDateUnadjusted),
				quickfix.GroupElement(tag.PaymentStreamOtherDayCount),
				NewNoPaymentSchedulesRepeatingGroup(),
				NewNoPaymentStubsRepeatingGroup(),
				quickfix.GroupElement(tag.StreamText),
				quickfix.GroupElement(tag.EncodedStreamTextLen),
				quickfix.GroupElement(tag.EncodedStreamText),
				quickfix.GroupElement(tag.StreamXID),
				quickfix.GroupElement(tag.StreamNotionalXIDRef),
				quickfix.GroupElement(tag.StreamNotionalFrequencyPeriod),
				quickfix.GroupElement(tag.StreamNotionalFrequencyUnit),
				quickfix.GroupElement(tag.StreamNotionalCommodityFrequency),
				quickfix.GroupElement(tag.StreamNotionalUnitOfMeasure),
				quickfix.GroupElement(tag.StreamTotalNotional),
				quickfix.GroupElement(tag.StreamTotalNotionalUnitOfMeasure),
				quickfix.GroupElement(tag.StreamCommodityBase),
				quickfix.GroupElement(tag.StreamCommodityType),
				quickfix.GroupElement(tag.StreamCommoditySecurityID),
				quickfix.GroupElement(tag.StreamCommoditySecurityIDSource),
				NewNoStreamCommodityAltIDsRepeatingGroup(),
				quickfix.GroupElement(tag.StreamCommodityDesc),
				quickfix.GroupElement(tag.EncodedStreamCommodityDescLen),
				quickfix.GroupElement(tag.EncodedStreamCommodityDesc),
				NewNoStreamAssetAttributesRepeatingGroup(),
				quickfix.GroupElement(tag.StreamCommodityUnitOfMeasure),
				quickfix.GroupElement(tag.StreamCommodityCurrency),
				quickfix.GroupElement(tag.StreamCommodityExchange),
				quickfix.GroupElement(tag.StreamCommodityRateSource),
				quickfix.GroupElement(tag.StreamCommodityRateReferencePage),
				quickfix.GroupElement(tag.StreamCommodityRateReferencePageHeading),
				quickfix.GroupElement(tag.StreamDataProvider),
				NewNoStreamCommodityDataSourcesRepeatingGroup(),
				quickfix.GroupElement(tag.StreamCommodityPricingType),
				quickfix.GroupElement(tag.StreamCommodityNearbySettlDayPeriod),
				quickfix.GroupElement(tag.StreamCommodityNearbySettlDayUnit),
				quickfix.GroupElement(tag.StreamCommoditySettlDateUnadjusted),
				quickfix.GroupElement(tag.StreamCommoditySettlDateBusinessDayConvention),
				NewNoStreamCommoditySettlBusinessCentersRepeatingGroup(),
				quickfix.GroupElement(tag.StreamCommoditySettlDateAdjusted),
				quickfix.GroupElement(tag.StreamCommoditySettlMonth),
				quickfix.GroupElement(tag.StreamCommoditySettlDateRollPeriod),
				quickfix.GroupElement(tag.StreamCommoditySettlDateRollUnit),
				quickfix.GroupElement(tag.StreamCommoditySettlDayType),
				NewNoStreamCommoditySettlPeriodsRepeatingGroup(),
				quickfix.GroupElement(tag.StreamCommodityXID),
				quickfix.GroupElement(tag.StreamCommodityXIDRef),
				quickfix.GroupElement(tag.StreamCommodityDeliveryPricingRegion),
				quickfix.GroupElement(tag.DeliveryStreamType),
				NewNoDeliveryStreamCommoditySourcesRepeatingGroup(),
				quickfix.GroupElement(tag.DeliveryStreamPipeline),
				quickfix.GroupElement(tag.DeliveryStreamEntryPoint),
				quickfix.GroupElement(tag.DeliveryStreamWithdrawalPoint),
				quickfix.GroupElement(tag.DeliveryStreamDeliveryPoint),
				quickfix.GroupElement(tag.DeliveryStreamDeliveryRestriction),
				quickfix.GroupElement(tag.DeliveryStreamDeliveryContingency),
				quickfix.GroupElement(tag.DeliveryStreamDeliveryContingentPartySide),
				quickfix.GroupElement(tag.DeliveryStreamDeliverAtSourceIndicator),
				quickfix.GroupElement(tag.DeliveryStreamRiskApportionment),
				quickfix.GroupElement(tag.DeliveryStreamRiskApportionmentSource),
				NewNoDeliveryStreamCyclesRepeatingGroup(),
				quickfix.GroupElement(tag.DeliveryStreamTitleTransferLocation),
				quickfix.GroupElement(tag.DeliveryStreamTitleTransferCondition),
				quickfix.GroupElement(tag.DeliveryStreamImporterOfRecord),
				quickfix.GroupElement(tag.DeliveryStreamNegativeTolerance),
				quickfix.GroupElement(tag.DeliveryStreamPositiveTolerance),
				quickfix.GroupElement(tag.DeliveryStreamToleranceUnitOfMeasure),
				quickfix.GroupElement(tag.DeliveryStreamToleranceType),
				quickfix.GroupElement(tag.DeliveryStreamToleranceOptionSide),
				quickfix.GroupElement(tag.DeliveryStreamTotalPositiveTolerance),
				quickfix.GroupElement(tag.DeliveryStreamTotalNegativeTolerance),
				quickfix.GroupElement(tag.DeliveryStreamNotionalConversionFactor),
				quickfix.GroupElement(tag.DeliveryStreamTransportEquipment),
				quickfix.GroupElement(tag.DeliveryStreamElectingPartySide),
				quickfix.GroupElement(tag.DeliveryStreamDeliveryPointSource),
				quickfix.GroupElement(tag.DeliveryStreamDeliveryPointDesc),
				quickfix.GroupElement(tag.DeliveryStreamRouteOrCharter),
				NewNoDeliverySchedulesRepeatingGroup(),
				quickfix.GroupElement(tag.StreamVersion),
				quickfix.GroupElement(tag.StreamVersionEffectiveDate),
				quickfix.GroupElement(tag.StreamNotionalDeterminationMethod),
				quickfix.GroupElement(tag.StreamNotionalAdjustments),
			},
		),
	}
}

// Add create and append a new NoStreams to this group.
func (m NoStreamsRepeatingGroup) Add() NoStreams {
	g := m.RepeatingGroup.Add()
	return NoStreams{g}
}

// Get returns the ith NoStreams in the NoStreamsRepeatinGroup.
func (m NoStreamsRepeatingGroup) Get(i int) NoStreams {
	return NoStreams{m.RepeatingGroup.Get(i)}
}

// NoProvisions is a repeating group element, Tag 40090.
type NoProvisions struct {
	*quickfix.Group
}

// SetProvisionType sets ProvisionType, Tag 40091.
func (m NoProvisions) SetProvisionType(v enum.ProvisionType) {
	m.Set(field.NewProvisionType(v))
}

// SetProvisionDateUnadjusted sets ProvisionDateUnadjusted, Tag 40092.
func (m NoProvisions) SetProvisionDateUnadjusted(v string) {
	m.Set(field.NewProvisionDateUnadjusted(v))
}

// SetProvisionDateBusinessDayConvention sets ProvisionDateBusinessDayConvention, Tag 40093.
func (m NoProvisions) SetProvisionDateBusinessDayConvention(v int) {
	m.Set(field.NewProvisionDateBusinessDayConvention(v))
}

// SetNoProvisionDateBusinessCenters sets NoProvisionDateBusinessCenters, Tag 40957.
func (m NoProvisions) SetNoProvisionDateBusinessCenters(f NoProvisionDateBusinessCentersRepeatingGroup) {
	m.SetGroup(f)
}

// SetProvisionDateAdjusted sets ProvisionDateAdjusted, Tag 40095.
func (m NoProvisions) SetProvisionDateAdjusted(v string) {
	m.Set(field.NewProvisionDateAdjusted(v))
}

// SetProvisionDateTenorPeriod sets ProvisionDateTenorPeriod, Tag 40096.
func (m NoProvisions) SetProvisionDateTenorPeriod(v int) {
	m.Set(field.NewProvisionDateTenorPeriod(v))
}

// SetProvisionDateTenorUnit sets ProvisionDateTenorUnit, Tag 40097.
func (m NoProvisions) SetProvisionDateTenorUnit(v enum.ProvisionDateTenorUnit) {
	m.Set(field.NewProvisionDateTenorUnit(v))
}

// SetProvisionCalculationAgent sets ProvisionCalculationAgent, Tag 40098.
func (m NoProvisions) SetProvisionCalculationAgent(v enum.ProvisionCalculationAgent) {
	m.Set(field.NewProvisionCalculationAgent(v))
}

// SetProvisionOptionSinglePartyBuyerSide sets ProvisionOptionSinglePartyBuyerSide, Tag 40099.
func (m NoProvisions) SetProvisionOptionSinglePartyBuyerSide(v enum.ProvisionOptionSinglePartyBuyerSide) {
	m.Set(field.NewProvisionOptionSinglePartyBuyerSide(v))
}

// SetProvisionOptionSinglePartySellerSide sets ProvisionOptionSinglePartySellerSide, Tag 40100.
func (m NoProvisions) SetProvisionOptionSinglePartySellerSide(v int) {
	m.Set(field.NewProvisionOptionSinglePartySellerSide(v))
}

// SetProvisionCashSettlValueTime sets ProvisionCashSettlValueTime, Tag 40114.
func (m NoProvisions) SetProvisionCashSettlValueTime(v string) {
	m.Set(field.NewProvisionCashSettlValueTime(v))
}

// SetProvisionCashSettlValueTimeBusinessCenter sets ProvisionCashSettlValueTimeBusinessCenter, Tag 40115.
func (m NoProvisions) SetProvisionCashSettlValueTimeBusinessCenter(v string) {
	m.Set(field.NewProvisionCashSettlValueTimeBusinessCenter(v))
}

// SetProvisionCashSettlValueDateBusinessDayConvention sets ProvisionCashSettlValueDateBusinessDayConvention, Tag 40116.
func (m NoProvisions) SetProvisionCashSettlValueDateBusinessDayConvention(v int) {
	m.Set(field.NewProvisionCashSettlValueDateBusinessDayConvention(v))
}

// SetNoProvisionCashSettlValueDateBusinessCenters sets NoProvisionCashSettlValueDateBusinessCenters, Tag 40953.
func (m NoProvisions) SetNoProvisionCashSettlValueDateBusinessCenters(f NoProvisionCashSettlValueDateBusinessCentersRepeatingGroup) {
	m.SetGroup(f)
}

// SetProvisionCashSettlValueDateRelativeTo sets ProvisionCashSettlValueDateRelativeTo, Tag 40118.
func (m NoProvisions) SetProvisionCashSettlValueDateRelativeTo(v int) {
	m.Set(field.NewProvisionCashSettlValueDateRelativeTo(v))
}

// SetProvisionCashSettlValueDateOffsetPeriod sets ProvisionCashSettlValueDateOffsetPeriod, Tag 40119.
func (m NoProvisions) SetProvisionCashSettlValueDateOffsetPeriod(v int) {
	m.Set(field.NewProvisionCashSettlValueDateOffsetPeriod(v))
}

// SetProvisionCashSettlValueDateOffsetUnit sets ProvisionCashSettlValueDateOffsetUnit, Tag 40120.
func (m NoProvisions) SetProvisionCashSettlValueDateOffsetUnit(v string) {
	m.Set(field.NewProvisionCashSettlValueDateOffsetUnit(v))
}

// SetProvisionCashSettlValueDateOffsetDayType sets ProvisionCashSettlValueDateOffsetDayType, Tag 40121.
func (m NoProvisions) SetProvisionCashSettlValueDateOffsetDayType(v int) {
	m.Set(field.NewProvisionCashSettlValueDateOffsetDayType(v))
}

// SetProvisionCashSettlValueDateAdjusted sets ProvisionCashSettlValueDateAdjusted, Tag 40122.
func (m NoProvisions) SetProvisionCashSettlValueDateAdjusted(v string) {
	m.Set(field.NewProvisionCashSettlValueDateAdjusted(v))
}

// SetProvisionOptionExerciseBusinessDayConvention sets ProvisionOptionExerciseBusinessDayConvention, Tag 40123.
func (m NoProvisions) SetProvisionOptionExerciseBusinessDayConvention(v int) {
	m.Set(field.NewProvisionOptionExerciseBusinessDayConvention(v))
}

// SetNoProvisionOptionExerciseBusinessCenters sets NoProvisionOptionExerciseBusinessCenters, Tag 40954.
func (m NoProvisions) SetNoProvisionOptionExerciseBusinessCenters(f NoProvisionOptionExerciseBusinessCentersRepeatingGroup) {
	m.SetGroup(f)
}

// SetNoProvisionOptionExerciseFixedDates sets NoProvisionOptionExerciseFixedDates, Tag 40142.
func (m NoProvisions) SetNoProvisionOptionExerciseFixedDates(f NoProvisionOptionExerciseFixedDatesRepeatingGroup) {
	m.SetGroup(f)
}

// SetProvisionOptionExerciseEarliestDateOffsetPeriod sets ProvisionOptionExerciseEarliestDateOffsetPeriod, Tag 40125.
func (m NoProvisions) SetProvisionOptionExerciseEarliestDateOffsetPeriod(v int) {
	m.Set(field.NewProvisionOptionExerciseEarliestDateOffsetPeriod(v))
}

// SetProvisionOptionExerciseEarliestDateOffsetUnit sets ProvisionOptionExerciseEarliestDateOffsetUnit, Tag 40126.
func (m NoProvisions) SetProvisionOptionExerciseEarliestDateOffsetUnit(v enum.ProvisionOptionExerciseEarliestDateOffsetUnit) {
	m.Set(field.NewProvisionOptionExerciseEarliestDateOffsetUnit(v))
}

// SetProvisionOptionExerciseFrequencyPeriod sets ProvisionOptionExerciseFrequencyPeriod, Tag 40127.
func (m NoProvisions) SetProvisionOptionExerciseFrequencyPeriod(v int) {
	m.Set(field.NewProvisionOptionExerciseFrequencyPeriod(v))
}

// SetProvisionOptionExerciseFrequencyUnit sets ProvisionOptionExerciseFrequencyUnit, Tag 40128.
func (m NoProvisions) SetProvisionOptionExerciseFrequencyUnit(v string) {
	m.Set(field.NewProvisionOptionExerciseFrequencyUnit(v))
}

// SetProvisionOptionExerciseStartDateUnadjusted sets ProvisionOptionExerciseStartDateUnadjusted, Tag 40129.
func (m NoProvisions) SetProvisionOptionExerciseStartDateUnadjusted(v string) {
	m.Set(field.NewProvisionOptionExerciseStartDateUnadjusted(v))
}

// SetProvisionOptionExerciseStartDateRelativeTo sets ProvisionOptionExerciseStartDateRelativeTo, Tag 40130.
func (m NoProvisions) SetProvisionOptionExerciseStartDateRelativeTo(v int) {
	m.Set(field.NewProvisionOptionExerciseStartDateRelativeTo(v))
}

// SetProvisionOptionExerciseStartDateOffsetPeriod sets ProvisionOptionExerciseStartDateOffsetPeriod, Tag 40131.
func (m NoProvisions) SetProvisionOptionExerciseStartDateOffsetPeriod(v int) {
	m.Set(field.NewProvisionOptionExerciseStartDateOffsetPeriod(v))
}

// SetProvisionOptionExerciseStartDateOffsetUnit sets ProvisionOptionExerciseStartDateOffsetUnit, Tag 40132.
func (m NoProvisions) SetProvisionOptionExerciseStartDateOffsetUnit(v string) {
	m.Set(field.NewProvisionOptionExerciseStartDateOffsetUnit(v))
}

// SetProvisionOptionExerciseStartDateOffsetDayType sets ProvisionOptionExerciseStartDateOffsetDayType, Tag 40133.
func (m NoProvisions) SetProvisionOptionExerciseStartDateOffsetDayType(v int) {
	m.Set(field.NewProvisionOptionExerciseStartDateOffsetDayType(v))
}

// SetProvisionOptionExerciseStartDateAdjusted sets ProvisionOptionExerciseStartDateAdjusted, Tag 40134.
func (m NoProvisions) SetProvisionOptionExerciseStartDateAdjusted(v string) {
	m.Set(field.NewProvisionOptionExerciseStartDateAdjusted(v))
}

// SetProvisionOptionExercisePeriodSkip sets ProvisionOptionExercisePeriodSkip, Tag 40135.
func (m NoProvisions) SetProvisionOptionExercisePeriodSkip(v int) {
	m.Set(field.NewProvisionOptionExercisePeriodSkip(v))
}

// SetProvisionOptionExerciseBoundsFirstDateUnadjusted sets ProvisionOptionExerciseBoundsFirstDateUnadjusted, Tag 40136.
func (m NoProvisions) SetProvisionOptionExerciseBoundsFirstDateUnadjusted(v string) {
	m.Set(field.NewProvisionOptionExerciseBoundsFirstDateUnadjusted(v))
}

// SetProvisionOptionExerciseBoundsLastDateUnadjusted sets ProvisionOptionExerciseBoundsLastDateUnadjusted, Tag 40137.
func (m NoProvisions) SetProvisionOptionExerciseBoundsLastDateUnadjusted(v string) {
	m.Set(field.NewProvisionOptionExerciseBoundsLastDateUnadjusted(v))
}

// SetProvisionOptionExerciseEarliestTime sets ProvisionOptionExerciseEarliestTime, Tag 40138.
func (m NoProvisions) SetProvisionOptionExerciseEarliestTime(v string) {
	m.Set(field.NewProvisionOptionExerciseEarliestTime(v))
}

// SetProvisionOptionExerciseEarliestTimeBusinessCenter sets ProvisionOptionExerciseEarliestTimeBusinessCenter, Tag 40139.
func (m NoProvisions) SetProvisionOptionExerciseEarliestTimeBusinessCenter(v string) {
	m.Set(field.NewProvisionOptionExerciseEarliestTimeBusinessCenter(v))
}

// SetProvisionOptionExerciseLatestTime sets ProvisionOptionExerciseLatestTime, Tag 40140.
func (m NoProvisions) SetProvisionOptionExerciseLatestTime(v string) {
	m.Set(field.NewProvisionOptionExerciseLatestTime(v))
}

// SetProvisionOptionExerciseLatestTimeBusinessCenter sets ProvisionOptionExerciseLatestTimeBusinessCenter, Tag 40141.
func (m NoProvisions) SetProvisionOptionExerciseLatestTimeBusinessCenter(v string) {
	m.Set(field.NewProvisionOptionExerciseLatestTimeBusinessCenter(v))
}

// SetProvisionOptionExpirationDateUnadjusted sets ProvisionOptionExpirationDateUnadjusted, Tag 40145.
func (m NoProvisions) SetProvisionOptionExpirationDateUnadjusted(v string) {
	m.Set(field.NewProvisionOptionExpirationDateUnadjusted(v))
}

// SetProvisionOptionExpirationDateBusinessDayConvention sets ProvisionOptionExpirationDateBusinessDayConvention, Tag 40146.
func (m NoProvisions) SetProvisionOptionExpirationDateBusinessDayConvention(v int) {
	m.Set(field.NewProvisionOptionExpirationDateBusinessDayConvention(v))
}

// SetNoProvisionOptionExpirationDateBusinessCenters sets NoProvisionOptionExpirationDateBusinessCenters, Tag 40955.
func (m NoProvisions) SetNoProvisionOptionExpirationDateBusinessCenters(f NoProvisionOptionExpirationDateBusinessCentersRepeatingGroup) {
	m.SetGroup(f)
}

// SetProvisionOptionExpirationDateRelativeTo sets ProvisionOptionExpirationDateRelativeTo, Tag 40148.
func (m NoProvisions) SetProvisionOptionExpirationDateRelativeTo(v int) {
	m.Set(field.NewProvisionOptionExpirationDateRelativeTo(v))
}

// SetProvisionOptionExpirationDateOffsetPeriod sets ProvisionOptionExpirationDateOffsetPeriod, Tag 40149.
func (m NoProvisions) SetProvisionOptionExpirationDateOffsetPeriod(v int) {
	m.Set(field.NewProvisionOptionExpirationDateOffsetPeriod(v))
}

// SetProvisionOptionExpirationDateOffsetUnit sets ProvisionOptionExpirationDateOffsetUnit, Tag 40150.
func (m NoProvisions) SetProvisionOptionExpirationDateOffsetUnit(v string) {
	m.Set(field.NewProvisionOptionExpirationDateOffsetUnit(v))
}

// SetProvisionOptionExpirationDateOffsetDayType sets ProvisionOptionExpirationDateOffsetDayType, Tag 40151.
func (m NoProvisions) SetProvisionOptionExpirationDateOffsetDayType(v int) {
	m.Set(field.NewProvisionOptionExpirationDateOffsetDayType(v))
}

// SetProvisionOptionExpirationDateAdjusted sets ProvisionOptionExpirationDateAdjusted, Tag 40152.
func (m NoProvisions) SetProvisionOptionExpirationDateAdjusted(v string) {
	m.Set(field.NewProvisionOptionExpirationDateAdjusted(v))
}

// SetProvisionOptionExpirationTime sets ProvisionOptionExpirationTime, Tag 40153.
func (m NoProvisions) SetProvisionOptionExpirationTime(v string) {
	m.Set(field.NewProvisionOptionExpirationTime(v))
}

// SetProvisionOptionExpirationTimeBusinessCenter sets ProvisionOptionExpirationTimeBusinessCenter, Tag 40154.
func (m NoProvisions) SetProvisionOptionExpirationTimeBusinessCenter(v string) {
	m.Set(field.NewProvisionOptionExpirationTimeBusinessCenter(v))
}

// SetProvisionOptionRelevantUnderlyingDateUnadjusted sets ProvisionOptionRelevantUnderlyingDateUnadjusted, Tag 40155.
func (m NoProvisions) SetProvisionOptionRelevantUnderlyingDateUnadjusted(v string) {
	m.Set(field.NewProvisionOptionRelevantUnderlyingDateUnadjusted(v))
}

// SetProvisionOptionRelevantUnderlyingDateBusinessDayConvention sets ProvisionOptionRelevantUnderlyingDateBusinessDayConvention, Tag 40156.
func (m NoProvisions) SetProvisionOptionRelevantUnderlyingDateBusinessDayConvention(v int) {
	m.Set(field.NewProvisionOptionRelevantUnderlyingDateBusinessDayConvention(v))
}

// SetNoProvisionOptionRelevantUnderlyingDateBusinessCenters sets NoProvisionOptionRelevantUnderlyingDateBusinessCenters, Tag 40956.
func (m NoProvisions) SetNoProvisionOptionRelevantUnderlyingDateBusinessCenters(f NoProvisionOptionRelevantUnderlyingDateBusinessCentersRepeatingGroup) {
	m.SetGroup(f)
}

// SetProvisionOptionRelevantUnderlyingDateRelativeTo sets ProvisionOptionRelevantUnderlyingDateRelativeTo, Tag 40158.
func (m NoProvisions) SetProvisionOptionRelevantUnderlyingDateRelativeTo(v int) {
	m.Set(field.NewProvisionOptionRelevantUnderlyingDateRelativeTo(v))
}

// SetProvisionOptionRelevantUnderlyingDateOffsetPeriod sets ProvisionOptionRelevantUnderlyingDateOffsetPeriod, Tag 40159.
func (m NoProvisions) SetProvisionOptionRelevantUnderlyingDateOffsetPeriod(v int) {
	m.Set(field.NewProvisionOptionRelevantUnderlyingDateOffsetPeriod(v))
}

// SetProvisionOptionRelevantUnderlyingDateOffsetUnit sets ProvisionOptionRelevantUnderlyingDateOffsetUnit, Tag 40160.
func (m NoProvisions) SetProvisionOptionRelevantUnderlyingDateOffsetUnit(v string) {
	m.Set(field.NewProvisionOptionRelevantUnderlyingDateOffsetUnit(v))
}

// SetProvisionOptionRelevantUnderlyingDateOffsetDayType sets ProvisionOptionRelevantUnderlyingDateOffsetDayType, Tag 40161.
func (m NoProvisions) SetProvisionOptionRelevantUnderlyingDateOffsetDayType(v int) {
	m.Set(field.NewProvisionOptionRelevantUnderlyingDateOffsetDayType(v))
}

// SetProvisionOptionRelevantUnderlyingDateAdjusted sets ProvisionOptionRelevantUnderlyingDateAdjusted, Tag 40162.
func (m NoProvisions) SetProvisionOptionRelevantUnderlyingDateAdjusted(v string) {
	m.Set(field.NewProvisionOptionRelevantUnderlyingDateAdjusted(v))
}

// SetProvisionOptionExerciseStyle sets ProvisionOptionExerciseStyle, Tag 40101.
func (m NoProvisions) SetProvisionOptionExerciseStyle(v int) {
	m.Set(field.NewProvisionOptionExerciseStyle(v))
}

// SetProvisionOptionExerciseMultipleNotional sets ProvisionOptionExerciseMultipleNotional, Tag 40102.
func (m NoProvisions) SetProvisionOptionExerciseMultipleNotional(value decimal.Decimal, scale int32) {
	m.Set(field.NewProvisionOptionExerciseMultipleNotional(value, scale))
}

// SetProvisionOptionExerciseMinimumNotional sets ProvisionOptionExerciseMinimumNotional, Tag 40103.
func (m NoProvisions) SetProvisionOptionExerciseMinimumNotional(value decimal.Decimal, scale int32) {
	m.Set(field.NewProvisionOptionExerciseMinimumNotional(value, scale))
}

// SetProvisionOptionExerciseMaximumNotional sets ProvisionOptionExerciseMaximumNotional, Tag 40104.
func (m NoProvisions) SetProvisionOptionExerciseMaximumNotional(value decimal.Decimal, scale int32) {
	m.Set(field.NewProvisionOptionExerciseMaximumNotional(value, scale))
}

// SetProvisionOptionMinimumNumber sets ProvisionOptionMinimumNumber, Tag 40105.
func (m NoProvisions) SetProvisionOptionMinimumNumber(v int) {
	m.Set(field.NewProvisionOptionMinimumNumber(v))
}

// SetProvisionOptionMaximumNumber sets ProvisionOptionMaximumNumber, Tag 40106.
func (m NoProvisions) SetProvisionOptionMaximumNumber(v int) {
	m.Set(field.NewProvisionOptionMaximumNumber(v))
}

// SetProvisionOptionExerciseConfirmation sets ProvisionOptionExerciseConfirmation, Tag 40107.
func (m NoProvisions) SetProvisionOptionExerciseConfirmation(v bool) {
	m.Set(field.NewProvisionOptionExerciseConfirmation(v))
}

// SetProvisionCashSettlPaymentDateBusinessDayConvention sets ProvisionCashSettlPaymentDateBusinessDayConvention, Tag 40163.
func (m NoProvisions) SetProvisionCashSettlPaymentDateBusinessDayConvention(v int) {
	m.Set(field.NewProvisionCashSettlPaymentDateBusinessDayConvention(v))
}

// SetNoProvisionCashSettlPaymentDateBusinessCenters sets NoProvisionCashSettlPaymentDateBusinessCenters, Tag 40952.
func (m NoProvisions) SetNoProvisionCashSettlPaymentDateBusinessCenters(f NoProvisionCashSettlPaymentDateBusinessCentersRepeatingGroup) {
	m.SetGroup(f)
}

// SetProvisionCashSettlPaymentDateRelativeTo sets ProvisionCashSettlPaymentDateRelativeTo, Tag 40165.
func (m NoProvisions) SetProvisionCashSettlPaymentDateRelativeTo(v int) {
	m.Set(field.NewProvisionCashSettlPaymentDateRelativeTo(v))
}

// SetProvisionCashSettlPaymentDateOffsetPeriod sets ProvisionCashSettlPaymentDateOffsetPeriod, Tag 40166.
func (m NoProvisions) SetProvisionCashSettlPaymentDateOffsetPeriod(v int) {
	m.Set(field.NewProvisionCashSettlPaymentDateOffsetPeriod(v))
}

// SetProvisionCashSettlPaymentDateOffsetUnit sets ProvisionCashSettlPaymentDateOffsetUnit, Tag 40167.
func (m NoProvisions) SetProvisionCashSettlPaymentDateOffsetUnit(v string) {
	m.Set(field.NewProvisionCashSettlPaymentDateOffsetUnit(v))
}

// SetProvisionCashSettlPaymentDateOffsetDayType sets ProvisionCashSettlPaymentDateOffsetDayType, Tag 40168.
func (m NoProvisions) SetProvisionCashSettlPaymentDateOffsetDayType(v int) {
	m.Set(field.NewProvisionCashSettlPaymentDateOffsetDayType(v))
}

// SetProvisionCashSettlPaymentDateRangeFirst sets ProvisionCashSettlPaymentDateRangeFirst, Tag 40169.
func (m NoProvisions) SetProvisionCashSettlPaymentDateRangeFirst(v string) {
	m.Set(field.NewProvisionCashSettlPaymentDateRangeFirst(v))
}

// SetProvisionCashSettlPaymentDateRangeLast sets ProvisionCashSettlPaymentDateRangeLast, Tag 40170.
func (m NoProvisions) SetProvisionCashSettlPaymentDateRangeLast(v string) {
	m.Set(field.NewProvisionCashSettlPaymentDateRangeLast(v))
}

// SetNoProvisionCashSettlPaymentDates sets NoProvisionCashSettlPaymentDates, Tag 40171.
func (m NoProvisions) SetNoProvisionCashSettlPaymentDates(f NoProvisionCashSettlPaymentDatesRepeatingGroup) {
	m.SetGroup(f)
}

// SetProvisionCashSettlMethod sets ProvisionCashSettlMethod, Tag 40108.
func (m NoProvisions) SetProvisionCashSettlMethod(v enum.ProvisionCashSettlMethod) {
	m.Set(field.NewProvisionCashSettlMethod(v))
}

// SetProvisionCashSettlCurrency sets ProvisionCashSettlCurrency, Tag 40109.
func (m NoProvisions) SetProvisionCashSettlCurrency(v string) {
	m.Set(field.NewProvisionCashSettlCurrency(v))
}

// SetProvisionCashSettlCurrency2 sets ProvisionCashSettlCurrency2, Tag 40110.
func (m NoProvisions) SetProvisionCashSettlCurrency2(v string) {
	m.Set(field.NewProvisionCashSettlCurrency2(v))
}

// SetProvisionCashSettlQuoteType sets ProvisionCashSettlQuoteType, Tag 40111.
func (m NoProvisions) SetProvisionCashSettlQuoteType(v enum.ProvisionCashSettlQuoteType) {
	m.Set(field.NewProvisionCashSettlQuoteType(v))
}

// SetProvisionCashSettlQuoteSource sets ProvisionCashSettlQuoteSource, Tag 40112.
func (m NoProvisions) SetProvisionCashSettlQuoteSource(v int) {
	m.Set(field.NewProvisionCashSettlQuoteSource(v))
}

// SetProvisionCashSettlQuoteReferencePage sets ProvisionCashSettlQuoteReferencePage, Tag 41406.
func (m NoProvisions) SetProvisionCashSettlQuoteReferencePage(v string) {
	m.Set(field.NewProvisionCashSettlQuoteReferencePage(v))
}

// SetProvisionText sets ProvisionText, Tag 40113.
func (m NoProvisions) SetProvisionText(v string) {
	m.Set(field.NewProvisionText(v))
}

// SetEncodedProvisionTextLen sets EncodedProvisionTextLen, Tag 40986.
func (m NoProvisions) SetEncodedProvisionTextLen(v int) {
	m.Set(field.NewEncodedProvisionTextLen(v))
}

// SetEncodedProvisionText sets EncodedProvisionText, Tag 40987.
func (m NoProvisions) SetEncodedProvisionText(v string) {
	m.Set(field.NewEncodedProvisionText(v))
}

// SetNoProvisionPartyIDs sets NoProvisionPartyIDs, Tag 40174.
func (m NoProvisions) SetNoProvisionPartyIDs(f NoProvisionPartyIDsRepeatingGroup) {
	m.SetGroup(f)
}

// SetProvisionBreakFeeElection sets ProvisionBreakFeeElection, Tag 42707.
func (m NoProvisions) SetProvisionBreakFeeElection(v enum.ProvisionBreakFeeElection) {
	m.Set(field.NewProvisionBreakFeeElection(v))
}

// SetProvisionBreakFeeRate sets ProvisionBreakFeeRate, Tag 42708.
func (m NoProvisions) SetProvisionBreakFeeRate(value decimal.Decimal, scale int32) {
	m.Set(field.NewProvisionBreakFeeRate(value, scale))
}

// GetProvisionType gets ProvisionType, Tag 40091.
func (m NoProvisions) GetProvisionType() (v enum.ProvisionType, err quickfix.MessageRejectError) {
	var f field.ProvisionTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProvisionDateUnadjusted gets ProvisionDateUnadjusted, Tag 40092.
func (m NoProvisions) GetProvisionDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.ProvisionDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProvisionDateBusinessDayConvention gets ProvisionDateBusinessDayConvention, Tag 40093.
func (m NoProvisions) GetProvisionDateBusinessDayConvention() (v int, err quickfix.MessageRejectError) {
	var f field.ProvisionDateBusinessDayConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoProvisionDateBusinessCenters gets NoProvisionDateBusinessCenters, Tag 40957.
func (m NoProvisions) GetNoProvisionDateBusinessCenters() (NoProvisionDateBusinessCentersRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoProvisionDateBusinessCentersRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetProvisionDateAdjusted gets ProvisionDateAdjusted, Tag 40095.
func (m NoProvisions) GetProvisionDateAdjusted() (v string, err quickfix.MessageRejectError) {
	var f field.ProvisionDateAdjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProvisionDateTenorPeriod gets ProvisionDateTenorPeriod, Tag 40096.
func (m NoProvisions) GetProvisionDateTenorPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.ProvisionDateTenorPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProvisionDateTenorUnit gets ProvisionDateTenorUnit, Tag 40097.
func (m NoProvisions) GetProvisionDateTenorUnit() (v enum.ProvisionDateTenorUnit, err quickfix.MessageRejectError) {
	var f field.ProvisionDateTenorUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProvisionCalculationAgent gets ProvisionCalculationAgent, Tag 40098.
func (m NoProvisions) GetProvisionCalculationAgent() (v enum.ProvisionCalculationAgent, err quickfix.MessageRejectError) {
	var f field.ProvisionCalculationAgentField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProvisionOptionSinglePartyBuyerSide gets ProvisionOptionSinglePartyBuyerSide, Tag 40099.
func (m NoProvisions) GetProvisionOptionSinglePartyBuyerSide() (v enum.ProvisionOptionSinglePartyBuyerSide, err quickfix.MessageRejectError) {
	var f field.ProvisionOptionSinglePartyBuyerSideField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProvisionOptionSinglePartySellerSide gets ProvisionOptionSinglePartySellerSide, Tag 40100.
func (m NoProvisions) GetProvisionOptionSinglePartySellerSide() (v int, err quickfix.MessageRejectError) {
	var f field.ProvisionOptionSinglePartySellerSideField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProvisionCashSettlValueTime gets ProvisionCashSettlValueTime, Tag 40114.
func (m NoProvisions) GetProvisionCashSettlValueTime() (v string, err quickfix.MessageRejectError) {
	var f field.ProvisionCashSettlValueTimeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProvisionCashSettlValueTimeBusinessCenter gets ProvisionCashSettlValueTimeBusinessCenter, Tag 40115.
func (m NoProvisions) GetProvisionCashSettlValueTimeBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.ProvisionCashSettlValueTimeBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProvisionCashSettlValueDateBusinessDayConvention gets ProvisionCashSettlValueDateBusinessDayConvention, Tag 40116.
func (m NoProvisions) GetProvisionCashSettlValueDateBusinessDayConvention() (v int, err quickfix.MessageRejectError) {
	var f field.ProvisionCashSettlValueDateBusinessDayConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoProvisionCashSettlValueDateBusinessCenters gets NoProvisionCashSettlValueDateBusinessCenters, Tag 40953.
func (m NoProvisions) GetNoProvisionCashSettlValueDateBusinessCenters() (NoProvisionCashSettlValueDateBusinessCentersRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoProvisionCashSettlValueDateBusinessCentersRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetProvisionCashSettlValueDateRelativeTo gets ProvisionCashSettlValueDateRelativeTo, Tag 40118.
func (m NoProvisions) GetProvisionCashSettlValueDateRelativeTo() (v int, err quickfix.MessageRejectError) {
	var f field.ProvisionCashSettlValueDateRelativeToField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProvisionCashSettlValueDateOffsetPeriod gets ProvisionCashSettlValueDateOffsetPeriod, Tag 40119.
func (m NoProvisions) GetProvisionCashSettlValueDateOffsetPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.ProvisionCashSettlValueDateOffsetPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProvisionCashSettlValueDateOffsetUnit gets ProvisionCashSettlValueDateOffsetUnit, Tag 40120.
func (m NoProvisions) GetProvisionCashSettlValueDateOffsetUnit() (v string, err quickfix.MessageRejectError) {
	var f field.ProvisionCashSettlValueDateOffsetUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProvisionCashSettlValueDateOffsetDayType gets ProvisionCashSettlValueDateOffsetDayType, Tag 40121.
func (m NoProvisions) GetProvisionCashSettlValueDateOffsetDayType() (v int, err quickfix.MessageRejectError) {
	var f field.ProvisionCashSettlValueDateOffsetDayTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProvisionCashSettlValueDateAdjusted gets ProvisionCashSettlValueDateAdjusted, Tag 40122.
func (m NoProvisions) GetProvisionCashSettlValueDateAdjusted() (v string, err quickfix.MessageRejectError) {
	var f field.ProvisionCashSettlValueDateAdjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProvisionOptionExerciseBusinessDayConvention gets ProvisionOptionExerciseBusinessDayConvention, Tag 40123.
func (m NoProvisions) GetProvisionOptionExerciseBusinessDayConvention() (v int, err quickfix.MessageRejectError) {
	var f field.ProvisionOptionExerciseBusinessDayConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoProvisionOptionExerciseBusinessCenters gets NoProvisionOptionExerciseBusinessCenters, Tag 40954.
func (m NoProvisions) GetNoProvisionOptionExerciseBusinessCenters() (NoProvisionOptionExerciseBusinessCentersRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoProvisionOptionExerciseBusinessCentersRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetNoProvisionOptionExerciseFixedDates gets NoProvisionOptionExerciseFixedDates, Tag 40142.
func (m NoProvisions) GetNoProvisionOptionExerciseFixedDates() (NoProvisionOptionExerciseFixedDatesRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoProvisionOptionExerciseFixedDatesRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetProvisionOptionExerciseEarliestDateOffsetPeriod gets ProvisionOptionExerciseEarliestDateOffsetPeriod, Tag 40125.
func (m NoProvisions) GetProvisionOptionExerciseEarliestDateOffsetPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.ProvisionOptionExerciseEarliestDateOffsetPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProvisionOptionExerciseEarliestDateOffsetUnit gets ProvisionOptionExerciseEarliestDateOffsetUnit, Tag 40126.
func (m NoProvisions) GetProvisionOptionExerciseEarliestDateOffsetUnit() (v enum.ProvisionOptionExerciseEarliestDateOffsetUnit, err quickfix.MessageRejectError) {
	var f field.ProvisionOptionExerciseEarliestDateOffsetUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProvisionOptionExerciseFrequencyPeriod gets ProvisionOptionExerciseFrequencyPeriod, Tag 40127.
func (m NoProvisions) GetProvisionOptionExerciseFrequencyPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.ProvisionOptionExerciseFrequencyPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProvisionOptionExerciseFrequencyUnit gets ProvisionOptionExerciseFrequencyUnit, Tag 40128.
func (m NoProvisions) GetProvisionOptionExerciseFrequencyUnit() (v string, err quickfix.MessageRejectError) {
	var f field.ProvisionOptionExerciseFrequencyUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProvisionOptionExerciseStartDateUnadjusted gets ProvisionOptionExerciseStartDateUnadjusted, Tag 40129.
func (m NoProvisions) GetProvisionOptionExerciseStartDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.ProvisionOptionExerciseStartDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProvisionOptionExerciseStartDateRelativeTo gets ProvisionOptionExerciseStartDateRelativeTo, Tag 40130.
func (m NoProvisions) GetProvisionOptionExerciseStartDateRelativeTo() (v int, err quickfix.MessageRejectError) {
	var f field.ProvisionOptionExerciseStartDateRelativeToField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProvisionOptionExerciseStartDateOffsetPeriod gets ProvisionOptionExerciseStartDateOffsetPeriod, Tag 40131.
func (m NoProvisions) GetProvisionOptionExerciseStartDateOffsetPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.ProvisionOptionExerciseStartDateOffsetPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProvisionOptionExerciseStartDateOffsetUnit gets ProvisionOptionExerciseStartDateOffsetUnit, Tag 40132.
func (m NoProvisions) GetProvisionOptionExerciseStartDateOffsetUnit() (v string, err quickfix.MessageRejectError) {
	var f field.ProvisionOptionExerciseStartDateOffsetUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProvisionOptionExerciseStartDateOffsetDayType gets ProvisionOptionExerciseStartDateOffsetDayType, Tag 40133.
func (m NoProvisions) GetProvisionOptionExerciseStartDateOffsetDayType() (v int, err quickfix.MessageRejectError) {
	var f field.ProvisionOptionExerciseStartDateOffsetDayTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProvisionOptionExerciseStartDateAdjusted gets ProvisionOptionExerciseStartDateAdjusted, Tag 40134.
func (m NoProvisions) GetProvisionOptionExerciseStartDateAdjusted() (v string, err quickfix.MessageRejectError) {
	var f field.ProvisionOptionExerciseStartDateAdjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProvisionOptionExercisePeriodSkip gets ProvisionOptionExercisePeriodSkip, Tag 40135.
func (m NoProvisions) GetProvisionOptionExercisePeriodSkip() (v int, err quickfix.MessageRejectError) {
	var f field.ProvisionOptionExercisePeriodSkipField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProvisionOptionExerciseBoundsFirstDateUnadjusted gets ProvisionOptionExerciseBoundsFirstDateUnadjusted, Tag 40136.
func (m NoProvisions) GetProvisionOptionExerciseBoundsFirstDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.ProvisionOptionExerciseBoundsFirstDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProvisionOptionExerciseBoundsLastDateUnadjusted gets ProvisionOptionExerciseBoundsLastDateUnadjusted, Tag 40137.
func (m NoProvisions) GetProvisionOptionExerciseBoundsLastDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.ProvisionOptionExerciseBoundsLastDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProvisionOptionExerciseEarliestTime gets ProvisionOptionExerciseEarliestTime, Tag 40138.
func (m NoProvisions) GetProvisionOptionExerciseEarliestTime() (v string, err quickfix.MessageRejectError) {
	var f field.ProvisionOptionExerciseEarliestTimeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProvisionOptionExerciseEarliestTimeBusinessCenter gets ProvisionOptionExerciseEarliestTimeBusinessCenter, Tag 40139.
func (m NoProvisions) GetProvisionOptionExerciseEarliestTimeBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.ProvisionOptionExerciseEarliestTimeBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProvisionOptionExerciseLatestTime gets ProvisionOptionExerciseLatestTime, Tag 40140.
func (m NoProvisions) GetProvisionOptionExerciseLatestTime() (v string, err quickfix.MessageRejectError) {
	var f field.ProvisionOptionExerciseLatestTimeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProvisionOptionExerciseLatestTimeBusinessCenter gets ProvisionOptionExerciseLatestTimeBusinessCenter, Tag 40141.
func (m NoProvisions) GetProvisionOptionExerciseLatestTimeBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.ProvisionOptionExerciseLatestTimeBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProvisionOptionExpirationDateUnadjusted gets ProvisionOptionExpirationDateUnadjusted, Tag 40145.
func (m NoProvisions) GetProvisionOptionExpirationDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.ProvisionOptionExpirationDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProvisionOptionExpirationDateBusinessDayConvention gets ProvisionOptionExpirationDateBusinessDayConvention, Tag 40146.
func (m NoProvisions) GetProvisionOptionExpirationDateBusinessDayConvention() (v int, err quickfix.MessageRejectError) {
	var f field.ProvisionOptionExpirationDateBusinessDayConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoProvisionOptionExpirationDateBusinessCenters gets NoProvisionOptionExpirationDateBusinessCenters, Tag 40955.
func (m NoProvisions) GetNoProvisionOptionExpirationDateBusinessCenters() (NoProvisionOptionExpirationDateBusinessCentersRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoProvisionOptionExpirationDateBusinessCentersRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetProvisionOptionExpirationDateRelativeTo gets ProvisionOptionExpirationDateRelativeTo, Tag 40148.
func (m NoProvisions) GetProvisionOptionExpirationDateRelativeTo() (v int, err quickfix.MessageRejectError) {
	var f field.ProvisionOptionExpirationDateRelativeToField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProvisionOptionExpirationDateOffsetPeriod gets ProvisionOptionExpirationDateOffsetPeriod, Tag 40149.
func (m NoProvisions) GetProvisionOptionExpirationDateOffsetPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.ProvisionOptionExpirationDateOffsetPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProvisionOptionExpirationDateOffsetUnit gets ProvisionOptionExpirationDateOffsetUnit, Tag 40150.
func (m NoProvisions) GetProvisionOptionExpirationDateOffsetUnit() (v string, err quickfix.MessageRejectError) {
	var f field.ProvisionOptionExpirationDateOffsetUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProvisionOptionExpirationDateOffsetDayType gets ProvisionOptionExpirationDateOffsetDayType, Tag 40151.
func (m NoProvisions) GetProvisionOptionExpirationDateOffsetDayType() (v int, err quickfix.MessageRejectError) {
	var f field.ProvisionOptionExpirationDateOffsetDayTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProvisionOptionExpirationDateAdjusted gets ProvisionOptionExpirationDateAdjusted, Tag 40152.
func (m NoProvisions) GetProvisionOptionExpirationDateAdjusted() (v string, err quickfix.MessageRejectError) {
	var f field.ProvisionOptionExpirationDateAdjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProvisionOptionExpirationTime gets ProvisionOptionExpirationTime, Tag 40153.
func (m NoProvisions) GetProvisionOptionExpirationTime() (v string, err quickfix.MessageRejectError) {
	var f field.ProvisionOptionExpirationTimeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProvisionOptionExpirationTimeBusinessCenter gets ProvisionOptionExpirationTimeBusinessCenter, Tag 40154.
func (m NoProvisions) GetProvisionOptionExpirationTimeBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.ProvisionOptionExpirationTimeBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProvisionOptionRelevantUnderlyingDateUnadjusted gets ProvisionOptionRelevantUnderlyingDateUnadjusted, Tag 40155.
func (m NoProvisions) GetProvisionOptionRelevantUnderlyingDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.ProvisionOptionRelevantUnderlyingDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProvisionOptionRelevantUnderlyingDateBusinessDayConvention gets ProvisionOptionRelevantUnderlyingDateBusinessDayConvention, Tag 40156.
func (m NoProvisions) GetProvisionOptionRelevantUnderlyingDateBusinessDayConvention() (v int, err quickfix.MessageRejectError) {
	var f field.ProvisionOptionRelevantUnderlyingDateBusinessDayConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoProvisionOptionRelevantUnderlyingDateBusinessCenters gets NoProvisionOptionRelevantUnderlyingDateBusinessCenters, Tag 40956.
func (m NoProvisions) GetNoProvisionOptionRelevantUnderlyingDateBusinessCenters() (NoProvisionOptionRelevantUnderlyingDateBusinessCentersRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoProvisionOptionRelevantUnderlyingDateBusinessCentersRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetProvisionOptionRelevantUnderlyingDateRelativeTo gets ProvisionOptionRelevantUnderlyingDateRelativeTo, Tag 40158.
func (m NoProvisions) GetProvisionOptionRelevantUnderlyingDateRelativeTo() (v int, err quickfix.MessageRejectError) {
	var f field.ProvisionOptionRelevantUnderlyingDateRelativeToField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProvisionOptionRelevantUnderlyingDateOffsetPeriod gets ProvisionOptionRelevantUnderlyingDateOffsetPeriod, Tag 40159.
func (m NoProvisions) GetProvisionOptionRelevantUnderlyingDateOffsetPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.ProvisionOptionRelevantUnderlyingDateOffsetPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProvisionOptionRelevantUnderlyingDateOffsetUnit gets ProvisionOptionRelevantUnderlyingDateOffsetUnit, Tag 40160.
func (m NoProvisions) GetProvisionOptionRelevantUnderlyingDateOffsetUnit() (v string, err quickfix.MessageRejectError) {
	var f field.ProvisionOptionRelevantUnderlyingDateOffsetUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProvisionOptionRelevantUnderlyingDateOffsetDayType gets ProvisionOptionRelevantUnderlyingDateOffsetDayType, Tag 40161.
func (m NoProvisions) GetProvisionOptionRelevantUnderlyingDateOffsetDayType() (v int, err quickfix.MessageRejectError) {
	var f field.ProvisionOptionRelevantUnderlyingDateOffsetDayTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProvisionOptionRelevantUnderlyingDateAdjusted gets ProvisionOptionRelevantUnderlyingDateAdjusted, Tag 40162.
func (m NoProvisions) GetProvisionOptionRelevantUnderlyingDateAdjusted() (v string, err quickfix.MessageRejectError) {
	var f field.ProvisionOptionRelevantUnderlyingDateAdjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProvisionOptionExerciseStyle gets ProvisionOptionExerciseStyle, Tag 40101.
func (m NoProvisions) GetProvisionOptionExerciseStyle() (v int, err quickfix.MessageRejectError) {
	var f field.ProvisionOptionExerciseStyleField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProvisionOptionExerciseMultipleNotional gets ProvisionOptionExerciseMultipleNotional, Tag 40102.
func (m NoProvisions) GetProvisionOptionExerciseMultipleNotional() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.ProvisionOptionExerciseMultipleNotionalField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProvisionOptionExerciseMinimumNotional gets ProvisionOptionExerciseMinimumNotional, Tag 40103.
func (m NoProvisions) GetProvisionOptionExerciseMinimumNotional() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.ProvisionOptionExerciseMinimumNotionalField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProvisionOptionExerciseMaximumNotional gets ProvisionOptionExerciseMaximumNotional, Tag 40104.
func (m NoProvisions) GetProvisionOptionExerciseMaximumNotional() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.ProvisionOptionExerciseMaximumNotionalField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProvisionOptionMinimumNumber gets ProvisionOptionMinimumNumber, Tag 40105.
func (m NoProvisions) GetProvisionOptionMinimumNumber() (v int, err quickfix.MessageRejectError) {
	var f field.ProvisionOptionMinimumNumberField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProvisionOptionMaximumNumber gets ProvisionOptionMaximumNumber, Tag 40106.
func (m NoProvisions) GetProvisionOptionMaximumNumber() (v int, err quickfix.MessageRejectError) {
	var f field.ProvisionOptionMaximumNumberField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProvisionOptionExerciseConfirmation gets ProvisionOptionExerciseConfirmation, Tag 40107.
func (m NoProvisions) GetProvisionOptionExerciseConfirmation() (v bool, err quickfix.MessageRejectError) {
	var f field.ProvisionOptionExerciseConfirmationField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProvisionCashSettlPaymentDateBusinessDayConvention gets ProvisionCashSettlPaymentDateBusinessDayConvention, Tag 40163.
func (m NoProvisions) GetProvisionCashSettlPaymentDateBusinessDayConvention() (v int, err quickfix.MessageRejectError) {
	var f field.ProvisionCashSettlPaymentDateBusinessDayConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoProvisionCashSettlPaymentDateBusinessCenters gets NoProvisionCashSettlPaymentDateBusinessCenters, Tag 40952.
func (m NoProvisions) GetNoProvisionCashSettlPaymentDateBusinessCenters() (NoProvisionCashSettlPaymentDateBusinessCentersRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoProvisionCashSettlPaymentDateBusinessCentersRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetProvisionCashSettlPaymentDateRelativeTo gets ProvisionCashSettlPaymentDateRelativeTo, Tag 40165.
func (m NoProvisions) GetProvisionCashSettlPaymentDateRelativeTo() (v int, err quickfix.MessageRejectError) {
	var f field.ProvisionCashSettlPaymentDateRelativeToField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProvisionCashSettlPaymentDateOffsetPeriod gets ProvisionCashSettlPaymentDateOffsetPeriod, Tag 40166.
func (m NoProvisions) GetProvisionCashSettlPaymentDateOffsetPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.ProvisionCashSettlPaymentDateOffsetPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProvisionCashSettlPaymentDateOffsetUnit gets ProvisionCashSettlPaymentDateOffsetUnit, Tag 40167.
func (m NoProvisions) GetProvisionCashSettlPaymentDateOffsetUnit() (v string, err quickfix.MessageRejectError) {
	var f field.ProvisionCashSettlPaymentDateOffsetUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProvisionCashSettlPaymentDateOffsetDayType gets ProvisionCashSettlPaymentDateOffsetDayType, Tag 40168.
func (m NoProvisions) GetProvisionCashSettlPaymentDateOffsetDayType() (v int, err quickfix.MessageRejectError) {
	var f field.ProvisionCashSettlPaymentDateOffsetDayTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProvisionCashSettlPaymentDateRangeFirst gets ProvisionCashSettlPaymentDateRangeFirst, Tag 40169.
func (m NoProvisions) GetProvisionCashSettlPaymentDateRangeFirst() (v string, err quickfix.MessageRejectError) {
	var f field.ProvisionCashSettlPaymentDateRangeFirstField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProvisionCashSettlPaymentDateRangeLast gets ProvisionCashSettlPaymentDateRangeLast, Tag 40170.
func (m NoProvisions) GetProvisionCashSettlPaymentDateRangeLast() (v string, err quickfix.MessageRejectError) {
	var f field.ProvisionCashSettlPaymentDateRangeLastField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoProvisionCashSettlPaymentDates gets NoProvisionCashSettlPaymentDates, Tag 40171.
func (m NoProvisions) GetNoProvisionCashSettlPaymentDates() (NoProvisionCashSettlPaymentDatesRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoProvisionCashSettlPaymentDatesRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetProvisionCashSettlMethod gets ProvisionCashSettlMethod, Tag 40108.
func (m NoProvisions) GetProvisionCashSettlMethod() (v enum.ProvisionCashSettlMethod, err quickfix.MessageRejectError) {
	var f field.ProvisionCashSettlMethodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProvisionCashSettlCurrency gets ProvisionCashSettlCurrency, Tag 40109.
func (m NoProvisions) GetProvisionCashSettlCurrency() (v string, err quickfix.MessageRejectError) {
	var f field.ProvisionCashSettlCurrencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProvisionCashSettlCurrency2 gets ProvisionCashSettlCurrency2, Tag 40110.
func (m NoProvisions) GetProvisionCashSettlCurrency2() (v string, err quickfix.MessageRejectError) {
	var f field.ProvisionCashSettlCurrency2Field
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProvisionCashSettlQuoteType gets ProvisionCashSettlQuoteType, Tag 40111.
func (m NoProvisions) GetProvisionCashSettlQuoteType() (v enum.ProvisionCashSettlQuoteType, err quickfix.MessageRejectError) {
	var f field.ProvisionCashSettlQuoteTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProvisionCashSettlQuoteSource gets ProvisionCashSettlQuoteSource, Tag 40112.
func (m NoProvisions) GetProvisionCashSettlQuoteSource() (v int, err quickfix.MessageRejectError) {
	var f field.ProvisionCashSettlQuoteSourceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProvisionCashSettlQuoteReferencePage gets ProvisionCashSettlQuoteReferencePage, Tag 41406.
func (m NoProvisions) GetProvisionCashSettlQuoteReferencePage() (v string, err quickfix.MessageRejectError) {
	var f field.ProvisionCashSettlQuoteReferencePageField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProvisionText gets ProvisionText, Tag 40113.
func (m NoProvisions) GetProvisionText() (v string, err quickfix.MessageRejectError) {
	var f field.ProvisionTextField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetEncodedProvisionTextLen gets EncodedProvisionTextLen, Tag 40986.
func (m NoProvisions) GetEncodedProvisionTextLen() (v int, err quickfix.MessageRejectError) {
	var f field.EncodedProvisionTextLenField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetEncodedProvisionText gets EncodedProvisionText, Tag 40987.
func (m NoProvisions) GetEncodedProvisionText() (v string, err quickfix.MessageRejectError) {
	var f field.EncodedProvisionTextField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoProvisionPartyIDs gets NoProvisionPartyIDs, Tag 40174.
func (m NoProvisions) GetNoProvisionPartyIDs() (NoProvisionPartyIDsRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoProvisionPartyIDsRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetProvisionBreakFeeElection gets ProvisionBreakFeeElection, Tag 42707.
func (m NoProvisions) GetProvisionBreakFeeElection() (v enum.ProvisionBreakFeeElection, err quickfix.MessageRejectError) {
	var f field.ProvisionBreakFeeElectionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProvisionBreakFeeRate gets ProvisionBreakFeeRate, Tag 42708.
func (m NoProvisions) GetProvisionBreakFeeRate() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.ProvisionBreakFeeRateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasProvisionType returns true if ProvisionType is present, Tag 40091.
func (m NoProvisions) HasProvisionType() bool {
	return m.Has(tag.ProvisionType)
}

// HasProvisionDateUnadjusted returns true if ProvisionDateUnadjusted is present, Tag 40092.
func (m NoProvisions) HasProvisionDateUnadjusted() bool {
	return m.Has(tag.ProvisionDateUnadjusted)
}

// HasProvisionDateBusinessDayConvention returns true if ProvisionDateBusinessDayConvention is present, Tag 40093.
func (m NoProvisions) HasProvisionDateBusinessDayConvention() bool {
	return m.Has(tag.ProvisionDateBusinessDayConvention)
}

// HasNoProvisionDateBusinessCenters returns true if NoProvisionDateBusinessCenters is present, Tag 40957.
func (m NoProvisions) HasNoProvisionDateBusinessCenters() bool {
	return m.Has(tag.NoProvisionDateBusinessCenters)
}

// HasProvisionDateAdjusted returns true if ProvisionDateAdjusted is present, Tag 40095.
func (m NoProvisions) HasProvisionDateAdjusted() bool {
	return m.Has(tag.ProvisionDateAdjusted)
}

// HasProvisionDateTenorPeriod returns true if ProvisionDateTenorPeriod is present, Tag 40096.
func (m NoProvisions) HasProvisionDateTenorPeriod() bool {
	return m.Has(tag.ProvisionDateTenorPeriod)
}

// HasProvisionDateTenorUnit returns true if ProvisionDateTenorUnit is present, Tag 40097.
func (m NoProvisions) HasProvisionDateTenorUnit() bool {
	return m.Has(tag.ProvisionDateTenorUnit)
}

// HasProvisionCalculationAgent returns true if ProvisionCalculationAgent is present, Tag 40098.
func (m NoProvisions) HasProvisionCalculationAgent() bool {
	return m.Has(tag.ProvisionCalculationAgent)
}

// HasProvisionOptionSinglePartyBuyerSide returns true if ProvisionOptionSinglePartyBuyerSide is present, Tag 40099.
func (m NoProvisions) HasProvisionOptionSinglePartyBuyerSide() bool {
	return m.Has(tag.ProvisionOptionSinglePartyBuyerSide)
}

// HasProvisionOptionSinglePartySellerSide returns true if ProvisionOptionSinglePartySellerSide is present, Tag 40100.
func (m NoProvisions) HasProvisionOptionSinglePartySellerSide() bool {
	return m.Has(tag.ProvisionOptionSinglePartySellerSide)
}

// HasProvisionCashSettlValueTime returns true if ProvisionCashSettlValueTime is present, Tag 40114.
func (m NoProvisions) HasProvisionCashSettlValueTime() bool {
	return m.Has(tag.ProvisionCashSettlValueTime)
}

// HasProvisionCashSettlValueTimeBusinessCenter returns true if ProvisionCashSettlValueTimeBusinessCenter is present, Tag 40115.
func (m NoProvisions) HasProvisionCashSettlValueTimeBusinessCenter() bool {
	return m.Has(tag.ProvisionCashSettlValueTimeBusinessCenter)
}

// HasProvisionCashSettlValueDateBusinessDayConvention returns true if ProvisionCashSettlValueDateBusinessDayConvention is present, Tag 40116.
func (m NoProvisions) HasProvisionCashSettlValueDateBusinessDayConvention() bool {
	return m.Has(tag.ProvisionCashSettlValueDateBusinessDayConvention)
}

// HasNoProvisionCashSettlValueDateBusinessCenters returns true if NoProvisionCashSettlValueDateBusinessCenters is present, Tag 40953.
func (m NoProvisions) HasNoProvisionCashSettlValueDateBusinessCenters() bool {
	return m.Has(tag.NoProvisionCashSettlValueDateBusinessCenters)
}

// HasProvisionCashSettlValueDateRelativeTo returns true if ProvisionCashSettlValueDateRelativeTo is present, Tag 40118.
func (m NoProvisions) HasProvisionCashSettlValueDateRelativeTo() bool {
	return m.Has(tag.ProvisionCashSettlValueDateRelativeTo)
}

// HasProvisionCashSettlValueDateOffsetPeriod returns true if ProvisionCashSettlValueDateOffsetPeriod is present, Tag 40119.
func (m NoProvisions) HasProvisionCashSettlValueDateOffsetPeriod() bool {
	return m.Has(tag.ProvisionCashSettlValueDateOffsetPeriod)
}

// HasProvisionCashSettlValueDateOffsetUnit returns true if ProvisionCashSettlValueDateOffsetUnit is present, Tag 40120.
func (m NoProvisions) HasProvisionCashSettlValueDateOffsetUnit() bool {
	return m.Has(tag.ProvisionCashSettlValueDateOffsetUnit)
}

// HasProvisionCashSettlValueDateOffsetDayType returns true if ProvisionCashSettlValueDateOffsetDayType is present, Tag 40121.
func (m NoProvisions) HasProvisionCashSettlValueDateOffsetDayType() bool {
	return m.Has(tag.ProvisionCashSettlValueDateOffsetDayType)
}

// HasProvisionCashSettlValueDateAdjusted returns true if ProvisionCashSettlValueDateAdjusted is present, Tag 40122.
func (m NoProvisions) HasProvisionCashSettlValueDateAdjusted() bool {
	return m.Has(tag.ProvisionCashSettlValueDateAdjusted)
}

// HasProvisionOptionExerciseBusinessDayConvention returns true if ProvisionOptionExerciseBusinessDayConvention is present, Tag 40123.
func (m NoProvisions) HasProvisionOptionExerciseBusinessDayConvention() bool {
	return m.Has(tag.ProvisionOptionExerciseBusinessDayConvention)
}

// HasNoProvisionOptionExerciseBusinessCenters returns true if NoProvisionOptionExerciseBusinessCenters is present, Tag 40954.
func (m NoProvisions) HasNoProvisionOptionExerciseBusinessCenters() bool {
	return m.Has(tag.NoProvisionOptionExerciseBusinessCenters)
}

// HasNoProvisionOptionExerciseFixedDates returns true if NoProvisionOptionExerciseFixedDates is present, Tag 40142.
func (m NoProvisions) HasNoProvisionOptionExerciseFixedDates() bool {
	return m.Has(tag.NoProvisionOptionExerciseFixedDates)
}

// HasProvisionOptionExerciseEarliestDateOffsetPeriod returns true if ProvisionOptionExerciseEarliestDateOffsetPeriod is present, Tag 40125.
func (m NoProvisions) HasProvisionOptionExerciseEarliestDateOffsetPeriod() bool {
	return m.Has(tag.ProvisionOptionExerciseEarliestDateOffsetPeriod)
}

// HasProvisionOptionExerciseEarliestDateOffsetUnit returns true if ProvisionOptionExerciseEarliestDateOffsetUnit is present, Tag 40126.
func (m NoProvisions) HasProvisionOptionExerciseEarliestDateOffsetUnit() bool {
	return m.Has(tag.ProvisionOptionExerciseEarliestDateOffsetUnit)
}

// HasProvisionOptionExerciseFrequencyPeriod returns true if ProvisionOptionExerciseFrequencyPeriod is present, Tag 40127.
func (m NoProvisions) HasProvisionOptionExerciseFrequencyPeriod() bool {
	return m.Has(tag.ProvisionOptionExerciseFrequencyPeriod)
}

// HasProvisionOptionExerciseFrequencyUnit returns true if ProvisionOptionExerciseFrequencyUnit is present, Tag 40128.
func (m NoProvisions) HasProvisionOptionExerciseFrequencyUnit() bool {
	return m.Has(tag.ProvisionOptionExerciseFrequencyUnit)
}

// HasProvisionOptionExerciseStartDateUnadjusted returns true if ProvisionOptionExerciseStartDateUnadjusted is present, Tag 40129.
func (m NoProvisions) HasProvisionOptionExerciseStartDateUnadjusted() bool {
	return m.Has(tag.ProvisionOptionExerciseStartDateUnadjusted)
}

// HasProvisionOptionExerciseStartDateRelativeTo returns true if ProvisionOptionExerciseStartDateRelativeTo is present, Tag 40130.
func (m NoProvisions) HasProvisionOptionExerciseStartDateRelativeTo() bool {
	return m.Has(tag.ProvisionOptionExerciseStartDateRelativeTo)
}

// HasProvisionOptionExerciseStartDateOffsetPeriod returns true if ProvisionOptionExerciseStartDateOffsetPeriod is present, Tag 40131.
func (m NoProvisions) HasProvisionOptionExerciseStartDateOffsetPeriod() bool {
	return m.Has(tag.ProvisionOptionExerciseStartDateOffsetPeriod)
}

// HasProvisionOptionExerciseStartDateOffsetUnit returns true if ProvisionOptionExerciseStartDateOffsetUnit is present, Tag 40132.
func (m NoProvisions) HasProvisionOptionExerciseStartDateOffsetUnit() bool {
	return m.Has(tag.ProvisionOptionExerciseStartDateOffsetUnit)
}

// HasProvisionOptionExerciseStartDateOffsetDayType returns true if ProvisionOptionExerciseStartDateOffsetDayType is present, Tag 40133.
func (m NoProvisions) HasProvisionOptionExerciseStartDateOffsetDayType() bool {
	return m.Has(tag.ProvisionOptionExerciseStartDateOffsetDayType)
}

// HasProvisionOptionExerciseStartDateAdjusted returns true if ProvisionOptionExerciseStartDateAdjusted is present, Tag 40134.
func (m NoProvisions) HasProvisionOptionExerciseStartDateAdjusted() bool {
	return m.Has(tag.ProvisionOptionExerciseStartDateAdjusted)
}

// HasProvisionOptionExercisePeriodSkip returns true if ProvisionOptionExercisePeriodSkip is present, Tag 40135.
func (m NoProvisions) HasProvisionOptionExercisePeriodSkip() bool {
	return m.Has(tag.ProvisionOptionExercisePeriodSkip)
}

// HasProvisionOptionExerciseBoundsFirstDateUnadjusted returns true if ProvisionOptionExerciseBoundsFirstDateUnadjusted is present, Tag 40136.
func (m NoProvisions) HasProvisionOptionExerciseBoundsFirstDateUnadjusted() bool {
	return m.Has(tag.ProvisionOptionExerciseBoundsFirstDateUnadjusted)
}

// HasProvisionOptionExerciseBoundsLastDateUnadjusted returns true if ProvisionOptionExerciseBoundsLastDateUnadjusted is present, Tag 40137.
func (m NoProvisions) HasProvisionOptionExerciseBoundsLastDateUnadjusted() bool {
	return m.Has(tag.ProvisionOptionExerciseBoundsLastDateUnadjusted)
}

// HasProvisionOptionExerciseEarliestTime returns true if ProvisionOptionExerciseEarliestTime is present, Tag 40138.
func (m NoProvisions) HasProvisionOptionExerciseEarliestTime() bool {
	return m.Has(tag.ProvisionOptionExerciseEarliestTime)
}

// HasProvisionOptionExerciseEarliestTimeBusinessCenter returns true if ProvisionOptionExerciseEarliestTimeBusinessCenter is present, Tag 40139.
func (m NoProvisions) HasProvisionOptionExerciseEarliestTimeBusinessCenter() bool {
	return m.Has(tag.ProvisionOptionExerciseEarliestTimeBusinessCenter)
}

// HasProvisionOptionExerciseLatestTime returns true if ProvisionOptionExerciseLatestTime is present, Tag 40140.
func (m NoProvisions) HasProvisionOptionExerciseLatestTime() bool {
	return m.Has(tag.ProvisionOptionExerciseLatestTime)
}

// HasProvisionOptionExerciseLatestTimeBusinessCenter returns true if ProvisionOptionExerciseLatestTimeBusinessCenter is present, Tag 40141.
func (m NoProvisions) HasProvisionOptionExerciseLatestTimeBusinessCenter() bool {
	return m.Has(tag.ProvisionOptionExerciseLatestTimeBusinessCenter)
}

// HasProvisionOptionExpirationDateUnadjusted returns true if ProvisionOptionExpirationDateUnadjusted is present, Tag 40145.
func (m NoProvisions) HasProvisionOptionExpirationDateUnadjusted() bool {
	return m.Has(tag.ProvisionOptionExpirationDateUnadjusted)
}

// HasProvisionOptionExpirationDateBusinessDayConvention returns true if ProvisionOptionExpirationDateBusinessDayConvention is present, Tag 40146.
func (m NoProvisions) HasProvisionOptionExpirationDateBusinessDayConvention() bool {
	return m.Has(tag.ProvisionOptionExpirationDateBusinessDayConvention)
}

// HasNoProvisionOptionExpirationDateBusinessCenters returns true if NoProvisionOptionExpirationDateBusinessCenters is present, Tag 40955.
func (m NoProvisions) HasNoProvisionOptionExpirationDateBusinessCenters() bool {
	return m.Has(tag.NoProvisionOptionExpirationDateBusinessCenters)
}

// HasProvisionOptionExpirationDateRelativeTo returns true if ProvisionOptionExpirationDateRelativeTo is present, Tag 40148.
func (m NoProvisions) HasProvisionOptionExpirationDateRelativeTo() bool {
	return m.Has(tag.ProvisionOptionExpirationDateRelativeTo)
}

// HasProvisionOptionExpirationDateOffsetPeriod returns true if ProvisionOptionExpirationDateOffsetPeriod is present, Tag 40149.
func (m NoProvisions) HasProvisionOptionExpirationDateOffsetPeriod() bool {
	return m.Has(tag.ProvisionOptionExpirationDateOffsetPeriod)
}

// HasProvisionOptionExpirationDateOffsetUnit returns true if ProvisionOptionExpirationDateOffsetUnit is present, Tag 40150.
func (m NoProvisions) HasProvisionOptionExpirationDateOffsetUnit() bool {
	return m.Has(tag.ProvisionOptionExpirationDateOffsetUnit)
}

// HasProvisionOptionExpirationDateOffsetDayType returns true if ProvisionOptionExpirationDateOffsetDayType is present, Tag 40151.
func (m NoProvisions) HasProvisionOptionExpirationDateOffsetDayType() bool {
	return m.Has(tag.ProvisionOptionExpirationDateOffsetDayType)
}

// HasProvisionOptionExpirationDateAdjusted returns true if ProvisionOptionExpirationDateAdjusted is present, Tag 40152.
func (m NoProvisions) HasProvisionOptionExpirationDateAdjusted() bool {
	return m.Has(tag.ProvisionOptionExpirationDateAdjusted)
}

// HasProvisionOptionExpirationTime returns true if ProvisionOptionExpirationTime is present, Tag 40153.
func (m NoProvisions) HasProvisionOptionExpirationTime() bool {
	return m.Has(tag.ProvisionOptionExpirationTime)
}

// HasProvisionOptionExpirationTimeBusinessCenter returns true if ProvisionOptionExpirationTimeBusinessCenter is present, Tag 40154.
func (m NoProvisions) HasProvisionOptionExpirationTimeBusinessCenter() bool {
	return m.Has(tag.ProvisionOptionExpirationTimeBusinessCenter)
}

// HasProvisionOptionRelevantUnderlyingDateUnadjusted returns true if ProvisionOptionRelevantUnderlyingDateUnadjusted is present, Tag 40155.
func (m NoProvisions) HasProvisionOptionRelevantUnderlyingDateUnadjusted() bool {
	return m.Has(tag.ProvisionOptionRelevantUnderlyingDateUnadjusted)
}

// HasProvisionOptionRelevantUnderlyingDateBusinessDayConvention returns true if ProvisionOptionRelevantUnderlyingDateBusinessDayConvention is present, Tag 40156.
func (m NoProvisions) HasProvisionOptionRelevantUnderlyingDateBusinessDayConvention() bool {
	return m.Has(tag.ProvisionOptionRelevantUnderlyingDateBusinessDayConvention)
}

// HasNoProvisionOptionRelevantUnderlyingDateBusinessCenters returns true if NoProvisionOptionRelevantUnderlyingDateBusinessCenters is present, Tag 40956.
func (m NoProvisions) HasNoProvisionOptionRelevantUnderlyingDateBusinessCenters() bool {
	return m.Has(tag.NoProvisionOptionRelevantUnderlyingDateBusinessCenters)
}

// HasProvisionOptionRelevantUnderlyingDateRelativeTo returns true if ProvisionOptionRelevantUnderlyingDateRelativeTo is present, Tag 40158.
func (m NoProvisions) HasProvisionOptionRelevantUnderlyingDateRelativeTo() bool {
	return m.Has(tag.ProvisionOptionRelevantUnderlyingDateRelativeTo)
}

// HasProvisionOptionRelevantUnderlyingDateOffsetPeriod returns true if ProvisionOptionRelevantUnderlyingDateOffsetPeriod is present, Tag 40159.
func (m NoProvisions) HasProvisionOptionRelevantUnderlyingDateOffsetPeriod() bool {
	return m.Has(tag.ProvisionOptionRelevantUnderlyingDateOffsetPeriod)
}

// HasProvisionOptionRelevantUnderlyingDateOffsetUnit returns true if ProvisionOptionRelevantUnderlyingDateOffsetUnit is present, Tag 40160.
func (m NoProvisions) HasProvisionOptionRelevantUnderlyingDateOffsetUnit() bool {
	return m.Has(tag.ProvisionOptionRelevantUnderlyingDateOffsetUnit)
}

// HasProvisionOptionRelevantUnderlyingDateOffsetDayType returns true if ProvisionOptionRelevantUnderlyingDateOffsetDayType is present, Tag 40161.
func (m NoProvisions) HasProvisionOptionRelevantUnderlyingDateOffsetDayType() bool {
	return m.Has(tag.ProvisionOptionRelevantUnderlyingDateOffsetDayType)
}

// HasProvisionOptionRelevantUnderlyingDateAdjusted returns true if ProvisionOptionRelevantUnderlyingDateAdjusted is present, Tag 40162.
func (m NoProvisions) HasProvisionOptionRelevantUnderlyingDateAdjusted() bool {
	return m.Has(tag.ProvisionOptionRelevantUnderlyingDateAdjusted)
}

// HasProvisionOptionExerciseStyle returns true if ProvisionOptionExerciseStyle is present, Tag 40101.
func (m NoProvisions) HasProvisionOptionExerciseStyle() bool {
	return m.Has(tag.ProvisionOptionExerciseStyle)
}

// HasProvisionOptionExerciseMultipleNotional returns true if ProvisionOptionExerciseMultipleNotional is present, Tag 40102.
func (m NoProvisions) HasProvisionOptionExerciseMultipleNotional() bool {
	return m.Has(tag.ProvisionOptionExerciseMultipleNotional)
}

// HasProvisionOptionExerciseMinimumNotional returns true if ProvisionOptionExerciseMinimumNotional is present, Tag 40103.
func (m NoProvisions) HasProvisionOptionExerciseMinimumNotional() bool {
	return m.Has(tag.ProvisionOptionExerciseMinimumNotional)
}

// HasProvisionOptionExerciseMaximumNotional returns true if ProvisionOptionExerciseMaximumNotional is present, Tag 40104.
func (m NoProvisions) HasProvisionOptionExerciseMaximumNotional() bool {
	return m.Has(tag.ProvisionOptionExerciseMaximumNotional)
}

// HasProvisionOptionMinimumNumber returns true if ProvisionOptionMinimumNumber is present, Tag 40105.
func (m NoProvisions) HasProvisionOptionMinimumNumber() bool {
	return m.Has(tag.ProvisionOptionMinimumNumber)
}

// HasProvisionOptionMaximumNumber returns true if ProvisionOptionMaximumNumber is present, Tag 40106.
func (m NoProvisions) HasProvisionOptionMaximumNumber() bool {
	return m.Has(tag.ProvisionOptionMaximumNumber)
}

// HasProvisionOptionExerciseConfirmation returns true if ProvisionOptionExerciseConfirmation is present, Tag 40107.
func (m NoProvisions) HasProvisionOptionExerciseConfirmation() bool {
	return m.Has(tag.ProvisionOptionExerciseConfirmation)
}

// HasProvisionCashSettlPaymentDateBusinessDayConvention returns true if ProvisionCashSettlPaymentDateBusinessDayConvention is present, Tag 40163.
func (m NoProvisions) HasProvisionCashSettlPaymentDateBusinessDayConvention() bool {
	return m.Has(tag.ProvisionCashSettlPaymentDateBusinessDayConvention)
}

// HasNoProvisionCashSettlPaymentDateBusinessCenters returns true if NoProvisionCashSettlPaymentDateBusinessCenters is present, Tag 40952.
func (m NoProvisions) HasNoProvisionCashSettlPaymentDateBusinessCenters() bool {
	return m.Has(tag.NoProvisionCashSettlPaymentDateBusinessCenters)
}

// HasProvisionCashSettlPaymentDateRelativeTo returns true if ProvisionCashSettlPaymentDateRelativeTo is present, Tag 40165.
func (m NoProvisions) HasProvisionCashSettlPaymentDateRelativeTo() bool {
	return m.Has(tag.ProvisionCashSettlPaymentDateRelativeTo)
}

// HasProvisionCashSettlPaymentDateOffsetPeriod returns true if ProvisionCashSettlPaymentDateOffsetPeriod is present, Tag 40166.
func (m NoProvisions) HasProvisionCashSettlPaymentDateOffsetPeriod() bool {
	return m.Has(tag.ProvisionCashSettlPaymentDateOffsetPeriod)
}

// HasProvisionCashSettlPaymentDateOffsetUnit returns true if ProvisionCashSettlPaymentDateOffsetUnit is present, Tag 40167.
func (m NoProvisions) HasProvisionCashSettlPaymentDateOffsetUnit() bool {
	return m.Has(tag.ProvisionCashSettlPaymentDateOffsetUnit)
}

// HasProvisionCashSettlPaymentDateOffsetDayType returns true if ProvisionCashSettlPaymentDateOffsetDayType is present, Tag 40168.
func (m NoProvisions) HasProvisionCashSettlPaymentDateOffsetDayType() bool {
	return m.Has(tag.ProvisionCashSettlPaymentDateOffsetDayType)
}

// HasProvisionCashSettlPaymentDateRangeFirst returns true if ProvisionCashSettlPaymentDateRangeFirst is present, Tag 40169.
func (m NoProvisions) HasProvisionCashSettlPaymentDateRangeFirst() bool {
	return m.Has(tag.ProvisionCashSettlPaymentDateRangeFirst)
}

// HasProvisionCashSettlPaymentDateRangeLast returns true if ProvisionCashSettlPaymentDateRangeLast is present, Tag 40170.
func (m NoProvisions) HasProvisionCashSettlPaymentDateRangeLast() bool {
	return m.Has(tag.ProvisionCashSettlPaymentDateRangeLast)
}

// HasNoProvisionCashSettlPaymentDates returns true if NoProvisionCashSettlPaymentDates is present, Tag 40171.
func (m NoProvisions) HasNoProvisionCashSettlPaymentDates() bool {
	return m.Has(tag.NoProvisionCashSettlPaymentDates)
}

// HasProvisionCashSettlMethod returns true if ProvisionCashSettlMethod is present, Tag 40108.
func (m NoProvisions) HasProvisionCashSettlMethod() bool {
	return m.Has(tag.ProvisionCashSettlMethod)
}

// HasProvisionCashSettlCurrency returns true if ProvisionCashSettlCurrency is present, Tag 40109.
func (m NoProvisions) HasProvisionCashSettlCurrency() bool {
	return m.Has(tag.ProvisionCashSettlCurrency)
}

// HasProvisionCashSettlCurrency2 returns true if ProvisionCashSettlCurrency2 is present, Tag 40110.
func (m NoProvisions) HasProvisionCashSettlCurrency2() bool {
	return m.Has(tag.ProvisionCashSettlCurrency2)
}

// HasProvisionCashSettlQuoteType returns true if ProvisionCashSettlQuoteType is present, Tag 40111.
func (m NoProvisions) HasProvisionCashSettlQuoteType() bool {
	return m.Has(tag.ProvisionCashSettlQuoteType)
}

// HasProvisionCashSettlQuoteSource returns true if ProvisionCashSettlQuoteSource is present, Tag 40112.
func (m NoProvisions) HasProvisionCashSettlQuoteSource() bool {
	return m.Has(tag.ProvisionCashSettlQuoteSource)
}

// HasProvisionCashSettlQuoteReferencePage returns true if ProvisionCashSettlQuoteReferencePage is present, Tag 41406.
func (m NoProvisions) HasProvisionCashSettlQuoteReferencePage() bool {
	return m.Has(tag.ProvisionCashSettlQuoteReferencePage)
}

// HasProvisionText returns true if ProvisionText is present, Tag 40113.
func (m NoProvisions) HasProvisionText() bool {
	return m.Has(tag.ProvisionText)
}

// HasEncodedProvisionTextLen returns true if EncodedProvisionTextLen is present, Tag 40986.
func (m NoProvisions) HasEncodedProvisionTextLen() bool {
	return m.Has(tag.EncodedProvisionTextLen)
}

// HasEncodedProvisionText returns true if EncodedProvisionText is present, Tag 40987.
func (m NoProvisions) HasEncodedProvisionText() bool {
	return m.Has(tag.EncodedProvisionText)
}

// HasNoProvisionPartyIDs returns true if NoProvisionPartyIDs is present, Tag 40174.
func (m NoProvisions) HasNoProvisionPartyIDs() bool {
	return m.Has(tag.NoProvisionPartyIDs)
}

// HasProvisionBreakFeeElection returns true if ProvisionBreakFeeElection is present, Tag 42707.
func (m NoProvisions) HasProvisionBreakFeeElection() bool {
	return m.Has(tag.ProvisionBreakFeeElection)
}

// HasProvisionBreakFeeRate returns true if ProvisionBreakFeeRate is present, Tag 42708.
func (m NoProvisions) HasProvisionBreakFeeRate() bool {
	return m.Has(tag.ProvisionBreakFeeRate)
}

// NoProvisionDateBusinessCenters is a repeating group element, Tag 40957.
type NoProvisionDateBusinessCenters struct {
	*quickfix.Group
}

// SetProvisionDateBusinessCenter sets ProvisionDateBusinessCenter, Tag 40094.
func (m NoProvisionDateBusinessCenters) SetProvisionDateBusinessCenter(v string) {
	m.Set(field.NewProvisionDateBusinessCenter(v))
}

// GetProvisionDateBusinessCenter gets ProvisionDateBusinessCenter, Tag 40094.
func (m NoProvisionDateBusinessCenters) GetProvisionDateBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.ProvisionDateBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasProvisionDateBusinessCenter returns true if ProvisionDateBusinessCenter is present, Tag 40094.
func (m NoProvisionDateBusinessCenters) HasProvisionDateBusinessCenter() bool {
	return m.Has(tag.ProvisionDateBusinessCenter)
}

// NoProvisionDateBusinessCentersRepeatingGroup is a repeating group, Tag 40957.
type NoProvisionDateBusinessCentersRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoProvisionDateBusinessCentersRepeatingGroup returns an initialized, NoProvisionDateBusinessCentersRepeatingGroup.
func NewNoProvisionDateBusinessCentersRepeatingGroup() NoProvisionDateBusinessCentersRepeatingGroup {
	return NoProvisionDateBusinessCentersRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoProvisionDateBusinessCenters,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.ProvisionDateBusinessCenter),
			},
		),
	}
}

// Add create and append a new NoProvisionDateBusinessCenters to this group.
func (m NoProvisionDateBusinessCentersRepeatingGroup) Add() NoProvisionDateBusinessCenters {
	g := m.RepeatingGroup.Add()
	return NoProvisionDateBusinessCenters{g}
}

// Get returns the ith NoProvisionDateBusinessCenters in the NoProvisionDateBusinessCentersRepeatinGroup.
func (m NoProvisionDateBusinessCentersRepeatingGroup) Get(i int) NoProvisionDateBusinessCenters {
	return NoProvisionDateBusinessCenters{m.RepeatingGroup.Get(i)}
}

// NoProvisionCashSettlValueDateBusinessCenters is a repeating group element, Tag 40953.
type NoProvisionCashSettlValueDateBusinessCenters struct {
	*quickfix.Group
}

// SetProvisionCashSettlValueDateBusinessCenter sets ProvisionCashSettlValueDateBusinessCenter, Tag 40117.
func (m NoProvisionCashSettlValueDateBusinessCenters) SetProvisionCashSettlValueDateBusinessCenter(v string) {
	m.Set(field.NewProvisionCashSettlValueDateBusinessCenter(v))
}

// GetProvisionCashSettlValueDateBusinessCenter gets ProvisionCashSettlValueDateBusinessCenter, Tag 40117.
func (m NoProvisionCashSettlValueDateBusinessCenters) GetProvisionCashSettlValueDateBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.ProvisionCashSettlValueDateBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasProvisionCashSettlValueDateBusinessCenter returns true if ProvisionCashSettlValueDateBusinessCenter is present, Tag 40117.
func (m NoProvisionCashSettlValueDateBusinessCenters) HasProvisionCashSettlValueDateBusinessCenter() bool {
	return m.Has(tag.ProvisionCashSettlValueDateBusinessCenter)
}

// NoProvisionCashSettlValueDateBusinessCentersRepeatingGroup is a repeating group, Tag 40953.
type NoProvisionCashSettlValueDateBusinessCentersRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoProvisionCashSettlValueDateBusinessCentersRepeatingGroup returns an initialized, NoProvisionCashSettlValueDateBusinessCentersRepeatingGroup.
func NewNoProvisionCashSettlValueDateBusinessCentersRepeatingGroup() NoProvisionCashSettlValueDateBusinessCentersRepeatingGroup {
	return NoProvisionCashSettlValueDateBusinessCentersRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoProvisionCashSettlValueDateBusinessCenters,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.ProvisionCashSettlValueDateBusinessCenter),
			},
		),
	}
}

// Add create and append a new NoProvisionCashSettlValueDateBusinessCenters to this group.
func (m NoProvisionCashSettlValueDateBusinessCentersRepeatingGroup) Add() NoProvisionCashSettlValueDateBusinessCenters {
	g := m.RepeatingGroup.Add()
	return NoProvisionCashSettlValueDateBusinessCenters{g}
}

// Get returns the ith NoProvisionCashSettlValueDateBusinessCenters in the NoProvisionCashSettlValueDateBusinessCentersRepeatinGroup.
func (m NoProvisionCashSettlValueDateBusinessCentersRepeatingGroup) Get(i int) NoProvisionCashSettlValueDateBusinessCenters {
	return NoProvisionCashSettlValueDateBusinessCenters{m.RepeatingGroup.Get(i)}
}

// NoProvisionOptionExerciseBusinessCenters is a repeating group element, Tag 40954.
type NoProvisionOptionExerciseBusinessCenters struct {
	*quickfix.Group
}

// SetProvisionOptionExerciseBusinessCenter sets ProvisionOptionExerciseBusinessCenter, Tag 40124.
func (m NoProvisionOptionExerciseBusinessCenters) SetProvisionOptionExerciseBusinessCenter(v string) {
	m.Set(field.NewProvisionOptionExerciseBusinessCenter(v))
}

// GetProvisionOptionExerciseBusinessCenter gets ProvisionOptionExerciseBusinessCenter, Tag 40124.
func (m NoProvisionOptionExerciseBusinessCenters) GetProvisionOptionExerciseBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.ProvisionOptionExerciseBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasProvisionOptionExerciseBusinessCenter returns true if ProvisionOptionExerciseBusinessCenter is present, Tag 40124.
func (m NoProvisionOptionExerciseBusinessCenters) HasProvisionOptionExerciseBusinessCenter() bool {
	return m.Has(tag.ProvisionOptionExerciseBusinessCenter)
}

// NoProvisionOptionExerciseBusinessCentersRepeatingGroup is a repeating group, Tag 40954.
type NoProvisionOptionExerciseBusinessCentersRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoProvisionOptionExerciseBusinessCentersRepeatingGroup returns an initialized, NoProvisionOptionExerciseBusinessCentersRepeatingGroup.
func NewNoProvisionOptionExerciseBusinessCentersRepeatingGroup() NoProvisionOptionExerciseBusinessCentersRepeatingGroup {
	return NoProvisionOptionExerciseBusinessCentersRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoProvisionOptionExerciseBusinessCenters,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.ProvisionOptionExerciseBusinessCenter),
			},
		),
	}
}

// Add create and append a new NoProvisionOptionExerciseBusinessCenters to this group.
func (m NoProvisionOptionExerciseBusinessCentersRepeatingGroup) Add() NoProvisionOptionExerciseBusinessCenters {
	g := m.RepeatingGroup.Add()
	return NoProvisionOptionExerciseBusinessCenters{g}
}

// Get returns the ith NoProvisionOptionExerciseBusinessCenters in the NoProvisionOptionExerciseBusinessCentersRepeatinGroup.
func (m NoProvisionOptionExerciseBusinessCentersRepeatingGroup) Get(i int) NoProvisionOptionExerciseBusinessCenters {
	return NoProvisionOptionExerciseBusinessCenters{m.RepeatingGroup.Get(i)}
}

// NoProvisionOptionExerciseFixedDates is a repeating group element, Tag 40142.
type NoProvisionOptionExerciseFixedDates struct {
	*quickfix.Group
}

// SetProvisionOptionExerciseFixedDate sets ProvisionOptionExerciseFixedDate, Tag 40143.
func (m NoProvisionOptionExerciseFixedDates) SetProvisionOptionExerciseFixedDate(v string) {
	m.Set(field.NewProvisionOptionExerciseFixedDate(v))
}

// SetProvisionOptionExerciseFixedDateType sets ProvisionOptionExerciseFixedDateType, Tag 40144.
func (m NoProvisionOptionExerciseFixedDates) SetProvisionOptionExerciseFixedDateType(v enum.ProvisionOptionExerciseFixedDateType) {
	m.Set(field.NewProvisionOptionExerciseFixedDateType(v))
}

// GetProvisionOptionExerciseFixedDate gets ProvisionOptionExerciseFixedDate, Tag 40143.
func (m NoProvisionOptionExerciseFixedDates) GetProvisionOptionExerciseFixedDate() (v string, err quickfix.MessageRejectError) {
	var f field.ProvisionOptionExerciseFixedDateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProvisionOptionExerciseFixedDateType gets ProvisionOptionExerciseFixedDateType, Tag 40144.
func (m NoProvisionOptionExerciseFixedDates) GetProvisionOptionExerciseFixedDateType() (v enum.ProvisionOptionExerciseFixedDateType, err quickfix.MessageRejectError) {
	var f field.ProvisionOptionExerciseFixedDateTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasProvisionOptionExerciseFixedDate returns true if ProvisionOptionExerciseFixedDate is present, Tag 40143.
func (m NoProvisionOptionExerciseFixedDates) HasProvisionOptionExerciseFixedDate() bool {
	return m.Has(tag.ProvisionOptionExerciseFixedDate)
}

// HasProvisionOptionExerciseFixedDateType returns true if ProvisionOptionExerciseFixedDateType is present, Tag 40144.
func (m NoProvisionOptionExerciseFixedDates) HasProvisionOptionExerciseFixedDateType() bool {
	return m.Has(tag.ProvisionOptionExerciseFixedDateType)
}

// NoProvisionOptionExerciseFixedDatesRepeatingGroup is a repeating group, Tag 40142.
type NoProvisionOptionExerciseFixedDatesRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoProvisionOptionExerciseFixedDatesRepeatingGroup returns an initialized, NoProvisionOptionExerciseFixedDatesRepeatingGroup.
func NewNoProvisionOptionExerciseFixedDatesRepeatingGroup() NoProvisionOptionExerciseFixedDatesRepeatingGroup {
	return NoProvisionOptionExerciseFixedDatesRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoProvisionOptionExerciseFixedDates,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.ProvisionOptionExerciseFixedDate),
				quickfix.GroupElement(tag.ProvisionOptionExerciseFixedDateType),
			},
		),
	}
}

// Add create and append a new NoProvisionOptionExerciseFixedDates to this group.
func (m NoProvisionOptionExerciseFixedDatesRepeatingGroup) Add() NoProvisionOptionExerciseFixedDates {
	g := m.RepeatingGroup.Add()
	return NoProvisionOptionExerciseFixedDates{g}
}

// Get returns the ith NoProvisionOptionExerciseFixedDates in the NoProvisionOptionExerciseFixedDatesRepeatinGroup.
func (m NoProvisionOptionExerciseFixedDatesRepeatingGroup) Get(i int) NoProvisionOptionExerciseFixedDates {
	return NoProvisionOptionExerciseFixedDates{m.RepeatingGroup.Get(i)}
}

// NoProvisionOptionExpirationDateBusinessCenters is a repeating group element, Tag 40955.
type NoProvisionOptionExpirationDateBusinessCenters struct {
	*quickfix.Group
}

// SetProvisionOptionExpirationDateBusinessCenter sets ProvisionOptionExpirationDateBusinessCenter, Tag 40147.
func (m NoProvisionOptionExpirationDateBusinessCenters) SetProvisionOptionExpirationDateBusinessCenter(v string) {
	m.Set(field.NewProvisionOptionExpirationDateBusinessCenter(v))
}

// GetProvisionOptionExpirationDateBusinessCenter gets ProvisionOptionExpirationDateBusinessCenter, Tag 40147.
func (m NoProvisionOptionExpirationDateBusinessCenters) GetProvisionOptionExpirationDateBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.ProvisionOptionExpirationDateBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasProvisionOptionExpirationDateBusinessCenter returns true if ProvisionOptionExpirationDateBusinessCenter is present, Tag 40147.
func (m NoProvisionOptionExpirationDateBusinessCenters) HasProvisionOptionExpirationDateBusinessCenter() bool {
	return m.Has(tag.ProvisionOptionExpirationDateBusinessCenter)
}

// NoProvisionOptionExpirationDateBusinessCentersRepeatingGroup is a repeating group, Tag 40955.
type NoProvisionOptionExpirationDateBusinessCentersRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoProvisionOptionExpirationDateBusinessCentersRepeatingGroup returns an initialized, NoProvisionOptionExpirationDateBusinessCentersRepeatingGroup.
func NewNoProvisionOptionExpirationDateBusinessCentersRepeatingGroup() NoProvisionOptionExpirationDateBusinessCentersRepeatingGroup {
	return NoProvisionOptionExpirationDateBusinessCentersRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoProvisionOptionExpirationDateBusinessCenters,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.ProvisionOptionExpirationDateBusinessCenter),
			},
		),
	}
}

// Add create and append a new NoProvisionOptionExpirationDateBusinessCenters to this group.
func (m NoProvisionOptionExpirationDateBusinessCentersRepeatingGroup) Add() NoProvisionOptionExpirationDateBusinessCenters {
	g := m.RepeatingGroup.Add()
	return NoProvisionOptionExpirationDateBusinessCenters{g}
}

// Get returns the ith NoProvisionOptionExpirationDateBusinessCenters in the NoProvisionOptionExpirationDateBusinessCentersRepeatinGroup.
func (m NoProvisionOptionExpirationDateBusinessCentersRepeatingGroup) Get(i int) NoProvisionOptionExpirationDateBusinessCenters {
	return NoProvisionOptionExpirationDateBusinessCenters{m.RepeatingGroup.Get(i)}
}

// NoProvisionOptionRelevantUnderlyingDateBusinessCenters is a repeating group element, Tag 40956.
type NoProvisionOptionRelevantUnderlyingDateBusinessCenters struct {
	*quickfix.Group
}

// SetProvisionOptionRelevantUnderlyingDateBusinessCenter sets ProvisionOptionRelevantUnderlyingDateBusinessCenter, Tag 40157.
func (m NoProvisionOptionRelevantUnderlyingDateBusinessCenters) SetProvisionOptionRelevantUnderlyingDateBusinessCenter(v string) {
	m.Set(field.NewProvisionOptionRelevantUnderlyingDateBusinessCenter(v))
}

// GetProvisionOptionRelevantUnderlyingDateBusinessCenter gets ProvisionOptionRelevantUnderlyingDateBusinessCenter, Tag 40157.
func (m NoProvisionOptionRelevantUnderlyingDateBusinessCenters) GetProvisionOptionRelevantUnderlyingDateBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.ProvisionOptionRelevantUnderlyingDateBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasProvisionOptionRelevantUnderlyingDateBusinessCenter returns true if ProvisionOptionRelevantUnderlyingDateBusinessCenter is present, Tag 40157.
func (m NoProvisionOptionRelevantUnderlyingDateBusinessCenters) HasProvisionOptionRelevantUnderlyingDateBusinessCenter() bool {
	return m.Has(tag.ProvisionOptionRelevantUnderlyingDateBusinessCenter)
}

// NoProvisionOptionRelevantUnderlyingDateBusinessCentersRepeatingGroup is a repeating group, Tag 40956.
type NoProvisionOptionRelevantUnderlyingDateBusinessCentersRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoProvisionOptionRelevantUnderlyingDateBusinessCentersRepeatingGroup returns an initialized, NoProvisionOptionRelevantUnderlyingDateBusinessCentersRepeatingGroup.
func NewNoProvisionOptionRelevantUnderlyingDateBusinessCentersRepeatingGroup() NoProvisionOptionRelevantUnderlyingDateBusinessCentersRepeatingGroup {
	return NoProvisionOptionRelevantUnderlyingDateBusinessCentersRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoProvisionOptionRelevantUnderlyingDateBusinessCenters,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.ProvisionOptionRelevantUnderlyingDateBusinessCenter),
			},
		),
	}
}

// Add create and append a new NoProvisionOptionRelevantUnderlyingDateBusinessCenters to this group.
func (m NoProvisionOptionRelevantUnderlyingDateBusinessCentersRepeatingGroup) Add() NoProvisionOptionRelevantUnderlyingDateBusinessCenters {
	g := m.RepeatingGroup.Add()
	return NoProvisionOptionRelevantUnderlyingDateBusinessCenters{g}
}

// Get returns the ith NoProvisionOptionRelevantUnderlyingDateBusinessCenters in the NoProvisionOptionRelevantUnderlyingDateBusinessCentersRepeatinGroup.
func (m NoProvisionOptionRelevantUnderlyingDateBusinessCentersRepeatingGroup) Get(i int) NoProvisionOptionRelevantUnderlyingDateBusinessCenters {
	return NoProvisionOptionRelevantUnderlyingDateBusinessCenters{m.RepeatingGroup.Get(i)}
}

// NoProvisionCashSettlPaymentDateBusinessCenters is a repeating group element, Tag 40952.
type NoProvisionCashSettlPaymentDateBusinessCenters struct {
	*quickfix.Group
}

// SetProvisionCashSettlPaymentDateBusinessCenter sets ProvisionCashSettlPaymentDateBusinessCenter, Tag 40164.
func (m NoProvisionCashSettlPaymentDateBusinessCenters) SetProvisionCashSettlPaymentDateBusinessCenter(v string) {
	m.Set(field.NewProvisionCashSettlPaymentDateBusinessCenter(v))
}

// GetProvisionCashSettlPaymentDateBusinessCenter gets ProvisionCashSettlPaymentDateBusinessCenter, Tag 40164.
func (m NoProvisionCashSettlPaymentDateBusinessCenters) GetProvisionCashSettlPaymentDateBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.ProvisionCashSettlPaymentDateBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasProvisionCashSettlPaymentDateBusinessCenter returns true if ProvisionCashSettlPaymentDateBusinessCenter is present, Tag 40164.
func (m NoProvisionCashSettlPaymentDateBusinessCenters) HasProvisionCashSettlPaymentDateBusinessCenter() bool {
	return m.Has(tag.ProvisionCashSettlPaymentDateBusinessCenter)
}

// NoProvisionCashSettlPaymentDateBusinessCentersRepeatingGroup is a repeating group, Tag 40952.
type NoProvisionCashSettlPaymentDateBusinessCentersRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoProvisionCashSettlPaymentDateBusinessCentersRepeatingGroup returns an initialized, NoProvisionCashSettlPaymentDateBusinessCentersRepeatingGroup.
func NewNoProvisionCashSettlPaymentDateBusinessCentersRepeatingGroup() NoProvisionCashSettlPaymentDateBusinessCentersRepeatingGroup {
	return NoProvisionCashSettlPaymentDateBusinessCentersRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoProvisionCashSettlPaymentDateBusinessCenters,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.ProvisionCashSettlPaymentDateBusinessCenter),
			},
		),
	}
}

// Add create and append a new NoProvisionCashSettlPaymentDateBusinessCenters to this group.
func (m NoProvisionCashSettlPaymentDateBusinessCentersRepeatingGroup) Add() NoProvisionCashSettlPaymentDateBusinessCenters {
	g := m.RepeatingGroup.Add()
	return NoProvisionCashSettlPaymentDateBusinessCenters{g}
}

// Get returns the ith NoProvisionCashSettlPaymentDateBusinessCenters in the NoProvisionCashSettlPaymentDateBusinessCentersRepeatinGroup.
func (m NoProvisionCashSettlPaymentDateBusinessCentersRepeatingGroup) Get(i int) NoProvisionCashSettlPaymentDateBusinessCenters {
	return NoProvisionCashSettlPaymentDateBusinessCenters{m.RepeatingGroup.Get(i)}
}

// NoProvisionCashSettlPaymentDates is a repeating group element, Tag 40171.
type NoProvisionCashSettlPaymentDates struct {
	*quickfix.Group
}

// SetProvisionCashSettlPaymentDate sets ProvisionCashSettlPaymentDate, Tag 40172.
func (m NoProvisionCashSettlPaymentDates) SetProvisionCashSettlPaymentDate(v string) {
	m.Set(field.NewProvisionCashSettlPaymentDate(v))
}

// SetProvisionCashSettlPaymentDateType sets ProvisionCashSettlPaymentDateType, Tag 40173.
func (m NoProvisionCashSettlPaymentDates) SetProvisionCashSettlPaymentDateType(v enum.ProvisionCashSettlPaymentDateType) {
	m.Set(field.NewProvisionCashSettlPaymentDateType(v))
}

// GetProvisionCashSettlPaymentDate gets ProvisionCashSettlPaymentDate, Tag 40172.
func (m NoProvisionCashSettlPaymentDates) GetProvisionCashSettlPaymentDate() (v string, err quickfix.MessageRejectError) {
	var f field.ProvisionCashSettlPaymentDateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProvisionCashSettlPaymentDateType gets ProvisionCashSettlPaymentDateType, Tag 40173.
func (m NoProvisionCashSettlPaymentDates) GetProvisionCashSettlPaymentDateType() (v enum.ProvisionCashSettlPaymentDateType, err quickfix.MessageRejectError) {
	var f field.ProvisionCashSettlPaymentDateTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasProvisionCashSettlPaymentDate returns true if ProvisionCashSettlPaymentDate is present, Tag 40172.
func (m NoProvisionCashSettlPaymentDates) HasProvisionCashSettlPaymentDate() bool {
	return m.Has(tag.ProvisionCashSettlPaymentDate)
}

// HasProvisionCashSettlPaymentDateType returns true if ProvisionCashSettlPaymentDateType is present, Tag 40173.
func (m NoProvisionCashSettlPaymentDates) HasProvisionCashSettlPaymentDateType() bool {
	return m.Has(tag.ProvisionCashSettlPaymentDateType)
}

// NoProvisionCashSettlPaymentDatesRepeatingGroup is a repeating group, Tag 40171.
type NoProvisionCashSettlPaymentDatesRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoProvisionCashSettlPaymentDatesRepeatingGroup returns an initialized, NoProvisionCashSettlPaymentDatesRepeatingGroup.
func NewNoProvisionCashSettlPaymentDatesRepeatingGroup() NoProvisionCashSettlPaymentDatesRepeatingGroup {
	return NoProvisionCashSettlPaymentDatesRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoProvisionCashSettlPaymentDates,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.ProvisionCashSettlPaymentDate),
				quickfix.GroupElement(tag.ProvisionCashSettlPaymentDateType),
			},
		),
	}
}

// Add create and append a new NoProvisionCashSettlPaymentDates to this group.
func (m NoProvisionCashSettlPaymentDatesRepeatingGroup) Add() NoProvisionCashSettlPaymentDates {
	g := m.RepeatingGroup.Add()
	return NoProvisionCashSettlPaymentDates{g}
}

// Get returns the ith NoProvisionCashSettlPaymentDates in the NoProvisionCashSettlPaymentDatesRepeatinGroup.
func (m NoProvisionCashSettlPaymentDatesRepeatingGroup) Get(i int) NoProvisionCashSettlPaymentDates {
	return NoProvisionCashSettlPaymentDates{m.RepeatingGroup.Get(i)}
}

// NoProvisionPartyIDs is a repeating group element, Tag 40174.
type NoProvisionPartyIDs struct {
	*quickfix.Group
}

// SetProvisionPartyID sets ProvisionPartyID, Tag 40175.
func (m NoProvisionPartyIDs) SetProvisionPartyID(v string) {
	m.Set(field.NewProvisionPartyID(v))
}

// SetProvisionPartyIDSource sets ProvisionPartyIDSource, Tag 40176.
func (m NoProvisionPartyIDs) SetProvisionPartyIDSource(v string) {
	m.Set(field.NewProvisionPartyIDSource(v))
}

// SetProvisionPartyRole sets ProvisionPartyRole, Tag 40177.
func (m NoProvisionPartyIDs) SetProvisionPartyRole(v int) {
	m.Set(field.NewProvisionPartyRole(v))
}

// SetNoProvisionPartySubIDs sets NoProvisionPartySubIDs, Tag 40178.
func (m NoProvisionPartyIDs) SetNoProvisionPartySubIDs(f NoProvisionPartySubIDsRepeatingGroup) {
	m.SetGroup(f)
}

// SetProvisionPartyRoleQualifier sets ProvisionPartyRoleQualifier, Tag 2385.
func (m NoProvisionPartyIDs) SetProvisionPartyRoleQualifier(v int) {
	m.Set(field.NewProvisionPartyRoleQualifier(v))
}

// GetProvisionPartyID gets ProvisionPartyID, Tag 40175.
func (m NoProvisionPartyIDs) GetProvisionPartyID() (v string, err quickfix.MessageRejectError) {
	var f field.ProvisionPartyIDField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProvisionPartyIDSource gets ProvisionPartyIDSource, Tag 40176.
func (m NoProvisionPartyIDs) GetProvisionPartyIDSource() (v string, err quickfix.MessageRejectError) {
	var f field.ProvisionPartyIDSourceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProvisionPartyRole gets ProvisionPartyRole, Tag 40177.
func (m NoProvisionPartyIDs) GetProvisionPartyRole() (v int, err quickfix.MessageRejectError) {
	var f field.ProvisionPartyRoleField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoProvisionPartySubIDs gets NoProvisionPartySubIDs, Tag 40178.
func (m NoProvisionPartyIDs) GetNoProvisionPartySubIDs() (NoProvisionPartySubIDsRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoProvisionPartySubIDsRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetProvisionPartyRoleQualifier gets ProvisionPartyRoleQualifier, Tag 2385.
func (m NoProvisionPartyIDs) GetProvisionPartyRoleQualifier() (v int, err quickfix.MessageRejectError) {
	var f field.ProvisionPartyRoleQualifierField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasProvisionPartyID returns true if ProvisionPartyID is present, Tag 40175.
func (m NoProvisionPartyIDs) HasProvisionPartyID() bool {
	return m.Has(tag.ProvisionPartyID)
}

// HasProvisionPartyIDSource returns true if ProvisionPartyIDSource is present, Tag 40176.
func (m NoProvisionPartyIDs) HasProvisionPartyIDSource() bool {
	return m.Has(tag.ProvisionPartyIDSource)
}

// HasProvisionPartyRole returns true if ProvisionPartyRole is present, Tag 40177.
func (m NoProvisionPartyIDs) HasProvisionPartyRole() bool {
	return m.Has(tag.ProvisionPartyRole)
}

// HasNoProvisionPartySubIDs returns true if NoProvisionPartySubIDs is present, Tag 40178.
func (m NoProvisionPartyIDs) HasNoProvisionPartySubIDs() bool {
	return m.Has(tag.NoProvisionPartySubIDs)
}

// HasProvisionPartyRoleQualifier returns true if ProvisionPartyRoleQualifier is present, Tag 2385.
func (m NoProvisionPartyIDs) HasProvisionPartyRoleQualifier() bool {
	return m.Has(tag.ProvisionPartyRoleQualifier)
}

// NoProvisionPartySubIDs is a repeating group element, Tag 40178.
type NoProvisionPartySubIDs struct {
	*quickfix.Group
}

// SetProvisionPartySubID sets ProvisionPartySubID, Tag 40179.
func (m NoProvisionPartySubIDs) SetProvisionPartySubID(v string) {
	m.Set(field.NewProvisionPartySubID(v))
}

// SetProvisionPartySubIDType sets ProvisionPartySubIDType, Tag 40180.
func (m NoProvisionPartySubIDs) SetProvisionPartySubIDType(v int) {
	m.Set(field.NewProvisionPartySubIDType(v))
}

// GetProvisionPartySubID gets ProvisionPartySubID, Tag 40179.
func (m NoProvisionPartySubIDs) GetProvisionPartySubID() (v string, err quickfix.MessageRejectError) {
	var f field.ProvisionPartySubIDField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProvisionPartySubIDType gets ProvisionPartySubIDType, Tag 40180.
func (m NoProvisionPartySubIDs) GetProvisionPartySubIDType() (v int, err quickfix.MessageRejectError) {
	var f field.ProvisionPartySubIDTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasProvisionPartySubID returns true if ProvisionPartySubID is present, Tag 40179.
func (m NoProvisionPartySubIDs) HasProvisionPartySubID() bool {
	return m.Has(tag.ProvisionPartySubID)
}

// HasProvisionPartySubIDType returns true if ProvisionPartySubIDType is present, Tag 40180.
func (m NoProvisionPartySubIDs) HasProvisionPartySubIDType() bool {
	return m.Has(tag.ProvisionPartySubIDType)
}

// NoProvisionPartySubIDsRepeatingGroup is a repeating group, Tag 40178.
type NoProvisionPartySubIDsRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoProvisionPartySubIDsRepeatingGroup returns an initialized, NoProvisionPartySubIDsRepeatingGroup.
func NewNoProvisionPartySubIDsRepeatingGroup() NoProvisionPartySubIDsRepeatingGroup {
	return NoProvisionPartySubIDsRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoProvisionPartySubIDs,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.ProvisionPartySubID),
				quickfix.GroupElement(tag.ProvisionPartySubIDType),
			},
		),
	}
}

// Add create and append a new NoProvisionPartySubIDs to this group.
func (m NoProvisionPartySubIDsRepeatingGroup) Add() NoProvisionPartySubIDs {
	g := m.RepeatingGroup.Add()
	return NoProvisionPartySubIDs{g}
}

// Get returns the ith NoProvisionPartySubIDs in the NoProvisionPartySubIDsRepeatinGroup.
func (m NoProvisionPartySubIDsRepeatingGroup) Get(i int) NoProvisionPartySubIDs {
	return NoProvisionPartySubIDs{m.RepeatingGroup.Get(i)}
}

// NoProvisionPartyIDsRepeatingGroup is a repeating group, Tag 40174.
type NoProvisionPartyIDsRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoProvisionPartyIDsRepeatingGroup returns an initialized, NoProvisionPartyIDsRepeatingGroup.
func NewNoProvisionPartyIDsRepeatingGroup() NoProvisionPartyIDsRepeatingGroup {
	return NoProvisionPartyIDsRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoProvisionPartyIDs,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.ProvisionPartyID),
				quickfix.GroupElement(tag.ProvisionPartyIDSource),
				quickfix.GroupElement(tag.ProvisionPartyRole),
				NewNoProvisionPartySubIDsRepeatingGroup(),
				quickfix.GroupElement(tag.ProvisionPartyRoleQualifier),
			},
		),
	}
}

// Add create and append a new NoProvisionPartyIDs to this group.
func (m NoProvisionPartyIDsRepeatingGroup) Add() NoProvisionPartyIDs {
	g := m.RepeatingGroup.Add()
	return NoProvisionPartyIDs{g}
}

// Get returns the ith NoProvisionPartyIDs in the NoProvisionPartyIDsRepeatinGroup.
func (m NoProvisionPartyIDsRepeatingGroup) Get(i int) NoProvisionPartyIDs {
	return NoProvisionPartyIDs{m.RepeatingGroup.Get(i)}
}

// NoProvisionsRepeatingGroup is a repeating group, Tag 40090.
type NoProvisionsRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoProvisionsRepeatingGroup returns an initialized, NoProvisionsRepeatingGroup.
func NewNoProvisionsRepeatingGroup() NoProvisionsRepeatingGroup {
	return NoProvisionsRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoProvisions,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.ProvisionType),
				quickfix.GroupElement(tag.ProvisionDateUnadjusted),
				quickfix.GroupElement(tag.ProvisionDateBusinessDayConvention),
				NewNoProvisionDateBusinessCentersRepeatingGroup(),
				quickfix.GroupElement(tag.ProvisionDateAdjusted),
				quickfix.GroupElement(tag.ProvisionDateTenorPeriod),
				quickfix.GroupElement(tag.ProvisionDateTenorUnit),
				quickfix.GroupElement(tag.ProvisionCalculationAgent),
				quickfix.GroupElement(tag.ProvisionOptionSinglePartyBuyerSide),
				quickfix.GroupElement(tag.ProvisionOptionSinglePartySellerSide),
				quickfix.GroupElement(tag.ProvisionCashSettlValueTime),
				quickfix.GroupElement(tag.ProvisionCashSettlValueTimeBusinessCenter),
				quickfix.GroupElement(tag.ProvisionCashSettlValueDateBusinessDayConvention),
				NewNoProvisionCashSettlValueDateBusinessCentersRepeatingGroup(),
				quickfix.GroupElement(tag.ProvisionCashSettlValueDateRelativeTo),
				quickfix.GroupElement(tag.ProvisionCashSettlValueDateOffsetPeriod),
				quickfix.GroupElement(tag.ProvisionCashSettlValueDateOffsetUnit),
				quickfix.GroupElement(tag.ProvisionCashSettlValueDateOffsetDayType),
				quickfix.GroupElement(tag.ProvisionCashSettlValueDateAdjusted),
				quickfix.GroupElement(tag.ProvisionOptionExerciseBusinessDayConvention),
				NewNoProvisionOptionExerciseBusinessCentersRepeatingGroup(),
				NewNoProvisionOptionExerciseFixedDatesRepeatingGroup(),
				quickfix.GroupElement(tag.ProvisionOptionExerciseEarliestDateOffsetPeriod),
				quickfix.GroupElement(tag.ProvisionOptionExerciseEarliestDateOffsetUnit),
				quickfix.GroupElement(tag.ProvisionOptionExerciseFrequencyPeriod),
				quickfix.GroupElement(tag.ProvisionOptionExerciseFrequencyUnit),
				quickfix.GroupElement(tag.ProvisionOptionExerciseStartDateUnadjusted),
				quickfix.GroupElement(tag.ProvisionOptionExerciseStartDateRelativeTo),
				quickfix.GroupElement(tag.ProvisionOptionExerciseStartDateOffsetPeriod),
				quickfix.GroupElement(tag.ProvisionOptionExerciseStartDateOffsetUnit),
				quickfix.GroupElement(tag.ProvisionOptionExerciseStartDateOffsetDayType),
				quickfix.GroupElement(tag.ProvisionOptionExerciseStartDateAdjusted),
				quickfix.GroupElement(tag.ProvisionOptionExercisePeriodSkip),
				quickfix.GroupElement(tag.ProvisionOptionExerciseBoundsFirstDateUnadjusted),
				quickfix.GroupElement(tag.ProvisionOptionExerciseBoundsLastDateUnadjusted),
				quickfix.GroupElement(tag.ProvisionOptionExerciseEarliestTime),
				quickfix.GroupElement(tag.ProvisionOptionExerciseEarliestTimeBusinessCenter),
				quickfix.GroupElement(tag.ProvisionOptionExerciseLatestTime),
				quickfix.GroupElement(tag.ProvisionOptionExerciseLatestTimeBusinessCenter),
				quickfix.GroupElement(tag.ProvisionOptionExpirationDateUnadjusted),
				quickfix.GroupElement(tag.ProvisionOptionExpirationDateBusinessDayConvention),
				NewNoProvisionOptionExpirationDateBusinessCentersRepeatingGroup(),
				quickfix.GroupElement(tag.ProvisionOptionExpirationDateRelativeTo),
				quickfix.GroupElement(tag.ProvisionOptionExpirationDateOffsetPeriod),
				quickfix.GroupElement(tag.ProvisionOptionExpirationDateOffsetUnit),
				quickfix.GroupElement(tag.ProvisionOptionExpirationDateOffsetDayType),
				quickfix.GroupElement(tag.ProvisionOptionExpirationDateAdjusted),
				quickfix.GroupElement(tag.ProvisionOptionExpirationTime),
				quickfix.GroupElement(tag.ProvisionOptionExpirationTimeBusinessCenter),
				quickfix.GroupElement(tag.ProvisionOptionRelevantUnderlyingDateUnadjusted),
				quickfix.GroupElement(tag.ProvisionOptionRelevantUnderlyingDateBusinessDayConvention),
				NewNoProvisionOptionRelevantUnderlyingDateBusinessCentersRepeatingGroup(),
				quickfix.GroupElement(tag.ProvisionOptionRelevantUnderlyingDateRelativeTo),
				quickfix.GroupElement(tag.ProvisionOptionRelevantUnderlyingDateOffsetPeriod),
				quickfix.GroupElement(tag.ProvisionOptionRelevantUnderlyingDateOffsetUnit),
				quickfix.GroupElement(tag.ProvisionOptionRelevantUnderlyingDateOffsetDayType),
				quickfix.GroupElement(tag.ProvisionOptionRelevantUnderlyingDateAdjusted),
				quickfix.GroupElement(tag.ProvisionOptionExerciseStyle),
				quickfix.GroupElement(tag.ProvisionOptionExerciseMultipleNotional),
				quickfix.GroupElement(tag.ProvisionOptionExerciseMinimumNotional),
				quickfix.GroupElement(tag.ProvisionOptionExerciseMaximumNotional),
				quickfix.GroupElement(tag.ProvisionOptionMinimumNumber),
				quickfix.GroupElement(tag.ProvisionOptionMaximumNumber),
				quickfix.GroupElement(tag.ProvisionOptionExerciseConfirmation),
				quickfix.GroupElement(tag.ProvisionCashSettlPaymentDateBusinessDayConvention),
				NewNoProvisionCashSettlPaymentDateBusinessCentersRepeatingGroup(),
				quickfix.GroupElement(tag.ProvisionCashSettlPaymentDateRelativeTo),
				quickfix.GroupElement(tag.ProvisionCashSettlPaymentDateOffsetPeriod),
				quickfix.GroupElement(tag.ProvisionCashSettlPaymentDateOffsetUnit),
				quickfix.GroupElement(tag.ProvisionCashSettlPaymentDateOffsetDayType),
				quickfix.GroupElement(tag.ProvisionCashSettlPaymentDateRangeFirst),
				quickfix.GroupElement(tag.ProvisionCashSettlPaymentDateRangeLast),
				NewNoProvisionCashSettlPaymentDatesRepeatingGroup(),
				quickfix.GroupElement(tag.ProvisionCashSettlMethod),
				quickfix.GroupElement(tag.ProvisionCashSettlCurrency),
				quickfix.GroupElement(tag.ProvisionCashSettlCurrency2),
				quickfix.GroupElement(tag.ProvisionCashSettlQuoteType),
				quickfix.GroupElement(tag.ProvisionCashSettlQuoteSource),
				quickfix.GroupElement(tag.ProvisionCashSettlQuoteReferencePage),
				quickfix.GroupElement(tag.ProvisionText),
				quickfix.GroupElement(tag.EncodedProvisionTextLen),
				quickfix.GroupElement(tag.EncodedProvisionText),
				NewNoProvisionPartyIDsRepeatingGroup(),
				quickfix.GroupElement(tag.ProvisionBreakFeeElection),
				quickfix.GroupElement(tag.ProvisionBreakFeeRate),
			},
		),
	}
}

// Add create and append a new NoProvisions to this group.
func (m NoProvisionsRepeatingGroup) Add() NoProvisions {
	g := m.RepeatingGroup.Add()
	return NoProvisions{g}
}

// Get returns the ith NoProvisions in the NoProvisionsRepeatinGroup.
func (m NoProvisionsRepeatingGroup) Get(i int) NoProvisions {
	return NoProvisions{m.RepeatingGroup.Get(i)}
}

// NoProtectionTerms is a repeating group element, Tag 40181.
type NoProtectionTerms struct {
	*quickfix.Group
}

// SetProtectionTermNotional sets ProtectionTermNotional, Tag 40182.
func (m NoProtectionTerms) SetProtectionTermNotional(value decimal.Decimal, scale int32) {
	m.Set(field.NewProtectionTermNotional(value, scale))
}

// SetProtectionTermCurrency sets ProtectionTermCurrency, Tag 40183.
func (m NoProtectionTerms) SetProtectionTermCurrency(v string) {
	m.Set(field.NewProtectionTermCurrency(v))
}

// SetProtectionTermSellerNotifies sets ProtectionTermSellerNotifies, Tag 40184.
func (m NoProtectionTerms) SetProtectionTermSellerNotifies(v bool) {
	m.Set(field.NewProtectionTermSellerNotifies(v))
}

// SetProtectionTermBuyerNotifies sets ProtectionTermBuyerNotifies, Tag 40185.
func (m NoProtectionTerms) SetProtectionTermBuyerNotifies(v bool) {
	m.Set(field.NewProtectionTermBuyerNotifies(v))
}

// SetProtectionTermEventBusinessCenter sets ProtectionTermEventBusinessCenter, Tag 40186.
func (m NoProtectionTerms) SetProtectionTermEventBusinessCenter(v string) {
	m.Set(field.NewProtectionTermEventBusinessCenter(v))
}

// SetProtectionTermStandardSources sets ProtectionTermStandardSources, Tag 40187.
func (m NoProtectionTerms) SetProtectionTermStandardSources(v bool) {
	m.Set(field.NewProtectionTermStandardSources(v))
}

// SetProtectionTermEventMinimumSources sets ProtectionTermEventMinimumSources, Tag 40188.
func (m NoProtectionTerms) SetProtectionTermEventMinimumSources(v int) {
	m.Set(field.NewProtectionTermEventMinimumSources(v))
}

// SetNoProtectionTermEventNewsSources sets NoProtectionTermEventNewsSources, Tag 40951.
func (m NoProtectionTerms) SetNoProtectionTermEventNewsSources(f NoProtectionTermEventNewsSourcesRepeatingGroup) {
	m.SetGroup(f)
}

// SetNoProtectionTermEvents sets NoProtectionTermEvents, Tag 40191.
func (m NoProtectionTerms) SetNoProtectionTermEvents(f NoProtectionTermEventsRepeatingGroup) {
	m.SetGroup(f)
}

// SetNoProtectionTermObligations sets NoProtectionTermObligations, Tag 40201.
func (m NoProtectionTerms) SetNoProtectionTermObligations(f NoProtectionTermObligationsRepeatingGroup) {
	m.SetGroup(f)
}

// SetProtectionTermXID sets ProtectionTermXID, Tag 40190.
func (m NoProtectionTerms) SetProtectionTermXID(v string) {
	m.Set(field.NewProtectionTermXID(v))
}

// GetProtectionTermNotional gets ProtectionTermNotional, Tag 40182.
func (m NoProtectionTerms) GetProtectionTermNotional() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.ProtectionTermNotionalField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProtectionTermCurrency gets ProtectionTermCurrency, Tag 40183.
func (m NoProtectionTerms) GetProtectionTermCurrency() (v string, err quickfix.MessageRejectError) {
	var f field.ProtectionTermCurrencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProtectionTermSellerNotifies gets ProtectionTermSellerNotifies, Tag 40184.
func (m NoProtectionTerms) GetProtectionTermSellerNotifies() (v bool, err quickfix.MessageRejectError) {
	var f field.ProtectionTermSellerNotifiesField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProtectionTermBuyerNotifies gets ProtectionTermBuyerNotifies, Tag 40185.
func (m NoProtectionTerms) GetProtectionTermBuyerNotifies() (v bool, err quickfix.MessageRejectError) {
	var f field.ProtectionTermBuyerNotifiesField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProtectionTermEventBusinessCenter gets ProtectionTermEventBusinessCenter, Tag 40186.
func (m NoProtectionTerms) GetProtectionTermEventBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.ProtectionTermEventBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProtectionTermStandardSources gets ProtectionTermStandardSources, Tag 40187.
func (m NoProtectionTerms) GetProtectionTermStandardSources() (v bool, err quickfix.MessageRejectError) {
	var f field.ProtectionTermStandardSourcesField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProtectionTermEventMinimumSources gets ProtectionTermEventMinimumSources, Tag 40188.
func (m NoProtectionTerms) GetProtectionTermEventMinimumSources() (v int, err quickfix.MessageRejectError) {
	var f field.ProtectionTermEventMinimumSourcesField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoProtectionTermEventNewsSources gets NoProtectionTermEventNewsSources, Tag 40951.
func (m NoProtectionTerms) GetNoProtectionTermEventNewsSources() (NoProtectionTermEventNewsSourcesRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoProtectionTermEventNewsSourcesRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetNoProtectionTermEvents gets NoProtectionTermEvents, Tag 40191.
func (m NoProtectionTerms) GetNoProtectionTermEvents() (NoProtectionTermEventsRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoProtectionTermEventsRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetNoProtectionTermObligations gets NoProtectionTermObligations, Tag 40201.
func (m NoProtectionTerms) GetNoProtectionTermObligations() (NoProtectionTermObligationsRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoProtectionTermObligationsRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetProtectionTermXID gets ProtectionTermXID, Tag 40190.
func (m NoProtectionTerms) GetProtectionTermXID() (v string, err quickfix.MessageRejectError) {
	var f field.ProtectionTermXIDField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasProtectionTermNotional returns true if ProtectionTermNotional is present, Tag 40182.
func (m NoProtectionTerms) HasProtectionTermNotional() bool {
	return m.Has(tag.ProtectionTermNotional)
}

// HasProtectionTermCurrency returns true if ProtectionTermCurrency is present, Tag 40183.
func (m NoProtectionTerms) HasProtectionTermCurrency() bool {
	return m.Has(tag.ProtectionTermCurrency)
}

// HasProtectionTermSellerNotifies returns true if ProtectionTermSellerNotifies is present, Tag 40184.
func (m NoProtectionTerms) HasProtectionTermSellerNotifies() bool {
	return m.Has(tag.ProtectionTermSellerNotifies)
}

// HasProtectionTermBuyerNotifies returns true if ProtectionTermBuyerNotifies is present, Tag 40185.
func (m NoProtectionTerms) HasProtectionTermBuyerNotifies() bool {
	return m.Has(tag.ProtectionTermBuyerNotifies)
}

// HasProtectionTermEventBusinessCenter returns true if ProtectionTermEventBusinessCenter is present, Tag 40186.
func (m NoProtectionTerms) HasProtectionTermEventBusinessCenter() bool {
	return m.Has(tag.ProtectionTermEventBusinessCenter)
}

// HasProtectionTermStandardSources returns true if ProtectionTermStandardSources is present, Tag 40187.
func (m NoProtectionTerms) HasProtectionTermStandardSources() bool {
	return m.Has(tag.ProtectionTermStandardSources)
}

// HasProtectionTermEventMinimumSources returns true if ProtectionTermEventMinimumSources is present, Tag 40188.
func (m NoProtectionTerms) HasProtectionTermEventMinimumSources() bool {
	return m.Has(tag.ProtectionTermEventMinimumSources)
}

// HasNoProtectionTermEventNewsSources returns true if NoProtectionTermEventNewsSources is present, Tag 40951.
func (m NoProtectionTerms) HasNoProtectionTermEventNewsSources() bool {
	return m.Has(tag.NoProtectionTermEventNewsSources)
}

// HasNoProtectionTermEvents returns true if NoProtectionTermEvents is present, Tag 40191.
func (m NoProtectionTerms) HasNoProtectionTermEvents() bool {
	return m.Has(tag.NoProtectionTermEvents)
}

// HasNoProtectionTermObligations returns true if NoProtectionTermObligations is present, Tag 40201.
func (m NoProtectionTerms) HasNoProtectionTermObligations() bool {
	return m.Has(tag.NoProtectionTermObligations)
}

// HasProtectionTermXID returns true if ProtectionTermXID is present, Tag 40190.
func (m NoProtectionTerms) HasProtectionTermXID() bool {
	return m.Has(tag.ProtectionTermXID)
}

// NoProtectionTermEventNewsSources is a repeating group element, Tag 40951.
type NoProtectionTermEventNewsSources struct {
	*quickfix.Group
}

// SetProtectionTermEventNewsSource sets ProtectionTermEventNewsSource, Tag 40189.
func (m NoProtectionTermEventNewsSources) SetProtectionTermEventNewsSource(v string) {
	m.Set(field.NewProtectionTermEventNewsSource(v))
}

// GetProtectionTermEventNewsSource gets ProtectionTermEventNewsSource, Tag 40189.
func (m NoProtectionTermEventNewsSources) GetProtectionTermEventNewsSource() (v string, err quickfix.MessageRejectError) {
	var f field.ProtectionTermEventNewsSourceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasProtectionTermEventNewsSource returns true if ProtectionTermEventNewsSource is present, Tag 40189.
func (m NoProtectionTermEventNewsSources) HasProtectionTermEventNewsSource() bool {
	return m.Has(tag.ProtectionTermEventNewsSource)
}

// NoProtectionTermEventNewsSourcesRepeatingGroup is a repeating group, Tag 40951.
type NoProtectionTermEventNewsSourcesRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoProtectionTermEventNewsSourcesRepeatingGroup returns an initialized, NoProtectionTermEventNewsSourcesRepeatingGroup.
func NewNoProtectionTermEventNewsSourcesRepeatingGroup() NoProtectionTermEventNewsSourcesRepeatingGroup {
	return NoProtectionTermEventNewsSourcesRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoProtectionTermEventNewsSources,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.ProtectionTermEventNewsSource),
			},
		),
	}
}

// Add create and append a new NoProtectionTermEventNewsSources to this group.
func (m NoProtectionTermEventNewsSourcesRepeatingGroup) Add() NoProtectionTermEventNewsSources {
	g := m.RepeatingGroup.Add()
	return NoProtectionTermEventNewsSources{g}
}

// Get returns the ith NoProtectionTermEventNewsSources in the NoProtectionTermEventNewsSourcesRepeatinGroup.
func (m NoProtectionTermEventNewsSourcesRepeatingGroup) Get(i int) NoProtectionTermEventNewsSources {
	return NoProtectionTermEventNewsSources{m.RepeatingGroup.Get(i)}
}

// NoProtectionTermEvents is a repeating group element, Tag 40191.
type NoProtectionTermEvents struct {
	*quickfix.Group
}

// SetProtectionTermEventType sets ProtectionTermEventType, Tag 40192.
func (m NoProtectionTermEvents) SetProtectionTermEventType(v string) {
	m.Set(field.NewProtectionTermEventType(v))
}

// SetProtectionTermEventValue sets ProtectionTermEventValue, Tag 40193.
func (m NoProtectionTermEvents) SetProtectionTermEventValue(v string) {
	m.Set(field.NewProtectionTermEventValue(v))
}

// SetProtectionTermEventCurrency sets ProtectionTermEventCurrency, Tag 40194.
func (m NoProtectionTermEvents) SetProtectionTermEventCurrency(v string) {
	m.Set(field.NewProtectionTermEventCurrency(v))
}

// SetProtectionTermEventPeriod sets ProtectionTermEventPeriod, Tag 40195.
func (m NoProtectionTermEvents) SetProtectionTermEventPeriod(v int) {
	m.Set(field.NewProtectionTermEventPeriod(v))
}

// SetProtectionTermEventUnit sets ProtectionTermEventUnit, Tag 40196.
func (m NoProtectionTermEvents) SetProtectionTermEventUnit(v enum.ProtectionTermEventUnit) {
	m.Set(field.NewProtectionTermEventUnit(v))
}

// SetProtectionTermEventDayType sets ProtectionTermEventDayType, Tag 40197.
func (m NoProtectionTermEvents) SetProtectionTermEventDayType(v enum.ProtectionTermEventDayType) {
	m.Set(field.NewProtectionTermEventDayType(v))
}

// SetProtectionTermEventRateSource sets ProtectionTermEventRateSource, Tag 40198.
func (m NoProtectionTermEvents) SetProtectionTermEventRateSource(v string) {
	m.Set(field.NewProtectionTermEventRateSource(v))
}

// SetNoProtectionTermEventQualifiers sets NoProtectionTermEventQualifiers, Tag 40199.
func (m NoProtectionTermEvents) SetNoProtectionTermEventQualifiers(f NoProtectionTermEventQualifiersRepeatingGroup) {
	m.SetGroup(f)
}

// GetProtectionTermEventType gets ProtectionTermEventType, Tag 40192.
func (m NoProtectionTermEvents) GetProtectionTermEventType() (v string, err quickfix.MessageRejectError) {
	var f field.ProtectionTermEventTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProtectionTermEventValue gets ProtectionTermEventValue, Tag 40193.
func (m NoProtectionTermEvents) GetProtectionTermEventValue() (v string, err quickfix.MessageRejectError) {
	var f field.ProtectionTermEventValueField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProtectionTermEventCurrency gets ProtectionTermEventCurrency, Tag 40194.
func (m NoProtectionTermEvents) GetProtectionTermEventCurrency() (v string, err quickfix.MessageRejectError) {
	var f field.ProtectionTermEventCurrencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProtectionTermEventPeriod gets ProtectionTermEventPeriod, Tag 40195.
func (m NoProtectionTermEvents) GetProtectionTermEventPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.ProtectionTermEventPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProtectionTermEventUnit gets ProtectionTermEventUnit, Tag 40196.
func (m NoProtectionTermEvents) GetProtectionTermEventUnit() (v enum.ProtectionTermEventUnit, err quickfix.MessageRejectError) {
	var f field.ProtectionTermEventUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProtectionTermEventDayType gets ProtectionTermEventDayType, Tag 40197.
func (m NoProtectionTermEvents) GetProtectionTermEventDayType() (v enum.ProtectionTermEventDayType, err quickfix.MessageRejectError) {
	var f field.ProtectionTermEventDayTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProtectionTermEventRateSource gets ProtectionTermEventRateSource, Tag 40198.
func (m NoProtectionTermEvents) GetProtectionTermEventRateSource() (v string, err quickfix.MessageRejectError) {
	var f field.ProtectionTermEventRateSourceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoProtectionTermEventQualifiers gets NoProtectionTermEventQualifiers, Tag 40199.
func (m NoProtectionTermEvents) GetNoProtectionTermEventQualifiers() (NoProtectionTermEventQualifiersRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoProtectionTermEventQualifiersRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// HasProtectionTermEventType returns true if ProtectionTermEventType is present, Tag 40192.
func (m NoProtectionTermEvents) HasProtectionTermEventType() bool {
	return m.Has(tag.ProtectionTermEventType)
}

// HasProtectionTermEventValue returns true if ProtectionTermEventValue is present, Tag 40193.
func (m NoProtectionTermEvents) HasProtectionTermEventValue() bool {
	return m.Has(tag.ProtectionTermEventValue)
}

// HasProtectionTermEventCurrency returns true if ProtectionTermEventCurrency is present, Tag 40194.
func (m NoProtectionTermEvents) HasProtectionTermEventCurrency() bool {
	return m.Has(tag.ProtectionTermEventCurrency)
}

// HasProtectionTermEventPeriod returns true if ProtectionTermEventPeriod is present, Tag 40195.
func (m NoProtectionTermEvents) HasProtectionTermEventPeriod() bool {
	return m.Has(tag.ProtectionTermEventPeriod)
}

// HasProtectionTermEventUnit returns true if ProtectionTermEventUnit is present, Tag 40196.
func (m NoProtectionTermEvents) HasProtectionTermEventUnit() bool {
	return m.Has(tag.ProtectionTermEventUnit)
}

// HasProtectionTermEventDayType returns true if ProtectionTermEventDayType is present, Tag 40197.
func (m NoProtectionTermEvents) HasProtectionTermEventDayType() bool {
	return m.Has(tag.ProtectionTermEventDayType)
}

// HasProtectionTermEventRateSource returns true if ProtectionTermEventRateSource is present, Tag 40198.
func (m NoProtectionTermEvents) HasProtectionTermEventRateSource() bool {
	return m.Has(tag.ProtectionTermEventRateSource)
}

// HasNoProtectionTermEventQualifiers returns true if NoProtectionTermEventQualifiers is present, Tag 40199.
func (m NoProtectionTermEvents) HasNoProtectionTermEventQualifiers() bool {
	return m.Has(tag.NoProtectionTermEventQualifiers)
}

// NoProtectionTermEventQualifiers is a repeating group element, Tag 40199.
type NoProtectionTermEventQualifiers struct {
	*quickfix.Group
}

// SetProtectionTermEventQualifier sets ProtectionTermEventQualifier, Tag 40200.
func (m NoProtectionTermEventQualifiers) SetProtectionTermEventQualifier(v enum.ProtectionTermEventQualifier) {
	m.Set(field.NewProtectionTermEventQualifier(v))
}

// GetProtectionTermEventQualifier gets ProtectionTermEventQualifier, Tag 40200.
func (m NoProtectionTermEventQualifiers) GetProtectionTermEventQualifier() (v enum.ProtectionTermEventQualifier, err quickfix.MessageRejectError) {
	var f field.ProtectionTermEventQualifierField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasProtectionTermEventQualifier returns true if ProtectionTermEventQualifier is present, Tag 40200.
func (m NoProtectionTermEventQualifiers) HasProtectionTermEventQualifier() bool {
	return m.Has(tag.ProtectionTermEventQualifier)
}

// NoProtectionTermEventQualifiersRepeatingGroup is a repeating group, Tag 40199.
type NoProtectionTermEventQualifiersRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoProtectionTermEventQualifiersRepeatingGroup returns an initialized, NoProtectionTermEventQualifiersRepeatingGroup.
func NewNoProtectionTermEventQualifiersRepeatingGroup() NoProtectionTermEventQualifiersRepeatingGroup {
	return NoProtectionTermEventQualifiersRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoProtectionTermEventQualifiers,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.ProtectionTermEventQualifier),
			},
		),
	}
}

// Add create and append a new NoProtectionTermEventQualifiers to this group.
func (m NoProtectionTermEventQualifiersRepeatingGroup) Add() NoProtectionTermEventQualifiers {
	g := m.RepeatingGroup.Add()
	return NoProtectionTermEventQualifiers{g}
}

// Get returns the ith NoProtectionTermEventQualifiers in the NoProtectionTermEventQualifiersRepeatinGroup.
func (m NoProtectionTermEventQualifiersRepeatingGroup) Get(i int) NoProtectionTermEventQualifiers {
	return NoProtectionTermEventQualifiers{m.RepeatingGroup.Get(i)}
}

// NoProtectionTermEventsRepeatingGroup is a repeating group, Tag 40191.
type NoProtectionTermEventsRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoProtectionTermEventsRepeatingGroup returns an initialized, NoProtectionTermEventsRepeatingGroup.
func NewNoProtectionTermEventsRepeatingGroup() NoProtectionTermEventsRepeatingGroup {
	return NoProtectionTermEventsRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoProtectionTermEvents,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.ProtectionTermEventType),
				quickfix.GroupElement(tag.ProtectionTermEventValue),
				quickfix.GroupElement(tag.ProtectionTermEventCurrency),
				quickfix.GroupElement(tag.ProtectionTermEventPeriod),
				quickfix.GroupElement(tag.ProtectionTermEventUnit),
				quickfix.GroupElement(tag.ProtectionTermEventDayType),
				quickfix.GroupElement(tag.ProtectionTermEventRateSource),
				NewNoProtectionTermEventQualifiersRepeatingGroup(),
			},
		),
	}
}

// Add create and append a new NoProtectionTermEvents to this group.
func (m NoProtectionTermEventsRepeatingGroup) Add() NoProtectionTermEvents {
	g := m.RepeatingGroup.Add()
	return NoProtectionTermEvents{g}
}

// Get returns the ith NoProtectionTermEvents in the NoProtectionTermEventsRepeatinGroup.
func (m NoProtectionTermEventsRepeatingGroup) Get(i int) NoProtectionTermEvents {
	return NoProtectionTermEvents{m.RepeatingGroup.Get(i)}
}

// NoProtectionTermObligations is a repeating group element, Tag 40201.
type NoProtectionTermObligations struct {
	*quickfix.Group
}

// SetProtectionTermObligationType sets ProtectionTermObligationType, Tag 40202.
func (m NoProtectionTermObligations) SetProtectionTermObligationType(v string) {
	m.Set(field.NewProtectionTermObligationType(v))
}

// SetProtectionTermObligationValue sets ProtectionTermObligationValue, Tag 40203.
func (m NoProtectionTermObligations) SetProtectionTermObligationValue(v string) {
	m.Set(field.NewProtectionTermObligationValue(v))
}

// GetProtectionTermObligationType gets ProtectionTermObligationType, Tag 40202.
func (m NoProtectionTermObligations) GetProtectionTermObligationType() (v string, err quickfix.MessageRejectError) {
	var f field.ProtectionTermObligationTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProtectionTermObligationValue gets ProtectionTermObligationValue, Tag 40203.
func (m NoProtectionTermObligations) GetProtectionTermObligationValue() (v string, err quickfix.MessageRejectError) {
	var f field.ProtectionTermObligationValueField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasProtectionTermObligationType returns true if ProtectionTermObligationType is present, Tag 40202.
func (m NoProtectionTermObligations) HasProtectionTermObligationType() bool {
	return m.Has(tag.ProtectionTermObligationType)
}

// HasProtectionTermObligationValue returns true if ProtectionTermObligationValue is present, Tag 40203.
func (m NoProtectionTermObligations) HasProtectionTermObligationValue() bool {
	return m.Has(tag.ProtectionTermObligationValue)
}

// NoProtectionTermObligationsRepeatingGroup is a repeating group, Tag 40201.
type NoProtectionTermObligationsRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoProtectionTermObligationsRepeatingGroup returns an initialized, NoProtectionTermObligationsRepeatingGroup.
func NewNoProtectionTermObligationsRepeatingGroup() NoProtectionTermObligationsRepeatingGroup {
	return NoProtectionTermObligationsRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoProtectionTermObligations,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.ProtectionTermObligationType),
				quickfix.GroupElement(tag.ProtectionTermObligationValue),
			},
		),
	}
}

// Add create and append a new NoProtectionTermObligations to this group.
func (m NoProtectionTermObligationsRepeatingGroup) Add() NoProtectionTermObligations {
	g := m.RepeatingGroup.Add()
	return NoProtectionTermObligations{g}
}

// Get returns the ith NoProtectionTermObligations in the NoProtectionTermObligationsRepeatinGroup.
func (m NoProtectionTermObligationsRepeatingGroup) Get(i int) NoProtectionTermObligations {
	return NoProtectionTermObligations{m.RepeatingGroup.Get(i)}
}

// NoProtectionTermsRepeatingGroup is a repeating group, Tag 40181.
type NoProtectionTermsRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoProtectionTermsRepeatingGroup returns an initialized, NoProtectionTermsRepeatingGroup.
func NewNoProtectionTermsRepeatingGroup() NoProtectionTermsRepeatingGroup {
	return NoProtectionTermsRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoProtectionTerms,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.ProtectionTermNotional),
				quickfix.GroupElement(tag.ProtectionTermCurrency),
				quickfix.GroupElement(tag.ProtectionTermSellerNotifies),
				quickfix.GroupElement(tag.ProtectionTermBuyerNotifies),
				quickfix.GroupElement(tag.ProtectionTermEventBusinessCenter),
				quickfix.GroupElement(tag.ProtectionTermStandardSources),
				quickfix.GroupElement(tag.ProtectionTermEventMinimumSources),
				NewNoProtectionTermEventNewsSourcesRepeatingGroup(),
				NewNoProtectionTermEventsRepeatingGroup(),
				NewNoProtectionTermObligationsRepeatingGroup(),
				quickfix.GroupElement(tag.ProtectionTermXID),
			},
		),
	}
}

// Add create and append a new NoProtectionTerms to this group.
func (m NoProtectionTermsRepeatingGroup) Add() NoProtectionTerms {
	g := m.RepeatingGroup.Add()
	return NoProtectionTerms{g}
}

// Get returns the ith NoProtectionTerms in the NoProtectionTermsRepeatinGroup.
func (m NoProtectionTermsRepeatingGroup) Get(i int) NoProtectionTerms {
	return NoProtectionTerms{m.RepeatingGroup.Get(i)}
}

// NoPhysicalSettlTerms is a repeating group element, Tag 40204.
type NoPhysicalSettlTerms struct {
	*quickfix.Group
}

// SetNoPhysicalSettlDeliverableObligations sets NoPhysicalSettlDeliverableObligations, Tag 40209.
func (m NoPhysicalSettlTerms) SetNoPhysicalSettlDeliverableObligations(f NoPhysicalSettlDeliverableObligationsRepeatingGroup) {
	m.SetGroup(f)
}

// SetPhysicalSettlCurrency sets PhysicalSettlCurrency, Tag 40205.
func (m NoPhysicalSettlTerms) SetPhysicalSettlCurrency(v string) {
	m.Set(field.NewPhysicalSettlCurrency(v))
}

// SetPhysicalSettlBusinessDays sets PhysicalSettlBusinessDays, Tag 40206.
func (m NoPhysicalSettlTerms) SetPhysicalSettlBusinessDays(v int) {
	m.Set(field.NewPhysicalSettlBusinessDays(v))
}

// SetPhysicalSettlMaximumBusinessDays sets PhysicalSettlMaximumBusinessDays, Tag 40207.
func (m NoPhysicalSettlTerms) SetPhysicalSettlMaximumBusinessDays(v int) {
	m.Set(field.NewPhysicalSettlMaximumBusinessDays(v))
}

// SetPhysicalSettlTermXID sets PhysicalSettlTermXID, Tag 40208.
func (m NoPhysicalSettlTerms) SetPhysicalSettlTermXID(v string) {
	m.Set(field.NewPhysicalSettlTermXID(v))
}

// GetNoPhysicalSettlDeliverableObligations gets NoPhysicalSettlDeliverableObligations, Tag 40209.
func (m NoPhysicalSettlTerms) GetNoPhysicalSettlDeliverableObligations() (NoPhysicalSettlDeliverableObligationsRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoPhysicalSettlDeliverableObligationsRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetPhysicalSettlCurrency gets PhysicalSettlCurrency, Tag 40205.
func (m NoPhysicalSettlTerms) GetPhysicalSettlCurrency() (v string, err quickfix.MessageRejectError) {
	var f field.PhysicalSettlCurrencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPhysicalSettlBusinessDays gets PhysicalSettlBusinessDays, Tag 40206.
func (m NoPhysicalSettlTerms) GetPhysicalSettlBusinessDays() (v int, err quickfix.MessageRejectError) {
	var f field.PhysicalSettlBusinessDaysField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPhysicalSettlMaximumBusinessDays gets PhysicalSettlMaximumBusinessDays, Tag 40207.
func (m NoPhysicalSettlTerms) GetPhysicalSettlMaximumBusinessDays() (v int, err quickfix.MessageRejectError) {
	var f field.PhysicalSettlMaximumBusinessDaysField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPhysicalSettlTermXID gets PhysicalSettlTermXID, Tag 40208.
func (m NoPhysicalSettlTerms) GetPhysicalSettlTermXID() (v string, err quickfix.MessageRejectError) {
	var f field.PhysicalSettlTermXIDField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasNoPhysicalSettlDeliverableObligations returns true if NoPhysicalSettlDeliverableObligations is present, Tag 40209.
func (m NoPhysicalSettlTerms) HasNoPhysicalSettlDeliverableObligations() bool {
	return m.Has(tag.NoPhysicalSettlDeliverableObligations)
}

// HasPhysicalSettlCurrency returns true if PhysicalSettlCurrency is present, Tag 40205.
func (m NoPhysicalSettlTerms) HasPhysicalSettlCurrency() bool {
	return m.Has(tag.PhysicalSettlCurrency)
}

// HasPhysicalSettlBusinessDays returns true if PhysicalSettlBusinessDays is present, Tag 40206.
func (m NoPhysicalSettlTerms) HasPhysicalSettlBusinessDays() bool {
	return m.Has(tag.PhysicalSettlBusinessDays)
}

// HasPhysicalSettlMaximumBusinessDays returns true if PhysicalSettlMaximumBusinessDays is present, Tag 40207.
func (m NoPhysicalSettlTerms) HasPhysicalSettlMaximumBusinessDays() bool {
	return m.Has(tag.PhysicalSettlMaximumBusinessDays)
}

// HasPhysicalSettlTermXID returns true if PhysicalSettlTermXID is present, Tag 40208.
func (m NoPhysicalSettlTerms) HasPhysicalSettlTermXID() bool {
	return m.Has(tag.PhysicalSettlTermXID)
}

// NoPhysicalSettlDeliverableObligations is a repeating group element, Tag 40209.
type NoPhysicalSettlDeliverableObligations struct {
	*quickfix.Group
}

// SetPhysicalSettlDeliverableObligationType sets PhysicalSettlDeliverableObligationType, Tag 40210.
func (m NoPhysicalSettlDeliverableObligations) SetPhysicalSettlDeliverableObligationType(v string) {
	m.Set(field.NewPhysicalSettlDeliverableObligationType(v))
}

// SetPhysicalSettlDeliverableObligationValue sets PhysicalSettlDeliverableObligationValue, Tag 40211.
func (m NoPhysicalSettlDeliverableObligations) SetPhysicalSettlDeliverableObligationValue(v string) {
	m.Set(field.NewPhysicalSettlDeliverableObligationValue(v))
}

// GetPhysicalSettlDeliverableObligationType gets PhysicalSettlDeliverableObligationType, Tag 40210.
func (m NoPhysicalSettlDeliverableObligations) GetPhysicalSettlDeliverableObligationType() (v string, err quickfix.MessageRejectError) {
	var f field.PhysicalSettlDeliverableObligationTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPhysicalSettlDeliverableObligationValue gets PhysicalSettlDeliverableObligationValue, Tag 40211.
func (m NoPhysicalSettlDeliverableObligations) GetPhysicalSettlDeliverableObligationValue() (v string, err quickfix.MessageRejectError) {
	var f field.PhysicalSettlDeliverableObligationValueField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasPhysicalSettlDeliverableObligationType returns true if PhysicalSettlDeliverableObligationType is present, Tag 40210.
func (m NoPhysicalSettlDeliverableObligations) HasPhysicalSettlDeliverableObligationType() bool {
	return m.Has(tag.PhysicalSettlDeliverableObligationType)
}

// HasPhysicalSettlDeliverableObligationValue returns true if PhysicalSettlDeliverableObligationValue is present, Tag 40211.
func (m NoPhysicalSettlDeliverableObligations) HasPhysicalSettlDeliverableObligationValue() bool {
	return m.Has(tag.PhysicalSettlDeliverableObligationValue)
}

// NoPhysicalSettlDeliverableObligationsRepeatingGroup is a repeating group, Tag 40209.
type NoPhysicalSettlDeliverableObligationsRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoPhysicalSettlDeliverableObligationsRepeatingGroup returns an initialized, NoPhysicalSettlDeliverableObligationsRepeatingGroup.
func NewNoPhysicalSettlDeliverableObligationsRepeatingGroup() NoPhysicalSettlDeliverableObligationsRepeatingGroup {
	return NoPhysicalSettlDeliverableObligationsRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoPhysicalSettlDeliverableObligations,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.PhysicalSettlDeliverableObligationType),
				quickfix.GroupElement(tag.PhysicalSettlDeliverableObligationValue),
			},
		),
	}
}

// Add create and append a new NoPhysicalSettlDeliverableObligations to this group.
func (m NoPhysicalSettlDeliverableObligationsRepeatingGroup) Add() NoPhysicalSettlDeliverableObligations {
	g := m.RepeatingGroup.Add()
	return NoPhysicalSettlDeliverableObligations{g}
}

// Get returns the ith NoPhysicalSettlDeliverableObligations in the NoPhysicalSettlDeliverableObligationsRepeatinGroup.
func (m NoPhysicalSettlDeliverableObligationsRepeatingGroup) Get(i int) NoPhysicalSettlDeliverableObligations {
	return NoPhysicalSettlDeliverableObligations{m.RepeatingGroup.Get(i)}
}

// NoPhysicalSettlTermsRepeatingGroup is a repeating group, Tag 40204.
type NoPhysicalSettlTermsRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoPhysicalSettlTermsRepeatingGroup returns an initialized, NoPhysicalSettlTermsRepeatingGroup.
func NewNoPhysicalSettlTermsRepeatingGroup() NoPhysicalSettlTermsRepeatingGroup {
	return NoPhysicalSettlTermsRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoPhysicalSettlTerms,
			quickfix.GroupTemplate{
				NewNoPhysicalSettlDeliverableObligationsRepeatingGroup(),
				quickfix.GroupElement(tag.PhysicalSettlCurrency),
				quickfix.GroupElement(tag.PhysicalSettlBusinessDays),
				quickfix.GroupElement(tag.PhysicalSettlMaximumBusinessDays),
				quickfix.GroupElement(tag.PhysicalSettlTermXID),
			},
		),
	}
}

// Add create and append a new NoPhysicalSettlTerms to this group.
func (m NoPhysicalSettlTermsRepeatingGroup) Add() NoPhysicalSettlTerms {
	g := m.RepeatingGroup.Add()
	return NoPhysicalSettlTerms{g}
}

// Get returns the ith NoPhysicalSettlTerms in the NoPhysicalSettlTermsRepeatinGroup.
func (m NoPhysicalSettlTermsRepeatingGroup) Get(i int) NoPhysicalSettlTerms {
	return NoPhysicalSettlTerms{m.RepeatingGroup.Get(i)}
}

// NoBusinessCenters is a repeating group element, Tag 40278.
type NoBusinessCenters struct {
	*quickfix.Group
}

// SetBusinessCenter sets BusinessCenter, Tag 40471.
func (m NoBusinessCenters) SetBusinessCenter(v string) {
	m.Set(field.NewBusinessCenter(v))
}

// GetBusinessCenter gets BusinessCenter, Tag 40471.
func (m NoBusinessCenters) GetBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.BusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasBusinessCenter returns true if BusinessCenter is present, Tag 40471.
func (m NoBusinessCenters) HasBusinessCenter() bool {
	return m.Has(tag.BusinessCenter)
}

// NoBusinessCentersRepeatingGroup is a repeating group, Tag 40278.
type NoBusinessCentersRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoBusinessCentersRepeatingGroup returns an initialized, NoBusinessCentersRepeatingGroup.
func NewNoBusinessCentersRepeatingGroup() NoBusinessCentersRepeatingGroup {
	return NoBusinessCentersRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoBusinessCenters,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.BusinessCenter),
			},
		),
	}
}

// Add create and append a new NoBusinessCenters to this group.
func (m NoBusinessCentersRepeatingGroup) Add() NoBusinessCenters {
	g := m.RepeatingGroup.Add()
	return NoBusinessCenters{g}
}

// Get returns the ith NoBusinessCenters in the NoBusinessCentersRepeatinGroup.
func (m NoBusinessCentersRepeatingGroup) Get(i int) NoBusinessCenters {
	return NoBusinessCenters{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingStreams is a repeating group element, Tag 40540.
type NoUnderlyingStreams struct {
	*quickfix.Group
}

// SetUnderlyingStreamType sets UnderlyingStreamType, Tag 40541.
func (m NoUnderlyingStreams) SetUnderlyingStreamType(v int) {
	m.Set(field.NewUnderlyingStreamType(v))
}

// SetUnderlyingStreamDesc sets UnderlyingStreamDesc, Tag 40542.
func (m NoUnderlyingStreams) SetUnderlyingStreamDesc(v string) {
	m.Set(field.NewUnderlyingStreamDesc(v))
}

// SetUnderlyingStreamPaySide sets UnderlyingStreamPaySide, Tag 40543.
func (m NoUnderlyingStreams) SetUnderlyingStreamPaySide(v int) {
	m.Set(field.NewUnderlyingStreamPaySide(v))
}

// SetUnderlyingStreamReceiveSide sets UnderlyingStreamReceiveSide, Tag 40544.
func (m NoUnderlyingStreams) SetUnderlyingStreamReceiveSide(v int) {
	m.Set(field.NewUnderlyingStreamReceiveSide(v))
}

// SetUnderlyingStreamNotional sets UnderlyingStreamNotional, Tag 40545.
func (m NoUnderlyingStreams) SetUnderlyingStreamNotional(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingStreamNotional(value, scale))
}

// SetUnderlyingStreamCurrency sets UnderlyingStreamCurrency, Tag 40546.
func (m NoUnderlyingStreams) SetUnderlyingStreamCurrency(v string) {
	m.Set(field.NewUnderlyingStreamCurrency(v))
}

// SetUnderlyingStreamEffectiveDateUnadjusted sets UnderlyingStreamEffectiveDateUnadjusted, Tag 40057.
func (m NoUnderlyingStreams) SetUnderlyingStreamEffectiveDateUnadjusted(v string) {
	m.Set(field.NewUnderlyingStreamEffectiveDateUnadjusted(v))
}

// SetUnderlyingStreamEffectiveDateBusinessDayConvention sets UnderlyingStreamEffectiveDateBusinessDayConvention, Tag 40058.
func (m NoUnderlyingStreams) SetUnderlyingStreamEffectiveDateBusinessDayConvention(v int) {
	m.Set(field.NewUnderlyingStreamEffectiveDateBusinessDayConvention(v))
}

// SetNoUnderlyingStreamEffectiveDateBusinessCenters sets NoUnderlyingStreamEffectiveDateBusinessCenters, Tag 40975.
func (m NoUnderlyingStreams) SetNoUnderlyingStreamEffectiveDateBusinessCenters(f NoUnderlyingStreamEffectiveDateBusinessCentersRepeatingGroup) {
	m.SetGroup(f)
}

// SetUnderlyingStreamEffectiveDateRelativeTo sets UnderlyingStreamEffectiveDateRelativeTo, Tag 40060.
func (m NoUnderlyingStreams) SetUnderlyingStreamEffectiveDateRelativeTo(v int) {
	m.Set(field.NewUnderlyingStreamEffectiveDateRelativeTo(v))
}

// SetUnderlyingStreamEffectiveDateOffsetPeriod sets UnderlyingStreamEffectiveDateOffsetPeriod, Tag 40061.
func (m NoUnderlyingStreams) SetUnderlyingStreamEffectiveDateOffsetPeriod(v int) {
	m.Set(field.NewUnderlyingStreamEffectiveDateOffsetPeriod(v))
}

// SetUnderlyingStreamEffectiveDateOffsetUnit sets UnderlyingStreamEffectiveDateOffsetUnit, Tag 40062.
func (m NoUnderlyingStreams) SetUnderlyingStreamEffectiveDateOffsetUnit(v string) {
	m.Set(field.NewUnderlyingStreamEffectiveDateOffsetUnit(v))
}

// SetUnderlyingStreamEffectiveDateOffsetDayType sets UnderlyingStreamEffectiveDateOffsetDayType, Tag 40063.
func (m NoUnderlyingStreams) SetUnderlyingStreamEffectiveDateOffsetDayType(v int) {
	m.Set(field.NewUnderlyingStreamEffectiveDateOffsetDayType(v))
}

// SetUnderlyingStreamEffectiveDateAdjusted sets UnderlyingStreamEffectiveDateAdjusted, Tag 40064.
func (m NoUnderlyingStreams) SetUnderlyingStreamEffectiveDateAdjusted(v string) {
	m.Set(field.NewUnderlyingStreamEffectiveDateAdjusted(v))
}

// SetUnderlyingStreamTerminationDateUnadjusted sets UnderlyingStreamTerminationDateUnadjusted, Tag 40548.
func (m NoUnderlyingStreams) SetUnderlyingStreamTerminationDateUnadjusted(v string) {
	m.Set(field.NewUnderlyingStreamTerminationDateUnadjusted(v))
}

// SetUnderlyingStreamTerminationDateBusinessDayConvention sets UnderlyingStreamTerminationDateBusinessDayConvention, Tag 40549.
func (m NoUnderlyingStreams) SetUnderlyingStreamTerminationDateBusinessDayConvention(v int) {
	m.Set(field.NewUnderlyingStreamTerminationDateBusinessDayConvention(v))
}

// SetNoUnderlyingStreamTerminationDateBusinessCenters sets NoUnderlyingStreamTerminationDateBusinessCenters, Tag 40976.
func (m NoUnderlyingStreams) SetNoUnderlyingStreamTerminationDateBusinessCenters(f NoUnderlyingStreamTerminationDateBusinessCentersRepeatingGroup) {
	m.SetGroup(f)
}

// SetUnderlyingStreamTerminationDateRelativeTo sets UnderlyingStreamTerminationDateRelativeTo, Tag 40551.
func (m NoUnderlyingStreams) SetUnderlyingStreamTerminationDateRelativeTo(v int) {
	m.Set(field.NewUnderlyingStreamTerminationDateRelativeTo(v))
}

// SetUnderlyingStreamTerminationDateOffsetPeriod sets UnderlyingStreamTerminationDateOffsetPeriod, Tag 40552.
func (m NoUnderlyingStreams) SetUnderlyingStreamTerminationDateOffsetPeriod(v int) {
	m.Set(field.NewUnderlyingStreamTerminationDateOffsetPeriod(v))
}

// SetUnderlyingStreamTerminationDateOffsetUnit sets UnderlyingStreamTerminationDateOffsetUnit, Tag 40553.
func (m NoUnderlyingStreams) SetUnderlyingStreamTerminationDateOffsetUnit(v string) {
	m.Set(field.NewUnderlyingStreamTerminationDateOffsetUnit(v))
}

// SetUnderlyingStreamTerminationDateOffsetDayType sets UnderlyingStreamTerminationDateOffsetDayType, Tag 40554.
func (m NoUnderlyingStreams) SetUnderlyingStreamTerminationDateOffsetDayType(v int) {
	m.Set(field.NewUnderlyingStreamTerminationDateOffsetDayType(v))
}

// SetUnderlyingStreamTerminationDateAdjusted sets UnderlyingStreamTerminationDateAdjusted, Tag 40555.
func (m NoUnderlyingStreams) SetUnderlyingStreamTerminationDateAdjusted(v string) {
	m.Set(field.NewUnderlyingStreamTerminationDateAdjusted(v))
}

// SetUnderlyingStreamCalculationPeriodBusinessDayConvention sets UnderlyingStreamCalculationPeriodBusinessDayConvention, Tag 40556.
func (m NoUnderlyingStreams) SetUnderlyingStreamCalculationPeriodBusinessDayConvention(v int) {
	m.Set(field.NewUnderlyingStreamCalculationPeriodBusinessDayConvention(v))
}

// SetNoUnderlyingStreamCalculationPeriodBusinessCenters sets NoUnderlyingStreamCalculationPeriodBusinessCenters, Tag 40973.
func (m NoUnderlyingStreams) SetNoUnderlyingStreamCalculationPeriodBusinessCenters(f NoUnderlyingStreamCalculationPeriodBusinessCentersRepeatingGroup) {
	m.SetGroup(f)
}

// SetUnderlyingStreamFirstPeriodStartDateUnadjusted sets UnderlyingStreamFirstPeriodStartDateUnadjusted, Tag 40558.
func (m NoUnderlyingStreams) SetUnderlyingStreamFirstPeriodStartDateUnadjusted(v string) {
	m.Set(field.NewUnderlyingStreamFirstPeriodStartDateUnadjusted(v))
}

// SetUnderlyingStreamFirstPeriodStartDateBusinessDayConvention sets UnderlyingStreamFirstPeriodStartDateBusinessDayConvention, Tag 40559.
func (m NoUnderlyingStreams) SetUnderlyingStreamFirstPeriodStartDateBusinessDayConvention(v int) {
	m.Set(field.NewUnderlyingStreamFirstPeriodStartDateBusinessDayConvention(v))
}

// SetNoUnderlyingStreamFirstPeriodStartDateBusinessCenters sets NoUnderlyingStreamFirstPeriodStartDateBusinessCenters, Tag 40974.
func (m NoUnderlyingStreams) SetNoUnderlyingStreamFirstPeriodStartDateBusinessCenters(f NoUnderlyingStreamFirstPeriodStartDateBusinessCentersRepeatingGroup) {
	m.SetGroup(f)
}

// SetUnderlyingStreamFirstPeriodStartDateAdjusted sets UnderlyingStreamFirstPeriodStartDateAdjusted, Tag 40561.
func (m NoUnderlyingStreams) SetUnderlyingStreamFirstPeriodStartDateAdjusted(v string) {
	m.Set(field.NewUnderlyingStreamFirstPeriodStartDateAdjusted(v))
}

// SetUnderlyingStreamFirstRegularPeriodStartDateUnadjusted sets UnderlyingStreamFirstRegularPeriodStartDateUnadjusted, Tag 40562.
func (m NoUnderlyingStreams) SetUnderlyingStreamFirstRegularPeriodStartDateUnadjusted(v string) {
	m.Set(field.NewUnderlyingStreamFirstRegularPeriodStartDateUnadjusted(v))
}

// SetUnderlyingStreamFirstCompoundingPeriodEndDateUnadjusted sets UnderlyingStreamFirstCompoundingPeriodEndDateUnadjusted, Tag 40563.
func (m NoUnderlyingStreams) SetUnderlyingStreamFirstCompoundingPeriodEndDateUnadjusted(v string) {
	m.Set(field.NewUnderlyingStreamFirstCompoundingPeriodEndDateUnadjusted(v))
}

// SetUnderlyingStreamLastRegularPeriodEndDateUnadjusted sets UnderlyingStreamLastRegularPeriodEndDateUnadjusted, Tag 40564.
func (m NoUnderlyingStreams) SetUnderlyingStreamLastRegularPeriodEndDateUnadjusted(v string) {
	m.Set(field.NewUnderlyingStreamLastRegularPeriodEndDateUnadjusted(v))
}

// SetUnderlyingStreamCalculationFrequencyPeriod sets UnderlyingStreamCalculationFrequencyPeriod, Tag 40565.
func (m NoUnderlyingStreams) SetUnderlyingStreamCalculationFrequencyPeriod(v int) {
	m.Set(field.NewUnderlyingStreamCalculationFrequencyPeriod(v))
}

// SetUnderlyingStreamCalculationFrequencyUnit sets UnderlyingStreamCalculationFrequencyUnit, Tag 40566.
func (m NoUnderlyingStreams) SetUnderlyingStreamCalculationFrequencyUnit(v string) {
	m.Set(field.NewUnderlyingStreamCalculationFrequencyUnit(v))
}

// SetUnderlyingStreamCalculationRollConvention sets UnderlyingStreamCalculationRollConvention, Tag 40567.
func (m NoUnderlyingStreams) SetUnderlyingStreamCalculationRollConvention(v string) {
	m.Set(field.NewUnderlyingStreamCalculationRollConvention(v))
}

// SetUnderlyingStreamCalculationPeriodDatesXID sets UnderlyingStreamCalculationPeriodDatesXID, Tag 41957.
func (m NoUnderlyingStreams) SetUnderlyingStreamCalculationPeriodDatesXID(v string) {
	m.Set(field.NewUnderlyingStreamCalculationPeriodDatesXID(v))
}

// SetUnderlyingStreamCalculationPeriodDatesXIDRef sets UnderlyingStreamCalculationPeriodDatesXIDRef, Tag 41958.
func (m NoUnderlyingStreams) SetUnderlyingStreamCalculationPeriodDatesXIDRef(v string) {
	m.Set(field.NewUnderlyingStreamCalculationPeriodDatesXIDRef(v))
}

// SetNoUnderlyingStreamCalculationPeriodDates sets NoUnderlyingStreamCalculationPeriodDates, Tag 41954.
func (m NoUnderlyingStreams) SetNoUnderlyingStreamCalculationPeriodDates(f NoUnderlyingStreamCalculationPeriodDatesRepeatingGroup) {
	m.SetGroup(f)
}

// SetUnderlyingStreamCalculationBalanceOfFirstPeriod sets UnderlyingStreamCalculationBalanceOfFirstPeriod, Tag 41959.
func (m NoUnderlyingStreams) SetUnderlyingStreamCalculationBalanceOfFirstPeriod(v bool) {
	m.Set(field.NewUnderlyingStreamCalculationBalanceOfFirstPeriod(v))
}

// SetUnderlyingStreamCalculationCorrectionPeriod sets UnderlyingStreamCalculationCorrectionPeriod, Tag 41960.
func (m NoUnderlyingStreams) SetUnderlyingStreamCalculationCorrectionPeriod(v int) {
	m.Set(field.NewUnderlyingStreamCalculationCorrectionPeriod(v))
}

// SetUnderlyingStreamCalculationCorrectionUnit sets UnderlyingStreamCalculationCorrectionUnit, Tag 41961.
func (m NoUnderlyingStreams) SetUnderlyingStreamCalculationCorrectionUnit(v string) {
	m.Set(field.NewUnderlyingStreamCalculationCorrectionUnit(v))
}

// SetUnderlyingPaymentStreamType sets UnderlyingPaymentStreamType, Tag 40568.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamType(v int) {
	m.Set(field.NewUnderlyingPaymentStreamType(v))
}

// SetUnderlyingPaymentStreamMarketRate sets UnderlyingPaymentStreamMarketRate, Tag 40569.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamMarketRate(v int) {
	m.Set(field.NewUnderlyingPaymentStreamMarketRate(v))
}

// SetUnderlyingPaymentStreamDelayIndicator sets UnderlyingPaymentStreamDelayIndicator, Tag 40570.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamDelayIndicator(v bool) {
	m.Set(field.NewUnderlyingPaymentStreamDelayIndicator(v))
}

// SetUnderlyingPaymentStreamSettlCurrency sets UnderlyingPaymentStreamSettlCurrency, Tag 40571.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamSettlCurrency(v string) {
	m.Set(field.NewUnderlyingPaymentStreamSettlCurrency(v))
}

// SetUnderlyingPaymentStreamDayCount sets UnderlyingPaymentStreamDayCount, Tag 40572.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamDayCount(v int) {
	m.Set(field.NewUnderlyingPaymentStreamDayCount(v))
}

// SetUnderlyingPaymentStreamAccrualDays sets UnderlyingPaymentStreamAccrualDays, Tag 40573.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamAccrualDays(v int) {
	m.Set(field.NewUnderlyingPaymentStreamAccrualDays(v))
}

// SetUnderlyingPaymentStreamDiscountType sets UnderlyingPaymentStreamDiscountType, Tag 40574.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamDiscountType(v int) {
	m.Set(field.NewUnderlyingPaymentStreamDiscountType(v))
}

// SetUnderlyingPaymentStreamDiscountRate sets UnderlyingPaymentStreamDiscountRate, Tag 40575.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamDiscountRate(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingPaymentStreamDiscountRate(value, scale))
}

// SetUnderlyingPaymentStreamDiscountRateDayCount sets UnderlyingPaymentStreamDiscountRateDayCount, Tag 40576.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamDiscountRateDayCount(v int) {
	m.Set(field.NewUnderlyingPaymentStreamDiscountRateDayCount(v))
}

// SetUnderlyingPaymentStreamCompoundingMethod sets UnderlyingPaymentStreamCompoundingMethod, Tag 40577.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamCompoundingMethod(v int) {
	m.Set(field.NewUnderlyingPaymentStreamCompoundingMethod(v))
}

// SetUnderlyingPaymentStreamInitialPrincipalExchangeIndicator sets UnderlyingPaymentStreamInitialPrincipalExchangeIndicator, Tag 40578.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamInitialPrincipalExchangeIndicator(v bool) {
	m.Set(field.NewUnderlyingPaymentStreamInitialPrincipalExchangeIndicator(v))
}

// SetUnderlyingPaymentStreamInterimPrincipalExchangeIndicator sets UnderlyingPaymentStreamInterimPrincipalExchangeIndicator, Tag 40579.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamInterimPrincipalExchangeIndicator(v bool) {
	m.Set(field.NewUnderlyingPaymentStreamInterimPrincipalExchangeIndicator(v))
}

// SetUnderlyingPaymentStreamFinalPrincipalExchangeIndicator sets UnderlyingPaymentStreamFinalPrincipalExchangeIndicator, Tag 40580.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamFinalPrincipalExchangeIndicator(v bool) {
	m.Set(field.NewUnderlyingPaymentStreamFinalPrincipalExchangeIndicator(v))
}

// SetUnderlyingPaymentStreamPaymentDateBusinessDayConvention sets UnderlyingPaymentStreamPaymentDateBusinessDayConvention, Tag 40581.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamPaymentDateBusinessDayConvention(v int) {
	m.Set(field.NewUnderlyingPaymentStreamPaymentDateBusinessDayConvention(v))
}

// SetNoUnderlyingPaymentStreamPaymentDateBusinessCenters sets NoUnderlyingPaymentStreamPaymentDateBusinessCenters, Tag 40969.
func (m NoUnderlyingStreams) SetNoUnderlyingPaymentStreamPaymentDateBusinessCenters(f NoUnderlyingPaymentStreamPaymentDateBusinessCentersRepeatingGroup) {
	m.SetGroup(f)
}

// SetUnderlyingPaymentStreamPaymentFrequencyPeriod sets UnderlyingPaymentStreamPaymentFrequencyPeriod, Tag 40583.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamPaymentFrequencyPeriod(v int) {
	m.Set(field.NewUnderlyingPaymentStreamPaymentFrequencyPeriod(v))
}

// SetUnderlyingPaymentStreamPaymentFrequencyUnit sets UnderlyingPaymentStreamPaymentFrequencyUnit, Tag 40584.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamPaymentFrequencyUnit(v string) {
	m.Set(field.NewUnderlyingPaymentStreamPaymentFrequencyUnit(v))
}

// SetUnderlyingPaymentStreamPaymentRollConvention sets UnderlyingPaymentStreamPaymentRollConvention, Tag 40585.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamPaymentRollConvention(v string) {
	m.Set(field.NewUnderlyingPaymentStreamPaymentRollConvention(v))
}

// SetUnderlyingPaymentStreamFirstPaymentDateUnadjusted sets UnderlyingPaymentStreamFirstPaymentDateUnadjusted, Tag 40586.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamFirstPaymentDateUnadjusted(v string) {
	m.Set(field.NewUnderlyingPaymentStreamFirstPaymentDateUnadjusted(v))
}

// SetUnderlyingPaymentStreamLastRegularPaymentDateUnadjusted sets UnderlyingPaymentStreamLastRegularPaymentDateUnadjusted, Tag 40587.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamLastRegularPaymentDateUnadjusted(v string) {
	m.Set(field.NewUnderlyingPaymentStreamLastRegularPaymentDateUnadjusted(v))
}

// SetUnderlyingPaymentStreamPaymentDateRelativeTo sets UnderlyingPaymentStreamPaymentDateRelativeTo, Tag 40588.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamPaymentDateRelativeTo(v int) {
	m.Set(field.NewUnderlyingPaymentStreamPaymentDateRelativeTo(v))
}

// SetUnderlyingPaymentStreamPaymentDateOffsetPeriod sets UnderlyingPaymentStreamPaymentDateOffsetPeriod, Tag 40589.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamPaymentDateOffsetPeriod(v int) {
	m.Set(field.NewUnderlyingPaymentStreamPaymentDateOffsetPeriod(v))
}

// SetUnderlyingPaymentStreamPaymentDateOffsetUnit sets UnderlyingPaymentStreamPaymentDateOffsetUnit, Tag 40590.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamPaymentDateOffsetUnit(v string) {
	m.Set(field.NewUnderlyingPaymentStreamPaymentDateOffsetUnit(v))
}

// SetUnderlyingPaymentStreamPaymentDateOffsetDayType sets UnderlyingPaymentStreamPaymentDateOffsetDayType, Tag 40591.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamPaymentDateOffsetDayType(v int) {
	m.Set(field.NewUnderlyingPaymentStreamPaymentDateOffsetDayType(v))
}

// SetNoUnderlyingPaymentStreamPaymentDates sets NoUnderlyingPaymentStreamPaymentDates, Tag 41937.
func (m NoUnderlyingStreams) SetNoUnderlyingPaymentStreamPaymentDates(f NoUnderlyingPaymentStreamPaymentDatesRepeatingGroup) {
	m.SetGroup(f)
}

// SetUnderlyingPaymentStreamMasterAgreementPaymentDatesIndicator sets UnderlyingPaymentStreamMasterAgreementPaymentDatesIndicator, Tag 41940.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamMasterAgreementPaymentDatesIndicator(v bool) {
	m.Set(field.NewUnderlyingPaymentStreamMasterAgreementPaymentDatesIndicator(v))
}

// SetUnderlyingPaymentStreamFinalPricePaymentDateUnadjusted sets UnderlyingPaymentStreamFinalPricePaymentDateUnadjusted, Tag 42949.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamFinalPricePaymentDateUnadjusted(v string) {
	m.Set(field.NewUnderlyingPaymentStreamFinalPricePaymentDateUnadjusted(v))
}

// SetUnderlyingPaymentStreamFinalPricePaymentDateRelativeTo sets UnderlyingPaymentStreamFinalPricePaymentDateRelativeTo, Tag 42950.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamFinalPricePaymentDateRelativeTo(v int) {
	m.Set(field.NewUnderlyingPaymentStreamFinalPricePaymentDateRelativeTo(v))
}

// SetUnderlyingPaymentStreamFinalPricePaymentDateOffsetPeriod sets UnderlyingPaymentStreamFinalPricePaymentDateOffsetPeriod, Tag 42951.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamFinalPricePaymentDateOffsetPeriod(v int) {
	m.Set(field.NewUnderlyingPaymentStreamFinalPricePaymentDateOffsetPeriod(v))
}

// SetUnderlyingPaymentStreamFinalPricePaymentDateOffsetUnit sets UnderlyingPaymentStreamFinalPricePaymentDateOffsetUnit, Tag 42952.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamFinalPricePaymentDateOffsetUnit(v string) {
	m.Set(field.NewUnderlyingPaymentStreamFinalPricePaymentDateOffsetUnit(v))
}

// SetUnderlyingPaymentStreamFinalPricePaymentDateOffsetDayType sets UnderlyingPaymentStreamFinalPricePaymentDateOffsetDayType, Tag 42953.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamFinalPricePaymentDateOffsetDayType(v int) {
	m.Set(field.NewUnderlyingPaymentStreamFinalPricePaymentDateOffsetDayType(v))
}

// SetUnderlyingPaymentStreamFinalPricePaymentDateAdjusted sets UnderlyingPaymentStreamFinalPricePaymentDateAdjusted, Tag 42954.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamFinalPricePaymentDateAdjusted(v string) {
	m.Set(field.NewUnderlyingPaymentStreamFinalPricePaymentDateAdjusted(v))
}

// SetUnderlyingPaymentStreamResetDateRelativeTo sets UnderlyingPaymentStreamResetDateRelativeTo, Tag 40592.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamResetDateRelativeTo(v int) {
	m.Set(field.NewUnderlyingPaymentStreamResetDateRelativeTo(v))
}

// SetUnderlyingPaymentStreamResetDateBusinessDayConvention sets UnderlyingPaymentStreamResetDateBusinessDayConvention, Tag 40593.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamResetDateBusinessDayConvention(v int) {
	m.Set(field.NewUnderlyingPaymentStreamResetDateBusinessDayConvention(v))
}

// SetNoUnderlyingPaymentStreamResetDateBusinessCenters sets NoUnderlyingPaymentStreamResetDateBusinessCenters, Tag 40970.
func (m NoUnderlyingStreams) SetNoUnderlyingPaymentStreamResetDateBusinessCenters(f NoUnderlyingPaymentStreamResetDateBusinessCentersRepeatingGroup) {
	m.SetGroup(f)
}

// SetUnderlyingPaymentStreamResetFrequencyPeriod sets UnderlyingPaymentStreamResetFrequencyPeriod, Tag 40595.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamResetFrequencyPeriod(v int) {
	m.Set(field.NewUnderlyingPaymentStreamResetFrequencyPeriod(v))
}

// SetUnderlyingPaymentStreamResetFrequencyUnit sets UnderlyingPaymentStreamResetFrequencyUnit, Tag 40596.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamResetFrequencyUnit(v string) {
	m.Set(field.NewUnderlyingPaymentStreamResetFrequencyUnit(v))
}

// SetUnderlyingPaymentStreamResetWeeklyRollConvention sets UnderlyingPaymentStreamResetWeeklyRollConvention, Tag 40597.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamResetWeeklyRollConvention(v string) {
	m.Set(field.NewUnderlyingPaymentStreamResetWeeklyRollConvention(v))
}

// SetUnderlyingPaymentStreamInitialFixingDateRelativeTo sets UnderlyingPaymentStreamInitialFixingDateRelativeTo, Tag 40598.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamInitialFixingDateRelativeTo(v int) {
	m.Set(field.NewUnderlyingPaymentStreamInitialFixingDateRelativeTo(v))
}

// SetUnderlyingPaymentStreamInitialFixingDateBusinessDayConvention sets UnderlyingPaymentStreamInitialFixingDateBusinessDayConvention, Tag 40599.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamInitialFixingDateBusinessDayConvention(v int) {
	m.Set(field.NewUnderlyingPaymentStreamInitialFixingDateBusinessDayConvention(v))
}

// SetNoUnderlyingPaymentStreamInitialFixingDateBusinessCenters sets NoUnderlyingPaymentStreamInitialFixingDateBusinessCenters, Tag 40971.
func (m NoUnderlyingStreams) SetNoUnderlyingPaymentStreamInitialFixingDateBusinessCenters(f NoUnderlyingPaymentStreamInitialFixingDateBusinessCentersRepeatingGroup) {
	m.SetGroup(f)
}

// SetUnderlyingPaymentStreamInitialFixingDateOffsetPeriod sets UnderlyingPaymentStreamInitialFixingDateOffsetPeriod, Tag 40601.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamInitialFixingDateOffsetPeriod(v int) {
	m.Set(field.NewUnderlyingPaymentStreamInitialFixingDateOffsetPeriod(v))
}

// SetUnderlyingPaymentStreamInitialFixingDateOffsetUnit sets UnderlyingPaymentStreamInitialFixingDateOffsetUnit, Tag 40602.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamInitialFixingDateOffsetUnit(v string) {
	m.Set(field.NewUnderlyingPaymentStreamInitialFixingDateOffsetUnit(v))
}

// SetUnderlyingPaymentStreamInitialFixingDateOffsetDayType sets UnderlyingPaymentStreamInitialFixingDateOffsetDayType, Tag 40603.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamInitialFixingDateOffsetDayType(v int) {
	m.Set(field.NewUnderlyingPaymentStreamInitialFixingDateOffsetDayType(v))
}

// SetUnderlyingPaymentStreamInitialFixingDateAdjusted sets UnderlyingPaymentStreamInitialFixingDateAdjusted, Tag 40604.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamInitialFixingDateAdjusted(v string) {
	m.Set(field.NewUnderlyingPaymentStreamInitialFixingDateAdjusted(v))
}

// SetUnderlyingPaymentStreamFixingDateRelativeTo sets UnderlyingPaymentStreamFixingDateRelativeTo, Tag 40605.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamFixingDateRelativeTo(v int) {
	m.Set(field.NewUnderlyingPaymentStreamFixingDateRelativeTo(v))
}

// SetUnderlyingPaymentStreamFixingDateBusinessDayConvention sets UnderlyingPaymentStreamFixingDateBusinessDayConvention, Tag 40606.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamFixingDateBusinessDayConvention(v int) {
	m.Set(field.NewUnderlyingPaymentStreamFixingDateBusinessDayConvention(v))
}

// SetNoUnderlyingPaymentStreamFixingDateBusinessCenters sets NoUnderlyingPaymentStreamFixingDateBusinessCenters, Tag 40972.
func (m NoUnderlyingStreams) SetNoUnderlyingPaymentStreamFixingDateBusinessCenters(f NoUnderlyingPaymentStreamFixingDateBusinessCentersRepeatingGroup) {
	m.SetGroup(f)
}

// SetUnderlyingPaymentStreamFixingDateOffsetPeriod sets UnderlyingPaymentStreamFixingDateOffsetPeriod, Tag 40608.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamFixingDateOffsetPeriod(v int) {
	m.Set(field.NewUnderlyingPaymentStreamFixingDateOffsetPeriod(v))
}

// SetUnderlyingPaymentStreamFixingDateOffsetUnit sets UnderlyingPaymentStreamFixingDateOffsetUnit, Tag 40609.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamFixingDateOffsetUnit(v string) {
	m.Set(field.NewUnderlyingPaymentStreamFixingDateOffsetUnit(v))
}

// SetUnderlyingPaymentStreamFixingDateOffsetDayType sets UnderlyingPaymentStreamFixingDateOffsetDayType, Tag 40610.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamFixingDateOffsetDayType(v int) {
	m.Set(field.NewUnderlyingPaymentStreamFixingDateOffsetDayType(v))
}

// SetUnderlyingPaymentStreamFixingDateAdjusted sets UnderlyingPaymentStreamFixingDateAdjusted, Tag 40611.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamFixingDateAdjusted(v string) {
	m.Set(field.NewUnderlyingPaymentStreamFixingDateAdjusted(v))
}

// SetUnderlyingPaymentStreamRateCutoffDateOffsetPeriod sets UnderlyingPaymentStreamRateCutoffDateOffsetPeriod, Tag 40612.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamRateCutoffDateOffsetPeriod(v int) {
	m.Set(field.NewUnderlyingPaymentStreamRateCutoffDateOffsetPeriod(v))
}

// SetUnderlyingPaymentStreamRateCutoffDateOffsetUnit sets UnderlyingPaymentStreamRateCutoffDateOffsetUnit, Tag 40613.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamRateCutoffDateOffsetUnit(v string) {
	m.Set(field.NewUnderlyingPaymentStreamRateCutoffDateOffsetUnit(v))
}

// SetUnderlyingPaymentStreamRateCutoffDateOffsetDayType sets UnderlyingPaymentStreamRateCutoffDateOffsetDayType, Tag 40614.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamRateCutoffDateOffsetDayType(v int) {
	m.Set(field.NewUnderlyingPaymentStreamRateCutoffDateOffsetDayType(v))
}

// SetNoUnderlyingPaymentStreamFixingDates sets NoUnderlyingPaymentStreamFixingDates, Tag 42955.
func (m NoUnderlyingStreams) SetNoUnderlyingPaymentStreamFixingDates(f NoUnderlyingPaymentStreamFixingDatesRepeatingGroup) {
	m.SetGroup(f)
}

// SetUnderlyingPaymentStreamRate sets UnderlyingPaymentStreamRate, Tag 40615.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamRate(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingPaymentStreamRate(value, scale))
}

// SetUnderlyingPaymentStreamFixedAmount sets UnderlyingPaymentStreamFixedAmount, Tag 40616.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamFixedAmount(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingPaymentStreamFixedAmount(value, scale))
}

// SetUnderlyingPaymentStreamRateOrAmountCurrency sets UnderlyingPaymentStreamRateOrAmountCurrency, Tag 40617.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamRateOrAmountCurrency(v string) {
	m.Set(field.NewUnderlyingPaymentStreamRateOrAmountCurrency(v))
}

// SetUnderlyingPaymentStreamFutureValueNotional sets UnderlyingPaymentStreamFutureValueNotional, Tag 40618.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamFutureValueNotional(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingPaymentStreamFutureValueNotional(value, scale))
}

// SetUnderlyingPaymentStreamFutureValueDateAdjusted sets UnderlyingPaymentStreamFutureValueDateAdjusted, Tag 40619.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamFutureValueDateAdjusted(v string) {
	m.Set(field.NewUnderlyingPaymentStreamFutureValueDateAdjusted(v))
}

// SetUnderlyingPaymentStreamFixedAmountUnitOfMeasure sets UnderlyingPaymentStreamFixedAmountUnitOfMeasure, Tag 41904.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamFixedAmountUnitOfMeasure(v string) {
	m.Set(field.NewUnderlyingPaymentStreamFixedAmountUnitOfMeasure(v))
}

// SetUnderlyingPaymentStreamTotalFixedAmount sets UnderlyingPaymentStreamTotalFixedAmount, Tag 41905.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamTotalFixedAmount(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingPaymentStreamTotalFixedAmount(value, scale))
}

// SetUnderlyingPaymentStreamWorldScaleRate sets UnderlyingPaymentStreamWorldScaleRate, Tag 41906.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamWorldScaleRate(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingPaymentStreamWorldScaleRate(value, scale))
}

// SetUnderlyingPaymentStreamContractPrice sets UnderlyingPaymentStreamContractPrice, Tag 41907.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamContractPrice(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingPaymentStreamContractPrice(value, scale))
}

// SetUnderlyingPaymentStreamContractPriceCurrency sets UnderlyingPaymentStreamContractPriceCurrency, Tag 41908.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamContractPriceCurrency(v string) {
	m.Set(field.NewUnderlyingPaymentStreamContractPriceCurrency(v))
}

// SetUnderlyingPaymentStreamRateIndex sets UnderlyingPaymentStreamRateIndex, Tag 40620.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamRateIndex(v string) {
	m.Set(field.NewUnderlyingPaymentStreamRateIndex(v))
}

// SetUnderlyingPaymentStreamRateIndexSource sets UnderlyingPaymentStreamRateIndexSource, Tag 40621.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamRateIndexSource(v int) {
	m.Set(field.NewUnderlyingPaymentStreamRateIndexSource(v))
}

// SetUnderlyingPaymentStreamRateIndexCurveUnit sets UnderlyingPaymentStreamRateIndexCurveUnit, Tag 40622.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamRateIndexCurveUnit(v string) {
	m.Set(field.NewUnderlyingPaymentStreamRateIndexCurveUnit(v))
}

// SetUnderlyingPaymentStreamRateIndexCurvePeriod sets UnderlyingPaymentStreamRateIndexCurvePeriod, Tag 40623.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamRateIndexCurvePeriod(v int) {
	m.Set(field.NewUnderlyingPaymentStreamRateIndexCurvePeriod(v))
}

// SetUnderlyingPaymentStreamRateMultiplier sets UnderlyingPaymentStreamRateMultiplier, Tag 40624.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamRateMultiplier(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingPaymentStreamRateMultiplier(value, scale))
}

// SetUnderlyingPaymentStreamRateSpread sets UnderlyingPaymentStreamRateSpread, Tag 40625.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamRateSpread(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingPaymentStreamRateSpread(value, scale))
}

// SetUnderlyingPaymentStreamRateSpreadPositionType sets UnderlyingPaymentStreamRateSpreadPositionType, Tag 40626.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamRateSpreadPositionType(v int) {
	m.Set(field.NewUnderlyingPaymentStreamRateSpreadPositionType(v))
}

// SetUnderlyingPaymentStreamRateTreatment sets UnderlyingPaymentStreamRateTreatment, Tag 40627.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamRateTreatment(v int) {
	m.Set(field.NewUnderlyingPaymentStreamRateTreatment(v))
}

// SetUnderlyingPaymentStreamCapRate sets UnderlyingPaymentStreamCapRate, Tag 40628.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamCapRate(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingPaymentStreamCapRate(value, scale))
}

// SetUnderlyingPaymentStreamCapRateBuySide sets UnderlyingPaymentStreamCapRateBuySide, Tag 40629.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamCapRateBuySide(v int) {
	m.Set(field.NewUnderlyingPaymentStreamCapRateBuySide(v))
}

// SetUnderlyingPaymentStreamCapRateSellSide sets UnderlyingPaymentStreamCapRateSellSide, Tag 40630.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamCapRateSellSide(v int) {
	m.Set(field.NewUnderlyingPaymentStreamCapRateSellSide(v))
}

// SetUnderlyingPaymentStreamFloorRate sets UnderlyingPaymentStreamFloorRate, Tag 40631.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamFloorRate(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingPaymentStreamFloorRate(value, scale))
}

// SetUnderlyingPaymentStreamFloorRateBuySide sets UnderlyingPaymentStreamFloorRateBuySide, Tag 40632.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamFloorRateBuySide(v int) {
	m.Set(field.NewUnderlyingPaymentStreamFloorRateBuySide(v))
}

// SetUnderlyingPaymentStreamFloorRateSellSide sets UnderlyingPaymentStreamFloorRateSellSide, Tag 40633.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamFloorRateSellSide(v int) {
	m.Set(field.NewUnderlyingPaymentStreamFloorRateSellSide(v))
}

// SetUnderlyingPaymentStreamInitialRate sets UnderlyingPaymentStreamInitialRate, Tag 40634.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamInitialRate(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingPaymentStreamInitialRate(value, scale))
}

// SetUnderlyingPaymentStreamFinalRateRoundingDirection sets UnderlyingPaymentStreamFinalRateRoundingDirection, Tag 40635.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamFinalRateRoundingDirection(v string) {
	m.Set(field.NewUnderlyingPaymentStreamFinalRateRoundingDirection(v))
}

// SetUnderlyingPaymentStreamFinalRatePrecision sets UnderlyingPaymentStreamFinalRatePrecision, Tag 40636.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamFinalRatePrecision(v int) {
	m.Set(field.NewUnderlyingPaymentStreamFinalRatePrecision(v))
}

// SetUnderlyingPaymentStreamAveragingMethod sets UnderlyingPaymentStreamAveragingMethod, Tag 40637.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamAveragingMethod(v int) {
	m.Set(field.NewUnderlyingPaymentStreamAveragingMethod(v))
}

// SetUnderlyingPaymentStreamNegativeRateTreatment sets UnderlyingPaymentStreamNegativeRateTreatment, Tag 40638.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamNegativeRateTreatment(v int) {
	m.Set(field.NewUnderlyingPaymentStreamNegativeRateTreatment(v))
}

// SetUnderlyingPaymentStreamInflationLagPeriod sets UnderlyingPaymentStreamInflationLagPeriod, Tag 40639.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamInflationLagPeriod(v int) {
	m.Set(field.NewUnderlyingPaymentStreamInflationLagPeriod(v))
}

// SetUnderlyingPaymentStreamInflationLagUnit sets UnderlyingPaymentStreamInflationLagUnit, Tag 40640.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamInflationLagUnit(v string) {
	m.Set(field.NewUnderlyingPaymentStreamInflationLagUnit(v))
}

// SetUnderlyingPaymentStreamInflationLagDayType sets UnderlyingPaymentStreamInflationLagDayType, Tag 40641.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamInflationLagDayType(v int) {
	m.Set(field.NewUnderlyingPaymentStreamInflationLagDayType(v))
}

// SetUnderlyingPaymentStreamInflationInterpolationMethod sets UnderlyingPaymentStreamInflationInterpolationMethod, Tag 40642.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamInflationInterpolationMethod(v int) {
	m.Set(field.NewUnderlyingPaymentStreamInflationInterpolationMethod(v))
}

// SetUnderlyingPaymentStreamInflationIndexSource sets UnderlyingPaymentStreamInflationIndexSource, Tag 40643.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamInflationIndexSource(v int) {
	m.Set(field.NewUnderlyingPaymentStreamInflationIndexSource(v))
}

// SetUnderlyingPaymentStreamInflationPublicationSource sets UnderlyingPaymentStreamInflationPublicationSource, Tag 40644.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamInflationPublicationSource(v string) {
	m.Set(field.NewUnderlyingPaymentStreamInflationPublicationSource(v))
}

// SetUnderlyingPaymentStreamInflationInitialIndexLevel sets UnderlyingPaymentStreamInflationInitialIndexLevel, Tag 40645.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamInflationInitialIndexLevel(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingPaymentStreamInflationInitialIndexLevel(value, scale))
}

// SetUnderlyingPaymentStreamInflationFallbackBondApplicable sets UnderlyingPaymentStreamInflationFallbackBondApplicable, Tag 40646.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamInflationFallbackBondApplicable(v bool) {
	m.Set(field.NewUnderlyingPaymentStreamInflationFallbackBondApplicable(v))
}

// SetUnderlyingPaymentStreamFRADiscounting sets UnderlyingPaymentStreamFRADiscounting, Tag 40647.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamFRADiscounting(v int) {
	m.Set(field.NewUnderlyingPaymentStreamFRADiscounting(v))
}

// SetUnderlyingPaymentStreamRateIndex2CurveUnit sets UnderlyingPaymentStreamRateIndex2CurveUnit, Tag 41911.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamRateIndex2CurveUnit(v string) {
	m.Set(field.NewUnderlyingPaymentStreamRateIndex2CurveUnit(v))
}

// SetUnderlyingPaymentStreamRateIndex2CurvePeriod sets UnderlyingPaymentStreamRateIndex2CurvePeriod, Tag 41912.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamRateIndex2CurvePeriod(v int) {
	m.Set(field.NewUnderlyingPaymentStreamRateIndex2CurvePeriod(v))
}

// SetUnderlyingPaymentStreamRateIndexLocation sets UnderlyingPaymentStreamRateIndexLocation, Tag 41913.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamRateIndexLocation(v string) {
	m.Set(field.NewUnderlyingPaymentStreamRateIndexLocation(v))
}

// SetUnderlyingPaymentStreamRateIndexLevel sets UnderlyingPaymentStreamRateIndexLevel, Tag 41914.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamRateIndexLevel(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingPaymentStreamRateIndexLevel(value, scale))
}

// SetUnderlyingPaymentStreamRateIndexUnitOfMeasure sets UnderlyingPaymentStreamRateIndexUnitOfMeasure, Tag 41915.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamRateIndexUnitOfMeasure(v string) {
	m.Set(field.NewUnderlyingPaymentStreamRateIndexUnitOfMeasure(v))
}

// SetUnderlyingPaymentStreamSettlLevel sets UnderlyingPaymentStreamSettlLevel, Tag 41916.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamSettlLevel(v int) {
	m.Set(field.NewUnderlyingPaymentStreamSettlLevel(v))
}

// SetUnderlyingPaymentStreamReferenceLevel sets UnderlyingPaymentStreamReferenceLevel, Tag 41917.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamReferenceLevel(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingPaymentStreamReferenceLevel(value, scale))
}

// SetUnderlyingPaymentStreamReferenceLevelUnitOfMeasure sets UnderlyingPaymentStreamReferenceLevelUnitOfMeasure, Tag 41918.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamReferenceLevelUnitOfMeasure(v string) {
	m.Set(field.NewUnderlyingPaymentStreamReferenceLevelUnitOfMeasure(v))
}

// SetUnderlyingPaymentStreamReferenceLevelEqualsZeroIndicator sets UnderlyingPaymentStreamReferenceLevelEqualsZeroIndicator, Tag 41919.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamReferenceLevelEqualsZeroIndicator(v bool) {
	m.Set(field.NewUnderlyingPaymentStreamReferenceLevelEqualsZeroIndicator(v))
}

// SetUnderlyingPaymentStreamRateSpreadCurrency sets UnderlyingPaymentStreamRateSpreadCurrency, Tag 41920.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamRateSpreadCurrency(v string) {
	m.Set(field.NewUnderlyingPaymentStreamRateSpreadCurrency(v))
}

// SetUnderlyingPaymentStreamRateSpreadUnitOfMeasure sets UnderlyingPaymentStreamRateSpreadUnitOfMeasure, Tag 41921.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamRateSpreadUnitOfMeasure(v string) {
	m.Set(field.NewUnderlyingPaymentStreamRateSpreadUnitOfMeasure(v))
}

// SetUnderlyingPaymentStreamRateConversionFactor sets UnderlyingPaymentStreamRateConversionFactor, Tag 41922.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamRateConversionFactor(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingPaymentStreamRateConversionFactor(value, scale))
}

// SetUnderlyingPaymentStreamRateSpreadType sets UnderlyingPaymentStreamRateSpreadType, Tag 41923.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamRateSpreadType(v int) {
	m.Set(field.NewUnderlyingPaymentStreamRateSpreadType(v))
}

// SetUnderlyingPaymentStreamLastResetRate sets UnderlyingPaymentStreamLastResetRate, Tag 41924.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamLastResetRate(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingPaymentStreamLastResetRate(value, scale))
}

// SetUnderlyingPaymentStreamFinalRate sets UnderlyingPaymentStreamFinalRate, Tag 41925.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamFinalRate(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingPaymentStreamFinalRate(value, scale))
}

// SetUnderlyingPaymentStreamCalculationLagPeriod sets UnderlyingPaymentStreamCalculationLagPeriod, Tag 41926.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamCalculationLagPeriod(v int) {
	m.Set(field.NewUnderlyingPaymentStreamCalculationLagPeriod(v))
}

// SetUnderlyingPaymentStreamCalculationLagUnit sets UnderlyingPaymentStreamCalculationLagUnit, Tag 41927.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamCalculationLagUnit(v string) {
	m.Set(field.NewUnderlyingPaymentStreamCalculationLagUnit(v))
}

// SetUnderlyingPaymentStreamFirstObservationDateOffsetPeriod sets UnderlyingPaymentStreamFirstObservationDateOffsetPeriod, Tag 41928.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamFirstObservationDateOffsetPeriod(v int) {
	m.Set(field.NewUnderlyingPaymentStreamFirstObservationDateOffsetPeriod(v))
}

// SetUnderlyingPaymentStreamFirstObservationDateOffsetUnit sets UnderlyingPaymentStreamFirstObservationDateOffsetUnit, Tag 41929.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamFirstObservationDateOffsetUnit(v string) {
	m.Set(field.NewUnderlyingPaymentStreamFirstObservationDateOffsetUnit(v))
}

// SetUnderlyingPaymentStreamPricingDayType sets UnderlyingPaymentStreamPricingDayType, Tag 41930.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamPricingDayType(v int) {
	m.Set(field.NewUnderlyingPaymentStreamPricingDayType(v))
}

// SetUnderlyingPaymentStreamPricingDayDistribution sets UnderlyingPaymentStreamPricingDayDistribution, Tag 41931.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamPricingDayDistribution(v int) {
	m.Set(field.NewUnderlyingPaymentStreamPricingDayDistribution(v))
}

// SetUnderlyingPaymentStreamPricingDayCount sets UnderlyingPaymentStreamPricingDayCount, Tag 41932.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamPricingDayCount(v int) {
	m.Set(field.NewUnderlyingPaymentStreamPricingDayCount(v))
}

// SetUnderlyingPaymentStreamPricingBusinessCalendar sets UnderlyingPaymentStreamPricingBusinessCalendar, Tag 41933.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamPricingBusinessCalendar(v string) {
	m.Set(field.NewUnderlyingPaymentStreamPricingBusinessCalendar(v))
}

// SetUnderlyingPaymentStreamPricingBusinessDayConvention sets UnderlyingPaymentStreamPricingBusinessDayConvention, Tag 41934.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamPricingBusinessDayConvention(v int) {
	m.Set(field.NewUnderlyingPaymentStreamPricingBusinessDayConvention(v))
}

// SetNoUnderlyingPaymentStreamPricingBusinessCenters sets NoUnderlyingPaymentStreamPricingBusinessCenters, Tag 41909.
func (m NoUnderlyingStreams) SetNoUnderlyingPaymentStreamPricingBusinessCenters(f NoUnderlyingPaymentStreamPricingBusinessCentersRepeatingGroup) {
	m.SetGroup(f)
}

// SetNoUnderlyingPaymentStreamPricingDays sets NoUnderlyingPaymentStreamPricingDays, Tag 41944.
func (m NoUnderlyingStreams) SetNoUnderlyingPaymentStreamPricingDays(f NoUnderlyingPaymentStreamPricingDaysRepeatingGroup) {
	m.SetGroup(f)
}

// SetNoUnderlyingPaymentStreamPricingDates sets NoUnderlyingPaymentStreamPricingDates, Tag 41941.
func (m NoUnderlyingStreams) SetNoUnderlyingPaymentStreamPricingDates(f NoUnderlyingPaymentStreamPricingDatesRepeatingGroup) {
	m.SetGroup(f)
}

// SetUnderlyingPaymentStreamFirstObservationDateUnadjusted sets UnderlyingPaymentStreamFirstObservationDateUnadjusted, Tag 42958.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamFirstObservationDateUnadjusted(v string) {
	m.Set(field.NewUnderlyingPaymentStreamFirstObservationDateUnadjusted(v))
}

// SetUnderlyingPaymentStreamFirstObservationDateRelativeTo sets UnderlyingPaymentStreamFirstObservationDateRelativeTo, Tag 42959.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamFirstObservationDateRelativeTo(v int) {
	m.Set(field.NewUnderlyingPaymentStreamFirstObservationDateRelativeTo(v))
}

// SetUnderlyingPaymentStreamFirstObservationDateOffsetDayType sets UnderlyingPaymentStreamFirstObservationDateOffsetDayType, Tag 42960.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamFirstObservationDateOffsetDayType(v int) {
	m.Set(field.NewUnderlyingPaymentStreamFirstObservationDateOffsetDayType(v))
}

// SetUnderlyingPaymentStreamFirstObservationDateAdjusted sets UnderlyingPaymentStreamFirstObservationDateAdjusted, Tag 42961.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamFirstObservationDateAdjusted(v string) {
	m.Set(field.NewUnderlyingPaymentStreamFirstObservationDateAdjusted(v))
}

// SetUnderlyingPaymentStreamUnderlierRefID sets UnderlyingPaymentStreamUnderlierRefID, Tag 42962.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamUnderlierRefID(v string) {
	m.Set(field.NewUnderlyingPaymentStreamUnderlierRefID(v))
}

// SetUnderlyingPaymentStreamFormulaCurrency sets UnderlyingPaymentStreamFormulaCurrency, Tag 42978.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamFormulaCurrency(v string) {
	m.Set(field.NewUnderlyingPaymentStreamFormulaCurrency(v))
}

// SetUnderlyingPaymentStreamFormulaCurrencyDeterminationMethod sets UnderlyingPaymentStreamFormulaCurrencyDeterminationMethod, Tag 42979.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamFormulaCurrencyDeterminationMethod(v string) {
	m.Set(field.NewUnderlyingPaymentStreamFormulaCurrencyDeterminationMethod(v))
}

// SetUnderlyingPaymentStreamFormulaReferenceAmount sets UnderlyingPaymentStreamFormulaReferenceAmount, Tag 42980.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamFormulaReferenceAmount(v int) {
	m.Set(field.NewUnderlyingPaymentStreamFormulaReferenceAmount(v))
}

// SetNoUnderlyingPaymentStreamFormulas sets NoUnderlyingPaymentStreamFormulas, Tag 42981.
func (m NoUnderlyingStreams) SetNoUnderlyingPaymentStreamFormulas(f NoUnderlyingPaymentStreamFormulasRepeatingGroup) {
	m.SetGroup(f)
}

// SetUnderlyingPaymentStreamFormulaImageLength sets UnderlyingPaymentStreamFormulaImageLength, Tag 42947.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamFormulaImageLength(v int) {
	m.Set(field.NewUnderlyingPaymentStreamFormulaImageLength(v))
}

// SetUnderlyingPaymentStreamFormulaImage sets UnderlyingPaymentStreamFormulaImage, Tag 42948.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamFormulaImage(v string) {
	m.Set(field.NewUnderlyingPaymentStreamFormulaImage(v))
}

// SetUnderlyingDividendReinvestmentIndicator sets UnderlyingDividendReinvestmentIndicator, Tag 42826.
func (m NoUnderlyingStreams) SetUnderlyingDividendReinvestmentIndicator(v bool) {
	m.Set(field.NewUnderlyingDividendReinvestmentIndicator(v))
}

// SetUnderlyingDividendEntitlementEvent sets UnderlyingDividendEntitlementEvent, Tag 42827.
func (m NoUnderlyingStreams) SetUnderlyingDividendEntitlementEvent(v int) {
	m.Set(field.NewUnderlyingDividendEntitlementEvent(v))
}

// SetUnderlyingDividendAmountType sets UnderlyingDividendAmountType, Tag 42828.
func (m NoUnderlyingStreams) SetUnderlyingDividendAmountType(v int) {
	m.Set(field.NewUnderlyingDividendAmountType(v))
}

// SetUnderlyingDividendUnderlierRefID sets UnderlyingDividendUnderlierRefID, Tag 42829.
func (m NoUnderlyingStreams) SetUnderlyingDividendUnderlierRefID(v string) {
	m.Set(field.NewUnderlyingDividendUnderlierRefID(v))
}

// SetNoUnderlyingDividendPeriods sets NoUnderlyingDividendPeriods, Tag 42862.
func (m NoUnderlyingStreams) SetNoUnderlyingDividendPeriods(f NoUnderlyingDividendPeriodsRepeatingGroup) {
	m.SetGroup(f)
}

// SetUnderlyingExtraordinaryDividendPartySide sets UnderlyingExtraordinaryDividendPartySide, Tag 42830.
func (m NoUnderlyingStreams) SetUnderlyingExtraordinaryDividendPartySide(v int) {
	m.Set(field.NewUnderlyingExtraordinaryDividendPartySide(v))
}

// SetUnderlyingExtraordinaryDividendAmountType sets UnderlyingExtraordinaryDividendAmountType, Tag 42831.
func (m NoUnderlyingStreams) SetUnderlyingExtraordinaryDividendAmountType(v int) {
	m.Set(field.NewUnderlyingExtraordinaryDividendAmountType(v))
}

// SetUnderlyingExtraordinaryDividendCurrency sets UnderlyingExtraordinaryDividendCurrency, Tag 42832.
func (m NoUnderlyingStreams) SetUnderlyingExtraordinaryDividendCurrency(v string) {
	m.Set(field.NewUnderlyingExtraordinaryDividendCurrency(v))
}

// SetUnderlyingExtraordinaryDividendDeterminationMethod sets UnderlyingExtraordinaryDividendDeterminationMethod, Tag 42833.
func (m NoUnderlyingStreams) SetUnderlyingExtraordinaryDividendDeterminationMethod(v string) {
	m.Set(field.NewUnderlyingExtraordinaryDividendDeterminationMethod(v))
}

// SetUnderlyingDividendFXTriggerDateRelativeTo sets UnderlyingDividendFXTriggerDateRelativeTo, Tag 42846.
func (m NoUnderlyingStreams) SetUnderlyingDividendFXTriggerDateRelativeTo(v int) {
	m.Set(field.NewUnderlyingDividendFXTriggerDateRelativeTo(v))
}

// SetUnderlyingDividendFXTriggerDateOffsetPeriod sets UnderlyingDividendFXTriggerDateOffsetPeriod, Tag 42847.
func (m NoUnderlyingStreams) SetUnderlyingDividendFXTriggerDateOffsetPeriod(v int) {
	m.Set(field.NewUnderlyingDividendFXTriggerDateOffsetPeriod(v))
}

// SetUnderlyingDividendFXTriggerDateOffsetUnit sets UnderlyingDividendFXTriggerDateOffsetUnit, Tag 42848.
func (m NoUnderlyingStreams) SetUnderlyingDividendFXTriggerDateOffsetUnit(v string) {
	m.Set(field.NewUnderlyingDividendFXTriggerDateOffsetUnit(v))
}

// SetUnderlyingDividendFXTriggerDateOffsetDayType sets UnderlyingDividendFXTriggerDateOffsetDayType, Tag 42849.
func (m NoUnderlyingStreams) SetUnderlyingDividendFXTriggerDateOffsetDayType(v int) {
	m.Set(field.NewUnderlyingDividendFXTriggerDateOffsetDayType(v))
}

// SetUnderlyingDividendFXTriggerDateUnadjusted sets UnderlyingDividendFXTriggerDateUnadjusted, Tag 42850.
func (m NoUnderlyingStreams) SetUnderlyingDividendFXTriggerDateUnadjusted(v string) {
	m.Set(field.NewUnderlyingDividendFXTriggerDateUnadjusted(v))
}

// SetUnderlyingDividendFXTriggerDateBusinessDayConvention sets UnderlyingDividendFXTriggerDateBusinessDayConvention, Tag 42851.
func (m NoUnderlyingStreams) SetUnderlyingDividendFXTriggerDateBusinessDayConvention(v int) {
	m.Set(field.NewUnderlyingDividendFXTriggerDateBusinessDayConvention(v))
}

// SetNoUnderlyingDividendFXTriggerDateBusinessCenters sets NoUnderlyingDividendFXTriggerDateBusinessCenters, Tag 42853.
func (m NoUnderlyingStreams) SetNoUnderlyingDividendFXTriggerDateBusinessCenters(f NoUnderlyingDividendFXTriggerDateBusinessCentersRepeatingGroup) {
	m.SetGroup(f)
}

// SetUnderlyingDividendFXTriggerDateAdjusted sets UnderlyingDividendFXTriggerDateAdjusted, Tag 42852.
func (m NoUnderlyingStreams) SetUnderlyingDividendFXTriggerDateAdjusted(v string) {
	m.Set(field.NewUnderlyingDividendFXTriggerDateAdjusted(v))
}

// SetUnderlyingDividendFloatingRateIndex sets UnderlyingDividendFloatingRateIndex, Tag 42801.
func (m NoUnderlyingStreams) SetUnderlyingDividendFloatingRateIndex(v string) {
	m.Set(field.NewUnderlyingDividendFloatingRateIndex(v))
}

// SetUnderlyingDividendFloatingRateIndexCurvePeriod sets UnderlyingDividendFloatingRateIndexCurvePeriod, Tag 42802.
func (m NoUnderlyingStreams) SetUnderlyingDividendFloatingRateIndexCurvePeriod(v int) {
	m.Set(field.NewUnderlyingDividendFloatingRateIndexCurvePeriod(v))
}

// SetUnderlyingDividendFloatingRateIndexCurveUnit sets UnderlyingDividendFloatingRateIndexCurveUnit, Tag 42803.
func (m NoUnderlyingStreams) SetUnderlyingDividendFloatingRateIndexCurveUnit(v string) {
	m.Set(field.NewUnderlyingDividendFloatingRateIndexCurveUnit(v))
}

// SetUnderlyingDividendFloatingRateMultiplier sets UnderlyingDividendFloatingRateMultiplier, Tag 42804.
func (m NoUnderlyingStreams) SetUnderlyingDividendFloatingRateMultiplier(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingDividendFloatingRateMultiplier(value, scale))
}

// SetUnderlyingDividendFloatingRateSpread sets UnderlyingDividendFloatingRateSpread, Tag 42805.
func (m NoUnderlyingStreams) SetUnderlyingDividendFloatingRateSpread(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingDividendFloatingRateSpread(value, scale))
}

// SetUnderlyingDividendFloatingRateSpreadPositionType sets UnderlyingDividendFloatingRateSpreadPositionType, Tag 42806.
func (m NoUnderlyingStreams) SetUnderlyingDividendFloatingRateSpreadPositionType(v int) {
	m.Set(field.NewUnderlyingDividendFloatingRateSpreadPositionType(v))
}

// SetUnderlyingDividendFloatingRateTreatment sets UnderlyingDividendFloatingRateTreatment, Tag 42807.
func (m NoUnderlyingStreams) SetUnderlyingDividendFloatingRateTreatment(v int) {
	m.Set(field.NewUnderlyingDividendFloatingRateTreatment(v))
}

// SetUnderlyingDividendCapRate sets UnderlyingDividendCapRate, Tag 42808.
func (m NoUnderlyingStreams) SetUnderlyingDividendCapRate(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingDividendCapRate(value, scale))
}

// SetUnderlyingDividendCapRateBuySide sets UnderlyingDividendCapRateBuySide, Tag 42809.
func (m NoUnderlyingStreams) SetUnderlyingDividendCapRateBuySide(v int) {
	m.Set(field.NewUnderlyingDividendCapRateBuySide(v))
}

// SetUnderlyingDividendCapRateSellSide sets UnderlyingDividendCapRateSellSide, Tag 42810.
func (m NoUnderlyingStreams) SetUnderlyingDividendCapRateSellSide(v int) {
	m.Set(field.NewUnderlyingDividendCapRateSellSide(v))
}

// SetUnderlyingDividendFloorRate sets UnderlyingDividendFloorRate, Tag 42811.
func (m NoUnderlyingStreams) SetUnderlyingDividendFloorRate(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingDividendFloorRate(value, scale))
}

// SetUnderlyingDividendFloorRateBuySide sets UnderlyingDividendFloorRateBuySide, Tag 42812.
func (m NoUnderlyingStreams) SetUnderlyingDividendFloorRateBuySide(v int) {
	m.Set(field.NewUnderlyingDividendFloorRateBuySide(v))
}

// SetUnderlyingDividendFloorRateSellSide sets UnderlyingDividendFloorRateSellSide, Tag 42813.
func (m NoUnderlyingStreams) SetUnderlyingDividendFloorRateSellSide(v int) {
	m.Set(field.NewUnderlyingDividendFloorRateSellSide(v))
}

// SetUnderlyingDividendInitialRate sets UnderlyingDividendInitialRate, Tag 42814.
func (m NoUnderlyingStreams) SetUnderlyingDividendInitialRate(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingDividendInitialRate(value, scale))
}

// SetUnderlyingDividendFinalRateRoundingDirection sets UnderlyingDividendFinalRateRoundingDirection, Tag 42815.
func (m NoUnderlyingStreams) SetUnderlyingDividendFinalRateRoundingDirection(v string) {
	m.Set(field.NewUnderlyingDividendFinalRateRoundingDirection(v))
}

// SetUnderlyingDividendFinalRatePrecision sets UnderlyingDividendFinalRatePrecision, Tag 42816.
func (m NoUnderlyingStreams) SetUnderlyingDividendFinalRatePrecision(v int) {
	m.Set(field.NewUnderlyingDividendFinalRatePrecision(v))
}

// SetUnderlyingDividendAveragingMethod sets UnderlyingDividendAveragingMethod, Tag 42817.
func (m NoUnderlyingStreams) SetUnderlyingDividendAveragingMethod(v int) {
	m.Set(field.NewUnderlyingDividendAveragingMethod(v))
}

// SetUnderlyingDividendNegativeRateTreatment sets UnderlyingDividendNegativeRateTreatment, Tag 42818.
func (m NoUnderlyingStreams) SetUnderlyingDividendNegativeRateTreatment(v int) {
	m.Set(field.NewUnderlyingDividendNegativeRateTreatment(v))
}

// SetUnderlyingDividendAccrualFixedRate sets UnderlyingDividendAccrualFixedRate, Tag 42834.
func (m NoUnderlyingStreams) SetUnderlyingDividendAccrualFixedRate(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingDividendAccrualFixedRate(value, scale))
}

// SetUnderlyingDividendAccrualPaymentDateRelativeTo sets UnderlyingDividendAccrualPaymentDateRelativeTo, Tag 42819.
func (m NoUnderlyingStreams) SetUnderlyingDividendAccrualPaymentDateRelativeTo(v int) {
	m.Set(field.NewUnderlyingDividendAccrualPaymentDateRelativeTo(v))
}

// SetUnderlyingDividendAccrualPaymentDateOffsetPeriod sets UnderlyingDividendAccrualPaymentDateOffsetPeriod, Tag 42820.
func (m NoUnderlyingStreams) SetUnderlyingDividendAccrualPaymentDateOffsetPeriod(v int) {
	m.Set(field.NewUnderlyingDividendAccrualPaymentDateOffsetPeriod(v))
}

// SetUnderlyingDividendAccrualPaymentDateOffsetUnit sets UnderlyingDividendAccrualPaymentDateOffsetUnit, Tag 42821.
func (m NoUnderlyingStreams) SetUnderlyingDividendAccrualPaymentDateOffsetUnit(v string) {
	m.Set(field.NewUnderlyingDividendAccrualPaymentDateOffsetUnit(v))
}

// SetUnderlyingDividendAccrualPaymentDateOffsetDayType sets UnderlyingDividendAccrualPaymentDateOffsetDayType, Tag 42822.
func (m NoUnderlyingStreams) SetUnderlyingDividendAccrualPaymentDateOffsetDayType(v int) {
	m.Set(field.NewUnderlyingDividendAccrualPaymentDateOffsetDayType(v))
}

// SetUnderlyingDividendAccrualPaymentDateUnadjusted sets UnderlyingDividendAccrualPaymentDateUnadjusted, Tag 42823.
func (m NoUnderlyingStreams) SetUnderlyingDividendAccrualPaymentDateUnadjusted(v string) {
	m.Set(field.NewUnderlyingDividendAccrualPaymentDateUnadjusted(v))
}

// SetUnderlyingDividendAccrualPaymentDateBusinessDayConvention sets UnderlyingDividendAccrualPaymentDateBusinessDayConvention, Tag 42824.
func (m NoUnderlyingStreams) SetUnderlyingDividendAccrualPaymentDateBusinessDayConvention(v int) {
	m.Set(field.NewUnderlyingDividendAccrualPaymentDateBusinessDayConvention(v))
}

// SetNoUnderlyingDividendAccrualPaymentDateBusinessCenters sets NoUnderlyingDividendAccrualPaymentDateBusinessCenters, Tag 42799.
func (m NoUnderlyingStreams) SetNoUnderlyingDividendAccrualPaymentDateBusinessCenters(f NoUnderlyingDividendAccrualPaymentDateBusinessCentersRepeatingGroup) {
	m.SetGroup(f)
}

// SetUnderlyingDividendAccrualPaymentDateAdjusted sets UnderlyingDividendAccrualPaymentDateAdjusted, Tag 42825.
func (m NoUnderlyingStreams) SetUnderlyingDividendAccrualPaymentDateAdjusted(v string) {
	m.Set(field.NewUnderlyingDividendAccrualPaymentDateAdjusted(v))
}

// SetUnderlyingDividendCompoundingMethod sets UnderlyingDividendCompoundingMethod, Tag 42835.
func (m NoUnderlyingStreams) SetUnderlyingDividendCompoundingMethod(v int) {
	m.Set(field.NewUnderlyingDividendCompoundingMethod(v))
}

// SetUnderlyingDividendNumOfIndexUnits sets UnderlyingDividendNumOfIndexUnits, Tag 42836.
func (m NoUnderlyingStreams) SetUnderlyingDividendNumOfIndexUnits(v int) {
	m.Set(field.NewUnderlyingDividendNumOfIndexUnits(v))
}

// SetUnderlyingDividendCashPercentage sets UnderlyingDividendCashPercentage, Tag 42837.
func (m NoUnderlyingStreams) SetUnderlyingDividendCashPercentage(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingDividendCashPercentage(value, scale))
}

// SetUnderlyingDividendCashEquivalentPercentage sets UnderlyingDividendCashEquivalentPercentage, Tag 42838.
func (m NoUnderlyingStreams) SetUnderlyingDividendCashEquivalentPercentage(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingDividendCashEquivalentPercentage(value, scale))
}

// SetUnderlyingNonCashDividendTreatment sets UnderlyingNonCashDividendTreatment, Tag 42839.
func (m NoUnderlyingStreams) SetUnderlyingNonCashDividendTreatment(v int) {
	m.Set(field.NewUnderlyingNonCashDividendTreatment(v))
}

// SetUnderlyingDividendComposition sets UnderlyingDividendComposition, Tag 42840.
func (m NoUnderlyingStreams) SetUnderlyingDividendComposition(v int) {
	m.Set(field.NewUnderlyingDividendComposition(v))
}

// SetUnderlyingSpecialDividendsIndicator sets UnderlyingSpecialDividendsIndicator, Tag 42841.
func (m NoUnderlyingStreams) SetUnderlyingSpecialDividendsIndicator(v bool) {
	m.Set(field.NewUnderlyingSpecialDividendsIndicator(v))
}

// SetUnderlyingMaterialDividendsIndicator sets UnderlyingMaterialDividendsIndicator, Tag 42842.
func (m NoUnderlyingStreams) SetUnderlyingMaterialDividendsIndicator(v bool) {
	m.Set(field.NewUnderlyingMaterialDividendsIndicator(v))
}

// SetUnderlyingOptionsExchangeDividendsIndicator sets UnderlyingOptionsExchangeDividendsIndicator, Tag 42843.
func (m NoUnderlyingStreams) SetUnderlyingOptionsExchangeDividendsIndicator(v bool) {
	m.Set(field.NewUnderlyingOptionsExchangeDividendsIndicator(v))
}

// SetUnderlyingAdditionalDividendsIndicator sets UnderlyingAdditionalDividendsIndicator, Tag 42844.
func (m NoUnderlyingStreams) SetUnderlyingAdditionalDividendsIndicator(v bool) {
	m.Set(field.NewUnderlyingAdditionalDividendsIndicator(v))
}

// SetUnderlyingAllDividendsIndicator sets UnderlyingAllDividendsIndicator, Tag 42845.
func (m NoUnderlyingStreams) SetUnderlyingAllDividendsIndicator(v bool) {
	m.Set(field.NewUnderlyingAllDividendsIndicator(v))
}

// SetUnderlyingReturnRateNotionalReset sets UnderlyingReturnRateNotionalReset, Tag 42963.
func (m NoUnderlyingStreams) SetUnderlyingReturnRateNotionalReset(v bool) {
	m.Set(field.NewUnderlyingReturnRateNotionalReset(v))
}

// SetNoUnderlyingReturnRates sets NoUnderlyingReturnRates, Tag 43034.
func (m NoUnderlyingStreams) SetNoUnderlyingReturnRates(f NoUnderlyingReturnRatesRepeatingGroup) {
	m.SetGroup(f)
}

// SetUnderlyingPaymentStreamLinkInitialLevel sets UnderlyingPaymentStreamLinkInitialLevel, Tag 42964.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamLinkInitialLevel(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingPaymentStreamLinkInitialLevel(value, scale))
}

// SetUnderlyingPaymentStreamLinkClosingLevelIndicator sets UnderlyingPaymentStreamLinkClosingLevelIndicator, Tag 42965.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamLinkClosingLevelIndicator(v bool) {
	m.Set(field.NewUnderlyingPaymentStreamLinkClosingLevelIndicator(v))
}

// SetUnderlyingPaymentStreamLinkExpiringLevelIndicator sets UnderlyingPaymentStreamLinkExpiringLevelIndicator, Tag 42966.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamLinkExpiringLevelIndicator(v bool) {
	m.Set(field.NewUnderlyingPaymentStreamLinkExpiringLevelIndicator(v))
}

// SetUnderlyingPaymentStreamLinkEstimatedTradingDays sets UnderlyingPaymentStreamLinkEstimatedTradingDays, Tag 42967.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamLinkEstimatedTradingDays(v int) {
	m.Set(field.NewUnderlyingPaymentStreamLinkEstimatedTradingDays(v))
}

// SetUnderlyingPaymentStreamLinkStrikePrice sets UnderlyingPaymentStreamLinkStrikePrice, Tag 42968.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamLinkStrikePrice(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingPaymentStreamLinkStrikePrice(value, scale))
}

// SetUnderlyingPaymentStreamLinkStrikePriceType sets UnderlyingPaymentStreamLinkStrikePriceType, Tag 42969.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamLinkStrikePriceType(v int) {
	m.Set(field.NewUnderlyingPaymentStreamLinkStrikePriceType(v))
}

// SetUnderlyingPaymentStreamLinkMaximumBoundary sets UnderlyingPaymentStreamLinkMaximumBoundary, Tag 42970.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamLinkMaximumBoundary(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingPaymentStreamLinkMaximumBoundary(value, scale))
}

// SetUnderlyingPaymentStreamLinkMinimumBoundary sets UnderlyingPaymentStreamLinkMinimumBoundary, Tag 42971.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamLinkMinimumBoundary(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingPaymentStreamLinkMinimumBoundary(value, scale))
}

// SetUnderlyingPaymentStreamLinkNumberOfDataSeries sets UnderlyingPaymentStreamLinkNumberOfDataSeries, Tag 42972.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamLinkNumberOfDataSeries(v int) {
	m.Set(field.NewUnderlyingPaymentStreamLinkNumberOfDataSeries(v))
}

// SetUnderlyingPaymentStreamVarianceUnadjustedCap sets UnderlyingPaymentStreamVarianceUnadjustedCap, Tag 42973.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamVarianceUnadjustedCap(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingPaymentStreamVarianceUnadjustedCap(value, scale))
}

// SetUnderlyingPaymentStreamRealizedVarianceMethod sets UnderlyingPaymentStreamRealizedVarianceMethod, Tag 42974.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamRealizedVarianceMethod(v int) {
	m.Set(field.NewUnderlyingPaymentStreamRealizedVarianceMethod(v))
}

// SetUnderlyingPaymentStreamDaysAdjustmentIndicator sets UnderlyingPaymentStreamDaysAdjustmentIndicator, Tag 42975.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamDaysAdjustmentIndicator(v bool) {
	m.Set(field.NewUnderlyingPaymentStreamDaysAdjustmentIndicator(v))
}

// SetUnderlyingPaymentStreamNearestExchangeContractRefID sets UnderlyingPaymentStreamNearestExchangeContractRefID, Tag 42976.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamNearestExchangeContractRefID(v string) {
	m.Set(field.NewUnderlyingPaymentStreamNearestExchangeContractRefID(v))
}

// SetUnderlyingPaymentStreamVegaNotionalAmount sets UnderlyingPaymentStreamVegaNotionalAmount, Tag 42977.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamVegaNotionalAmount(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingPaymentStreamVegaNotionalAmount(value, scale))
}

// SetUnderlyingPaymentStreamRateIndexID sets UnderlyingPaymentStreamRateIndexID, Tag 43092.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamRateIndexID(v string) {
	m.Set(field.NewUnderlyingPaymentStreamRateIndexID(v))
}

// SetUnderlyingPaymentStreamRateIndexIDSource sets UnderlyingPaymentStreamRateIndexIDSource, Tag 43093.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamRateIndexIDSource(v string) {
	m.Set(field.NewUnderlyingPaymentStreamRateIndexIDSource(v))
}

// SetUnderlyingPaymentStreamNonDeliverableRefCurrency sets UnderlyingPaymentStreamNonDeliverableRefCurrency, Tag 40648.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamNonDeliverableRefCurrency(v string) {
	m.Set(field.NewUnderlyingPaymentStreamNonDeliverableRefCurrency(v))
}

// SetUnderlyingPaymentStreamNonDeliverableFixingDatesBusinessDayConvention sets UnderlyingPaymentStreamNonDeliverableFixingDatesBusinessDayConvention, Tag 40649.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamNonDeliverableFixingDatesBusinessDayConvention(v int) {
	m.Set(field.NewUnderlyingPaymentStreamNonDeliverableFixingDatesBusinessDayConvention(v))
}

// SetNoUnderlyingPaymentStreamNonDeliverableFixingDatesBusinessCenters sets NoUnderlyingPaymentStreamNonDeliverableFixingDatesBusinessCenters, Tag 40968.
func (m NoUnderlyingStreams) SetNoUnderlyingPaymentStreamNonDeliverableFixingDatesBusinessCenters(f NoUnderlyingPaymentStreamNonDeliverableFixingDatesBusinessCentersRepeatingGroup) {
	m.SetGroup(f)
}

// SetUnderlyingPaymentStreamNonDeliverableFixingDatesRelativeTo sets UnderlyingPaymentStreamNonDeliverableFixingDatesRelativeTo, Tag 40651.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamNonDeliverableFixingDatesRelativeTo(v int) {
	m.Set(field.NewUnderlyingPaymentStreamNonDeliverableFixingDatesRelativeTo(v))
}

// SetUnderlyingPaymentStreamNonDeliverableFixingDatesOffsetPeriod sets UnderlyingPaymentStreamNonDeliverableFixingDatesOffsetPeriod, Tag 40652.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamNonDeliverableFixingDatesOffsetPeriod(v int) {
	m.Set(field.NewUnderlyingPaymentStreamNonDeliverableFixingDatesOffsetPeriod(v))
}

// SetUnderlyingPaymentStreamNonDeliverableFixingDatesOffsetUnit sets UnderlyingPaymentStreamNonDeliverableFixingDatesOffsetUnit, Tag 40653.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamNonDeliverableFixingDatesOffsetUnit(v string) {
	m.Set(field.NewUnderlyingPaymentStreamNonDeliverableFixingDatesOffsetUnit(v))
}

// SetUnderlyingPaymentStreamNonDeliverableFixingDatesOffsetDayType sets UnderlyingPaymentStreamNonDeliverableFixingDatesOffsetDayType, Tag 40654.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamNonDeliverableFixingDatesOffsetDayType(v int) {
	m.Set(field.NewUnderlyingPaymentStreamNonDeliverableFixingDatesOffsetDayType(v))
}

// SetUnderlyingPaymentStreamNonDeliverableSettlRateSource sets UnderlyingPaymentStreamNonDeliverableSettlRateSource, Tag 40661.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamNonDeliverableSettlRateSource(v int) {
	m.Set(field.NewUnderlyingPaymentStreamNonDeliverableSettlRateSource(v))
}

// SetUnderlyingPaymentStreamNonDeliverableSettlReferencePage sets UnderlyingPaymentStreamNonDeliverableSettlReferencePage, Tag 40824.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamNonDeliverableSettlReferencePage(v string) {
	m.Set(field.NewUnderlyingPaymentStreamNonDeliverableSettlReferencePage(v))
}

// SetNoUnderlyingNonDeliverableFixingDates sets NoUnderlyingNonDeliverableFixingDates, Tag 40656.
func (m NoUnderlyingStreams) SetNoUnderlyingNonDeliverableFixingDates(f NoUnderlyingNonDeliverableFixingDatesRepeatingGroup) {
	m.SetGroup(f)
}

// SetNoUnderlyingSettlRateFallbacks sets NoUnderlyingSettlRateFallbacks, Tag 40659.
func (m NoUnderlyingStreams) SetNoUnderlyingSettlRateFallbacks(f NoUnderlyingSettlRateFallbacksRepeatingGroup) {
	m.SetGroup(f)
}

// SetUnderlyingPaymentStreamFlatRateIndicator sets UnderlyingPaymentStreamFlatRateIndicator, Tag 41897.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamFlatRateIndicator(v bool) {
	m.Set(field.NewUnderlyingPaymentStreamFlatRateIndicator(v))
}

// SetUnderlyingPaymentStreamFlatRateAmount sets UnderlyingPaymentStreamFlatRateAmount, Tag 41898.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamFlatRateAmount(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingPaymentStreamFlatRateAmount(value, scale))
}

// SetUnderlyingPaymentStreamFlatRateCurrency sets UnderlyingPaymentStreamFlatRateCurrency, Tag 41899.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamFlatRateCurrency(v string) {
	m.Set(field.NewUnderlyingPaymentStreamFlatRateCurrency(v))
}

// SetUnderlyingPaymentStreamMaximumPaymentAmount sets UnderlyingPaymentStreamMaximumPaymentAmount, Tag 41900.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamMaximumPaymentAmount(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingPaymentStreamMaximumPaymentAmount(value, scale))
}

// SetUnderlyingPaymentStreamMaximumPaymentCurrency sets UnderlyingPaymentStreamMaximumPaymentCurrency, Tag 41901.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamMaximumPaymentCurrency(v string) {
	m.Set(field.NewUnderlyingPaymentStreamMaximumPaymentCurrency(v))
}

// SetUnderlyingPaymentStreamMaximumTransactionAmount sets UnderlyingPaymentStreamMaximumTransactionAmount, Tag 41902.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamMaximumTransactionAmount(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingPaymentStreamMaximumTransactionAmount(value, scale))
}

// SetUnderlyingPaymentStreamMaximumTransactionCurrency sets UnderlyingPaymentStreamMaximumTransactionCurrency, Tag 41903.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamMaximumTransactionCurrency(v string) {
	m.Set(field.NewUnderlyingPaymentStreamMaximumTransactionCurrency(v))
}

// SetUnderlyingPaymentStreamCashSettlIndicator sets UnderlyingPaymentStreamCashSettlIndicator, Tag 42895.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamCashSettlIndicator(v bool) {
	m.Set(field.NewUnderlyingPaymentStreamCashSettlIndicator(v))
}

// SetUnderlyingPaymentStreamCompoundingXIDRef sets UnderlyingPaymentStreamCompoundingXIDRef, Tag 42896.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamCompoundingXIDRef(v string) {
	m.Set(field.NewUnderlyingPaymentStreamCompoundingXIDRef(v))
}

// SetUnderlyingPaymentStreamCompoundingSpread sets UnderlyingPaymentStreamCompoundingSpread, Tag 42897.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamCompoundingSpread(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingPaymentStreamCompoundingSpread(value, scale))
}

// SetUnderlyingPaymentStreamInterpolationMethod sets UnderlyingPaymentStreamInterpolationMethod, Tag 42898.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamInterpolationMethod(v int) {
	m.Set(field.NewUnderlyingPaymentStreamInterpolationMethod(v))
}

// SetUnderlyingPaymentStreamInterpolationPeriod sets UnderlyingPaymentStreamInterpolationPeriod, Tag 42899.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamInterpolationPeriod(v int) {
	m.Set(field.NewUnderlyingPaymentStreamInterpolationPeriod(v))
}

// SetUnderlyingPaymentStreamCompoundingFixedRate sets UnderlyingPaymentStreamCompoundingFixedRate, Tag 42900.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamCompoundingFixedRate(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingPaymentStreamCompoundingFixedRate(value, scale))
}

// SetUnderlyingPaymentStreamCompoundingRateIndex sets UnderlyingPaymentStreamCompoundingRateIndex, Tag 42923.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamCompoundingRateIndex(v string) {
	m.Set(field.NewUnderlyingPaymentStreamCompoundingRateIndex(v))
}

// SetUnderlyingPaymentStreamCompoundingRateIndexCurvePeriod sets UnderlyingPaymentStreamCompoundingRateIndexCurvePeriod, Tag 42924.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamCompoundingRateIndexCurvePeriod(v int) {
	m.Set(field.NewUnderlyingPaymentStreamCompoundingRateIndexCurvePeriod(v))
}

// SetUnderlyingPaymentStreamCompoundingRateIndexCurveUnit sets UnderlyingPaymentStreamCompoundingRateIndexCurveUnit, Tag 42925.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamCompoundingRateIndexCurveUnit(v string) {
	m.Set(field.NewUnderlyingPaymentStreamCompoundingRateIndexCurveUnit(v))
}

// SetUnderlyingPaymentStreamCompoundingRateMultiplier sets UnderlyingPaymentStreamCompoundingRateMultiplier, Tag 42926.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamCompoundingRateMultiplier(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingPaymentStreamCompoundingRateMultiplier(value, scale))
}

// SetUnderlyingPaymentStreamCompoundingRateSpread sets UnderlyingPaymentStreamCompoundingRateSpread, Tag 42927.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamCompoundingRateSpread(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingPaymentStreamCompoundingRateSpread(value, scale))
}

// SetUnderlyingPaymentStreamCompoundingRateSpreadPositionType sets UnderlyingPaymentStreamCompoundingRateSpreadPositionType, Tag 42928.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamCompoundingRateSpreadPositionType(v int) {
	m.Set(field.NewUnderlyingPaymentStreamCompoundingRateSpreadPositionType(v))
}

// SetUnderlyingPaymentStreamCompoundingRateTreatment sets UnderlyingPaymentStreamCompoundingRateTreatment, Tag 42929.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamCompoundingRateTreatment(v int) {
	m.Set(field.NewUnderlyingPaymentStreamCompoundingRateTreatment(v))
}

// SetUnderlyingPaymentStreamCompoundingCapRate sets UnderlyingPaymentStreamCompoundingCapRate, Tag 42930.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamCompoundingCapRate(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingPaymentStreamCompoundingCapRate(value, scale))
}

// SetUnderlyingPaymentStreamCompoundingCapRateBuySide sets UnderlyingPaymentStreamCompoundingCapRateBuySide, Tag 42931.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamCompoundingCapRateBuySide(v int) {
	m.Set(field.NewUnderlyingPaymentStreamCompoundingCapRateBuySide(v))
}

// SetUnderlyingPaymentStreamCompoundingCapRateSellSide sets UnderlyingPaymentStreamCompoundingCapRateSellSide, Tag 42932.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamCompoundingCapRateSellSide(v int) {
	m.Set(field.NewUnderlyingPaymentStreamCompoundingCapRateSellSide(v))
}

// SetUnderlyingPaymentStreamCompoundingFloorRate sets UnderlyingPaymentStreamCompoundingFloorRate, Tag 42933.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamCompoundingFloorRate(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingPaymentStreamCompoundingFloorRate(value, scale))
}

// SetUnderlyingPaymentStreamCompoundingFloorRateBuySide sets UnderlyingPaymentStreamCompoundingFloorRateBuySide, Tag 42934.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamCompoundingFloorRateBuySide(v int) {
	m.Set(field.NewUnderlyingPaymentStreamCompoundingFloorRateBuySide(v))
}

// SetUnderlyingPaymentStreamCompoundingFloorRateSellSide sets UnderlyingPaymentStreamCompoundingFloorRateSellSide, Tag 42935.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamCompoundingFloorRateSellSide(v int) {
	m.Set(field.NewUnderlyingPaymentStreamCompoundingFloorRateSellSide(v))
}

// SetUnderlyingPaymentStreamCompoundingInitialRate sets UnderlyingPaymentStreamCompoundingInitialRate, Tag 42936.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamCompoundingInitialRate(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingPaymentStreamCompoundingInitialRate(value, scale))
}

// SetUnderlyingPaymentStreamCompoundingFinalRateRoundingDirection sets UnderlyingPaymentStreamCompoundingFinalRateRoundingDirection, Tag 42937.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamCompoundingFinalRateRoundingDirection(v string) {
	m.Set(field.NewUnderlyingPaymentStreamCompoundingFinalRateRoundingDirection(v))
}

// SetUnderlyingPaymentStreamCompoundingFinalRatePrecision sets UnderlyingPaymentStreamCompoundingFinalRatePrecision, Tag 42938.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamCompoundingFinalRatePrecision(v int) {
	m.Set(field.NewUnderlyingPaymentStreamCompoundingFinalRatePrecision(v))
}

// SetUnderlyingPaymentStreamCompoundingAveragingMethod sets UnderlyingPaymentStreamCompoundingAveragingMethod, Tag 42939.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamCompoundingAveragingMethod(v int) {
	m.Set(field.NewUnderlyingPaymentStreamCompoundingAveragingMethod(v))
}

// SetUnderlyingPaymentStreamCompoundingNegativeRateTreatment sets UnderlyingPaymentStreamCompoundingNegativeRateTreatment, Tag 42940.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamCompoundingNegativeRateTreatment(v int) {
	m.Set(field.NewUnderlyingPaymentStreamCompoundingNegativeRateTreatment(v))
}

// SetUnderlyingPaymentStreamCompoundingDatesBusinessDayConvention sets UnderlyingPaymentStreamCompoundingDatesBusinessDayConvention, Tag 42904.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamCompoundingDatesBusinessDayConvention(v int) {
	m.Set(field.NewUnderlyingPaymentStreamCompoundingDatesBusinessDayConvention(v))
}

// SetNoUnderlyingPaymentStreamCompoundingDatesBusinessCenters sets NoUnderlyingPaymentStreamCompoundingDatesBusinessCenters, Tag 42915.
func (m NoUnderlyingStreams) SetNoUnderlyingPaymentStreamCompoundingDatesBusinessCenters(f NoUnderlyingPaymentStreamCompoundingDatesBusinessCentersRepeatingGroup) {
	m.SetGroup(f)
}

// SetNoUnderlyingPaymentStreamCompoundingDates sets NoUnderlyingPaymentStreamCompoundingDates, Tag 42901.
func (m NoUnderlyingStreams) SetNoUnderlyingPaymentStreamCompoundingDates(f NoUnderlyingPaymentStreamCompoundingDatesRepeatingGroup) {
	m.SetGroup(f)
}

// SetUnderlyingPaymentStreamCompoundingDatesRelativeTo sets UnderlyingPaymentStreamCompoundingDatesRelativeTo, Tag 42905.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamCompoundingDatesRelativeTo(v int) {
	m.Set(field.NewUnderlyingPaymentStreamCompoundingDatesRelativeTo(v))
}

// SetUnderlyingPaymentStreamCompoundingDatesOffsetPeriod sets UnderlyingPaymentStreamCompoundingDatesOffsetPeriod, Tag 42906.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamCompoundingDatesOffsetPeriod(v int) {
	m.Set(field.NewUnderlyingPaymentStreamCompoundingDatesOffsetPeriod(v))
}

// SetUnderlyingPaymentStreamCompoundingDatesOffsetUnit sets UnderlyingPaymentStreamCompoundingDatesOffsetUnit, Tag 42907.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamCompoundingDatesOffsetUnit(v string) {
	m.Set(field.NewUnderlyingPaymentStreamCompoundingDatesOffsetUnit(v))
}

// SetUnderlyingPaymentStreamCompoundingDatesOffsetDayType sets UnderlyingPaymentStreamCompoundingDatesOffsetDayType, Tag 42908.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamCompoundingDatesOffsetDayType(v int) {
	m.Set(field.NewUnderlyingPaymentStreamCompoundingDatesOffsetDayType(v))
}

// SetUnderlyingPaymentStreamCompoundingPeriodSkip sets UnderlyingPaymentStreamCompoundingPeriodSkip, Tag 42909.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamCompoundingPeriodSkip(v int) {
	m.Set(field.NewUnderlyingPaymentStreamCompoundingPeriodSkip(v))
}

// SetUnderlyingPaymentStreamCompoundingStartDateUnadjusted sets UnderlyingPaymentStreamCompoundingStartDateUnadjusted, Tag 42941.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamCompoundingStartDateUnadjusted(v string) {
	m.Set(field.NewUnderlyingPaymentStreamCompoundingStartDateUnadjusted(v))
}

// SetUnderlyingPaymentStreamCompoundingStartDateRelativeTo sets UnderlyingPaymentStreamCompoundingStartDateRelativeTo, Tag 42942.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamCompoundingStartDateRelativeTo(v int) {
	m.Set(field.NewUnderlyingPaymentStreamCompoundingStartDateRelativeTo(v))
}

// SetUnderlyingPaymentStreamCompoundingStartDateOffsetPeriod sets UnderlyingPaymentStreamCompoundingStartDateOffsetPeriod, Tag 42943.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamCompoundingStartDateOffsetPeriod(v int) {
	m.Set(field.NewUnderlyingPaymentStreamCompoundingStartDateOffsetPeriod(v))
}

// SetUnderlyingPaymentStreamCompoundingStartDateOffsetUnit sets UnderlyingPaymentStreamCompoundingStartDateOffsetUnit, Tag 42944.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamCompoundingStartDateOffsetUnit(v string) {
	m.Set(field.NewUnderlyingPaymentStreamCompoundingStartDateOffsetUnit(v))
}

// SetUnderlyingPaymentStreamCompoundingStartDateOffsetDayType sets UnderlyingPaymentStreamCompoundingStartDateOffsetDayType, Tag 42945.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamCompoundingStartDateOffsetDayType(v int) {
	m.Set(field.NewUnderlyingPaymentStreamCompoundingStartDateOffsetDayType(v))
}

// SetUnderlyingPaymentStreamCompoundingStartDateAdjusted sets UnderlyingPaymentStreamCompoundingStartDateAdjusted, Tag 42946.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamCompoundingStartDateAdjusted(v string) {
	m.Set(field.NewUnderlyingPaymentStreamCompoundingStartDateAdjusted(v))
}

// SetUnderlyingPaymentStreamCompoundingEndDateUnadjusted sets UnderlyingPaymentStreamCompoundingEndDateUnadjusted, Tag 42917.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamCompoundingEndDateUnadjusted(v string) {
	m.Set(field.NewUnderlyingPaymentStreamCompoundingEndDateUnadjusted(v))
}

// SetUnderlyingPaymentStreamCompoundingEndDateRelativeTo sets UnderlyingPaymentStreamCompoundingEndDateRelativeTo, Tag 42918.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamCompoundingEndDateRelativeTo(v int) {
	m.Set(field.NewUnderlyingPaymentStreamCompoundingEndDateRelativeTo(v))
}

// SetUnderlyingPaymentStreamCompoundingEndDateOffsetPeriod sets UnderlyingPaymentStreamCompoundingEndDateOffsetPeriod, Tag 42919.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamCompoundingEndDateOffsetPeriod(v int) {
	m.Set(field.NewUnderlyingPaymentStreamCompoundingEndDateOffsetPeriod(v))
}

// SetUnderlyingPaymentStreamCompoundingEndDateOffsetUnit sets UnderlyingPaymentStreamCompoundingEndDateOffsetUnit, Tag 42920.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamCompoundingEndDateOffsetUnit(v string) {
	m.Set(field.NewUnderlyingPaymentStreamCompoundingEndDateOffsetUnit(v))
}

// SetUnderlyingPaymentStreamCompoundingEndDateOffsetDayType sets UnderlyingPaymentStreamCompoundingEndDateOffsetDayType, Tag 42921.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamCompoundingEndDateOffsetDayType(v int) {
	m.Set(field.NewUnderlyingPaymentStreamCompoundingEndDateOffsetDayType(v))
}

// SetUnderlyingPaymentStreamCompoundingEndDateAdjusted sets UnderlyingPaymentStreamCompoundingEndDateAdjusted, Tag 42922.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamCompoundingEndDateAdjusted(v string) {
	m.Set(field.NewUnderlyingPaymentStreamCompoundingEndDateAdjusted(v))
}

// SetUnderlyingPaymentStreamCompoundingFrequencyPeriod sets UnderlyingPaymentStreamCompoundingFrequencyPeriod, Tag 42910.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamCompoundingFrequencyPeriod(v int) {
	m.Set(field.NewUnderlyingPaymentStreamCompoundingFrequencyPeriod(v))
}

// SetUnderlyingPaymentStreamCompoundingFrequencyUnit sets UnderlyingPaymentStreamCompoundingFrequencyUnit, Tag 42911.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamCompoundingFrequencyUnit(v string) {
	m.Set(field.NewUnderlyingPaymentStreamCompoundingFrequencyUnit(v))
}

// SetUnderlyingPaymentStreamCompoundingRollConvention sets UnderlyingPaymentStreamCompoundingRollConvention, Tag 42912.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamCompoundingRollConvention(v string) {
	m.Set(field.NewUnderlyingPaymentStreamCompoundingRollConvention(v))
}

// SetUnderlyingPaymentStreamBoundsFirstDateUnadjusted sets UnderlyingPaymentStreamBoundsFirstDateUnadjusted, Tag 42913.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamBoundsFirstDateUnadjusted(v string) {
	m.Set(field.NewUnderlyingPaymentStreamBoundsFirstDateUnadjusted(v))
}

// SetUnderlyingPaymentStreamBoundsLastDateUnadjusted sets UnderlyingPaymentStreamBoundsLastDateUnadjusted, Tag 42914.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamBoundsLastDateUnadjusted(v string) {
	m.Set(field.NewUnderlyingPaymentStreamBoundsLastDateUnadjusted(v))
}

// SetUnderlyingPaymentStreamOtherDayCount sets UnderlyingPaymentStreamOtherDayCount, Tag 43107.
func (m NoUnderlyingStreams) SetUnderlyingPaymentStreamOtherDayCount(v string) {
	m.Set(field.NewUnderlyingPaymentStreamOtherDayCount(v))
}

// SetNoUnderlyingPaymentSchedules sets NoUnderlyingPaymentSchedules, Tag 40664.
func (m NoUnderlyingStreams) SetNoUnderlyingPaymentSchedules(f NoUnderlyingPaymentSchedulesRepeatingGroup) {
	m.SetGroup(f)
}

// SetNoUnderlyingPaymentStubs sets NoUnderlyingPaymentStubs, Tag 40708.
func (m NoUnderlyingStreams) SetNoUnderlyingPaymentStubs(f NoUnderlyingPaymentStubsRepeatingGroup) {
	m.SetGroup(f)
}

// SetUnderlyingStreamText sets UnderlyingStreamText, Tag 40547.
func (m NoUnderlyingStreams) SetUnderlyingStreamText(v string) {
	m.Set(field.NewUnderlyingStreamText(v))
}

// SetEncodedUnderlyingStreamTextLen sets EncodedUnderlyingStreamTextLen, Tag 40988.
func (m NoUnderlyingStreams) SetEncodedUnderlyingStreamTextLen(v int) {
	m.Set(field.NewEncodedUnderlyingStreamTextLen(v))
}

// SetEncodedUnderlyingStreamText sets EncodedUnderlyingStreamText, Tag 40989.
func (m NoUnderlyingStreams) SetEncodedUnderlyingStreamText(v string) {
	m.Set(field.NewEncodedUnderlyingStreamText(v))
}

// SetUnderlyingStreamXID sets UnderlyingStreamXID, Tag 42016.
func (m NoUnderlyingStreams) SetUnderlyingStreamXID(v string) {
	m.Set(field.NewUnderlyingStreamXID(v))
}

// SetUnderlyingStreamNotionalXIDRef sets UnderlyingStreamNotionalXIDRef, Tag 42018.
func (m NoUnderlyingStreams) SetUnderlyingStreamNotionalXIDRef(v string) {
	m.Set(field.NewUnderlyingStreamNotionalXIDRef(v))
}

// SetUnderlyingStreamNotionalFrequencyPeriod sets UnderlyingStreamNotionalFrequencyPeriod, Tag 42019.
func (m NoUnderlyingStreams) SetUnderlyingStreamNotionalFrequencyPeriod(v int) {
	m.Set(field.NewUnderlyingStreamNotionalFrequencyPeriod(v))
}

// SetUnderlyingStreamNotionalFrequencyUnit sets UnderlyingStreamNotionalFrequencyUnit, Tag 42020.
func (m NoUnderlyingStreams) SetUnderlyingStreamNotionalFrequencyUnit(v string) {
	m.Set(field.NewUnderlyingStreamNotionalFrequencyUnit(v))
}

// SetUnderlyingStreamNotionalCommodityFrequency sets UnderlyingStreamNotionalCommodityFrequency, Tag 42021.
func (m NoUnderlyingStreams) SetUnderlyingStreamNotionalCommodityFrequency(v int) {
	m.Set(field.NewUnderlyingStreamNotionalCommodityFrequency(v))
}

// SetUnderlyingStreamNotionalUnitOfMeasure sets UnderlyingStreamNotionalUnitOfMeasure, Tag 42022.
func (m NoUnderlyingStreams) SetUnderlyingStreamNotionalUnitOfMeasure(v string) {
	m.Set(field.NewUnderlyingStreamNotionalUnitOfMeasure(v))
}

// SetUnderlyingStreamTotalNotional sets UnderlyingStreamTotalNotional, Tag 42023.
func (m NoUnderlyingStreams) SetUnderlyingStreamTotalNotional(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingStreamTotalNotional(value, scale))
}

// SetUnderlyingStreamTotalNotionalUnitOfMeasure sets UnderlyingStreamTotalNotionalUnitOfMeasure, Tag 42024.
func (m NoUnderlyingStreams) SetUnderlyingStreamTotalNotionalUnitOfMeasure(v string) {
	m.Set(field.NewUnderlyingStreamTotalNotionalUnitOfMeasure(v))
}

// SetUnderlyingStreamCommodityBase sets UnderlyingStreamCommodityBase, Tag 41964.
func (m NoUnderlyingStreams) SetUnderlyingStreamCommodityBase(v string) {
	m.Set(field.NewUnderlyingStreamCommodityBase(v))
}

// SetUnderlyingStreamCommodityType sets UnderlyingStreamCommodityType, Tag 41965.
func (m NoUnderlyingStreams) SetUnderlyingStreamCommodityType(v string) {
	m.Set(field.NewUnderlyingStreamCommodityType(v))
}

// SetUnderlyingStreamCommoditySecurityID sets UnderlyingStreamCommoditySecurityID, Tag 41966.
func (m NoUnderlyingStreams) SetUnderlyingStreamCommoditySecurityID(v string) {
	m.Set(field.NewUnderlyingStreamCommoditySecurityID(v))
}

// SetUnderlyingStreamCommoditySecurityIDSource sets UnderlyingStreamCommoditySecurityIDSource, Tag 41967.
func (m NoUnderlyingStreams) SetUnderlyingStreamCommoditySecurityIDSource(v string) {
	m.Set(field.NewUnderlyingStreamCommoditySecurityIDSource(v))
}

// SetNoUnderlyingStreamCommodityAltIDs sets NoUnderlyingStreamCommodityAltIDs, Tag 41990.
func (m NoUnderlyingStreams) SetNoUnderlyingStreamCommodityAltIDs(f NoUnderlyingStreamCommodityAltIDsRepeatingGroup) {
	m.SetGroup(f)
}

// SetUnderlyingStreamCommodityDesc sets UnderlyingStreamCommodityDesc, Tag 41968.
func (m NoUnderlyingStreams) SetUnderlyingStreamCommodityDesc(v string) {
	m.Set(field.NewUnderlyingStreamCommodityDesc(v))
}

// SetEncodedUnderlyingStreamCommodityDescLen sets EncodedUnderlyingStreamCommodityDescLen, Tag 41969.
func (m NoUnderlyingStreams) SetEncodedUnderlyingStreamCommodityDescLen(v int) {
	m.Set(field.NewEncodedUnderlyingStreamCommodityDescLen(v))
}

// SetEncodedUnderlyingStreamCommodityDesc sets EncodedUnderlyingStreamCommodityDesc, Tag 41970.
func (m NoUnderlyingStreams) SetEncodedUnderlyingStreamCommodityDesc(v string) {
	m.Set(field.NewEncodedUnderlyingStreamCommodityDesc(v))
}

// SetNoUnderlyingStreamAssetAttributes sets NoUnderlyingStreamAssetAttributes, Tag 41800.
func (m NoUnderlyingStreams) SetNoUnderlyingStreamAssetAttributes(f NoUnderlyingStreamAssetAttributesRepeatingGroup) {
	m.SetGroup(f)
}

// SetUnderlyingStreamCommodityUnitOfMeasure sets UnderlyingStreamCommodityUnitOfMeasure, Tag 41971.
func (m NoUnderlyingStreams) SetUnderlyingStreamCommodityUnitOfMeasure(v string) {
	m.Set(field.NewUnderlyingStreamCommodityUnitOfMeasure(v))
}

// SetUnderlyingStreamCommodityCurrency sets UnderlyingStreamCommodityCurrency, Tag 41972.
func (m NoUnderlyingStreams) SetUnderlyingStreamCommodityCurrency(v string) {
	m.Set(field.NewUnderlyingStreamCommodityCurrency(v))
}

// SetUnderlyingStreamCommodityExchange sets UnderlyingStreamCommodityExchange, Tag 41973.
func (m NoUnderlyingStreams) SetUnderlyingStreamCommodityExchange(v string) {
	m.Set(field.NewUnderlyingStreamCommodityExchange(v))
}

// SetUnderlyingStreamCommodityRateSource sets UnderlyingStreamCommodityRateSource, Tag 41974.
func (m NoUnderlyingStreams) SetUnderlyingStreamCommodityRateSource(v int) {
	m.Set(field.NewUnderlyingStreamCommodityRateSource(v))
}

// SetUnderlyingStreamCommodityRateReferencePage sets UnderlyingStreamCommodityRateReferencePage, Tag 41975.
func (m NoUnderlyingStreams) SetUnderlyingStreamCommodityRateReferencePage(v string) {
	m.Set(field.NewUnderlyingStreamCommodityRateReferencePage(v))
}

// SetUnderlyingStreamCommodityRateReferencePageHeading sets UnderlyingStreamCommodityRateReferencePageHeading, Tag 41976.
func (m NoUnderlyingStreams) SetUnderlyingStreamCommodityRateReferencePageHeading(v string) {
	m.Set(field.NewUnderlyingStreamCommodityRateReferencePageHeading(v))
}

// SetUnderlyingStreamDataProvider sets UnderlyingStreamDataProvider, Tag 41977.
func (m NoUnderlyingStreams) SetUnderlyingStreamDataProvider(v string) {
	m.Set(field.NewUnderlyingStreamDataProvider(v))
}

// SetNoUnderlyingStreamCommodityDataSources sets NoUnderlyingStreamCommodityDataSources, Tag 41993.
func (m NoUnderlyingStreams) SetNoUnderlyingStreamCommodityDataSources(f NoUnderlyingStreamCommodityDataSourcesRepeatingGroup) {
	m.SetGroup(f)
}

// SetUnderlyingStreamCommodityPricingType sets UnderlyingStreamCommodityPricingType, Tag 41978.
func (m NoUnderlyingStreams) SetUnderlyingStreamCommodityPricingType(v string) {
	m.Set(field.NewUnderlyingStreamCommodityPricingType(v))
}

// SetUnderlyingStreamCommodityNearbySettlDayPeriod sets UnderlyingStreamCommodityNearbySettlDayPeriod, Tag 41979.
func (m NoUnderlyingStreams) SetUnderlyingStreamCommodityNearbySettlDayPeriod(v int) {
	m.Set(field.NewUnderlyingStreamCommodityNearbySettlDayPeriod(v))
}

// SetUnderlyingStreamCommodityNearbySettlDayUnit sets UnderlyingStreamCommodityNearbySettlDayUnit, Tag 41980.
func (m NoUnderlyingStreams) SetUnderlyingStreamCommodityNearbySettlDayUnit(v string) {
	m.Set(field.NewUnderlyingStreamCommodityNearbySettlDayUnit(v))
}

// SetUnderlyingStreamCommoditySettlDateUnadjusted sets UnderlyingStreamCommoditySettlDateUnadjusted, Tag 41981.
func (m NoUnderlyingStreams) SetUnderlyingStreamCommoditySettlDateUnadjusted(v string) {
	m.Set(field.NewUnderlyingStreamCommoditySettlDateUnadjusted(v))
}

// SetUnderlyingStreamCommoditySettlDateBusinessDayConvention sets UnderlyingStreamCommoditySettlDateBusinessDayConvention, Tag 41982.
func (m NoUnderlyingStreams) SetUnderlyingStreamCommoditySettlDateBusinessDayConvention(v int) {
	m.Set(field.NewUnderlyingStreamCommoditySettlDateBusinessDayConvention(v))
}

// SetNoUnderlyingStreamCommoditySettlBusinessCenters sets NoUnderlyingStreamCommoditySettlBusinessCenters, Tag 41962.
func (m NoUnderlyingStreams) SetNoUnderlyingStreamCommoditySettlBusinessCenters(f NoUnderlyingStreamCommoditySettlBusinessCentersRepeatingGroup) {
	m.SetGroup(f)
}

// SetUnderlyingStreamCommoditySettlDateAdjusted sets UnderlyingStreamCommoditySettlDateAdjusted, Tag 41983.
func (m NoUnderlyingStreams) SetUnderlyingStreamCommoditySettlDateAdjusted(v string) {
	m.Set(field.NewUnderlyingStreamCommoditySettlDateAdjusted(v))
}

// SetUnderlyingStreamCommoditySettlMonth sets UnderlyingStreamCommoditySettlMonth, Tag 41984.
func (m NoUnderlyingStreams) SetUnderlyingStreamCommoditySettlMonth(v int) {
	m.Set(field.NewUnderlyingStreamCommoditySettlMonth(v))
}

// SetUnderlyingStreamCommoditySettlDateRollPeriod sets UnderlyingStreamCommoditySettlDateRollPeriod, Tag 41985.
func (m NoUnderlyingStreams) SetUnderlyingStreamCommoditySettlDateRollPeriod(v int) {
	m.Set(field.NewUnderlyingStreamCommoditySettlDateRollPeriod(v))
}

// SetUnderlyingStreamCommoditySettlDateRollUnit sets UnderlyingStreamCommoditySettlDateRollUnit, Tag 41986.
func (m NoUnderlyingStreams) SetUnderlyingStreamCommoditySettlDateRollUnit(v string) {
	m.Set(field.NewUnderlyingStreamCommoditySettlDateRollUnit(v))
}

// SetUnderlyingStreamCommoditySettlDayType sets UnderlyingStreamCommoditySettlDayType, Tag 41987.
func (m NoUnderlyingStreams) SetUnderlyingStreamCommoditySettlDayType(v int) {
	m.Set(field.NewUnderlyingStreamCommoditySettlDayType(v))
}

// SetNoUnderlyingStreamCommoditySettlPeriods sets NoUnderlyingStreamCommoditySettlPeriods, Tag 42002.
func (m NoUnderlyingStreams) SetNoUnderlyingStreamCommoditySettlPeriods(f NoUnderlyingStreamCommoditySettlPeriodsRepeatingGroup) {
	m.SetGroup(f)
}

// SetUnderlyingStreamCommodityXID sets UnderlyingStreamCommodityXID, Tag 41988.
func (m NoUnderlyingStreams) SetUnderlyingStreamCommodityXID(v string) {
	m.Set(field.NewUnderlyingStreamCommodityXID(v))
}

// SetUnderlyingStreamCommodityXIDRef sets UnderlyingStreamCommodityXIDRef, Tag 41989.
func (m NoUnderlyingStreams) SetUnderlyingStreamCommodityXIDRef(v string) {
	m.Set(field.NewUnderlyingStreamCommodityXIDRef(v))
}

// SetUnderlyingStreamCommodityDeliveryPricingRegion sets UnderlyingStreamCommodityDeliveryPricingRegion, Tag 42589.
func (m NoUnderlyingStreams) SetUnderlyingStreamCommodityDeliveryPricingRegion(v string) {
	m.Set(field.NewUnderlyingStreamCommodityDeliveryPricingRegion(v))
}

// SetUnderlyingDeliveryStreamType sets UnderlyingDeliveryStreamType, Tag 41777.
func (m NoUnderlyingStreams) SetUnderlyingDeliveryStreamType(v int) {
	m.Set(field.NewUnderlyingDeliveryStreamType(v))
}

// SetNoUnderlyingDeliveryStreamCommoditySources sets NoUnderlyingDeliveryStreamCommoditySources, Tag 41808.
func (m NoUnderlyingStreams) SetNoUnderlyingDeliveryStreamCommoditySources(f NoUnderlyingDeliveryStreamCommoditySourcesRepeatingGroup) {
	m.SetGroup(f)
}

// SetUnderlyingDeliveryStreamPipeline sets UnderlyingDeliveryStreamPipeline, Tag 41778.
func (m NoUnderlyingStreams) SetUnderlyingDeliveryStreamPipeline(v string) {
	m.Set(field.NewUnderlyingDeliveryStreamPipeline(v))
}

// SetUnderlyingDeliveryStreamEntryPoint sets UnderlyingDeliveryStreamEntryPoint, Tag 41779.
func (m NoUnderlyingStreams) SetUnderlyingDeliveryStreamEntryPoint(v string) {
	m.Set(field.NewUnderlyingDeliveryStreamEntryPoint(v))
}

// SetUnderlyingDeliveryStreamWithdrawalPoint sets UnderlyingDeliveryStreamWithdrawalPoint, Tag 41780.
func (m NoUnderlyingStreams) SetUnderlyingDeliveryStreamWithdrawalPoint(v string) {
	m.Set(field.NewUnderlyingDeliveryStreamWithdrawalPoint(v))
}

// SetUnderlyingDeliveryStreamDeliveryPoint sets UnderlyingDeliveryStreamDeliveryPoint, Tag 41781.
func (m NoUnderlyingStreams) SetUnderlyingDeliveryStreamDeliveryPoint(v string) {
	m.Set(field.NewUnderlyingDeliveryStreamDeliveryPoint(v))
}

// SetUnderlyingDeliveryStreamDeliveryRestriction sets UnderlyingDeliveryStreamDeliveryRestriction, Tag 41782.
func (m NoUnderlyingStreams) SetUnderlyingDeliveryStreamDeliveryRestriction(v int) {
	m.Set(field.NewUnderlyingDeliveryStreamDeliveryRestriction(v))
}

// SetUnderlyingDeliveryStreamDeliveryContingency sets UnderlyingDeliveryStreamDeliveryContingency, Tag 41783.
func (m NoUnderlyingStreams) SetUnderlyingDeliveryStreamDeliveryContingency(v string) {
	m.Set(field.NewUnderlyingDeliveryStreamDeliveryContingency(v))
}

// SetUnderlyingDeliveryStreamDeliveryContingentPartySide sets UnderlyingDeliveryStreamDeliveryContingentPartySide, Tag 41784.
func (m NoUnderlyingStreams) SetUnderlyingDeliveryStreamDeliveryContingentPartySide(v int) {
	m.Set(field.NewUnderlyingDeliveryStreamDeliveryContingentPartySide(v))
}

// SetUnderlyingDeliveryStreamDeliverAtSourceIndicator sets UnderlyingDeliveryStreamDeliverAtSourceIndicator, Tag 41785.
func (m NoUnderlyingStreams) SetUnderlyingDeliveryStreamDeliverAtSourceIndicator(v bool) {
	m.Set(field.NewUnderlyingDeliveryStreamDeliverAtSourceIndicator(v))
}

// SetUnderlyingDeliveryStreamRiskApportionment sets UnderlyingDeliveryStreamRiskApportionment, Tag 41786.
func (m NoUnderlyingStreams) SetUnderlyingDeliveryStreamRiskApportionment(v string) {
	m.Set(field.NewUnderlyingDeliveryStreamRiskApportionment(v))
}

// SetUnderlyingDeliveryStreamRiskApportionmentSource sets UnderlyingDeliveryStreamRiskApportionmentSource, Tag 41587.
func (m NoUnderlyingStreams) SetUnderlyingDeliveryStreamRiskApportionmentSource(v string) {
	m.Set(field.NewUnderlyingDeliveryStreamRiskApportionmentSource(v))
}

// SetNoUnderlyingDeliveryStreamCycles sets NoUnderlyingDeliveryStreamCycles, Tag 41804.
func (m NoUnderlyingStreams) SetNoUnderlyingDeliveryStreamCycles(f NoUnderlyingDeliveryStreamCyclesRepeatingGroup) {
	m.SetGroup(f)
}

// SetUnderlyingDeliveryStreamTitleTransferLocation sets UnderlyingDeliveryStreamTitleTransferLocation, Tag 41787.
func (m NoUnderlyingStreams) SetUnderlyingDeliveryStreamTitleTransferLocation(v string) {
	m.Set(field.NewUnderlyingDeliveryStreamTitleTransferLocation(v))
}

// SetUnderlyingDeliveryStreamTitleTransferCondition sets UnderlyingDeliveryStreamTitleTransferCondition, Tag 41788.
func (m NoUnderlyingStreams) SetUnderlyingDeliveryStreamTitleTransferCondition(v int) {
	m.Set(field.NewUnderlyingDeliveryStreamTitleTransferCondition(v))
}

// SetUnderlyingDeliveryStreamImporterOfRecord sets UnderlyingDeliveryStreamImporterOfRecord, Tag 41789.
func (m NoUnderlyingStreams) SetUnderlyingDeliveryStreamImporterOfRecord(v string) {
	m.Set(field.NewUnderlyingDeliveryStreamImporterOfRecord(v))
}

// SetUnderlyingDeliveryStreamNegativeTolerance sets UnderlyingDeliveryStreamNegativeTolerance, Tag 41790.
func (m NoUnderlyingStreams) SetUnderlyingDeliveryStreamNegativeTolerance(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingDeliveryStreamNegativeTolerance(value, scale))
}

// SetUnderlyingDeliveryStreamPositiveTolerance sets UnderlyingDeliveryStreamPositiveTolerance, Tag 41791.
func (m NoUnderlyingStreams) SetUnderlyingDeliveryStreamPositiveTolerance(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingDeliveryStreamPositiveTolerance(value, scale))
}

// SetUnderlyingDeliveryStreamToleranceUnitOfMeasure sets UnderlyingDeliveryStreamToleranceUnitOfMeasure, Tag 41792.
func (m NoUnderlyingStreams) SetUnderlyingDeliveryStreamToleranceUnitOfMeasure(v string) {
	m.Set(field.NewUnderlyingDeliveryStreamToleranceUnitOfMeasure(v))
}

// SetUnderlyingDeliveryStreamToleranceType sets UnderlyingDeliveryStreamToleranceType, Tag 41793.
func (m NoUnderlyingStreams) SetUnderlyingDeliveryStreamToleranceType(v int) {
	m.Set(field.NewUnderlyingDeliveryStreamToleranceType(v))
}

// SetUnderlyingDeliveryStreamToleranceOptionSide sets UnderlyingDeliveryStreamToleranceOptionSide, Tag 41794.
func (m NoUnderlyingStreams) SetUnderlyingDeliveryStreamToleranceOptionSide(v int) {
	m.Set(field.NewUnderlyingDeliveryStreamToleranceOptionSide(v))
}

// SetUnderlyingDeliveryStreamTotalPositiveTolerance sets UnderlyingDeliveryStreamTotalPositiveTolerance, Tag 41795.
func (m NoUnderlyingStreams) SetUnderlyingDeliveryStreamTotalPositiveTolerance(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingDeliveryStreamTotalPositiveTolerance(value, scale))
}

// SetUnderlyingDeliveryStreamTotalNegativeTolerance sets UnderlyingDeliveryStreamTotalNegativeTolerance, Tag 41796.
func (m NoUnderlyingStreams) SetUnderlyingDeliveryStreamTotalNegativeTolerance(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingDeliveryStreamTotalNegativeTolerance(value, scale))
}

// SetUnderlyingDeliveryStreamNotionalConversionFactor sets UnderlyingDeliveryStreamNotionalConversionFactor, Tag 41797.
func (m NoUnderlyingStreams) SetUnderlyingDeliveryStreamNotionalConversionFactor(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingDeliveryStreamNotionalConversionFactor(value, scale))
}

// SetUnderlyingDeliveryStreamTransportEquipment sets UnderlyingDeliveryStreamTransportEquipment, Tag 41798.
func (m NoUnderlyingStreams) SetUnderlyingDeliveryStreamTransportEquipment(v string) {
	m.Set(field.NewUnderlyingDeliveryStreamTransportEquipment(v))
}

// SetUnderlyingDeliveryStreamElectingPartySide sets UnderlyingDeliveryStreamElectingPartySide, Tag 41799.
func (m NoUnderlyingStreams) SetUnderlyingDeliveryStreamElectingPartySide(v int) {
	m.Set(field.NewUnderlyingDeliveryStreamElectingPartySide(v))
}

// SetUnderlyingDeliveryStreamDeliveryPointSource sets UnderlyingDeliveryStreamDeliveryPointSource, Tag 42196.
func (m NoUnderlyingStreams) SetUnderlyingDeliveryStreamDeliveryPointSource(v int) {
	m.Set(field.NewUnderlyingDeliveryStreamDeliveryPointSource(v))
}

// SetUnderlyingDeliveryStreamDeliveryPointDesc sets UnderlyingDeliveryStreamDeliveryPointDesc, Tag 42197.
func (m NoUnderlyingStreams) SetUnderlyingDeliveryStreamDeliveryPointDesc(v string) {
	m.Set(field.NewUnderlyingDeliveryStreamDeliveryPointDesc(v))
}

// SetUnderlyingDeliveryStreamRouteOrCharter sets UnderlyingDeliveryStreamRouteOrCharter, Tag 43096.
func (m NoUnderlyingStreams) SetUnderlyingDeliveryStreamRouteOrCharter(v string) {
	m.Set(field.NewUnderlyingDeliveryStreamRouteOrCharter(v))
}

// SetNoUnderlyingDeliverySchedules sets NoUnderlyingDeliverySchedules, Tag 41756.
func (m NoUnderlyingStreams) SetNoUnderlyingDeliverySchedules(f NoUnderlyingDeliverySchedulesRepeatingGroup) {
	m.SetGroup(f)
}

// SetUnderlyingStreamVersion sets UnderlyingStreamVersion, Tag 43083.
func (m NoUnderlyingStreams) SetUnderlyingStreamVersion(v string) {
	m.Set(field.NewUnderlyingStreamVersion(v))
}

// SetUnderlyingStreamVersionEffectiveDate sets UnderlyingStreamVersionEffectiveDate, Tag 43084.
func (m NoUnderlyingStreams) SetUnderlyingStreamVersionEffectiveDate(v string) {
	m.Set(field.NewUnderlyingStreamVersionEffectiveDate(v))
}

// SetUnderlyingStreamNotionalDeterminationMethod sets UnderlyingStreamNotionalDeterminationMethod, Tag 43085.
func (m NoUnderlyingStreams) SetUnderlyingStreamNotionalDeterminationMethod(v string) {
	m.Set(field.NewUnderlyingStreamNotionalDeterminationMethod(v))
}

// SetUnderlyingStreamNotionalAdjustments sets UnderlyingStreamNotionalAdjustments, Tag 43086.
func (m NoUnderlyingStreams) SetUnderlyingStreamNotionalAdjustments(v int) {
	m.Set(field.NewUnderlyingStreamNotionalAdjustments(v))
}

// GetUnderlyingStreamType gets UnderlyingStreamType, Tag 40541.
func (m NoUnderlyingStreams) GetUnderlyingStreamType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStreamDesc gets UnderlyingStreamDesc, Tag 40542.
func (m NoUnderlyingStreams) GetUnderlyingStreamDesc() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamDescField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStreamPaySide gets UnderlyingStreamPaySide, Tag 40543.
func (m NoUnderlyingStreams) GetUnderlyingStreamPaySide() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamPaySideField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStreamReceiveSide gets UnderlyingStreamReceiveSide, Tag 40544.
func (m NoUnderlyingStreams) GetUnderlyingStreamReceiveSide() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamReceiveSideField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStreamNotional gets UnderlyingStreamNotional, Tag 40545.
func (m NoUnderlyingStreams) GetUnderlyingStreamNotional() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamNotionalField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStreamCurrency gets UnderlyingStreamCurrency, Tag 40546.
func (m NoUnderlyingStreams) GetUnderlyingStreamCurrency() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamCurrencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStreamEffectiveDateUnadjusted gets UnderlyingStreamEffectiveDateUnadjusted, Tag 40057.
func (m NoUnderlyingStreams) GetUnderlyingStreamEffectiveDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamEffectiveDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStreamEffectiveDateBusinessDayConvention gets UnderlyingStreamEffectiveDateBusinessDayConvention, Tag 40058.
func (m NoUnderlyingStreams) GetUnderlyingStreamEffectiveDateBusinessDayConvention() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamEffectiveDateBusinessDayConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUnderlyingStreamEffectiveDateBusinessCenters gets NoUnderlyingStreamEffectiveDateBusinessCenters, Tag 40975.
func (m NoUnderlyingStreams) GetNoUnderlyingStreamEffectiveDateBusinessCenters() (NoUnderlyingStreamEffectiveDateBusinessCentersRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingStreamEffectiveDateBusinessCentersRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetUnderlyingStreamEffectiveDateRelativeTo gets UnderlyingStreamEffectiveDateRelativeTo, Tag 40060.
func (m NoUnderlyingStreams) GetUnderlyingStreamEffectiveDateRelativeTo() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamEffectiveDateRelativeToField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStreamEffectiveDateOffsetPeriod gets UnderlyingStreamEffectiveDateOffsetPeriod, Tag 40061.
func (m NoUnderlyingStreams) GetUnderlyingStreamEffectiveDateOffsetPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamEffectiveDateOffsetPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStreamEffectiveDateOffsetUnit gets UnderlyingStreamEffectiveDateOffsetUnit, Tag 40062.
func (m NoUnderlyingStreams) GetUnderlyingStreamEffectiveDateOffsetUnit() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamEffectiveDateOffsetUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStreamEffectiveDateOffsetDayType gets UnderlyingStreamEffectiveDateOffsetDayType, Tag 40063.
func (m NoUnderlyingStreams) GetUnderlyingStreamEffectiveDateOffsetDayType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamEffectiveDateOffsetDayTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStreamEffectiveDateAdjusted gets UnderlyingStreamEffectiveDateAdjusted, Tag 40064.
func (m NoUnderlyingStreams) GetUnderlyingStreamEffectiveDateAdjusted() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamEffectiveDateAdjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStreamTerminationDateUnadjusted gets UnderlyingStreamTerminationDateUnadjusted, Tag 40548.
func (m NoUnderlyingStreams) GetUnderlyingStreamTerminationDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamTerminationDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStreamTerminationDateBusinessDayConvention gets UnderlyingStreamTerminationDateBusinessDayConvention, Tag 40549.
func (m NoUnderlyingStreams) GetUnderlyingStreamTerminationDateBusinessDayConvention() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamTerminationDateBusinessDayConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUnderlyingStreamTerminationDateBusinessCenters gets NoUnderlyingStreamTerminationDateBusinessCenters, Tag 40976.
func (m NoUnderlyingStreams) GetNoUnderlyingStreamTerminationDateBusinessCenters() (NoUnderlyingStreamTerminationDateBusinessCentersRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingStreamTerminationDateBusinessCentersRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetUnderlyingStreamTerminationDateRelativeTo gets UnderlyingStreamTerminationDateRelativeTo, Tag 40551.
func (m NoUnderlyingStreams) GetUnderlyingStreamTerminationDateRelativeTo() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamTerminationDateRelativeToField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStreamTerminationDateOffsetPeriod gets UnderlyingStreamTerminationDateOffsetPeriod, Tag 40552.
func (m NoUnderlyingStreams) GetUnderlyingStreamTerminationDateOffsetPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamTerminationDateOffsetPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStreamTerminationDateOffsetUnit gets UnderlyingStreamTerminationDateOffsetUnit, Tag 40553.
func (m NoUnderlyingStreams) GetUnderlyingStreamTerminationDateOffsetUnit() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamTerminationDateOffsetUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStreamTerminationDateOffsetDayType gets UnderlyingStreamTerminationDateOffsetDayType, Tag 40554.
func (m NoUnderlyingStreams) GetUnderlyingStreamTerminationDateOffsetDayType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamTerminationDateOffsetDayTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStreamTerminationDateAdjusted gets UnderlyingStreamTerminationDateAdjusted, Tag 40555.
func (m NoUnderlyingStreams) GetUnderlyingStreamTerminationDateAdjusted() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamTerminationDateAdjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStreamCalculationPeriodBusinessDayConvention gets UnderlyingStreamCalculationPeriodBusinessDayConvention, Tag 40556.
func (m NoUnderlyingStreams) GetUnderlyingStreamCalculationPeriodBusinessDayConvention() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamCalculationPeriodBusinessDayConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUnderlyingStreamCalculationPeriodBusinessCenters gets NoUnderlyingStreamCalculationPeriodBusinessCenters, Tag 40973.
func (m NoUnderlyingStreams) GetNoUnderlyingStreamCalculationPeriodBusinessCenters() (NoUnderlyingStreamCalculationPeriodBusinessCentersRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingStreamCalculationPeriodBusinessCentersRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetUnderlyingStreamFirstPeriodStartDateUnadjusted gets UnderlyingStreamFirstPeriodStartDateUnadjusted, Tag 40558.
func (m NoUnderlyingStreams) GetUnderlyingStreamFirstPeriodStartDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamFirstPeriodStartDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStreamFirstPeriodStartDateBusinessDayConvention gets UnderlyingStreamFirstPeriodStartDateBusinessDayConvention, Tag 40559.
func (m NoUnderlyingStreams) GetUnderlyingStreamFirstPeriodStartDateBusinessDayConvention() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamFirstPeriodStartDateBusinessDayConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUnderlyingStreamFirstPeriodStartDateBusinessCenters gets NoUnderlyingStreamFirstPeriodStartDateBusinessCenters, Tag 40974.
func (m NoUnderlyingStreams) GetNoUnderlyingStreamFirstPeriodStartDateBusinessCenters() (NoUnderlyingStreamFirstPeriodStartDateBusinessCentersRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingStreamFirstPeriodStartDateBusinessCentersRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetUnderlyingStreamFirstPeriodStartDateAdjusted gets UnderlyingStreamFirstPeriodStartDateAdjusted, Tag 40561.
func (m NoUnderlyingStreams) GetUnderlyingStreamFirstPeriodStartDateAdjusted() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamFirstPeriodStartDateAdjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStreamFirstRegularPeriodStartDateUnadjusted gets UnderlyingStreamFirstRegularPeriodStartDateUnadjusted, Tag 40562.
func (m NoUnderlyingStreams) GetUnderlyingStreamFirstRegularPeriodStartDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamFirstRegularPeriodStartDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStreamFirstCompoundingPeriodEndDateUnadjusted gets UnderlyingStreamFirstCompoundingPeriodEndDateUnadjusted, Tag 40563.
func (m NoUnderlyingStreams) GetUnderlyingStreamFirstCompoundingPeriodEndDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamFirstCompoundingPeriodEndDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStreamLastRegularPeriodEndDateUnadjusted gets UnderlyingStreamLastRegularPeriodEndDateUnadjusted, Tag 40564.
func (m NoUnderlyingStreams) GetUnderlyingStreamLastRegularPeriodEndDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamLastRegularPeriodEndDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStreamCalculationFrequencyPeriod gets UnderlyingStreamCalculationFrequencyPeriod, Tag 40565.
func (m NoUnderlyingStreams) GetUnderlyingStreamCalculationFrequencyPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamCalculationFrequencyPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStreamCalculationFrequencyUnit gets UnderlyingStreamCalculationFrequencyUnit, Tag 40566.
func (m NoUnderlyingStreams) GetUnderlyingStreamCalculationFrequencyUnit() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamCalculationFrequencyUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStreamCalculationRollConvention gets UnderlyingStreamCalculationRollConvention, Tag 40567.
func (m NoUnderlyingStreams) GetUnderlyingStreamCalculationRollConvention() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamCalculationRollConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStreamCalculationPeriodDatesXID gets UnderlyingStreamCalculationPeriodDatesXID, Tag 41957.
func (m NoUnderlyingStreams) GetUnderlyingStreamCalculationPeriodDatesXID() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamCalculationPeriodDatesXIDField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStreamCalculationPeriodDatesXIDRef gets UnderlyingStreamCalculationPeriodDatesXIDRef, Tag 41958.
func (m NoUnderlyingStreams) GetUnderlyingStreamCalculationPeriodDatesXIDRef() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamCalculationPeriodDatesXIDRefField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUnderlyingStreamCalculationPeriodDates gets NoUnderlyingStreamCalculationPeriodDates, Tag 41954.
func (m NoUnderlyingStreams) GetNoUnderlyingStreamCalculationPeriodDates() (NoUnderlyingStreamCalculationPeriodDatesRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingStreamCalculationPeriodDatesRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetUnderlyingStreamCalculationBalanceOfFirstPeriod gets UnderlyingStreamCalculationBalanceOfFirstPeriod, Tag 41959.
func (m NoUnderlyingStreams) GetUnderlyingStreamCalculationBalanceOfFirstPeriod() (v bool, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamCalculationBalanceOfFirstPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStreamCalculationCorrectionPeriod gets UnderlyingStreamCalculationCorrectionPeriod, Tag 41960.
func (m NoUnderlyingStreams) GetUnderlyingStreamCalculationCorrectionPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamCalculationCorrectionPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStreamCalculationCorrectionUnit gets UnderlyingStreamCalculationCorrectionUnit, Tag 41961.
func (m NoUnderlyingStreams) GetUnderlyingStreamCalculationCorrectionUnit() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamCalculationCorrectionUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamType gets UnderlyingPaymentStreamType, Tag 40568.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamMarketRate gets UnderlyingPaymentStreamMarketRate, Tag 40569.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamMarketRate() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamMarketRateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamDelayIndicator gets UnderlyingPaymentStreamDelayIndicator, Tag 40570.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamDelayIndicator() (v bool, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamDelayIndicatorField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamSettlCurrency gets UnderlyingPaymentStreamSettlCurrency, Tag 40571.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamSettlCurrency() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamSettlCurrencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamDayCount gets UnderlyingPaymentStreamDayCount, Tag 40572.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamDayCount() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamDayCountField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamAccrualDays gets UnderlyingPaymentStreamAccrualDays, Tag 40573.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamAccrualDays() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamAccrualDaysField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamDiscountType gets UnderlyingPaymentStreamDiscountType, Tag 40574.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamDiscountType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamDiscountTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamDiscountRate gets UnderlyingPaymentStreamDiscountRate, Tag 40575.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamDiscountRate() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamDiscountRateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamDiscountRateDayCount gets UnderlyingPaymentStreamDiscountRateDayCount, Tag 40576.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamDiscountRateDayCount() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamDiscountRateDayCountField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamCompoundingMethod gets UnderlyingPaymentStreamCompoundingMethod, Tag 40577.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamCompoundingMethod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamCompoundingMethodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamInitialPrincipalExchangeIndicator gets UnderlyingPaymentStreamInitialPrincipalExchangeIndicator, Tag 40578.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamInitialPrincipalExchangeIndicator() (v bool, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamInitialPrincipalExchangeIndicatorField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamInterimPrincipalExchangeIndicator gets UnderlyingPaymentStreamInterimPrincipalExchangeIndicator, Tag 40579.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamInterimPrincipalExchangeIndicator() (v bool, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamInterimPrincipalExchangeIndicatorField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamFinalPrincipalExchangeIndicator gets UnderlyingPaymentStreamFinalPrincipalExchangeIndicator, Tag 40580.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamFinalPrincipalExchangeIndicator() (v bool, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamFinalPrincipalExchangeIndicatorField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamPaymentDateBusinessDayConvention gets UnderlyingPaymentStreamPaymentDateBusinessDayConvention, Tag 40581.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamPaymentDateBusinessDayConvention() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamPaymentDateBusinessDayConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUnderlyingPaymentStreamPaymentDateBusinessCenters gets NoUnderlyingPaymentStreamPaymentDateBusinessCenters, Tag 40969.
func (m NoUnderlyingStreams) GetNoUnderlyingPaymentStreamPaymentDateBusinessCenters() (NoUnderlyingPaymentStreamPaymentDateBusinessCentersRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingPaymentStreamPaymentDateBusinessCentersRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetUnderlyingPaymentStreamPaymentFrequencyPeriod gets UnderlyingPaymentStreamPaymentFrequencyPeriod, Tag 40583.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamPaymentFrequencyPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamPaymentFrequencyPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamPaymentFrequencyUnit gets UnderlyingPaymentStreamPaymentFrequencyUnit, Tag 40584.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamPaymentFrequencyUnit() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamPaymentFrequencyUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamPaymentRollConvention gets UnderlyingPaymentStreamPaymentRollConvention, Tag 40585.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamPaymentRollConvention() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamPaymentRollConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamFirstPaymentDateUnadjusted gets UnderlyingPaymentStreamFirstPaymentDateUnadjusted, Tag 40586.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamFirstPaymentDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamFirstPaymentDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamLastRegularPaymentDateUnadjusted gets UnderlyingPaymentStreamLastRegularPaymentDateUnadjusted, Tag 40587.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamLastRegularPaymentDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamLastRegularPaymentDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamPaymentDateRelativeTo gets UnderlyingPaymentStreamPaymentDateRelativeTo, Tag 40588.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamPaymentDateRelativeTo() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamPaymentDateRelativeToField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamPaymentDateOffsetPeriod gets UnderlyingPaymentStreamPaymentDateOffsetPeriod, Tag 40589.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamPaymentDateOffsetPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamPaymentDateOffsetPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamPaymentDateOffsetUnit gets UnderlyingPaymentStreamPaymentDateOffsetUnit, Tag 40590.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamPaymentDateOffsetUnit() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamPaymentDateOffsetUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamPaymentDateOffsetDayType gets UnderlyingPaymentStreamPaymentDateOffsetDayType, Tag 40591.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamPaymentDateOffsetDayType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamPaymentDateOffsetDayTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUnderlyingPaymentStreamPaymentDates gets NoUnderlyingPaymentStreamPaymentDates, Tag 41937.
func (m NoUnderlyingStreams) GetNoUnderlyingPaymentStreamPaymentDates() (NoUnderlyingPaymentStreamPaymentDatesRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingPaymentStreamPaymentDatesRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetUnderlyingPaymentStreamMasterAgreementPaymentDatesIndicator gets UnderlyingPaymentStreamMasterAgreementPaymentDatesIndicator, Tag 41940.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamMasterAgreementPaymentDatesIndicator() (v bool, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamMasterAgreementPaymentDatesIndicatorField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamFinalPricePaymentDateUnadjusted gets UnderlyingPaymentStreamFinalPricePaymentDateUnadjusted, Tag 42949.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamFinalPricePaymentDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamFinalPricePaymentDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamFinalPricePaymentDateRelativeTo gets UnderlyingPaymentStreamFinalPricePaymentDateRelativeTo, Tag 42950.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamFinalPricePaymentDateRelativeTo() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamFinalPricePaymentDateRelativeToField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamFinalPricePaymentDateOffsetPeriod gets UnderlyingPaymentStreamFinalPricePaymentDateOffsetPeriod, Tag 42951.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamFinalPricePaymentDateOffsetPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamFinalPricePaymentDateOffsetPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamFinalPricePaymentDateOffsetUnit gets UnderlyingPaymentStreamFinalPricePaymentDateOffsetUnit, Tag 42952.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamFinalPricePaymentDateOffsetUnit() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamFinalPricePaymentDateOffsetUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamFinalPricePaymentDateOffsetDayType gets UnderlyingPaymentStreamFinalPricePaymentDateOffsetDayType, Tag 42953.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamFinalPricePaymentDateOffsetDayType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamFinalPricePaymentDateOffsetDayTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamFinalPricePaymentDateAdjusted gets UnderlyingPaymentStreamFinalPricePaymentDateAdjusted, Tag 42954.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamFinalPricePaymentDateAdjusted() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamFinalPricePaymentDateAdjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamResetDateRelativeTo gets UnderlyingPaymentStreamResetDateRelativeTo, Tag 40592.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamResetDateRelativeTo() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamResetDateRelativeToField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamResetDateBusinessDayConvention gets UnderlyingPaymentStreamResetDateBusinessDayConvention, Tag 40593.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamResetDateBusinessDayConvention() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamResetDateBusinessDayConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUnderlyingPaymentStreamResetDateBusinessCenters gets NoUnderlyingPaymentStreamResetDateBusinessCenters, Tag 40970.
func (m NoUnderlyingStreams) GetNoUnderlyingPaymentStreamResetDateBusinessCenters() (NoUnderlyingPaymentStreamResetDateBusinessCentersRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingPaymentStreamResetDateBusinessCentersRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetUnderlyingPaymentStreamResetFrequencyPeriod gets UnderlyingPaymentStreamResetFrequencyPeriod, Tag 40595.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamResetFrequencyPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamResetFrequencyPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamResetFrequencyUnit gets UnderlyingPaymentStreamResetFrequencyUnit, Tag 40596.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamResetFrequencyUnit() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamResetFrequencyUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamResetWeeklyRollConvention gets UnderlyingPaymentStreamResetWeeklyRollConvention, Tag 40597.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamResetWeeklyRollConvention() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamResetWeeklyRollConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamInitialFixingDateRelativeTo gets UnderlyingPaymentStreamInitialFixingDateRelativeTo, Tag 40598.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamInitialFixingDateRelativeTo() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamInitialFixingDateRelativeToField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamInitialFixingDateBusinessDayConvention gets UnderlyingPaymentStreamInitialFixingDateBusinessDayConvention, Tag 40599.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamInitialFixingDateBusinessDayConvention() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamInitialFixingDateBusinessDayConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUnderlyingPaymentStreamInitialFixingDateBusinessCenters gets NoUnderlyingPaymentStreamInitialFixingDateBusinessCenters, Tag 40971.
func (m NoUnderlyingStreams) GetNoUnderlyingPaymentStreamInitialFixingDateBusinessCenters() (NoUnderlyingPaymentStreamInitialFixingDateBusinessCentersRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingPaymentStreamInitialFixingDateBusinessCentersRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetUnderlyingPaymentStreamInitialFixingDateOffsetPeriod gets UnderlyingPaymentStreamInitialFixingDateOffsetPeriod, Tag 40601.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamInitialFixingDateOffsetPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamInitialFixingDateOffsetPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamInitialFixingDateOffsetUnit gets UnderlyingPaymentStreamInitialFixingDateOffsetUnit, Tag 40602.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamInitialFixingDateOffsetUnit() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamInitialFixingDateOffsetUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamInitialFixingDateOffsetDayType gets UnderlyingPaymentStreamInitialFixingDateOffsetDayType, Tag 40603.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamInitialFixingDateOffsetDayType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamInitialFixingDateOffsetDayTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamInitialFixingDateAdjusted gets UnderlyingPaymentStreamInitialFixingDateAdjusted, Tag 40604.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamInitialFixingDateAdjusted() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamInitialFixingDateAdjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamFixingDateRelativeTo gets UnderlyingPaymentStreamFixingDateRelativeTo, Tag 40605.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamFixingDateRelativeTo() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamFixingDateRelativeToField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamFixingDateBusinessDayConvention gets UnderlyingPaymentStreamFixingDateBusinessDayConvention, Tag 40606.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamFixingDateBusinessDayConvention() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamFixingDateBusinessDayConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUnderlyingPaymentStreamFixingDateBusinessCenters gets NoUnderlyingPaymentStreamFixingDateBusinessCenters, Tag 40972.
func (m NoUnderlyingStreams) GetNoUnderlyingPaymentStreamFixingDateBusinessCenters() (NoUnderlyingPaymentStreamFixingDateBusinessCentersRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingPaymentStreamFixingDateBusinessCentersRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetUnderlyingPaymentStreamFixingDateOffsetPeriod gets UnderlyingPaymentStreamFixingDateOffsetPeriod, Tag 40608.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamFixingDateOffsetPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamFixingDateOffsetPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamFixingDateOffsetUnit gets UnderlyingPaymentStreamFixingDateOffsetUnit, Tag 40609.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamFixingDateOffsetUnit() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamFixingDateOffsetUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamFixingDateOffsetDayType gets UnderlyingPaymentStreamFixingDateOffsetDayType, Tag 40610.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamFixingDateOffsetDayType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamFixingDateOffsetDayTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamFixingDateAdjusted gets UnderlyingPaymentStreamFixingDateAdjusted, Tag 40611.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamFixingDateAdjusted() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamFixingDateAdjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamRateCutoffDateOffsetPeriod gets UnderlyingPaymentStreamRateCutoffDateOffsetPeriod, Tag 40612.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamRateCutoffDateOffsetPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamRateCutoffDateOffsetPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamRateCutoffDateOffsetUnit gets UnderlyingPaymentStreamRateCutoffDateOffsetUnit, Tag 40613.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamRateCutoffDateOffsetUnit() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamRateCutoffDateOffsetUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamRateCutoffDateOffsetDayType gets UnderlyingPaymentStreamRateCutoffDateOffsetDayType, Tag 40614.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamRateCutoffDateOffsetDayType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamRateCutoffDateOffsetDayTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUnderlyingPaymentStreamFixingDates gets NoUnderlyingPaymentStreamFixingDates, Tag 42955.
func (m NoUnderlyingStreams) GetNoUnderlyingPaymentStreamFixingDates() (NoUnderlyingPaymentStreamFixingDatesRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingPaymentStreamFixingDatesRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetUnderlyingPaymentStreamRate gets UnderlyingPaymentStreamRate, Tag 40615.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamRate() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamRateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamFixedAmount gets UnderlyingPaymentStreamFixedAmount, Tag 40616.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamFixedAmount() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamFixedAmountField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamRateOrAmountCurrency gets UnderlyingPaymentStreamRateOrAmountCurrency, Tag 40617.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamRateOrAmountCurrency() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamRateOrAmountCurrencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamFutureValueNotional gets UnderlyingPaymentStreamFutureValueNotional, Tag 40618.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamFutureValueNotional() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamFutureValueNotionalField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamFutureValueDateAdjusted gets UnderlyingPaymentStreamFutureValueDateAdjusted, Tag 40619.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamFutureValueDateAdjusted() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamFutureValueDateAdjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamFixedAmountUnitOfMeasure gets UnderlyingPaymentStreamFixedAmountUnitOfMeasure, Tag 41904.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamFixedAmountUnitOfMeasure() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamFixedAmountUnitOfMeasureField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamTotalFixedAmount gets UnderlyingPaymentStreamTotalFixedAmount, Tag 41905.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamTotalFixedAmount() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamTotalFixedAmountField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamWorldScaleRate gets UnderlyingPaymentStreamWorldScaleRate, Tag 41906.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamWorldScaleRate() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamWorldScaleRateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamContractPrice gets UnderlyingPaymentStreamContractPrice, Tag 41907.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamContractPrice() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamContractPriceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamContractPriceCurrency gets UnderlyingPaymentStreamContractPriceCurrency, Tag 41908.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamContractPriceCurrency() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamContractPriceCurrencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamRateIndex gets UnderlyingPaymentStreamRateIndex, Tag 40620.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamRateIndex() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamRateIndexField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamRateIndexSource gets UnderlyingPaymentStreamRateIndexSource, Tag 40621.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamRateIndexSource() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamRateIndexSourceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamRateIndexCurveUnit gets UnderlyingPaymentStreamRateIndexCurveUnit, Tag 40622.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamRateIndexCurveUnit() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamRateIndexCurveUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamRateIndexCurvePeriod gets UnderlyingPaymentStreamRateIndexCurvePeriod, Tag 40623.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamRateIndexCurvePeriod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamRateIndexCurvePeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamRateMultiplier gets UnderlyingPaymentStreamRateMultiplier, Tag 40624.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamRateMultiplier() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamRateMultiplierField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamRateSpread gets UnderlyingPaymentStreamRateSpread, Tag 40625.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamRateSpread() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamRateSpreadField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamRateSpreadPositionType gets UnderlyingPaymentStreamRateSpreadPositionType, Tag 40626.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamRateSpreadPositionType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamRateSpreadPositionTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamRateTreatment gets UnderlyingPaymentStreamRateTreatment, Tag 40627.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamRateTreatment() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamRateTreatmentField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamCapRate gets UnderlyingPaymentStreamCapRate, Tag 40628.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamCapRate() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamCapRateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamCapRateBuySide gets UnderlyingPaymentStreamCapRateBuySide, Tag 40629.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamCapRateBuySide() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamCapRateBuySideField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamCapRateSellSide gets UnderlyingPaymentStreamCapRateSellSide, Tag 40630.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamCapRateSellSide() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamCapRateSellSideField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamFloorRate gets UnderlyingPaymentStreamFloorRate, Tag 40631.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamFloorRate() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamFloorRateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamFloorRateBuySide gets UnderlyingPaymentStreamFloorRateBuySide, Tag 40632.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamFloorRateBuySide() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamFloorRateBuySideField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamFloorRateSellSide gets UnderlyingPaymentStreamFloorRateSellSide, Tag 40633.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamFloorRateSellSide() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamFloorRateSellSideField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamInitialRate gets UnderlyingPaymentStreamInitialRate, Tag 40634.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamInitialRate() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamInitialRateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamFinalRateRoundingDirection gets UnderlyingPaymentStreamFinalRateRoundingDirection, Tag 40635.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamFinalRateRoundingDirection() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamFinalRateRoundingDirectionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamFinalRatePrecision gets UnderlyingPaymentStreamFinalRatePrecision, Tag 40636.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamFinalRatePrecision() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamFinalRatePrecisionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamAveragingMethod gets UnderlyingPaymentStreamAveragingMethod, Tag 40637.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamAveragingMethod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamAveragingMethodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamNegativeRateTreatment gets UnderlyingPaymentStreamNegativeRateTreatment, Tag 40638.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamNegativeRateTreatment() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamNegativeRateTreatmentField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamInflationLagPeriod gets UnderlyingPaymentStreamInflationLagPeriod, Tag 40639.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamInflationLagPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamInflationLagPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamInflationLagUnit gets UnderlyingPaymentStreamInflationLagUnit, Tag 40640.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamInflationLagUnit() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamInflationLagUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamInflationLagDayType gets UnderlyingPaymentStreamInflationLagDayType, Tag 40641.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamInflationLagDayType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamInflationLagDayTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamInflationInterpolationMethod gets UnderlyingPaymentStreamInflationInterpolationMethod, Tag 40642.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamInflationInterpolationMethod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamInflationInterpolationMethodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamInflationIndexSource gets UnderlyingPaymentStreamInflationIndexSource, Tag 40643.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamInflationIndexSource() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamInflationIndexSourceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamInflationPublicationSource gets UnderlyingPaymentStreamInflationPublicationSource, Tag 40644.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamInflationPublicationSource() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamInflationPublicationSourceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamInflationInitialIndexLevel gets UnderlyingPaymentStreamInflationInitialIndexLevel, Tag 40645.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamInflationInitialIndexLevel() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamInflationInitialIndexLevelField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamInflationFallbackBondApplicable gets UnderlyingPaymentStreamInflationFallbackBondApplicable, Tag 40646.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamInflationFallbackBondApplicable() (v bool, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamInflationFallbackBondApplicableField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamFRADiscounting gets UnderlyingPaymentStreamFRADiscounting, Tag 40647.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamFRADiscounting() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamFRADiscountingField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamRateIndex2CurveUnit gets UnderlyingPaymentStreamRateIndex2CurveUnit, Tag 41911.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamRateIndex2CurveUnit() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamRateIndex2CurveUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamRateIndex2CurvePeriod gets UnderlyingPaymentStreamRateIndex2CurvePeriod, Tag 41912.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamRateIndex2CurvePeriod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamRateIndex2CurvePeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamRateIndexLocation gets UnderlyingPaymentStreamRateIndexLocation, Tag 41913.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamRateIndexLocation() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamRateIndexLocationField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamRateIndexLevel gets UnderlyingPaymentStreamRateIndexLevel, Tag 41914.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamRateIndexLevel() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamRateIndexLevelField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamRateIndexUnitOfMeasure gets UnderlyingPaymentStreamRateIndexUnitOfMeasure, Tag 41915.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamRateIndexUnitOfMeasure() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamRateIndexUnitOfMeasureField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamSettlLevel gets UnderlyingPaymentStreamSettlLevel, Tag 41916.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamSettlLevel() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamSettlLevelField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamReferenceLevel gets UnderlyingPaymentStreamReferenceLevel, Tag 41917.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamReferenceLevel() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamReferenceLevelField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamReferenceLevelUnitOfMeasure gets UnderlyingPaymentStreamReferenceLevelUnitOfMeasure, Tag 41918.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamReferenceLevelUnitOfMeasure() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamReferenceLevelUnitOfMeasureField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamReferenceLevelEqualsZeroIndicator gets UnderlyingPaymentStreamReferenceLevelEqualsZeroIndicator, Tag 41919.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamReferenceLevelEqualsZeroIndicator() (v bool, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamReferenceLevelEqualsZeroIndicatorField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamRateSpreadCurrency gets UnderlyingPaymentStreamRateSpreadCurrency, Tag 41920.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamRateSpreadCurrency() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamRateSpreadCurrencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamRateSpreadUnitOfMeasure gets UnderlyingPaymentStreamRateSpreadUnitOfMeasure, Tag 41921.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamRateSpreadUnitOfMeasure() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamRateSpreadUnitOfMeasureField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamRateConversionFactor gets UnderlyingPaymentStreamRateConversionFactor, Tag 41922.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamRateConversionFactor() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamRateConversionFactorField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamRateSpreadType gets UnderlyingPaymentStreamRateSpreadType, Tag 41923.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamRateSpreadType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamRateSpreadTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamLastResetRate gets UnderlyingPaymentStreamLastResetRate, Tag 41924.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamLastResetRate() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamLastResetRateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamFinalRate gets UnderlyingPaymentStreamFinalRate, Tag 41925.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamFinalRate() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamFinalRateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamCalculationLagPeriod gets UnderlyingPaymentStreamCalculationLagPeriod, Tag 41926.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamCalculationLagPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamCalculationLagPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamCalculationLagUnit gets UnderlyingPaymentStreamCalculationLagUnit, Tag 41927.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamCalculationLagUnit() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamCalculationLagUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamFirstObservationDateOffsetPeriod gets UnderlyingPaymentStreamFirstObservationDateOffsetPeriod, Tag 41928.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamFirstObservationDateOffsetPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamFirstObservationDateOffsetPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamFirstObservationDateOffsetUnit gets UnderlyingPaymentStreamFirstObservationDateOffsetUnit, Tag 41929.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamFirstObservationDateOffsetUnit() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamFirstObservationDateOffsetUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamPricingDayType gets UnderlyingPaymentStreamPricingDayType, Tag 41930.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamPricingDayType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamPricingDayTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamPricingDayDistribution gets UnderlyingPaymentStreamPricingDayDistribution, Tag 41931.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamPricingDayDistribution() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamPricingDayDistributionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamPricingDayCount gets UnderlyingPaymentStreamPricingDayCount, Tag 41932.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamPricingDayCount() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamPricingDayCountField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamPricingBusinessCalendar gets UnderlyingPaymentStreamPricingBusinessCalendar, Tag 41933.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamPricingBusinessCalendar() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamPricingBusinessCalendarField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamPricingBusinessDayConvention gets UnderlyingPaymentStreamPricingBusinessDayConvention, Tag 41934.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamPricingBusinessDayConvention() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamPricingBusinessDayConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUnderlyingPaymentStreamPricingBusinessCenters gets NoUnderlyingPaymentStreamPricingBusinessCenters, Tag 41909.
func (m NoUnderlyingStreams) GetNoUnderlyingPaymentStreamPricingBusinessCenters() (NoUnderlyingPaymentStreamPricingBusinessCentersRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingPaymentStreamPricingBusinessCentersRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetNoUnderlyingPaymentStreamPricingDays gets NoUnderlyingPaymentStreamPricingDays, Tag 41944.
func (m NoUnderlyingStreams) GetNoUnderlyingPaymentStreamPricingDays() (NoUnderlyingPaymentStreamPricingDaysRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingPaymentStreamPricingDaysRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetNoUnderlyingPaymentStreamPricingDates gets NoUnderlyingPaymentStreamPricingDates, Tag 41941.
func (m NoUnderlyingStreams) GetNoUnderlyingPaymentStreamPricingDates() (NoUnderlyingPaymentStreamPricingDatesRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingPaymentStreamPricingDatesRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetUnderlyingPaymentStreamFirstObservationDateUnadjusted gets UnderlyingPaymentStreamFirstObservationDateUnadjusted, Tag 42958.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamFirstObservationDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamFirstObservationDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamFirstObservationDateRelativeTo gets UnderlyingPaymentStreamFirstObservationDateRelativeTo, Tag 42959.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamFirstObservationDateRelativeTo() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamFirstObservationDateRelativeToField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamFirstObservationDateOffsetDayType gets UnderlyingPaymentStreamFirstObservationDateOffsetDayType, Tag 42960.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamFirstObservationDateOffsetDayType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamFirstObservationDateOffsetDayTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamFirstObservationDateAdjusted gets UnderlyingPaymentStreamFirstObservationDateAdjusted, Tag 42961.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamFirstObservationDateAdjusted() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamFirstObservationDateAdjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamUnderlierRefID gets UnderlyingPaymentStreamUnderlierRefID, Tag 42962.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamUnderlierRefID() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamUnderlierRefIDField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamFormulaCurrency gets UnderlyingPaymentStreamFormulaCurrency, Tag 42978.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamFormulaCurrency() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamFormulaCurrencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamFormulaCurrencyDeterminationMethod gets UnderlyingPaymentStreamFormulaCurrencyDeterminationMethod, Tag 42979.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamFormulaCurrencyDeterminationMethod() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamFormulaCurrencyDeterminationMethodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamFormulaReferenceAmount gets UnderlyingPaymentStreamFormulaReferenceAmount, Tag 42980.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamFormulaReferenceAmount() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamFormulaReferenceAmountField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUnderlyingPaymentStreamFormulas gets NoUnderlyingPaymentStreamFormulas, Tag 42981.
func (m NoUnderlyingStreams) GetNoUnderlyingPaymentStreamFormulas() (NoUnderlyingPaymentStreamFormulasRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingPaymentStreamFormulasRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetUnderlyingPaymentStreamFormulaImageLength gets UnderlyingPaymentStreamFormulaImageLength, Tag 42947.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamFormulaImageLength() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamFormulaImageLengthField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamFormulaImage gets UnderlyingPaymentStreamFormulaImage, Tag 42948.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamFormulaImage() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamFormulaImageField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDividendReinvestmentIndicator gets UnderlyingDividendReinvestmentIndicator, Tag 42826.
func (m NoUnderlyingStreams) GetUnderlyingDividendReinvestmentIndicator() (v bool, err quickfix.MessageRejectError) {
	var f field.UnderlyingDividendReinvestmentIndicatorField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDividendEntitlementEvent gets UnderlyingDividendEntitlementEvent, Tag 42827.
func (m NoUnderlyingStreams) GetUnderlyingDividendEntitlementEvent() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingDividendEntitlementEventField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDividendAmountType gets UnderlyingDividendAmountType, Tag 42828.
func (m NoUnderlyingStreams) GetUnderlyingDividendAmountType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingDividendAmountTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDividendUnderlierRefID gets UnderlyingDividendUnderlierRefID, Tag 42829.
func (m NoUnderlyingStreams) GetUnderlyingDividendUnderlierRefID() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingDividendUnderlierRefIDField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUnderlyingDividendPeriods gets NoUnderlyingDividendPeriods, Tag 42862.
func (m NoUnderlyingStreams) GetNoUnderlyingDividendPeriods() (NoUnderlyingDividendPeriodsRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingDividendPeriodsRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetUnderlyingExtraordinaryDividendPartySide gets UnderlyingExtraordinaryDividendPartySide, Tag 42830.
func (m NoUnderlyingStreams) GetUnderlyingExtraordinaryDividendPartySide() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingExtraordinaryDividendPartySideField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingExtraordinaryDividendAmountType gets UnderlyingExtraordinaryDividendAmountType, Tag 42831.
func (m NoUnderlyingStreams) GetUnderlyingExtraordinaryDividendAmountType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingExtraordinaryDividendAmountTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingExtraordinaryDividendCurrency gets UnderlyingExtraordinaryDividendCurrency, Tag 42832.
func (m NoUnderlyingStreams) GetUnderlyingExtraordinaryDividendCurrency() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingExtraordinaryDividendCurrencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingExtraordinaryDividendDeterminationMethod gets UnderlyingExtraordinaryDividendDeterminationMethod, Tag 42833.
func (m NoUnderlyingStreams) GetUnderlyingExtraordinaryDividendDeterminationMethod() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingExtraordinaryDividendDeterminationMethodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDividendFXTriggerDateRelativeTo gets UnderlyingDividendFXTriggerDateRelativeTo, Tag 42846.
func (m NoUnderlyingStreams) GetUnderlyingDividendFXTriggerDateRelativeTo() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingDividendFXTriggerDateRelativeToField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDividendFXTriggerDateOffsetPeriod gets UnderlyingDividendFXTriggerDateOffsetPeriod, Tag 42847.
func (m NoUnderlyingStreams) GetUnderlyingDividendFXTriggerDateOffsetPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingDividendFXTriggerDateOffsetPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDividendFXTriggerDateOffsetUnit gets UnderlyingDividendFXTriggerDateOffsetUnit, Tag 42848.
func (m NoUnderlyingStreams) GetUnderlyingDividendFXTriggerDateOffsetUnit() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingDividendFXTriggerDateOffsetUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDividendFXTriggerDateOffsetDayType gets UnderlyingDividendFXTriggerDateOffsetDayType, Tag 42849.
func (m NoUnderlyingStreams) GetUnderlyingDividendFXTriggerDateOffsetDayType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingDividendFXTriggerDateOffsetDayTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDividendFXTriggerDateUnadjusted gets UnderlyingDividendFXTriggerDateUnadjusted, Tag 42850.
func (m NoUnderlyingStreams) GetUnderlyingDividendFXTriggerDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingDividendFXTriggerDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDividendFXTriggerDateBusinessDayConvention gets UnderlyingDividendFXTriggerDateBusinessDayConvention, Tag 42851.
func (m NoUnderlyingStreams) GetUnderlyingDividendFXTriggerDateBusinessDayConvention() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingDividendFXTriggerDateBusinessDayConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUnderlyingDividendFXTriggerDateBusinessCenters gets NoUnderlyingDividendFXTriggerDateBusinessCenters, Tag 42853.
func (m NoUnderlyingStreams) GetNoUnderlyingDividendFXTriggerDateBusinessCenters() (NoUnderlyingDividendFXTriggerDateBusinessCentersRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingDividendFXTriggerDateBusinessCentersRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetUnderlyingDividendFXTriggerDateAdjusted gets UnderlyingDividendFXTriggerDateAdjusted, Tag 42852.
func (m NoUnderlyingStreams) GetUnderlyingDividendFXTriggerDateAdjusted() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingDividendFXTriggerDateAdjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDividendFloatingRateIndex gets UnderlyingDividendFloatingRateIndex, Tag 42801.
func (m NoUnderlyingStreams) GetUnderlyingDividendFloatingRateIndex() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingDividendFloatingRateIndexField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDividendFloatingRateIndexCurvePeriod gets UnderlyingDividendFloatingRateIndexCurvePeriod, Tag 42802.
func (m NoUnderlyingStreams) GetUnderlyingDividendFloatingRateIndexCurvePeriod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingDividendFloatingRateIndexCurvePeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDividendFloatingRateIndexCurveUnit gets UnderlyingDividendFloatingRateIndexCurveUnit, Tag 42803.
func (m NoUnderlyingStreams) GetUnderlyingDividendFloatingRateIndexCurveUnit() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingDividendFloatingRateIndexCurveUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDividendFloatingRateMultiplier gets UnderlyingDividendFloatingRateMultiplier, Tag 42804.
func (m NoUnderlyingStreams) GetUnderlyingDividendFloatingRateMultiplier() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingDividendFloatingRateMultiplierField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDividendFloatingRateSpread gets UnderlyingDividendFloatingRateSpread, Tag 42805.
func (m NoUnderlyingStreams) GetUnderlyingDividendFloatingRateSpread() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingDividendFloatingRateSpreadField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDividendFloatingRateSpreadPositionType gets UnderlyingDividendFloatingRateSpreadPositionType, Tag 42806.
func (m NoUnderlyingStreams) GetUnderlyingDividendFloatingRateSpreadPositionType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingDividendFloatingRateSpreadPositionTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDividendFloatingRateTreatment gets UnderlyingDividendFloatingRateTreatment, Tag 42807.
func (m NoUnderlyingStreams) GetUnderlyingDividendFloatingRateTreatment() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingDividendFloatingRateTreatmentField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDividendCapRate gets UnderlyingDividendCapRate, Tag 42808.
func (m NoUnderlyingStreams) GetUnderlyingDividendCapRate() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingDividendCapRateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDividendCapRateBuySide gets UnderlyingDividendCapRateBuySide, Tag 42809.
func (m NoUnderlyingStreams) GetUnderlyingDividendCapRateBuySide() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingDividendCapRateBuySideField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDividendCapRateSellSide gets UnderlyingDividendCapRateSellSide, Tag 42810.
func (m NoUnderlyingStreams) GetUnderlyingDividendCapRateSellSide() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingDividendCapRateSellSideField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDividendFloorRate gets UnderlyingDividendFloorRate, Tag 42811.
func (m NoUnderlyingStreams) GetUnderlyingDividendFloorRate() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingDividendFloorRateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDividendFloorRateBuySide gets UnderlyingDividendFloorRateBuySide, Tag 42812.
func (m NoUnderlyingStreams) GetUnderlyingDividendFloorRateBuySide() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingDividendFloorRateBuySideField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDividendFloorRateSellSide gets UnderlyingDividendFloorRateSellSide, Tag 42813.
func (m NoUnderlyingStreams) GetUnderlyingDividendFloorRateSellSide() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingDividendFloorRateSellSideField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDividendInitialRate gets UnderlyingDividendInitialRate, Tag 42814.
func (m NoUnderlyingStreams) GetUnderlyingDividendInitialRate() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingDividendInitialRateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDividendFinalRateRoundingDirection gets UnderlyingDividendFinalRateRoundingDirection, Tag 42815.
func (m NoUnderlyingStreams) GetUnderlyingDividendFinalRateRoundingDirection() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingDividendFinalRateRoundingDirectionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDividendFinalRatePrecision gets UnderlyingDividendFinalRatePrecision, Tag 42816.
func (m NoUnderlyingStreams) GetUnderlyingDividendFinalRatePrecision() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingDividendFinalRatePrecisionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDividendAveragingMethod gets UnderlyingDividendAveragingMethod, Tag 42817.
func (m NoUnderlyingStreams) GetUnderlyingDividendAveragingMethod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingDividendAveragingMethodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDividendNegativeRateTreatment gets UnderlyingDividendNegativeRateTreatment, Tag 42818.
func (m NoUnderlyingStreams) GetUnderlyingDividendNegativeRateTreatment() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingDividendNegativeRateTreatmentField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDividendAccrualFixedRate gets UnderlyingDividendAccrualFixedRate, Tag 42834.
func (m NoUnderlyingStreams) GetUnderlyingDividendAccrualFixedRate() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingDividendAccrualFixedRateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDividendAccrualPaymentDateRelativeTo gets UnderlyingDividendAccrualPaymentDateRelativeTo, Tag 42819.
func (m NoUnderlyingStreams) GetUnderlyingDividendAccrualPaymentDateRelativeTo() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingDividendAccrualPaymentDateRelativeToField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDividendAccrualPaymentDateOffsetPeriod gets UnderlyingDividendAccrualPaymentDateOffsetPeriod, Tag 42820.
func (m NoUnderlyingStreams) GetUnderlyingDividendAccrualPaymentDateOffsetPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingDividendAccrualPaymentDateOffsetPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDividendAccrualPaymentDateOffsetUnit gets UnderlyingDividendAccrualPaymentDateOffsetUnit, Tag 42821.
func (m NoUnderlyingStreams) GetUnderlyingDividendAccrualPaymentDateOffsetUnit() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingDividendAccrualPaymentDateOffsetUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDividendAccrualPaymentDateOffsetDayType gets UnderlyingDividendAccrualPaymentDateOffsetDayType, Tag 42822.
func (m NoUnderlyingStreams) GetUnderlyingDividendAccrualPaymentDateOffsetDayType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingDividendAccrualPaymentDateOffsetDayTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDividendAccrualPaymentDateUnadjusted gets UnderlyingDividendAccrualPaymentDateUnadjusted, Tag 42823.
func (m NoUnderlyingStreams) GetUnderlyingDividendAccrualPaymentDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingDividendAccrualPaymentDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDividendAccrualPaymentDateBusinessDayConvention gets UnderlyingDividendAccrualPaymentDateBusinessDayConvention, Tag 42824.
func (m NoUnderlyingStreams) GetUnderlyingDividendAccrualPaymentDateBusinessDayConvention() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingDividendAccrualPaymentDateBusinessDayConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUnderlyingDividendAccrualPaymentDateBusinessCenters gets NoUnderlyingDividendAccrualPaymentDateBusinessCenters, Tag 42799.
func (m NoUnderlyingStreams) GetNoUnderlyingDividendAccrualPaymentDateBusinessCenters() (NoUnderlyingDividendAccrualPaymentDateBusinessCentersRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingDividendAccrualPaymentDateBusinessCentersRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetUnderlyingDividendAccrualPaymentDateAdjusted gets UnderlyingDividendAccrualPaymentDateAdjusted, Tag 42825.
func (m NoUnderlyingStreams) GetUnderlyingDividendAccrualPaymentDateAdjusted() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingDividendAccrualPaymentDateAdjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDividendCompoundingMethod gets UnderlyingDividendCompoundingMethod, Tag 42835.
func (m NoUnderlyingStreams) GetUnderlyingDividendCompoundingMethod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingDividendCompoundingMethodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDividendNumOfIndexUnits gets UnderlyingDividendNumOfIndexUnits, Tag 42836.
func (m NoUnderlyingStreams) GetUnderlyingDividendNumOfIndexUnits() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingDividendNumOfIndexUnitsField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDividendCashPercentage gets UnderlyingDividendCashPercentage, Tag 42837.
func (m NoUnderlyingStreams) GetUnderlyingDividendCashPercentage() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingDividendCashPercentageField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDividendCashEquivalentPercentage gets UnderlyingDividendCashEquivalentPercentage, Tag 42838.
func (m NoUnderlyingStreams) GetUnderlyingDividendCashEquivalentPercentage() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingDividendCashEquivalentPercentageField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingNonCashDividendTreatment gets UnderlyingNonCashDividendTreatment, Tag 42839.
func (m NoUnderlyingStreams) GetUnderlyingNonCashDividendTreatment() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingNonCashDividendTreatmentField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDividendComposition gets UnderlyingDividendComposition, Tag 42840.
func (m NoUnderlyingStreams) GetUnderlyingDividendComposition() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingDividendCompositionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingSpecialDividendsIndicator gets UnderlyingSpecialDividendsIndicator, Tag 42841.
func (m NoUnderlyingStreams) GetUnderlyingSpecialDividendsIndicator() (v bool, err quickfix.MessageRejectError) {
	var f field.UnderlyingSpecialDividendsIndicatorField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingMaterialDividendsIndicator gets UnderlyingMaterialDividendsIndicator, Tag 42842.
func (m NoUnderlyingStreams) GetUnderlyingMaterialDividendsIndicator() (v bool, err quickfix.MessageRejectError) {
	var f field.UnderlyingMaterialDividendsIndicatorField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingOptionsExchangeDividendsIndicator gets UnderlyingOptionsExchangeDividendsIndicator, Tag 42843.
func (m NoUnderlyingStreams) GetUnderlyingOptionsExchangeDividendsIndicator() (v bool, err quickfix.MessageRejectError) {
	var f field.UnderlyingOptionsExchangeDividendsIndicatorField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingAdditionalDividendsIndicator gets UnderlyingAdditionalDividendsIndicator, Tag 42844.
func (m NoUnderlyingStreams) GetUnderlyingAdditionalDividendsIndicator() (v bool, err quickfix.MessageRejectError) {
	var f field.UnderlyingAdditionalDividendsIndicatorField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingAllDividendsIndicator gets UnderlyingAllDividendsIndicator, Tag 42845.
func (m NoUnderlyingStreams) GetUnderlyingAllDividendsIndicator() (v bool, err quickfix.MessageRejectError) {
	var f field.UnderlyingAllDividendsIndicatorField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingReturnRateNotionalReset gets UnderlyingReturnRateNotionalReset, Tag 42963.
func (m NoUnderlyingStreams) GetUnderlyingReturnRateNotionalReset() (v bool, err quickfix.MessageRejectError) {
	var f field.UnderlyingReturnRateNotionalResetField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUnderlyingReturnRates gets NoUnderlyingReturnRates, Tag 43034.
func (m NoUnderlyingStreams) GetNoUnderlyingReturnRates() (NoUnderlyingReturnRatesRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingReturnRatesRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetUnderlyingPaymentStreamLinkInitialLevel gets UnderlyingPaymentStreamLinkInitialLevel, Tag 42964.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamLinkInitialLevel() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamLinkInitialLevelField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamLinkClosingLevelIndicator gets UnderlyingPaymentStreamLinkClosingLevelIndicator, Tag 42965.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamLinkClosingLevelIndicator() (v bool, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamLinkClosingLevelIndicatorField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamLinkExpiringLevelIndicator gets UnderlyingPaymentStreamLinkExpiringLevelIndicator, Tag 42966.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamLinkExpiringLevelIndicator() (v bool, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamLinkExpiringLevelIndicatorField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamLinkEstimatedTradingDays gets UnderlyingPaymentStreamLinkEstimatedTradingDays, Tag 42967.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamLinkEstimatedTradingDays() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamLinkEstimatedTradingDaysField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamLinkStrikePrice gets UnderlyingPaymentStreamLinkStrikePrice, Tag 42968.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamLinkStrikePrice() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamLinkStrikePriceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamLinkStrikePriceType gets UnderlyingPaymentStreamLinkStrikePriceType, Tag 42969.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamLinkStrikePriceType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamLinkStrikePriceTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamLinkMaximumBoundary gets UnderlyingPaymentStreamLinkMaximumBoundary, Tag 42970.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamLinkMaximumBoundary() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamLinkMaximumBoundaryField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamLinkMinimumBoundary gets UnderlyingPaymentStreamLinkMinimumBoundary, Tag 42971.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamLinkMinimumBoundary() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamLinkMinimumBoundaryField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamLinkNumberOfDataSeries gets UnderlyingPaymentStreamLinkNumberOfDataSeries, Tag 42972.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamLinkNumberOfDataSeries() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamLinkNumberOfDataSeriesField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamVarianceUnadjustedCap gets UnderlyingPaymentStreamVarianceUnadjustedCap, Tag 42973.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamVarianceUnadjustedCap() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamVarianceUnadjustedCapField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamRealizedVarianceMethod gets UnderlyingPaymentStreamRealizedVarianceMethod, Tag 42974.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamRealizedVarianceMethod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamRealizedVarianceMethodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamDaysAdjustmentIndicator gets UnderlyingPaymentStreamDaysAdjustmentIndicator, Tag 42975.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamDaysAdjustmentIndicator() (v bool, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamDaysAdjustmentIndicatorField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamNearestExchangeContractRefID gets UnderlyingPaymentStreamNearestExchangeContractRefID, Tag 42976.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamNearestExchangeContractRefID() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamNearestExchangeContractRefIDField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamVegaNotionalAmount gets UnderlyingPaymentStreamVegaNotionalAmount, Tag 42977.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamVegaNotionalAmount() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamVegaNotionalAmountField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamRateIndexID gets UnderlyingPaymentStreamRateIndexID, Tag 43092.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamRateIndexID() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamRateIndexIDField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamRateIndexIDSource gets UnderlyingPaymentStreamRateIndexIDSource, Tag 43093.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamRateIndexIDSource() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamRateIndexIDSourceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamNonDeliverableRefCurrency gets UnderlyingPaymentStreamNonDeliverableRefCurrency, Tag 40648.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamNonDeliverableRefCurrency() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamNonDeliverableRefCurrencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamNonDeliverableFixingDatesBusinessDayConvention gets UnderlyingPaymentStreamNonDeliverableFixingDatesBusinessDayConvention, Tag 40649.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamNonDeliverableFixingDatesBusinessDayConvention() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamNonDeliverableFixingDatesBusinessDayConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUnderlyingPaymentStreamNonDeliverableFixingDatesBusinessCenters gets NoUnderlyingPaymentStreamNonDeliverableFixingDatesBusinessCenters, Tag 40968.
func (m NoUnderlyingStreams) GetNoUnderlyingPaymentStreamNonDeliverableFixingDatesBusinessCenters() (NoUnderlyingPaymentStreamNonDeliverableFixingDatesBusinessCentersRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingPaymentStreamNonDeliverableFixingDatesBusinessCentersRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetUnderlyingPaymentStreamNonDeliverableFixingDatesRelativeTo gets UnderlyingPaymentStreamNonDeliverableFixingDatesRelativeTo, Tag 40651.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamNonDeliverableFixingDatesRelativeTo() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamNonDeliverableFixingDatesRelativeToField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamNonDeliverableFixingDatesOffsetPeriod gets UnderlyingPaymentStreamNonDeliverableFixingDatesOffsetPeriod, Tag 40652.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamNonDeliverableFixingDatesOffsetPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamNonDeliverableFixingDatesOffsetPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamNonDeliverableFixingDatesOffsetUnit gets UnderlyingPaymentStreamNonDeliverableFixingDatesOffsetUnit, Tag 40653.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamNonDeliverableFixingDatesOffsetUnit() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamNonDeliverableFixingDatesOffsetUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamNonDeliverableFixingDatesOffsetDayType gets UnderlyingPaymentStreamNonDeliverableFixingDatesOffsetDayType, Tag 40654.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamNonDeliverableFixingDatesOffsetDayType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamNonDeliverableFixingDatesOffsetDayTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamNonDeliverableSettlRateSource gets UnderlyingPaymentStreamNonDeliverableSettlRateSource, Tag 40661.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamNonDeliverableSettlRateSource() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamNonDeliverableSettlRateSourceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamNonDeliverableSettlReferencePage gets UnderlyingPaymentStreamNonDeliverableSettlReferencePage, Tag 40824.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamNonDeliverableSettlReferencePage() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamNonDeliverableSettlReferencePageField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUnderlyingNonDeliverableFixingDates gets NoUnderlyingNonDeliverableFixingDates, Tag 40656.
func (m NoUnderlyingStreams) GetNoUnderlyingNonDeliverableFixingDates() (NoUnderlyingNonDeliverableFixingDatesRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingNonDeliverableFixingDatesRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetNoUnderlyingSettlRateFallbacks gets NoUnderlyingSettlRateFallbacks, Tag 40659.
func (m NoUnderlyingStreams) GetNoUnderlyingSettlRateFallbacks() (NoUnderlyingSettlRateFallbacksRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingSettlRateFallbacksRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetUnderlyingPaymentStreamFlatRateIndicator gets UnderlyingPaymentStreamFlatRateIndicator, Tag 41897.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamFlatRateIndicator() (v bool, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamFlatRateIndicatorField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamFlatRateAmount gets UnderlyingPaymentStreamFlatRateAmount, Tag 41898.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamFlatRateAmount() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamFlatRateAmountField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamFlatRateCurrency gets UnderlyingPaymentStreamFlatRateCurrency, Tag 41899.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamFlatRateCurrency() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamFlatRateCurrencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamMaximumPaymentAmount gets UnderlyingPaymentStreamMaximumPaymentAmount, Tag 41900.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamMaximumPaymentAmount() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamMaximumPaymentAmountField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamMaximumPaymentCurrency gets UnderlyingPaymentStreamMaximumPaymentCurrency, Tag 41901.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamMaximumPaymentCurrency() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamMaximumPaymentCurrencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamMaximumTransactionAmount gets UnderlyingPaymentStreamMaximumTransactionAmount, Tag 41902.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamMaximumTransactionAmount() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamMaximumTransactionAmountField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamMaximumTransactionCurrency gets UnderlyingPaymentStreamMaximumTransactionCurrency, Tag 41903.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamMaximumTransactionCurrency() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamMaximumTransactionCurrencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamCashSettlIndicator gets UnderlyingPaymentStreamCashSettlIndicator, Tag 42895.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamCashSettlIndicator() (v bool, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamCashSettlIndicatorField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamCompoundingXIDRef gets UnderlyingPaymentStreamCompoundingXIDRef, Tag 42896.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamCompoundingXIDRef() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamCompoundingXIDRefField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamCompoundingSpread gets UnderlyingPaymentStreamCompoundingSpread, Tag 42897.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamCompoundingSpread() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamCompoundingSpreadField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamInterpolationMethod gets UnderlyingPaymentStreamInterpolationMethod, Tag 42898.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamInterpolationMethod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamInterpolationMethodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamInterpolationPeriod gets UnderlyingPaymentStreamInterpolationPeriod, Tag 42899.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamInterpolationPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamInterpolationPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamCompoundingFixedRate gets UnderlyingPaymentStreamCompoundingFixedRate, Tag 42900.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamCompoundingFixedRate() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamCompoundingFixedRateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamCompoundingRateIndex gets UnderlyingPaymentStreamCompoundingRateIndex, Tag 42923.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamCompoundingRateIndex() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamCompoundingRateIndexField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamCompoundingRateIndexCurvePeriod gets UnderlyingPaymentStreamCompoundingRateIndexCurvePeriod, Tag 42924.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamCompoundingRateIndexCurvePeriod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamCompoundingRateIndexCurvePeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamCompoundingRateIndexCurveUnit gets UnderlyingPaymentStreamCompoundingRateIndexCurveUnit, Tag 42925.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamCompoundingRateIndexCurveUnit() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamCompoundingRateIndexCurveUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamCompoundingRateMultiplier gets UnderlyingPaymentStreamCompoundingRateMultiplier, Tag 42926.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamCompoundingRateMultiplier() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamCompoundingRateMultiplierField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamCompoundingRateSpread gets UnderlyingPaymentStreamCompoundingRateSpread, Tag 42927.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamCompoundingRateSpread() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamCompoundingRateSpreadField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamCompoundingRateSpreadPositionType gets UnderlyingPaymentStreamCompoundingRateSpreadPositionType, Tag 42928.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamCompoundingRateSpreadPositionType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamCompoundingRateSpreadPositionTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamCompoundingRateTreatment gets UnderlyingPaymentStreamCompoundingRateTreatment, Tag 42929.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamCompoundingRateTreatment() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamCompoundingRateTreatmentField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamCompoundingCapRate gets UnderlyingPaymentStreamCompoundingCapRate, Tag 42930.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamCompoundingCapRate() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamCompoundingCapRateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamCompoundingCapRateBuySide gets UnderlyingPaymentStreamCompoundingCapRateBuySide, Tag 42931.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamCompoundingCapRateBuySide() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamCompoundingCapRateBuySideField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamCompoundingCapRateSellSide gets UnderlyingPaymentStreamCompoundingCapRateSellSide, Tag 42932.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamCompoundingCapRateSellSide() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamCompoundingCapRateSellSideField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamCompoundingFloorRate gets UnderlyingPaymentStreamCompoundingFloorRate, Tag 42933.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamCompoundingFloorRate() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamCompoundingFloorRateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamCompoundingFloorRateBuySide gets UnderlyingPaymentStreamCompoundingFloorRateBuySide, Tag 42934.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamCompoundingFloorRateBuySide() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamCompoundingFloorRateBuySideField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamCompoundingFloorRateSellSide gets UnderlyingPaymentStreamCompoundingFloorRateSellSide, Tag 42935.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamCompoundingFloorRateSellSide() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamCompoundingFloorRateSellSideField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamCompoundingInitialRate gets UnderlyingPaymentStreamCompoundingInitialRate, Tag 42936.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamCompoundingInitialRate() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamCompoundingInitialRateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamCompoundingFinalRateRoundingDirection gets UnderlyingPaymentStreamCompoundingFinalRateRoundingDirection, Tag 42937.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamCompoundingFinalRateRoundingDirection() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamCompoundingFinalRateRoundingDirectionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamCompoundingFinalRatePrecision gets UnderlyingPaymentStreamCompoundingFinalRatePrecision, Tag 42938.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamCompoundingFinalRatePrecision() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamCompoundingFinalRatePrecisionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamCompoundingAveragingMethod gets UnderlyingPaymentStreamCompoundingAveragingMethod, Tag 42939.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamCompoundingAveragingMethod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamCompoundingAveragingMethodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamCompoundingNegativeRateTreatment gets UnderlyingPaymentStreamCompoundingNegativeRateTreatment, Tag 42940.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamCompoundingNegativeRateTreatment() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamCompoundingNegativeRateTreatmentField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamCompoundingDatesBusinessDayConvention gets UnderlyingPaymentStreamCompoundingDatesBusinessDayConvention, Tag 42904.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamCompoundingDatesBusinessDayConvention() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamCompoundingDatesBusinessDayConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUnderlyingPaymentStreamCompoundingDatesBusinessCenters gets NoUnderlyingPaymentStreamCompoundingDatesBusinessCenters, Tag 42915.
func (m NoUnderlyingStreams) GetNoUnderlyingPaymentStreamCompoundingDatesBusinessCenters() (NoUnderlyingPaymentStreamCompoundingDatesBusinessCentersRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingPaymentStreamCompoundingDatesBusinessCentersRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetNoUnderlyingPaymentStreamCompoundingDates gets NoUnderlyingPaymentStreamCompoundingDates, Tag 42901.
func (m NoUnderlyingStreams) GetNoUnderlyingPaymentStreamCompoundingDates() (NoUnderlyingPaymentStreamCompoundingDatesRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingPaymentStreamCompoundingDatesRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetUnderlyingPaymentStreamCompoundingDatesRelativeTo gets UnderlyingPaymentStreamCompoundingDatesRelativeTo, Tag 42905.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamCompoundingDatesRelativeTo() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamCompoundingDatesRelativeToField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamCompoundingDatesOffsetPeriod gets UnderlyingPaymentStreamCompoundingDatesOffsetPeriod, Tag 42906.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamCompoundingDatesOffsetPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamCompoundingDatesOffsetPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamCompoundingDatesOffsetUnit gets UnderlyingPaymentStreamCompoundingDatesOffsetUnit, Tag 42907.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamCompoundingDatesOffsetUnit() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamCompoundingDatesOffsetUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamCompoundingDatesOffsetDayType gets UnderlyingPaymentStreamCompoundingDatesOffsetDayType, Tag 42908.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamCompoundingDatesOffsetDayType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamCompoundingDatesOffsetDayTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamCompoundingPeriodSkip gets UnderlyingPaymentStreamCompoundingPeriodSkip, Tag 42909.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamCompoundingPeriodSkip() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamCompoundingPeriodSkipField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamCompoundingStartDateUnadjusted gets UnderlyingPaymentStreamCompoundingStartDateUnadjusted, Tag 42941.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamCompoundingStartDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamCompoundingStartDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamCompoundingStartDateRelativeTo gets UnderlyingPaymentStreamCompoundingStartDateRelativeTo, Tag 42942.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamCompoundingStartDateRelativeTo() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamCompoundingStartDateRelativeToField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamCompoundingStartDateOffsetPeriod gets UnderlyingPaymentStreamCompoundingStartDateOffsetPeriod, Tag 42943.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamCompoundingStartDateOffsetPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamCompoundingStartDateOffsetPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamCompoundingStartDateOffsetUnit gets UnderlyingPaymentStreamCompoundingStartDateOffsetUnit, Tag 42944.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamCompoundingStartDateOffsetUnit() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamCompoundingStartDateOffsetUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamCompoundingStartDateOffsetDayType gets UnderlyingPaymentStreamCompoundingStartDateOffsetDayType, Tag 42945.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamCompoundingStartDateOffsetDayType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamCompoundingStartDateOffsetDayTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamCompoundingStartDateAdjusted gets UnderlyingPaymentStreamCompoundingStartDateAdjusted, Tag 42946.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamCompoundingStartDateAdjusted() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamCompoundingStartDateAdjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamCompoundingEndDateUnadjusted gets UnderlyingPaymentStreamCompoundingEndDateUnadjusted, Tag 42917.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamCompoundingEndDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamCompoundingEndDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamCompoundingEndDateRelativeTo gets UnderlyingPaymentStreamCompoundingEndDateRelativeTo, Tag 42918.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamCompoundingEndDateRelativeTo() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamCompoundingEndDateRelativeToField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamCompoundingEndDateOffsetPeriod gets UnderlyingPaymentStreamCompoundingEndDateOffsetPeriod, Tag 42919.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamCompoundingEndDateOffsetPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamCompoundingEndDateOffsetPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamCompoundingEndDateOffsetUnit gets UnderlyingPaymentStreamCompoundingEndDateOffsetUnit, Tag 42920.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamCompoundingEndDateOffsetUnit() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamCompoundingEndDateOffsetUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamCompoundingEndDateOffsetDayType gets UnderlyingPaymentStreamCompoundingEndDateOffsetDayType, Tag 42921.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamCompoundingEndDateOffsetDayType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamCompoundingEndDateOffsetDayTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamCompoundingEndDateAdjusted gets UnderlyingPaymentStreamCompoundingEndDateAdjusted, Tag 42922.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamCompoundingEndDateAdjusted() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamCompoundingEndDateAdjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamCompoundingFrequencyPeriod gets UnderlyingPaymentStreamCompoundingFrequencyPeriod, Tag 42910.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamCompoundingFrequencyPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamCompoundingFrequencyPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamCompoundingFrequencyUnit gets UnderlyingPaymentStreamCompoundingFrequencyUnit, Tag 42911.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamCompoundingFrequencyUnit() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamCompoundingFrequencyUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamCompoundingRollConvention gets UnderlyingPaymentStreamCompoundingRollConvention, Tag 42912.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamCompoundingRollConvention() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamCompoundingRollConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamBoundsFirstDateUnadjusted gets UnderlyingPaymentStreamBoundsFirstDateUnadjusted, Tag 42913.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamBoundsFirstDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamBoundsFirstDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamBoundsLastDateUnadjusted gets UnderlyingPaymentStreamBoundsLastDateUnadjusted, Tag 42914.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamBoundsLastDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamBoundsLastDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamOtherDayCount gets UnderlyingPaymentStreamOtherDayCount, Tag 43107.
func (m NoUnderlyingStreams) GetUnderlyingPaymentStreamOtherDayCount() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamOtherDayCountField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUnderlyingPaymentSchedules gets NoUnderlyingPaymentSchedules, Tag 40664.
func (m NoUnderlyingStreams) GetNoUnderlyingPaymentSchedules() (NoUnderlyingPaymentSchedulesRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingPaymentSchedulesRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetNoUnderlyingPaymentStubs gets NoUnderlyingPaymentStubs, Tag 40708.
func (m NoUnderlyingStreams) GetNoUnderlyingPaymentStubs() (NoUnderlyingPaymentStubsRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingPaymentStubsRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetUnderlyingStreamText gets UnderlyingStreamText, Tag 40547.
func (m NoUnderlyingStreams) GetUnderlyingStreamText() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamTextField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetEncodedUnderlyingStreamTextLen gets EncodedUnderlyingStreamTextLen, Tag 40988.
func (m NoUnderlyingStreams) GetEncodedUnderlyingStreamTextLen() (v int, err quickfix.MessageRejectError) {
	var f field.EncodedUnderlyingStreamTextLenField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetEncodedUnderlyingStreamText gets EncodedUnderlyingStreamText, Tag 40989.
func (m NoUnderlyingStreams) GetEncodedUnderlyingStreamText() (v string, err quickfix.MessageRejectError) {
	var f field.EncodedUnderlyingStreamTextField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStreamXID gets UnderlyingStreamXID, Tag 42016.
func (m NoUnderlyingStreams) GetUnderlyingStreamXID() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamXIDField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStreamNotionalXIDRef gets UnderlyingStreamNotionalXIDRef, Tag 42018.
func (m NoUnderlyingStreams) GetUnderlyingStreamNotionalXIDRef() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamNotionalXIDRefField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStreamNotionalFrequencyPeriod gets UnderlyingStreamNotionalFrequencyPeriod, Tag 42019.
func (m NoUnderlyingStreams) GetUnderlyingStreamNotionalFrequencyPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamNotionalFrequencyPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStreamNotionalFrequencyUnit gets UnderlyingStreamNotionalFrequencyUnit, Tag 42020.
func (m NoUnderlyingStreams) GetUnderlyingStreamNotionalFrequencyUnit() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamNotionalFrequencyUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStreamNotionalCommodityFrequency gets UnderlyingStreamNotionalCommodityFrequency, Tag 42021.
func (m NoUnderlyingStreams) GetUnderlyingStreamNotionalCommodityFrequency() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamNotionalCommodityFrequencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStreamNotionalUnitOfMeasure gets UnderlyingStreamNotionalUnitOfMeasure, Tag 42022.
func (m NoUnderlyingStreams) GetUnderlyingStreamNotionalUnitOfMeasure() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamNotionalUnitOfMeasureField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStreamTotalNotional gets UnderlyingStreamTotalNotional, Tag 42023.
func (m NoUnderlyingStreams) GetUnderlyingStreamTotalNotional() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamTotalNotionalField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStreamTotalNotionalUnitOfMeasure gets UnderlyingStreamTotalNotionalUnitOfMeasure, Tag 42024.
func (m NoUnderlyingStreams) GetUnderlyingStreamTotalNotionalUnitOfMeasure() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamTotalNotionalUnitOfMeasureField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStreamCommodityBase gets UnderlyingStreamCommodityBase, Tag 41964.
func (m NoUnderlyingStreams) GetUnderlyingStreamCommodityBase() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamCommodityBaseField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStreamCommodityType gets UnderlyingStreamCommodityType, Tag 41965.
func (m NoUnderlyingStreams) GetUnderlyingStreamCommodityType() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamCommodityTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStreamCommoditySecurityID gets UnderlyingStreamCommoditySecurityID, Tag 41966.
func (m NoUnderlyingStreams) GetUnderlyingStreamCommoditySecurityID() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamCommoditySecurityIDField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStreamCommoditySecurityIDSource gets UnderlyingStreamCommoditySecurityIDSource, Tag 41967.
func (m NoUnderlyingStreams) GetUnderlyingStreamCommoditySecurityIDSource() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamCommoditySecurityIDSourceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUnderlyingStreamCommodityAltIDs gets NoUnderlyingStreamCommodityAltIDs, Tag 41990.
func (m NoUnderlyingStreams) GetNoUnderlyingStreamCommodityAltIDs() (NoUnderlyingStreamCommodityAltIDsRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingStreamCommodityAltIDsRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetUnderlyingStreamCommodityDesc gets UnderlyingStreamCommodityDesc, Tag 41968.
func (m NoUnderlyingStreams) GetUnderlyingStreamCommodityDesc() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamCommodityDescField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetEncodedUnderlyingStreamCommodityDescLen gets EncodedUnderlyingStreamCommodityDescLen, Tag 41969.
func (m NoUnderlyingStreams) GetEncodedUnderlyingStreamCommodityDescLen() (v int, err quickfix.MessageRejectError) {
	var f field.EncodedUnderlyingStreamCommodityDescLenField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetEncodedUnderlyingStreamCommodityDesc gets EncodedUnderlyingStreamCommodityDesc, Tag 41970.
func (m NoUnderlyingStreams) GetEncodedUnderlyingStreamCommodityDesc() (v string, err quickfix.MessageRejectError) {
	var f field.EncodedUnderlyingStreamCommodityDescField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUnderlyingStreamAssetAttributes gets NoUnderlyingStreamAssetAttributes, Tag 41800.
func (m NoUnderlyingStreams) GetNoUnderlyingStreamAssetAttributes() (NoUnderlyingStreamAssetAttributesRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingStreamAssetAttributesRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetUnderlyingStreamCommodityUnitOfMeasure gets UnderlyingStreamCommodityUnitOfMeasure, Tag 41971.
func (m NoUnderlyingStreams) GetUnderlyingStreamCommodityUnitOfMeasure() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamCommodityUnitOfMeasureField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStreamCommodityCurrency gets UnderlyingStreamCommodityCurrency, Tag 41972.
func (m NoUnderlyingStreams) GetUnderlyingStreamCommodityCurrency() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamCommodityCurrencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStreamCommodityExchange gets UnderlyingStreamCommodityExchange, Tag 41973.
func (m NoUnderlyingStreams) GetUnderlyingStreamCommodityExchange() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamCommodityExchangeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStreamCommodityRateSource gets UnderlyingStreamCommodityRateSource, Tag 41974.
func (m NoUnderlyingStreams) GetUnderlyingStreamCommodityRateSource() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamCommodityRateSourceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStreamCommodityRateReferencePage gets UnderlyingStreamCommodityRateReferencePage, Tag 41975.
func (m NoUnderlyingStreams) GetUnderlyingStreamCommodityRateReferencePage() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamCommodityRateReferencePageField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStreamCommodityRateReferencePageHeading gets UnderlyingStreamCommodityRateReferencePageHeading, Tag 41976.
func (m NoUnderlyingStreams) GetUnderlyingStreamCommodityRateReferencePageHeading() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamCommodityRateReferencePageHeadingField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStreamDataProvider gets UnderlyingStreamDataProvider, Tag 41977.
func (m NoUnderlyingStreams) GetUnderlyingStreamDataProvider() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamDataProviderField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUnderlyingStreamCommodityDataSources gets NoUnderlyingStreamCommodityDataSources, Tag 41993.
func (m NoUnderlyingStreams) GetNoUnderlyingStreamCommodityDataSources() (NoUnderlyingStreamCommodityDataSourcesRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingStreamCommodityDataSourcesRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetUnderlyingStreamCommodityPricingType gets UnderlyingStreamCommodityPricingType, Tag 41978.
func (m NoUnderlyingStreams) GetUnderlyingStreamCommodityPricingType() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamCommodityPricingTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStreamCommodityNearbySettlDayPeriod gets UnderlyingStreamCommodityNearbySettlDayPeriod, Tag 41979.
func (m NoUnderlyingStreams) GetUnderlyingStreamCommodityNearbySettlDayPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamCommodityNearbySettlDayPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStreamCommodityNearbySettlDayUnit gets UnderlyingStreamCommodityNearbySettlDayUnit, Tag 41980.
func (m NoUnderlyingStreams) GetUnderlyingStreamCommodityNearbySettlDayUnit() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamCommodityNearbySettlDayUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStreamCommoditySettlDateUnadjusted gets UnderlyingStreamCommoditySettlDateUnadjusted, Tag 41981.
func (m NoUnderlyingStreams) GetUnderlyingStreamCommoditySettlDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamCommoditySettlDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStreamCommoditySettlDateBusinessDayConvention gets UnderlyingStreamCommoditySettlDateBusinessDayConvention, Tag 41982.
func (m NoUnderlyingStreams) GetUnderlyingStreamCommoditySettlDateBusinessDayConvention() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamCommoditySettlDateBusinessDayConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUnderlyingStreamCommoditySettlBusinessCenters gets NoUnderlyingStreamCommoditySettlBusinessCenters, Tag 41962.
func (m NoUnderlyingStreams) GetNoUnderlyingStreamCommoditySettlBusinessCenters() (NoUnderlyingStreamCommoditySettlBusinessCentersRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingStreamCommoditySettlBusinessCentersRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetUnderlyingStreamCommoditySettlDateAdjusted gets UnderlyingStreamCommoditySettlDateAdjusted, Tag 41983.
func (m NoUnderlyingStreams) GetUnderlyingStreamCommoditySettlDateAdjusted() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamCommoditySettlDateAdjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStreamCommoditySettlMonth gets UnderlyingStreamCommoditySettlMonth, Tag 41984.
func (m NoUnderlyingStreams) GetUnderlyingStreamCommoditySettlMonth() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamCommoditySettlMonthField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStreamCommoditySettlDateRollPeriod gets UnderlyingStreamCommoditySettlDateRollPeriod, Tag 41985.
func (m NoUnderlyingStreams) GetUnderlyingStreamCommoditySettlDateRollPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamCommoditySettlDateRollPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStreamCommoditySettlDateRollUnit gets UnderlyingStreamCommoditySettlDateRollUnit, Tag 41986.
func (m NoUnderlyingStreams) GetUnderlyingStreamCommoditySettlDateRollUnit() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamCommoditySettlDateRollUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStreamCommoditySettlDayType gets UnderlyingStreamCommoditySettlDayType, Tag 41987.
func (m NoUnderlyingStreams) GetUnderlyingStreamCommoditySettlDayType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamCommoditySettlDayTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUnderlyingStreamCommoditySettlPeriods gets NoUnderlyingStreamCommoditySettlPeriods, Tag 42002.
func (m NoUnderlyingStreams) GetNoUnderlyingStreamCommoditySettlPeriods() (NoUnderlyingStreamCommoditySettlPeriodsRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingStreamCommoditySettlPeriodsRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetUnderlyingStreamCommodityXID gets UnderlyingStreamCommodityXID, Tag 41988.
func (m NoUnderlyingStreams) GetUnderlyingStreamCommodityXID() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamCommodityXIDField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStreamCommodityXIDRef gets UnderlyingStreamCommodityXIDRef, Tag 41989.
func (m NoUnderlyingStreams) GetUnderlyingStreamCommodityXIDRef() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamCommodityXIDRefField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStreamCommodityDeliveryPricingRegion gets UnderlyingStreamCommodityDeliveryPricingRegion, Tag 42589.
func (m NoUnderlyingStreams) GetUnderlyingStreamCommodityDeliveryPricingRegion() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamCommodityDeliveryPricingRegionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDeliveryStreamType gets UnderlyingDeliveryStreamType, Tag 41777.
func (m NoUnderlyingStreams) GetUnderlyingDeliveryStreamType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingDeliveryStreamTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUnderlyingDeliveryStreamCommoditySources gets NoUnderlyingDeliveryStreamCommoditySources, Tag 41808.
func (m NoUnderlyingStreams) GetNoUnderlyingDeliveryStreamCommoditySources() (NoUnderlyingDeliveryStreamCommoditySourcesRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingDeliveryStreamCommoditySourcesRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetUnderlyingDeliveryStreamPipeline gets UnderlyingDeliveryStreamPipeline, Tag 41778.
func (m NoUnderlyingStreams) GetUnderlyingDeliveryStreamPipeline() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingDeliveryStreamPipelineField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDeliveryStreamEntryPoint gets UnderlyingDeliveryStreamEntryPoint, Tag 41779.
func (m NoUnderlyingStreams) GetUnderlyingDeliveryStreamEntryPoint() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingDeliveryStreamEntryPointField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDeliveryStreamWithdrawalPoint gets UnderlyingDeliveryStreamWithdrawalPoint, Tag 41780.
func (m NoUnderlyingStreams) GetUnderlyingDeliveryStreamWithdrawalPoint() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingDeliveryStreamWithdrawalPointField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDeliveryStreamDeliveryPoint gets UnderlyingDeliveryStreamDeliveryPoint, Tag 41781.
func (m NoUnderlyingStreams) GetUnderlyingDeliveryStreamDeliveryPoint() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingDeliveryStreamDeliveryPointField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDeliveryStreamDeliveryRestriction gets UnderlyingDeliveryStreamDeliveryRestriction, Tag 41782.
func (m NoUnderlyingStreams) GetUnderlyingDeliveryStreamDeliveryRestriction() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingDeliveryStreamDeliveryRestrictionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDeliveryStreamDeliveryContingency gets UnderlyingDeliveryStreamDeliveryContingency, Tag 41783.
func (m NoUnderlyingStreams) GetUnderlyingDeliveryStreamDeliveryContingency() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingDeliveryStreamDeliveryContingencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDeliveryStreamDeliveryContingentPartySide gets UnderlyingDeliveryStreamDeliveryContingentPartySide, Tag 41784.
func (m NoUnderlyingStreams) GetUnderlyingDeliveryStreamDeliveryContingentPartySide() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingDeliveryStreamDeliveryContingentPartySideField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDeliveryStreamDeliverAtSourceIndicator gets UnderlyingDeliveryStreamDeliverAtSourceIndicator, Tag 41785.
func (m NoUnderlyingStreams) GetUnderlyingDeliveryStreamDeliverAtSourceIndicator() (v bool, err quickfix.MessageRejectError) {
	var f field.UnderlyingDeliveryStreamDeliverAtSourceIndicatorField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDeliveryStreamRiskApportionment gets UnderlyingDeliveryStreamRiskApportionment, Tag 41786.
func (m NoUnderlyingStreams) GetUnderlyingDeliveryStreamRiskApportionment() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingDeliveryStreamRiskApportionmentField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDeliveryStreamRiskApportionmentSource gets UnderlyingDeliveryStreamRiskApportionmentSource, Tag 41587.
func (m NoUnderlyingStreams) GetUnderlyingDeliveryStreamRiskApportionmentSource() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingDeliveryStreamRiskApportionmentSourceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUnderlyingDeliveryStreamCycles gets NoUnderlyingDeliveryStreamCycles, Tag 41804.
func (m NoUnderlyingStreams) GetNoUnderlyingDeliveryStreamCycles() (NoUnderlyingDeliveryStreamCyclesRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingDeliveryStreamCyclesRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetUnderlyingDeliveryStreamTitleTransferLocation gets UnderlyingDeliveryStreamTitleTransferLocation, Tag 41787.
func (m NoUnderlyingStreams) GetUnderlyingDeliveryStreamTitleTransferLocation() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingDeliveryStreamTitleTransferLocationField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDeliveryStreamTitleTransferCondition gets UnderlyingDeliveryStreamTitleTransferCondition, Tag 41788.
func (m NoUnderlyingStreams) GetUnderlyingDeliveryStreamTitleTransferCondition() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingDeliveryStreamTitleTransferConditionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDeliveryStreamImporterOfRecord gets UnderlyingDeliveryStreamImporterOfRecord, Tag 41789.
func (m NoUnderlyingStreams) GetUnderlyingDeliveryStreamImporterOfRecord() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingDeliveryStreamImporterOfRecordField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDeliveryStreamNegativeTolerance gets UnderlyingDeliveryStreamNegativeTolerance, Tag 41790.
func (m NoUnderlyingStreams) GetUnderlyingDeliveryStreamNegativeTolerance() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingDeliveryStreamNegativeToleranceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDeliveryStreamPositiveTolerance gets UnderlyingDeliveryStreamPositiveTolerance, Tag 41791.
func (m NoUnderlyingStreams) GetUnderlyingDeliveryStreamPositiveTolerance() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingDeliveryStreamPositiveToleranceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDeliveryStreamToleranceUnitOfMeasure gets UnderlyingDeliveryStreamToleranceUnitOfMeasure, Tag 41792.
func (m NoUnderlyingStreams) GetUnderlyingDeliveryStreamToleranceUnitOfMeasure() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingDeliveryStreamToleranceUnitOfMeasureField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDeliveryStreamToleranceType gets UnderlyingDeliveryStreamToleranceType, Tag 41793.
func (m NoUnderlyingStreams) GetUnderlyingDeliveryStreamToleranceType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingDeliveryStreamToleranceTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDeliveryStreamToleranceOptionSide gets UnderlyingDeliveryStreamToleranceOptionSide, Tag 41794.
func (m NoUnderlyingStreams) GetUnderlyingDeliveryStreamToleranceOptionSide() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingDeliveryStreamToleranceOptionSideField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDeliveryStreamTotalPositiveTolerance gets UnderlyingDeliveryStreamTotalPositiveTolerance, Tag 41795.
func (m NoUnderlyingStreams) GetUnderlyingDeliveryStreamTotalPositiveTolerance() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingDeliveryStreamTotalPositiveToleranceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDeliveryStreamTotalNegativeTolerance gets UnderlyingDeliveryStreamTotalNegativeTolerance, Tag 41796.
func (m NoUnderlyingStreams) GetUnderlyingDeliveryStreamTotalNegativeTolerance() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingDeliveryStreamTotalNegativeToleranceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDeliveryStreamNotionalConversionFactor gets UnderlyingDeliveryStreamNotionalConversionFactor, Tag 41797.
func (m NoUnderlyingStreams) GetUnderlyingDeliveryStreamNotionalConversionFactor() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingDeliveryStreamNotionalConversionFactorField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDeliveryStreamTransportEquipment gets UnderlyingDeliveryStreamTransportEquipment, Tag 41798.
func (m NoUnderlyingStreams) GetUnderlyingDeliveryStreamTransportEquipment() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingDeliveryStreamTransportEquipmentField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDeliveryStreamElectingPartySide gets UnderlyingDeliveryStreamElectingPartySide, Tag 41799.
func (m NoUnderlyingStreams) GetUnderlyingDeliveryStreamElectingPartySide() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingDeliveryStreamElectingPartySideField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDeliveryStreamDeliveryPointSource gets UnderlyingDeliveryStreamDeliveryPointSource, Tag 42196.
func (m NoUnderlyingStreams) GetUnderlyingDeliveryStreamDeliveryPointSource() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingDeliveryStreamDeliveryPointSourceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDeliveryStreamDeliveryPointDesc gets UnderlyingDeliveryStreamDeliveryPointDesc, Tag 42197.
func (m NoUnderlyingStreams) GetUnderlyingDeliveryStreamDeliveryPointDesc() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingDeliveryStreamDeliveryPointDescField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDeliveryStreamRouteOrCharter gets UnderlyingDeliveryStreamRouteOrCharter, Tag 43096.
func (m NoUnderlyingStreams) GetUnderlyingDeliveryStreamRouteOrCharter() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingDeliveryStreamRouteOrCharterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUnderlyingDeliverySchedules gets NoUnderlyingDeliverySchedules, Tag 41756.
func (m NoUnderlyingStreams) GetNoUnderlyingDeliverySchedules() (NoUnderlyingDeliverySchedulesRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingDeliverySchedulesRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetUnderlyingStreamVersion gets UnderlyingStreamVersion, Tag 43083.
func (m NoUnderlyingStreams) GetUnderlyingStreamVersion() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamVersionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStreamVersionEffectiveDate gets UnderlyingStreamVersionEffectiveDate, Tag 43084.
func (m NoUnderlyingStreams) GetUnderlyingStreamVersionEffectiveDate() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamVersionEffectiveDateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStreamNotionalDeterminationMethod gets UnderlyingStreamNotionalDeterminationMethod, Tag 43085.
func (m NoUnderlyingStreams) GetUnderlyingStreamNotionalDeterminationMethod() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamNotionalDeterminationMethodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStreamNotionalAdjustments gets UnderlyingStreamNotionalAdjustments, Tag 43086.
func (m NoUnderlyingStreams) GetUnderlyingStreamNotionalAdjustments() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamNotionalAdjustmentsField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingStreamType returns true if UnderlyingStreamType is present, Tag 40541.
func (m NoUnderlyingStreams) HasUnderlyingStreamType() bool {
	return m.Has(tag.UnderlyingStreamType)
}

// HasUnderlyingStreamDesc returns true if UnderlyingStreamDesc is present, Tag 40542.
func (m NoUnderlyingStreams) HasUnderlyingStreamDesc() bool {
	return m.Has(tag.UnderlyingStreamDesc)
}

// HasUnderlyingStreamPaySide returns true if UnderlyingStreamPaySide is present, Tag 40543.
func (m NoUnderlyingStreams) HasUnderlyingStreamPaySide() bool {
	return m.Has(tag.UnderlyingStreamPaySide)
}

// HasUnderlyingStreamReceiveSide returns true if UnderlyingStreamReceiveSide is present, Tag 40544.
func (m NoUnderlyingStreams) HasUnderlyingStreamReceiveSide() bool {
	return m.Has(tag.UnderlyingStreamReceiveSide)
}

// HasUnderlyingStreamNotional returns true if UnderlyingStreamNotional is present, Tag 40545.
func (m NoUnderlyingStreams) HasUnderlyingStreamNotional() bool {
	return m.Has(tag.UnderlyingStreamNotional)
}

// HasUnderlyingStreamCurrency returns true if UnderlyingStreamCurrency is present, Tag 40546.
func (m NoUnderlyingStreams) HasUnderlyingStreamCurrency() bool {
	return m.Has(tag.UnderlyingStreamCurrency)
}

// HasUnderlyingStreamEffectiveDateUnadjusted returns true if UnderlyingStreamEffectiveDateUnadjusted is present, Tag 40057.
func (m NoUnderlyingStreams) HasUnderlyingStreamEffectiveDateUnadjusted() bool {
	return m.Has(tag.UnderlyingStreamEffectiveDateUnadjusted)
}

// HasUnderlyingStreamEffectiveDateBusinessDayConvention returns true if UnderlyingStreamEffectiveDateBusinessDayConvention is present, Tag 40058.
func (m NoUnderlyingStreams) HasUnderlyingStreamEffectiveDateBusinessDayConvention() bool {
	return m.Has(tag.UnderlyingStreamEffectiveDateBusinessDayConvention)
}

// HasNoUnderlyingStreamEffectiveDateBusinessCenters returns true if NoUnderlyingStreamEffectiveDateBusinessCenters is present, Tag 40975.
func (m NoUnderlyingStreams) HasNoUnderlyingStreamEffectiveDateBusinessCenters() bool {
	return m.Has(tag.NoUnderlyingStreamEffectiveDateBusinessCenters)
}

// HasUnderlyingStreamEffectiveDateRelativeTo returns true if UnderlyingStreamEffectiveDateRelativeTo is present, Tag 40060.
func (m NoUnderlyingStreams) HasUnderlyingStreamEffectiveDateRelativeTo() bool {
	return m.Has(tag.UnderlyingStreamEffectiveDateRelativeTo)
}

// HasUnderlyingStreamEffectiveDateOffsetPeriod returns true if UnderlyingStreamEffectiveDateOffsetPeriod is present, Tag 40061.
func (m NoUnderlyingStreams) HasUnderlyingStreamEffectiveDateOffsetPeriod() bool {
	return m.Has(tag.UnderlyingStreamEffectiveDateOffsetPeriod)
}

// HasUnderlyingStreamEffectiveDateOffsetUnit returns true if UnderlyingStreamEffectiveDateOffsetUnit is present, Tag 40062.
func (m NoUnderlyingStreams) HasUnderlyingStreamEffectiveDateOffsetUnit() bool {
	return m.Has(tag.UnderlyingStreamEffectiveDateOffsetUnit)
}

// HasUnderlyingStreamEffectiveDateOffsetDayType returns true if UnderlyingStreamEffectiveDateOffsetDayType is present, Tag 40063.
func (m NoUnderlyingStreams) HasUnderlyingStreamEffectiveDateOffsetDayType() bool {
	return m.Has(tag.UnderlyingStreamEffectiveDateOffsetDayType)
}

// HasUnderlyingStreamEffectiveDateAdjusted returns true if UnderlyingStreamEffectiveDateAdjusted is present, Tag 40064.
func (m NoUnderlyingStreams) HasUnderlyingStreamEffectiveDateAdjusted() bool {
	return m.Has(tag.UnderlyingStreamEffectiveDateAdjusted)
}

// HasUnderlyingStreamTerminationDateUnadjusted returns true if UnderlyingStreamTerminationDateUnadjusted is present, Tag 40548.
func (m NoUnderlyingStreams) HasUnderlyingStreamTerminationDateUnadjusted() bool {
	return m.Has(tag.UnderlyingStreamTerminationDateUnadjusted)
}

// HasUnderlyingStreamTerminationDateBusinessDayConvention returns true if UnderlyingStreamTerminationDateBusinessDayConvention is present, Tag 40549.
func (m NoUnderlyingStreams) HasUnderlyingStreamTerminationDateBusinessDayConvention() bool {
	return m.Has(tag.UnderlyingStreamTerminationDateBusinessDayConvention)
}

// HasNoUnderlyingStreamTerminationDateBusinessCenters returns true if NoUnderlyingStreamTerminationDateBusinessCenters is present, Tag 40976.
func (m NoUnderlyingStreams) HasNoUnderlyingStreamTerminationDateBusinessCenters() bool {
	return m.Has(tag.NoUnderlyingStreamTerminationDateBusinessCenters)
}

// HasUnderlyingStreamTerminationDateRelativeTo returns true if UnderlyingStreamTerminationDateRelativeTo is present, Tag 40551.
func (m NoUnderlyingStreams) HasUnderlyingStreamTerminationDateRelativeTo() bool {
	return m.Has(tag.UnderlyingStreamTerminationDateRelativeTo)
}

// HasUnderlyingStreamTerminationDateOffsetPeriod returns true if UnderlyingStreamTerminationDateOffsetPeriod is present, Tag 40552.
func (m NoUnderlyingStreams) HasUnderlyingStreamTerminationDateOffsetPeriod() bool {
	return m.Has(tag.UnderlyingStreamTerminationDateOffsetPeriod)
}

// HasUnderlyingStreamTerminationDateOffsetUnit returns true if UnderlyingStreamTerminationDateOffsetUnit is present, Tag 40553.
func (m NoUnderlyingStreams) HasUnderlyingStreamTerminationDateOffsetUnit() bool {
	return m.Has(tag.UnderlyingStreamTerminationDateOffsetUnit)
}

// HasUnderlyingStreamTerminationDateOffsetDayType returns true if UnderlyingStreamTerminationDateOffsetDayType is present, Tag 40554.
func (m NoUnderlyingStreams) HasUnderlyingStreamTerminationDateOffsetDayType() bool {
	return m.Has(tag.UnderlyingStreamTerminationDateOffsetDayType)
}

// HasUnderlyingStreamTerminationDateAdjusted returns true if UnderlyingStreamTerminationDateAdjusted is present, Tag 40555.
func (m NoUnderlyingStreams) HasUnderlyingStreamTerminationDateAdjusted() bool {
	return m.Has(tag.UnderlyingStreamTerminationDateAdjusted)
}

// HasUnderlyingStreamCalculationPeriodBusinessDayConvention returns true if UnderlyingStreamCalculationPeriodBusinessDayConvention is present, Tag 40556.
func (m NoUnderlyingStreams) HasUnderlyingStreamCalculationPeriodBusinessDayConvention() bool {
	return m.Has(tag.UnderlyingStreamCalculationPeriodBusinessDayConvention)
}

// HasNoUnderlyingStreamCalculationPeriodBusinessCenters returns true if NoUnderlyingStreamCalculationPeriodBusinessCenters is present, Tag 40973.
func (m NoUnderlyingStreams) HasNoUnderlyingStreamCalculationPeriodBusinessCenters() bool {
	return m.Has(tag.NoUnderlyingStreamCalculationPeriodBusinessCenters)
}

// HasUnderlyingStreamFirstPeriodStartDateUnadjusted returns true if UnderlyingStreamFirstPeriodStartDateUnadjusted is present, Tag 40558.
func (m NoUnderlyingStreams) HasUnderlyingStreamFirstPeriodStartDateUnadjusted() bool {
	return m.Has(tag.UnderlyingStreamFirstPeriodStartDateUnadjusted)
}

// HasUnderlyingStreamFirstPeriodStartDateBusinessDayConvention returns true if UnderlyingStreamFirstPeriodStartDateBusinessDayConvention is present, Tag 40559.
func (m NoUnderlyingStreams) HasUnderlyingStreamFirstPeriodStartDateBusinessDayConvention() bool {
	return m.Has(tag.UnderlyingStreamFirstPeriodStartDateBusinessDayConvention)
}

// HasNoUnderlyingStreamFirstPeriodStartDateBusinessCenters returns true if NoUnderlyingStreamFirstPeriodStartDateBusinessCenters is present, Tag 40974.
func (m NoUnderlyingStreams) HasNoUnderlyingStreamFirstPeriodStartDateBusinessCenters() bool {
	return m.Has(tag.NoUnderlyingStreamFirstPeriodStartDateBusinessCenters)
}

// HasUnderlyingStreamFirstPeriodStartDateAdjusted returns true if UnderlyingStreamFirstPeriodStartDateAdjusted is present, Tag 40561.
func (m NoUnderlyingStreams) HasUnderlyingStreamFirstPeriodStartDateAdjusted() bool {
	return m.Has(tag.UnderlyingStreamFirstPeriodStartDateAdjusted)
}

// HasUnderlyingStreamFirstRegularPeriodStartDateUnadjusted returns true if UnderlyingStreamFirstRegularPeriodStartDateUnadjusted is present, Tag 40562.
func (m NoUnderlyingStreams) HasUnderlyingStreamFirstRegularPeriodStartDateUnadjusted() bool {
	return m.Has(tag.UnderlyingStreamFirstRegularPeriodStartDateUnadjusted)
}

// HasUnderlyingStreamFirstCompoundingPeriodEndDateUnadjusted returns true if UnderlyingStreamFirstCompoundingPeriodEndDateUnadjusted is present, Tag 40563.
func (m NoUnderlyingStreams) HasUnderlyingStreamFirstCompoundingPeriodEndDateUnadjusted() bool {
	return m.Has(tag.UnderlyingStreamFirstCompoundingPeriodEndDateUnadjusted)
}

// HasUnderlyingStreamLastRegularPeriodEndDateUnadjusted returns true if UnderlyingStreamLastRegularPeriodEndDateUnadjusted is present, Tag 40564.
func (m NoUnderlyingStreams) HasUnderlyingStreamLastRegularPeriodEndDateUnadjusted() bool {
	return m.Has(tag.UnderlyingStreamLastRegularPeriodEndDateUnadjusted)
}

// HasUnderlyingStreamCalculationFrequencyPeriod returns true if UnderlyingStreamCalculationFrequencyPeriod is present, Tag 40565.
func (m NoUnderlyingStreams) HasUnderlyingStreamCalculationFrequencyPeriod() bool {
	return m.Has(tag.UnderlyingStreamCalculationFrequencyPeriod)
}

// HasUnderlyingStreamCalculationFrequencyUnit returns true if UnderlyingStreamCalculationFrequencyUnit is present, Tag 40566.
func (m NoUnderlyingStreams) HasUnderlyingStreamCalculationFrequencyUnit() bool {
	return m.Has(tag.UnderlyingStreamCalculationFrequencyUnit)
}

// HasUnderlyingStreamCalculationRollConvention returns true if UnderlyingStreamCalculationRollConvention is present, Tag 40567.
func (m NoUnderlyingStreams) HasUnderlyingStreamCalculationRollConvention() bool {
	return m.Has(tag.UnderlyingStreamCalculationRollConvention)
}

// HasUnderlyingStreamCalculationPeriodDatesXID returns true if UnderlyingStreamCalculationPeriodDatesXID is present, Tag 41957.
func (m NoUnderlyingStreams) HasUnderlyingStreamCalculationPeriodDatesXID() bool {
	return m.Has(tag.UnderlyingStreamCalculationPeriodDatesXID)
}

// HasUnderlyingStreamCalculationPeriodDatesXIDRef returns true if UnderlyingStreamCalculationPeriodDatesXIDRef is present, Tag 41958.
func (m NoUnderlyingStreams) HasUnderlyingStreamCalculationPeriodDatesXIDRef() bool {
	return m.Has(tag.UnderlyingStreamCalculationPeriodDatesXIDRef)
}

// HasNoUnderlyingStreamCalculationPeriodDates returns true if NoUnderlyingStreamCalculationPeriodDates is present, Tag 41954.
func (m NoUnderlyingStreams) HasNoUnderlyingStreamCalculationPeriodDates() bool {
	return m.Has(tag.NoUnderlyingStreamCalculationPeriodDates)
}

// HasUnderlyingStreamCalculationBalanceOfFirstPeriod returns true if UnderlyingStreamCalculationBalanceOfFirstPeriod is present, Tag 41959.
func (m NoUnderlyingStreams) HasUnderlyingStreamCalculationBalanceOfFirstPeriod() bool {
	return m.Has(tag.UnderlyingStreamCalculationBalanceOfFirstPeriod)
}

// HasUnderlyingStreamCalculationCorrectionPeriod returns true if UnderlyingStreamCalculationCorrectionPeriod is present, Tag 41960.
func (m NoUnderlyingStreams) HasUnderlyingStreamCalculationCorrectionPeriod() bool {
	return m.Has(tag.UnderlyingStreamCalculationCorrectionPeriod)
}

// HasUnderlyingStreamCalculationCorrectionUnit returns true if UnderlyingStreamCalculationCorrectionUnit is present, Tag 41961.
func (m NoUnderlyingStreams) HasUnderlyingStreamCalculationCorrectionUnit() bool {
	return m.Has(tag.UnderlyingStreamCalculationCorrectionUnit)
}

// HasUnderlyingPaymentStreamType returns true if UnderlyingPaymentStreamType is present, Tag 40568.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamType() bool {
	return m.Has(tag.UnderlyingPaymentStreamType)
}

// HasUnderlyingPaymentStreamMarketRate returns true if UnderlyingPaymentStreamMarketRate is present, Tag 40569.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamMarketRate() bool {
	return m.Has(tag.UnderlyingPaymentStreamMarketRate)
}

// HasUnderlyingPaymentStreamDelayIndicator returns true if UnderlyingPaymentStreamDelayIndicator is present, Tag 40570.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamDelayIndicator() bool {
	return m.Has(tag.UnderlyingPaymentStreamDelayIndicator)
}

// HasUnderlyingPaymentStreamSettlCurrency returns true if UnderlyingPaymentStreamSettlCurrency is present, Tag 40571.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamSettlCurrency() bool {
	return m.Has(tag.UnderlyingPaymentStreamSettlCurrency)
}

// HasUnderlyingPaymentStreamDayCount returns true if UnderlyingPaymentStreamDayCount is present, Tag 40572.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamDayCount() bool {
	return m.Has(tag.UnderlyingPaymentStreamDayCount)
}

// HasUnderlyingPaymentStreamAccrualDays returns true if UnderlyingPaymentStreamAccrualDays is present, Tag 40573.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamAccrualDays() bool {
	return m.Has(tag.UnderlyingPaymentStreamAccrualDays)
}

// HasUnderlyingPaymentStreamDiscountType returns true if UnderlyingPaymentStreamDiscountType is present, Tag 40574.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamDiscountType() bool {
	return m.Has(tag.UnderlyingPaymentStreamDiscountType)
}

// HasUnderlyingPaymentStreamDiscountRate returns true if UnderlyingPaymentStreamDiscountRate is present, Tag 40575.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamDiscountRate() bool {
	return m.Has(tag.UnderlyingPaymentStreamDiscountRate)
}

// HasUnderlyingPaymentStreamDiscountRateDayCount returns true if UnderlyingPaymentStreamDiscountRateDayCount is present, Tag 40576.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamDiscountRateDayCount() bool {
	return m.Has(tag.UnderlyingPaymentStreamDiscountRateDayCount)
}

// HasUnderlyingPaymentStreamCompoundingMethod returns true if UnderlyingPaymentStreamCompoundingMethod is present, Tag 40577.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamCompoundingMethod() bool {
	return m.Has(tag.UnderlyingPaymentStreamCompoundingMethod)
}

// HasUnderlyingPaymentStreamInitialPrincipalExchangeIndicator returns true if UnderlyingPaymentStreamInitialPrincipalExchangeIndicator is present, Tag 40578.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamInitialPrincipalExchangeIndicator() bool {
	return m.Has(tag.UnderlyingPaymentStreamInitialPrincipalExchangeIndicator)
}

// HasUnderlyingPaymentStreamInterimPrincipalExchangeIndicator returns true if UnderlyingPaymentStreamInterimPrincipalExchangeIndicator is present, Tag 40579.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamInterimPrincipalExchangeIndicator() bool {
	return m.Has(tag.UnderlyingPaymentStreamInterimPrincipalExchangeIndicator)
}

// HasUnderlyingPaymentStreamFinalPrincipalExchangeIndicator returns true if UnderlyingPaymentStreamFinalPrincipalExchangeIndicator is present, Tag 40580.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamFinalPrincipalExchangeIndicator() bool {
	return m.Has(tag.UnderlyingPaymentStreamFinalPrincipalExchangeIndicator)
}

// HasUnderlyingPaymentStreamPaymentDateBusinessDayConvention returns true if UnderlyingPaymentStreamPaymentDateBusinessDayConvention is present, Tag 40581.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamPaymentDateBusinessDayConvention() bool {
	return m.Has(tag.UnderlyingPaymentStreamPaymentDateBusinessDayConvention)
}

// HasNoUnderlyingPaymentStreamPaymentDateBusinessCenters returns true if NoUnderlyingPaymentStreamPaymentDateBusinessCenters is present, Tag 40969.
func (m NoUnderlyingStreams) HasNoUnderlyingPaymentStreamPaymentDateBusinessCenters() bool {
	return m.Has(tag.NoUnderlyingPaymentStreamPaymentDateBusinessCenters)
}

// HasUnderlyingPaymentStreamPaymentFrequencyPeriod returns true if UnderlyingPaymentStreamPaymentFrequencyPeriod is present, Tag 40583.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamPaymentFrequencyPeriod() bool {
	return m.Has(tag.UnderlyingPaymentStreamPaymentFrequencyPeriod)
}

// HasUnderlyingPaymentStreamPaymentFrequencyUnit returns true if UnderlyingPaymentStreamPaymentFrequencyUnit is present, Tag 40584.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamPaymentFrequencyUnit() bool {
	return m.Has(tag.UnderlyingPaymentStreamPaymentFrequencyUnit)
}

// HasUnderlyingPaymentStreamPaymentRollConvention returns true if UnderlyingPaymentStreamPaymentRollConvention is present, Tag 40585.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamPaymentRollConvention() bool {
	return m.Has(tag.UnderlyingPaymentStreamPaymentRollConvention)
}

// HasUnderlyingPaymentStreamFirstPaymentDateUnadjusted returns true if UnderlyingPaymentStreamFirstPaymentDateUnadjusted is present, Tag 40586.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamFirstPaymentDateUnadjusted() bool {
	return m.Has(tag.UnderlyingPaymentStreamFirstPaymentDateUnadjusted)
}

// HasUnderlyingPaymentStreamLastRegularPaymentDateUnadjusted returns true if UnderlyingPaymentStreamLastRegularPaymentDateUnadjusted is present, Tag 40587.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamLastRegularPaymentDateUnadjusted() bool {
	return m.Has(tag.UnderlyingPaymentStreamLastRegularPaymentDateUnadjusted)
}

// HasUnderlyingPaymentStreamPaymentDateRelativeTo returns true if UnderlyingPaymentStreamPaymentDateRelativeTo is present, Tag 40588.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamPaymentDateRelativeTo() bool {
	return m.Has(tag.UnderlyingPaymentStreamPaymentDateRelativeTo)
}

// HasUnderlyingPaymentStreamPaymentDateOffsetPeriod returns true if UnderlyingPaymentStreamPaymentDateOffsetPeriod is present, Tag 40589.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamPaymentDateOffsetPeriod() bool {
	return m.Has(tag.UnderlyingPaymentStreamPaymentDateOffsetPeriod)
}

// HasUnderlyingPaymentStreamPaymentDateOffsetUnit returns true if UnderlyingPaymentStreamPaymentDateOffsetUnit is present, Tag 40590.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamPaymentDateOffsetUnit() bool {
	return m.Has(tag.UnderlyingPaymentStreamPaymentDateOffsetUnit)
}

// HasUnderlyingPaymentStreamPaymentDateOffsetDayType returns true if UnderlyingPaymentStreamPaymentDateOffsetDayType is present, Tag 40591.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamPaymentDateOffsetDayType() bool {
	return m.Has(tag.UnderlyingPaymentStreamPaymentDateOffsetDayType)
}

// HasNoUnderlyingPaymentStreamPaymentDates returns true if NoUnderlyingPaymentStreamPaymentDates is present, Tag 41937.
func (m NoUnderlyingStreams) HasNoUnderlyingPaymentStreamPaymentDates() bool {
	return m.Has(tag.NoUnderlyingPaymentStreamPaymentDates)
}

// HasUnderlyingPaymentStreamMasterAgreementPaymentDatesIndicator returns true if UnderlyingPaymentStreamMasterAgreementPaymentDatesIndicator is present, Tag 41940.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamMasterAgreementPaymentDatesIndicator() bool {
	return m.Has(tag.UnderlyingPaymentStreamMasterAgreementPaymentDatesIndicator)
}

// HasUnderlyingPaymentStreamFinalPricePaymentDateUnadjusted returns true if UnderlyingPaymentStreamFinalPricePaymentDateUnadjusted is present, Tag 42949.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamFinalPricePaymentDateUnadjusted() bool {
	return m.Has(tag.UnderlyingPaymentStreamFinalPricePaymentDateUnadjusted)
}

// HasUnderlyingPaymentStreamFinalPricePaymentDateRelativeTo returns true if UnderlyingPaymentStreamFinalPricePaymentDateRelativeTo is present, Tag 42950.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamFinalPricePaymentDateRelativeTo() bool {
	return m.Has(tag.UnderlyingPaymentStreamFinalPricePaymentDateRelativeTo)
}

// HasUnderlyingPaymentStreamFinalPricePaymentDateOffsetPeriod returns true if UnderlyingPaymentStreamFinalPricePaymentDateOffsetPeriod is present, Tag 42951.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamFinalPricePaymentDateOffsetPeriod() bool {
	return m.Has(tag.UnderlyingPaymentStreamFinalPricePaymentDateOffsetPeriod)
}

// HasUnderlyingPaymentStreamFinalPricePaymentDateOffsetUnit returns true if UnderlyingPaymentStreamFinalPricePaymentDateOffsetUnit is present, Tag 42952.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamFinalPricePaymentDateOffsetUnit() bool {
	return m.Has(tag.UnderlyingPaymentStreamFinalPricePaymentDateOffsetUnit)
}

// HasUnderlyingPaymentStreamFinalPricePaymentDateOffsetDayType returns true if UnderlyingPaymentStreamFinalPricePaymentDateOffsetDayType is present, Tag 42953.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamFinalPricePaymentDateOffsetDayType() bool {
	return m.Has(tag.UnderlyingPaymentStreamFinalPricePaymentDateOffsetDayType)
}

// HasUnderlyingPaymentStreamFinalPricePaymentDateAdjusted returns true if UnderlyingPaymentStreamFinalPricePaymentDateAdjusted is present, Tag 42954.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamFinalPricePaymentDateAdjusted() bool {
	return m.Has(tag.UnderlyingPaymentStreamFinalPricePaymentDateAdjusted)
}

// HasUnderlyingPaymentStreamResetDateRelativeTo returns true if UnderlyingPaymentStreamResetDateRelativeTo is present, Tag 40592.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamResetDateRelativeTo() bool {
	return m.Has(tag.UnderlyingPaymentStreamResetDateRelativeTo)
}

// HasUnderlyingPaymentStreamResetDateBusinessDayConvention returns true if UnderlyingPaymentStreamResetDateBusinessDayConvention is present, Tag 40593.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamResetDateBusinessDayConvention() bool {
	return m.Has(tag.UnderlyingPaymentStreamResetDateBusinessDayConvention)
}

// HasNoUnderlyingPaymentStreamResetDateBusinessCenters returns true if NoUnderlyingPaymentStreamResetDateBusinessCenters is present, Tag 40970.
func (m NoUnderlyingStreams) HasNoUnderlyingPaymentStreamResetDateBusinessCenters() bool {
	return m.Has(tag.NoUnderlyingPaymentStreamResetDateBusinessCenters)
}

// HasUnderlyingPaymentStreamResetFrequencyPeriod returns true if UnderlyingPaymentStreamResetFrequencyPeriod is present, Tag 40595.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamResetFrequencyPeriod() bool {
	return m.Has(tag.UnderlyingPaymentStreamResetFrequencyPeriod)
}

// HasUnderlyingPaymentStreamResetFrequencyUnit returns true if UnderlyingPaymentStreamResetFrequencyUnit is present, Tag 40596.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamResetFrequencyUnit() bool {
	return m.Has(tag.UnderlyingPaymentStreamResetFrequencyUnit)
}

// HasUnderlyingPaymentStreamResetWeeklyRollConvention returns true if UnderlyingPaymentStreamResetWeeklyRollConvention is present, Tag 40597.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamResetWeeklyRollConvention() bool {
	return m.Has(tag.UnderlyingPaymentStreamResetWeeklyRollConvention)
}

// HasUnderlyingPaymentStreamInitialFixingDateRelativeTo returns true if UnderlyingPaymentStreamInitialFixingDateRelativeTo is present, Tag 40598.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamInitialFixingDateRelativeTo() bool {
	return m.Has(tag.UnderlyingPaymentStreamInitialFixingDateRelativeTo)
}

// HasUnderlyingPaymentStreamInitialFixingDateBusinessDayConvention returns true if UnderlyingPaymentStreamInitialFixingDateBusinessDayConvention is present, Tag 40599.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamInitialFixingDateBusinessDayConvention() bool {
	return m.Has(tag.UnderlyingPaymentStreamInitialFixingDateBusinessDayConvention)
}

// HasNoUnderlyingPaymentStreamInitialFixingDateBusinessCenters returns true if NoUnderlyingPaymentStreamInitialFixingDateBusinessCenters is present, Tag 40971.
func (m NoUnderlyingStreams) HasNoUnderlyingPaymentStreamInitialFixingDateBusinessCenters() bool {
	return m.Has(tag.NoUnderlyingPaymentStreamInitialFixingDateBusinessCenters)
}

// HasUnderlyingPaymentStreamInitialFixingDateOffsetPeriod returns true if UnderlyingPaymentStreamInitialFixingDateOffsetPeriod is present, Tag 40601.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamInitialFixingDateOffsetPeriod() bool {
	return m.Has(tag.UnderlyingPaymentStreamInitialFixingDateOffsetPeriod)
}

// HasUnderlyingPaymentStreamInitialFixingDateOffsetUnit returns true if UnderlyingPaymentStreamInitialFixingDateOffsetUnit is present, Tag 40602.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamInitialFixingDateOffsetUnit() bool {
	return m.Has(tag.UnderlyingPaymentStreamInitialFixingDateOffsetUnit)
}

// HasUnderlyingPaymentStreamInitialFixingDateOffsetDayType returns true if UnderlyingPaymentStreamInitialFixingDateOffsetDayType is present, Tag 40603.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamInitialFixingDateOffsetDayType() bool {
	return m.Has(tag.UnderlyingPaymentStreamInitialFixingDateOffsetDayType)
}

// HasUnderlyingPaymentStreamInitialFixingDateAdjusted returns true if UnderlyingPaymentStreamInitialFixingDateAdjusted is present, Tag 40604.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamInitialFixingDateAdjusted() bool {
	return m.Has(tag.UnderlyingPaymentStreamInitialFixingDateAdjusted)
}

// HasUnderlyingPaymentStreamFixingDateRelativeTo returns true if UnderlyingPaymentStreamFixingDateRelativeTo is present, Tag 40605.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamFixingDateRelativeTo() bool {
	return m.Has(tag.UnderlyingPaymentStreamFixingDateRelativeTo)
}

// HasUnderlyingPaymentStreamFixingDateBusinessDayConvention returns true if UnderlyingPaymentStreamFixingDateBusinessDayConvention is present, Tag 40606.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamFixingDateBusinessDayConvention() bool {
	return m.Has(tag.UnderlyingPaymentStreamFixingDateBusinessDayConvention)
}

// HasNoUnderlyingPaymentStreamFixingDateBusinessCenters returns true if NoUnderlyingPaymentStreamFixingDateBusinessCenters is present, Tag 40972.
func (m NoUnderlyingStreams) HasNoUnderlyingPaymentStreamFixingDateBusinessCenters() bool {
	return m.Has(tag.NoUnderlyingPaymentStreamFixingDateBusinessCenters)
}

// HasUnderlyingPaymentStreamFixingDateOffsetPeriod returns true if UnderlyingPaymentStreamFixingDateOffsetPeriod is present, Tag 40608.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamFixingDateOffsetPeriod() bool {
	return m.Has(tag.UnderlyingPaymentStreamFixingDateOffsetPeriod)
}

// HasUnderlyingPaymentStreamFixingDateOffsetUnit returns true if UnderlyingPaymentStreamFixingDateOffsetUnit is present, Tag 40609.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamFixingDateOffsetUnit() bool {
	return m.Has(tag.UnderlyingPaymentStreamFixingDateOffsetUnit)
}

// HasUnderlyingPaymentStreamFixingDateOffsetDayType returns true if UnderlyingPaymentStreamFixingDateOffsetDayType is present, Tag 40610.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamFixingDateOffsetDayType() bool {
	return m.Has(tag.UnderlyingPaymentStreamFixingDateOffsetDayType)
}

// HasUnderlyingPaymentStreamFixingDateAdjusted returns true if UnderlyingPaymentStreamFixingDateAdjusted is present, Tag 40611.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamFixingDateAdjusted() bool {
	return m.Has(tag.UnderlyingPaymentStreamFixingDateAdjusted)
}

// HasUnderlyingPaymentStreamRateCutoffDateOffsetPeriod returns true if UnderlyingPaymentStreamRateCutoffDateOffsetPeriod is present, Tag 40612.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamRateCutoffDateOffsetPeriod() bool {
	return m.Has(tag.UnderlyingPaymentStreamRateCutoffDateOffsetPeriod)
}

// HasUnderlyingPaymentStreamRateCutoffDateOffsetUnit returns true if UnderlyingPaymentStreamRateCutoffDateOffsetUnit is present, Tag 40613.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamRateCutoffDateOffsetUnit() bool {
	return m.Has(tag.UnderlyingPaymentStreamRateCutoffDateOffsetUnit)
}

// HasUnderlyingPaymentStreamRateCutoffDateOffsetDayType returns true if UnderlyingPaymentStreamRateCutoffDateOffsetDayType is present, Tag 40614.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamRateCutoffDateOffsetDayType() bool {
	return m.Has(tag.UnderlyingPaymentStreamRateCutoffDateOffsetDayType)
}

// HasNoUnderlyingPaymentStreamFixingDates returns true if NoUnderlyingPaymentStreamFixingDates is present, Tag 42955.
func (m NoUnderlyingStreams) HasNoUnderlyingPaymentStreamFixingDates() bool {
	return m.Has(tag.NoUnderlyingPaymentStreamFixingDates)
}

// HasUnderlyingPaymentStreamRate returns true if UnderlyingPaymentStreamRate is present, Tag 40615.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamRate() bool {
	return m.Has(tag.UnderlyingPaymentStreamRate)
}

// HasUnderlyingPaymentStreamFixedAmount returns true if UnderlyingPaymentStreamFixedAmount is present, Tag 40616.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamFixedAmount() bool {
	return m.Has(tag.UnderlyingPaymentStreamFixedAmount)
}

// HasUnderlyingPaymentStreamRateOrAmountCurrency returns true if UnderlyingPaymentStreamRateOrAmountCurrency is present, Tag 40617.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamRateOrAmountCurrency() bool {
	return m.Has(tag.UnderlyingPaymentStreamRateOrAmountCurrency)
}

// HasUnderlyingPaymentStreamFutureValueNotional returns true if UnderlyingPaymentStreamFutureValueNotional is present, Tag 40618.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamFutureValueNotional() bool {
	return m.Has(tag.UnderlyingPaymentStreamFutureValueNotional)
}

// HasUnderlyingPaymentStreamFutureValueDateAdjusted returns true if UnderlyingPaymentStreamFutureValueDateAdjusted is present, Tag 40619.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamFutureValueDateAdjusted() bool {
	return m.Has(tag.UnderlyingPaymentStreamFutureValueDateAdjusted)
}

// HasUnderlyingPaymentStreamFixedAmountUnitOfMeasure returns true if UnderlyingPaymentStreamFixedAmountUnitOfMeasure is present, Tag 41904.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamFixedAmountUnitOfMeasure() bool {
	return m.Has(tag.UnderlyingPaymentStreamFixedAmountUnitOfMeasure)
}

// HasUnderlyingPaymentStreamTotalFixedAmount returns true if UnderlyingPaymentStreamTotalFixedAmount is present, Tag 41905.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamTotalFixedAmount() bool {
	return m.Has(tag.UnderlyingPaymentStreamTotalFixedAmount)
}

// HasUnderlyingPaymentStreamWorldScaleRate returns true if UnderlyingPaymentStreamWorldScaleRate is present, Tag 41906.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamWorldScaleRate() bool {
	return m.Has(tag.UnderlyingPaymentStreamWorldScaleRate)
}

// HasUnderlyingPaymentStreamContractPrice returns true if UnderlyingPaymentStreamContractPrice is present, Tag 41907.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamContractPrice() bool {
	return m.Has(tag.UnderlyingPaymentStreamContractPrice)
}

// HasUnderlyingPaymentStreamContractPriceCurrency returns true if UnderlyingPaymentStreamContractPriceCurrency is present, Tag 41908.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamContractPriceCurrency() bool {
	return m.Has(tag.UnderlyingPaymentStreamContractPriceCurrency)
}

// HasUnderlyingPaymentStreamRateIndex returns true if UnderlyingPaymentStreamRateIndex is present, Tag 40620.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamRateIndex() bool {
	return m.Has(tag.UnderlyingPaymentStreamRateIndex)
}

// HasUnderlyingPaymentStreamRateIndexSource returns true if UnderlyingPaymentStreamRateIndexSource is present, Tag 40621.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamRateIndexSource() bool {
	return m.Has(tag.UnderlyingPaymentStreamRateIndexSource)
}

// HasUnderlyingPaymentStreamRateIndexCurveUnit returns true if UnderlyingPaymentStreamRateIndexCurveUnit is present, Tag 40622.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamRateIndexCurveUnit() bool {
	return m.Has(tag.UnderlyingPaymentStreamRateIndexCurveUnit)
}

// HasUnderlyingPaymentStreamRateIndexCurvePeriod returns true if UnderlyingPaymentStreamRateIndexCurvePeriod is present, Tag 40623.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamRateIndexCurvePeriod() bool {
	return m.Has(tag.UnderlyingPaymentStreamRateIndexCurvePeriod)
}

// HasUnderlyingPaymentStreamRateMultiplier returns true if UnderlyingPaymentStreamRateMultiplier is present, Tag 40624.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamRateMultiplier() bool {
	return m.Has(tag.UnderlyingPaymentStreamRateMultiplier)
}

// HasUnderlyingPaymentStreamRateSpread returns true if UnderlyingPaymentStreamRateSpread is present, Tag 40625.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamRateSpread() bool {
	return m.Has(tag.UnderlyingPaymentStreamRateSpread)
}

// HasUnderlyingPaymentStreamRateSpreadPositionType returns true if UnderlyingPaymentStreamRateSpreadPositionType is present, Tag 40626.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamRateSpreadPositionType() bool {
	return m.Has(tag.UnderlyingPaymentStreamRateSpreadPositionType)
}

// HasUnderlyingPaymentStreamRateTreatment returns true if UnderlyingPaymentStreamRateTreatment is present, Tag 40627.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamRateTreatment() bool {
	return m.Has(tag.UnderlyingPaymentStreamRateTreatment)
}

// HasUnderlyingPaymentStreamCapRate returns true if UnderlyingPaymentStreamCapRate is present, Tag 40628.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamCapRate() bool {
	return m.Has(tag.UnderlyingPaymentStreamCapRate)
}

// HasUnderlyingPaymentStreamCapRateBuySide returns true if UnderlyingPaymentStreamCapRateBuySide is present, Tag 40629.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamCapRateBuySide() bool {
	return m.Has(tag.UnderlyingPaymentStreamCapRateBuySide)
}

// HasUnderlyingPaymentStreamCapRateSellSide returns true if UnderlyingPaymentStreamCapRateSellSide is present, Tag 40630.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamCapRateSellSide() bool {
	return m.Has(tag.UnderlyingPaymentStreamCapRateSellSide)
}

// HasUnderlyingPaymentStreamFloorRate returns true if UnderlyingPaymentStreamFloorRate is present, Tag 40631.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamFloorRate() bool {
	return m.Has(tag.UnderlyingPaymentStreamFloorRate)
}

// HasUnderlyingPaymentStreamFloorRateBuySide returns true if UnderlyingPaymentStreamFloorRateBuySide is present, Tag 40632.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamFloorRateBuySide() bool {
	return m.Has(tag.UnderlyingPaymentStreamFloorRateBuySide)
}

// HasUnderlyingPaymentStreamFloorRateSellSide returns true if UnderlyingPaymentStreamFloorRateSellSide is present, Tag 40633.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamFloorRateSellSide() bool {
	return m.Has(tag.UnderlyingPaymentStreamFloorRateSellSide)
}

// HasUnderlyingPaymentStreamInitialRate returns true if UnderlyingPaymentStreamInitialRate is present, Tag 40634.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamInitialRate() bool {
	return m.Has(tag.UnderlyingPaymentStreamInitialRate)
}

// HasUnderlyingPaymentStreamFinalRateRoundingDirection returns true if UnderlyingPaymentStreamFinalRateRoundingDirection is present, Tag 40635.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamFinalRateRoundingDirection() bool {
	return m.Has(tag.UnderlyingPaymentStreamFinalRateRoundingDirection)
}

// HasUnderlyingPaymentStreamFinalRatePrecision returns true if UnderlyingPaymentStreamFinalRatePrecision is present, Tag 40636.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamFinalRatePrecision() bool {
	return m.Has(tag.UnderlyingPaymentStreamFinalRatePrecision)
}

// HasUnderlyingPaymentStreamAveragingMethod returns true if UnderlyingPaymentStreamAveragingMethod is present, Tag 40637.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamAveragingMethod() bool {
	return m.Has(tag.UnderlyingPaymentStreamAveragingMethod)
}

// HasUnderlyingPaymentStreamNegativeRateTreatment returns true if UnderlyingPaymentStreamNegativeRateTreatment is present, Tag 40638.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamNegativeRateTreatment() bool {
	return m.Has(tag.UnderlyingPaymentStreamNegativeRateTreatment)
}

// HasUnderlyingPaymentStreamInflationLagPeriod returns true if UnderlyingPaymentStreamInflationLagPeriod is present, Tag 40639.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamInflationLagPeriod() bool {
	return m.Has(tag.UnderlyingPaymentStreamInflationLagPeriod)
}

// HasUnderlyingPaymentStreamInflationLagUnit returns true if UnderlyingPaymentStreamInflationLagUnit is present, Tag 40640.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamInflationLagUnit() bool {
	return m.Has(tag.UnderlyingPaymentStreamInflationLagUnit)
}

// HasUnderlyingPaymentStreamInflationLagDayType returns true if UnderlyingPaymentStreamInflationLagDayType is present, Tag 40641.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamInflationLagDayType() bool {
	return m.Has(tag.UnderlyingPaymentStreamInflationLagDayType)
}

// HasUnderlyingPaymentStreamInflationInterpolationMethod returns true if UnderlyingPaymentStreamInflationInterpolationMethod is present, Tag 40642.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamInflationInterpolationMethod() bool {
	return m.Has(tag.UnderlyingPaymentStreamInflationInterpolationMethod)
}

// HasUnderlyingPaymentStreamInflationIndexSource returns true if UnderlyingPaymentStreamInflationIndexSource is present, Tag 40643.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamInflationIndexSource() bool {
	return m.Has(tag.UnderlyingPaymentStreamInflationIndexSource)
}

// HasUnderlyingPaymentStreamInflationPublicationSource returns true if UnderlyingPaymentStreamInflationPublicationSource is present, Tag 40644.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamInflationPublicationSource() bool {
	return m.Has(tag.UnderlyingPaymentStreamInflationPublicationSource)
}

// HasUnderlyingPaymentStreamInflationInitialIndexLevel returns true if UnderlyingPaymentStreamInflationInitialIndexLevel is present, Tag 40645.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamInflationInitialIndexLevel() bool {
	return m.Has(tag.UnderlyingPaymentStreamInflationInitialIndexLevel)
}

// HasUnderlyingPaymentStreamInflationFallbackBondApplicable returns true if UnderlyingPaymentStreamInflationFallbackBondApplicable is present, Tag 40646.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamInflationFallbackBondApplicable() bool {
	return m.Has(tag.UnderlyingPaymentStreamInflationFallbackBondApplicable)
}

// HasUnderlyingPaymentStreamFRADiscounting returns true if UnderlyingPaymentStreamFRADiscounting is present, Tag 40647.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamFRADiscounting() bool {
	return m.Has(tag.UnderlyingPaymentStreamFRADiscounting)
}

// HasUnderlyingPaymentStreamRateIndex2CurveUnit returns true if UnderlyingPaymentStreamRateIndex2CurveUnit is present, Tag 41911.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamRateIndex2CurveUnit() bool {
	return m.Has(tag.UnderlyingPaymentStreamRateIndex2CurveUnit)
}

// HasUnderlyingPaymentStreamRateIndex2CurvePeriod returns true if UnderlyingPaymentStreamRateIndex2CurvePeriod is present, Tag 41912.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamRateIndex2CurvePeriod() bool {
	return m.Has(tag.UnderlyingPaymentStreamRateIndex2CurvePeriod)
}

// HasUnderlyingPaymentStreamRateIndexLocation returns true if UnderlyingPaymentStreamRateIndexLocation is present, Tag 41913.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamRateIndexLocation() bool {
	return m.Has(tag.UnderlyingPaymentStreamRateIndexLocation)
}

// HasUnderlyingPaymentStreamRateIndexLevel returns true if UnderlyingPaymentStreamRateIndexLevel is present, Tag 41914.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamRateIndexLevel() bool {
	return m.Has(tag.UnderlyingPaymentStreamRateIndexLevel)
}

// HasUnderlyingPaymentStreamRateIndexUnitOfMeasure returns true if UnderlyingPaymentStreamRateIndexUnitOfMeasure is present, Tag 41915.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamRateIndexUnitOfMeasure() bool {
	return m.Has(tag.UnderlyingPaymentStreamRateIndexUnitOfMeasure)
}

// HasUnderlyingPaymentStreamSettlLevel returns true if UnderlyingPaymentStreamSettlLevel is present, Tag 41916.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamSettlLevel() bool {
	return m.Has(tag.UnderlyingPaymentStreamSettlLevel)
}

// HasUnderlyingPaymentStreamReferenceLevel returns true if UnderlyingPaymentStreamReferenceLevel is present, Tag 41917.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamReferenceLevel() bool {
	return m.Has(tag.UnderlyingPaymentStreamReferenceLevel)
}

// HasUnderlyingPaymentStreamReferenceLevelUnitOfMeasure returns true if UnderlyingPaymentStreamReferenceLevelUnitOfMeasure is present, Tag 41918.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamReferenceLevelUnitOfMeasure() bool {
	return m.Has(tag.UnderlyingPaymentStreamReferenceLevelUnitOfMeasure)
}

// HasUnderlyingPaymentStreamReferenceLevelEqualsZeroIndicator returns true if UnderlyingPaymentStreamReferenceLevelEqualsZeroIndicator is present, Tag 41919.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamReferenceLevelEqualsZeroIndicator() bool {
	return m.Has(tag.UnderlyingPaymentStreamReferenceLevelEqualsZeroIndicator)
}

// HasUnderlyingPaymentStreamRateSpreadCurrency returns true if UnderlyingPaymentStreamRateSpreadCurrency is present, Tag 41920.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamRateSpreadCurrency() bool {
	return m.Has(tag.UnderlyingPaymentStreamRateSpreadCurrency)
}

// HasUnderlyingPaymentStreamRateSpreadUnitOfMeasure returns true if UnderlyingPaymentStreamRateSpreadUnitOfMeasure is present, Tag 41921.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamRateSpreadUnitOfMeasure() bool {
	return m.Has(tag.UnderlyingPaymentStreamRateSpreadUnitOfMeasure)
}

// HasUnderlyingPaymentStreamRateConversionFactor returns true if UnderlyingPaymentStreamRateConversionFactor is present, Tag 41922.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamRateConversionFactor() bool {
	return m.Has(tag.UnderlyingPaymentStreamRateConversionFactor)
}

// HasUnderlyingPaymentStreamRateSpreadType returns true if UnderlyingPaymentStreamRateSpreadType is present, Tag 41923.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamRateSpreadType() bool {
	return m.Has(tag.UnderlyingPaymentStreamRateSpreadType)
}

// HasUnderlyingPaymentStreamLastResetRate returns true if UnderlyingPaymentStreamLastResetRate is present, Tag 41924.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamLastResetRate() bool {
	return m.Has(tag.UnderlyingPaymentStreamLastResetRate)
}

// HasUnderlyingPaymentStreamFinalRate returns true if UnderlyingPaymentStreamFinalRate is present, Tag 41925.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamFinalRate() bool {
	return m.Has(tag.UnderlyingPaymentStreamFinalRate)
}

// HasUnderlyingPaymentStreamCalculationLagPeriod returns true if UnderlyingPaymentStreamCalculationLagPeriod is present, Tag 41926.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamCalculationLagPeriod() bool {
	return m.Has(tag.UnderlyingPaymentStreamCalculationLagPeriod)
}

// HasUnderlyingPaymentStreamCalculationLagUnit returns true if UnderlyingPaymentStreamCalculationLagUnit is present, Tag 41927.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamCalculationLagUnit() bool {
	return m.Has(tag.UnderlyingPaymentStreamCalculationLagUnit)
}

// HasUnderlyingPaymentStreamFirstObservationDateOffsetPeriod returns true if UnderlyingPaymentStreamFirstObservationDateOffsetPeriod is present, Tag 41928.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamFirstObservationDateOffsetPeriod() bool {
	return m.Has(tag.UnderlyingPaymentStreamFirstObservationDateOffsetPeriod)
}

// HasUnderlyingPaymentStreamFirstObservationDateOffsetUnit returns true if UnderlyingPaymentStreamFirstObservationDateOffsetUnit is present, Tag 41929.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamFirstObservationDateOffsetUnit() bool {
	return m.Has(tag.UnderlyingPaymentStreamFirstObservationDateOffsetUnit)
}

// HasUnderlyingPaymentStreamPricingDayType returns true if UnderlyingPaymentStreamPricingDayType is present, Tag 41930.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamPricingDayType() bool {
	return m.Has(tag.UnderlyingPaymentStreamPricingDayType)
}

// HasUnderlyingPaymentStreamPricingDayDistribution returns true if UnderlyingPaymentStreamPricingDayDistribution is present, Tag 41931.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamPricingDayDistribution() bool {
	return m.Has(tag.UnderlyingPaymentStreamPricingDayDistribution)
}

// HasUnderlyingPaymentStreamPricingDayCount returns true if UnderlyingPaymentStreamPricingDayCount is present, Tag 41932.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamPricingDayCount() bool {
	return m.Has(tag.UnderlyingPaymentStreamPricingDayCount)
}

// HasUnderlyingPaymentStreamPricingBusinessCalendar returns true if UnderlyingPaymentStreamPricingBusinessCalendar is present, Tag 41933.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamPricingBusinessCalendar() bool {
	return m.Has(tag.UnderlyingPaymentStreamPricingBusinessCalendar)
}

// HasUnderlyingPaymentStreamPricingBusinessDayConvention returns true if UnderlyingPaymentStreamPricingBusinessDayConvention is present, Tag 41934.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamPricingBusinessDayConvention() bool {
	return m.Has(tag.UnderlyingPaymentStreamPricingBusinessDayConvention)
}

// HasNoUnderlyingPaymentStreamPricingBusinessCenters returns true if NoUnderlyingPaymentStreamPricingBusinessCenters is present, Tag 41909.
func (m NoUnderlyingStreams) HasNoUnderlyingPaymentStreamPricingBusinessCenters() bool {
	return m.Has(tag.NoUnderlyingPaymentStreamPricingBusinessCenters)
}

// HasNoUnderlyingPaymentStreamPricingDays returns true if NoUnderlyingPaymentStreamPricingDays is present, Tag 41944.
func (m NoUnderlyingStreams) HasNoUnderlyingPaymentStreamPricingDays() bool {
	return m.Has(tag.NoUnderlyingPaymentStreamPricingDays)
}

// HasNoUnderlyingPaymentStreamPricingDates returns true if NoUnderlyingPaymentStreamPricingDates is present, Tag 41941.
func (m NoUnderlyingStreams) HasNoUnderlyingPaymentStreamPricingDates() bool {
	return m.Has(tag.NoUnderlyingPaymentStreamPricingDates)
}

// HasUnderlyingPaymentStreamFirstObservationDateUnadjusted returns true if UnderlyingPaymentStreamFirstObservationDateUnadjusted is present, Tag 42958.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamFirstObservationDateUnadjusted() bool {
	return m.Has(tag.UnderlyingPaymentStreamFirstObservationDateUnadjusted)
}

// HasUnderlyingPaymentStreamFirstObservationDateRelativeTo returns true if UnderlyingPaymentStreamFirstObservationDateRelativeTo is present, Tag 42959.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamFirstObservationDateRelativeTo() bool {
	return m.Has(tag.UnderlyingPaymentStreamFirstObservationDateRelativeTo)
}

// HasUnderlyingPaymentStreamFirstObservationDateOffsetDayType returns true if UnderlyingPaymentStreamFirstObservationDateOffsetDayType is present, Tag 42960.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamFirstObservationDateOffsetDayType() bool {
	return m.Has(tag.UnderlyingPaymentStreamFirstObservationDateOffsetDayType)
}

// HasUnderlyingPaymentStreamFirstObservationDateAdjusted returns true if UnderlyingPaymentStreamFirstObservationDateAdjusted is present, Tag 42961.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamFirstObservationDateAdjusted() bool {
	return m.Has(tag.UnderlyingPaymentStreamFirstObservationDateAdjusted)
}

// HasUnderlyingPaymentStreamUnderlierRefID returns true if UnderlyingPaymentStreamUnderlierRefID is present, Tag 42962.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamUnderlierRefID() bool {
	return m.Has(tag.UnderlyingPaymentStreamUnderlierRefID)
}

// HasUnderlyingPaymentStreamFormulaCurrency returns true if UnderlyingPaymentStreamFormulaCurrency is present, Tag 42978.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamFormulaCurrency() bool {
	return m.Has(tag.UnderlyingPaymentStreamFormulaCurrency)
}

// HasUnderlyingPaymentStreamFormulaCurrencyDeterminationMethod returns true if UnderlyingPaymentStreamFormulaCurrencyDeterminationMethod is present, Tag 42979.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamFormulaCurrencyDeterminationMethod() bool {
	return m.Has(tag.UnderlyingPaymentStreamFormulaCurrencyDeterminationMethod)
}

// HasUnderlyingPaymentStreamFormulaReferenceAmount returns true if UnderlyingPaymentStreamFormulaReferenceAmount is present, Tag 42980.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamFormulaReferenceAmount() bool {
	return m.Has(tag.UnderlyingPaymentStreamFormulaReferenceAmount)
}

// HasNoUnderlyingPaymentStreamFormulas returns true if NoUnderlyingPaymentStreamFormulas is present, Tag 42981.
func (m NoUnderlyingStreams) HasNoUnderlyingPaymentStreamFormulas() bool {
	return m.Has(tag.NoUnderlyingPaymentStreamFormulas)
}

// HasUnderlyingPaymentStreamFormulaImageLength returns true if UnderlyingPaymentStreamFormulaImageLength is present, Tag 42947.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamFormulaImageLength() bool {
	return m.Has(tag.UnderlyingPaymentStreamFormulaImageLength)
}

// HasUnderlyingPaymentStreamFormulaImage returns true if UnderlyingPaymentStreamFormulaImage is present, Tag 42948.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamFormulaImage() bool {
	return m.Has(tag.UnderlyingPaymentStreamFormulaImage)
}

// HasUnderlyingDividendReinvestmentIndicator returns true if UnderlyingDividendReinvestmentIndicator is present, Tag 42826.
func (m NoUnderlyingStreams) HasUnderlyingDividendReinvestmentIndicator() bool {
	return m.Has(tag.UnderlyingDividendReinvestmentIndicator)
}

// HasUnderlyingDividendEntitlementEvent returns true if UnderlyingDividendEntitlementEvent is present, Tag 42827.
func (m NoUnderlyingStreams) HasUnderlyingDividendEntitlementEvent() bool {
	return m.Has(tag.UnderlyingDividendEntitlementEvent)
}

// HasUnderlyingDividendAmountType returns true if UnderlyingDividendAmountType is present, Tag 42828.
func (m NoUnderlyingStreams) HasUnderlyingDividendAmountType() bool {
	return m.Has(tag.UnderlyingDividendAmountType)
}

// HasUnderlyingDividendUnderlierRefID returns true if UnderlyingDividendUnderlierRefID is present, Tag 42829.
func (m NoUnderlyingStreams) HasUnderlyingDividendUnderlierRefID() bool {
	return m.Has(tag.UnderlyingDividendUnderlierRefID)
}

// HasNoUnderlyingDividendPeriods returns true if NoUnderlyingDividendPeriods is present, Tag 42862.
func (m NoUnderlyingStreams) HasNoUnderlyingDividendPeriods() bool {
	return m.Has(tag.NoUnderlyingDividendPeriods)
}

// HasUnderlyingExtraordinaryDividendPartySide returns true if UnderlyingExtraordinaryDividendPartySide is present, Tag 42830.
func (m NoUnderlyingStreams) HasUnderlyingExtraordinaryDividendPartySide() bool {
	return m.Has(tag.UnderlyingExtraordinaryDividendPartySide)
}

// HasUnderlyingExtraordinaryDividendAmountType returns true if UnderlyingExtraordinaryDividendAmountType is present, Tag 42831.
func (m NoUnderlyingStreams) HasUnderlyingExtraordinaryDividendAmountType() bool {
	return m.Has(tag.UnderlyingExtraordinaryDividendAmountType)
}

// HasUnderlyingExtraordinaryDividendCurrency returns true if UnderlyingExtraordinaryDividendCurrency is present, Tag 42832.
func (m NoUnderlyingStreams) HasUnderlyingExtraordinaryDividendCurrency() bool {
	return m.Has(tag.UnderlyingExtraordinaryDividendCurrency)
}

// HasUnderlyingExtraordinaryDividendDeterminationMethod returns true if UnderlyingExtraordinaryDividendDeterminationMethod is present, Tag 42833.
func (m NoUnderlyingStreams) HasUnderlyingExtraordinaryDividendDeterminationMethod() bool {
	return m.Has(tag.UnderlyingExtraordinaryDividendDeterminationMethod)
}

// HasUnderlyingDividendFXTriggerDateRelativeTo returns true if UnderlyingDividendFXTriggerDateRelativeTo is present, Tag 42846.
func (m NoUnderlyingStreams) HasUnderlyingDividendFXTriggerDateRelativeTo() bool {
	return m.Has(tag.UnderlyingDividendFXTriggerDateRelativeTo)
}

// HasUnderlyingDividendFXTriggerDateOffsetPeriod returns true if UnderlyingDividendFXTriggerDateOffsetPeriod is present, Tag 42847.
func (m NoUnderlyingStreams) HasUnderlyingDividendFXTriggerDateOffsetPeriod() bool {
	return m.Has(tag.UnderlyingDividendFXTriggerDateOffsetPeriod)
}

// HasUnderlyingDividendFXTriggerDateOffsetUnit returns true if UnderlyingDividendFXTriggerDateOffsetUnit is present, Tag 42848.
func (m NoUnderlyingStreams) HasUnderlyingDividendFXTriggerDateOffsetUnit() bool {
	return m.Has(tag.UnderlyingDividendFXTriggerDateOffsetUnit)
}

// HasUnderlyingDividendFXTriggerDateOffsetDayType returns true if UnderlyingDividendFXTriggerDateOffsetDayType is present, Tag 42849.
func (m NoUnderlyingStreams) HasUnderlyingDividendFXTriggerDateOffsetDayType() bool {
	return m.Has(tag.UnderlyingDividendFXTriggerDateOffsetDayType)
}

// HasUnderlyingDividendFXTriggerDateUnadjusted returns true if UnderlyingDividendFXTriggerDateUnadjusted is present, Tag 42850.
func (m NoUnderlyingStreams) HasUnderlyingDividendFXTriggerDateUnadjusted() bool {
	return m.Has(tag.UnderlyingDividendFXTriggerDateUnadjusted)
}

// HasUnderlyingDividendFXTriggerDateBusinessDayConvention returns true if UnderlyingDividendFXTriggerDateBusinessDayConvention is present, Tag 42851.
func (m NoUnderlyingStreams) HasUnderlyingDividendFXTriggerDateBusinessDayConvention() bool {
	return m.Has(tag.UnderlyingDividendFXTriggerDateBusinessDayConvention)
}

// HasNoUnderlyingDividendFXTriggerDateBusinessCenters returns true if NoUnderlyingDividendFXTriggerDateBusinessCenters is present, Tag 42853.
func (m NoUnderlyingStreams) HasNoUnderlyingDividendFXTriggerDateBusinessCenters() bool {
	return m.Has(tag.NoUnderlyingDividendFXTriggerDateBusinessCenters)
}

// HasUnderlyingDividendFXTriggerDateAdjusted returns true if UnderlyingDividendFXTriggerDateAdjusted is present, Tag 42852.
func (m NoUnderlyingStreams) HasUnderlyingDividendFXTriggerDateAdjusted() bool {
	return m.Has(tag.UnderlyingDividendFXTriggerDateAdjusted)
}

// HasUnderlyingDividendFloatingRateIndex returns true if UnderlyingDividendFloatingRateIndex is present, Tag 42801.
func (m NoUnderlyingStreams) HasUnderlyingDividendFloatingRateIndex() bool {
	return m.Has(tag.UnderlyingDividendFloatingRateIndex)
}

// HasUnderlyingDividendFloatingRateIndexCurvePeriod returns true if UnderlyingDividendFloatingRateIndexCurvePeriod is present, Tag 42802.
func (m NoUnderlyingStreams) HasUnderlyingDividendFloatingRateIndexCurvePeriod() bool {
	return m.Has(tag.UnderlyingDividendFloatingRateIndexCurvePeriod)
}

// HasUnderlyingDividendFloatingRateIndexCurveUnit returns true if UnderlyingDividendFloatingRateIndexCurveUnit is present, Tag 42803.
func (m NoUnderlyingStreams) HasUnderlyingDividendFloatingRateIndexCurveUnit() bool {
	return m.Has(tag.UnderlyingDividendFloatingRateIndexCurveUnit)
}

// HasUnderlyingDividendFloatingRateMultiplier returns true if UnderlyingDividendFloatingRateMultiplier is present, Tag 42804.
func (m NoUnderlyingStreams) HasUnderlyingDividendFloatingRateMultiplier() bool {
	return m.Has(tag.UnderlyingDividendFloatingRateMultiplier)
}

// HasUnderlyingDividendFloatingRateSpread returns true if UnderlyingDividendFloatingRateSpread is present, Tag 42805.
func (m NoUnderlyingStreams) HasUnderlyingDividendFloatingRateSpread() bool {
	return m.Has(tag.UnderlyingDividendFloatingRateSpread)
}

// HasUnderlyingDividendFloatingRateSpreadPositionType returns true if UnderlyingDividendFloatingRateSpreadPositionType is present, Tag 42806.
func (m NoUnderlyingStreams) HasUnderlyingDividendFloatingRateSpreadPositionType() bool {
	return m.Has(tag.UnderlyingDividendFloatingRateSpreadPositionType)
}

// HasUnderlyingDividendFloatingRateTreatment returns true if UnderlyingDividendFloatingRateTreatment is present, Tag 42807.
func (m NoUnderlyingStreams) HasUnderlyingDividendFloatingRateTreatment() bool {
	return m.Has(tag.UnderlyingDividendFloatingRateTreatment)
}

// HasUnderlyingDividendCapRate returns true if UnderlyingDividendCapRate is present, Tag 42808.
func (m NoUnderlyingStreams) HasUnderlyingDividendCapRate() bool {
	return m.Has(tag.UnderlyingDividendCapRate)
}

// HasUnderlyingDividendCapRateBuySide returns true if UnderlyingDividendCapRateBuySide is present, Tag 42809.
func (m NoUnderlyingStreams) HasUnderlyingDividendCapRateBuySide() bool {
	return m.Has(tag.UnderlyingDividendCapRateBuySide)
}

// HasUnderlyingDividendCapRateSellSide returns true if UnderlyingDividendCapRateSellSide is present, Tag 42810.
func (m NoUnderlyingStreams) HasUnderlyingDividendCapRateSellSide() bool {
	return m.Has(tag.UnderlyingDividendCapRateSellSide)
}

// HasUnderlyingDividendFloorRate returns true if UnderlyingDividendFloorRate is present, Tag 42811.
func (m NoUnderlyingStreams) HasUnderlyingDividendFloorRate() bool {
	return m.Has(tag.UnderlyingDividendFloorRate)
}

// HasUnderlyingDividendFloorRateBuySide returns true if UnderlyingDividendFloorRateBuySide is present, Tag 42812.
func (m NoUnderlyingStreams) HasUnderlyingDividendFloorRateBuySide() bool {
	return m.Has(tag.UnderlyingDividendFloorRateBuySide)
}

// HasUnderlyingDividendFloorRateSellSide returns true if UnderlyingDividendFloorRateSellSide is present, Tag 42813.
func (m NoUnderlyingStreams) HasUnderlyingDividendFloorRateSellSide() bool {
	return m.Has(tag.UnderlyingDividendFloorRateSellSide)
}

// HasUnderlyingDividendInitialRate returns true if UnderlyingDividendInitialRate is present, Tag 42814.
func (m NoUnderlyingStreams) HasUnderlyingDividendInitialRate() bool {
	return m.Has(tag.UnderlyingDividendInitialRate)
}

// HasUnderlyingDividendFinalRateRoundingDirection returns true if UnderlyingDividendFinalRateRoundingDirection is present, Tag 42815.
func (m NoUnderlyingStreams) HasUnderlyingDividendFinalRateRoundingDirection() bool {
	return m.Has(tag.UnderlyingDividendFinalRateRoundingDirection)
}

// HasUnderlyingDividendFinalRatePrecision returns true if UnderlyingDividendFinalRatePrecision is present, Tag 42816.
func (m NoUnderlyingStreams) HasUnderlyingDividendFinalRatePrecision() bool {
	return m.Has(tag.UnderlyingDividendFinalRatePrecision)
}

// HasUnderlyingDividendAveragingMethod returns true if UnderlyingDividendAveragingMethod is present, Tag 42817.
func (m NoUnderlyingStreams) HasUnderlyingDividendAveragingMethod() bool {
	return m.Has(tag.UnderlyingDividendAveragingMethod)
}

// HasUnderlyingDividendNegativeRateTreatment returns true if UnderlyingDividendNegativeRateTreatment is present, Tag 42818.
func (m NoUnderlyingStreams) HasUnderlyingDividendNegativeRateTreatment() bool {
	return m.Has(tag.UnderlyingDividendNegativeRateTreatment)
}

// HasUnderlyingDividendAccrualFixedRate returns true if UnderlyingDividendAccrualFixedRate is present, Tag 42834.
func (m NoUnderlyingStreams) HasUnderlyingDividendAccrualFixedRate() bool {
	return m.Has(tag.UnderlyingDividendAccrualFixedRate)
}

// HasUnderlyingDividendAccrualPaymentDateRelativeTo returns true if UnderlyingDividendAccrualPaymentDateRelativeTo is present, Tag 42819.
func (m NoUnderlyingStreams) HasUnderlyingDividendAccrualPaymentDateRelativeTo() bool {
	return m.Has(tag.UnderlyingDividendAccrualPaymentDateRelativeTo)
}

// HasUnderlyingDividendAccrualPaymentDateOffsetPeriod returns true if UnderlyingDividendAccrualPaymentDateOffsetPeriod is present, Tag 42820.
func (m NoUnderlyingStreams) HasUnderlyingDividendAccrualPaymentDateOffsetPeriod() bool {
	return m.Has(tag.UnderlyingDividendAccrualPaymentDateOffsetPeriod)
}

// HasUnderlyingDividendAccrualPaymentDateOffsetUnit returns true if UnderlyingDividendAccrualPaymentDateOffsetUnit is present, Tag 42821.
func (m NoUnderlyingStreams) HasUnderlyingDividendAccrualPaymentDateOffsetUnit() bool {
	return m.Has(tag.UnderlyingDividendAccrualPaymentDateOffsetUnit)
}

// HasUnderlyingDividendAccrualPaymentDateOffsetDayType returns true if UnderlyingDividendAccrualPaymentDateOffsetDayType is present, Tag 42822.
func (m NoUnderlyingStreams) HasUnderlyingDividendAccrualPaymentDateOffsetDayType() bool {
	return m.Has(tag.UnderlyingDividendAccrualPaymentDateOffsetDayType)
}

// HasUnderlyingDividendAccrualPaymentDateUnadjusted returns true if UnderlyingDividendAccrualPaymentDateUnadjusted is present, Tag 42823.
func (m NoUnderlyingStreams) HasUnderlyingDividendAccrualPaymentDateUnadjusted() bool {
	return m.Has(tag.UnderlyingDividendAccrualPaymentDateUnadjusted)
}

// HasUnderlyingDividendAccrualPaymentDateBusinessDayConvention returns true if UnderlyingDividendAccrualPaymentDateBusinessDayConvention is present, Tag 42824.
func (m NoUnderlyingStreams) HasUnderlyingDividendAccrualPaymentDateBusinessDayConvention() bool {
	return m.Has(tag.UnderlyingDividendAccrualPaymentDateBusinessDayConvention)
}

// HasNoUnderlyingDividendAccrualPaymentDateBusinessCenters returns true if NoUnderlyingDividendAccrualPaymentDateBusinessCenters is present, Tag 42799.
func (m NoUnderlyingStreams) HasNoUnderlyingDividendAccrualPaymentDateBusinessCenters() bool {
	return m.Has(tag.NoUnderlyingDividendAccrualPaymentDateBusinessCenters)
}

// HasUnderlyingDividendAccrualPaymentDateAdjusted returns true if UnderlyingDividendAccrualPaymentDateAdjusted is present, Tag 42825.
func (m NoUnderlyingStreams) HasUnderlyingDividendAccrualPaymentDateAdjusted() bool {
	return m.Has(tag.UnderlyingDividendAccrualPaymentDateAdjusted)
}

// HasUnderlyingDividendCompoundingMethod returns true if UnderlyingDividendCompoundingMethod is present, Tag 42835.
func (m NoUnderlyingStreams) HasUnderlyingDividendCompoundingMethod() bool {
	return m.Has(tag.UnderlyingDividendCompoundingMethod)
}

// HasUnderlyingDividendNumOfIndexUnits returns true if UnderlyingDividendNumOfIndexUnits is present, Tag 42836.
func (m NoUnderlyingStreams) HasUnderlyingDividendNumOfIndexUnits() bool {
	return m.Has(tag.UnderlyingDividendNumOfIndexUnits)
}

// HasUnderlyingDividendCashPercentage returns true if UnderlyingDividendCashPercentage is present, Tag 42837.
func (m NoUnderlyingStreams) HasUnderlyingDividendCashPercentage() bool {
	return m.Has(tag.UnderlyingDividendCashPercentage)
}

// HasUnderlyingDividendCashEquivalentPercentage returns true if UnderlyingDividendCashEquivalentPercentage is present, Tag 42838.
func (m NoUnderlyingStreams) HasUnderlyingDividendCashEquivalentPercentage() bool {
	return m.Has(tag.UnderlyingDividendCashEquivalentPercentage)
}

// HasUnderlyingNonCashDividendTreatment returns true if UnderlyingNonCashDividendTreatment is present, Tag 42839.
func (m NoUnderlyingStreams) HasUnderlyingNonCashDividendTreatment() bool {
	return m.Has(tag.UnderlyingNonCashDividendTreatment)
}

// HasUnderlyingDividendComposition returns true if UnderlyingDividendComposition is present, Tag 42840.
func (m NoUnderlyingStreams) HasUnderlyingDividendComposition() bool {
	return m.Has(tag.UnderlyingDividendComposition)
}

// HasUnderlyingSpecialDividendsIndicator returns true if UnderlyingSpecialDividendsIndicator is present, Tag 42841.
func (m NoUnderlyingStreams) HasUnderlyingSpecialDividendsIndicator() bool {
	return m.Has(tag.UnderlyingSpecialDividendsIndicator)
}

// HasUnderlyingMaterialDividendsIndicator returns true if UnderlyingMaterialDividendsIndicator is present, Tag 42842.
func (m NoUnderlyingStreams) HasUnderlyingMaterialDividendsIndicator() bool {
	return m.Has(tag.UnderlyingMaterialDividendsIndicator)
}

// HasUnderlyingOptionsExchangeDividendsIndicator returns true if UnderlyingOptionsExchangeDividendsIndicator is present, Tag 42843.
func (m NoUnderlyingStreams) HasUnderlyingOptionsExchangeDividendsIndicator() bool {
	return m.Has(tag.UnderlyingOptionsExchangeDividendsIndicator)
}

// HasUnderlyingAdditionalDividendsIndicator returns true if UnderlyingAdditionalDividendsIndicator is present, Tag 42844.
func (m NoUnderlyingStreams) HasUnderlyingAdditionalDividendsIndicator() bool {
	return m.Has(tag.UnderlyingAdditionalDividendsIndicator)
}

// HasUnderlyingAllDividendsIndicator returns true if UnderlyingAllDividendsIndicator is present, Tag 42845.
func (m NoUnderlyingStreams) HasUnderlyingAllDividendsIndicator() bool {
	return m.Has(tag.UnderlyingAllDividendsIndicator)
}

// HasUnderlyingReturnRateNotionalReset returns true if UnderlyingReturnRateNotionalReset is present, Tag 42963.
func (m NoUnderlyingStreams) HasUnderlyingReturnRateNotionalReset() bool {
	return m.Has(tag.UnderlyingReturnRateNotionalReset)
}

// HasNoUnderlyingReturnRates returns true if NoUnderlyingReturnRates is present, Tag 43034.
func (m NoUnderlyingStreams) HasNoUnderlyingReturnRates() bool {
	return m.Has(tag.NoUnderlyingReturnRates)
}

// HasUnderlyingPaymentStreamLinkInitialLevel returns true if UnderlyingPaymentStreamLinkInitialLevel is present, Tag 42964.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamLinkInitialLevel() bool {
	return m.Has(tag.UnderlyingPaymentStreamLinkInitialLevel)
}

// HasUnderlyingPaymentStreamLinkClosingLevelIndicator returns true if UnderlyingPaymentStreamLinkClosingLevelIndicator is present, Tag 42965.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamLinkClosingLevelIndicator() bool {
	return m.Has(tag.UnderlyingPaymentStreamLinkClosingLevelIndicator)
}

// HasUnderlyingPaymentStreamLinkExpiringLevelIndicator returns true if UnderlyingPaymentStreamLinkExpiringLevelIndicator is present, Tag 42966.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamLinkExpiringLevelIndicator() bool {
	return m.Has(tag.UnderlyingPaymentStreamLinkExpiringLevelIndicator)
}

// HasUnderlyingPaymentStreamLinkEstimatedTradingDays returns true if UnderlyingPaymentStreamLinkEstimatedTradingDays is present, Tag 42967.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamLinkEstimatedTradingDays() bool {
	return m.Has(tag.UnderlyingPaymentStreamLinkEstimatedTradingDays)
}

// HasUnderlyingPaymentStreamLinkStrikePrice returns true if UnderlyingPaymentStreamLinkStrikePrice is present, Tag 42968.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamLinkStrikePrice() bool {
	return m.Has(tag.UnderlyingPaymentStreamLinkStrikePrice)
}

// HasUnderlyingPaymentStreamLinkStrikePriceType returns true if UnderlyingPaymentStreamLinkStrikePriceType is present, Tag 42969.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamLinkStrikePriceType() bool {
	return m.Has(tag.UnderlyingPaymentStreamLinkStrikePriceType)
}

// HasUnderlyingPaymentStreamLinkMaximumBoundary returns true if UnderlyingPaymentStreamLinkMaximumBoundary is present, Tag 42970.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamLinkMaximumBoundary() bool {
	return m.Has(tag.UnderlyingPaymentStreamLinkMaximumBoundary)
}

// HasUnderlyingPaymentStreamLinkMinimumBoundary returns true if UnderlyingPaymentStreamLinkMinimumBoundary is present, Tag 42971.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamLinkMinimumBoundary() bool {
	return m.Has(tag.UnderlyingPaymentStreamLinkMinimumBoundary)
}

// HasUnderlyingPaymentStreamLinkNumberOfDataSeries returns true if UnderlyingPaymentStreamLinkNumberOfDataSeries is present, Tag 42972.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamLinkNumberOfDataSeries() bool {
	return m.Has(tag.UnderlyingPaymentStreamLinkNumberOfDataSeries)
}

// HasUnderlyingPaymentStreamVarianceUnadjustedCap returns true if UnderlyingPaymentStreamVarianceUnadjustedCap is present, Tag 42973.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamVarianceUnadjustedCap() bool {
	return m.Has(tag.UnderlyingPaymentStreamVarianceUnadjustedCap)
}

// HasUnderlyingPaymentStreamRealizedVarianceMethod returns true if UnderlyingPaymentStreamRealizedVarianceMethod is present, Tag 42974.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamRealizedVarianceMethod() bool {
	return m.Has(tag.UnderlyingPaymentStreamRealizedVarianceMethod)
}

// HasUnderlyingPaymentStreamDaysAdjustmentIndicator returns true if UnderlyingPaymentStreamDaysAdjustmentIndicator is present, Tag 42975.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamDaysAdjustmentIndicator() bool {
	return m.Has(tag.UnderlyingPaymentStreamDaysAdjustmentIndicator)
}

// HasUnderlyingPaymentStreamNearestExchangeContractRefID returns true if UnderlyingPaymentStreamNearestExchangeContractRefID is present, Tag 42976.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamNearestExchangeContractRefID() bool {
	return m.Has(tag.UnderlyingPaymentStreamNearestExchangeContractRefID)
}

// HasUnderlyingPaymentStreamVegaNotionalAmount returns true if UnderlyingPaymentStreamVegaNotionalAmount is present, Tag 42977.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamVegaNotionalAmount() bool {
	return m.Has(tag.UnderlyingPaymentStreamVegaNotionalAmount)
}

// HasUnderlyingPaymentStreamRateIndexID returns true if UnderlyingPaymentStreamRateIndexID is present, Tag 43092.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamRateIndexID() bool {
	return m.Has(tag.UnderlyingPaymentStreamRateIndexID)
}

// HasUnderlyingPaymentStreamRateIndexIDSource returns true if UnderlyingPaymentStreamRateIndexIDSource is present, Tag 43093.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamRateIndexIDSource() bool {
	return m.Has(tag.UnderlyingPaymentStreamRateIndexIDSource)
}

// HasUnderlyingPaymentStreamNonDeliverableRefCurrency returns true if UnderlyingPaymentStreamNonDeliverableRefCurrency is present, Tag 40648.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamNonDeliverableRefCurrency() bool {
	return m.Has(tag.UnderlyingPaymentStreamNonDeliverableRefCurrency)
}

// HasUnderlyingPaymentStreamNonDeliverableFixingDatesBusinessDayConvention returns true if UnderlyingPaymentStreamNonDeliverableFixingDatesBusinessDayConvention is present, Tag 40649.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamNonDeliverableFixingDatesBusinessDayConvention() bool {
	return m.Has(tag.UnderlyingPaymentStreamNonDeliverableFixingDatesBusinessDayConvention)
}

// HasNoUnderlyingPaymentStreamNonDeliverableFixingDatesBusinessCenters returns true if NoUnderlyingPaymentStreamNonDeliverableFixingDatesBusinessCenters is present, Tag 40968.
func (m NoUnderlyingStreams) HasNoUnderlyingPaymentStreamNonDeliverableFixingDatesBusinessCenters() bool {
	return m.Has(tag.NoUnderlyingPaymentStreamNonDeliverableFixingDatesBusinessCenters)
}

// HasUnderlyingPaymentStreamNonDeliverableFixingDatesRelativeTo returns true if UnderlyingPaymentStreamNonDeliverableFixingDatesRelativeTo is present, Tag 40651.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamNonDeliverableFixingDatesRelativeTo() bool {
	return m.Has(tag.UnderlyingPaymentStreamNonDeliverableFixingDatesRelativeTo)
}

// HasUnderlyingPaymentStreamNonDeliverableFixingDatesOffsetPeriod returns true if UnderlyingPaymentStreamNonDeliverableFixingDatesOffsetPeriod is present, Tag 40652.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamNonDeliverableFixingDatesOffsetPeriod() bool {
	return m.Has(tag.UnderlyingPaymentStreamNonDeliverableFixingDatesOffsetPeriod)
}

// HasUnderlyingPaymentStreamNonDeliverableFixingDatesOffsetUnit returns true if UnderlyingPaymentStreamNonDeliverableFixingDatesOffsetUnit is present, Tag 40653.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamNonDeliverableFixingDatesOffsetUnit() bool {
	return m.Has(tag.UnderlyingPaymentStreamNonDeliverableFixingDatesOffsetUnit)
}

// HasUnderlyingPaymentStreamNonDeliverableFixingDatesOffsetDayType returns true if UnderlyingPaymentStreamNonDeliverableFixingDatesOffsetDayType is present, Tag 40654.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamNonDeliverableFixingDatesOffsetDayType() bool {
	return m.Has(tag.UnderlyingPaymentStreamNonDeliverableFixingDatesOffsetDayType)
}

// HasUnderlyingPaymentStreamNonDeliverableSettlRateSource returns true if UnderlyingPaymentStreamNonDeliverableSettlRateSource is present, Tag 40661.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamNonDeliverableSettlRateSource() bool {
	return m.Has(tag.UnderlyingPaymentStreamNonDeliverableSettlRateSource)
}

// HasUnderlyingPaymentStreamNonDeliverableSettlReferencePage returns true if UnderlyingPaymentStreamNonDeliverableSettlReferencePage is present, Tag 40824.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamNonDeliverableSettlReferencePage() bool {
	return m.Has(tag.UnderlyingPaymentStreamNonDeliverableSettlReferencePage)
}

// HasNoUnderlyingNonDeliverableFixingDates returns true if NoUnderlyingNonDeliverableFixingDates is present, Tag 40656.
func (m NoUnderlyingStreams) HasNoUnderlyingNonDeliverableFixingDates() bool {
	return m.Has(tag.NoUnderlyingNonDeliverableFixingDates)
}

// HasNoUnderlyingSettlRateFallbacks returns true if NoUnderlyingSettlRateFallbacks is present, Tag 40659.
func (m NoUnderlyingStreams) HasNoUnderlyingSettlRateFallbacks() bool {
	return m.Has(tag.NoUnderlyingSettlRateFallbacks)
}

// HasUnderlyingPaymentStreamFlatRateIndicator returns true if UnderlyingPaymentStreamFlatRateIndicator is present, Tag 41897.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamFlatRateIndicator() bool {
	return m.Has(tag.UnderlyingPaymentStreamFlatRateIndicator)
}

// HasUnderlyingPaymentStreamFlatRateAmount returns true if UnderlyingPaymentStreamFlatRateAmount is present, Tag 41898.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamFlatRateAmount() bool {
	return m.Has(tag.UnderlyingPaymentStreamFlatRateAmount)
}

// HasUnderlyingPaymentStreamFlatRateCurrency returns true if UnderlyingPaymentStreamFlatRateCurrency is present, Tag 41899.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamFlatRateCurrency() bool {
	return m.Has(tag.UnderlyingPaymentStreamFlatRateCurrency)
}

// HasUnderlyingPaymentStreamMaximumPaymentAmount returns true if UnderlyingPaymentStreamMaximumPaymentAmount is present, Tag 41900.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamMaximumPaymentAmount() bool {
	return m.Has(tag.UnderlyingPaymentStreamMaximumPaymentAmount)
}

// HasUnderlyingPaymentStreamMaximumPaymentCurrency returns true if UnderlyingPaymentStreamMaximumPaymentCurrency is present, Tag 41901.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamMaximumPaymentCurrency() bool {
	return m.Has(tag.UnderlyingPaymentStreamMaximumPaymentCurrency)
}

// HasUnderlyingPaymentStreamMaximumTransactionAmount returns true if UnderlyingPaymentStreamMaximumTransactionAmount is present, Tag 41902.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamMaximumTransactionAmount() bool {
	return m.Has(tag.UnderlyingPaymentStreamMaximumTransactionAmount)
}

// HasUnderlyingPaymentStreamMaximumTransactionCurrency returns true if UnderlyingPaymentStreamMaximumTransactionCurrency is present, Tag 41903.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamMaximumTransactionCurrency() bool {
	return m.Has(tag.UnderlyingPaymentStreamMaximumTransactionCurrency)
}

// HasUnderlyingPaymentStreamCashSettlIndicator returns true if UnderlyingPaymentStreamCashSettlIndicator is present, Tag 42895.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamCashSettlIndicator() bool {
	return m.Has(tag.UnderlyingPaymentStreamCashSettlIndicator)
}

// HasUnderlyingPaymentStreamCompoundingXIDRef returns true if UnderlyingPaymentStreamCompoundingXIDRef is present, Tag 42896.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamCompoundingXIDRef() bool {
	return m.Has(tag.UnderlyingPaymentStreamCompoundingXIDRef)
}

// HasUnderlyingPaymentStreamCompoundingSpread returns true if UnderlyingPaymentStreamCompoundingSpread is present, Tag 42897.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamCompoundingSpread() bool {
	return m.Has(tag.UnderlyingPaymentStreamCompoundingSpread)
}

// HasUnderlyingPaymentStreamInterpolationMethod returns true if UnderlyingPaymentStreamInterpolationMethod is present, Tag 42898.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamInterpolationMethod() bool {
	return m.Has(tag.UnderlyingPaymentStreamInterpolationMethod)
}

// HasUnderlyingPaymentStreamInterpolationPeriod returns true if UnderlyingPaymentStreamInterpolationPeriod is present, Tag 42899.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamInterpolationPeriod() bool {
	return m.Has(tag.UnderlyingPaymentStreamInterpolationPeriod)
}

// HasUnderlyingPaymentStreamCompoundingFixedRate returns true if UnderlyingPaymentStreamCompoundingFixedRate is present, Tag 42900.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamCompoundingFixedRate() bool {
	return m.Has(tag.UnderlyingPaymentStreamCompoundingFixedRate)
}

// HasUnderlyingPaymentStreamCompoundingRateIndex returns true if UnderlyingPaymentStreamCompoundingRateIndex is present, Tag 42923.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamCompoundingRateIndex() bool {
	return m.Has(tag.UnderlyingPaymentStreamCompoundingRateIndex)
}

// HasUnderlyingPaymentStreamCompoundingRateIndexCurvePeriod returns true if UnderlyingPaymentStreamCompoundingRateIndexCurvePeriod is present, Tag 42924.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamCompoundingRateIndexCurvePeriod() bool {
	return m.Has(tag.UnderlyingPaymentStreamCompoundingRateIndexCurvePeriod)
}

// HasUnderlyingPaymentStreamCompoundingRateIndexCurveUnit returns true if UnderlyingPaymentStreamCompoundingRateIndexCurveUnit is present, Tag 42925.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamCompoundingRateIndexCurveUnit() bool {
	return m.Has(tag.UnderlyingPaymentStreamCompoundingRateIndexCurveUnit)
}

// HasUnderlyingPaymentStreamCompoundingRateMultiplier returns true if UnderlyingPaymentStreamCompoundingRateMultiplier is present, Tag 42926.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamCompoundingRateMultiplier() bool {
	return m.Has(tag.UnderlyingPaymentStreamCompoundingRateMultiplier)
}

// HasUnderlyingPaymentStreamCompoundingRateSpread returns true if UnderlyingPaymentStreamCompoundingRateSpread is present, Tag 42927.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamCompoundingRateSpread() bool {
	return m.Has(tag.UnderlyingPaymentStreamCompoundingRateSpread)
}

// HasUnderlyingPaymentStreamCompoundingRateSpreadPositionType returns true if UnderlyingPaymentStreamCompoundingRateSpreadPositionType is present, Tag 42928.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamCompoundingRateSpreadPositionType() bool {
	return m.Has(tag.UnderlyingPaymentStreamCompoundingRateSpreadPositionType)
}

// HasUnderlyingPaymentStreamCompoundingRateTreatment returns true if UnderlyingPaymentStreamCompoundingRateTreatment is present, Tag 42929.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamCompoundingRateTreatment() bool {
	return m.Has(tag.UnderlyingPaymentStreamCompoundingRateTreatment)
}

// HasUnderlyingPaymentStreamCompoundingCapRate returns true if UnderlyingPaymentStreamCompoundingCapRate is present, Tag 42930.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamCompoundingCapRate() bool {
	return m.Has(tag.UnderlyingPaymentStreamCompoundingCapRate)
}

// HasUnderlyingPaymentStreamCompoundingCapRateBuySide returns true if UnderlyingPaymentStreamCompoundingCapRateBuySide is present, Tag 42931.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamCompoundingCapRateBuySide() bool {
	return m.Has(tag.UnderlyingPaymentStreamCompoundingCapRateBuySide)
}

// HasUnderlyingPaymentStreamCompoundingCapRateSellSide returns true if UnderlyingPaymentStreamCompoundingCapRateSellSide is present, Tag 42932.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamCompoundingCapRateSellSide() bool {
	return m.Has(tag.UnderlyingPaymentStreamCompoundingCapRateSellSide)
}

// HasUnderlyingPaymentStreamCompoundingFloorRate returns true if UnderlyingPaymentStreamCompoundingFloorRate is present, Tag 42933.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamCompoundingFloorRate() bool {
	return m.Has(tag.UnderlyingPaymentStreamCompoundingFloorRate)
}

// HasUnderlyingPaymentStreamCompoundingFloorRateBuySide returns true if UnderlyingPaymentStreamCompoundingFloorRateBuySide is present, Tag 42934.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamCompoundingFloorRateBuySide() bool {
	return m.Has(tag.UnderlyingPaymentStreamCompoundingFloorRateBuySide)
}

// HasUnderlyingPaymentStreamCompoundingFloorRateSellSide returns true if UnderlyingPaymentStreamCompoundingFloorRateSellSide is present, Tag 42935.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamCompoundingFloorRateSellSide() bool {
	return m.Has(tag.UnderlyingPaymentStreamCompoundingFloorRateSellSide)
}

// HasUnderlyingPaymentStreamCompoundingInitialRate returns true if UnderlyingPaymentStreamCompoundingInitialRate is present, Tag 42936.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamCompoundingInitialRate() bool {
	return m.Has(tag.UnderlyingPaymentStreamCompoundingInitialRate)
}

// HasUnderlyingPaymentStreamCompoundingFinalRateRoundingDirection returns true if UnderlyingPaymentStreamCompoundingFinalRateRoundingDirection is present, Tag 42937.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamCompoundingFinalRateRoundingDirection() bool {
	return m.Has(tag.UnderlyingPaymentStreamCompoundingFinalRateRoundingDirection)
}

// HasUnderlyingPaymentStreamCompoundingFinalRatePrecision returns true if UnderlyingPaymentStreamCompoundingFinalRatePrecision is present, Tag 42938.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamCompoundingFinalRatePrecision() bool {
	return m.Has(tag.UnderlyingPaymentStreamCompoundingFinalRatePrecision)
}

// HasUnderlyingPaymentStreamCompoundingAveragingMethod returns true if UnderlyingPaymentStreamCompoundingAveragingMethod is present, Tag 42939.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamCompoundingAveragingMethod() bool {
	return m.Has(tag.UnderlyingPaymentStreamCompoundingAveragingMethod)
}

// HasUnderlyingPaymentStreamCompoundingNegativeRateTreatment returns true if UnderlyingPaymentStreamCompoundingNegativeRateTreatment is present, Tag 42940.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamCompoundingNegativeRateTreatment() bool {
	return m.Has(tag.UnderlyingPaymentStreamCompoundingNegativeRateTreatment)
}

// HasUnderlyingPaymentStreamCompoundingDatesBusinessDayConvention returns true if UnderlyingPaymentStreamCompoundingDatesBusinessDayConvention is present, Tag 42904.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamCompoundingDatesBusinessDayConvention() bool {
	return m.Has(tag.UnderlyingPaymentStreamCompoundingDatesBusinessDayConvention)
}

// HasNoUnderlyingPaymentStreamCompoundingDatesBusinessCenters returns true if NoUnderlyingPaymentStreamCompoundingDatesBusinessCenters is present, Tag 42915.
func (m NoUnderlyingStreams) HasNoUnderlyingPaymentStreamCompoundingDatesBusinessCenters() bool {
	return m.Has(tag.NoUnderlyingPaymentStreamCompoundingDatesBusinessCenters)
}

// HasNoUnderlyingPaymentStreamCompoundingDates returns true if NoUnderlyingPaymentStreamCompoundingDates is present, Tag 42901.
func (m NoUnderlyingStreams) HasNoUnderlyingPaymentStreamCompoundingDates() bool {
	return m.Has(tag.NoUnderlyingPaymentStreamCompoundingDates)
}

// HasUnderlyingPaymentStreamCompoundingDatesRelativeTo returns true if UnderlyingPaymentStreamCompoundingDatesRelativeTo is present, Tag 42905.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamCompoundingDatesRelativeTo() bool {
	return m.Has(tag.UnderlyingPaymentStreamCompoundingDatesRelativeTo)
}

// HasUnderlyingPaymentStreamCompoundingDatesOffsetPeriod returns true if UnderlyingPaymentStreamCompoundingDatesOffsetPeriod is present, Tag 42906.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamCompoundingDatesOffsetPeriod() bool {
	return m.Has(tag.UnderlyingPaymentStreamCompoundingDatesOffsetPeriod)
}

// HasUnderlyingPaymentStreamCompoundingDatesOffsetUnit returns true if UnderlyingPaymentStreamCompoundingDatesOffsetUnit is present, Tag 42907.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamCompoundingDatesOffsetUnit() bool {
	return m.Has(tag.UnderlyingPaymentStreamCompoundingDatesOffsetUnit)
}

// HasUnderlyingPaymentStreamCompoundingDatesOffsetDayType returns true if UnderlyingPaymentStreamCompoundingDatesOffsetDayType is present, Tag 42908.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamCompoundingDatesOffsetDayType() bool {
	return m.Has(tag.UnderlyingPaymentStreamCompoundingDatesOffsetDayType)
}

// HasUnderlyingPaymentStreamCompoundingPeriodSkip returns true if UnderlyingPaymentStreamCompoundingPeriodSkip is present, Tag 42909.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamCompoundingPeriodSkip() bool {
	return m.Has(tag.UnderlyingPaymentStreamCompoundingPeriodSkip)
}

// HasUnderlyingPaymentStreamCompoundingStartDateUnadjusted returns true if UnderlyingPaymentStreamCompoundingStartDateUnadjusted is present, Tag 42941.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamCompoundingStartDateUnadjusted() bool {
	return m.Has(tag.UnderlyingPaymentStreamCompoundingStartDateUnadjusted)
}

// HasUnderlyingPaymentStreamCompoundingStartDateRelativeTo returns true if UnderlyingPaymentStreamCompoundingStartDateRelativeTo is present, Tag 42942.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamCompoundingStartDateRelativeTo() bool {
	return m.Has(tag.UnderlyingPaymentStreamCompoundingStartDateRelativeTo)
}

// HasUnderlyingPaymentStreamCompoundingStartDateOffsetPeriod returns true if UnderlyingPaymentStreamCompoundingStartDateOffsetPeriod is present, Tag 42943.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamCompoundingStartDateOffsetPeriod() bool {
	return m.Has(tag.UnderlyingPaymentStreamCompoundingStartDateOffsetPeriod)
}

// HasUnderlyingPaymentStreamCompoundingStartDateOffsetUnit returns true if UnderlyingPaymentStreamCompoundingStartDateOffsetUnit is present, Tag 42944.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamCompoundingStartDateOffsetUnit() bool {
	return m.Has(tag.UnderlyingPaymentStreamCompoundingStartDateOffsetUnit)
}

// HasUnderlyingPaymentStreamCompoundingStartDateOffsetDayType returns true if UnderlyingPaymentStreamCompoundingStartDateOffsetDayType is present, Tag 42945.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamCompoundingStartDateOffsetDayType() bool {
	return m.Has(tag.UnderlyingPaymentStreamCompoundingStartDateOffsetDayType)
}

// HasUnderlyingPaymentStreamCompoundingStartDateAdjusted returns true if UnderlyingPaymentStreamCompoundingStartDateAdjusted is present, Tag 42946.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamCompoundingStartDateAdjusted() bool {
	return m.Has(tag.UnderlyingPaymentStreamCompoundingStartDateAdjusted)
}

// HasUnderlyingPaymentStreamCompoundingEndDateUnadjusted returns true if UnderlyingPaymentStreamCompoundingEndDateUnadjusted is present, Tag 42917.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamCompoundingEndDateUnadjusted() bool {
	return m.Has(tag.UnderlyingPaymentStreamCompoundingEndDateUnadjusted)
}

// HasUnderlyingPaymentStreamCompoundingEndDateRelativeTo returns true if UnderlyingPaymentStreamCompoundingEndDateRelativeTo is present, Tag 42918.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamCompoundingEndDateRelativeTo() bool {
	return m.Has(tag.UnderlyingPaymentStreamCompoundingEndDateRelativeTo)
}

// HasUnderlyingPaymentStreamCompoundingEndDateOffsetPeriod returns true if UnderlyingPaymentStreamCompoundingEndDateOffsetPeriod is present, Tag 42919.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamCompoundingEndDateOffsetPeriod() bool {
	return m.Has(tag.UnderlyingPaymentStreamCompoundingEndDateOffsetPeriod)
}

// HasUnderlyingPaymentStreamCompoundingEndDateOffsetUnit returns true if UnderlyingPaymentStreamCompoundingEndDateOffsetUnit is present, Tag 42920.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamCompoundingEndDateOffsetUnit() bool {
	return m.Has(tag.UnderlyingPaymentStreamCompoundingEndDateOffsetUnit)
}

// HasUnderlyingPaymentStreamCompoundingEndDateOffsetDayType returns true if UnderlyingPaymentStreamCompoundingEndDateOffsetDayType is present, Tag 42921.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamCompoundingEndDateOffsetDayType() bool {
	return m.Has(tag.UnderlyingPaymentStreamCompoundingEndDateOffsetDayType)
}

// HasUnderlyingPaymentStreamCompoundingEndDateAdjusted returns true if UnderlyingPaymentStreamCompoundingEndDateAdjusted is present, Tag 42922.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamCompoundingEndDateAdjusted() bool {
	return m.Has(tag.UnderlyingPaymentStreamCompoundingEndDateAdjusted)
}

// HasUnderlyingPaymentStreamCompoundingFrequencyPeriod returns true if UnderlyingPaymentStreamCompoundingFrequencyPeriod is present, Tag 42910.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamCompoundingFrequencyPeriod() bool {
	return m.Has(tag.UnderlyingPaymentStreamCompoundingFrequencyPeriod)
}

// HasUnderlyingPaymentStreamCompoundingFrequencyUnit returns true if UnderlyingPaymentStreamCompoundingFrequencyUnit is present, Tag 42911.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamCompoundingFrequencyUnit() bool {
	return m.Has(tag.UnderlyingPaymentStreamCompoundingFrequencyUnit)
}

// HasUnderlyingPaymentStreamCompoundingRollConvention returns true if UnderlyingPaymentStreamCompoundingRollConvention is present, Tag 42912.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamCompoundingRollConvention() bool {
	return m.Has(tag.UnderlyingPaymentStreamCompoundingRollConvention)
}

// HasUnderlyingPaymentStreamBoundsFirstDateUnadjusted returns true if UnderlyingPaymentStreamBoundsFirstDateUnadjusted is present, Tag 42913.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamBoundsFirstDateUnadjusted() bool {
	return m.Has(tag.UnderlyingPaymentStreamBoundsFirstDateUnadjusted)
}

// HasUnderlyingPaymentStreamBoundsLastDateUnadjusted returns true if UnderlyingPaymentStreamBoundsLastDateUnadjusted is present, Tag 42914.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamBoundsLastDateUnadjusted() bool {
	return m.Has(tag.UnderlyingPaymentStreamBoundsLastDateUnadjusted)
}

// HasUnderlyingPaymentStreamOtherDayCount returns true if UnderlyingPaymentStreamOtherDayCount is present, Tag 43107.
func (m NoUnderlyingStreams) HasUnderlyingPaymentStreamOtherDayCount() bool {
	return m.Has(tag.UnderlyingPaymentStreamOtherDayCount)
}

// HasNoUnderlyingPaymentSchedules returns true if NoUnderlyingPaymentSchedules is present, Tag 40664.
func (m NoUnderlyingStreams) HasNoUnderlyingPaymentSchedules() bool {
	return m.Has(tag.NoUnderlyingPaymentSchedules)
}

// HasNoUnderlyingPaymentStubs returns true if NoUnderlyingPaymentStubs is present, Tag 40708.
func (m NoUnderlyingStreams) HasNoUnderlyingPaymentStubs() bool {
	return m.Has(tag.NoUnderlyingPaymentStubs)
}

// HasUnderlyingStreamText returns true if UnderlyingStreamText is present, Tag 40547.
func (m NoUnderlyingStreams) HasUnderlyingStreamText() bool {
	return m.Has(tag.UnderlyingStreamText)
}

// HasEncodedUnderlyingStreamTextLen returns true if EncodedUnderlyingStreamTextLen is present, Tag 40988.
func (m NoUnderlyingStreams) HasEncodedUnderlyingStreamTextLen() bool {
	return m.Has(tag.EncodedUnderlyingStreamTextLen)
}

// HasEncodedUnderlyingStreamText returns true if EncodedUnderlyingStreamText is present, Tag 40989.
func (m NoUnderlyingStreams) HasEncodedUnderlyingStreamText() bool {
	return m.Has(tag.EncodedUnderlyingStreamText)
}

// HasUnderlyingStreamXID returns true if UnderlyingStreamXID is present, Tag 42016.
func (m NoUnderlyingStreams) HasUnderlyingStreamXID() bool {
	return m.Has(tag.UnderlyingStreamXID)
}

// HasUnderlyingStreamNotionalXIDRef returns true if UnderlyingStreamNotionalXIDRef is present, Tag 42018.
func (m NoUnderlyingStreams) HasUnderlyingStreamNotionalXIDRef() bool {
	return m.Has(tag.UnderlyingStreamNotionalXIDRef)
}

// HasUnderlyingStreamNotionalFrequencyPeriod returns true if UnderlyingStreamNotionalFrequencyPeriod is present, Tag 42019.
func (m NoUnderlyingStreams) HasUnderlyingStreamNotionalFrequencyPeriod() bool {
	return m.Has(tag.UnderlyingStreamNotionalFrequencyPeriod)
}

// HasUnderlyingStreamNotionalFrequencyUnit returns true if UnderlyingStreamNotionalFrequencyUnit is present, Tag 42020.
func (m NoUnderlyingStreams) HasUnderlyingStreamNotionalFrequencyUnit() bool {
	return m.Has(tag.UnderlyingStreamNotionalFrequencyUnit)
}

// HasUnderlyingStreamNotionalCommodityFrequency returns true if UnderlyingStreamNotionalCommodityFrequency is present, Tag 42021.
func (m NoUnderlyingStreams) HasUnderlyingStreamNotionalCommodityFrequency() bool {
	return m.Has(tag.UnderlyingStreamNotionalCommodityFrequency)
}

// HasUnderlyingStreamNotionalUnitOfMeasure returns true if UnderlyingStreamNotionalUnitOfMeasure is present, Tag 42022.
func (m NoUnderlyingStreams) HasUnderlyingStreamNotionalUnitOfMeasure() bool {
	return m.Has(tag.UnderlyingStreamNotionalUnitOfMeasure)
}

// HasUnderlyingStreamTotalNotional returns true if UnderlyingStreamTotalNotional is present, Tag 42023.
func (m NoUnderlyingStreams) HasUnderlyingStreamTotalNotional() bool {
	return m.Has(tag.UnderlyingStreamTotalNotional)
}

// HasUnderlyingStreamTotalNotionalUnitOfMeasure returns true if UnderlyingStreamTotalNotionalUnitOfMeasure is present, Tag 42024.
func (m NoUnderlyingStreams) HasUnderlyingStreamTotalNotionalUnitOfMeasure() bool {
	return m.Has(tag.UnderlyingStreamTotalNotionalUnitOfMeasure)
}

// HasUnderlyingStreamCommodityBase returns true if UnderlyingStreamCommodityBase is present, Tag 41964.
func (m NoUnderlyingStreams) HasUnderlyingStreamCommodityBase() bool {
	return m.Has(tag.UnderlyingStreamCommodityBase)
}

// HasUnderlyingStreamCommodityType returns true if UnderlyingStreamCommodityType is present, Tag 41965.
func (m NoUnderlyingStreams) HasUnderlyingStreamCommodityType() bool {
	return m.Has(tag.UnderlyingStreamCommodityType)
}

// HasUnderlyingStreamCommoditySecurityID returns true if UnderlyingStreamCommoditySecurityID is present, Tag 41966.
func (m NoUnderlyingStreams) HasUnderlyingStreamCommoditySecurityID() bool {
	return m.Has(tag.UnderlyingStreamCommoditySecurityID)
}

// HasUnderlyingStreamCommoditySecurityIDSource returns true if UnderlyingStreamCommoditySecurityIDSource is present, Tag 41967.
func (m NoUnderlyingStreams) HasUnderlyingStreamCommoditySecurityIDSource() bool {
	return m.Has(tag.UnderlyingStreamCommoditySecurityIDSource)
}

// HasNoUnderlyingStreamCommodityAltIDs returns true if NoUnderlyingStreamCommodityAltIDs is present, Tag 41990.
func (m NoUnderlyingStreams) HasNoUnderlyingStreamCommodityAltIDs() bool {
	return m.Has(tag.NoUnderlyingStreamCommodityAltIDs)
}

// HasUnderlyingStreamCommodityDesc returns true if UnderlyingStreamCommodityDesc is present, Tag 41968.
func (m NoUnderlyingStreams) HasUnderlyingStreamCommodityDesc() bool {
	return m.Has(tag.UnderlyingStreamCommodityDesc)
}

// HasEncodedUnderlyingStreamCommodityDescLen returns true if EncodedUnderlyingStreamCommodityDescLen is present, Tag 41969.
func (m NoUnderlyingStreams) HasEncodedUnderlyingStreamCommodityDescLen() bool {
	return m.Has(tag.EncodedUnderlyingStreamCommodityDescLen)
}

// HasEncodedUnderlyingStreamCommodityDesc returns true if EncodedUnderlyingStreamCommodityDesc is present, Tag 41970.
func (m NoUnderlyingStreams) HasEncodedUnderlyingStreamCommodityDesc() bool {
	return m.Has(tag.EncodedUnderlyingStreamCommodityDesc)
}

// HasNoUnderlyingStreamAssetAttributes returns true if NoUnderlyingStreamAssetAttributes is present, Tag 41800.
func (m NoUnderlyingStreams) HasNoUnderlyingStreamAssetAttributes() bool {
	return m.Has(tag.NoUnderlyingStreamAssetAttributes)
}

// HasUnderlyingStreamCommodityUnitOfMeasure returns true if UnderlyingStreamCommodityUnitOfMeasure is present, Tag 41971.
func (m NoUnderlyingStreams) HasUnderlyingStreamCommodityUnitOfMeasure() bool {
	return m.Has(tag.UnderlyingStreamCommodityUnitOfMeasure)
}

// HasUnderlyingStreamCommodityCurrency returns true if UnderlyingStreamCommodityCurrency is present, Tag 41972.
func (m NoUnderlyingStreams) HasUnderlyingStreamCommodityCurrency() bool {
	return m.Has(tag.UnderlyingStreamCommodityCurrency)
}

// HasUnderlyingStreamCommodityExchange returns true if UnderlyingStreamCommodityExchange is present, Tag 41973.
func (m NoUnderlyingStreams) HasUnderlyingStreamCommodityExchange() bool {
	return m.Has(tag.UnderlyingStreamCommodityExchange)
}

// HasUnderlyingStreamCommodityRateSource returns true if UnderlyingStreamCommodityRateSource is present, Tag 41974.
func (m NoUnderlyingStreams) HasUnderlyingStreamCommodityRateSource() bool {
	return m.Has(tag.UnderlyingStreamCommodityRateSource)
}

// HasUnderlyingStreamCommodityRateReferencePage returns true if UnderlyingStreamCommodityRateReferencePage is present, Tag 41975.
func (m NoUnderlyingStreams) HasUnderlyingStreamCommodityRateReferencePage() bool {
	return m.Has(tag.UnderlyingStreamCommodityRateReferencePage)
}

// HasUnderlyingStreamCommodityRateReferencePageHeading returns true if UnderlyingStreamCommodityRateReferencePageHeading is present, Tag 41976.
func (m NoUnderlyingStreams) HasUnderlyingStreamCommodityRateReferencePageHeading() bool {
	return m.Has(tag.UnderlyingStreamCommodityRateReferencePageHeading)
}

// HasUnderlyingStreamDataProvider returns true if UnderlyingStreamDataProvider is present, Tag 41977.
func (m NoUnderlyingStreams) HasUnderlyingStreamDataProvider() bool {
	return m.Has(tag.UnderlyingStreamDataProvider)
}

// HasNoUnderlyingStreamCommodityDataSources returns true if NoUnderlyingStreamCommodityDataSources is present, Tag 41993.
func (m NoUnderlyingStreams) HasNoUnderlyingStreamCommodityDataSources() bool {
	return m.Has(tag.NoUnderlyingStreamCommodityDataSources)
}

// HasUnderlyingStreamCommodityPricingType returns true if UnderlyingStreamCommodityPricingType is present, Tag 41978.
func (m NoUnderlyingStreams) HasUnderlyingStreamCommodityPricingType() bool {
	return m.Has(tag.UnderlyingStreamCommodityPricingType)
}

// HasUnderlyingStreamCommodityNearbySettlDayPeriod returns true if UnderlyingStreamCommodityNearbySettlDayPeriod is present, Tag 41979.
func (m NoUnderlyingStreams) HasUnderlyingStreamCommodityNearbySettlDayPeriod() bool {
	return m.Has(tag.UnderlyingStreamCommodityNearbySettlDayPeriod)
}

// HasUnderlyingStreamCommodityNearbySettlDayUnit returns true if UnderlyingStreamCommodityNearbySettlDayUnit is present, Tag 41980.
func (m NoUnderlyingStreams) HasUnderlyingStreamCommodityNearbySettlDayUnit() bool {
	return m.Has(tag.UnderlyingStreamCommodityNearbySettlDayUnit)
}

// HasUnderlyingStreamCommoditySettlDateUnadjusted returns true if UnderlyingStreamCommoditySettlDateUnadjusted is present, Tag 41981.
func (m NoUnderlyingStreams) HasUnderlyingStreamCommoditySettlDateUnadjusted() bool {
	return m.Has(tag.UnderlyingStreamCommoditySettlDateUnadjusted)
}

// HasUnderlyingStreamCommoditySettlDateBusinessDayConvention returns true if UnderlyingStreamCommoditySettlDateBusinessDayConvention is present, Tag 41982.
func (m NoUnderlyingStreams) HasUnderlyingStreamCommoditySettlDateBusinessDayConvention() bool {
	return m.Has(tag.UnderlyingStreamCommoditySettlDateBusinessDayConvention)
}

// HasNoUnderlyingStreamCommoditySettlBusinessCenters returns true if NoUnderlyingStreamCommoditySettlBusinessCenters is present, Tag 41962.
func (m NoUnderlyingStreams) HasNoUnderlyingStreamCommoditySettlBusinessCenters() bool {
	return m.Has(tag.NoUnderlyingStreamCommoditySettlBusinessCenters)
}

// HasUnderlyingStreamCommoditySettlDateAdjusted returns true if UnderlyingStreamCommoditySettlDateAdjusted is present, Tag 41983.
func (m NoUnderlyingStreams) HasUnderlyingStreamCommoditySettlDateAdjusted() bool {
	return m.Has(tag.UnderlyingStreamCommoditySettlDateAdjusted)
}

// HasUnderlyingStreamCommoditySettlMonth returns true if UnderlyingStreamCommoditySettlMonth is present, Tag 41984.
func (m NoUnderlyingStreams) HasUnderlyingStreamCommoditySettlMonth() bool {
	return m.Has(tag.UnderlyingStreamCommoditySettlMonth)
}

// HasUnderlyingStreamCommoditySettlDateRollPeriod returns true if UnderlyingStreamCommoditySettlDateRollPeriod is present, Tag 41985.
func (m NoUnderlyingStreams) HasUnderlyingStreamCommoditySettlDateRollPeriod() bool {
	return m.Has(tag.UnderlyingStreamCommoditySettlDateRollPeriod)
}

// HasUnderlyingStreamCommoditySettlDateRollUnit returns true if UnderlyingStreamCommoditySettlDateRollUnit is present, Tag 41986.
func (m NoUnderlyingStreams) HasUnderlyingStreamCommoditySettlDateRollUnit() bool {
	return m.Has(tag.UnderlyingStreamCommoditySettlDateRollUnit)
}

// HasUnderlyingStreamCommoditySettlDayType returns true if UnderlyingStreamCommoditySettlDayType is present, Tag 41987.
func (m NoUnderlyingStreams) HasUnderlyingStreamCommoditySettlDayType() bool {
	return m.Has(tag.UnderlyingStreamCommoditySettlDayType)
}

// HasNoUnderlyingStreamCommoditySettlPeriods returns true if NoUnderlyingStreamCommoditySettlPeriods is present, Tag 42002.
func (m NoUnderlyingStreams) HasNoUnderlyingStreamCommoditySettlPeriods() bool {
	return m.Has(tag.NoUnderlyingStreamCommoditySettlPeriods)
}

// HasUnderlyingStreamCommodityXID returns true if UnderlyingStreamCommodityXID is present, Tag 41988.
func (m NoUnderlyingStreams) HasUnderlyingStreamCommodityXID() bool {
	return m.Has(tag.UnderlyingStreamCommodityXID)
}

// HasUnderlyingStreamCommodityXIDRef returns true if UnderlyingStreamCommodityXIDRef is present, Tag 41989.
func (m NoUnderlyingStreams) HasUnderlyingStreamCommodityXIDRef() bool {
	return m.Has(tag.UnderlyingStreamCommodityXIDRef)
}

// HasUnderlyingStreamCommodityDeliveryPricingRegion returns true if UnderlyingStreamCommodityDeliveryPricingRegion is present, Tag 42589.
func (m NoUnderlyingStreams) HasUnderlyingStreamCommodityDeliveryPricingRegion() bool {
	return m.Has(tag.UnderlyingStreamCommodityDeliveryPricingRegion)
}

// HasUnderlyingDeliveryStreamType returns true if UnderlyingDeliveryStreamType is present, Tag 41777.
func (m NoUnderlyingStreams) HasUnderlyingDeliveryStreamType() bool {
	return m.Has(tag.UnderlyingDeliveryStreamType)
}

// HasNoUnderlyingDeliveryStreamCommoditySources returns true if NoUnderlyingDeliveryStreamCommoditySources is present, Tag 41808.
func (m NoUnderlyingStreams) HasNoUnderlyingDeliveryStreamCommoditySources() bool {
	return m.Has(tag.NoUnderlyingDeliveryStreamCommoditySources)
}

// HasUnderlyingDeliveryStreamPipeline returns true if UnderlyingDeliveryStreamPipeline is present, Tag 41778.
func (m NoUnderlyingStreams) HasUnderlyingDeliveryStreamPipeline() bool {
	return m.Has(tag.UnderlyingDeliveryStreamPipeline)
}

// HasUnderlyingDeliveryStreamEntryPoint returns true if UnderlyingDeliveryStreamEntryPoint is present, Tag 41779.
func (m NoUnderlyingStreams) HasUnderlyingDeliveryStreamEntryPoint() bool {
	return m.Has(tag.UnderlyingDeliveryStreamEntryPoint)
}

// HasUnderlyingDeliveryStreamWithdrawalPoint returns true if UnderlyingDeliveryStreamWithdrawalPoint is present, Tag 41780.
func (m NoUnderlyingStreams) HasUnderlyingDeliveryStreamWithdrawalPoint() bool {
	return m.Has(tag.UnderlyingDeliveryStreamWithdrawalPoint)
}

// HasUnderlyingDeliveryStreamDeliveryPoint returns true if UnderlyingDeliveryStreamDeliveryPoint is present, Tag 41781.
func (m NoUnderlyingStreams) HasUnderlyingDeliveryStreamDeliveryPoint() bool {
	return m.Has(tag.UnderlyingDeliveryStreamDeliveryPoint)
}

// HasUnderlyingDeliveryStreamDeliveryRestriction returns true if UnderlyingDeliveryStreamDeliveryRestriction is present, Tag 41782.
func (m NoUnderlyingStreams) HasUnderlyingDeliveryStreamDeliveryRestriction() bool {
	return m.Has(tag.UnderlyingDeliveryStreamDeliveryRestriction)
}

// HasUnderlyingDeliveryStreamDeliveryContingency returns true if UnderlyingDeliveryStreamDeliveryContingency is present, Tag 41783.
func (m NoUnderlyingStreams) HasUnderlyingDeliveryStreamDeliveryContingency() bool {
	return m.Has(tag.UnderlyingDeliveryStreamDeliveryContingency)
}

// HasUnderlyingDeliveryStreamDeliveryContingentPartySide returns true if UnderlyingDeliveryStreamDeliveryContingentPartySide is present, Tag 41784.
func (m NoUnderlyingStreams) HasUnderlyingDeliveryStreamDeliveryContingentPartySide() bool {
	return m.Has(tag.UnderlyingDeliveryStreamDeliveryContingentPartySide)
}

// HasUnderlyingDeliveryStreamDeliverAtSourceIndicator returns true if UnderlyingDeliveryStreamDeliverAtSourceIndicator is present, Tag 41785.
func (m NoUnderlyingStreams) HasUnderlyingDeliveryStreamDeliverAtSourceIndicator() bool {
	return m.Has(tag.UnderlyingDeliveryStreamDeliverAtSourceIndicator)
}

// HasUnderlyingDeliveryStreamRiskApportionment returns true if UnderlyingDeliveryStreamRiskApportionment is present, Tag 41786.
func (m NoUnderlyingStreams) HasUnderlyingDeliveryStreamRiskApportionment() bool {
	return m.Has(tag.UnderlyingDeliveryStreamRiskApportionment)
}

// HasUnderlyingDeliveryStreamRiskApportionmentSource returns true if UnderlyingDeliveryStreamRiskApportionmentSource is present, Tag 41587.
func (m NoUnderlyingStreams) HasUnderlyingDeliveryStreamRiskApportionmentSource() bool {
	return m.Has(tag.UnderlyingDeliveryStreamRiskApportionmentSource)
}

// HasNoUnderlyingDeliveryStreamCycles returns true if NoUnderlyingDeliveryStreamCycles is present, Tag 41804.
func (m NoUnderlyingStreams) HasNoUnderlyingDeliveryStreamCycles() bool {
	return m.Has(tag.NoUnderlyingDeliveryStreamCycles)
}

// HasUnderlyingDeliveryStreamTitleTransferLocation returns true if UnderlyingDeliveryStreamTitleTransferLocation is present, Tag 41787.
func (m NoUnderlyingStreams) HasUnderlyingDeliveryStreamTitleTransferLocation() bool {
	return m.Has(tag.UnderlyingDeliveryStreamTitleTransferLocation)
}

// HasUnderlyingDeliveryStreamTitleTransferCondition returns true if UnderlyingDeliveryStreamTitleTransferCondition is present, Tag 41788.
func (m NoUnderlyingStreams) HasUnderlyingDeliveryStreamTitleTransferCondition() bool {
	return m.Has(tag.UnderlyingDeliveryStreamTitleTransferCondition)
}

// HasUnderlyingDeliveryStreamImporterOfRecord returns true if UnderlyingDeliveryStreamImporterOfRecord is present, Tag 41789.
func (m NoUnderlyingStreams) HasUnderlyingDeliveryStreamImporterOfRecord() bool {
	return m.Has(tag.UnderlyingDeliveryStreamImporterOfRecord)
}

// HasUnderlyingDeliveryStreamNegativeTolerance returns true if UnderlyingDeliveryStreamNegativeTolerance is present, Tag 41790.
func (m NoUnderlyingStreams) HasUnderlyingDeliveryStreamNegativeTolerance() bool {
	return m.Has(tag.UnderlyingDeliveryStreamNegativeTolerance)
}

// HasUnderlyingDeliveryStreamPositiveTolerance returns true if UnderlyingDeliveryStreamPositiveTolerance is present, Tag 41791.
func (m NoUnderlyingStreams) HasUnderlyingDeliveryStreamPositiveTolerance() bool {
	return m.Has(tag.UnderlyingDeliveryStreamPositiveTolerance)
}

// HasUnderlyingDeliveryStreamToleranceUnitOfMeasure returns true if UnderlyingDeliveryStreamToleranceUnitOfMeasure is present, Tag 41792.
func (m NoUnderlyingStreams) HasUnderlyingDeliveryStreamToleranceUnitOfMeasure() bool {
	return m.Has(tag.UnderlyingDeliveryStreamToleranceUnitOfMeasure)
}

// HasUnderlyingDeliveryStreamToleranceType returns true if UnderlyingDeliveryStreamToleranceType is present, Tag 41793.
func (m NoUnderlyingStreams) HasUnderlyingDeliveryStreamToleranceType() bool {
	return m.Has(tag.UnderlyingDeliveryStreamToleranceType)
}

// HasUnderlyingDeliveryStreamToleranceOptionSide returns true if UnderlyingDeliveryStreamToleranceOptionSide is present, Tag 41794.
func (m NoUnderlyingStreams) HasUnderlyingDeliveryStreamToleranceOptionSide() bool {
	return m.Has(tag.UnderlyingDeliveryStreamToleranceOptionSide)
}

// HasUnderlyingDeliveryStreamTotalPositiveTolerance returns true if UnderlyingDeliveryStreamTotalPositiveTolerance is present, Tag 41795.
func (m NoUnderlyingStreams) HasUnderlyingDeliveryStreamTotalPositiveTolerance() bool {
	return m.Has(tag.UnderlyingDeliveryStreamTotalPositiveTolerance)
}

// HasUnderlyingDeliveryStreamTotalNegativeTolerance returns true if UnderlyingDeliveryStreamTotalNegativeTolerance is present, Tag 41796.
func (m NoUnderlyingStreams) HasUnderlyingDeliveryStreamTotalNegativeTolerance() bool {
	return m.Has(tag.UnderlyingDeliveryStreamTotalNegativeTolerance)
}

// HasUnderlyingDeliveryStreamNotionalConversionFactor returns true if UnderlyingDeliveryStreamNotionalConversionFactor is present, Tag 41797.
func (m NoUnderlyingStreams) HasUnderlyingDeliveryStreamNotionalConversionFactor() bool {
	return m.Has(tag.UnderlyingDeliveryStreamNotionalConversionFactor)
}

// HasUnderlyingDeliveryStreamTransportEquipment returns true if UnderlyingDeliveryStreamTransportEquipment is present, Tag 41798.
func (m NoUnderlyingStreams) HasUnderlyingDeliveryStreamTransportEquipment() bool {
	return m.Has(tag.UnderlyingDeliveryStreamTransportEquipment)
}

// HasUnderlyingDeliveryStreamElectingPartySide returns true if UnderlyingDeliveryStreamElectingPartySide is present, Tag 41799.
func (m NoUnderlyingStreams) HasUnderlyingDeliveryStreamElectingPartySide() bool {
	return m.Has(tag.UnderlyingDeliveryStreamElectingPartySide)
}

// HasUnderlyingDeliveryStreamDeliveryPointSource returns true if UnderlyingDeliveryStreamDeliveryPointSource is present, Tag 42196.
func (m NoUnderlyingStreams) HasUnderlyingDeliveryStreamDeliveryPointSource() bool {
	return m.Has(tag.UnderlyingDeliveryStreamDeliveryPointSource)
}

// HasUnderlyingDeliveryStreamDeliveryPointDesc returns true if UnderlyingDeliveryStreamDeliveryPointDesc is present, Tag 42197.
func (m NoUnderlyingStreams) HasUnderlyingDeliveryStreamDeliveryPointDesc() bool {
	return m.Has(tag.UnderlyingDeliveryStreamDeliveryPointDesc)
}

// HasUnderlyingDeliveryStreamRouteOrCharter returns true if UnderlyingDeliveryStreamRouteOrCharter is present, Tag 43096.
func (m NoUnderlyingStreams) HasUnderlyingDeliveryStreamRouteOrCharter() bool {
	return m.Has(tag.UnderlyingDeliveryStreamRouteOrCharter)
}

// HasNoUnderlyingDeliverySchedules returns true if NoUnderlyingDeliverySchedules is present, Tag 41756.
func (m NoUnderlyingStreams) HasNoUnderlyingDeliverySchedules() bool {
	return m.Has(tag.NoUnderlyingDeliverySchedules)
}

// HasUnderlyingStreamVersion returns true if UnderlyingStreamVersion is present, Tag 43083.
func (m NoUnderlyingStreams) HasUnderlyingStreamVersion() bool {
	return m.Has(tag.UnderlyingStreamVersion)
}

// HasUnderlyingStreamVersionEffectiveDate returns true if UnderlyingStreamVersionEffectiveDate is present, Tag 43084.
func (m NoUnderlyingStreams) HasUnderlyingStreamVersionEffectiveDate() bool {
	return m.Has(tag.UnderlyingStreamVersionEffectiveDate)
}

// HasUnderlyingStreamNotionalDeterminationMethod returns true if UnderlyingStreamNotionalDeterminationMethod is present, Tag 43085.
func (m NoUnderlyingStreams) HasUnderlyingStreamNotionalDeterminationMethod() bool {
	return m.Has(tag.UnderlyingStreamNotionalDeterminationMethod)
}

// HasUnderlyingStreamNotionalAdjustments returns true if UnderlyingStreamNotionalAdjustments is present, Tag 43086.
func (m NoUnderlyingStreams) HasUnderlyingStreamNotionalAdjustments() bool {
	return m.Has(tag.UnderlyingStreamNotionalAdjustments)
}

// NoUnderlyingStreamEffectiveDateBusinessCenters is a repeating group element, Tag 40975.
type NoUnderlyingStreamEffectiveDateBusinessCenters struct {
	*quickfix.Group
}

// SetUnderlyingStreamEffectiveDateBusinessCenter sets UnderlyingStreamEffectiveDateBusinessCenter, Tag 40059.
func (m NoUnderlyingStreamEffectiveDateBusinessCenters) SetUnderlyingStreamEffectiveDateBusinessCenter(v string) {
	m.Set(field.NewUnderlyingStreamEffectiveDateBusinessCenter(v))
}

// GetUnderlyingStreamEffectiveDateBusinessCenter gets UnderlyingStreamEffectiveDateBusinessCenter, Tag 40059.
func (m NoUnderlyingStreamEffectiveDateBusinessCenters) GetUnderlyingStreamEffectiveDateBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamEffectiveDateBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingStreamEffectiveDateBusinessCenter returns true if UnderlyingStreamEffectiveDateBusinessCenter is present, Tag 40059.
func (m NoUnderlyingStreamEffectiveDateBusinessCenters) HasUnderlyingStreamEffectiveDateBusinessCenter() bool {
	return m.Has(tag.UnderlyingStreamEffectiveDateBusinessCenter)
}

// NoUnderlyingStreamEffectiveDateBusinessCentersRepeatingGroup is a repeating group, Tag 40975.
type NoUnderlyingStreamEffectiveDateBusinessCentersRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingStreamEffectiveDateBusinessCentersRepeatingGroup returns an initialized, NoUnderlyingStreamEffectiveDateBusinessCentersRepeatingGroup.
func NewNoUnderlyingStreamEffectiveDateBusinessCentersRepeatingGroup() NoUnderlyingStreamEffectiveDateBusinessCentersRepeatingGroup {
	return NoUnderlyingStreamEffectiveDateBusinessCentersRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingStreamEffectiveDateBusinessCenters,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingStreamEffectiveDateBusinessCenter),
			},
		),
	}
}

// Add create and append a new NoUnderlyingStreamEffectiveDateBusinessCenters to this group.
func (m NoUnderlyingStreamEffectiveDateBusinessCentersRepeatingGroup) Add() NoUnderlyingStreamEffectiveDateBusinessCenters {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingStreamEffectiveDateBusinessCenters{g}
}

// Get returns the ith NoUnderlyingStreamEffectiveDateBusinessCenters in the NoUnderlyingStreamEffectiveDateBusinessCentersRepeatinGroup.
func (m NoUnderlyingStreamEffectiveDateBusinessCentersRepeatingGroup) Get(i int) NoUnderlyingStreamEffectiveDateBusinessCenters {
	return NoUnderlyingStreamEffectiveDateBusinessCenters{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingStreamTerminationDateBusinessCenters is a repeating group element, Tag 40976.
type NoUnderlyingStreamTerminationDateBusinessCenters struct {
	*quickfix.Group
}

// SetUnderlyingStreamTerminationDateBusinessCenter sets UnderlyingStreamTerminationDateBusinessCenter, Tag 40550.
func (m NoUnderlyingStreamTerminationDateBusinessCenters) SetUnderlyingStreamTerminationDateBusinessCenter(v string) {
	m.Set(field.NewUnderlyingStreamTerminationDateBusinessCenter(v))
}

// GetUnderlyingStreamTerminationDateBusinessCenter gets UnderlyingStreamTerminationDateBusinessCenter, Tag 40550.
func (m NoUnderlyingStreamTerminationDateBusinessCenters) GetUnderlyingStreamTerminationDateBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamTerminationDateBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingStreamTerminationDateBusinessCenter returns true if UnderlyingStreamTerminationDateBusinessCenter is present, Tag 40550.
func (m NoUnderlyingStreamTerminationDateBusinessCenters) HasUnderlyingStreamTerminationDateBusinessCenter() bool {
	return m.Has(tag.UnderlyingStreamTerminationDateBusinessCenter)
}

// NoUnderlyingStreamTerminationDateBusinessCentersRepeatingGroup is a repeating group, Tag 40976.
type NoUnderlyingStreamTerminationDateBusinessCentersRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingStreamTerminationDateBusinessCentersRepeatingGroup returns an initialized, NoUnderlyingStreamTerminationDateBusinessCentersRepeatingGroup.
func NewNoUnderlyingStreamTerminationDateBusinessCentersRepeatingGroup() NoUnderlyingStreamTerminationDateBusinessCentersRepeatingGroup {
	return NoUnderlyingStreamTerminationDateBusinessCentersRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingStreamTerminationDateBusinessCenters,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingStreamTerminationDateBusinessCenter),
			},
		),
	}
}

// Add create and append a new NoUnderlyingStreamTerminationDateBusinessCenters to this group.
func (m NoUnderlyingStreamTerminationDateBusinessCentersRepeatingGroup) Add() NoUnderlyingStreamTerminationDateBusinessCenters {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingStreamTerminationDateBusinessCenters{g}
}

// Get returns the ith NoUnderlyingStreamTerminationDateBusinessCenters in the NoUnderlyingStreamTerminationDateBusinessCentersRepeatinGroup.
func (m NoUnderlyingStreamTerminationDateBusinessCentersRepeatingGroup) Get(i int) NoUnderlyingStreamTerminationDateBusinessCenters {
	return NoUnderlyingStreamTerminationDateBusinessCenters{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingStreamCalculationPeriodBusinessCenters is a repeating group element, Tag 40973.
type NoUnderlyingStreamCalculationPeriodBusinessCenters struct {
	*quickfix.Group
}

// SetUnderlyingStreamCalculationPeriodBusinessCenter sets UnderlyingStreamCalculationPeriodBusinessCenter, Tag 40557.
func (m NoUnderlyingStreamCalculationPeriodBusinessCenters) SetUnderlyingStreamCalculationPeriodBusinessCenter(v string) {
	m.Set(field.NewUnderlyingStreamCalculationPeriodBusinessCenter(v))
}

// GetUnderlyingStreamCalculationPeriodBusinessCenter gets UnderlyingStreamCalculationPeriodBusinessCenter, Tag 40557.
func (m NoUnderlyingStreamCalculationPeriodBusinessCenters) GetUnderlyingStreamCalculationPeriodBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamCalculationPeriodBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingStreamCalculationPeriodBusinessCenter returns true if UnderlyingStreamCalculationPeriodBusinessCenter is present, Tag 40557.
func (m NoUnderlyingStreamCalculationPeriodBusinessCenters) HasUnderlyingStreamCalculationPeriodBusinessCenter() bool {
	return m.Has(tag.UnderlyingStreamCalculationPeriodBusinessCenter)
}

// NoUnderlyingStreamCalculationPeriodBusinessCentersRepeatingGroup is a repeating group, Tag 40973.
type NoUnderlyingStreamCalculationPeriodBusinessCentersRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingStreamCalculationPeriodBusinessCentersRepeatingGroup returns an initialized, NoUnderlyingStreamCalculationPeriodBusinessCentersRepeatingGroup.
func NewNoUnderlyingStreamCalculationPeriodBusinessCentersRepeatingGroup() NoUnderlyingStreamCalculationPeriodBusinessCentersRepeatingGroup {
	return NoUnderlyingStreamCalculationPeriodBusinessCentersRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingStreamCalculationPeriodBusinessCenters,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingStreamCalculationPeriodBusinessCenter),
			},
		),
	}
}

// Add create and append a new NoUnderlyingStreamCalculationPeriodBusinessCenters to this group.
func (m NoUnderlyingStreamCalculationPeriodBusinessCentersRepeatingGroup) Add() NoUnderlyingStreamCalculationPeriodBusinessCenters {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingStreamCalculationPeriodBusinessCenters{g}
}

// Get returns the ith NoUnderlyingStreamCalculationPeriodBusinessCenters in the NoUnderlyingStreamCalculationPeriodBusinessCentersRepeatinGroup.
func (m NoUnderlyingStreamCalculationPeriodBusinessCentersRepeatingGroup) Get(i int) NoUnderlyingStreamCalculationPeriodBusinessCenters {
	return NoUnderlyingStreamCalculationPeriodBusinessCenters{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingStreamFirstPeriodStartDateBusinessCenters is a repeating group element, Tag 40974.
type NoUnderlyingStreamFirstPeriodStartDateBusinessCenters struct {
	*quickfix.Group
}

// SetUnderlyingStreamFirstPeriodStartDateBusinessCenter sets UnderlyingStreamFirstPeriodStartDateBusinessCenter, Tag 40560.
func (m NoUnderlyingStreamFirstPeriodStartDateBusinessCenters) SetUnderlyingStreamFirstPeriodStartDateBusinessCenter(v string) {
	m.Set(field.NewUnderlyingStreamFirstPeriodStartDateBusinessCenter(v))
}

// GetUnderlyingStreamFirstPeriodStartDateBusinessCenter gets UnderlyingStreamFirstPeriodStartDateBusinessCenter, Tag 40560.
func (m NoUnderlyingStreamFirstPeriodStartDateBusinessCenters) GetUnderlyingStreamFirstPeriodStartDateBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamFirstPeriodStartDateBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingStreamFirstPeriodStartDateBusinessCenter returns true if UnderlyingStreamFirstPeriodStartDateBusinessCenter is present, Tag 40560.
func (m NoUnderlyingStreamFirstPeriodStartDateBusinessCenters) HasUnderlyingStreamFirstPeriodStartDateBusinessCenter() bool {
	return m.Has(tag.UnderlyingStreamFirstPeriodStartDateBusinessCenter)
}

// NoUnderlyingStreamFirstPeriodStartDateBusinessCentersRepeatingGroup is a repeating group, Tag 40974.
type NoUnderlyingStreamFirstPeriodStartDateBusinessCentersRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingStreamFirstPeriodStartDateBusinessCentersRepeatingGroup returns an initialized, NoUnderlyingStreamFirstPeriodStartDateBusinessCentersRepeatingGroup.
func NewNoUnderlyingStreamFirstPeriodStartDateBusinessCentersRepeatingGroup() NoUnderlyingStreamFirstPeriodStartDateBusinessCentersRepeatingGroup {
	return NoUnderlyingStreamFirstPeriodStartDateBusinessCentersRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingStreamFirstPeriodStartDateBusinessCenters,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingStreamFirstPeriodStartDateBusinessCenter),
			},
		),
	}
}

// Add create and append a new NoUnderlyingStreamFirstPeriodStartDateBusinessCenters to this group.
func (m NoUnderlyingStreamFirstPeriodStartDateBusinessCentersRepeatingGroup) Add() NoUnderlyingStreamFirstPeriodStartDateBusinessCenters {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingStreamFirstPeriodStartDateBusinessCenters{g}
}

// Get returns the ith NoUnderlyingStreamFirstPeriodStartDateBusinessCenters in the NoUnderlyingStreamFirstPeriodStartDateBusinessCentersRepeatinGroup.
func (m NoUnderlyingStreamFirstPeriodStartDateBusinessCentersRepeatingGroup) Get(i int) NoUnderlyingStreamFirstPeriodStartDateBusinessCenters {
	return NoUnderlyingStreamFirstPeriodStartDateBusinessCenters{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingStreamCalculationPeriodDates is a repeating group element, Tag 41954.
type NoUnderlyingStreamCalculationPeriodDates struct {
	*quickfix.Group
}

// SetUnderlyingStreamCalculationPeriodDate sets UnderlyingStreamCalculationPeriodDate, Tag 41955.
func (m NoUnderlyingStreamCalculationPeriodDates) SetUnderlyingStreamCalculationPeriodDate(v string) {
	m.Set(field.NewUnderlyingStreamCalculationPeriodDate(v))
}

// SetUnderlyingStreamCalculationPeriodDateType sets UnderlyingStreamCalculationPeriodDateType, Tag 41956.
func (m NoUnderlyingStreamCalculationPeriodDates) SetUnderlyingStreamCalculationPeriodDateType(v int) {
	m.Set(field.NewUnderlyingStreamCalculationPeriodDateType(v))
}

// GetUnderlyingStreamCalculationPeriodDate gets UnderlyingStreamCalculationPeriodDate, Tag 41955.
func (m NoUnderlyingStreamCalculationPeriodDates) GetUnderlyingStreamCalculationPeriodDate() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamCalculationPeriodDateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStreamCalculationPeriodDateType gets UnderlyingStreamCalculationPeriodDateType, Tag 41956.
func (m NoUnderlyingStreamCalculationPeriodDates) GetUnderlyingStreamCalculationPeriodDateType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamCalculationPeriodDateTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingStreamCalculationPeriodDate returns true if UnderlyingStreamCalculationPeriodDate is present, Tag 41955.
func (m NoUnderlyingStreamCalculationPeriodDates) HasUnderlyingStreamCalculationPeriodDate() bool {
	return m.Has(tag.UnderlyingStreamCalculationPeriodDate)
}

// HasUnderlyingStreamCalculationPeriodDateType returns true if UnderlyingStreamCalculationPeriodDateType is present, Tag 41956.
func (m NoUnderlyingStreamCalculationPeriodDates) HasUnderlyingStreamCalculationPeriodDateType() bool {
	return m.Has(tag.UnderlyingStreamCalculationPeriodDateType)
}

// NoUnderlyingStreamCalculationPeriodDatesRepeatingGroup is a repeating group, Tag 41954.
type NoUnderlyingStreamCalculationPeriodDatesRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingStreamCalculationPeriodDatesRepeatingGroup returns an initialized, NoUnderlyingStreamCalculationPeriodDatesRepeatingGroup.
func NewNoUnderlyingStreamCalculationPeriodDatesRepeatingGroup() NoUnderlyingStreamCalculationPeriodDatesRepeatingGroup {
	return NoUnderlyingStreamCalculationPeriodDatesRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingStreamCalculationPeriodDates,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingStreamCalculationPeriodDate),
				quickfix.GroupElement(tag.UnderlyingStreamCalculationPeriodDateType),
			},
		),
	}
}

// Add create and append a new NoUnderlyingStreamCalculationPeriodDates to this group.
func (m NoUnderlyingStreamCalculationPeriodDatesRepeatingGroup) Add() NoUnderlyingStreamCalculationPeriodDates {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingStreamCalculationPeriodDates{g}
}

// Get returns the ith NoUnderlyingStreamCalculationPeriodDates in the NoUnderlyingStreamCalculationPeriodDatesRepeatinGroup.
func (m NoUnderlyingStreamCalculationPeriodDatesRepeatingGroup) Get(i int) NoUnderlyingStreamCalculationPeriodDates {
	return NoUnderlyingStreamCalculationPeriodDates{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingPaymentStreamPaymentDateBusinessCenters is a repeating group element, Tag 40969.
type NoUnderlyingPaymentStreamPaymentDateBusinessCenters struct {
	*quickfix.Group
}

// SetUnderlyingPaymentStreamPaymentDateBusinessCenter sets UnderlyingPaymentStreamPaymentDateBusinessCenter, Tag 40582.
func (m NoUnderlyingPaymentStreamPaymentDateBusinessCenters) SetUnderlyingPaymentStreamPaymentDateBusinessCenter(v string) {
	m.Set(field.NewUnderlyingPaymentStreamPaymentDateBusinessCenter(v))
}

// GetUnderlyingPaymentStreamPaymentDateBusinessCenter gets UnderlyingPaymentStreamPaymentDateBusinessCenter, Tag 40582.
func (m NoUnderlyingPaymentStreamPaymentDateBusinessCenters) GetUnderlyingPaymentStreamPaymentDateBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamPaymentDateBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingPaymentStreamPaymentDateBusinessCenter returns true if UnderlyingPaymentStreamPaymentDateBusinessCenter is present, Tag 40582.
func (m NoUnderlyingPaymentStreamPaymentDateBusinessCenters) HasUnderlyingPaymentStreamPaymentDateBusinessCenter() bool {
	return m.Has(tag.UnderlyingPaymentStreamPaymentDateBusinessCenter)
}

// NoUnderlyingPaymentStreamPaymentDateBusinessCentersRepeatingGroup is a repeating group, Tag 40969.
type NoUnderlyingPaymentStreamPaymentDateBusinessCentersRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingPaymentStreamPaymentDateBusinessCentersRepeatingGroup returns an initialized, NoUnderlyingPaymentStreamPaymentDateBusinessCentersRepeatingGroup.
func NewNoUnderlyingPaymentStreamPaymentDateBusinessCentersRepeatingGroup() NoUnderlyingPaymentStreamPaymentDateBusinessCentersRepeatingGroup {
	return NoUnderlyingPaymentStreamPaymentDateBusinessCentersRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingPaymentStreamPaymentDateBusinessCenters,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingPaymentStreamPaymentDateBusinessCenter),
			},
		),
	}
}

// Add create and append a new NoUnderlyingPaymentStreamPaymentDateBusinessCenters to this group.
func (m NoUnderlyingPaymentStreamPaymentDateBusinessCentersRepeatingGroup) Add() NoUnderlyingPaymentStreamPaymentDateBusinessCenters {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingPaymentStreamPaymentDateBusinessCenters{g}
}

// Get returns the ith NoUnderlyingPaymentStreamPaymentDateBusinessCenters in the NoUnderlyingPaymentStreamPaymentDateBusinessCentersRepeatinGroup.
func (m NoUnderlyingPaymentStreamPaymentDateBusinessCentersRepeatingGroup) Get(i int) NoUnderlyingPaymentStreamPaymentDateBusinessCenters {
	return NoUnderlyingPaymentStreamPaymentDateBusinessCenters{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingPaymentStreamPaymentDates is a repeating group element, Tag 41937.
type NoUnderlyingPaymentStreamPaymentDates struct {
	*quickfix.Group
}

// SetUnderlyingPaymentStreamPaymentDate sets UnderlyingPaymentStreamPaymentDate, Tag 41938.
func (m NoUnderlyingPaymentStreamPaymentDates) SetUnderlyingPaymentStreamPaymentDate(v string) {
	m.Set(field.NewUnderlyingPaymentStreamPaymentDate(v))
}

// SetUnderlyingPaymentStreamPaymentDateType sets UnderlyingPaymentStreamPaymentDateType, Tag 41939.
func (m NoUnderlyingPaymentStreamPaymentDates) SetUnderlyingPaymentStreamPaymentDateType(v int) {
	m.Set(field.NewUnderlyingPaymentStreamPaymentDateType(v))
}

// GetUnderlyingPaymentStreamPaymentDate gets UnderlyingPaymentStreamPaymentDate, Tag 41938.
func (m NoUnderlyingPaymentStreamPaymentDates) GetUnderlyingPaymentStreamPaymentDate() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamPaymentDateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamPaymentDateType gets UnderlyingPaymentStreamPaymentDateType, Tag 41939.
func (m NoUnderlyingPaymentStreamPaymentDates) GetUnderlyingPaymentStreamPaymentDateType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamPaymentDateTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingPaymentStreamPaymentDate returns true if UnderlyingPaymentStreamPaymentDate is present, Tag 41938.
func (m NoUnderlyingPaymentStreamPaymentDates) HasUnderlyingPaymentStreamPaymentDate() bool {
	return m.Has(tag.UnderlyingPaymentStreamPaymentDate)
}

// HasUnderlyingPaymentStreamPaymentDateType returns true if UnderlyingPaymentStreamPaymentDateType is present, Tag 41939.
func (m NoUnderlyingPaymentStreamPaymentDates) HasUnderlyingPaymentStreamPaymentDateType() bool {
	return m.Has(tag.UnderlyingPaymentStreamPaymentDateType)
}

// NoUnderlyingPaymentStreamPaymentDatesRepeatingGroup is a repeating group, Tag 41937.
type NoUnderlyingPaymentStreamPaymentDatesRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingPaymentStreamPaymentDatesRepeatingGroup returns an initialized, NoUnderlyingPaymentStreamPaymentDatesRepeatingGroup.
func NewNoUnderlyingPaymentStreamPaymentDatesRepeatingGroup() NoUnderlyingPaymentStreamPaymentDatesRepeatingGroup {
	return NoUnderlyingPaymentStreamPaymentDatesRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingPaymentStreamPaymentDates,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingPaymentStreamPaymentDate),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamPaymentDateType),
			},
		),
	}
}

// Add create and append a new NoUnderlyingPaymentStreamPaymentDates to this group.
func (m NoUnderlyingPaymentStreamPaymentDatesRepeatingGroup) Add() NoUnderlyingPaymentStreamPaymentDates {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingPaymentStreamPaymentDates{g}
}

// Get returns the ith NoUnderlyingPaymentStreamPaymentDates in the NoUnderlyingPaymentStreamPaymentDatesRepeatinGroup.
func (m NoUnderlyingPaymentStreamPaymentDatesRepeatingGroup) Get(i int) NoUnderlyingPaymentStreamPaymentDates {
	return NoUnderlyingPaymentStreamPaymentDates{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingPaymentStreamResetDateBusinessCenters is a repeating group element, Tag 40970.
type NoUnderlyingPaymentStreamResetDateBusinessCenters struct {
	*quickfix.Group
}

// SetUnderlyingPaymentStreamResetDateBusinessCenter sets UnderlyingPaymentStreamResetDateBusinessCenter, Tag 40594.
func (m NoUnderlyingPaymentStreamResetDateBusinessCenters) SetUnderlyingPaymentStreamResetDateBusinessCenter(v string) {
	m.Set(field.NewUnderlyingPaymentStreamResetDateBusinessCenter(v))
}

// GetUnderlyingPaymentStreamResetDateBusinessCenter gets UnderlyingPaymentStreamResetDateBusinessCenter, Tag 40594.
func (m NoUnderlyingPaymentStreamResetDateBusinessCenters) GetUnderlyingPaymentStreamResetDateBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamResetDateBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingPaymentStreamResetDateBusinessCenter returns true if UnderlyingPaymentStreamResetDateBusinessCenter is present, Tag 40594.
func (m NoUnderlyingPaymentStreamResetDateBusinessCenters) HasUnderlyingPaymentStreamResetDateBusinessCenter() bool {
	return m.Has(tag.UnderlyingPaymentStreamResetDateBusinessCenter)
}

// NoUnderlyingPaymentStreamResetDateBusinessCentersRepeatingGroup is a repeating group, Tag 40970.
type NoUnderlyingPaymentStreamResetDateBusinessCentersRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingPaymentStreamResetDateBusinessCentersRepeatingGroup returns an initialized, NoUnderlyingPaymentStreamResetDateBusinessCentersRepeatingGroup.
func NewNoUnderlyingPaymentStreamResetDateBusinessCentersRepeatingGroup() NoUnderlyingPaymentStreamResetDateBusinessCentersRepeatingGroup {
	return NoUnderlyingPaymentStreamResetDateBusinessCentersRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingPaymentStreamResetDateBusinessCenters,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingPaymentStreamResetDateBusinessCenter),
			},
		),
	}
}

// Add create and append a new NoUnderlyingPaymentStreamResetDateBusinessCenters to this group.
func (m NoUnderlyingPaymentStreamResetDateBusinessCentersRepeatingGroup) Add() NoUnderlyingPaymentStreamResetDateBusinessCenters {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingPaymentStreamResetDateBusinessCenters{g}
}

// Get returns the ith NoUnderlyingPaymentStreamResetDateBusinessCenters in the NoUnderlyingPaymentStreamResetDateBusinessCentersRepeatinGroup.
func (m NoUnderlyingPaymentStreamResetDateBusinessCentersRepeatingGroup) Get(i int) NoUnderlyingPaymentStreamResetDateBusinessCenters {
	return NoUnderlyingPaymentStreamResetDateBusinessCenters{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingPaymentStreamInitialFixingDateBusinessCenters is a repeating group element, Tag 40971.
type NoUnderlyingPaymentStreamInitialFixingDateBusinessCenters struct {
	*quickfix.Group
}

// SetUnderlyingPaymentStreamInitialFixingDateBusinessCenter sets UnderlyingPaymentStreamInitialFixingDateBusinessCenter, Tag 40600.
func (m NoUnderlyingPaymentStreamInitialFixingDateBusinessCenters) SetUnderlyingPaymentStreamInitialFixingDateBusinessCenter(v string) {
	m.Set(field.NewUnderlyingPaymentStreamInitialFixingDateBusinessCenter(v))
}

// GetUnderlyingPaymentStreamInitialFixingDateBusinessCenter gets UnderlyingPaymentStreamInitialFixingDateBusinessCenter, Tag 40600.
func (m NoUnderlyingPaymentStreamInitialFixingDateBusinessCenters) GetUnderlyingPaymentStreamInitialFixingDateBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamInitialFixingDateBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingPaymentStreamInitialFixingDateBusinessCenter returns true if UnderlyingPaymentStreamInitialFixingDateBusinessCenter is present, Tag 40600.
func (m NoUnderlyingPaymentStreamInitialFixingDateBusinessCenters) HasUnderlyingPaymentStreamInitialFixingDateBusinessCenter() bool {
	return m.Has(tag.UnderlyingPaymentStreamInitialFixingDateBusinessCenter)
}

// NoUnderlyingPaymentStreamInitialFixingDateBusinessCentersRepeatingGroup is a repeating group, Tag 40971.
type NoUnderlyingPaymentStreamInitialFixingDateBusinessCentersRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingPaymentStreamInitialFixingDateBusinessCentersRepeatingGroup returns an initialized, NoUnderlyingPaymentStreamInitialFixingDateBusinessCentersRepeatingGroup.
func NewNoUnderlyingPaymentStreamInitialFixingDateBusinessCentersRepeatingGroup() NoUnderlyingPaymentStreamInitialFixingDateBusinessCentersRepeatingGroup {
	return NoUnderlyingPaymentStreamInitialFixingDateBusinessCentersRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingPaymentStreamInitialFixingDateBusinessCenters,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingPaymentStreamInitialFixingDateBusinessCenter),
			},
		),
	}
}

// Add create and append a new NoUnderlyingPaymentStreamInitialFixingDateBusinessCenters to this group.
func (m NoUnderlyingPaymentStreamInitialFixingDateBusinessCentersRepeatingGroup) Add() NoUnderlyingPaymentStreamInitialFixingDateBusinessCenters {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingPaymentStreamInitialFixingDateBusinessCenters{g}
}

// Get returns the ith NoUnderlyingPaymentStreamInitialFixingDateBusinessCenters in the NoUnderlyingPaymentStreamInitialFixingDateBusinessCentersRepeatinGroup.
func (m NoUnderlyingPaymentStreamInitialFixingDateBusinessCentersRepeatingGroup) Get(i int) NoUnderlyingPaymentStreamInitialFixingDateBusinessCenters {
	return NoUnderlyingPaymentStreamInitialFixingDateBusinessCenters{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingPaymentStreamFixingDateBusinessCenters is a repeating group element, Tag 40972.
type NoUnderlyingPaymentStreamFixingDateBusinessCenters struct {
	*quickfix.Group
}

// SetUnderlyingPaymentStreamFixingDateBusinessCenter sets UnderlyingPaymentStreamFixingDateBusinessCenter, Tag 40607.
func (m NoUnderlyingPaymentStreamFixingDateBusinessCenters) SetUnderlyingPaymentStreamFixingDateBusinessCenter(v string) {
	m.Set(field.NewUnderlyingPaymentStreamFixingDateBusinessCenter(v))
}

// GetUnderlyingPaymentStreamFixingDateBusinessCenter gets UnderlyingPaymentStreamFixingDateBusinessCenter, Tag 40607.
func (m NoUnderlyingPaymentStreamFixingDateBusinessCenters) GetUnderlyingPaymentStreamFixingDateBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamFixingDateBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingPaymentStreamFixingDateBusinessCenter returns true if UnderlyingPaymentStreamFixingDateBusinessCenter is present, Tag 40607.
func (m NoUnderlyingPaymentStreamFixingDateBusinessCenters) HasUnderlyingPaymentStreamFixingDateBusinessCenter() bool {
	return m.Has(tag.UnderlyingPaymentStreamFixingDateBusinessCenter)
}

// NoUnderlyingPaymentStreamFixingDateBusinessCentersRepeatingGroup is a repeating group, Tag 40972.
type NoUnderlyingPaymentStreamFixingDateBusinessCentersRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingPaymentStreamFixingDateBusinessCentersRepeatingGroup returns an initialized, NoUnderlyingPaymentStreamFixingDateBusinessCentersRepeatingGroup.
func NewNoUnderlyingPaymentStreamFixingDateBusinessCentersRepeatingGroup() NoUnderlyingPaymentStreamFixingDateBusinessCentersRepeatingGroup {
	return NoUnderlyingPaymentStreamFixingDateBusinessCentersRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingPaymentStreamFixingDateBusinessCenters,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingPaymentStreamFixingDateBusinessCenter),
			},
		),
	}
}

// Add create and append a new NoUnderlyingPaymentStreamFixingDateBusinessCenters to this group.
func (m NoUnderlyingPaymentStreamFixingDateBusinessCentersRepeatingGroup) Add() NoUnderlyingPaymentStreamFixingDateBusinessCenters {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingPaymentStreamFixingDateBusinessCenters{g}
}

// Get returns the ith NoUnderlyingPaymentStreamFixingDateBusinessCenters in the NoUnderlyingPaymentStreamFixingDateBusinessCentersRepeatinGroup.
func (m NoUnderlyingPaymentStreamFixingDateBusinessCentersRepeatingGroup) Get(i int) NoUnderlyingPaymentStreamFixingDateBusinessCenters {
	return NoUnderlyingPaymentStreamFixingDateBusinessCenters{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingPaymentStreamFixingDates is a repeating group element, Tag 42955.
type NoUnderlyingPaymentStreamFixingDates struct {
	*quickfix.Group
}

// SetUnderlyingPaymentStreamFixingDate sets UnderlyingPaymentStreamFixingDate, Tag 42956.
func (m NoUnderlyingPaymentStreamFixingDates) SetUnderlyingPaymentStreamFixingDate(v string) {
	m.Set(field.NewUnderlyingPaymentStreamFixingDate(v))
}

// SetUnderlyingPaymentStreamFixingDateType sets UnderlyingPaymentStreamFixingDateType, Tag 42957.
func (m NoUnderlyingPaymentStreamFixingDates) SetUnderlyingPaymentStreamFixingDateType(v int) {
	m.Set(field.NewUnderlyingPaymentStreamFixingDateType(v))
}

// GetUnderlyingPaymentStreamFixingDate gets UnderlyingPaymentStreamFixingDate, Tag 42956.
func (m NoUnderlyingPaymentStreamFixingDates) GetUnderlyingPaymentStreamFixingDate() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamFixingDateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamFixingDateType gets UnderlyingPaymentStreamFixingDateType, Tag 42957.
func (m NoUnderlyingPaymentStreamFixingDates) GetUnderlyingPaymentStreamFixingDateType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamFixingDateTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingPaymentStreamFixingDate returns true if UnderlyingPaymentStreamFixingDate is present, Tag 42956.
func (m NoUnderlyingPaymentStreamFixingDates) HasUnderlyingPaymentStreamFixingDate() bool {
	return m.Has(tag.UnderlyingPaymentStreamFixingDate)
}

// HasUnderlyingPaymentStreamFixingDateType returns true if UnderlyingPaymentStreamFixingDateType is present, Tag 42957.
func (m NoUnderlyingPaymentStreamFixingDates) HasUnderlyingPaymentStreamFixingDateType() bool {
	return m.Has(tag.UnderlyingPaymentStreamFixingDateType)
}

// NoUnderlyingPaymentStreamFixingDatesRepeatingGroup is a repeating group, Tag 42955.
type NoUnderlyingPaymentStreamFixingDatesRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingPaymentStreamFixingDatesRepeatingGroup returns an initialized, NoUnderlyingPaymentStreamFixingDatesRepeatingGroup.
func NewNoUnderlyingPaymentStreamFixingDatesRepeatingGroup() NoUnderlyingPaymentStreamFixingDatesRepeatingGroup {
	return NoUnderlyingPaymentStreamFixingDatesRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingPaymentStreamFixingDates,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingPaymentStreamFixingDate),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamFixingDateType),
			},
		),
	}
}

// Add create and append a new NoUnderlyingPaymentStreamFixingDates to this group.
func (m NoUnderlyingPaymentStreamFixingDatesRepeatingGroup) Add() NoUnderlyingPaymentStreamFixingDates {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingPaymentStreamFixingDates{g}
}

// Get returns the ith NoUnderlyingPaymentStreamFixingDates in the NoUnderlyingPaymentStreamFixingDatesRepeatinGroup.
func (m NoUnderlyingPaymentStreamFixingDatesRepeatingGroup) Get(i int) NoUnderlyingPaymentStreamFixingDates {
	return NoUnderlyingPaymentStreamFixingDates{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingPaymentStreamPricingBusinessCenters is a repeating group element, Tag 41909.
type NoUnderlyingPaymentStreamPricingBusinessCenters struct {
	*quickfix.Group
}

// SetUnderlyingPaymentStreamPricingBusinessCenter sets UnderlyingPaymentStreamPricingBusinessCenter, Tag 41910.
func (m NoUnderlyingPaymentStreamPricingBusinessCenters) SetUnderlyingPaymentStreamPricingBusinessCenter(v string) {
	m.Set(field.NewUnderlyingPaymentStreamPricingBusinessCenter(v))
}

// GetUnderlyingPaymentStreamPricingBusinessCenter gets UnderlyingPaymentStreamPricingBusinessCenter, Tag 41910.
func (m NoUnderlyingPaymentStreamPricingBusinessCenters) GetUnderlyingPaymentStreamPricingBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamPricingBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingPaymentStreamPricingBusinessCenter returns true if UnderlyingPaymentStreamPricingBusinessCenter is present, Tag 41910.
func (m NoUnderlyingPaymentStreamPricingBusinessCenters) HasUnderlyingPaymentStreamPricingBusinessCenter() bool {
	return m.Has(tag.UnderlyingPaymentStreamPricingBusinessCenter)
}

// NoUnderlyingPaymentStreamPricingBusinessCentersRepeatingGroup is a repeating group, Tag 41909.
type NoUnderlyingPaymentStreamPricingBusinessCentersRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingPaymentStreamPricingBusinessCentersRepeatingGroup returns an initialized, NoUnderlyingPaymentStreamPricingBusinessCentersRepeatingGroup.
func NewNoUnderlyingPaymentStreamPricingBusinessCentersRepeatingGroup() NoUnderlyingPaymentStreamPricingBusinessCentersRepeatingGroup {
	return NoUnderlyingPaymentStreamPricingBusinessCentersRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingPaymentStreamPricingBusinessCenters,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingPaymentStreamPricingBusinessCenter),
			},
		),
	}
}

// Add create and append a new NoUnderlyingPaymentStreamPricingBusinessCenters to this group.
func (m NoUnderlyingPaymentStreamPricingBusinessCentersRepeatingGroup) Add() NoUnderlyingPaymentStreamPricingBusinessCenters {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingPaymentStreamPricingBusinessCenters{g}
}

// Get returns the ith NoUnderlyingPaymentStreamPricingBusinessCenters in the NoUnderlyingPaymentStreamPricingBusinessCentersRepeatinGroup.
func (m NoUnderlyingPaymentStreamPricingBusinessCentersRepeatingGroup) Get(i int) NoUnderlyingPaymentStreamPricingBusinessCenters {
	return NoUnderlyingPaymentStreamPricingBusinessCenters{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingPaymentStreamPricingDays is a repeating group element, Tag 41944.
type NoUnderlyingPaymentStreamPricingDays struct {
	*quickfix.Group
}

// SetUnderlyingPaymentStreamPricingDayOfWeek sets UnderlyingPaymentStreamPricingDayOfWeek, Tag 41945.
func (m NoUnderlyingPaymentStreamPricingDays) SetUnderlyingPaymentStreamPricingDayOfWeek(v int) {
	m.Set(field.NewUnderlyingPaymentStreamPricingDayOfWeek(v))
}

// SetUnderlyingPaymentStreamPricingDayNumber sets UnderlyingPaymentStreamPricingDayNumber, Tag 41946.
func (m NoUnderlyingPaymentStreamPricingDays) SetUnderlyingPaymentStreamPricingDayNumber(v int) {
	m.Set(field.NewUnderlyingPaymentStreamPricingDayNumber(v))
}

// GetUnderlyingPaymentStreamPricingDayOfWeek gets UnderlyingPaymentStreamPricingDayOfWeek, Tag 41945.
func (m NoUnderlyingPaymentStreamPricingDays) GetUnderlyingPaymentStreamPricingDayOfWeek() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamPricingDayOfWeekField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamPricingDayNumber gets UnderlyingPaymentStreamPricingDayNumber, Tag 41946.
func (m NoUnderlyingPaymentStreamPricingDays) GetUnderlyingPaymentStreamPricingDayNumber() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamPricingDayNumberField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingPaymentStreamPricingDayOfWeek returns true if UnderlyingPaymentStreamPricingDayOfWeek is present, Tag 41945.
func (m NoUnderlyingPaymentStreamPricingDays) HasUnderlyingPaymentStreamPricingDayOfWeek() bool {
	return m.Has(tag.UnderlyingPaymentStreamPricingDayOfWeek)
}

// HasUnderlyingPaymentStreamPricingDayNumber returns true if UnderlyingPaymentStreamPricingDayNumber is present, Tag 41946.
func (m NoUnderlyingPaymentStreamPricingDays) HasUnderlyingPaymentStreamPricingDayNumber() bool {
	return m.Has(tag.UnderlyingPaymentStreamPricingDayNumber)
}

// NoUnderlyingPaymentStreamPricingDaysRepeatingGroup is a repeating group, Tag 41944.
type NoUnderlyingPaymentStreamPricingDaysRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingPaymentStreamPricingDaysRepeatingGroup returns an initialized, NoUnderlyingPaymentStreamPricingDaysRepeatingGroup.
func NewNoUnderlyingPaymentStreamPricingDaysRepeatingGroup() NoUnderlyingPaymentStreamPricingDaysRepeatingGroup {
	return NoUnderlyingPaymentStreamPricingDaysRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingPaymentStreamPricingDays,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingPaymentStreamPricingDayOfWeek),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamPricingDayNumber),
			},
		),
	}
}

// Add create and append a new NoUnderlyingPaymentStreamPricingDays to this group.
func (m NoUnderlyingPaymentStreamPricingDaysRepeatingGroup) Add() NoUnderlyingPaymentStreamPricingDays {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingPaymentStreamPricingDays{g}
}

// Get returns the ith NoUnderlyingPaymentStreamPricingDays in the NoUnderlyingPaymentStreamPricingDaysRepeatinGroup.
func (m NoUnderlyingPaymentStreamPricingDaysRepeatingGroup) Get(i int) NoUnderlyingPaymentStreamPricingDays {
	return NoUnderlyingPaymentStreamPricingDays{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingPaymentStreamPricingDates is a repeating group element, Tag 41941.
type NoUnderlyingPaymentStreamPricingDates struct {
	*quickfix.Group
}

// SetUnderlyingPaymentStreamPricingDate sets UnderlyingPaymentStreamPricingDate, Tag 41942.
func (m NoUnderlyingPaymentStreamPricingDates) SetUnderlyingPaymentStreamPricingDate(v string) {
	m.Set(field.NewUnderlyingPaymentStreamPricingDate(v))
}

// SetUnderlyingPaymentStreamPricingDateType sets UnderlyingPaymentStreamPricingDateType, Tag 41943.
func (m NoUnderlyingPaymentStreamPricingDates) SetUnderlyingPaymentStreamPricingDateType(v int) {
	m.Set(field.NewUnderlyingPaymentStreamPricingDateType(v))
}

// GetUnderlyingPaymentStreamPricingDate gets UnderlyingPaymentStreamPricingDate, Tag 41942.
func (m NoUnderlyingPaymentStreamPricingDates) GetUnderlyingPaymentStreamPricingDate() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamPricingDateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamPricingDateType gets UnderlyingPaymentStreamPricingDateType, Tag 41943.
func (m NoUnderlyingPaymentStreamPricingDates) GetUnderlyingPaymentStreamPricingDateType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamPricingDateTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingPaymentStreamPricingDate returns true if UnderlyingPaymentStreamPricingDate is present, Tag 41942.
func (m NoUnderlyingPaymentStreamPricingDates) HasUnderlyingPaymentStreamPricingDate() bool {
	return m.Has(tag.UnderlyingPaymentStreamPricingDate)
}

// HasUnderlyingPaymentStreamPricingDateType returns true if UnderlyingPaymentStreamPricingDateType is present, Tag 41943.
func (m NoUnderlyingPaymentStreamPricingDates) HasUnderlyingPaymentStreamPricingDateType() bool {
	return m.Has(tag.UnderlyingPaymentStreamPricingDateType)
}

// NoUnderlyingPaymentStreamPricingDatesRepeatingGroup is a repeating group, Tag 41941.
type NoUnderlyingPaymentStreamPricingDatesRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingPaymentStreamPricingDatesRepeatingGroup returns an initialized, NoUnderlyingPaymentStreamPricingDatesRepeatingGroup.
func NewNoUnderlyingPaymentStreamPricingDatesRepeatingGroup() NoUnderlyingPaymentStreamPricingDatesRepeatingGroup {
	return NoUnderlyingPaymentStreamPricingDatesRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingPaymentStreamPricingDates,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingPaymentStreamPricingDate),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamPricingDateType),
			},
		),
	}
}

// Add create and append a new NoUnderlyingPaymentStreamPricingDates to this group.
func (m NoUnderlyingPaymentStreamPricingDatesRepeatingGroup) Add() NoUnderlyingPaymentStreamPricingDates {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingPaymentStreamPricingDates{g}
}

// Get returns the ith NoUnderlyingPaymentStreamPricingDates in the NoUnderlyingPaymentStreamPricingDatesRepeatinGroup.
func (m NoUnderlyingPaymentStreamPricingDatesRepeatingGroup) Get(i int) NoUnderlyingPaymentStreamPricingDates {
	return NoUnderlyingPaymentStreamPricingDates{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingPaymentStreamFormulas is a repeating group element, Tag 42981.
type NoUnderlyingPaymentStreamFormulas struct {
	*quickfix.Group
}

// SetUnderlyingPaymentStreamFormula sets UnderlyingPaymentStreamFormula, Tag 42982.
func (m NoUnderlyingPaymentStreamFormulas) SetUnderlyingPaymentStreamFormula(v string) {
	m.Set(field.NewUnderlyingPaymentStreamFormula(v))
}

// SetUnderlyingPaymentStreamFormulaDesc sets UnderlyingPaymentStreamFormulaDesc, Tag 42983.
func (m NoUnderlyingPaymentStreamFormulas) SetUnderlyingPaymentStreamFormulaDesc(v string) {
	m.Set(field.NewUnderlyingPaymentStreamFormulaDesc(v))
}

// SetUnderlyingPaymentStreamFormulaLength sets UnderlyingPaymentStreamFormulaLength, Tag 43111.
func (m NoUnderlyingPaymentStreamFormulas) SetUnderlyingPaymentStreamFormulaLength(v int) {
	m.Set(field.NewUnderlyingPaymentStreamFormulaLength(v))
}

// GetUnderlyingPaymentStreamFormula gets UnderlyingPaymentStreamFormula, Tag 42982.
func (m NoUnderlyingPaymentStreamFormulas) GetUnderlyingPaymentStreamFormula() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamFormulaField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamFormulaDesc gets UnderlyingPaymentStreamFormulaDesc, Tag 42983.
func (m NoUnderlyingPaymentStreamFormulas) GetUnderlyingPaymentStreamFormulaDesc() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamFormulaDescField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamFormulaLength gets UnderlyingPaymentStreamFormulaLength, Tag 43111.
func (m NoUnderlyingPaymentStreamFormulas) GetUnderlyingPaymentStreamFormulaLength() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamFormulaLengthField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingPaymentStreamFormula returns true if UnderlyingPaymentStreamFormula is present, Tag 42982.
func (m NoUnderlyingPaymentStreamFormulas) HasUnderlyingPaymentStreamFormula() bool {
	return m.Has(tag.UnderlyingPaymentStreamFormula)
}

// HasUnderlyingPaymentStreamFormulaDesc returns true if UnderlyingPaymentStreamFormulaDesc is present, Tag 42983.
func (m NoUnderlyingPaymentStreamFormulas) HasUnderlyingPaymentStreamFormulaDesc() bool {
	return m.Has(tag.UnderlyingPaymentStreamFormulaDesc)
}

// HasUnderlyingPaymentStreamFormulaLength returns true if UnderlyingPaymentStreamFormulaLength is present, Tag 43111.
func (m NoUnderlyingPaymentStreamFormulas) HasUnderlyingPaymentStreamFormulaLength() bool {
	return m.Has(tag.UnderlyingPaymentStreamFormulaLength)
}

// NoUnderlyingPaymentStreamFormulasRepeatingGroup is a repeating group, Tag 42981.
type NoUnderlyingPaymentStreamFormulasRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingPaymentStreamFormulasRepeatingGroup returns an initialized, NoUnderlyingPaymentStreamFormulasRepeatingGroup.
func NewNoUnderlyingPaymentStreamFormulasRepeatingGroup() NoUnderlyingPaymentStreamFormulasRepeatingGroup {
	return NoUnderlyingPaymentStreamFormulasRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingPaymentStreamFormulas,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingPaymentStreamFormula),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamFormulaDesc),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamFormulaLength),
			},
		),
	}
}

// Add create and append a new NoUnderlyingPaymentStreamFormulas to this group.
func (m NoUnderlyingPaymentStreamFormulasRepeatingGroup) Add() NoUnderlyingPaymentStreamFormulas {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingPaymentStreamFormulas{g}
}

// Get returns the ith NoUnderlyingPaymentStreamFormulas in the NoUnderlyingPaymentStreamFormulasRepeatinGroup.
func (m NoUnderlyingPaymentStreamFormulasRepeatingGroup) Get(i int) NoUnderlyingPaymentStreamFormulas {
	return NoUnderlyingPaymentStreamFormulas{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingDividendPeriods is a repeating group element, Tag 42862.
type NoUnderlyingDividendPeriods struct {
	*quickfix.Group
}

// SetUnderlyingDividendPeriodSequence sets UnderlyingDividendPeriodSequence, Tag 42863.
func (m NoUnderlyingDividendPeriods) SetUnderlyingDividendPeriodSequence(v int) {
	m.Set(field.NewUnderlyingDividendPeriodSequence(v))
}

// SetUnderlyingDividendPeriodStartDateUnadjusted sets UnderlyingDividendPeriodStartDateUnadjusted, Tag 42864.
func (m NoUnderlyingDividendPeriods) SetUnderlyingDividendPeriodStartDateUnadjusted(v string) {
	m.Set(field.NewUnderlyingDividendPeriodStartDateUnadjusted(v))
}

// SetUnderlyingDividendPeriodEndDateUnadjusted sets UnderlyingDividendPeriodEndDateUnadjusted, Tag 42865.
func (m NoUnderlyingDividendPeriods) SetUnderlyingDividendPeriodEndDateUnadjusted(v string) {
	m.Set(field.NewUnderlyingDividendPeriodEndDateUnadjusted(v))
}

// SetUnderlyingDividendPeriodUnderlierRefID sets UnderlyingDividendPeriodUnderlierRefID, Tag 42866.
func (m NoUnderlyingDividendPeriods) SetUnderlyingDividendPeriodUnderlierRefID(v string) {
	m.Set(field.NewUnderlyingDividendPeriodUnderlierRefID(v))
}

// SetUnderlyingDividendPeriodStrikePrice sets UnderlyingDividendPeriodStrikePrice, Tag 42867.
func (m NoUnderlyingDividendPeriods) SetUnderlyingDividendPeriodStrikePrice(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingDividendPeriodStrikePrice(value, scale))
}

// SetUnderlyingDividendPeriodBusinessDayConvention sets UnderlyingDividendPeriodBusinessDayConvention, Tag 42868.
func (m NoUnderlyingDividendPeriods) SetUnderlyingDividendPeriodBusinessDayConvention(v int) {
	m.Set(field.NewUnderlyingDividendPeriodBusinessDayConvention(v))
}

// SetNoUnderlyingDividendPeriodBusinessCenters sets NoUnderlyingDividendPeriodBusinessCenters, Tag 42882.
func (m NoUnderlyingDividendPeriods) SetNoUnderlyingDividendPeriodBusinessCenters(f NoUnderlyingDividendPeriodBusinessCentersRepeatingGroup) {
	m.SetGroup(f)
}

// SetUnderlyingDividendPeriodValuationDateUnadjusted sets UnderlyingDividendPeriodValuationDateUnadjusted, Tag 42869.
func (m NoUnderlyingDividendPeriods) SetUnderlyingDividendPeriodValuationDateUnadjusted(v string) {
	m.Set(field.NewUnderlyingDividendPeriodValuationDateUnadjusted(v))
}

// SetUnderlyingDividendPeriodValuationDateRelativeTo sets UnderlyingDividendPeriodValuationDateRelativeTo, Tag 42870.
func (m NoUnderlyingDividendPeriods) SetUnderlyingDividendPeriodValuationDateRelativeTo(v int) {
	m.Set(field.NewUnderlyingDividendPeriodValuationDateRelativeTo(v))
}

// SetUnderlyingDividendPeriodValuationDateOffsetPeriod sets UnderlyingDividendPeriodValuationDateOffsetPeriod, Tag 42871.
func (m NoUnderlyingDividendPeriods) SetUnderlyingDividendPeriodValuationDateOffsetPeriod(v int) {
	m.Set(field.NewUnderlyingDividendPeriodValuationDateOffsetPeriod(v))
}

// SetUnderlyingDividendPeriodValuationDateOffsetUnit sets UnderlyingDividendPeriodValuationDateOffsetUnit, Tag 42872.
func (m NoUnderlyingDividendPeriods) SetUnderlyingDividendPeriodValuationDateOffsetUnit(v string) {
	m.Set(field.NewUnderlyingDividendPeriodValuationDateOffsetUnit(v))
}

// SetUnderlyingDividendPeriodValuationDateOffsetDayType sets UnderlyingDividendPeriodValuationDateOffsetDayType, Tag 42873.
func (m NoUnderlyingDividendPeriods) SetUnderlyingDividendPeriodValuationDateOffsetDayType(v int) {
	m.Set(field.NewUnderlyingDividendPeriodValuationDateOffsetDayType(v))
}

// SetUnderlyingDividendPeriodValuationDateAdjusted sets UnderlyingDividendPeriodValuationDateAdjusted, Tag 42874.
func (m NoUnderlyingDividendPeriods) SetUnderlyingDividendPeriodValuationDateAdjusted(v string) {
	m.Set(field.NewUnderlyingDividendPeriodValuationDateAdjusted(v))
}

// SetUnderlyingDividendPeriodPaymentDateUnadjusted sets UnderlyingDividendPeriodPaymentDateUnadjusted, Tag 42875.
func (m NoUnderlyingDividendPeriods) SetUnderlyingDividendPeriodPaymentDateUnadjusted(v string) {
	m.Set(field.NewUnderlyingDividendPeriodPaymentDateUnadjusted(v))
}

// SetUnderlyingDividendPeriodPaymentDateRelativeTo sets UnderlyingDividendPeriodPaymentDateRelativeTo, Tag 42876.
func (m NoUnderlyingDividendPeriods) SetUnderlyingDividendPeriodPaymentDateRelativeTo(v int) {
	m.Set(field.NewUnderlyingDividendPeriodPaymentDateRelativeTo(v))
}

// SetUnderlyingDividendPeriodPaymentDateOffsetPeriod sets UnderlyingDividendPeriodPaymentDateOffsetPeriod, Tag 42877.
func (m NoUnderlyingDividendPeriods) SetUnderlyingDividendPeriodPaymentDateOffsetPeriod(v int) {
	m.Set(field.NewUnderlyingDividendPeriodPaymentDateOffsetPeriod(v))
}

// SetUnderlyingDividendPeriodPaymentDateOffsetUnit sets UnderlyingDividendPeriodPaymentDateOffsetUnit, Tag 42878.
func (m NoUnderlyingDividendPeriods) SetUnderlyingDividendPeriodPaymentDateOffsetUnit(v string) {
	m.Set(field.NewUnderlyingDividendPeriodPaymentDateOffsetUnit(v))
}

// SetUnderlyingDividendPeriodPaymentDateOffsetDayType sets UnderlyingDividendPeriodPaymentDateOffsetDayType, Tag 42879.
func (m NoUnderlyingDividendPeriods) SetUnderlyingDividendPeriodPaymentDateOffsetDayType(v int) {
	m.Set(field.NewUnderlyingDividendPeriodPaymentDateOffsetDayType(v))
}

// SetUnderlyingDividendPeriodPaymentDateAdjusted sets UnderlyingDividendPeriodPaymentDateAdjusted, Tag 42880.
func (m NoUnderlyingDividendPeriods) SetUnderlyingDividendPeriodPaymentDateAdjusted(v string) {
	m.Set(field.NewUnderlyingDividendPeriodPaymentDateAdjusted(v))
}

// SetUnderlyingDividendPeriodXID sets UnderlyingDividendPeriodXID, Tag 42881.
func (m NoUnderlyingDividendPeriods) SetUnderlyingDividendPeriodXID(v string) {
	m.Set(field.NewUnderlyingDividendPeriodXID(v))
}

// GetUnderlyingDividendPeriodSequence gets UnderlyingDividendPeriodSequence, Tag 42863.
func (m NoUnderlyingDividendPeriods) GetUnderlyingDividendPeriodSequence() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingDividendPeriodSequenceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDividendPeriodStartDateUnadjusted gets UnderlyingDividendPeriodStartDateUnadjusted, Tag 42864.
func (m NoUnderlyingDividendPeriods) GetUnderlyingDividendPeriodStartDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingDividendPeriodStartDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDividendPeriodEndDateUnadjusted gets UnderlyingDividendPeriodEndDateUnadjusted, Tag 42865.
func (m NoUnderlyingDividendPeriods) GetUnderlyingDividendPeriodEndDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingDividendPeriodEndDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDividendPeriodUnderlierRefID gets UnderlyingDividendPeriodUnderlierRefID, Tag 42866.
func (m NoUnderlyingDividendPeriods) GetUnderlyingDividendPeriodUnderlierRefID() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingDividendPeriodUnderlierRefIDField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDividendPeriodStrikePrice gets UnderlyingDividendPeriodStrikePrice, Tag 42867.
func (m NoUnderlyingDividendPeriods) GetUnderlyingDividendPeriodStrikePrice() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingDividendPeriodStrikePriceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDividendPeriodBusinessDayConvention gets UnderlyingDividendPeriodBusinessDayConvention, Tag 42868.
func (m NoUnderlyingDividendPeriods) GetUnderlyingDividendPeriodBusinessDayConvention() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingDividendPeriodBusinessDayConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUnderlyingDividendPeriodBusinessCenters gets NoUnderlyingDividendPeriodBusinessCenters, Tag 42882.
func (m NoUnderlyingDividendPeriods) GetNoUnderlyingDividendPeriodBusinessCenters() (NoUnderlyingDividendPeriodBusinessCentersRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingDividendPeriodBusinessCentersRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetUnderlyingDividendPeriodValuationDateUnadjusted gets UnderlyingDividendPeriodValuationDateUnadjusted, Tag 42869.
func (m NoUnderlyingDividendPeriods) GetUnderlyingDividendPeriodValuationDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingDividendPeriodValuationDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDividendPeriodValuationDateRelativeTo gets UnderlyingDividendPeriodValuationDateRelativeTo, Tag 42870.
func (m NoUnderlyingDividendPeriods) GetUnderlyingDividendPeriodValuationDateRelativeTo() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingDividendPeriodValuationDateRelativeToField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDividendPeriodValuationDateOffsetPeriod gets UnderlyingDividendPeriodValuationDateOffsetPeriod, Tag 42871.
func (m NoUnderlyingDividendPeriods) GetUnderlyingDividendPeriodValuationDateOffsetPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingDividendPeriodValuationDateOffsetPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDividendPeriodValuationDateOffsetUnit gets UnderlyingDividendPeriodValuationDateOffsetUnit, Tag 42872.
func (m NoUnderlyingDividendPeriods) GetUnderlyingDividendPeriodValuationDateOffsetUnit() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingDividendPeriodValuationDateOffsetUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDividendPeriodValuationDateOffsetDayType gets UnderlyingDividendPeriodValuationDateOffsetDayType, Tag 42873.
func (m NoUnderlyingDividendPeriods) GetUnderlyingDividendPeriodValuationDateOffsetDayType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingDividendPeriodValuationDateOffsetDayTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDividendPeriodValuationDateAdjusted gets UnderlyingDividendPeriodValuationDateAdjusted, Tag 42874.
func (m NoUnderlyingDividendPeriods) GetUnderlyingDividendPeriodValuationDateAdjusted() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingDividendPeriodValuationDateAdjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDividendPeriodPaymentDateUnadjusted gets UnderlyingDividendPeriodPaymentDateUnadjusted, Tag 42875.
func (m NoUnderlyingDividendPeriods) GetUnderlyingDividendPeriodPaymentDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingDividendPeriodPaymentDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDividendPeriodPaymentDateRelativeTo gets UnderlyingDividendPeriodPaymentDateRelativeTo, Tag 42876.
func (m NoUnderlyingDividendPeriods) GetUnderlyingDividendPeriodPaymentDateRelativeTo() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingDividendPeriodPaymentDateRelativeToField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDividendPeriodPaymentDateOffsetPeriod gets UnderlyingDividendPeriodPaymentDateOffsetPeriod, Tag 42877.
func (m NoUnderlyingDividendPeriods) GetUnderlyingDividendPeriodPaymentDateOffsetPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingDividendPeriodPaymentDateOffsetPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDividendPeriodPaymentDateOffsetUnit gets UnderlyingDividendPeriodPaymentDateOffsetUnit, Tag 42878.
func (m NoUnderlyingDividendPeriods) GetUnderlyingDividendPeriodPaymentDateOffsetUnit() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingDividendPeriodPaymentDateOffsetUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDividendPeriodPaymentDateOffsetDayType gets UnderlyingDividendPeriodPaymentDateOffsetDayType, Tag 42879.
func (m NoUnderlyingDividendPeriods) GetUnderlyingDividendPeriodPaymentDateOffsetDayType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingDividendPeriodPaymentDateOffsetDayTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDividendPeriodPaymentDateAdjusted gets UnderlyingDividendPeriodPaymentDateAdjusted, Tag 42880.
func (m NoUnderlyingDividendPeriods) GetUnderlyingDividendPeriodPaymentDateAdjusted() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingDividendPeriodPaymentDateAdjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDividendPeriodXID gets UnderlyingDividendPeriodXID, Tag 42881.
func (m NoUnderlyingDividendPeriods) GetUnderlyingDividendPeriodXID() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingDividendPeriodXIDField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingDividendPeriodSequence returns true if UnderlyingDividendPeriodSequence is present, Tag 42863.
func (m NoUnderlyingDividendPeriods) HasUnderlyingDividendPeriodSequence() bool {
	return m.Has(tag.UnderlyingDividendPeriodSequence)
}

// HasUnderlyingDividendPeriodStartDateUnadjusted returns true if UnderlyingDividendPeriodStartDateUnadjusted is present, Tag 42864.
func (m NoUnderlyingDividendPeriods) HasUnderlyingDividendPeriodStartDateUnadjusted() bool {
	return m.Has(tag.UnderlyingDividendPeriodStartDateUnadjusted)
}

// HasUnderlyingDividendPeriodEndDateUnadjusted returns true if UnderlyingDividendPeriodEndDateUnadjusted is present, Tag 42865.
func (m NoUnderlyingDividendPeriods) HasUnderlyingDividendPeriodEndDateUnadjusted() bool {
	return m.Has(tag.UnderlyingDividendPeriodEndDateUnadjusted)
}

// HasUnderlyingDividendPeriodUnderlierRefID returns true if UnderlyingDividendPeriodUnderlierRefID is present, Tag 42866.
func (m NoUnderlyingDividendPeriods) HasUnderlyingDividendPeriodUnderlierRefID() bool {
	return m.Has(tag.UnderlyingDividendPeriodUnderlierRefID)
}

// HasUnderlyingDividendPeriodStrikePrice returns true if UnderlyingDividendPeriodStrikePrice is present, Tag 42867.
func (m NoUnderlyingDividendPeriods) HasUnderlyingDividendPeriodStrikePrice() bool {
	return m.Has(tag.UnderlyingDividendPeriodStrikePrice)
}

// HasUnderlyingDividendPeriodBusinessDayConvention returns true if UnderlyingDividendPeriodBusinessDayConvention is present, Tag 42868.
func (m NoUnderlyingDividendPeriods) HasUnderlyingDividendPeriodBusinessDayConvention() bool {
	return m.Has(tag.UnderlyingDividendPeriodBusinessDayConvention)
}

// HasNoUnderlyingDividendPeriodBusinessCenters returns true if NoUnderlyingDividendPeriodBusinessCenters is present, Tag 42882.
func (m NoUnderlyingDividendPeriods) HasNoUnderlyingDividendPeriodBusinessCenters() bool {
	return m.Has(tag.NoUnderlyingDividendPeriodBusinessCenters)
}

// HasUnderlyingDividendPeriodValuationDateUnadjusted returns true if UnderlyingDividendPeriodValuationDateUnadjusted is present, Tag 42869.
func (m NoUnderlyingDividendPeriods) HasUnderlyingDividendPeriodValuationDateUnadjusted() bool {
	return m.Has(tag.UnderlyingDividendPeriodValuationDateUnadjusted)
}

// HasUnderlyingDividendPeriodValuationDateRelativeTo returns true if UnderlyingDividendPeriodValuationDateRelativeTo is present, Tag 42870.
func (m NoUnderlyingDividendPeriods) HasUnderlyingDividendPeriodValuationDateRelativeTo() bool {
	return m.Has(tag.UnderlyingDividendPeriodValuationDateRelativeTo)
}

// HasUnderlyingDividendPeriodValuationDateOffsetPeriod returns true if UnderlyingDividendPeriodValuationDateOffsetPeriod is present, Tag 42871.
func (m NoUnderlyingDividendPeriods) HasUnderlyingDividendPeriodValuationDateOffsetPeriod() bool {
	return m.Has(tag.UnderlyingDividendPeriodValuationDateOffsetPeriod)
}

// HasUnderlyingDividendPeriodValuationDateOffsetUnit returns true if UnderlyingDividendPeriodValuationDateOffsetUnit is present, Tag 42872.
func (m NoUnderlyingDividendPeriods) HasUnderlyingDividendPeriodValuationDateOffsetUnit() bool {
	return m.Has(tag.UnderlyingDividendPeriodValuationDateOffsetUnit)
}

// HasUnderlyingDividendPeriodValuationDateOffsetDayType returns true if UnderlyingDividendPeriodValuationDateOffsetDayType is present, Tag 42873.
func (m NoUnderlyingDividendPeriods) HasUnderlyingDividendPeriodValuationDateOffsetDayType() bool {
	return m.Has(tag.UnderlyingDividendPeriodValuationDateOffsetDayType)
}

// HasUnderlyingDividendPeriodValuationDateAdjusted returns true if UnderlyingDividendPeriodValuationDateAdjusted is present, Tag 42874.
func (m NoUnderlyingDividendPeriods) HasUnderlyingDividendPeriodValuationDateAdjusted() bool {
	return m.Has(tag.UnderlyingDividendPeriodValuationDateAdjusted)
}

// HasUnderlyingDividendPeriodPaymentDateUnadjusted returns true if UnderlyingDividendPeriodPaymentDateUnadjusted is present, Tag 42875.
func (m NoUnderlyingDividendPeriods) HasUnderlyingDividendPeriodPaymentDateUnadjusted() bool {
	return m.Has(tag.UnderlyingDividendPeriodPaymentDateUnadjusted)
}

// HasUnderlyingDividendPeriodPaymentDateRelativeTo returns true if UnderlyingDividendPeriodPaymentDateRelativeTo is present, Tag 42876.
func (m NoUnderlyingDividendPeriods) HasUnderlyingDividendPeriodPaymentDateRelativeTo() bool {
	return m.Has(tag.UnderlyingDividendPeriodPaymentDateRelativeTo)
}

// HasUnderlyingDividendPeriodPaymentDateOffsetPeriod returns true if UnderlyingDividendPeriodPaymentDateOffsetPeriod is present, Tag 42877.
func (m NoUnderlyingDividendPeriods) HasUnderlyingDividendPeriodPaymentDateOffsetPeriod() bool {
	return m.Has(tag.UnderlyingDividendPeriodPaymentDateOffsetPeriod)
}

// HasUnderlyingDividendPeriodPaymentDateOffsetUnit returns true if UnderlyingDividendPeriodPaymentDateOffsetUnit is present, Tag 42878.
func (m NoUnderlyingDividendPeriods) HasUnderlyingDividendPeriodPaymentDateOffsetUnit() bool {
	return m.Has(tag.UnderlyingDividendPeriodPaymentDateOffsetUnit)
}

// HasUnderlyingDividendPeriodPaymentDateOffsetDayType returns true if UnderlyingDividendPeriodPaymentDateOffsetDayType is present, Tag 42879.
func (m NoUnderlyingDividendPeriods) HasUnderlyingDividendPeriodPaymentDateOffsetDayType() bool {
	return m.Has(tag.UnderlyingDividendPeriodPaymentDateOffsetDayType)
}

// HasUnderlyingDividendPeriodPaymentDateAdjusted returns true if UnderlyingDividendPeriodPaymentDateAdjusted is present, Tag 42880.
func (m NoUnderlyingDividendPeriods) HasUnderlyingDividendPeriodPaymentDateAdjusted() bool {
	return m.Has(tag.UnderlyingDividendPeriodPaymentDateAdjusted)
}

// HasUnderlyingDividendPeriodXID returns true if UnderlyingDividendPeriodXID is present, Tag 42881.
func (m NoUnderlyingDividendPeriods) HasUnderlyingDividendPeriodXID() bool {
	return m.Has(tag.UnderlyingDividendPeriodXID)
}

// NoUnderlyingDividendPeriodBusinessCenters is a repeating group element, Tag 42882.
type NoUnderlyingDividendPeriodBusinessCenters struct {
	*quickfix.Group
}

// SetUnderlyingDividendPeriodBusinessCenter sets UnderlyingDividendPeriodBusinessCenter, Tag 42883.
func (m NoUnderlyingDividendPeriodBusinessCenters) SetUnderlyingDividendPeriodBusinessCenter(v string) {
	m.Set(field.NewUnderlyingDividendPeriodBusinessCenter(v))
}

// GetUnderlyingDividendPeriodBusinessCenter gets UnderlyingDividendPeriodBusinessCenter, Tag 42883.
func (m NoUnderlyingDividendPeriodBusinessCenters) GetUnderlyingDividendPeriodBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingDividendPeriodBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingDividendPeriodBusinessCenter returns true if UnderlyingDividendPeriodBusinessCenter is present, Tag 42883.
func (m NoUnderlyingDividendPeriodBusinessCenters) HasUnderlyingDividendPeriodBusinessCenter() bool {
	return m.Has(tag.UnderlyingDividendPeriodBusinessCenter)
}

// NoUnderlyingDividendPeriodBusinessCentersRepeatingGroup is a repeating group, Tag 42882.
type NoUnderlyingDividendPeriodBusinessCentersRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingDividendPeriodBusinessCentersRepeatingGroup returns an initialized, NoUnderlyingDividendPeriodBusinessCentersRepeatingGroup.
func NewNoUnderlyingDividendPeriodBusinessCentersRepeatingGroup() NoUnderlyingDividendPeriodBusinessCentersRepeatingGroup {
	return NoUnderlyingDividendPeriodBusinessCentersRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingDividendPeriodBusinessCenters,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingDividendPeriodBusinessCenter),
			},
		),
	}
}

// Add create and append a new NoUnderlyingDividendPeriodBusinessCenters to this group.
func (m NoUnderlyingDividendPeriodBusinessCentersRepeatingGroup) Add() NoUnderlyingDividendPeriodBusinessCenters {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingDividendPeriodBusinessCenters{g}
}

// Get returns the ith NoUnderlyingDividendPeriodBusinessCenters in the NoUnderlyingDividendPeriodBusinessCentersRepeatinGroup.
func (m NoUnderlyingDividendPeriodBusinessCentersRepeatingGroup) Get(i int) NoUnderlyingDividendPeriodBusinessCenters {
	return NoUnderlyingDividendPeriodBusinessCenters{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingDividendPeriodsRepeatingGroup is a repeating group, Tag 42862.
type NoUnderlyingDividendPeriodsRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingDividendPeriodsRepeatingGroup returns an initialized, NoUnderlyingDividendPeriodsRepeatingGroup.
func NewNoUnderlyingDividendPeriodsRepeatingGroup() NoUnderlyingDividendPeriodsRepeatingGroup {
	return NoUnderlyingDividendPeriodsRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingDividendPeriods,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingDividendPeriodSequence),
				quickfix.GroupElement(tag.UnderlyingDividendPeriodStartDateUnadjusted),
				quickfix.GroupElement(tag.UnderlyingDividendPeriodEndDateUnadjusted),
				quickfix.GroupElement(tag.UnderlyingDividendPeriodUnderlierRefID),
				quickfix.GroupElement(tag.UnderlyingDividendPeriodStrikePrice),
				quickfix.GroupElement(tag.UnderlyingDividendPeriodBusinessDayConvention),
				NewNoUnderlyingDividendPeriodBusinessCentersRepeatingGroup(),
				quickfix.GroupElement(tag.UnderlyingDividendPeriodValuationDateUnadjusted),
				quickfix.GroupElement(tag.UnderlyingDividendPeriodValuationDateRelativeTo),
				quickfix.GroupElement(tag.UnderlyingDividendPeriodValuationDateOffsetPeriod),
				quickfix.GroupElement(tag.UnderlyingDividendPeriodValuationDateOffsetUnit),
				quickfix.GroupElement(tag.UnderlyingDividendPeriodValuationDateOffsetDayType),
				quickfix.GroupElement(tag.UnderlyingDividendPeriodValuationDateAdjusted),
				quickfix.GroupElement(tag.UnderlyingDividendPeriodPaymentDateUnadjusted),
				quickfix.GroupElement(tag.UnderlyingDividendPeriodPaymentDateRelativeTo),
				quickfix.GroupElement(tag.UnderlyingDividendPeriodPaymentDateOffsetPeriod),
				quickfix.GroupElement(tag.UnderlyingDividendPeriodPaymentDateOffsetUnit),
				quickfix.GroupElement(tag.UnderlyingDividendPeriodPaymentDateOffsetDayType),
				quickfix.GroupElement(tag.UnderlyingDividendPeriodPaymentDateAdjusted),
				quickfix.GroupElement(tag.UnderlyingDividendPeriodXID),
			},
		),
	}
}

// Add create and append a new NoUnderlyingDividendPeriods to this group.
func (m NoUnderlyingDividendPeriodsRepeatingGroup) Add() NoUnderlyingDividendPeriods {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingDividendPeriods{g}
}

// Get returns the ith NoUnderlyingDividendPeriods in the NoUnderlyingDividendPeriodsRepeatinGroup.
func (m NoUnderlyingDividendPeriodsRepeatingGroup) Get(i int) NoUnderlyingDividendPeriods {
	return NoUnderlyingDividendPeriods{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingDividendFXTriggerDateBusinessCenters is a repeating group element, Tag 42853.
type NoUnderlyingDividendFXTriggerDateBusinessCenters struct {
	*quickfix.Group
}

// SetUnderlyingDividendFXTriggerDateBusinessCenter sets UnderlyingDividendFXTriggerDateBusinessCenter, Tag 42854.
func (m NoUnderlyingDividendFXTriggerDateBusinessCenters) SetUnderlyingDividendFXTriggerDateBusinessCenter(v string) {
	m.Set(field.NewUnderlyingDividendFXTriggerDateBusinessCenter(v))
}

// GetUnderlyingDividendFXTriggerDateBusinessCenter gets UnderlyingDividendFXTriggerDateBusinessCenter, Tag 42854.
func (m NoUnderlyingDividendFXTriggerDateBusinessCenters) GetUnderlyingDividendFXTriggerDateBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingDividendFXTriggerDateBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingDividendFXTriggerDateBusinessCenter returns true if UnderlyingDividendFXTriggerDateBusinessCenter is present, Tag 42854.
func (m NoUnderlyingDividendFXTriggerDateBusinessCenters) HasUnderlyingDividendFXTriggerDateBusinessCenter() bool {
	return m.Has(tag.UnderlyingDividendFXTriggerDateBusinessCenter)
}

// NoUnderlyingDividendFXTriggerDateBusinessCentersRepeatingGroup is a repeating group, Tag 42853.
type NoUnderlyingDividendFXTriggerDateBusinessCentersRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingDividendFXTriggerDateBusinessCentersRepeatingGroup returns an initialized, NoUnderlyingDividendFXTriggerDateBusinessCentersRepeatingGroup.
func NewNoUnderlyingDividendFXTriggerDateBusinessCentersRepeatingGroup() NoUnderlyingDividendFXTriggerDateBusinessCentersRepeatingGroup {
	return NoUnderlyingDividendFXTriggerDateBusinessCentersRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingDividendFXTriggerDateBusinessCenters,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingDividendFXTriggerDateBusinessCenter),
			},
		),
	}
}

// Add create and append a new NoUnderlyingDividendFXTriggerDateBusinessCenters to this group.
func (m NoUnderlyingDividendFXTriggerDateBusinessCentersRepeatingGroup) Add() NoUnderlyingDividendFXTriggerDateBusinessCenters {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingDividendFXTriggerDateBusinessCenters{g}
}

// Get returns the ith NoUnderlyingDividendFXTriggerDateBusinessCenters in the NoUnderlyingDividendFXTriggerDateBusinessCentersRepeatinGroup.
func (m NoUnderlyingDividendFXTriggerDateBusinessCentersRepeatingGroup) Get(i int) NoUnderlyingDividendFXTriggerDateBusinessCenters {
	return NoUnderlyingDividendFXTriggerDateBusinessCenters{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingDividendAccrualPaymentDateBusinessCenters is a repeating group element, Tag 42799.
type NoUnderlyingDividendAccrualPaymentDateBusinessCenters struct {
	*quickfix.Group
}

// SetUnderlyingDividendAccrualPaymentDateBusinessCenter sets UnderlyingDividendAccrualPaymentDateBusinessCenter, Tag 42800.
func (m NoUnderlyingDividendAccrualPaymentDateBusinessCenters) SetUnderlyingDividendAccrualPaymentDateBusinessCenter(v string) {
	m.Set(field.NewUnderlyingDividendAccrualPaymentDateBusinessCenter(v))
}

// GetUnderlyingDividendAccrualPaymentDateBusinessCenter gets UnderlyingDividendAccrualPaymentDateBusinessCenter, Tag 42800.
func (m NoUnderlyingDividendAccrualPaymentDateBusinessCenters) GetUnderlyingDividendAccrualPaymentDateBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingDividendAccrualPaymentDateBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingDividendAccrualPaymentDateBusinessCenter returns true if UnderlyingDividendAccrualPaymentDateBusinessCenter is present, Tag 42800.
func (m NoUnderlyingDividendAccrualPaymentDateBusinessCenters) HasUnderlyingDividendAccrualPaymentDateBusinessCenter() bool {
	return m.Has(tag.UnderlyingDividendAccrualPaymentDateBusinessCenter)
}

// NoUnderlyingDividendAccrualPaymentDateBusinessCentersRepeatingGroup is a repeating group, Tag 42799.
type NoUnderlyingDividendAccrualPaymentDateBusinessCentersRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingDividendAccrualPaymentDateBusinessCentersRepeatingGroup returns an initialized, NoUnderlyingDividendAccrualPaymentDateBusinessCentersRepeatingGroup.
func NewNoUnderlyingDividendAccrualPaymentDateBusinessCentersRepeatingGroup() NoUnderlyingDividendAccrualPaymentDateBusinessCentersRepeatingGroup {
	return NoUnderlyingDividendAccrualPaymentDateBusinessCentersRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingDividendAccrualPaymentDateBusinessCenters,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingDividendAccrualPaymentDateBusinessCenter),
			},
		),
	}
}

// Add create and append a new NoUnderlyingDividendAccrualPaymentDateBusinessCenters to this group.
func (m NoUnderlyingDividendAccrualPaymentDateBusinessCentersRepeatingGroup) Add() NoUnderlyingDividendAccrualPaymentDateBusinessCenters {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingDividendAccrualPaymentDateBusinessCenters{g}
}

// Get returns the ith NoUnderlyingDividendAccrualPaymentDateBusinessCenters in the NoUnderlyingDividendAccrualPaymentDateBusinessCentersRepeatinGroup.
func (m NoUnderlyingDividendAccrualPaymentDateBusinessCentersRepeatingGroup) Get(i int) NoUnderlyingDividendAccrualPaymentDateBusinessCenters {
	return NoUnderlyingDividendAccrualPaymentDateBusinessCenters{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingReturnRates is a repeating group element, Tag 43034.
type NoUnderlyingReturnRates struct {
	*quickfix.Group
}

// SetUnderlyingReturnRatePriceSequence sets UnderlyingReturnRatePriceSequence, Tag 43035.
func (m NoUnderlyingReturnRates) SetUnderlyingReturnRatePriceSequence(v int) {
	m.Set(field.NewUnderlyingReturnRatePriceSequence(v))
}

// SetUnderlyingReturnRateCommissionBasis sets UnderlyingReturnRateCommissionBasis, Tag 43036.
func (m NoUnderlyingReturnRates) SetUnderlyingReturnRateCommissionBasis(v string) {
	m.Set(field.NewUnderlyingReturnRateCommissionBasis(v))
}

// SetUnderlyingReturnRateCommissionAmount sets UnderlyingReturnRateCommissionAmount, Tag 43037.
func (m NoUnderlyingReturnRates) SetUnderlyingReturnRateCommissionAmount(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingReturnRateCommissionAmount(value, scale))
}

// SetUnderlyingReturnRateCommissionCurrency sets UnderlyingReturnRateCommissionCurrency, Tag 43038.
func (m NoUnderlyingReturnRates) SetUnderlyingReturnRateCommissionCurrency(v string) {
	m.Set(field.NewUnderlyingReturnRateCommissionCurrency(v))
}

// SetUnderlyingReturnRateTotalCommissionPerTrade sets UnderlyingReturnRateTotalCommissionPerTrade, Tag 43039.
func (m NoUnderlyingReturnRates) SetUnderlyingReturnRateTotalCommissionPerTrade(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingReturnRateTotalCommissionPerTrade(value, scale))
}

// SetUnderlyingReturnRateDeterminationMethod sets UnderlyingReturnRateDeterminationMethod, Tag 43040.
func (m NoUnderlyingReturnRates) SetUnderlyingReturnRateDeterminationMethod(v string) {
	m.Set(field.NewUnderlyingReturnRateDeterminationMethod(v))
}

// SetNoUnderlyingReturnRatePrices sets NoUnderlyingReturnRatePrices, Tag 43064.
func (m NoUnderlyingReturnRates) SetNoUnderlyingReturnRatePrices(f NoUnderlyingReturnRatePricesRepeatingGroup) {
	m.SetGroup(f)
}

// SetNoUnderlyingReturnRateFXConversions sets NoUnderlyingReturnRateFXConversions, Tag 43030.
func (m NoUnderlyingReturnRates) SetNoUnderlyingReturnRateFXConversions(f NoUnderlyingReturnRateFXConversionsRepeatingGroup) {
	m.SetGroup(f)
}

// SetUnderlyingReturnRateAmountRelativeTo sets UnderlyingReturnRateAmountRelativeTo, Tag 43041.
func (m NoUnderlyingReturnRates) SetUnderlyingReturnRateAmountRelativeTo(v int) {
	m.Set(field.NewUnderlyingReturnRateAmountRelativeTo(v))
}

// SetUnderlyingReturnRateQuoteMeasureType sets UnderlyingReturnRateQuoteMeasureType, Tag 43042.
func (m NoUnderlyingReturnRates) SetUnderlyingReturnRateQuoteMeasureType(v string) {
	m.Set(field.NewUnderlyingReturnRateQuoteMeasureType(v))
}

// SetUnderlyingReturnRateQuoteUnits sets UnderlyingReturnRateQuoteUnits, Tag 43043.
func (m NoUnderlyingReturnRates) SetUnderlyingReturnRateQuoteUnits(v string) {
	m.Set(field.NewUnderlyingReturnRateQuoteUnits(v))
}

// SetUnderlyingReturnRateQuoteMethod sets UnderlyingReturnRateQuoteMethod, Tag 43044.
func (m NoUnderlyingReturnRates) SetUnderlyingReturnRateQuoteMethod(v int) {
	m.Set(field.NewUnderlyingReturnRateQuoteMethod(v))
}

// SetUnderlyingReturnRateQuoteCurrency sets UnderlyingReturnRateQuoteCurrency, Tag 43045.
func (m NoUnderlyingReturnRates) SetUnderlyingReturnRateQuoteCurrency(v string) {
	m.Set(field.NewUnderlyingReturnRateQuoteCurrency(v))
}

// SetUnderlyingReturnRateQuoteCurrencyType sets UnderlyingReturnRateQuoteCurrencyType, Tag 43046.
func (m NoUnderlyingReturnRates) SetUnderlyingReturnRateQuoteCurrencyType(v string) {
	m.Set(field.NewUnderlyingReturnRateQuoteCurrencyType(v))
}

// SetUnderlyingReturnRateQuoteTimeType sets UnderlyingReturnRateQuoteTimeType, Tag 43047.
func (m NoUnderlyingReturnRates) SetUnderlyingReturnRateQuoteTimeType(v int) {
	m.Set(field.NewUnderlyingReturnRateQuoteTimeType(v))
}

// SetUnderlyingReturnRateQuoteTime sets UnderlyingReturnRateQuoteTime, Tag 43048.
func (m NoUnderlyingReturnRates) SetUnderlyingReturnRateQuoteTime(v string) {
	m.Set(field.NewUnderlyingReturnRateQuoteTime(v))
}

// SetUnderlyingReturnRateQuoteDate sets UnderlyingReturnRateQuoteDate, Tag 43049.
func (m NoUnderlyingReturnRates) SetUnderlyingReturnRateQuoteDate(v string) {
	m.Set(field.NewUnderlyingReturnRateQuoteDate(v))
}

// SetUnderlyingReturnRateQuoteExpirationTime sets UnderlyingReturnRateQuoteExpirationTime, Tag 43050.
func (m NoUnderlyingReturnRates) SetUnderlyingReturnRateQuoteExpirationTime(v string) {
	m.Set(field.NewUnderlyingReturnRateQuoteExpirationTime(v))
}

// SetUnderlyingReturnRateQuoteBusinessCenter sets UnderlyingReturnRateQuoteBusinessCenter, Tag 43051.
func (m NoUnderlyingReturnRates) SetUnderlyingReturnRateQuoteBusinessCenter(v string) {
	m.Set(field.NewUnderlyingReturnRateQuoteBusinessCenter(v))
}

// SetUnderlyingReturnRateQuoteExchange sets UnderlyingReturnRateQuoteExchange, Tag 43052.
func (m NoUnderlyingReturnRates) SetUnderlyingReturnRateQuoteExchange(v string) {
	m.Set(field.NewUnderlyingReturnRateQuoteExchange(v))
}

// SetNoUnderlyingReturnRateInformationSources sets NoUnderlyingReturnRateInformationSources, Tag 43060.
func (m NoUnderlyingReturnRates) SetNoUnderlyingReturnRateInformationSources(f NoUnderlyingReturnRateInformationSourcesRepeatingGroup) {
	m.SetGroup(f)
}

// SetUnderlyingReturnRateQuotePricingModel sets UnderlyingReturnRateQuotePricingModel, Tag 43053.
func (m NoUnderlyingReturnRates) SetUnderlyingReturnRateQuotePricingModel(v string) {
	m.Set(field.NewUnderlyingReturnRateQuotePricingModel(v))
}

// SetUnderlyingReturnRateCashFlowType sets UnderlyingReturnRateCashFlowType, Tag 43054.
func (m NoUnderlyingReturnRates) SetUnderlyingReturnRateCashFlowType(v string) {
	m.Set(field.NewUnderlyingReturnRateCashFlowType(v))
}

// SetNoUnderlyingReturnRateDates sets NoUnderlyingReturnRateDates, Tag 43008.
func (m NoUnderlyingReturnRates) SetNoUnderlyingReturnRateDates(f NoUnderlyingReturnRateDatesRepeatingGroup) {
	m.SetGroup(f)
}

// SetUnderlyingReturnRateValuationTimeType sets UnderlyingReturnRateValuationTimeType, Tag 43055.
func (m NoUnderlyingReturnRates) SetUnderlyingReturnRateValuationTimeType(v int) {
	m.Set(field.NewUnderlyingReturnRateValuationTimeType(v))
}

// SetUnderlyingReturnRateValuationTime sets UnderlyingReturnRateValuationTime, Tag 43056.
func (m NoUnderlyingReturnRates) SetUnderlyingReturnRateValuationTime(v string) {
	m.Set(field.NewUnderlyingReturnRateValuationTime(v))
}

// SetUnderlyingReturnRateValuationTimeBusinessCenter sets UnderlyingReturnRateValuationTimeBusinessCenter, Tag 43057.
func (m NoUnderlyingReturnRates) SetUnderlyingReturnRateValuationTimeBusinessCenter(v string) {
	m.Set(field.NewUnderlyingReturnRateValuationTimeBusinessCenter(v))
}

// SetUnderlyingReturnRateValuationPriceOption sets UnderlyingReturnRateValuationPriceOption, Tag 43058.
func (m NoUnderlyingReturnRates) SetUnderlyingReturnRateValuationPriceOption(v int) {
	m.Set(field.NewUnderlyingReturnRateValuationPriceOption(v))
}

// SetUnderlyingReturnRateFinalPriceFallback sets UnderlyingReturnRateFinalPriceFallback, Tag 43059.
func (m NoUnderlyingReturnRates) SetUnderlyingReturnRateFinalPriceFallback(v int) {
	m.Set(field.NewUnderlyingReturnRateFinalPriceFallback(v))
}

// GetUnderlyingReturnRatePriceSequence gets UnderlyingReturnRatePriceSequence, Tag 43035.
func (m NoUnderlyingReturnRates) GetUnderlyingReturnRatePriceSequence() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingReturnRatePriceSequenceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingReturnRateCommissionBasis gets UnderlyingReturnRateCommissionBasis, Tag 43036.
func (m NoUnderlyingReturnRates) GetUnderlyingReturnRateCommissionBasis() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingReturnRateCommissionBasisField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingReturnRateCommissionAmount gets UnderlyingReturnRateCommissionAmount, Tag 43037.
func (m NoUnderlyingReturnRates) GetUnderlyingReturnRateCommissionAmount() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingReturnRateCommissionAmountField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingReturnRateCommissionCurrency gets UnderlyingReturnRateCommissionCurrency, Tag 43038.
func (m NoUnderlyingReturnRates) GetUnderlyingReturnRateCommissionCurrency() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingReturnRateCommissionCurrencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingReturnRateTotalCommissionPerTrade gets UnderlyingReturnRateTotalCommissionPerTrade, Tag 43039.
func (m NoUnderlyingReturnRates) GetUnderlyingReturnRateTotalCommissionPerTrade() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingReturnRateTotalCommissionPerTradeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingReturnRateDeterminationMethod gets UnderlyingReturnRateDeterminationMethod, Tag 43040.
func (m NoUnderlyingReturnRates) GetUnderlyingReturnRateDeterminationMethod() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingReturnRateDeterminationMethodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUnderlyingReturnRatePrices gets NoUnderlyingReturnRatePrices, Tag 43064.
func (m NoUnderlyingReturnRates) GetNoUnderlyingReturnRatePrices() (NoUnderlyingReturnRatePricesRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingReturnRatePricesRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetNoUnderlyingReturnRateFXConversions gets NoUnderlyingReturnRateFXConversions, Tag 43030.
func (m NoUnderlyingReturnRates) GetNoUnderlyingReturnRateFXConversions() (NoUnderlyingReturnRateFXConversionsRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingReturnRateFXConversionsRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetUnderlyingReturnRateAmountRelativeTo gets UnderlyingReturnRateAmountRelativeTo, Tag 43041.
func (m NoUnderlyingReturnRates) GetUnderlyingReturnRateAmountRelativeTo() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingReturnRateAmountRelativeToField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingReturnRateQuoteMeasureType gets UnderlyingReturnRateQuoteMeasureType, Tag 43042.
func (m NoUnderlyingReturnRates) GetUnderlyingReturnRateQuoteMeasureType() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingReturnRateQuoteMeasureTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingReturnRateQuoteUnits gets UnderlyingReturnRateQuoteUnits, Tag 43043.
func (m NoUnderlyingReturnRates) GetUnderlyingReturnRateQuoteUnits() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingReturnRateQuoteUnitsField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingReturnRateQuoteMethod gets UnderlyingReturnRateQuoteMethod, Tag 43044.
func (m NoUnderlyingReturnRates) GetUnderlyingReturnRateQuoteMethod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingReturnRateQuoteMethodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingReturnRateQuoteCurrency gets UnderlyingReturnRateQuoteCurrency, Tag 43045.
func (m NoUnderlyingReturnRates) GetUnderlyingReturnRateQuoteCurrency() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingReturnRateQuoteCurrencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingReturnRateQuoteCurrencyType gets UnderlyingReturnRateQuoteCurrencyType, Tag 43046.
func (m NoUnderlyingReturnRates) GetUnderlyingReturnRateQuoteCurrencyType() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingReturnRateQuoteCurrencyTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingReturnRateQuoteTimeType gets UnderlyingReturnRateQuoteTimeType, Tag 43047.
func (m NoUnderlyingReturnRates) GetUnderlyingReturnRateQuoteTimeType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingReturnRateQuoteTimeTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingReturnRateQuoteTime gets UnderlyingReturnRateQuoteTime, Tag 43048.
func (m NoUnderlyingReturnRates) GetUnderlyingReturnRateQuoteTime() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingReturnRateQuoteTimeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingReturnRateQuoteDate gets UnderlyingReturnRateQuoteDate, Tag 43049.
func (m NoUnderlyingReturnRates) GetUnderlyingReturnRateQuoteDate() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingReturnRateQuoteDateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingReturnRateQuoteExpirationTime gets UnderlyingReturnRateQuoteExpirationTime, Tag 43050.
func (m NoUnderlyingReturnRates) GetUnderlyingReturnRateQuoteExpirationTime() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingReturnRateQuoteExpirationTimeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingReturnRateQuoteBusinessCenter gets UnderlyingReturnRateQuoteBusinessCenter, Tag 43051.
func (m NoUnderlyingReturnRates) GetUnderlyingReturnRateQuoteBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingReturnRateQuoteBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingReturnRateQuoteExchange gets UnderlyingReturnRateQuoteExchange, Tag 43052.
func (m NoUnderlyingReturnRates) GetUnderlyingReturnRateQuoteExchange() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingReturnRateQuoteExchangeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUnderlyingReturnRateInformationSources gets NoUnderlyingReturnRateInformationSources, Tag 43060.
func (m NoUnderlyingReturnRates) GetNoUnderlyingReturnRateInformationSources() (NoUnderlyingReturnRateInformationSourcesRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingReturnRateInformationSourcesRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetUnderlyingReturnRateQuotePricingModel gets UnderlyingReturnRateQuotePricingModel, Tag 43053.
func (m NoUnderlyingReturnRates) GetUnderlyingReturnRateQuotePricingModel() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingReturnRateQuotePricingModelField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingReturnRateCashFlowType gets UnderlyingReturnRateCashFlowType, Tag 43054.
func (m NoUnderlyingReturnRates) GetUnderlyingReturnRateCashFlowType() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingReturnRateCashFlowTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUnderlyingReturnRateDates gets NoUnderlyingReturnRateDates, Tag 43008.
func (m NoUnderlyingReturnRates) GetNoUnderlyingReturnRateDates() (NoUnderlyingReturnRateDatesRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingReturnRateDatesRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetUnderlyingReturnRateValuationTimeType gets UnderlyingReturnRateValuationTimeType, Tag 43055.
func (m NoUnderlyingReturnRates) GetUnderlyingReturnRateValuationTimeType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingReturnRateValuationTimeTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingReturnRateValuationTime gets UnderlyingReturnRateValuationTime, Tag 43056.
func (m NoUnderlyingReturnRates) GetUnderlyingReturnRateValuationTime() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingReturnRateValuationTimeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingReturnRateValuationTimeBusinessCenter gets UnderlyingReturnRateValuationTimeBusinessCenter, Tag 43057.
func (m NoUnderlyingReturnRates) GetUnderlyingReturnRateValuationTimeBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingReturnRateValuationTimeBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingReturnRateValuationPriceOption gets UnderlyingReturnRateValuationPriceOption, Tag 43058.
func (m NoUnderlyingReturnRates) GetUnderlyingReturnRateValuationPriceOption() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingReturnRateValuationPriceOptionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingReturnRateFinalPriceFallback gets UnderlyingReturnRateFinalPriceFallback, Tag 43059.
func (m NoUnderlyingReturnRates) GetUnderlyingReturnRateFinalPriceFallback() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingReturnRateFinalPriceFallbackField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingReturnRatePriceSequence returns true if UnderlyingReturnRatePriceSequence is present, Tag 43035.
func (m NoUnderlyingReturnRates) HasUnderlyingReturnRatePriceSequence() bool {
	return m.Has(tag.UnderlyingReturnRatePriceSequence)
}

// HasUnderlyingReturnRateCommissionBasis returns true if UnderlyingReturnRateCommissionBasis is present, Tag 43036.
func (m NoUnderlyingReturnRates) HasUnderlyingReturnRateCommissionBasis() bool {
	return m.Has(tag.UnderlyingReturnRateCommissionBasis)
}

// HasUnderlyingReturnRateCommissionAmount returns true if UnderlyingReturnRateCommissionAmount is present, Tag 43037.
func (m NoUnderlyingReturnRates) HasUnderlyingReturnRateCommissionAmount() bool {
	return m.Has(tag.UnderlyingReturnRateCommissionAmount)
}

// HasUnderlyingReturnRateCommissionCurrency returns true if UnderlyingReturnRateCommissionCurrency is present, Tag 43038.
func (m NoUnderlyingReturnRates) HasUnderlyingReturnRateCommissionCurrency() bool {
	return m.Has(tag.UnderlyingReturnRateCommissionCurrency)
}

// HasUnderlyingReturnRateTotalCommissionPerTrade returns true if UnderlyingReturnRateTotalCommissionPerTrade is present, Tag 43039.
func (m NoUnderlyingReturnRates) HasUnderlyingReturnRateTotalCommissionPerTrade() bool {
	return m.Has(tag.UnderlyingReturnRateTotalCommissionPerTrade)
}

// HasUnderlyingReturnRateDeterminationMethod returns true if UnderlyingReturnRateDeterminationMethod is present, Tag 43040.
func (m NoUnderlyingReturnRates) HasUnderlyingReturnRateDeterminationMethod() bool {
	return m.Has(tag.UnderlyingReturnRateDeterminationMethod)
}

// HasNoUnderlyingReturnRatePrices returns true if NoUnderlyingReturnRatePrices is present, Tag 43064.
func (m NoUnderlyingReturnRates) HasNoUnderlyingReturnRatePrices() bool {
	return m.Has(tag.NoUnderlyingReturnRatePrices)
}

// HasNoUnderlyingReturnRateFXConversions returns true if NoUnderlyingReturnRateFXConversions is present, Tag 43030.
func (m NoUnderlyingReturnRates) HasNoUnderlyingReturnRateFXConversions() bool {
	return m.Has(tag.NoUnderlyingReturnRateFXConversions)
}

// HasUnderlyingReturnRateAmountRelativeTo returns true if UnderlyingReturnRateAmountRelativeTo is present, Tag 43041.
func (m NoUnderlyingReturnRates) HasUnderlyingReturnRateAmountRelativeTo() bool {
	return m.Has(tag.UnderlyingReturnRateAmountRelativeTo)
}

// HasUnderlyingReturnRateQuoteMeasureType returns true if UnderlyingReturnRateQuoteMeasureType is present, Tag 43042.
func (m NoUnderlyingReturnRates) HasUnderlyingReturnRateQuoteMeasureType() bool {
	return m.Has(tag.UnderlyingReturnRateQuoteMeasureType)
}

// HasUnderlyingReturnRateQuoteUnits returns true if UnderlyingReturnRateQuoteUnits is present, Tag 43043.
func (m NoUnderlyingReturnRates) HasUnderlyingReturnRateQuoteUnits() bool {
	return m.Has(tag.UnderlyingReturnRateQuoteUnits)
}

// HasUnderlyingReturnRateQuoteMethod returns true if UnderlyingReturnRateQuoteMethod is present, Tag 43044.
func (m NoUnderlyingReturnRates) HasUnderlyingReturnRateQuoteMethod() bool {
	return m.Has(tag.UnderlyingReturnRateQuoteMethod)
}

// HasUnderlyingReturnRateQuoteCurrency returns true if UnderlyingReturnRateQuoteCurrency is present, Tag 43045.
func (m NoUnderlyingReturnRates) HasUnderlyingReturnRateQuoteCurrency() bool {
	return m.Has(tag.UnderlyingReturnRateQuoteCurrency)
}

// HasUnderlyingReturnRateQuoteCurrencyType returns true if UnderlyingReturnRateQuoteCurrencyType is present, Tag 43046.
func (m NoUnderlyingReturnRates) HasUnderlyingReturnRateQuoteCurrencyType() bool {
	return m.Has(tag.UnderlyingReturnRateQuoteCurrencyType)
}

// HasUnderlyingReturnRateQuoteTimeType returns true if UnderlyingReturnRateQuoteTimeType is present, Tag 43047.
func (m NoUnderlyingReturnRates) HasUnderlyingReturnRateQuoteTimeType() bool {
	return m.Has(tag.UnderlyingReturnRateQuoteTimeType)
}

// HasUnderlyingReturnRateQuoteTime returns true if UnderlyingReturnRateQuoteTime is present, Tag 43048.
func (m NoUnderlyingReturnRates) HasUnderlyingReturnRateQuoteTime() bool {
	return m.Has(tag.UnderlyingReturnRateQuoteTime)
}

// HasUnderlyingReturnRateQuoteDate returns true if UnderlyingReturnRateQuoteDate is present, Tag 43049.
func (m NoUnderlyingReturnRates) HasUnderlyingReturnRateQuoteDate() bool {
	return m.Has(tag.UnderlyingReturnRateQuoteDate)
}

// HasUnderlyingReturnRateQuoteExpirationTime returns true if UnderlyingReturnRateQuoteExpirationTime is present, Tag 43050.
func (m NoUnderlyingReturnRates) HasUnderlyingReturnRateQuoteExpirationTime() bool {
	return m.Has(tag.UnderlyingReturnRateQuoteExpirationTime)
}

// HasUnderlyingReturnRateQuoteBusinessCenter returns true if UnderlyingReturnRateQuoteBusinessCenter is present, Tag 43051.
func (m NoUnderlyingReturnRates) HasUnderlyingReturnRateQuoteBusinessCenter() bool {
	return m.Has(tag.UnderlyingReturnRateQuoteBusinessCenter)
}

// HasUnderlyingReturnRateQuoteExchange returns true if UnderlyingReturnRateQuoteExchange is present, Tag 43052.
func (m NoUnderlyingReturnRates) HasUnderlyingReturnRateQuoteExchange() bool {
	return m.Has(tag.UnderlyingReturnRateQuoteExchange)
}

// HasNoUnderlyingReturnRateInformationSources returns true if NoUnderlyingReturnRateInformationSources is present, Tag 43060.
func (m NoUnderlyingReturnRates) HasNoUnderlyingReturnRateInformationSources() bool {
	return m.Has(tag.NoUnderlyingReturnRateInformationSources)
}

// HasUnderlyingReturnRateQuotePricingModel returns true if UnderlyingReturnRateQuotePricingModel is present, Tag 43053.
func (m NoUnderlyingReturnRates) HasUnderlyingReturnRateQuotePricingModel() bool {
	return m.Has(tag.UnderlyingReturnRateQuotePricingModel)
}

// HasUnderlyingReturnRateCashFlowType returns true if UnderlyingReturnRateCashFlowType is present, Tag 43054.
func (m NoUnderlyingReturnRates) HasUnderlyingReturnRateCashFlowType() bool {
	return m.Has(tag.UnderlyingReturnRateCashFlowType)
}

// HasNoUnderlyingReturnRateDates returns true if NoUnderlyingReturnRateDates is present, Tag 43008.
func (m NoUnderlyingReturnRates) HasNoUnderlyingReturnRateDates() bool {
	return m.Has(tag.NoUnderlyingReturnRateDates)
}

// HasUnderlyingReturnRateValuationTimeType returns true if UnderlyingReturnRateValuationTimeType is present, Tag 43055.
func (m NoUnderlyingReturnRates) HasUnderlyingReturnRateValuationTimeType() bool {
	return m.Has(tag.UnderlyingReturnRateValuationTimeType)
}

// HasUnderlyingReturnRateValuationTime returns true if UnderlyingReturnRateValuationTime is present, Tag 43056.
func (m NoUnderlyingReturnRates) HasUnderlyingReturnRateValuationTime() bool {
	return m.Has(tag.UnderlyingReturnRateValuationTime)
}

// HasUnderlyingReturnRateValuationTimeBusinessCenter returns true if UnderlyingReturnRateValuationTimeBusinessCenter is present, Tag 43057.
func (m NoUnderlyingReturnRates) HasUnderlyingReturnRateValuationTimeBusinessCenter() bool {
	return m.Has(tag.UnderlyingReturnRateValuationTimeBusinessCenter)
}

// HasUnderlyingReturnRateValuationPriceOption returns true if UnderlyingReturnRateValuationPriceOption is present, Tag 43058.
func (m NoUnderlyingReturnRates) HasUnderlyingReturnRateValuationPriceOption() bool {
	return m.Has(tag.UnderlyingReturnRateValuationPriceOption)
}

// HasUnderlyingReturnRateFinalPriceFallback returns true if UnderlyingReturnRateFinalPriceFallback is present, Tag 43059.
func (m NoUnderlyingReturnRates) HasUnderlyingReturnRateFinalPriceFallback() bool {
	return m.Has(tag.UnderlyingReturnRateFinalPriceFallback)
}

// NoUnderlyingReturnRatePrices is a repeating group element, Tag 43064.
type NoUnderlyingReturnRatePrices struct {
	*quickfix.Group
}

// SetUnderlyingReturnRatePriceBasis sets UnderlyingReturnRatePriceBasis, Tag 43065.
func (m NoUnderlyingReturnRatePrices) SetUnderlyingReturnRatePriceBasis(v int) {
	m.Set(field.NewUnderlyingReturnRatePriceBasis(v))
}

// SetUnderlyingReturnRatePrice sets UnderlyingReturnRatePrice, Tag 43066.
func (m NoUnderlyingReturnRatePrices) SetUnderlyingReturnRatePrice(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingReturnRatePrice(value, scale))
}

// SetUnderlyingReturnRatePriceCurrency sets UnderlyingReturnRatePriceCurrency, Tag 43067.
func (m NoUnderlyingReturnRatePrices) SetUnderlyingReturnRatePriceCurrency(v string) {
	m.Set(field.NewUnderlyingReturnRatePriceCurrency(v))
}

// SetUnderlyingReturnRatePriceType sets UnderlyingReturnRatePriceType, Tag 43068.
func (m NoUnderlyingReturnRatePrices) SetUnderlyingReturnRatePriceType(v int) {
	m.Set(field.NewUnderlyingReturnRatePriceType(v))
}

// GetUnderlyingReturnRatePriceBasis gets UnderlyingReturnRatePriceBasis, Tag 43065.
func (m NoUnderlyingReturnRatePrices) GetUnderlyingReturnRatePriceBasis() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingReturnRatePriceBasisField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingReturnRatePrice gets UnderlyingReturnRatePrice, Tag 43066.
func (m NoUnderlyingReturnRatePrices) GetUnderlyingReturnRatePrice() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingReturnRatePriceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingReturnRatePriceCurrency gets UnderlyingReturnRatePriceCurrency, Tag 43067.
func (m NoUnderlyingReturnRatePrices) GetUnderlyingReturnRatePriceCurrency() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingReturnRatePriceCurrencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingReturnRatePriceType gets UnderlyingReturnRatePriceType, Tag 43068.
func (m NoUnderlyingReturnRatePrices) GetUnderlyingReturnRatePriceType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingReturnRatePriceTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingReturnRatePriceBasis returns true if UnderlyingReturnRatePriceBasis is present, Tag 43065.
func (m NoUnderlyingReturnRatePrices) HasUnderlyingReturnRatePriceBasis() bool {
	return m.Has(tag.UnderlyingReturnRatePriceBasis)
}

// HasUnderlyingReturnRatePrice returns true if UnderlyingReturnRatePrice is present, Tag 43066.
func (m NoUnderlyingReturnRatePrices) HasUnderlyingReturnRatePrice() bool {
	return m.Has(tag.UnderlyingReturnRatePrice)
}

// HasUnderlyingReturnRatePriceCurrency returns true if UnderlyingReturnRatePriceCurrency is present, Tag 43067.
func (m NoUnderlyingReturnRatePrices) HasUnderlyingReturnRatePriceCurrency() bool {
	return m.Has(tag.UnderlyingReturnRatePriceCurrency)
}

// HasUnderlyingReturnRatePriceType returns true if UnderlyingReturnRatePriceType is present, Tag 43068.
func (m NoUnderlyingReturnRatePrices) HasUnderlyingReturnRatePriceType() bool {
	return m.Has(tag.UnderlyingReturnRatePriceType)
}

// NoUnderlyingReturnRatePricesRepeatingGroup is a repeating group, Tag 43064.
type NoUnderlyingReturnRatePricesRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingReturnRatePricesRepeatingGroup returns an initialized, NoUnderlyingReturnRatePricesRepeatingGroup.
func NewNoUnderlyingReturnRatePricesRepeatingGroup() NoUnderlyingReturnRatePricesRepeatingGroup {
	return NoUnderlyingReturnRatePricesRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingReturnRatePrices,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingReturnRatePriceBasis),
				quickfix.GroupElement(tag.UnderlyingReturnRatePrice),
				quickfix.GroupElement(tag.UnderlyingReturnRatePriceCurrency),
				quickfix.GroupElement(tag.UnderlyingReturnRatePriceType),
			},
		),
	}
}

// Add create and append a new NoUnderlyingReturnRatePrices to this group.
func (m NoUnderlyingReturnRatePricesRepeatingGroup) Add() NoUnderlyingReturnRatePrices {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingReturnRatePrices{g}
}

// Get returns the ith NoUnderlyingReturnRatePrices in the NoUnderlyingReturnRatePricesRepeatinGroup.
func (m NoUnderlyingReturnRatePricesRepeatingGroup) Get(i int) NoUnderlyingReturnRatePrices {
	return NoUnderlyingReturnRatePrices{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingReturnRateFXConversions is a repeating group element, Tag 43030.
type NoUnderlyingReturnRateFXConversions struct {
	*quickfix.Group
}

// SetUnderlyingReturnRateFXCurrencySymbol sets UnderlyingReturnRateFXCurrencySymbol, Tag 43031.
func (m NoUnderlyingReturnRateFXConversions) SetUnderlyingReturnRateFXCurrencySymbol(v string) {
	m.Set(field.NewUnderlyingReturnRateFXCurrencySymbol(v))
}

// SetUnderlyingReturnRateFXRate sets UnderlyingReturnRateFXRate, Tag 43032.
func (m NoUnderlyingReturnRateFXConversions) SetUnderlyingReturnRateFXRate(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingReturnRateFXRate(value, scale))
}

// SetUnderlyingReturnRateFXRateCalc sets UnderlyingReturnRateFXRateCalc, Tag 43033.
func (m NoUnderlyingReturnRateFXConversions) SetUnderlyingReturnRateFXRateCalc(v string) {
	m.Set(field.NewUnderlyingReturnRateFXRateCalc(v))
}

// GetUnderlyingReturnRateFXCurrencySymbol gets UnderlyingReturnRateFXCurrencySymbol, Tag 43031.
func (m NoUnderlyingReturnRateFXConversions) GetUnderlyingReturnRateFXCurrencySymbol() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingReturnRateFXCurrencySymbolField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingReturnRateFXRate gets UnderlyingReturnRateFXRate, Tag 43032.
func (m NoUnderlyingReturnRateFXConversions) GetUnderlyingReturnRateFXRate() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingReturnRateFXRateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingReturnRateFXRateCalc gets UnderlyingReturnRateFXRateCalc, Tag 43033.
func (m NoUnderlyingReturnRateFXConversions) GetUnderlyingReturnRateFXRateCalc() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingReturnRateFXRateCalcField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingReturnRateFXCurrencySymbol returns true if UnderlyingReturnRateFXCurrencySymbol is present, Tag 43031.
func (m NoUnderlyingReturnRateFXConversions) HasUnderlyingReturnRateFXCurrencySymbol() bool {
	return m.Has(tag.UnderlyingReturnRateFXCurrencySymbol)
}

// HasUnderlyingReturnRateFXRate returns true if UnderlyingReturnRateFXRate is present, Tag 43032.
func (m NoUnderlyingReturnRateFXConversions) HasUnderlyingReturnRateFXRate() bool {
	return m.Has(tag.UnderlyingReturnRateFXRate)
}

// HasUnderlyingReturnRateFXRateCalc returns true if UnderlyingReturnRateFXRateCalc is present, Tag 43033.
func (m NoUnderlyingReturnRateFXConversions) HasUnderlyingReturnRateFXRateCalc() bool {
	return m.Has(tag.UnderlyingReturnRateFXRateCalc)
}

// NoUnderlyingReturnRateFXConversionsRepeatingGroup is a repeating group, Tag 43030.
type NoUnderlyingReturnRateFXConversionsRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingReturnRateFXConversionsRepeatingGroup returns an initialized, NoUnderlyingReturnRateFXConversionsRepeatingGroup.
func NewNoUnderlyingReturnRateFXConversionsRepeatingGroup() NoUnderlyingReturnRateFXConversionsRepeatingGroup {
	return NoUnderlyingReturnRateFXConversionsRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingReturnRateFXConversions,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingReturnRateFXCurrencySymbol),
				quickfix.GroupElement(tag.UnderlyingReturnRateFXRate),
				quickfix.GroupElement(tag.UnderlyingReturnRateFXRateCalc),
			},
		),
	}
}

// Add create and append a new NoUnderlyingReturnRateFXConversions to this group.
func (m NoUnderlyingReturnRateFXConversionsRepeatingGroup) Add() NoUnderlyingReturnRateFXConversions {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingReturnRateFXConversions{g}
}

// Get returns the ith NoUnderlyingReturnRateFXConversions in the NoUnderlyingReturnRateFXConversionsRepeatinGroup.
func (m NoUnderlyingReturnRateFXConversionsRepeatingGroup) Get(i int) NoUnderlyingReturnRateFXConversions {
	return NoUnderlyingReturnRateFXConversions{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingReturnRateInformationSources is a repeating group element, Tag 43060.
type NoUnderlyingReturnRateInformationSources struct {
	*quickfix.Group
}

// SetUnderlyingReturnRateInformationSource sets UnderlyingReturnRateInformationSource, Tag 43061.
func (m NoUnderlyingReturnRateInformationSources) SetUnderlyingReturnRateInformationSource(v int) {
	m.Set(field.NewUnderlyingReturnRateInformationSource(v))
}

// SetUnderlyingReturnRateReferencePage sets UnderlyingReturnRateReferencePage, Tag 43062.
func (m NoUnderlyingReturnRateInformationSources) SetUnderlyingReturnRateReferencePage(v string) {
	m.Set(field.NewUnderlyingReturnRateReferencePage(v))
}

// SetUnderlyingReturnRateReferencePageHeading sets UnderlyingReturnRateReferencePageHeading, Tag 43063.
func (m NoUnderlyingReturnRateInformationSources) SetUnderlyingReturnRateReferencePageHeading(v string) {
	m.Set(field.NewUnderlyingReturnRateReferencePageHeading(v))
}

// GetUnderlyingReturnRateInformationSource gets UnderlyingReturnRateInformationSource, Tag 43061.
func (m NoUnderlyingReturnRateInformationSources) GetUnderlyingReturnRateInformationSource() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingReturnRateInformationSourceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingReturnRateReferencePage gets UnderlyingReturnRateReferencePage, Tag 43062.
func (m NoUnderlyingReturnRateInformationSources) GetUnderlyingReturnRateReferencePage() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingReturnRateReferencePageField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingReturnRateReferencePageHeading gets UnderlyingReturnRateReferencePageHeading, Tag 43063.
func (m NoUnderlyingReturnRateInformationSources) GetUnderlyingReturnRateReferencePageHeading() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingReturnRateReferencePageHeadingField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingReturnRateInformationSource returns true if UnderlyingReturnRateInformationSource is present, Tag 43061.
func (m NoUnderlyingReturnRateInformationSources) HasUnderlyingReturnRateInformationSource() bool {
	return m.Has(tag.UnderlyingReturnRateInformationSource)
}

// HasUnderlyingReturnRateReferencePage returns true if UnderlyingReturnRateReferencePage is present, Tag 43062.
func (m NoUnderlyingReturnRateInformationSources) HasUnderlyingReturnRateReferencePage() bool {
	return m.Has(tag.UnderlyingReturnRateReferencePage)
}

// HasUnderlyingReturnRateReferencePageHeading returns true if UnderlyingReturnRateReferencePageHeading is present, Tag 43063.
func (m NoUnderlyingReturnRateInformationSources) HasUnderlyingReturnRateReferencePageHeading() bool {
	return m.Has(tag.UnderlyingReturnRateReferencePageHeading)
}

// NoUnderlyingReturnRateInformationSourcesRepeatingGroup is a repeating group, Tag 43060.
type NoUnderlyingReturnRateInformationSourcesRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingReturnRateInformationSourcesRepeatingGroup returns an initialized, NoUnderlyingReturnRateInformationSourcesRepeatingGroup.
func NewNoUnderlyingReturnRateInformationSourcesRepeatingGroup() NoUnderlyingReturnRateInformationSourcesRepeatingGroup {
	return NoUnderlyingReturnRateInformationSourcesRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingReturnRateInformationSources,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingReturnRateInformationSource),
				quickfix.GroupElement(tag.UnderlyingReturnRateReferencePage),
				quickfix.GroupElement(tag.UnderlyingReturnRateReferencePageHeading),
			},
		),
	}
}

// Add create and append a new NoUnderlyingReturnRateInformationSources to this group.
func (m NoUnderlyingReturnRateInformationSourcesRepeatingGroup) Add() NoUnderlyingReturnRateInformationSources {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingReturnRateInformationSources{g}
}

// Get returns the ith NoUnderlyingReturnRateInformationSources in the NoUnderlyingReturnRateInformationSourcesRepeatinGroup.
func (m NoUnderlyingReturnRateInformationSourcesRepeatingGroup) Get(i int) NoUnderlyingReturnRateInformationSources {
	return NoUnderlyingReturnRateInformationSources{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingReturnRateDates is a repeating group element, Tag 43008.
type NoUnderlyingReturnRateDates struct {
	*quickfix.Group
}

// SetUnderlyingReturnRateDateMode sets UnderlyingReturnRateDateMode, Tag 43009.
func (m NoUnderlyingReturnRateDates) SetUnderlyingReturnRateDateMode(v int) {
	m.Set(field.NewUnderlyingReturnRateDateMode(v))
}

// SetNoUnderlyingReturnRateValuationDates sets NoUnderlyingReturnRateValuationDates, Tag 43071.
func (m NoUnderlyingReturnRateDates) SetNoUnderlyingReturnRateValuationDates(f NoUnderlyingReturnRateValuationDatesRepeatingGroup) {
	m.SetGroup(f)
}

// SetUnderlyingReturnRateValuationDateRelativeTo sets UnderlyingReturnRateValuationDateRelativeTo, Tag 43010.
func (m NoUnderlyingReturnRateDates) SetUnderlyingReturnRateValuationDateRelativeTo(v int) {
	m.Set(field.NewUnderlyingReturnRateValuationDateRelativeTo(v))
}

// SetUnderlyingReturnRateValuationDateOffsetPeriod sets UnderlyingReturnRateValuationDateOffsetPeriod, Tag 43011.
func (m NoUnderlyingReturnRateDates) SetUnderlyingReturnRateValuationDateOffsetPeriod(v int) {
	m.Set(field.NewUnderlyingReturnRateValuationDateOffsetPeriod(v))
}

// SetUnderlyingReturnRateValuationDateOffsetUnit sets UnderlyingReturnRateValuationDateOffsetUnit, Tag 43012.
func (m NoUnderlyingReturnRateDates) SetUnderlyingReturnRateValuationDateOffsetUnit(v string) {
	m.Set(field.NewUnderlyingReturnRateValuationDateOffsetUnit(v))
}

// SetUnderlyingReturnRateValuationDateOffsetDayType sets UnderlyingReturnRateValuationDateOffsetDayType, Tag 43013.
func (m NoUnderlyingReturnRateDates) SetUnderlyingReturnRateValuationDateOffsetDayType(v int) {
	m.Set(field.NewUnderlyingReturnRateValuationDateOffsetDayType(v))
}

// SetUnderlyingReturnRateValuationStartDateUnadjusted sets UnderlyingReturnRateValuationStartDateUnadjusted, Tag 43014.
func (m NoUnderlyingReturnRateDates) SetUnderlyingReturnRateValuationStartDateUnadjusted(v string) {
	m.Set(field.NewUnderlyingReturnRateValuationStartDateUnadjusted(v))
}

// SetUnderlyingReturnRateValuationStartDateRelativeTo sets UnderlyingReturnRateValuationStartDateRelativeTo, Tag 43015.
func (m NoUnderlyingReturnRateDates) SetUnderlyingReturnRateValuationStartDateRelativeTo(v int) {
	m.Set(field.NewUnderlyingReturnRateValuationStartDateRelativeTo(v))
}

// SetUnderlyingReturnRateValuationStartDateOffsetPeriod sets UnderlyingReturnRateValuationStartDateOffsetPeriod, Tag 43016.
func (m NoUnderlyingReturnRateDates) SetUnderlyingReturnRateValuationStartDateOffsetPeriod(v int) {
	m.Set(field.NewUnderlyingReturnRateValuationStartDateOffsetPeriod(v))
}

// SetUnderlyingReturnRateValuationStartDateOffsetUnit sets UnderlyingReturnRateValuationStartDateOffsetUnit, Tag 43017.
func (m NoUnderlyingReturnRateDates) SetUnderlyingReturnRateValuationStartDateOffsetUnit(v string) {
	m.Set(field.NewUnderlyingReturnRateValuationStartDateOffsetUnit(v))
}

// SetUnderlyingReturnRateValuationStartDateOffsetDayType sets UnderlyingReturnRateValuationStartDateOffsetDayType, Tag 43018.
func (m NoUnderlyingReturnRateDates) SetUnderlyingReturnRateValuationStartDateOffsetDayType(v int) {
	m.Set(field.NewUnderlyingReturnRateValuationStartDateOffsetDayType(v))
}

// SetUnderlyingReturnRateValuationStartDateAdjusted sets UnderlyingReturnRateValuationStartDateAdjusted, Tag 43019.
func (m NoUnderlyingReturnRateDates) SetUnderlyingReturnRateValuationStartDateAdjusted(v string) {
	m.Set(field.NewUnderlyingReturnRateValuationStartDateAdjusted(v))
}

// SetUnderlyingReturnRateValuationEndDateUnadjusted sets UnderlyingReturnRateValuationEndDateUnadjusted, Tag 43020.
func (m NoUnderlyingReturnRateDates) SetUnderlyingReturnRateValuationEndDateUnadjusted(v string) {
	m.Set(field.NewUnderlyingReturnRateValuationEndDateUnadjusted(v))
}

// SetUnderlyingReturnRateValuationEndDateRelativeTo sets UnderlyingReturnRateValuationEndDateRelativeTo, Tag 43021.
func (m NoUnderlyingReturnRateDates) SetUnderlyingReturnRateValuationEndDateRelativeTo(v int) {
	m.Set(field.NewUnderlyingReturnRateValuationEndDateRelativeTo(v))
}

// SetUnderlyingReturnRateValuationEndDateOffsetPeriod sets UnderlyingReturnRateValuationEndDateOffsetPeriod, Tag 43022.
func (m NoUnderlyingReturnRateDates) SetUnderlyingReturnRateValuationEndDateOffsetPeriod(v int) {
	m.Set(field.NewUnderlyingReturnRateValuationEndDateOffsetPeriod(v))
}

// SetUnderlyingReturnRateValuationEndDateOffsetUnit sets UnderlyingReturnRateValuationEndDateOffsetUnit, Tag 43023.
func (m NoUnderlyingReturnRateDates) SetUnderlyingReturnRateValuationEndDateOffsetUnit(v string) {
	m.Set(field.NewUnderlyingReturnRateValuationEndDateOffsetUnit(v))
}

// SetUnderlyingReturnRateValuationEndDateOffsetDayType sets UnderlyingReturnRateValuationEndDateOffsetDayType, Tag 43024.
func (m NoUnderlyingReturnRateDates) SetUnderlyingReturnRateValuationEndDateOffsetDayType(v int) {
	m.Set(field.NewUnderlyingReturnRateValuationEndDateOffsetDayType(v))
}

// SetUnderlyingReturnRateValuationEndDateAdjusted sets UnderlyingReturnRateValuationEndDateAdjusted, Tag 43025.
func (m NoUnderlyingReturnRateDates) SetUnderlyingReturnRateValuationEndDateAdjusted(v string) {
	m.Set(field.NewUnderlyingReturnRateValuationEndDateAdjusted(v))
}

// SetUnderlyingReturnRateValuationFrequencyPeriod sets UnderlyingReturnRateValuationFrequencyPeriod, Tag 43026.
func (m NoUnderlyingReturnRateDates) SetUnderlyingReturnRateValuationFrequencyPeriod(v int) {
	m.Set(field.NewUnderlyingReturnRateValuationFrequencyPeriod(v))
}

// SetUnderlyingReturnRateValuationFrequencyUnit sets UnderlyingReturnRateValuationFrequencyUnit, Tag 43027.
func (m NoUnderlyingReturnRateDates) SetUnderlyingReturnRateValuationFrequencyUnit(v string) {
	m.Set(field.NewUnderlyingReturnRateValuationFrequencyUnit(v))
}

// SetUnderlyingReturnRateValuationFrequencyRollConvention sets UnderlyingReturnRateValuationFrequencyRollConvention, Tag 43028.
func (m NoUnderlyingReturnRateDates) SetUnderlyingReturnRateValuationFrequencyRollConvention(v string) {
	m.Set(field.NewUnderlyingReturnRateValuationFrequencyRollConvention(v))
}

// SetUnderlyingReturnRateValuationDateBusinessDayConvention sets UnderlyingReturnRateValuationDateBusinessDayConvention, Tag 43029.
func (m NoUnderlyingReturnRateDates) SetUnderlyingReturnRateValuationDateBusinessDayConvention(v int) {
	m.Set(field.NewUnderlyingReturnRateValuationDateBusinessDayConvention(v))
}

// SetNoUnderlyingReturnRateValuationDateBusinessCenters sets NoUnderlyingReturnRateValuationDateBusinessCenters, Tag 43069.
func (m NoUnderlyingReturnRateDates) SetNoUnderlyingReturnRateValuationDateBusinessCenters(f NoUnderlyingReturnRateValuationDateBusinessCentersRepeatingGroup) {
	m.SetGroup(f)
}

// GetUnderlyingReturnRateDateMode gets UnderlyingReturnRateDateMode, Tag 43009.
func (m NoUnderlyingReturnRateDates) GetUnderlyingReturnRateDateMode() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingReturnRateDateModeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUnderlyingReturnRateValuationDates gets NoUnderlyingReturnRateValuationDates, Tag 43071.
func (m NoUnderlyingReturnRateDates) GetNoUnderlyingReturnRateValuationDates() (NoUnderlyingReturnRateValuationDatesRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingReturnRateValuationDatesRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetUnderlyingReturnRateValuationDateRelativeTo gets UnderlyingReturnRateValuationDateRelativeTo, Tag 43010.
func (m NoUnderlyingReturnRateDates) GetUnderlyingReturnRateValuationDateRelativeTo() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingReturnRateValuationDateRelativeToField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingReturnRateValuationDateOffsetPeriod gets UnderlyingReturnRateValuationDateOffsetPeriod, Tag 43011.
func (m NoUnderlyingReturnRateDates) GetUnderlyingReturnRateValuationDateOffsetPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingReturnRateValuationDateOffsetPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingReturnRateValuationDateOffsetUnit gets UnderlyingReturnRateValuationDateOffsetUnit, Tag 43012.
func (m NoUnderlyingReturnRateDates) GetUnderlyingReturnRateValuationDateOffsetUnit() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingReturnRateValuationDateOffsetUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingReturnRateValuationDateOffsetDayType gets UnderlyingReturnRateValuationDateOffsetDayType, Tag 43013.
func (m NoUnderlyingReturnRateDates) GetUnderlyingReturnRateValuationDateOffsetDayType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingReturnRateValuationDateOffsetDayTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingReturnRateValuationStartDateUnadjusted gets UnderlyingReturnRateValuationStartDateUnadjusted, Tag 43014.
func (m NoUnderlyingReturnRateDates) GetUnderlyingReturnRateValuationStartDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingReturnRateValuationStartDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingReturnRateValuationStartDateRelativeTo gets UnderlyingReturnRateValuationStartDateRelativeTo, Tag 43015.
func (m NoUnderlyingReturnRateDates) GetUnderlyingReturnRateValuationStartDateRelativeTo() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingReturnRateValuationStartDateRelativeToField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingReturnRateValuationStartDateOffsetPeriod gets UnderlyingReturnRateValuationStartDateOffsetPeriod, Tag 43016.
func (m NoUnderlyingReturnRateDates) GetUnderlyingReturnRateValuationStartDateOffsetPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingReturnRateValuationStartDateOffsetPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingReturnRateValuationStartDateOffsetUnit gets UnderlyingReturnRateValuationStartDateOffsetUnit, Tag 43017.
func (m NoUnderlyingReturnRateDates) GetUnderlyingReturnRateValuationStartDateOffsetUnit() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingReturnRateValuationStartDateOffsetUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingReturnRateValuationStartDateOffsetDayType gets UnderlyingReturnRateValuationStartDateOffsetDayType, Tag 43018.
func (m NoUnderlyingReturnRateDates) GetUnderlyingReturnRateValuationStartDateOffsetDayType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingReturnRateValuationStartDateOffsetDayTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingReturnRateValuationStartDateAdjusted gets UnderlyingReturnRateValuationStartDateAdjusted, Tag 43019.
func (m NoUnderlyingReturnRateDates) GetUnderlyingReturnRateValuationStartDateAdjusted() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingReturnRateValuationStartDateAdjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingReturnRateValuationEndDateUnadjusted gets UnderlyingReturnRateValuationEndDateUnadjusted, Tag 43020.
func (m NoUnderlyingReturnRateDates) GetUnderlyingReturnRateValuationEndDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingReturnRateValuationEndDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingReturnRateValuationEndDateRelativeTo gets UnderlyingReturnRateValuationEndDateRelativeTo, Tag 43021.
func (m NoUnderlyingReturnRateDates) GetUnderlyingReturnRateValuationEndDateRelativeTo() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingReturnRateValuationEndDateRelativeToField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingReturnRateValuationEndDateOffsetPeriod gets UnderlyingReturnRateValuationEndDateOffsetPeriod, Tag 43022.
func (m NoUnderlyingReturnRateDates) GetUnderlyingReturnRateValuationEndDateOffsetPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingReturnRateValuationEndDateOffsetPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingReturnRateValuationEndDateOffsetUnit gets UnderlyingReturnRateValuationEndDateOffsetUnit, Tag 43023.
func (m NoUnderlyingReturnRateDates) GetUnderlyingReturnRateValuationEndDateOffsetUnit() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingReturnRateValuationEndDateOffsetUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingReturnRateValuationEndDateOffsetDayType gets UnderlyingReturnRateValuationEndDateOffsetDayType, Tag 43024.
func (m NoUnderlyingReturnRateDates) GetUnderlyingReturnRateValuationEndDateOffsetDayType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingReturnRateValuationEndDateOffsetDayTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingReturnRateValuationEndDateAdjusted gets UnderlyingReturnRateValuationEndDateAdjusted, Tag 43025.
func (m NoUnderlyingReturnRateDates) GetUnderlyingReturnRateValuationEndDateAdjusted() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingReturnRateValuationEndDateAdjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingReturnRateValuationFrequencyPeriod gets UnderlyingReturnRateValuationFrequencyPeriod, Tag 43026.
func (m NoUnderlyingReturnRateDates) GetUnderlyingReturnRateValuationFrequencyPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingReturnRateValuationFrequencyPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingReturnRateValuationFrequencyUnit gets UnderlyingReturnRateValuationFrequencyUnit, Tag 43027.
func (m NoUnderlyingReturnRateDates) GetUnderlyingReturnRateValuationFrequencyUnit() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingReturnRateValuationFrequencyUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingReturnRateValuationFrequencyRollConvention gets UnderlyingReturnRateValuationFrequencyRollConvention, Tag 43028.
func (m NoUnderlyingReturnRateDates) GetUnderlyingReturnRateValuationFrequencyRollConvention() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingReturnRateValuationFrequencyRollConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingReturnRateValuationDateBusinessDayConvention gets UnderlyingReturnRateValuationDateBusinessDayConvention, Tag 43029.
func (m NoUnderlyingReturnRateDates) GetUnderlyingReturnRateValuationDateBusinessDayConvention() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingReturnRateValuationDateBusinessDayConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUnderlyingReturnRateValuationDateBusinessCenters gets NoUnderlyingReturnRateValuationDateBusinessCenters, Tag 43069.
func (m NoUnderlyingReturnRateDates) GetNoUnderlyingReturnRateValuationDateBusinessCenters() (NoUnderlyingReturnRateValuationDateBusinessCentersRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingReturnRateValuationDateBusinessCentersRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// HasUnderlyingReturnRateDateMode returns true if UnderlyingReturnRateDateMode is present, Tag 43009.
func (m NoUnderlyingReturnRateDates) HasUnderlyingReturnRateDateMode() bool {
	return m.Has(tag.UnderlyingReturnRateDateMode)
}

// HasNoUnderlyingReturnRateValuationDates returns true if NoUnderlyingReturnRateValuationDates is present, Tag 43071.
func (m NoUnderlyingReturnRateDates) HasNoUnderlyingReturnRateValuationDates() bool {
	return m.Has(tag.NoUnderlyingReturnRateValuationDates)
}

// HasUnderlyingReturnRateValuationDateRelativeTo returns true if UnderlyingReturnRateValuationDateRelativeTo is present, Tag 43010.
func (m NoUnderlyingReturnRateDates) HasUnderlyingReturnRateValuationDateRelativeTo() bool {
	return m.Has(tag.UnderlyingReturnRateValuationDateRelativeTo)
}

// HasUnderlyingReturnRateValuationDateOffsetPeriod returns true if UnderlyingReturnRateValuationDateOffsetPeriod is present, Tag 43011.
func (m NoUnderlyingReturnRateDates) HasUnderlyingReturnRateValuationDateOffsetPeriod() bool {
	return m.Has(tag.UnderlyingReturnRateValuationDateOffsetPeriod)
}

// HasUnderlyingReturnRateValuationDateOffsetUnit returns true if UnderlyingReturnRateValuationDateOffsetUnit is present, Tag 43012.
func (m NoUnderlyingReturnRateDates) HasUnderlyingReturnRateValuationDateOffsetUnit() bool {
	return m.Has(tag.UnderlyingReturnRateValuationDateOffsetUnit)
}

// HasUnderlyingReturnRateValuationDateOffsetDayType returns true if UnderlyingReturnRateValuationDateOffsetDayType is present, Tag 43013.
func (m NoUnderlyingReturnRateDates) HasUnderlyingReturnRateValuationDateOffsetDayType() bool {
	return m.Has(tag.UnderlyingReturnRateValuationDateOffsetDayType)
}

// HasUnderlyingReturnRateValuationStartDateUnadjusted returns true if UnderlyingReturnRateValuationStartDateUnadjusted is present, Tag 43014.
func (m NoUnderlyingReturnRateDates) HasUnderlyingReturnRateValuationStartDateUnadjusted() bool {
	return m.Has(tag.UnderlyingReturnRateValuationStartDateUnadjusted)
}

// HasUnderlyingReturnRateValuationStartDateRelativeTo returns true if UnderlyingReturnRateValuationStartDateRelativeTo is present, Tag 43015.
func (m NoUnderlyingReturnRateDates) HasUnderlyingReturnRateValuationStartDateRelativeTo() bool {
	return m.Has(tag.UnderlyingReturnRateValuationStartDateRelativeTo)
}

// HasUnderlyingReturnRateValuationStartDateOffsetPeriod returns true if UnderlyingReturnRateValuationStartDateOffsetPeriod is present, Tag 43016.
func (m NoUnderlyingReturnRateDates) HasUnderlyingReturnRateValuationStartDateOffsetPeriod() bool {
	return m.Has(tag.UnderlyingReturnRateValuationStartDateOffsetPeriod)
}

// HasUnderlyingReturnRateValuationStartDateOffsetUnit returns true if UnderlyingReturnRateValuationStartDateOffsetUnit is present, Tag 43017.
func (m NoUnderlyingReturnRateDates) HasUnderlyingReturnRateValuationStartDateOffsetUnit() bool {
	return m.Has(tag.UnderlyingReturnRateValuationStartDateOffsetUnit)
}

// HasUnderlyingReturnRateValuationStartDateOffsetDayType returns true if UnderlyingReturnRateValuationStartDateOffsetDayType is present, Tag 43018.
func (m NoUnderlyingReturnRateDates) HasUnderlyingReturnRateValuationStartDateOffsetDayType() bool {
	return m.Has(tag.UnderlyingReturnRateValuationStartDateOffsetDayType)
}

// HasUnderlyingReturnRateValuationStartDateAdjusted returns true if UnderlyingReturnRateValuationStartDateAdjusted is present, Tag 43019.
func (m NoUnderlyingReturnRateDates) HasUnderlyingReturnRateValuationStartDateAdjusted() bool {
	return m.Has(tag.UnderlyingReturnRateValuationStartDateAdjusted)
}

// HasUnderlyingReturnRateValuationEndDateUnadjusted returns true if UnderlyingReturnRateValuationEndDateUnadjusted is present, Tag 43020.
func (m NoUnderlyingReturnRateDates) HasUnderlyingReturnRateValuationEndDateUnadjusted() bool {
	return m.Has(tag.UnderlyingReturnRateValuationEndDateUnadjusted)
}

// HasUnderlyingReturnRateValuationEndDateRelativeTo returns true if UnderlyingReturnRateValuationEndDateRelativeTo is present, Tag 43021.
func (m NoUnderlyingReturnRateDates) HasUnderlyingReturnRateValuationEndDateRelativeTo() bool {
	return m.Has(tag.UnderlyingReturnRateValuationEndDateRelativeTo)
}

// HasUnderlyingReturnRateValuationEndDateOffsetPeriod returns true if UnderlyingReturnRateValuationEndDateOffsetPeriod is present, Tag 43022.
func (m NoUnderlyingReturnRateDates) HasUnderlyingReturnRateValuationEndDateOffsetPeriod() bool {
	return m.Has(tag.UnderlyingReturnRateValuationEndDateOffsetPeriod)
}

// HasUnderlyingReturnRateValuationEndDateOffsetUnit returns true if UnderlyingReturnRateValuationEndDateOffsetUnit is present, Tag 43023.
func (m NoUnderlyingReturnRateDates) HasUnderlyingReturnRateValuationEndDateOffsetUnit() bool {
	return m.Has(tag.UnderlyingReturnRateValuationEndDateOffsetUnit)
}

// HasUnderlyingReturnRateValuationEndDateOffsetDayType returns true if UnderlyingReturnRateValuationEndDateOffsetDayType is present, Tag 43024.
func (m NoUnderlyingReturnRateDates) HasUnderlyingReturnRateValuationEndDateOffsetDayType() bool {
	return m.Has(tag.UnderlyingReturnRateValuationEndDateOffsetDayType)
}

// HasUnderlyingReturnRateValuationEndDateAdjusted returns true if UnderlyingReturnRateValuationEndDateAdjusted is present, Tag 43025.
func (m NoUnderlyingReturnRateDates) HasUnderlyingReturnRateValuationEndDateAdjusted() bool {
	return m.Has(tag.UnderlyingReturnRateValuationEndDateAdjusted)
}

// HasUnderlyingReturnRateValuationFrequencyPeriod returns true if UnderlyingReturnRateValuationFrequencyPeriod is present, Tag 43026.
func (m NoUnderlyingReturnRateDates) HasUnderlyingReturnRateValuationFrequencyPeriod() bool {
	return m.Has(tag.UnderlyingReturnRateValuationFrequencyPeriod)
}

// HasUnderlyingReturnRateValuationFrequencyUnit returns true if UnderlyingReturnRateValuationFrequencyUnit is present, Tag 43027.
func (m NoUnderlyingReturnRateDates) HasUnderlyingReturnRateValuationFrequencyUnit() bool {
	return m.Has(tag.UnderlyingReturnRateValuationFrequencyUnit)
}

// HasUnderlyingReturnRateValuationFrequencyRollConvention returns true if UnderlyingReturnRateValuationFrequencyRollConvention is present, Tag 43028.
func (m NoUnderlyingReturnRateDates) HasUnderlyingReturnRateValuationFrequencyRollConvention() bool {
	return m.Has(tag.UnderlyingReturnRateValuationFrequencyRollConvention)
}

// HasUnderlyingReturnRateValuationDateBusinessDayConvention returns true if UnderlyingReturnRateValuationDateBusinessDayConvention is present, Tag 43029.
func (m NoUnderlyingReturnRateDates) HasUnderlyingReturnRateValuationDateBusinessDayConvention() bool {
	return m.Has(tag.UnderlyingReturnRateValuationDateBusinessDayConvention)
}

// HasNoUnderlyingReturnRateValuationDateBusinessCenters returns true if NoUnderlyingReturnRateValuationDateBusinessCenters is present, Tag 43069.
func (m NoUnderlyingReturnRateDates) HasNoUnderlyingReturnRateValuationDateBusinessCenters() bool {
	return m.Has(tag.NoUnderlyingReturnRateValuationDateBusinessCenters)
}

// NoUnderlyingReturnRateValuationDates is a repeating group element, Tag 43071.
type NoUnderlyingReturnRateValuationDates struct {
	*quickfix.Group
}

// SetUnderlyingReturnRateValuationDate sets UnderlyingReturnRateValuationDate, Tag 43072.
func (m NoUnderlyingReturnRateValuationDates) SetUnderlyingReturnRateValuationDate(v string) {
	m.Set(field.NewUnderlyingReturnRateValuationDate(v))
}

// SetUnderlyingReturnRateValuationDateType sets UnderlyingReturnRateValuationDateType, Tag 43073.
func (m NoUnderlyingReturnRateValuationDates) SetUnderlyingReturnRateValuationDateType(v int) {
	m.Set(field.NewUnderlyingReturnRateValuationDateType(v))
}

// GetUnderlyingReturnRateValuationDate gets UnderlyingReturnRateValuationDate, Tag 43072.
func (m NoUnderlyingReturnRateValuationDates) GetUnderlyingReturnRateValuationDate() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingReturnRateValuationDateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingReturnRateValuationDateType gets UnderlyingReturnRateValuationDateType, Tag 43073.
func (m NoUnderlyingReturnRateValuationDates) GetUnderlyingReturnRateValuationDateType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingReturnRateValuationDateTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingReturnRateValuationDate returns true if UnderlyingReturnRateValuationDate is present, Tag 43072.
func (m NoUnderlyingReturnRateValuationDates) HasUnderlyingReturnRateValuationDate() bool {
	return m.Has(tag.UnderlyingReturnRateValuationDate)
}

// HasUnderlyingReturnRateValuationDateType returns true if UnderlyingReturnRateValuationDateType is present, Tag 43073.
func (m NoUnderlyingReturnRateValuationDates) HasUnderlyingReturnRateValuationDateType() bool {
	return m.Has(tag.UnderlyingReturnRateValuationDateType)
}

// NoUnderlyingReturnRateValuationDatesRepeatingGroup is a repeating group, Tag 43071.
type NoUnderlyingReturnRateValuationDatesRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingReturnRateValuationDatesRepeatingGroup returns an initialized, NoUnderlyingReturnRateValuationDatesRepeatingGroup.
func NewNoUnderlyingReturnRateValuationDatesRepeatingGroup() NoUnderlyingReturnRateValuationDatesRepeatingGroup {
	return NoUnderlyingReturnRateValuationDatesRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingReturnRateValuationDates,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingReturnRateValuationDate),
				quickfix.GroupElement(tag.UnderlyingReturnRateValuationDateType),
			},
		),
	}
}

// Add create and append a new NoUnderlyingReturnRateValuationDates to this group.
func (m NoUnderlyingReturnRateValuationDatesRepeatingGroup) Add() NoUnderlyingReturnRateValuationDates {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingReturnRateValuationDates{g}
}

// Get returns the ith NoUnderlyingReturnRateValuationDates in the NoUnderlyingReturnRateValuationDatesRepeatinGroup.
func (m NoUnderlyingReturnRateValuationDatesRepeatingGroup) Get(i int) NoUnderlyingReturnRateValuationDates {
	return NoUnderlyingReturnRateValuationDates{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingReturnRateValuationDateBusinessCenters is a repeating group element, Tag 43069.
type NoUnderlyingReturnRateValuationDateBusinessCenters struct {
	*quickfix.Group
}

// SetUnderlyingReturnRateValuationDateBusinessCenter sets UnderlyingReturnRateValuationDateBusinessCenter, Tag 43070.
func (m NoUnderlyingReturnRateValuationDateBusinessCenters) SetUnderlyingReturnRateValuationDateBusinessCenter(v string) {
	m.Set(field.NewUnderlyingReturnRateValuationDateBusinessCenter(v))
}

// GetUnderlyingReturnRateValuationDateBusinessCenter gets UnderlyingReturnRateValuationDateBusinessCenter, Tag 43070.
func (m NoUnderlyingReturnRateValuationDateBusinessCenters) GetUnderlyingReturnRateValuationDateBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingReturnRateValuationDateBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingReturnRateValuationDateBusinessCenter returns true if UnderlyingReturnRateValuationDateBusinessCenter is present, Tag 43070.
func (m NoUnderlyingReturnRateValuationDateBusinessCenters) HasUnderlyingReturnRateValuationDateBusinessCenter() bool {
	return m.Has(tag.UnderlyingReturnRateValuationDateBusinessCenter)
}

// NoUnderlyingReturnRateValuationDateBusinessCentersRepeatingGroup is a repeating group, Tag 43069.
type NoUnderlyingReturnRateValuationDateBusinessCentersRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingReturnRateValuationDateBusinessCentersRepeatingGroup returns an initialized, NoUnderlyingReturnRateValuationDateBusinessCentersRepeatingGroup.
func NewNoUnderlyingReturnRateValuationDateBusinessCentersRepeatingGroup() NoUnderlyingReturnRateValuationDateBusinessCentersRepeatingGroup {
	return NoUnderlyingReturnRateValuationDateBusinessCentersRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingReturnRateValuationDateBusinessCenters,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingReturnRateValuationDateBusinessCenter),
			},
		),
	}
}

// Add create and append a new NoUnderlyingReturnRateValuationDateBusinessCenters to this group.
func (m NoUnderlyingReturnRateValuationDateBusinessCentersRepeatingGroup) Add() NoUnderlyingReturnRateValuationDateBusinessCenters {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingReturnRateValuationDateBusinessCenters{g}
}

// Get returns the ith NoUnderlyingReturnRateValuationDateBusinessCenters in the NoUnderlyingReturnRateValuationDateBusinessCentersRepeatinGroup.
func (m NoUnderlyingReturnRateValuationDateBusinessCentersRepeatingGroup) Get(i int) NoUnderlyingReturnRateValuationDateBusinessCenters {
	return NoUnderlyingReturnRateValuationDateBusinessCenters{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingReturnRateDatesRepeatingGroup is a repeating group, Tag 43008.
type NoUnderlyingReturnRateDatesRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingReturnRateDatesRepeatingGroup returns an initialized, NoUnderlyingReturnRateDatesRepeatingGroup.
func NewNoUnderlyingReturnRateDatesRepeatingGroup() NoUnderlyingReturnRateDatesRepeatingGroup {
	return NoUnderlyingReturnRateDatesRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingReturnRateDates,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingReturnRateDateMode),
				NewNoUnderlyingReturnRateValuationDatesRepeatingGroup(),
				quickfix.GroupElement(tag.UnderlyingReturnRateValuationDateRelativeTo),
				quickfix.GroupElement(tag.UnderlyingReturnRateValuationDateOffsetPeriod),
				quickfix.GroupElement(tag.UnderlyingReturnRateValuationDateOffsetUnit),
				quickfix.GroupElement(tag.UnderlyingReturnRateValuationDateOffsetDayType),
				quickfix.GroupElement(tag.UnderlyingReturnRateValuationStartDateUnadjusted),
				quickfix.GroupElement(tag.UnderlyingReturnRateValuationStartDateRelativeTo),
				quickfix.GroupElement(tag.UnderlyingReturnRateValuationStartDateOffsetPeriod),
				quickfix.GroupElement(tag.UnderlyingReturnRateValuationStartDateOffsetUnit),
				quickfix.GroupElement(tag.UnderlyingReturnRateValuationStartDateOffsetDayType),
				quickfix.GroupElement(tag.UnderlyingReturnRateValuationStartDateAdjusted),
				quickfix.GroupElement(tag.UnderlyingReturnRateValuationEndDateUnadjusted),
				quickfix.GroupElement(tag.UnderlyingReturnRateValuationEndDateRelativeTo),
				quickfix.GroupElement(tag.UnderlyingReturnRateValuationEndDateOffsetPeriod),
				quickfix.GroupElement(tag.UnderlyingReturnRateValuationEndDateOffsetUnit),
				quickfix.GroupElement(tag.UnderlyingReturnRateValuationEndDateOffsetDayType),
				quickfix.GroupElement(tag.UnderlyingReturnRateValuationEndDateAdjusted),
				quickfix.GroupElement(tag.UnderlyingReturnRateValuationFrequencyPeriod),
				quickfix.GroupElement(tag.UnderlyingReturnRateValuationFrequencyUnit),
				quickfix.GroupElement(tag.UnderlyingReturnRateValuationFrequencyRollConvention),
				quickfix.GroupElement(tag.UnderlyingReturnRateValuationDateBusinessDayConvention),
				NewNoUnderlyingReturnRateValuationDateBusinessCentersRepeatingGroup(),
			},
		),
	}
}

// Add create and append a new NoUnderlyingReturnRateDates to this group.
func (m NoUnderlyingReturnRateDatesRepeatingGroup) Add() NoUnderlyingReturnRateDates {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingReturnRateDates{g}
}

// Get returns the ith NoUnderlyingReturnRateDates in the NoUnderlyingReturnRateDatesRepeatinGroup.
func (m NoUnderlyingReturnRateDatesRepeatingGroup) Get(i int) NoUnderlyingReturnRateDates {
	return NoUnderlyingReturnRateDates{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingReturnRatesRepeatingGroup is a repeating group, Tag 43034.
type NoUnderlyingReturnRatesRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingReturnRatesRepeatingGroup returns an initialized, NoUnderlyingReturnRatesRepeatingGroup.
func NewNoUnderlyingReturnRatesRepeatingGroup() NoUnderlyingReturnRatesRepeatingGroup {
	return NoUnderlyingReturnRatesRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingReturnRates,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingReturnRatePriceSequence),
				quickfix.GroupElement(tag.UnderlyingReturnRateCommissionBasis),
				quickfix.GroupElement(tag.UnderlyingReturnRateCommissionAmount),
				quickfix.GroupElement(tag.UnderlyingReturnRateCommissionCurrency),
				quickfix.GroupElement(tag.UnderlyingReturnRateTotalCommissionPerTrade),
				quickfix.GroupElement(tag.UnderlyingReturnRateDeterminationMethod),
				NewNoUnderlyingReturnRatePricesRepeatingGroup(),
				NewNoUnderlyingReturnRateFXConversionsRepeatingGroup(),
				quickfix.GroupElement(tag.UnderlyingReturnRateAmountRelativeTo),
				quickfix.GroupElement(tag.UnderlyingReturnRateQuoteMeasureType),
				quickfix.GroupElement(tag.UnderlyingReturnRateQuoteUnits),
				quickfix.GroupElement(tag.UnderlyingReturnRateQuoteMethod),
				quickfix.GroupElement(tag.UnderlyingReturnRateQuoteCurrency),
				quickfix.GroupElement(tag.UnderlyingReturnRateQuoteCurrencyType),
				quickfix.GroupElement(tag.UnderlyingReturnRateQuoteTimeType),
				quickfix.GroupElement(tag.UnderlyingReturnRateQuoteTime),
				quickfix.GroupElement(tag.UnderlyingReturnRateQuoteDate),
				quickfix.GroupElement(tag.UnderlyingReturnRateQuoteExpirationTime),
				quickfix.GroupElement(tag.UnderlyingReturnRateQuoteBusinessCenter),
				quickfix.GroupElement(tag.UnderlyingReturnRateQuoteExchange),
				NewNoUnderlyingReturnRateInformationSourcesRepeatingGroup(),
				quickfix.GroupElement(tag.UnderlyingReturnRateQuotePricingModel),
				quickfix.GroupElement(tag.UnderlyingReturnRateCashFlowType),
				NewNoUnderlyingReturnRateDatesRepeatingGroup(),
				quickfix.GroupElement(tag.UnderlyingReturnRateValuationTimeType),
				quickfix.GroupElement(tag.UnderlyingReturnRateValuationTime),
				quickfix.GroupElement(tag.UnderlyingReturnRateValuationTimeBusinessCenter),
				quickfix.GroupElement(tag.UnderlyingReturnRateValuationPriceOption),
				quickfix.GroupElement(tag.UnderlyingReturnRateFinalPriceFallback),
			},
		),
	}
}

// Add create and append a new NoUnderlyingReturnRates to this group.
func (m NoUnderlyingReturnRatesRepeatingGroup) Add() NoUnderlyingReturnRates {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingReturnRates{g}
}

// Get returns the ith NoUnderlyingReturnRates in the NoUnderlyingReturnRatesRepeatinGroup.
func (m NoUnderlyingReturnRatesRepeatingGroup) Get(i int) NoUnderlyingReturnRates {
	return NoUnderlyingReturnRates{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingPaymentStreamNonDeliverableFixingDatesBusinessCenters is a repeating group element, Tag 40968.
type NoUnderlyingPaymentStreamNonDeliverableFixingDatesBusinessCenters struct {
	*quickfix.Group
}

// SetUnderlyingPaymentStreamNonDeliverableFixingDatesBusinessCenter sets UnderlyingPaymentStreamNonDeliverableFixingDatesBusinessCenter, Tag 40650.
func (m NoUnderlyingPaymentStreamNonDeliverableFixingDatesBusinessCenters) SetUnderlyingPaymentStreamNonDeliverableFixingDatesBusinessCenter(v string) {
	m.Set(field.NewUnderlyingPaymentStreamNonDeliverableFixingDatesBusinessCenter(v))
}

// GetUnderlyingPaymentStreamNonDeliverableFixingDatesBusinessCenter gets UnderlyingPaymentStreamNonDeliverableFixingDatesBusinessCenter, Tag 40650.
func (m NoUnderlyingPaymentStreamNonDeliverableFixingDatesBusinessCenters) GetUnderlyingPaymentStreamNonDeliverableFixingDatesBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamNonDeliverableFixingDatesBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingPaymentStreamNonDeliverableFixingDatesBusinessCenter returns true if UnderlyingPaymentStreamNonDeliverableFixingDatesBusinessCenter is present, Tag 40650.
func (m NoUnderlyingPaymentStreamNonDeliverableFixingDatesBusinessCenters) HasUnderlyingPaymentStreamNonDeliverableFixingDatesBusinessCenter() bool {
	return m.Has(tag.UnderlyingPaymentStreamNonDeliverableFixingDatesBusinessCenter)
}

// NoUnderlyingPaymentStreamNonDeliverableFixingDatesBusinessCentersRepeatingGroup is a repeating group, Tag 40968.
type NoUnderlyingPaymentStreamNonDeliverableFixingDatesBusinessCentersRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingPaymentStreamNonDeliverableFixingDatesBusinessCentersRepeatingGroup returns an initialized, NoUnderlyingPaymentStreamNonDeliverableFixingDatesBusinessCentersRepeatingGroup.
func NewNoUnderlyingPaymentStreamNonDeliverableFixingDatesBusinessCentersRepeatingGroup() NoUnderlyingPaymentStreamNonDeliverableFixingDatesBusinessCentersRepeatingGroup {
	return NoUnderlyingPaymentStreamNonDeliverableFixingDatesBusinessCentersRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingPaymentStreamNonDeliverableFixingDatesBusinessCenters,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingPaymentStreamNonDeliverableFixingDatesBusinessCenter),
			},
		),
	}
}

// Add create and append a new NoUnderlyingPaymentStreamNonDeliverableFixingDatesBusinessCenters to this group.
func (m NoUnderlyingPaymentStreamNonDeliverableFixingDatesBusinessCentersRepeatingGroup) Add() NoUnderlyingPaymentStreamNonDeliverableFixingDatesBusinessCenters {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingPaymentStreamNonDeliverableFixingDatesBusinessCenters{g}
}

// Get returns the ith NoUnderlyingPaymentStreamNonDeliverableFixingDatesBusinessCenters in the NoUnderlyingPaymentStreamNonDeliverableFixingDatesBusinessCentersRepeatinGroup.
func (m NoUnderlyingPaymentStreamNonDeliverableFixingDatesBusinessCentersRepeatingGroup) Get(i int) NoUnderlyingPaymentStreamNonDeliverableFixingDatesBusinessCenters {
	return NoUnderlyingPaymentStreamNonDeliverableFixingDatesBusinessCenters{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingNonDeliverableFixingDates is a repeating group element, Tag 40656.
type NoUnderlyingNonDeliverableFixingDates struct {
	*quickfix.Group
}

// SetUnderlyingNonDeliverableFixingDate sets UnderlyingNonDeliverableFixingDate, Tag 40657.
func (m NoUnderlyingNonDeliverableFixingDates) SetUnderlyingNonDeliverableFixingDate(v string) {
	m.Set(field.NewUnderlyingNonDeliverableFixingDate(v))
}

// SetUnderlyingNonDeliverableFixingDateType sets UnderlyingNonDeliverableFixingDateType, Tag 40658.
func (m NoUnderlyingNonDeliverableFixingDates) SetUnderlyingNonDeliverableFixingDateType(v int) {
	m.Set(field.NewUnderlyingNonDeliverableFixingDateType(v))
}

// GetUnderlyingNonDeliverableFixingDate gets UnderlyingNonDeliverableFixingDate, Tag 40657.
func (m NoUnderlyingNonDeliverableFixingDates) GetUnderlyingNonDeliverableFixingDate() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingNonDeliverableFixingDateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingNonDeliverableFixingDateType gets UnderlyingNonDeliverableFixingDateType, Tag 40658.
func (m NoUnderlyingNonDeliverableFixingDates) GetUnderlyingNonDeliverableFixingDateType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingNonDeliverableFixingDateTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingNonDeliverableFixingDate returns true if UnderlyingNonDeliverableFixingDate is present, Tag 40657.
func (m NoUnderlyingNonDeliverableFixingDates) HasUnderlyingNonDeliverableFixingDate() bool {
	return m.Has(tag.UnderlyingNonDeliverableFixingDate)
}

// HasUnderlyingNonDeliverableFixingDateType returns true if UnderlyingNonDeliverableFixingDateType is present, Tag 40658.
func (m NoUnderlyingNonDeliverableFixingDates) HasUnderlyingNonDeliverableFixingDateType() bool {
	return m.Has(tag.UnderlyingNonDeliverableFixingDateType)
}

// NoUnderlyingNonDeliverableFixingDatesRepeatingGroup is a repeating group, Tag 40656.
type NoUnderlyingNonDeliverableFixingDatesRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingNonDeliverableFixingDatesRepeatingGroup returns an initialized, NoUnderlyingNonDeliverableFixingDatesRepeatingGroup.
func NewNoUnderlyingNonDeliverableFixingDatesRepeatingGroup() NoUnderlyingNonDeliverableFixingDatesRepeatingGroup {
	return NoUnderlyingNonDeliverableFixingDatesRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingNonDeliverableFixingDates,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingNonDeliverableFixingDate),
				quickfix.GroupElement(tag.UnderlyingNonDeliverableFixingDateType),
			},
		),
	}
}

// Add create and append a new NoUnderlyingNonDeliverableFixingDates to this group.
func (m NoUnderlyingNonDeliverableFixingDatesRepeatingGroup) Add() NoUnderlyingNonDeliverableFixingDates {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingNonDeliverableFixingDates{g}
}

// Get returns the ith NoUnderlyingNonDeliverableFixingDates in the NoUnderlyingNonDeliverableFixingDatesRepeatinGroup.
func (m NoUnderlyingNonDeliverableFixingDatesRepeatingGroup) Get(i int) NoUnderlyingNonDeliverableFixingDates {
	return NoUnderlyingNonDeliverableFixingDates{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingSettlRateFallbacks is a repeating group element, Tag 40659.
type NoUnderlyingSettlRateFallbacks struct {
	*quickfix.Group
}

// SetUnderlyingSettlRatePostponementMaximumDays sets UnderlyingSettlRatePostponementMaximumDays, Tag 40660.
func (m NoUnderlyingSettlRateFallbacks) SetUnderlyingSettlRatePostponementMaximumDays(v int) {
	m.Set(field.NewUnderlyingSettlRatePostponementMaximumDays(v))
}

// SetUnderlyingSettlRateFallbackRateSource sets UnderlyingSettlRateFallbackRateSource, Tag 40904.
func (m NoUnderlyingSettlRateFallbacks) SetUnderlyingSettlRateFallbackRateSource(v int) {
	m.Set(field.NewUnderlyingSettlRateFallbackRateSource(v))
}

// SetUnderlyingSettlRateFallbackReferencePage sets UnderlyingSettlRateFallbackReferencePage, Tag 40915.
func (m NoUnderlyingSettlRateFallbacks) SetUnderlyingSettlRateFallbackReferencePage(v string) {
	m.Set(field.NewUnderlyingSettlRateFallbackReferencePage(v))
}

// SetUnderlyingSettlRatePostponementSurvey sets UnderlyingSettlRatePostponementSurvey, Tag 40662.
func (m NoUnderlyingSettlRateFallbacks) SetUnderlyingSettlRatePostponementSurvey(v bool) {
	m.Set(field.NewUnderlyingSettlRatePostponementSurvey(v))
}

// SetUnderlyingSettlRatePostponementCalculationAgent sets UnderlyingSettlRatePostponementCalculationAgent, Tag 40663.
func (m NoUnderlyingSettlRateFallbacks) SetUnderlyingSettlRatePostponementCalculationAgent(v int) {
	m.Set(field.NewUnderlyingSettlRatePostponementCalculationAgent(v))
}

// GetUnderlyingSettlRatePostponementMaximumDays gets UnderlyingSettlRatePostponementMaximumDays, Tag 40660.
func (m NoUnderlyingSettlRateFallbacks) GetUnderlyingSettlRatePostponementMaximumDays() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingSettlRatePostponementMaximumDaysField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingSettlRateFallbackRateSource gets UnderlyingSettlRateFallbackRateSource, Tag 40904.
func (m NoUnderlyingSettlRateFallbacks) GetUnderlyingSettlRateFallbackRateSource() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingSettlRateFallbackRateSourceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingSettlRateFallbackReferencePage gets UnderlyingSettlRateFallbackReferencePage, Tag 40915.
func (m NoUnderlyingSettlRateFallbacks) GetUnderlyingSettlRateFallbackReferencePage() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingSettlRateFallbackReferencePageField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingSettlRatePostponementSurvey gets UnderlyingSettlRatePostponementSurvey, Tag 40662.
func (m NoUnderlyingSettlRateFallbacks) GetUnderlyingSettlRatePostponementSurvey() (v bool, err quickfix.MessageRejectError) {
	var f field.UnderlyingSettlRatePostponementSurveyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingSettlRatePostponementCalculationAgent gets UnderlyingSettlRatePostponementCalculationAgent, Tag 40663.
func (m NoUnderlyingSettlRateFallbacks) GetUnderlyingSettlRatePostponementCalculationAgent() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingSettlRatePostponementCalculationAgentField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingSettlRatePostponementMaximumDays returns true if UnderlyingSettlRatePostponementMaximumDays is present, Tag 40660.
func (m NoUnderlyingSettlRateFallbacks) HasUnderlyingSettlRatePostponementMaximumDays() bool {
	return m.Has(tag.UnderlyingSettlRatePostponementMaximumDays)
}

// HasUnderlyingSettlRateFallbackRateSource returns true if UnderlyingSettlRateFallbackRateSource is present, Tag 40904.
func (m NoUnderlyingSettlRateFallbacks) HasUnderlyingSettlRateFallbackRateSource() bool {
	return m.Has(tag.UnderlyingSettlRateFallbackRateSource)
}

// HasUnderlyingSettlRateFallbackReferencePage returns true if UnderlyingSettlRateFallbackReferencePage is present, Tag 40915.
func (m NoUnderlyingSettlRateFallbacks) HasUnderlyingSettlRateFallbackReferencePage() bool {
	return m.Has(tag.UnderlyingSettlRateFallbackReferencePage)
}

// HasUnderlyingSettlRatePostponementSurvey returns true if UnderlyingSettlRatePostponementSurvey is present, Tag 40662.
func (m NoUnderlyingSettlRateFallbacks) HasUnderlyingSettlRatePostponementSurvey() bool {
	return m.Has(tag.UnderlyingSettlRatePostponementSurvey)
}

// HasUnderlyingSettlRatePostponementCalculationAgent returns true if UnderlyingSettlRatePostponementCalculationAgent is present, Tag 40663.
func (m NoUnderlyingSettlRateFallbacks) HasUnderlyingSettlRatePostponementCalculationAgent() bool {
	return m.Has(tag.UnderlyingSettlRatePostponementCalculationAgent)
}

// NoUnderlyingSettlRateFallbacksRepeatingGroup is a repeating group, Tag 40659.
type NoUnderlyingSettlRateFallbacksRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingSettlRateFallbacksRepeatingGroup returns an initialized, NoUnderlyingSettlRateFallbacksRepeatingGroup.
func NewNoUnderlyingSettlRateFallbacksRepeatingGroup() NoUnderlyingSettlRateFallbacksRepeatingGroup {
	return NoUnderlyingSettlRateFallbacksRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingSettlRateFallbacks,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingSettlRatePostponementMaximumDays),
				quickfix.GroupElement(tag.UnderlyingSettlRateFallbackRateSource),
				quickfix.GroupElement(tag.UnderlyingSettlRateFallbackReferencePage),
				quickfix.GroupElement(tag.UnderlyingSettlRatePostponementSurvey),
				quickfix.GroupElement(tag.UnderlyingSettlRatePostponementCalculationAgent),
			},
		),
	}
}

// Add create and append a new NoUnderlyingSettlRateFallbacks to this group.
func (m NoUnderlyingSettlRateFallbacksRepeatingGroup) Add() NoUnderlyingSettlRateFallbacks {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingSettlRateFallbacks{g}
}

// Get returns the ith NoUnderlyingSettlRateFallbacks in the NoUnderlyingSettlRateFallbacksRepeatinGroup.
func (m NoUnderlyingSettlRateFallbacksRepeatingGroup) Get(i int) NoUnderlyingSettlRateFallbacks {
	return NoUnderlyingSettlRateFallbacks{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingPaymentStreamCompoundingDatesBusinessCenters is a repeating group element, Tag 42915.
type NoUnderlyingPaymentStreamCompoundingDatesBusinessCenters struct {
	*quickfix.Group
}

// SetUnderlyingPaymentStreamCompoundingDatesBusinessCenter sets UnderlyingPaymentStreamCompoundingDatesBusinessCenter, Tag 42916.
func (m NoUnderlyingPaymentStreamCompoundingDatesBusinessCenters) SetUnderlyingPaymentStreamCompoundingDatesBusinessCenter(v string) {
	m.Set(field.NewUnderlyingPaymentStreamCompoundingDatesBusinessCenter(v))
}

// GetUnderlyingPaymentStreamCompoundingDatesBusinessCenter gets UnderlyingPaymentStreamCompoundingDatesBusinessCenter, Tag 42916.
func (m NoUnderlyingPaymentStreamCompoundingDatesBusinessCenters) GetUnderlyingPaymentStreamCompoundingDatesBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamCompoundingDatesBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingPaymentStreamCompoundingDatesBusinessCenter returns true if UnderlyingPaymentStreamCompoundingDatesBusinessCenter is present, Tag 42916.
func (m NoUnderlyingPaymentStreamCompoundingDatesBusinessCenters) HasUnderlyingPaymentStreamCompoundingDatesBusinessCenter() bool {
	return m.Has(tag.UnderlyingPaymentStreamCompoundingDatesBusinessCenter)
}

// NoUnderlyingPaymentStreamCompoundingDatesBusinessCentersRepeatingGroup is a repeating group, Tag 42915.
type NoUnderlyingPaymentStreamCompoundingDatesBusinessCentersRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingPaymentStreamCompoundingDatesBusinessCentersRepeatingGroup returns an initialized, NoUnderlyingPaymentStreamCompoundingDatesBusinessCentersRepeatingGroup.
func NewNoUnderlyingPaymentStreamCompoundingDatesBusinessCentersRepeatingGroup() NoUnderlyingPaymentStreamCompoundingDatesBusinessCentersRepeatingGroup {
	return NoUnderlyingPaymentStreamCompoundingDatesBusinessCentersRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingPaymentStreamCompoundingDatesBusinessCenters,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingPaymentStreamCompoundingDatesBusinessCenter),
			},
		),
	}
}

// Add create and append a new NoUnderlyingPaymentStreamCompoundingDatesBusinessCenters to this group.
func (m NoUnderlyingPaymentStreamCompoundingDatesBusinessCentersRepeatingGroup) Add() NoUnderlyingPaymentStreamCompoundingDatesBusinessCenters {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingPaymentStreamCompoundingDatesBusinessCenters{g}
}

// Get returns the ith NoUnderlyingPaymentStreamCompoundingDatesBusinessCenters in the NoUnderlyingPaymentStreamCompoundingDatesBusinessCentersRepeatinGroup.
func (m NoUnderlyingPaymentStreamCompoundingDatesBusinessCentersRepeatingGroup) Get(i int) NoUnderlyingPaymentStreamCompoundingDatesBusinessCenters {
	return NoUnderlyingPaymentStreamCompoundingDatesBusinessCenters{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingPaymentStreamCompoundingDates is a repeating group element, Tag 42901.
type NoUnderlyingPaymentStreamCompoundingDates struct {
	*quickfix.Group
}

// SetUnderlyingPaymentStreamCompoundingDate sets UnderlyingPaymentStreamCompoundingDate, Tag 42902.
func (m NoUnderlyingPaymentStreamCompoundingDates) SetUnderlyingPaymentStreamCompoundingDate(v string) {
	m.Set(field.NewUnderlyingPaymentStreamCompoundingDate(v))
}

// SetUnderlyingPaymentStreamCompoundingDateType sets UnderlyingPaymentStreamCompoundingDateType, Tag 42903.
func (m NoUnderlyingPaymentStreamCompoundingDates) SetUnderlyingPaymentStreamCompoundingDateType(v int) {
	m.Set(field.NewUnderlyingPaymentStreamCompoundingDateType(v))
}

// GetUnderlyingPaymentStreamCompoundingDate gets UnderlyingPaymentStreamCompoundingDate, Tag 42902.
func (m NoUnderlyingPaymentStreamCompoundingDates) GetUnderlyingPaymentStreamCompoundingDate() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamCompoundingDateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStreamCompoundingDateType gets UnderlyingPaymentStreamCompoundingDateType, Tag 42903.
func (m NoUnderlyingPaymentStreamCompoundingDates) GetUnderlyingPaymentStreamCompoundingDateType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStreamCompoundingDateTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingPaymentStreamCompoundingDate returns true if UnderlyingPaymentStreamCompoundingDate is present, Tag 42902.
func (m NoUnderlyingPaymentStreamCompoundingDates) HasUnderlyingPaymentStreamCompoundingDate() bool {
	return m.Has(tag.UnderlyingPaymentStreamCompoundingDate)
}

// HasUnderlyingPaymentStreamCompoundingDateType returns true if UnderlyingPaymentStreamCompoundingDateType is present, Tag 42903.
func (m NoUnderlyingPaymentStreamCompoundingDates) HasUnderlyingPaymentStreamCompoundingDateType() bool {
	return m.Has(tag.UnderlyingPaymentStreamCompoundingDateType)
}

// NoUnderlyingPaymentStreamCompoundingDatesRepeatingGroup is a repeating group, Tag 42901.
type NoUnderlyingPaymentStreamCompoundingDatesRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingPaymentStreamCompoundingDatesRepeatingGroup returns an initialized, NoUnderlyingPaymentStreamCompoundingDatesRepeatingGroup.
func NewNoUnderlyingPaymentStreamCompoundingDatesRepeatingGroup() NoUnderlyingPaymentStreamCompoundingDatesRepeatingGroup {
	return NoUnderlyingPaymentStreamCompoundingDatesRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingPaymentStreamCompoundingDates,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingPaymentStreamCompoundingDate),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamCompoundingDateType),
			},
		),
	}
}

// Add create and append a new NoUnderlyingPaymentStreamCompoundingDates to this group.
func (m NoUnderlyingPaymentStreamCompoundingDatesRepeatingGroup) Add() NoUnderlyingPaymentStreamCompoundingDates {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingPaymentStreamCompoundingDates{g}
}

// Get returns the ith NoUnderlyingPaymentStreamCompoundingDates in the NoUnderlyingPaymentStreamCompoundingDatesRepeatinGroup.
func (m NoUnderlyingPaymentStreamCompoundingDatesRepeatingGroup) Get(i int) NoUnderlyingPaymentStreamCompoundingDates {
	return NoUnderlyingPaymentStreamCompoundingDates{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingPaymentSchedules is a repeating group element, Tag 40664.
type NoUnderlyingPaymentSchedules struct {
	*quickfix.Group
}

// SetUnderlyingPaymentScheduleType sets UnderlyingPaymentScheduleType, Tag 40665.
func (m NoUnderlyingPaymentSchedules) SetUnderlyingPaymentScheduleType(v int) {
	m.Set(field.NewUnderlyingPaymentScheduleType(v))
}

// SetUnderlyingPaymentScheduleStubType sets UnderlyingPaymentScheduleStubType, Tag 40666.
func (m NoUnderlyingPaymentSchedules) SetUnderlyingPaymentScheduleStubType(v int) {
	m.Set(field.NewUnderlyingPaymentScheduleStubType(v))
}

// SetUnderlyingPaymentScheduleStartDateUnadjusted sets UnderlyingPaymentScheduleStartDateUnadjusted, Tag 40667.
func (m NoUnderlyingPaymentSchedules) SetUnderlyingPaymentScheduleStartDateUnadjusted(v string) {
	m.Set(field.NewUnderlyingPaymentScheduleStartDateUnadjusted(v))
}

// SetUnderlyingPaymentScheduleEndDateUnadjusted sets UnderlyingPaymentScheduleEndDateUnadjusted, Tag 40668.
func (m NoUnderlyingPaymentSchedules) SetUnderlyingPaymentScheduleEndDateUnadjusted(v string) {
	m.Set(field.NewUnderlyingPaymentScheduleEndDateUnadjusted(v))
}

// SetUnderlyingPaymentSchedulePaySide sets UnderlyingPaymentSchedulePaySide, Tag 40669.
func (m NoUnderlyingPaymentSchedules) SetUnderlyingPaymentSchedulePaySide(v int) {
	m.Set(field.NewUnderlyingPaymentSchedulePaySide(v))
}

// SetUnderlyingPaymentScheduleReceiveSide sets UnderlyingPaymentScheduleReceiveSide, Tag 40670.
func (m NoUnderlyingPaymentSchedules) SetUnderlyingPaymentScheduleReceiveSide(v int) {
	m.Set(field.NewUnderlyingPaymentScheduleReceiveSide(v))
}

// SetUnderlyingPaymentScheduleNotional sets UnderlyingPaymentScheduleNotional, Tag 40671.
func (m NoUnderlyingPaymentSchedules) SetUnderlyingPaymentScheduleNotional(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingPaymentScheduleNotional(value, scale))
}

// SetUnderlyingPaymentScheduleCurrency sets UnderlyingPaymentScheduleCurrency, Tag 40672.
func (m NoUnderlyingPaymentSchedules) SetUnderlyingPaymentScheduleCurrency(v string) {
	m.Set(field.NewUnderlyingPaymentScheduleCurrency(v))
}

// SetUnderlyingPaymentScheduleRate sets UnderlyingPaymentScheduleRate, Tag 40673.
func (m NoUnderlyingPaymentSchedules) SetUnderlyingPaymentScheduleRate(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingPaymentScheduleRate(value, scale))
}

// SetUnderlyingPaymentScheduleRateMultiplier sets UnderlyingPaymentScheduleRateMultiplier, Tag 40674.
func (m NoUnderlyingPaymentSchedules) SetUnderlyingPaymentScheduleRateMultiplier(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingPaymentScheduleRateMultiplier(value, scale))
}

// SetUnderlyingPaymentScheduleRateSpread sets UnderlyingPaymentScheduleRateSpread, Tag 40675.
func (m NoUnderlyingPaymentSchedules) SetUnderlyingPaymentScheduleRateSpread(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingPaymentScheduleRateSpread(value, scale))
}

// SetUnderlyingPaymentScheduleRateSpreadPositionType sets UnderlyingPaymentScheduleRateSpreadPositionType, Tag 40676.
func (m NoUnderlyingPaymentSchedules) SetUnderlyingPaymentScheduleRateSpreadPositionType(v int) {
	m.Set(field.NewUnderlyingPaymentScheduleRateSpreadPositionType(v))
}

// SetUnderlyingPaymentScheduleFixedAmount sets UnderlyingPaymentScheduleFixedAmount, Tag 40678.
func (m NoUnderlyingPaymentSchedules) SetUnderlyingPaymentScheduleFixedAmount(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingPaymentScheduleFixedAmount(value, scale))
}

// SetUnderlyingPaymentScheduleFixedCurrency sets UnderlyingPaymentScheduleFixedCurrency, Tag 40679.
func (m NoUnderlyingPaymentSchedules) SetUnderlyingPaymentScheduleFixedCurrency(v string) {
	m.Set(field.NewUnderlyingPaymentScheduleFixedCurrency(v))
}

// SetUnderlyingPaymentScheduleStepFrequencyPeriod sets UnderlyingPaymentScheduleStepFrequencyPeriod, Tag 40680.
func (m NoUnderlyingPaymentSchedules) SetUnderlyingPaymentScheduleStepFrequencyPeriod(v int) {
	m.Set(field.NewUnderlyingPaymentScheduleStepFrequencyPeriod(v))
}

// SetUnderlyingPaymentScheduleStepFrequencyUnit sets UnderlyingPaymentScheduleStepFrequencyUnit, Tag 40681.
func (m NoUnderlyingPaymentSchedules) SetUnderlyingPaymentScheduleStepFrequencyUnit(v string) {
	m.Set(field.NewUnderlyingPaymentScheduleStepFrequencyUnit(v))
}

// SetUnderlyingPaymentScheduleStepOffsetValue sets UnderlyingPaymentScheduleStepOffsetValue, Tag 40682.
func (m NoUnderlyingPaymentSchedules) SetUnderlyingPaymentScheduleStepOffsetValue(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingPaymentScheduleStepOffsetValue(value, scale))
}

// SetUnderlyingPaymentScheduleStepRate sets UnderlyingPaymentScheduleStepRate, Tag 40683.
func (m NoUnderlyingPaymentSchedules) SetUnderlyingPaymentScheduleStepRate(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingPaymentScheduleStepRate(value, scale))
}

// SetUnderlyingPaymentScheduleStepOffsetRate sets UnderlyingPaymentScheduleStepOffsetRate, Tag 40684.
func (m NoUnderlyingPaymentSchedules) SetUnderlyingPaymentScheduleStepOffsetRate(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingPaymentScheduleStepOffsetRate(value, scale))
}

// SetUnderlyingPaymentScheduleStepRelativeTo sets UnderlyingPaymentScheduleStepRelativeTo, Tag 40685.
func (m NoUnderlyingPaymentSchedules) SetUnderlyingPaymentScheduleStepRelativeTo(v int) {
	m.Set(field.NewUnderlyingPaymentScheduleStepRelativeTo(v))
}

// SetNoUnderlyingPaymentScheduleRateSources sets NoUnderlyingPaymentScheduleRateSources, Tag 40704.
func (m NoUnderlyingPaymentSchedules) SetNoUnderlyingPaymentScheduleRateSources(f NoUnderlyingPaymentScheduleRateSourcesRepeatingGroup) {
	m.SetGroup(f)
}

// SetUnderlyingPaymentScheduleFixingDateUnadjusted sets UnderlyingPaymentScheduleFixingDateUnadjusted, Tag 40686.
func (m NoUnderlyingPaymentSchedules) SetUnderlyingPaymentScheduleFixingDateUnadjusted(v string) {
	m.Set(field.NewUnderlyingPaymentScheduleFixingDateUnadjusted(v))
}

// SetUnderlyingPaymentScheduleWeight sets UnderlyingPaymentScheduleWeight, Tag 40687.
func (m NoUnderlyingPaymentSchedules) SetUnderlyingPaymentScheduleWeight(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingPaymentScheduleWeight(value, scale))
}

// SetUnderlyingPaymentScheduleFixingDateRelativeTo sets UnderlyingPaymentScheduleFixingDateRelativeTo, Tag 40688.
func (m NoUnderlyingPaymentSchedules) SetUnderlyingPaymentScheduleFixingDateRelativeTo(v int) {
	m.Set(field.NewUnderlyingPaymentScheduleFixingDateRelativeTo(v))
}

// SetUnderlyingPaymentScheduleFixingDateBusinessDayCnvtn sets UnderlyingPaymentScheduleFixingDateBusinessDayCnvtn, Tag 40689.
func (m NoUnderlyingPaymentSchedules) SetUnderlyingPaymentScheduleFixingDateBusinessDayCnvtn(v int) {
	m.Set(field.NewUnderlyingPaymentScheduleFixingDateBusinessDayCnvtn(v))
}

// SetNoUnderlyingPaymentScheduleFixingDateBusinessCenters sets NoUnderlyingPaymentScheduleFixingDateBusinessCenters, Tag 40966.
func (m NoUnderlyingPaymentSchedules) SetNoUnderlyingPaymentScheduleFixingDateBusinessCenters(f NoUnderlyingPaymentScheduleFixingDateBusinessCentersRepeatingGroup) {
	m.SetGroup(f)
}

// SetUnderlyingPaymentScheduleFixingDateOffsetPeriod sets UnderlyingPaymentScheduleFixingDateOffsetPeriod, Tag 40691.
func (m NoUnderlyingPaymentSchedules) SetUnderlyingPaymentScheduleFixingDateOffsetPeriod(v int) {
	m.Set(field.NewUnderlyingPaymentScheduleFixingDateOffsetPeriod(v))
}

// SetUnderlyingPaymentScheduleFixingDateOffsetUnit sets UnderlyingPaymentScheduleFixingDateOffsetUnit, Tag 40692.
func (m NoUnderlyingPaymentSchedules) SetUnderlyingPaymentScheduleFixingDateOffsetUnit(v string) {
	m.Set(field.NewUnderlyingPaymentScheduleFixingDateOffsetUnit(v))
}

// SetUnderlyingPaymentScheduleFixingDateOffsetDayType sets UnderlyingPaymentScheduleFixingDateOffsetDayType, Tag 40693.
func (m NoUnderlyingPaymentSchedules) SetUnderlyingPaymentScheduleFixingDateOffsetDayType(v int) {
	m.Set(field.NewUnderlyingPaymentScheduleFixingDateOffsetDayType(v))
}

// SetUnderlyingPaymentScheduleFixingDateAdjusted sets UnderlyingPaymentScheduleFixingDateAdjusted, Tag 40694.
func (m NoUnderlyingPaymentSchedules) SetUnderlyingPaymentScheduleFixingDateAdjusted(v string) {
	m.Set(field.NewUnderlyingPaymentScheduleFixingDateAdjusted(v))
}

// SetUnderlyingPaymentScheduleFixingTime sets UnderlyingPaymentScheduleFixingTime, Tag 40695.
func (m NoUnderlyingPaymentSchedules) SetUnderlyingPaymentScheduleFixingTime(v string) {
	m.Set(field.NewUnderlyingPaymentScheduleFixingTime(v))
}

// SetUnderlyingPaymentScheduleFixingTimeBusinessCenter sets UnderlyingPaymentScheduleFixingTimeBusinessCenter, Tag 40696.
func (m NoUnderlyingPaymentSchedules) SetUnderlyingPaymentScheduleFixingTimeBusinessCenter(v string) {
	m.Set(field.NewUnderlyingPaymentScheduleFixingTimeBusinessCenter(v))
}

// SetUnderlyingPaymentScheduleInterimExchangePaymentDateRelativeTo sets UnderlyingPaymentScheduleInterimExchangePaymentDateRelativeTo, Tag 40697.
func (m NoUnderlyingPaymentSchedules) SetUnderlyingPaymentScheduleInterimExchangePaymentDateRelativeTo(v int) {
	m.Set(field.NewUnderlyingPaymentScheduleInterimExchangePaymentDateRelativeTo(v))
}

// SetUnderlyingPaymentScheduleInterimExchangeDatesBusinessDayConvention sets UnderlyingPaymentScheduleInterimExchangeDatesBusinessDayConvention, Tag 40698.
func (m NoUnderlyingPaymentSchedules) SetUnderlyingPaymentScheduleInterimExchangeDatesBusinessDayConvention(v int) {
	m.Set(field.NewUnderlyingPaymentScheduleInterimExchangeDatesBusinessDayConvention(v))
}

// SetNoUnderlyingPaymentScheduleInterimExchangeDateBusinessCenters sets NoUnderlyingPaymentScheduleInterimExchangeDateBusinessCenters, Tag 40967.
func (m NoUnderlyingPaymentSchedules) SetNoUnderlyingPaymentScheduleInterimExchangeDateBusinessCenters(f NoUnderlyingPaymentScheduleInterimExchangeDateBusinessCentersRepeatingGroup) {
	m.SetGroup(f)
}

// SetUnderlyingPaymentScheduleInterimExchangeDatesOffsetPeriod sets UnderlyingPaymentScheduleInterimExchangeDatesOffsetPeriod, Tag 40700.
func (m NoUnderlyingPaymentSchedules) SetUnderlyingPaymentScheduleInterimExchangeDatesOffsetPeriod(v int) {
	m.Set(field.NewUnderlyingPaymentScheduleInterimExchangeDatesOffsetPeriod(v))
}

// SetUnderlyingPaymentScheduleInterimExchangeDatesOffsetUnit sets UnderlyingPaymentScheduleInterimExchangeDatesOffsetUnit, Tag 40701.
func (m NoUnderlyingPaymentSchedules) SetUnderlyingPaymentScheduleInterimExchangeDatesOffsetUnit(v string) {
	m.Set(field.NewUnderlyingPaymentScheduleInterimExchangeDatesOffsetUnit(v))
}

// SetUnderlyingPaymentScheduleInterimExchangeDatesOffsetDayType sets UnderlyingPaymentScheduleInterimExchangeDatesOffsetDayType, Tag 40702.
func (m NoUnderlyingPaymentSchedules) SetUnderlyingPaymentScheduleInterimExchangeDatesOffsetDayType(v int) {
	m.Set(field.NewUnderlyingPaymentScheduleInterimExchangeDatesOffsetDayType(v))
}

// SetUnderlyingPaymentScheduleInterimExchangeDateAdjusted sets UnderlyingPaymentScheduleInterimExchangeDateAdjusted, Tag 40703.
func (m NoUnderlyingPaymentSchedules) SetUnderlyingPaymentScheduleInterimExchangeDateAdjusted(v string) {
	m.Set(field.NewUnderlyingPaymentScheduleInterimExchangeDateAdjusted(v))
}

// SetUnderlyingPaymentScheduleXID sets UnderlyingPaymentScheduleXID, Tag 41881.
func (m NoUnderlyingPaymentSchedules) SetUnderlyingPaymentScheduleXID(v string) {
	m.Set(field.NewUnderlyingPaymentScheduleXID(v))
}

// SetUnderlyingPaymentScheduleXIDRef sets UnderlyingPaymentScheduleXIDRef, Tag 41882.
func (m NoUnderlyingPaymentSchedules) SetUnderlyingPaymentScheduleXIDRef(v string) {
	m.Set(field.NewUnderlyingPaymentScheduleXIDRef(v))
}

// SetUnderlyingPaymentScheduleRateCurrency sets UnderlyingPaymentScheduleRateCurrency, Tag 41883.
func (m NoUnderlyingPaymentSchedules) SetUnderlyingPaymentScheduleRateCurrency(v string) {
	m.Set(field.NewUnderlyingPaymentScheduleRateCurrency(v))
}

// SetUnderlyingPaymentScheduleRateUnitOfMeasure sets UnderlyingPaymentScheduleRateUnitOfMeasure, Tag 41884.
func (m NoUnderlyingPaymentSchedules) SetUnderlyingPaymentScheduleRateUnitOfMeasure(v string) {
	m.Set(field.NewUnderlyingPaymentScheduleRateUnitOfMeasure(v))
}

// SetUnderlyingPaymentScheduleRateConversionFactor sets UnderlyingPaymentScheduleRateConversionFactor, Tag 41885.
func (m NoUnderlyingPaymentSchedules) SetUnderlyingPaymentScheduleRateConversionFactor(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingPaymentScheduleRateConversionFactor(value, scale))
}

// SetUnderlyingPaymentScheduleRateSpreadType sets UnderlyingPaymentScheduleRateSpreadType, Tag 41886.
func (m NoUnderlyingPaymentSchedules) SetUnderlyingPaymentScheduleRateSpreadType(v int) {
	m.Set(field.NewUnderlyingPaymentScheduleRateSpreadType(v))
}

// SetUnderlyingPaymentScheduleSettlPeriodPrice sets UnderlyingPaymentScheduleSettlPeriodPrice, Tag 41887.
func (m NoUnderlyingPaymentSchedules) SetUnderlyingPaymentScheduleSettlPeriodPrice(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingPaymentScheduleSettlPeriodPrice(value, scale))
}

// SetUnderlyingPaymentScheduleSettlPeriodPriceCurrency sets UnderlyingPaymentScheduleSettlPeriodPriceCurrency, Tag 41888.
func (m NoUnderlyingPaymentSchedules) SetUnderlyingPaymentScheduleSettlPeriodPriceCurrency(v string) {
	m.Set(field.NewUnderlyingPaymentScheduleSettlPeriodPriceCurrency(v))
}

// SetUnderlyingPaymentScheduleSettlPeriodPriceUnitOfMeasure sets UnderlyingPaymentScheduleSettlPeriodPriceUnitOfMeasure, Tag 41889.
func (m NoUnderlyingPaymentSchedules) SetUnderlyingPaymentScheduleSettlPeriodPriceUnitOfMeasure(v string) {
	m.Set(field.NewUnderlyingPaymentScheduleSettlPeriodPriceUnitOfMeasure(v))
}

// SetUnderlyingPaymentScheduleStepUnitOfMeasure sets UnderlyingPaymentScheduleStepUnitOfMeasure, Tag 41890.
func (m NoUnderlyingPaymentSchedules) SetUnderlyingPaymentScheduleStepUnitOfMeasure(v string) {
	m.Set(field.NewUnderlyingPaymentScheduleStepUnitOfMeasure(v))
}

// SetUnderlyingPaymentScheduleFixingDayDistribution sets UnderlyingPaymentScheduleFixingDayDistribution, Tag 41891.
func (m NoUnderlyingPaymentSchedules) SetUnderlyingPaymentScheduleFixingDayDistribution(v int) {
	m.Set(field.NewUnderlyingPaymentScheduleFixingDayDistribution(v))
}

// SetUnderlyingPaymentScheduleFixingDayCount sets UnderlyingPaymentScheduleFixingDayCount, Tag 41892.
func (m NoUnderlyingPaymentSchedules) SetUnderlyingPaymentScheduleFixingDayCount(v int) {
	m.Set(field.NewUnderlyingPaymentScheduleFixingDayCount(v))
}

// SetNoUnderlyingPaymentScheduleFixingDays sets NoUnderlyingPaymentScheduleFixingDays, Tag 41878.
func (m NoUnderlyingPaymentSchedules) SetNoUnderlyingPaymentScheduleFixingDays(f NoUnderlyingPaymentScheduleFixingDaysRepeatingGroup) {
	m.SetGroup(f)
}

// SetUnderlyingPaymentScheduleFixingLagPeriod sets UnderlyingPaymentScheduleFixingLagPeriod, Tag 41893.
func (m NoUnderlyingPaymentSchedules) SetUnderlyingPaymentScheduleFixingLagPeriod(v int) {
	m.Set(field.NewUnderlyingPaymentScheduleFixingLagPeriod(v))
}

// SetUnderlyingPaymentScheduleFixingLagUnit sets UnderlyingPaymentScheduleFixingLagUnit, Tag 41894.
func (m NoUnderlyingPaymentSchedules) SetUnderlyingPaymentScheduleFixingLagUnit(v string) {
	m.Set(field.NewUnderlyingPaymentScheduleFixingLagUnit(v))
}

// SetUnderlyingPaymentScheduleFixingFirstObservationDateOffsetPeriod sets UnderlyingPaymentScheduleFixingFirstObservationDateOffsetPeriod, Tag 41895.
func (m NoUnderlyingPaymentSchedules) SetUnderlyingPaymentScheduleFixingFirstObservationDateOffsetPeriod(v int) {
	m.Set(field.NewUnderlyingPaymentScheduleFixingFirstObservationDateOffsetPeriod(v))
}

// SetUnderlyingPaymentScheduleFixingFirstObservationDateOffsetUnit sets UnderlyingPaymentScheduleFixingFirstObservationDateOffsetUnit, Tag 41896.
func (m NoUnderlyingPaymentSchedules) SetUnderlyingPaymentScheduleFixingFirstObservationDateOffsetUnit(v string) {
	m.Set(field.NewUnderlyingPaymentScheduleFixingFirstObservationDateOffsetUnit(v))
}

// SetUnderlyingPaymentScheduleRateTreatment sets UnderlyingPaymentScheduleRateTreatment, Tag 40677.
func (m NoUnderlyingPaymentSchedules) SetUnderlyingPaymentScheduleRateTreatment(v int) {
	m.Set(field.NewUnderlyingPaymentScheduleRateTreatment(v))
}

// GetUnderlyingPaymentScheduleType gets UnderlyingPaymentScheduleType, Tag 40665.
func (m NoUnderlyingPaymentSchedules) GetUnderlyingPaymentScheduleType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentScheduleTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentScheduleStubType gets UnderlyingPaymentScheduleStubType, Tag 40666.
func (m NoUnderlyingPaymentSchedules) GetUnderlyingPaymentScheduleStubType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentScheduleStubTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentScheduleStartDateUnadjusted gets UnderlyingPaymentScheduleStartDateUnadjusted, Tag 40667.
func (m NoUnderlyingPaymentSchedules) GetUnderlyingPaymentScheduleStartDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentScheduleStartDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentScheduleEndDateUnadjusted gets UnderlyingPaymentScheduleEndDateUnadjusted, Tag 40668.
func (m NoUnderlyingPaymentSchedules) GetUnderlyingPaymentScheduleEndDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentScheduleEndDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentSchedulePaySide gets UnderlyingPaymentSchedulePaySide, Tag 40669.
func (m NoUnderlyingPaymentSchedules) GetUnderlyingPaymentSchedulePaySide() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentSchedulePaySideField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentScheduleReceiveSide gets UnderlyingPaymentScheduleReceiveSide, Tag 40670.
func (m NoUnderlyingPaymentSchedules) GetUnderlyingPaymentScheduleReceiveSide() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentScheduleReceiveSideField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentScheduleNotional gets UnderlyingPaymentScheduleNotional, Tag 40671.
func (m NoUnderlyingPaymentSchedules) GetUnderlyingPaymentScheduleNotional() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentScheduleNotionalField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentScheduleCurrency gets UnderlyingPaymentScheduleCurrency, Tag 40672.
func (m NoUnderlyingPaymentSchedules) GetUnderlyingPaymentScheduleCurrency() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentScheduleCurrencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentScheduleRate gets UnderlyingPaymentScheduleRate, Tag 40673.
func (m NoUnderlyingPaymentSchedules) GetUnderlyingPaymentScheduleRate() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentScheduleRateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentScheduleRateMultiplier gets UnderlyingPaymentScheduleRateMultiplier, Tag 40674.
func (m NoUnderlyingPaymentSchedules) GetUnderlyingPaymentScheduleRateMultiplier() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentScheduleRateMultiplierField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentScheduleRateSpread gets UnderlyingPaymentScheduleRateSpread, Tag 40675.
func (m NoUnderlyingPaymentSchedules) GetUnderlyingPaymentScheduleRateSpread() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentScheduleRateSpreadField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentScheduleRateSpreadPositionType gets UnderlyingPaymentScheduleRateSpreadPositionType, Tag 40676.
func (m NoUnderlyingPaymentSchedules) GetUnderlyingPaymentScheduleRateSpreadPositionType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentScheduleRateSpreadPositionTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentScheduleFixedAmount gets UnderlyingPaymentScheduleFixedAmount, Tag 40678.
func (m NoUnderlyingPaymentSchedules) GetUnderlyingPaymentScheduleFixedAmount() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentScheduleFixedAmountField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentScheduleFixedCurrency gets UnderlyingPaymentScheduleFixedCurrency, Tag 40679.
func (m NoUnderlyingPaymentSchedules) GetUnderlyingPaymentScheduleFixedCurrency() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentScheduleFixedCurrencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentScheduleStepFrequencyPeriod gets UnderlyingPaymentScheduleStepFrequencyPeriod, Tag 40680.
func (m NoUnderlyingPaymentSchedules) GetUnderlyingPaymentScheduleStepFrequencyPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentScheduleStepFrequencyPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentScheduleStepFrequencyUnit gets UnderlyingPaymentScheduleStepFrequencyUnit, Tag 40681.
func (m NoUnderlyingPaymentSchedules) GetUnderlyingPaymentScheduleStepFrequencyUnit() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentScheduleStepFrequencyUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentScheduleStepOffsetValue gets UnderlyingPaymentScheduleStepOffsetValue, Tag 40682.
func (m NoUnderlyingPaymentSchedules) GetUnderlyingPaymentScheduleStepOffsetValue() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentScheduleStepOffsetValueField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentScheduleStepRate gets UnderlyingPaymentScheduleStepRate, Tag 40683.
func (m NoUnderlyingPaymentSchedules) GetUnderlyingPaymentScheduleStepRate() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentScheduleStepRateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentScheduleStepOffsetRate gets UnderlyingPaymentScheduleStepOffsetRate, Tag 40684.
func (m NoUnderlyingPaymentSchedules) GetUnderlyingPaymentScheduleStepOffsetRate() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentScheduleStepOffsetRateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentScheduleStepRelativeTo gets UnderlyingPaymentScheduleStepRelativeTo, Tag 40685.
func (m NoUnderlyingPaymentSchedules) GetUnderlyingPaymentScheduleStepRelativeTo() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentScheduleStepRelativeToField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUnderlyingPaymentScheduleRateSources gets NoUnderlyingPaymentScheduleRateSources, Tag 40704.
func (m NoUnderlyingPaymentSchedules) GetNoUnderlyingPaymentScheduleRateSources() (NoUnderlyingPaymentScheduleRateSourcesRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingPaymentScheduleRateSourcesRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetUnderlyingPaymentScheduleFixingDateUnadjusted gets UnderlyingPaymentScheduleFixingDateUnadjusted, Tag 40686.
func (m NoUnderlyingPaymentSchedules) GetUnderlyingPaymentScheduleFixingDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentScheduleFixingDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentScheduleWeight gets UnderlyingPaymentScheduleWeight, Tag 40687.
func (m NoUnderlyingPaymentSchedules) GetUnderlyingPaymentScheduleWeight() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentScheduleWeightField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentScheduleFixingDateRelativeTo gets UnderlyingPaymentScheduleFixingDateRelativeTo, Tag 40688.
func (m NoUnderlyingPaymentSchedules) GetUnderlyingPaymentScheduleFixingDateRelativeTo() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentScheduleFixingDateRelativeToField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentScheduleFixingDateBusinessDayCnvtn gets UnderlyingPaymentScheduleFixingDateBusinessDayCnvtn, Tag 40689.
func (m NoUnderlyingPaymentSchedules) GetUnderlyingPaymentScheduleFixingDateBusinessDayCnvtn() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentScheduleFixingDateBusinessDayCnvtnField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUnderlyingPaymentScheduleFixingDateBusinessCenters gets NoUnderlyingPaymentScheduleFixingDateBusinessCenters, Tag 40966.
func (m NoUnderlyingPaymentSchedules) GetNoUnderlyingPaymentScheduleFixingDateBusinessCenters() (NoUnderlyingPaymentScheduleFixingDateBusinessCentersRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingPaymentScheduleFixingDateBusinessCentersRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetUnderlyingPaymentScheduleFixingDateOffsetPeriod gets UnderlyingPaymentScheduleFixingDateOffsetPeriod, Tag 40691.
func (m NoUnderlyingPaymentSchedules) GetUnderlyingPaymentScheduleFixingDateOffsetPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentScheduleFixingDateOffsetPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentScheduleFixingDateOffsetUnit gets UnderlyingPaymentScheduleFixingDateOffsetUnit, Tag 40692.
func (m NoUnderlyingPaymentSchedules) GetUnderlyingPaymentScheduleFixingDateOffsetUnit() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentScheduleFixingDateOffsetUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentScheduleFixingDateOffsetDayType gets UnderlyingPaymentScheduleFixingDateOffsetDayType, Tag 40693.
func (m NoUnderlyingPaymentSchedules) GetUnderlyingPaymentScheduleFixingDateOffsetDayType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentScheduleFixingDateOffsetDayTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentScheduleFixingDateAdjusted gets UnderlyingPaymentScheduleFixingDateAdjusted, Tag 40694.
func (m NoUnderlyingPaymentSchedules) GetUnderlyingPaymentScheduleFixingDateAdjusted() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentScheduleFixingDateAdjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentScheduleFixingTime gets UnderlyingPaymentScheduleFixingTime, Tag 40695.
func (m NoUnderlyingPaymentSchedules) GetUnderlyingPaymentScheduleFixingTime() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentScheduleFixingTimeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentScheduleFixingTimeBusinessCenter gets UnderlyingPaymentScheduleFixingTimeBusinessCenter, Tag 40696.
func (m NoUnderlyingPaymentSchedules) GetUnderlyingPaymentScheduleFixingTimeBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentScheduleFixingTimeBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentScheduleInterimExchangePaymentDateRelativeTo gets UnderlyingPaymentScheduleInterimExchangePaymentDateRelativeTo, Tag 40697.
func (m NoUnderlyingPaymentSchedules) GetUnderlyingPaymentScheduleInterimExchangePaymentDateRelativeTo() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentScheduleInterimExchangePaymentDateRelativeToField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentScheduleInterimExchangeDatesBusinessDayConvention gets UnderlyingPaymentScheduleInterimExchangeDatesBusinessDayConvention, Tag 40698.
func (m NoUnderlyingPaymentSchedules) GetUnderlyingPaymentScheduleInterimExchangeDatesBusinessDayConvention() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentScheduleInterimExchangeDatesBusinessDayConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUnderlyingPaymentScheduleInterimExchangeDateBusinessCenters gets NoUnderlyingPaymentScheduleInterimExchangeDateBusinessCenters, Tag 40967.
func (m NoUnderlyingPaymentSchedules) GetNoUnderlyingPaymentScheduleInterimExchangeDateBusinessCenters() (NoUnderlyingPaymentScheduleInterimExchangeDateBusinessCentersRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingPaymentScheduleInterimExchangeDateBusinessCentersRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetUnderlyingPaymentScheduleInterimExchangeDatesOffsetPeriod gets UnderlyingPaymentScheduleInterimExchangeDatesOffsetPeriod, Tag 40700.
func (m NoUnderlyingPaymentSchedules) GetUnderlyingPaymentScheduleInterimExchangeDatesOffsetPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentScheduleInterimExchangeDatesOffsetPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentScheduleInterimExchangeDatesOffsetUnit gets UnderlyingPaymentScheduleInterimExchangeDatesOffsetUnit, Tag 40701.
func (m NoUnderlyingPaymentSchedules) GetUnderlyingPaymentScheduleInterimExchangeDatesOffsetUnit() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentScheduleInterimExchangeDatesOffsetUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentScheduleInterimExchangeDatesOffsetDayType gets UnderlyingPaymentScheduleInterimExchangeDatesOffsetDayType, Tag 40702.
func (m NoUnderlyingPaymentSchedules) GetUnderlyingPaymentScheduleInterimExchangeDatesOffsetDayType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentScheduleInterimExchangeDatesOffsetDayTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentScheduleInterimExchangeDateAdjusted gets UnderlyingPaymentScheduleInterimExchangeDateAdjusted, Tag 40703.
func (m NoUnderlyingPaymentSchedules) GetUnderlyingPaymentScheduleInterimExchangeDateAdjusted() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentScheduleInterimExchangeDateAdjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentScheduleXID gets UnderlyingPaymentScheduleXID, Tag 41881.
func (m NoUnderlyingPaymentSchedules) GetUnderlyingPaymentScheduleXID() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentScheduleXIDField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentScheduleXIDRef gets UnderlyingPaymentScheduleXIDRef, Tag 41882.
func (m NoUnderlyingPaymentSchedules) GetUnderlyingPaymentScheduleXIDRef() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentScheduleXIDRefField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentScheduleRateCurrency gets UnderlyingPaymentScheduleRateCurrency, Tag 41883.
func (m NoUnderlyingPaymentSchedules) GetUnderlyingPaymentScheduleRateCurrency() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentScheduleRateCurrencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentScheduleRateUnitOfMeasure gets UnderlyingPaymentScheduleRateUnitOfMeasure, Tag 41884.
func (m NoUnderlyingPaymentSchedules) GetUnderlyingPaymentScheduleRateUnitOfMeasure() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentScheduleRateUnitOfMeasureField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentScheduleRateConversionFactor gets UnderlyingPaymentScheduleRateConversionFactor, Tag 41885.
func (m NoUnderlyingPaymentSchedules) GetUnderlyingPaymentScheduleRateConversionFactor() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentScheduleRateConversionFactorField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentScheduleRateSpreadType gets UnderlyingPaymentScheduleRateSpreadType, Tag 41886.
func (m NoUnderlyingPaymentSchedules) GetUnderlyingPaymentScheduleRateSpreadType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentScheduleRateSpreadTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentScheduleSettlPeriodPrice gets UnderlyingPaymentScheduleSettlPeriodPrice, Tag 41887.
func (m NoUnderlyingPaymentSchedules) GetUnderlyingPaymentScheduleSettlPeriodPrice() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentScheduleSettlPeriodPriceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentScheduleSettlPeriodPriceCurrency gets UnderlyingPaymentScheduleSettlPeriodPriceCurrency, Tag 41888.
func (m NoUnderlyingPaymentSchedules) GetUnderlyingPaymentScheduleSettlPeriodPriceCurrency() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentScheduleSettlPeriodPriceCurrencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentScheduleSettlPeriodPriceUnitOfMeasure gets UnderlyingPaymentScheduleSettlPeriodPriceUnitOfMeasure, Tag 41889.
func (m NoUnderlyingPaymentSchedules) GetUnderlyingPaymentScheduleSettlPeriodPriceUnitOfMeasure() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentScheduleSettlPeriodPriceUnitOfMeasureField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentScheduleStepUnitOfMeasure gets UnderlyingPaymentScheduleStepUnitOfMeasure, Tag 41890.
func (m NoUnderlyingPaymentSchedules) GetUnderlyingPaymentScheduleStepUnitOfMeasure() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentScheduleStepUnitOfMeasureField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentScheduleFixingDayDistribution gets UnderlyingPaymentScheduleFixingDayDistribution, Tag 41891.
func (m NoUnderlyingPaymentSchedules) GetUnderlyingPaymentScheduleFixingDayDistribution() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentScheduleFixingDayDistributionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentScheduleFixingDayCount gets UnderlyingPaymentScheduleFixingDayCount, Tag 41892.
func (m NoUnderlyingPaymentSchedules) GetUnderlyingPaymentScheduleFixingDayCount() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentScheduleFixingDayCountField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUnderlyingPaymentScheduleFixingDays gets NoUnderlyingPaymentScheduleFixingDays, Tag 41878.
func (m NoUnderlyingPaymentSchedules) GetNoUnderlyingPaymentScheduleFixingDays() (NoUnderlyingPaymentScheduleFixingDaysRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingPaymentScheduleFixingDaysRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetUnderlyingPaymentScheduleFixingLagPeriod gets UnderlyingPaymentScheduleFixingLagPeriod, Tag 41893.
func (m NoUnderlyingPaymentSchedules) GetUnderlyingPaymentScheduleFixingLagPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentScheduleFixingLagPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentScheduleFixingLagUnit gets UnderlyingPaymentScheduleFixingLagUnit, Tag 41894.
func (m NoUnderlyingPaymentSchedules) GetUnderlyingPaymentScheduleFixingLagUnit() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentScheduleFixingLagUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentScheduleFixingFirstObservationDateOffsetPeriod gets UnderlyingPaymentScheduleFixingFirstObservationDateOffsetPeriod, Tag 41895.
func (m NoUnderlyingPaymentSchedules) GetUnderlyingPaymentScheduleFixingFirstObservationDateOffsetPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentScheduleFixingFirstObservationDateOffsetPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentScheduleFixingFirstObservationDateOffsetUnit gets UnderlyingPaymentScheduleFixingFirstObservationDateOffsetUnit, Tag 41896.
func (m NoUnderlyingPaymentSchedules) GetUnderlyingPaymentScheduleFixingFirstObservationDateOffsetUnit() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentScheduleFixingFirstObservationDateOffsetUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentScheduleRateTreatment gets UnderlyingPaymentScheduleRateTreatment, Tag 40677.
func (m NoUnderlyingPaymentSchedules) GetUnderlyingPaymentScheduleRateTreatment() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentScheduleRateTreatmentField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingPaymentScheduleType returns true if UnderlyingPaymentScheduleType is present, Tag 40665.
func (m NoUnderlyingPaymentSchedules) HasUnderlyingPaymentScheduleType() bool {
	return m.Has(tag.UnderlyingPaymentScheduleType)
}

// HasUnderlyingPaymentScheduleStubType returns true if UnderlyingPaymentScheduleStubType is present, Tag 40666.
func (m NoUnderlyingPaymentSchedules) HasUnderlyingPaymentScheduleStubType() bool {
	return m.Has(tag.UnderlyingPaymentScheduleStubType)
}

// HasUnderlyingPaymentScheduleStartDateUnadjusted returns true if UnderlyingPaymentScheduleStartDateUnadjusted is present, Tag 40667.
func (m NoUnderlyingPaymentSchedules) HasUnderlyingPaymentScheduleStartDateUnadjusted() bool {
	return m.Has(tag.UnderlyingPaymentScheduleStartDateUnadjusted)
}

// HasUnderlyingPaymentScheduleEndDateUnadjusted returns true if UnderlyingPaymentScheduleEndDateUnadjusted is present, Tag 40668.
func (m NoUnderlyingPaymentSchedules) HasUnderlyingPaymentScheduleEndDateUnadjusted() bool {
	return m.Has(tag.UnderlyingPaymentScheduleEndDateUnadjusted)
}

// HasUnderlyingPaymentSchedulePaySide returns true if UnderlyingPaymentSchedulePaySide is present, Tag 40669.
func (m NoUnderlyingPaymentSchedules) HasUnderlyingPaymentSchedulePaySide() bool {
	return m.Has(tag.UnderlyingPaymentSchedulePaySide)
}

// HasUnderlyingPaymentScheduleReceiveSide returns true if UnderlyingPaymentScheduleReceiveSide is present, Tag 40670.
func (m NoUnderlyingPaymentSchedules) HasUnderlyingPaymentScheduleReceiveSide() bool {
	return m.Has(tag.UnderlyingPaymentScheduleReceiveSide)
}

// HasUnderlyingPaymentScheduleNotional returns true if UnderlyingPaymentScheduleNotional is present, Tag 40671.
func (m NoUnderlyingPaymentSchedules) HasUnderlyingPaymentScheduleNotional() bool {
	return m.Has(tag.UnderlyingPaymentScheduleNotional)
}

// HasUnderlyingPaymentScheduleCurrency returns true if UnderlyingPaymentScheduleCurrency is present, Tag 40672.
func (m NoUnderlyingPaymentSchedules) HasUnderlyingPaymentScheduleCurrency() bool {
	return m.Has(tag.UnderlyingPaymentScheduleCurrency)
}

// HasUnderlyingPaymentScheduleRate returns true if UnderlyingPaymentScheduleRate is present, Tag 40673.
func (m NoUnderlyingPaymentSchedules) HasUnderlyingPaymentScheduleRate() bool {
	return m.Has(tag.UnderlyingPaymentScheduleRate)
}

// HasUnderlyingPaymentScheduleRateMultiplier returns true if UnderlyingPaymentScheduleRateMultiplier is present, Tag 40674.
func (m NoUnderlyingPaymentSchedules) HasUnderlyingPaymentScheduleRateMultiplier() bool {
	return m.Has(tag.UnderlyingPaymentScheduleRateMultiplier)
}

// HasUnderlyingPaymentScheduleRateSpread returns true if UnderlyingPaymentScheduleRateSpread is present, Tag 40675.
func (m NoUnderlyingPaymentSchedules) HasUnderlyingPaymentScheduleRateSpread() bool {
	return m.Has(tag.UnderlyingPaymentScheduleRateSpread)
}

// HasUnderlyingPaymentScheduleRateSpreadPositionType returns true if UnderlyingPaymentScheduleRateSpreadPositionType is present, Tag 40676.
func (m NoUnderlyingPaymentSchedules) HasUnderlyingPaymentScheduleRateSpreadPositionType() bool {
	return m.Has(tag.UnderlyingPaymentScheduleRateSpreadPositionType)
}

// HasUnderlyingPaymentScheduleFixedAmount returns true if UnderlyingPaymentScheduleFixedAmount is present, Tag 40678.
func (m NoUnderlyingPaymentSchedules) HasUnderlyingPaymentScheduleFixedAmount() bool {
	return m.Has(tag.UnderlyingPaymentScheduleFixedAmount)
}

// HasUnderlyingPaymentScheduleFixedCurrency returns true if UnderlyingPaymentScheduleFixedCurrency is present, Tag 40679.
func (m NoUnderlyingPaymentSchedules) HasUnderlyingPaymentScheduleFixedCurrency() bool {
	return m.Has(tag.UnderlyingPaymentScheduleFixedCurrency)
}

// HasUnderlyingPaymentScheduleStepFrequencyPeriod returns true if UnderlyingPaymentScheduleStepFrequencyPeriod is present, Tag 40680.
func (m NoUnderlyingPaymentSchedules) HasUnderlyingPaymentScheduleStepFrequencyPeriod() bool {
	return m.Has(tag.UnderlyingPaymentScheduleStepFrequencyPeriod)
}

// HasUnderlyingPaymentScheduleStepFrequencyUnit returns true if UnderlyingPaymentScheduleStepFrequencyUnit is present, Tag 40681.
func (m NoUnderlyingPaymentSchedules) HasUnderlyingPaymentScheduleStepFrequencyUnit() bool {
	return m.Has(tag.UnderlyingPaymentScheduleStepFrequencyUnit)
}

// HasUnderlyingPaymentScheduleStepOffsetValue returns true if UnderlyingPaymentScheduleStepOffsetValue is present, Tag 40682.
func (m NoUnderlyingPaymentSchedules) HasUnderlyingPaymentScheduleStepOffsetValue() bool {
	return m.Has(tag.UnderlyingPaymentScheduleStepOffsetValue)
}

// HasUnderlyingPaymentScheduleStepRate returns true if UnderlyingPaymentScheduleStepRate is present, Tag 40683.
func (m NoUnderlyingPaymentSchedules) HasUnderlyingPaymentScheduleStepRate() bool {
	return m.Has(tag.UnderlyingPaymentScheduleStepRate)
}

// HasUnderlyingPaymentScheduleStepOffsetRate returns true if UnderlyingPaymentScheduleStepOffsetRate is present, Tag 40684.
func (m NoUnderlyingPaymentSchedules) HasUnderlyingPaymentScheduleStepOffsetRate() bool {
	return m.Has(tag.UnderlyingPaymentScheduleStepOffsetRate)
}

// HasUnderlyingPaymentScheduleStepRelativeTo returns true if UnderlyingPaymentScheduleStepRelativeTo is present, Tag 40685.
func (m NoUnderlyingPaymentSchedules) HasUnderlyingPaymentScheduleStepRelativeTo() bool {
	return m.Has(tag.UnderlyingPaymentScheduleStepRelativeTo)
}

// HasNoUnderlyingPaymentScheduleRateSources returns true if NoUnderlyingPaymentScheduleRateSources is present, Tag 40704.
func (m NoUnderlyingPaymentSchedules) HasNoUnderlyingPaymentScheduleRateSources() bool {
	return m.Has(tag.NoUnderlyingPaymentScheduleRateSources)
}

// HasUnderlyingPaymentScheduleFixingDateUnadjusted returns true if UnderlyingPaymentScheduleFixingDateUnadjusted is present, Tag 40686.
func (m NoUnderlyingPaymentSchedules) HasUnderlyingPaymentScheduleFixingDateUnadjusted() bool {
	return m.Has(tag.UnderlyingPaymentScheduleFixingDateUnadjusted)
}

// HasUnderlyingPaymentScheduleWeight returns true if UnderlyingPaymentScheduleWeight is present, Tag 40687.
func (m NoUnderlyingPaymentSchedules) HasUnderlyingPaymentScheduleWeight() bool {
	return m.Has(tag.UnderlyingPaymentScheduleWeight)
}

// HasUnderlyingPaymentScheduleFixingDateRelativeTo returns true if UnderlyingPaymentScheduleFixingDateRelativeTo is present, Tag 40688.
func (m NoUnderlyingPaymentSchedules) HasUnderlyingPaymentScheduleFixingDateRelativeTo() bool {
	return m.Has(tag.UnderlyingPaymentScheduleFixingDateRelativeTo)
}

// HasUnderlyingPaymentScheduleFixingDateBusinessDayCnvtn returns true if UnderlyingPaymentScheduleFixingDateBusinessDayCnvtn is present, Tag 40689.
func (m NoUnderlyingPaymentSchedules) HasUnderlyingPaymentScheduleFixingDateBusinessDayCnvtn() bool {
	return m.Has(tag.UnderlyingPaymentScheduleFixingDateBusinessDayCnvtn)
}

// HasNoUnderlyingPaymentScheduleFixingDateBusinessCenters returns true if NoUnderlyingPaymentScheduleFixingDateBusinessCenters is present, Tag 40966.
func (m NoUnderlyingPaymentSchedules) HasNoUnderlyingPaymentScheduleFixingDateBusinessCenters() bool {
	return m.Has(tag.NoUnderlyingPaymentScheduleFixingDateBusinessCenters)
}

// HasUnderlyingPaymentScheduleFixingDateOffsetPeriod returns true if UnderlyingPaymentScheduleFixingDateOffsetPeriod is present, Tag 40691.
func (m NoUnderlyingPaymentSchedules) HasUnderlyingPaymentScheduleFixingDateOffsetPeriod() bool {
	return m.Has(tag.UnderlyingPaymentScheduleFixingDateOffsetPeriod)
}

// HasUnderlyingPaymentScheduleFixingDateOffsetUnit returns true if UnderlyingPaymentScheduleFixingDateOffsetUnit is present, Tag 40692.
func (m NoUnderlyingPaymentSchedules) HasUnderlyingPaymentScheduleFixingDateOffsetUnit() bool {
	return m.Has(tag.UnderlyingPaymentScheduleFixingDateOffsetUnit)
}

// HasUnderlyingPaymentScheduleFixingDateOffsetDayType returns true if UnderlyingPaymentScheduleFixingDateOffsetDayType is present, Tag 40693.
func (m NoUnderlyingPaymentSchedules) HasUnderlyingPaymentScheduleFixingDateOffsetDayType() bool {
	return m.Has(tag.UnderlyingPaymentScheduleFixingDateOffsetDayType)
}

// HasUnderlyingPaymentScheduleFixingDateAdjusted returns true if UnderlyingPaymentScheduleFixingDateAdjusted is present, Tag 40694.
func (m NoUnderlyingPaymentSchedules) HasUnderlyingPaymentScheduleFixingDateAdjusted() bool {
	return m.Has(tag.UnderlyingPaymentScheduleFixingDateAdjusted)
}

// HasUnderlyingPaymentScheduleFixingTime returns true if UnderlyingPaymentScheduleFixingTime is present, Tag 40695.
func (m NoUnderlyingPaymentSchedules) HasUnderlyingPaymentScheduleFixingTime() bool {
	return m.Has(tag.UnderlyingPaymentScheduleFixingTime)
}

// HasUnderlyingPaymentScheduleFixingTimeBusinessCenter returns true if UnderlyingPaymentScheduleFixingTimeBusinessCenter is present, Tag 40696.
func (m NoUnderlyingPaymentSchedules) HasUnderlyingPaymentScheduleFixingTimeBusinessCenter() bool {
	return m.Has(tag.UnderlyingPaymentScheduleFixingTimeBusinessCenter)
}

// HasUnderlyingPaymentScheduleInterimExchangePaymentDateRelativeTo returns true if UnderlyingPaymentScheduleInterimExchangePaymentDateRelativeTo is present, Tag 40697.
func (m NoUnderlyingPaymentSchedules) HasUnderlyingPaymentScheduleInterimExchangePaymentDateRelativeTo() bool {
	return m.Has(tag.UnderlyingPaymentScheduleInterimExchangePaymentDateRelativeTo)
}

// HasUnderlyingPaymentScheduleInterimExchangeDatesBusinessDayConvention returns true if UnderlyingPaymentScheduleInterimExchangeDatesBusinessDayConvention is present, Tag 40698.
func (m NoUnderlyingPaymentSchedules) HasUnderlyingPaymentScheduleInterimExchangeDatesBusinessDayConvention() bool {
	return m.Has(tag.UnderlyingPaymentScheduleInterimExchangeDatesBusinessDayConvention)
}

// HasNoUnderlyingPaymentScheduleInterimExchangeDateBusinessCenters returns true if NoUnderlyingPaymentScheduleInterimExchangeDateBusinessCenters is present, Tag 40967.
func (m NoUnderlyingPaymentSchedules) HasNoUnderlyingPaymentScheduleInterimExchangeDateBusinessCenters() bool {
	return m.Has(tag.NoUnderlyingPaymentScheduleInterimExchangeDateBusinessCenters)
}

// HasUnderlyingPaymentScheduleInterimExchangeDatesOffsetPeriod returns true if UnderlyingPaymentScheduleInterimExchangeDatesOffsetPeriod is present, Tag 40700.
func (m NoUnderlyingPaymentSchedules) HasUnderlyingPaymentScheduleInterimExchangeDatesOffsetPeriod() bool {
	return m.Has(tag.UnderlyingPaymentScheduleInterimExchangeDatesOffsetPeriod)
}

// HasUnderlyingPaymentScheduleInterimExchangeDatesOffsetUnit returns true if UnderlyingPaymentScheduleInterimExchangeDatesOffsetUnit is present, Tag 40701.
func (m NoUnderlyingPaymentSchedules) HasUnderlyingPaymentScheduleInterimExchangeDatesOffsetUnit() bool {
	return m.Has(tag.UnderlyingPaymentScheduleInterimExchangeDatesOffsetUnit)
}

// HasUnderlyingPaymentScheduleInterimExchangeDatesOffsetDayType returns true if UnderlyingPaymentScheduleInterimExchangeDatesOffsetDayType is present, Tag 40702.
func (m NoUnderlyingPaymentSchedules) HasUnderlyingPaymentScheduleInterimExchangeDatesOffsetDayType() bool {
	return m.Has(tag.UnderlyingPaymentScheduleInterimExchangeDatesOffsetDayType)
}

// HasUnderlyingPaymentScheduleInterimExchangeDateAdjusted returns true if UnderlyingPaymentScheduleInterimExchangeDateAdjusted is present, Tag 40703.
func (m NoUnderlyingPaymentSchedules) HasUnderlyingPaymentScheduleInterimExchangeDateAdjusted() bool {
	return m.Has(tag.UnderlyingPaymentScheduleInterimExchangeDateAdjusted)
}

// HasUnderlyingPaymentScheduleXID returns true if UnderlyingPaymentScheduleXID is present, Tag 41881.
func (m NoUnderlyingPaymentSchedules) HasUnderlyingPaymentScheduleXID() bool {
	return m.Has(tag.UnderlyingPaymentScheduleXID)
}

// HasUnderlyingPaymentScheduleXIDRef returns true if UnderlyingPaymentScheduleXIDRef is present, Tag 41882.
func (m NoUnderlyingPaymentSchedules) HasUnderlyingPaymentScheduleXIDRef() bool {
	return m.Has(tag.UnderlyingPaymentScheduleXIDRef)
}

// HasUnderlyingPaymentScheduleRateCurrency returns true if UnderlyingPaymentScheduleRateCurrency is present, Tag 41883.
func (m NoUnderlyingPaymentSchedules) HasUnderlyingPaymentScheduleRateCurrency() bool {
	return m.Has(tag.UnderlyingPaymentScheduleRateCurrency)
}

// HasUnderlyingPaymentScheduleRateUnitOfMeasure returns true if UnderlyingPaymentScheduleRateUnitOfMeasure is present, Tag 41884.
func (m NoUnderlyingPaymentSchedules) HasUnderlyingPaymentScheduleRateUnitOfMeasure() bool {
	return m.Has(tag.UnderlyingPaymentScheduleRateUnitOfMeasure)
}

// HasUnderlyingPaymentScheduleRateConversionFactor returns true if UnderlyingPaymentScheduleRateConversionFactor is present, Tag 41885.
func (m NoUnderlyingPaymentSchedules) HasUnderlyingPaymentScheduleRateConversionFactor() bool {
	return m.Has(tag.UnderlyingPaymentScheduleRateConversionFactor)
}

// HasUnderlyingPaymentScheduleRateSpreadType returns true if UnderlyingPaymentScheduleRateSpreadType is present, Tag 41886.
func (m NoUnderlyingPaymentSchedules) HasUnderlyingPaymentScheduleRateSpreadType() bool {
	return m.Has(tag.UnderlyingPaymentScheduleRateSpreadType)
}

// HasUnderlyingPaymentScheduleSettlPeriodPrice returns true if UnderlyingPaymentScheduleSettlPeriodPrice is present, Tag 41887.
func (m NoUnderlyingPaymentSchedules) HasUnderlyingPaymentScheduleSettlPeriodPrice() bool {
	return m.Has(tag.UnderlyingPaymentScheduleSettlPeriodPrice)
}

// HasUnderlyingPaymentScheduleSettlPeriodPriceCurrency returns true if UnderlyingPaymentScheduleSettlPeriodPriceCurrency is present, Tag 41888.
func (m NoUnderlyingPaymentSchedules) HasUnderlyingPaymentScheduleSettlPeriodPriceCurrency() bool {
	return m.Has(tag.UnderlyingPaymentScheduleSettlPeriodPriceCurrency)
}

// HasUnderlyingPaymentScheduleSettlPeriodPriceUnitOfMeasure returns true if UnderlyingPaymentScheduleSettlPeriodPriceUnitOfMeasure is present, Tag 41889.
func (m NoUnderlyingPaymentSchedules) HasUnderlyingPaymentScheduleSettlPeriodPriceUnitOfMeasure() bool {
	return m.Has(tag.UnderlyingPaymentScheduleSettlPeriodPriceUnitOfMeasure)
}

// HasUnderlyingPaymentScheduleStepUnitOfMeasure returns true if UnderlyingPaymentScheduleStepUnitOfMeasure is present, Tag 41890.
func (m NoUnderlyingPaymentSchedules) HasUnderlyingPaymentScheduleStepUnitOfMeasure() bool {
	return m.Has(tag.UnderlyingPaymentScheduleStepUnitOfMeasure)
}

// HasUnderlyingPaymentScheduleFixingDayDistribution returns true if UnderlyingPaymentScheduleFixingDayDistribution is present, Tag 41891.
func (m NoUnderlyingPaymentSchedules) HasUnderlyingPaymentScheduleFixingDayDistribution() bool {
	return m.Has(tag.UnderlyingPaymentScheduleFixingDayDistribution)
}

// HasUnderlyingPaymentScheduleFixingDayCount returns true if UnderlyingPaymentScheduleFixingDayCount is present, Tag 41892.
func (m NoUnderlyingPaymentSchedules) HasUnderlyingPaymentScheduleFixingDayCount() bool {
	return m.Has(tag.UnderlyingPaymentScheduleFixingDayCount)
}

// HasNoUnderlyingPaymentScheduleFixingDays returns true if NoUnderlyingPaymentScheduleFixingDays is present, Tag 41878.
func (m NoUnderlyingPaymentSchedules) HasNoUnderlyingPaymentScheduleFixingDays() bool {
	return m.Has(tag.NoUnderlyingPaymentScheduleFixingDays)
}

// HasUnderlyingPaymentScheduleFixingLagPeriod returns true if UnderlyingPaymentScheduleFixingLagPeriod is present, Tag 41893.
func (m NoUnderlyingPaymentSchedules) HasUnderlyingPaymentScheduleFixingLagPeriod() bool {
	return m.Has(tag.UnderlyingPaymentScheduleFixingLagPeriod)
}

// HasUnderlyingPaymentScheduleFixingLagUnit returns true if UnderlyingPaymentScheduleFixingLagUnit is present, Tag 41894.
func (m NoUnderlyingPaymentSchedules) HasUnderlyingPaymentScheduleFixingLagUnit() bool {
	return m.Has(tag.UnderlyingPaymentScheduleFixingLagUnit)
}

// HasUnderlyingPaymentScheduleFixingFirstObservationDateOffsetPeriod returns true if UnderlyingPaymentScheduleFixingFirstObservationDateOffsetPeriod is present, Tag 41895.
func (m NoUnderlyingPaymentSchedules) HasUnderlyingPaymentScheduleFixingFirstObservationDateOffsetPeriod() bool {
	return m.Has(tag.UnderlyingPaymentScheduleFixingFirstObservationDateOffsetPeriod)
}

// HasUnderlyingPaymentScheduleFixingFirstObservationDateOffsetUnit returns true if UnderlyingPaymentScheduleFixingFirstObservationDateOffsetUnit is present, Tag 41896.
func (m NoUnderlyingPaymentSchedules) HasUnderlyingPaymentScheduleFixingFirstObservationDateOffsetUnit() bool {
	return m.Has(tag.UnderlyingPaymentScheduleFixingFirstObservationDateOffsetUnit)
}

// HasUnderlyingPaymentScheduleRateTreatment returns true if UnderlyingPaymentScheduleRateTreatment is present, Tag 40677.
func (m NoUnderlyingPaymentSchedules) HasUnderlyingPaymentScheduleRateTreatment() bool {
	return m.Has(tag.UnderlyingPaymentScheduleRateTreatment)
}

// NoUnderlyingPaymentScheduleRateSources is a repeating group element, Tag 40704.
type NoUnderlyingPaymentScheduleRateSources struct {
	*quickfix.Group
}

// SetUnderlyingPaymentScheduleRateSource sets UnderlyingPaymentScheduleRateSource, Tag 40705.
func (m NoUnderlyingPaymentScheduleRateSources) SetUnderlyingPaymentScheduleRateSource(v int) {
	m.Set(field.NewUnderlyingPaymentScheduleRateSource(v))
}

// SetUnderlyingPaymentScheduleRateSourceType sets UnderlyingPaymentScheduleRateSourceType, Tag 40706.
func (m NoUnderlyingPaymentScheduleRateSources) SetUnderlyingPaymentScheduleRateSourceType(v int) {
	m.Set(field.NewUnderlyingPaymentScheduleRateSourceType(v))
}

// SetUnderlyingPaymentScheduleReferencePage sets UnderlyingPaymentScheduleReferencePage, Tag 40707.
func (m NoUnderlyingPaymentScheduleRateSources) SetUnderlyingPaymentScheduleReferencePage(v string) {
	m.Set(field.NewUnderlyingPaymentScheduleReferencePage(v))
}

// GetUnderlyingPaymentScheduleRateSource gets UnderlyingPaymentScheduleRateSource, Tag 40705.
func (m NoUnderlyingPaymentScheduleRateSources) GetUnderlyingPaymentScheduleRateSource() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentScheduleRateSourceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentScheduleRateSourceType gets UnderlyingPaymentScheduleRateSourceType, Tag 40706.
func (m NoUnderlyingPaymentScheduleRateSources) GetUnderlyingPaymentScheduleRateSourceType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentScheduleRateSourceTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentScheduleReferencePage gets UnderlyingPaymentScheduleReferencePage, Tag 40707.
func (m NoUnderlyingPaymentScheduleRateSources) GetUnderlyingPaymentScheduleReferencePage() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentScheduleReferencePageField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingPaymentScheduleRateSource returns true if UnderlyingPaymentScheduleRateSource is present, Tag 40705.
func (m NoUnderlyingPaymentScheduleRateSources) HasUnderlyingPaymentScheduleRateSource() bool {
	return m.Has(tag.UnderlyingPaymentScheduleRateSource)
}

// HasUnderlyingPaymentScheduleRateSourceType returns true if UnderlyingPaymentScheduleRateSourceType is present, Tag 40706.
func (m NoUnderlyingPaymentScheduleRateSources) HasUnderlyingPaymentScheduleRateSourceType() bool {
	return m.Has(tag.UnderlyingPaymentScheduleRateSourceType)
}

// HasUnderlyingPaymentScheduleReferencePage returns true if UnderlyingPaymentScheduleReferencePage is present, Tag 40707.
func (m NoUnderlyingPaymentScheduleRateSources) HasUnderlyingPaymentScheduleReferencePage() bool {
	return m.Has(tag.UnderlyingPaymentScheduleReferencePage)
}

// NoUnderlyingPaymentScheduleRateSourcesRepeatingGroup is a repeating group, Tag 40704.
type NoUnderlyingPaymentScheduleRateSourcesRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingPaymentScheduleRateSourcesRepeatingGroup returns an initialized, NoUnderlyingPaymentScheduleRateSourcesRepeatingGroup.
func NewNoUnderlyingPaymentScheduleRateSourcesRepeatingGroup() NoUnderlyingPaymentScheduleRateSourcesRepeatingGroup {
	return NoUnderlyingPaymentScheduleRateSourcesRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingPaymentScheduleRateSources,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingPaymentScheduleRateSource),
				quickfix.GroupElement(tag.UnderlyingPaymentScheduleRateSourceType),
				quickfix.GroupElement(tag.UnderlyingPaymentScheduleReferencePage),
			},
		),
	}
}

// Add create and append a new NoUnderlyingPaymentScheduleRateSources to this group.
func (m NoUnderlyingPaymentScheduleRateSourcesRepeatingGroup) Add() NoUnderlyingPaymentScheduleRateSources {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingPaymentScheduleRateSources{g}
}

// Get returns the ith NoUnderlyingPaymentScheduleRateSources in the NoUnderlyingPaymentScheduleRateSourcesRepeatinGroup.
func (m NoUnderlyingPaymentScheduleRateSourcesRepeatingGroup) Get(i int) NoUnderlyingPaymentScheduleRateSources {
	return NoUnderlyingPaymentScheduleRateSources{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingPaymentScheduleFixingDateBusinessCenters is a repeating group element, Tag 40966.
type NoUnderlyingPaymentScheduleFixingDateBusinessCenters struct {
	*quickfix.Group
}

// SetUnderlyingPaymentScheduleFixingDateBusinessCenter sets UnderlyingPaymentScheduleFixingDateBusinessCenter, Tag 40690.
func (m NoUnderlyingPaymentScheduleFixingDateBusinessCenters) SetUnderlyingPaymentScheduleFixingDateBusinessCenter(v string) {
	m.Set(field.NewUnderlyingPaymentScheduleFixingDateBusinessCenter(v))
}

// GetUnderlyingPaymentScheduleFixingDateBusinessCenter gets UnderlyingPaymentScheduleFixingDateBusinessCenter, Tag 40690.
func (m NoUnderlyingPaymentScheduleFixingDateBusinessCenters) GetUnderlyingPaymentScheduleFixingDateBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentScheduleFixingDateBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingPaymentScheduleFixingDateBusinessCenter returns true if UnderlyingPaymentScheduleFixingDateBusinessCenter is present, Tag 40690.
func (m NoUnderlyingPaymentScheduleFixingDateBusinessCenters) HasUnderlyingPaymentScheduleFixingDateBusinessCenter() bool {
	return m.Has(tag.UnderlyingPaymentScheduleFixingDateBusinessCenter)
}

// NoUnderlyingPaymentScheduleFixingDateBusinessCentersRepeatingGroup is a repeating group, Tag 40966.
type NoUnderlyingPaymentScheduleFixingDateBusinessCentersRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingPaymentScheduleFixingDateBusinessCentersRepeatingGroup returns an initialized, NoUnderlyingPaymentScheduleFixingDateBusinessCentersRepeatingGroup.
func NewNoUnderlyingPaymentScheduleFixingDateBusinessCentersRepeatingGroup() NoUnderlyingPaymentScheduleFixingDateBusinessCentersRepeatingGroup {
	return NoUnderlyingPaymentScheduleFixingDateBusinessCentersRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingPaymentScheduleFixingDateBusinessCenters,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingPaymentScheduleFixingDateBusinessCenter),
			},
		),
	}
}

// Add create and append a new NoUnderlyingPaymentScheduleFixingDateBusinessCenters to this group.
func (m NoUnderlyingPaymentScheduleFixingDateBusinessCentersRepeatingGroup) Add() NoUnderlyingPaymentScheduleFixingDateBusinessCenters {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingPaymentScheduleFixingDateBusinessCenters{g}
}

// Get returns the ith NoUnderlyingPaymentScheduleFixingDateBusinessCenters in the NoUnderlyingPaymentScheduleFixingDateBusinessCentersRepeatinGroup.
func (m NoUnderlyingPaymentScheduleFixingDateBusinessCentersRepeatingGroup) Get(i int) NoUnderlyingPaymentScheduleFixingDateBusinessCenters {
	return NoUnderlyingPaymentScheduleFixingDateBusinessCenters{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingPaymentScheduleInterimExchangeDateBusinessCenters is a repeating group element, Tag 40967.
type NoUnderlyingPaymentScheduleInterimExchangeDateBusinessCenters struct {
	*quickfix.Group
}

// SetUnderlyingPaymentScheduleInterimExchangeDatesBusinessCenter sets UnderlyingPaymentScheduleInterimExchangeDatesBusinessCenter, Tag 40699.
func (m NoUnderlyingPaymentScheduleInterimExchangeDateBusinessCenters) SetUnderlyingPaymentScheduleInterimExchangeDatesBusinessCenter(v string) {
	m.Set(field.NewUnderlyingPaymentScheduleInterimExchangeDatesBusinessCenter(v))
}

// GetUnderlyingPaymentScheduleInterimExchangeDatesBusinessCenter gets UnderlyingPaymentScheduleInterimExchangeDatesBusinessCenter, Tag 40699.
func (m NoUnderlyingPaymentScheduleInterimExchangeDateBusinessCenters) GetUnderlyingPaymentScheduleInterimExchangeDatesBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentScheduleInterimExchangeDatesBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingPaymentScheduleInterimExchangeDatesBusinessCenter returns true if UnderlyingPaymentScheduleInterimExchangeDatesBusinessCenter is present, Tag 40699.
func (m NoUnderlyingPaymentScheduleInterimExchangeDateBusinessCenters) HasUnderlyingPaymentScheduleInterimExchangeDatesBusinessCenter() bool {
	return m.Has(tag.UnderlyingPaymentScheduleInterimExchangeDatesBusinessCenter)
}

// NoUnderlyingPaymentScheduleInterimExchangeDateBusinessCentersRepeatingGroup is a repeating group, Tag 40967.
type NoUnderlyingPaymentScheduleInterimExchangeDateBusinessCentersRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingPaymentScheduleInterimExchangeDateBusinessCentersRepeatingGroup returns an initialized, NoUnderlyingPaymentScheduleInterimExchangeDateBusinessCentersRepeatingGroup.
func NewNoUnderlyingPaymentScheduleInterimExchangeDateBusinessCentersRepeatingGroup() NoUnderlyingPaymentScheduleInterimExchangeDateBusinessCentersRepeatingGroup {
	return NoUnderlyingPaymentScheduleInterimExchangeDateBusinessCentersRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingPaymentScheduleInterimExchangeDateBusinessCenters,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingPaymentScheduleInterimExchangeDatesBusinessCenter),
			},
		),
	}
}

// Add create and append a new NoUnderlyingPaymentScheduleInterimExchangeDateBusinessCenters to this group.
func (m NoUnderlyingPaymentScheduleInterimExchangeDateBusinessCentersRepeatingGroup) Add() NoUnderlyingPaymentScheduleInterimExchangeDateBusinessCenters {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingPaymentScheduleInterimExchangeDateBusinessCenters{g}
}

// Get returns the ith NoUnderlyingPaymentScheduleInterimExchangeDateBusinessCenters in the NoUnderlyingPaymentScheduleInterimExchangeDateBusinessCentersRepeatinGroup.
func (m NoUnderlyingPaymentScheduleInterimExchangeDateBusinessCentersRepeatingGroup) Get(i int) NoUnderlyingPaymentScheduleInterimExchangeDateBusinessCenters {
	return NoUnderlyingPaymentScheduleInterimExchangeDateBusinessCenters{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingPaymentScheduleFixingDays is a repeating group element, Tag 41878.
type NoUnderlyingPaymentScheduleFixingDays struct {
	*quickfix.Group
}

// SetUnderlyingPaymentScheduleFixingDayOfWeek sets UnderlyingPaymentScheduleFixingDayOfWeek, Tag 41879.
func (m NoUnderlyingPaymentScheduleFixingDays) SetUnderlyingPaymentScheduleFixingDayOfWeek(v int) {
	m.Set(field.NewUnderlyingPaymentScheduleFixingDayOfWeek(v))
}

// SetUnderlyingPaymentScheduleFixingDayNumber sets UnderlyingPaymentScheduleFixingDayNumber, Tag 41880.
func (m NoUnderlyingPaymentScheduleFixingDays) SetUnderlyingPaymentScheduleFixingDayNumber(v int) {
	m.Set(field.NewUnderlyingPaymentScheduleFixingDayNumber(v))
}

// GetUnderlyingPaymentScheduleFixingDayOfWeek gets UnderlyingPaymentScheduleFixingDayOfWeek, Tag 41879.
func (m NoUnderlyingPaymentScheduleFixingDays) GetUnderlyingPaymentScheduleFixingDayOfWeek() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentScheduleFixingDayOfWeekField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentScheduleFixingDayNumber gets UnderlyingPaymentScheduleFixingDayNumber, Tag 41880.
func (m NoUnderlyingPaymentScheduleFixingDays) GetUnderlyingPaymentScheduleFixingDayNumber() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentScheduleFixingDayNumberField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingPaymentScheduleFixingDayOfWeek returns true if UnderlyingPaymentScheduleFixingDayOfWeek is present, Tag 41879.
func (m NoUnderlyingPaymentScheduleFixingDays) HasUnderlyingPaymentScheduleFixingDayOfWeek() bool {
	return m.Has(tag.UnderlyingPaymentScheduleFixingDayOfWeek)
}

// HasUnderlyingPaymentScheduleFixingDayNumber returns true if UnderlyingPaymentScheduleFixingDayNumber is present, Tag 41880.
func (m NoUnderlyingPaymentScheduleFixingDays) HasUnderlyingPaymentScheduleFixingDayNumber() bool {
	return m.Has(tag.UnderlyingPaymentScheduleFixingDayNumber)
}

// NoUnderlyingPaymentScheduleFixingDaysRepeatingGroup is a repeating group, Tag 41878.
type NoUnderlyingPaymentScheduleFixingDaysRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingPaymentScheduleFixingDaysRepeatingGroup returns an initialized, NoUnderlyingPaymentScheduleFixingDaysRepeatingGroup.
func NewNoUnderlyingPaymentScheduleFixingDaysRepeatingGroup() NoUnderlyingPaymentScheduleFixingDaysRepeatingGroup {
	return NoUnderlyingPaymentScheduleFixingDaysRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingPaymentScheduleFixingDays,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingPaymentScheduleFixingDayOfWeek),
				quickfix.GroupElement(tag.UnderlyingPaymentScheduleFixingDayNumber),
			},
		),
	}
}

// Add create and append a new NoUnderlyingPaymentScheduleFixingDays to this group.
func (m NoUnderlyingPaymentScheduleFixingDaysRepeatingGroup) Add() NoUnderlyingPaymentScheduleFixingDays {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingPaymentScheduleFixingDays{g}
}

// Get returns the ith NoUnderlyingPaymentScheduleFixingDays in the NoUnderlyingPaymentScheduleFixingDaysRepeatinGroup.
func (m NoUnderlyingPaymentScheduleFixingDaysRepeatingGroup) Get(i int) NoUnderlyingPaymentScheduleFixingDays {
	return NoUnderlyingPaymentScheduleFixingDays{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingPaymentSchedulesRepeatingGroup is a repeating group, Tag 40664.
type NoUnderlyingPaymentSchedulesRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingPaymentSchedulesRepeatingGroup returns an initialized, NoUnderlyingPaymentSchedulesRepeatingGroup.
func NewNoUnderlyingPaymentSchedulesRepeatingGroup() NoUnderlyingPaymentSchedulesRepeatingGroup {
	return NoUnderlyingPaymentSchedulesRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingPaymentSchedules,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingPaymentScheduleType),
				quickfix.GroupElement(tag.UnderlyingPaymentScheduleStubType),
				quickfix.GroupElement(tag.UnderlyingPaymentScheduleStartDateUnadjusted),
				quickfix.GroupElement(tag.UnderlyingPaymentScheduleEndDateUnadjusted),
				quickfix.GroupElement(tag.UnderlyingPaymentSchedulePaySide),
				quickfix.GroupElement(tag.UnderlyingPaymentScheduleReceiveSide),
				quickfix.GroupElement(tag.UnderlyingPaymentScheduleNotional),
				quickfix.GroupElement(tag.UnderlyingPaymentScheduleCurrency),
				quickfix.GroupElement(tag.UnderlyingPaymentScheduleRate),
				quickfix.GroupElement(tag.UnderlyingPaymentScheduleRateMultiplier),
				quickfix.GroupElement(tag.UnderlyingPaymentScheduleRateSpread),
				quickfix.GroupElement(tag.UnderlyingPaymentScheduleRateSpreadPositionType),
				quickfix.GroupElement(tag.UnderlyingPaymentScheduleFixedAmount),
				quickfix.GroupElement(tag.UnderlyingPaymentScheduleFixedCurrency),
				quickfix.GroupElement(tag.UnderlyingPaymentScheduleStepFrequencyPeriod),
				quickfix.GroupElement(tag.UnderlyingPaymentScheduleStepFrequencyUnit),
				quickfix.GroupElement(tag.UnderlyingPaymentScheduleStepOffsetValue),
				quickfix.GroupElement(tag.UnderlyingPaymentScheduleStepRate),
				quickfix.GroupElement(tag.UnderlyingPaymentScheduleStepOffsetRate),
				quickfix.GroupElement(tag.UnderlyingPaymentScheduleStepRelativeTo),
				NewNoUnderlyingPaymentScheduleRateSourcesRepeatingGroup(),
				quickfix.GroupElement(tag.UnderlyingPaymentScheduleFixingDateUnadjusted),
				quickfix.GroupElement(tag.UnderlyingPaymentScheduleWeight),
				quickfix.GroupElement(tag.UnderlyingPaymentScheduleFixingDateRelativeTo),
				quickfix.GroupElement(tag.UnderlyingPaymentScheduleFixingDateBusinessDayCnvtn),
				NewNoUnderlyingPaymentScheduleFixingDateBusinessCentersRepeatingGroup(),
				quickfix.GroupElement(tag.UnderlyingPaymentScheduleFixingDateOffsetPeriod),
				quickfix.GroupElement(tag.UnderlyingPaymentScheduleFixingDateOffsetUnit),
				quickfix.GroupElement(tag.UnderlyingPaymentScheduleFixingDateOffsetDayType),
				quickfix.GroupElement(tag.UnderlyingPaymentScheduleFixingDateAdjusted),
				quickfix.GroupElement(tag.UnderlyingPaymentScheduleFixingTime),
				quickfix.GroupElement(tag.UnderlyingPaymentScheduleFixingTimeBusinessCenter),
				quickfix.GroupElement(tag.UnderlyingPaymentScheduleInterimExchangePaymentDateRelativeTo),
				quickfix.GroupElement(tag.UnderlyingPaymentScheduleInterimExchangeDatesBusinessDayConvention),
				NewNoUnderlyingPaymentScheduleInterimExchangeDateBusinessCentersRepeatingGroup(),
				quickfix.GroupElement(tag.UnderlyingPaymentScheduleInterimExchangeDatesOffsetPeriod),
				quickfix.GroupElement(tag.UnderlyingPaymentScheduleInterimExchangeDatesOffsetUnit),
				quickfix.GroupElement(tag.UnderlyingPaymentScheduleInterimExchangeDatesOffsetDayType),
				quickfix.GroupElement(tag.UnderlyingPaymentScheduleInterimExchangeDateAdjusted),
				quickfix.GroupElement(tag.UnderlyingPaymentScheduleXID),
				quickfix.GroupElement(tag.UnderlyingPaymentScheduleXIDRef),
				quickfix.GroupElement(tag.UnderlyingPaymentScheduleRateCurrency),
				quickfix.GroupElement(tag.UnderlyingPaymentScheduleRateUnitOfMeasure),
				quickfix.GroupElement(tag.UnderlyingPaymentScheduleRateConversionFactor),
				quickfix.GroupElement(tag.UnderlyingPaymentScheduleRateSpreadType),
				quickfix.GroupElement(tag.UnderlyingPaymentScheduleSettlPeriodPrice),
				quickfix.GroupElement(tag.UnderlyingPaymentScheduleSettlPeriodPriceCurrency),
				quickfix.GroupElement(tag.UnderlyingPaymentScheduleSettlPeriodPriceUnitOfMeasure),
				quickfix.GroupElement(tag.UnderlyingPaymentScheduleStepUnitOfMeasure),
				quickfix.GroupElement(tag.UnderlyingPaymentScheduleFixingDayDistribution),
				quickfix.GroupElement(tag.UnderlyingPaymentScheduleFixingDayCount),
				NewNoUnderlyingPaymentScheduleFixingDaysRepeatingGroup(),
				quickfix.GroupElement(tag.UnderlyingPaymentScheduleFixingLagPeriod),
				quickfix.GroupElement(tag.UnderlyingPaymentScheduleFixingLagUnit),
				quickfix.GroupElement(tag.UnderlyingPaymentScheduleFixingFirstObservationDateOffsetPeriod),
				quickfix.GroupElement(tag.UnderlyingPaymentScheduleFixingFirstObservationDateOffsetUnit),
				quickfix.GroupElement(tag.UnderlyingPaymentScheduleRateTreatment),
			},
		),
	}
}

// Add create and append a new NoUnderlyingPaymentSchedules to this group.
func (m NoUnderlyingPaymentSchedulesRepeatingGroup) Add() NoUnderlyingPaymentSchedules {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingPaymentSchedules{g}
}

// Get returns the ith NoUnderlyingPaymentSchedules in the NoUnderlyingPaymentSchedulesRepeatinGroup.
func (m NoUnderlyingPaymentSchedulesRepeatingGroup) Get(i int) NoUnderlyingPaymentSchedules {
	return NoUnderlyingPaymentSchedules{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingPaymentStubs is a repeating group element, Tag 40708.
type NoUnderlyingPaymentStubs struct {
	*quickfix.Group
}

// SetUnderlyingPaymentStubType sets UnderlyingPaymentStubType, Tag 40709.
func (m NoUnderlyingPaymentStubs) SetUnderlyingPaymentStubType(v int) {
	m.Set(field.NewUnderlyingPaymentStubType(v))
}

// SetUnderlyingPaymentStubLength sets UnderlyingPaymentStubLength, Tag 40710.
func (m NoUnderlyingPaymentStubs) SetUnderlyingPaymentStubLength(v int) {
	m.Set(field.NewUnderlyingPaymentStubLength(v))
}

// SetUnderlyingPaymentStubRate sets UnderlyingPaymentStubRate, Tag 40711.
func (m NoUnderlyingPaymentStubs) SetUnderlyingPaymentStubRate(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingPaymentStubRate(value, scale))
}

// SetUnderlyingPaymentStubFixedAmount sets UnderlyingPaymentStubFixedAmount, Tag 40712.
func (m NoUnderlyingPaymentStubs) SetUnderlyingPaymentStubFixedAmount(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingPaymentStubFixedAmount(value, scale))
}

// SetUnderlyingPaymentStubFixedCurrency sets UnderlyingPaymentStubFixedCurrency, Tag 40713.
func (m NoUnderlyingPaymentStubs) SetUnderlyingPaymentStubFixedCurrency(v string) {
	m.Set(field.NewUnderlyingPaymentStubFixedCurrency(v))
}

// SetUnderlyingPaymentStubIndex sets UnderlyingPaymentStubIndex, Tag 40714.
func (m NoUnderlyingPaymentStubs) SetUnderlyingPaymentStubIndex(v string) {
	m.Set(field.NewUnderlyingPaymentStubIndex(v))
}

// SetUnderlyingPaymentStubIndexSource sets UnderlyingPaymentStubIndexSource, Tag 40715.
func (m NoUnderlyingPaymentStubs) SetUnderlyingPaymentStubIndexSource(v int) {
	m.Set(field.NewUnderlyingPaymentStubIndexSource(v))
}

// SetUnderlyingPaymentStubIndexCurvePeriod sets UnderlyingPaymentStubIndexCurvePeriod, Tag 40716.
func (m NoUnderlyingPaymentStubs) SetUnderlyingPaymentStubIndexCurvePeriod(v int) {
	m.Set(field.NewUnderlyingPaymentStubIndexCurvePeriod(v))
}

// SetUnderlyingPaymentStubIndexCurveUnit sets UnderlyingPaymentStubIndexCurveUnit, Tag 40717.
func (m NoUnderlyingPaymentStubs) SetUnderlyingPaymentStubIndexCurveUnit(v string) {
	m.Set(field.NewUnderlyingPaymentStubIndexCurveUnit(v))
}

// SetUnderlyingPaymentStubIndexRateMultiplier sets UnderlyingPaymentStubIndexRateMultiplier, Tag 40718.
func (m NoUnderlyingPaymentStubs) SetUnderlyingPaymentStubIndexRateMultiplier(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingPaymentStubIndexRateMultiplier(value, scale))
}

// SetUnderlyingPaymentStubIndexRateSpread sets UnderlyingPaymentStubIndexRateSpread, Tag 40719.
func (m NoUnderlyingPaymentStubs) SetUnderlyingPaymentStubIndexRateSpread(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingPaymentStubIndexRateSpread(value, scale))
}

// SetUnderlyingPaymentStubIndexRateSpreadPositionType sets UnderlyingPaymentStubIndexRateSpreadPositionType, Tag 40720.
func (m NoUnderlyingPaymentStubs) SetUnderlyingPaymentStubIndexRateSpreadPositionType(v int) {
	m.Set(field.NewUnderlyingPaymentStubIndexRateSpreadPositionType(v))
}

// SetUnderlyingPaymentStubIndexRateTreatment sets UnderlyingPaymentStubIndexRateTreatment, Tag 40721.
func (m NoUnderlyingPaymentStubs) SetUnderlyingPaymentStubIndexRateTreatment(v int) {
	m.Set(field.NewUnderlyingPaymentStubIndexRateTreatment(v))
}

// SetUnderlyingPaymentStubIndexCapRate sets UnderlyingPaymentStubIndexCapRate, Tag 40722.
func (m NoUnderlyingPaymentStubs) SetUnderlyingPaymentStubIndexCapRate(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingPaymentStubIndexCapRate(value, scale))
}

// SetUnderlyingPaymentStubIndexCapRateBuySide sets UnderlyingPaymentStubIndexCapRateBuySide, Tag 40723.
func (m NoUnderlyingPaymentStubs) SetUnderlyingPaymentStubIndexCapRateBuySide(v int) {
	m.Set(field.NewUnderlyingPaymentStubIndexCapRateBuySide(v))
}

// SetUnderlyingPaymentStubIndexCapRateSellSide sets UnderlyingPaymentStubIndexCapRateSellSide, Tag 40724.
func (m NoUnderlyingPaymentStubs) SetUnderlyingPaymentStubIndexCapRateSellSide(v int) {
	m.Set(field.NewUnderlyingPaymentStubIndexCapRateSellSide(v))
}

// SetUnderlyingPaymentStubIndexFloorRate sets UnderlyingPaymentStubIndexFloorRate, Tag 40725.
func (m NoUnderlyingPaymentStubs) SetUnderlyingPaymentStubIndexFloorRate(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingPaymentStubIndexFloorRate(value, scale))
}

// SetUnderlyingPaymentStubIndexFloorRateBuySide sets UnderlyingPaymentStubIndexFloorRateBuySide, Tag 40726.
func (m NoUnderlyingPaymentStubs) SetUnderlyingPaymentStubIndexFloorRateBuySide(v int) {
	m.Set(field.NewUnderlyingPaymentStubIndexFloorRateBuySide(v))
}

// SetUnderlyingPaymentStubIndexFloorRateSellSide sets UnderlyingPaymentStubIndexFloorRateSellSide, Tag 40727.
func (m NoUnderlyingPaymentStubs) SetUnderlyingPaymentStubIndexFloorRateSellSide(v int) {
	m.Set(field.NewUnderlyingPaymentStubIndexFloorRateSellSide(v))
}

// SetUnderlyingPaymentStubIndex2 sets UnderlyingPaymentStubIndex2, Tag 40728.
func (m NoUnderlyingPaymentStubs) SetUnderlyingPaymentStubIndex2(v string) {
	m.Set(field.NewUnderlyingPaymentStubIndex2(v))
}

// SetUnderlyingPaymentStubIndex2Source sets UnderlyingPaymentStubIndex2Source, Tag 40729.
func (m NoUnderlyingPaymentStubs) SetUnderlyingPaymentStubIndex2Source(v int) {
	m.Set(field.NewUnderlyingPaymentStubIndex2Source(v))
}

// SetUnderlyingPaymentStubIndex2CurvePeriod sets UnderlyingPaymentStubIndex2CurvePeriod, Tag 40730.
func (m NoUnderlyingPaymentStubs) SetUnderlyingPaymentStubIndex2CurvePeriod(v int) {
	m.Set(field.NewUnderlyingPaymentStubIndex2CurvePeriod(v))
}

// SetUnderlyingPaymentStubIndex2CurveUnit sets UnderlyingPaymentStubIndex2CurveUnit, Tag 40731.
func (m NoUnderlyingPaymentStubs) SetUnderlyingPaymentStubIndex2CurveUnit(v string) {
	m.Set(field.NewUnderlyingPaymentStubIndex2CurveUnit(v))
}

// SetUnderlyingPaymentStubIndex2RateMultiplier sets UnderlyingPaymentStubIndex2RateMultiplier, Tag 40732.
func (m NoUnderlyingPaymentStubs) SetUnderlyingPaymentStubIndex2RateMultiplier(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingPaymentStubIndex2RateMultiplier(value, scale))
}

// SetUnderlyingPaymentStubIndex2RateSpread sets UnderlyingPaymentStubIndex2RateSpread, Tag 40733.
func (m NoUnderlyingPaymentStubs) SetUnderlyingPaymentStubIndex2RateSpread(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingPaymentStubIndex2RateSpread(value, scale))
}

// SetUnderlyingPaymentStubIndex2RateSpreadPositionType sets UnderlyingPaymentStubIndex2RateSpreadPositionType, Tag 40734.
func (m NoUnderlyingPaymentStubs) SetUnderlyingPaymentStubIndex2RateSpreadPositionType(v int) {
	m.Set(field.NewUnderlyingPaymentStubIndex2RateSpreadPositionType(v))
}

// SetUnderlyingPaymentStubIndex2RateTreatment sets UnderlyingPaymentStubIndex2RateTreatment, Tag 40735.
func (m NoUnderlyingPaymentStubs) SetUnderlyingPaymentStubIndex2RateTreatment(v int) {
	m.Set(field.NewUnderlyingPaymentStubIndex2RateTreatment(v))
}

// SetUnderlyingPaymentStubIndex2CapRate sets UnderlyingPaymentStubIndex2CapRate, Tag 40736.
func (m NoUnderlyingPaymentStubs) SetUnderlyingPaymentStubIndex2CapRate(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingPaymentStubIndex2CapRate(value, scale))
}

// SetUnderlyingPaymentStubIndex2FloorRate sets UnderlyingPaymentStubIndex2FloorRate, Tag 40737.
func (m NoUnderlyingPaymentStubs) SetUnderlyingPaymentStubIndex2FloorRate(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingPaymentStubIndex2FloorRate(value, scale))
}

// SetUnderlyingPaymentStubStartDateUnadjusted sets UnderlyingPaymentStubStartDateUnadjusted, Tag 42993.
func (m NoUnderlyingPaymentStubs) SetUnderlyingPaymentStubStartDateUnadjusted(v string) {
	m.Set(field.NewUnderlyingPaymentStubStartDateUnadjusted(v))
}

// SetUnderlyingPaymentStubStartDateBusinessDayConvention sets UnderlyingPaymentStubStartDateBusinessDayConvention, Tag 42994.
func (m NoUnderlyingPaymentStubs) SetUnderlyingPaymentStubStartDateBusinessDayConvention(v int) {
	m.Set(field.NewUnderlyingPaymentStubStartDateBusinessDayConvention(v))
}

// SetNoUnderlyingPaymentStubStartDateBusinessCenters sets NoUnderlyingPaymentStubStartDateBusinessCenters, Tag 43000.
func (m NoUnderlyingPaymentStubs) SetNoUnderlyingPaymentStubStartDateBusinessCenters(f NoUnderlyingPaymentStubStartDateBusinessCentersRepeatingGroup) {
	m.SetGroup(f)
}

// SetUnderlyingPaymentStubStartDateRelativeTo sets UnderlyingPaymentStubStartDateRelativeTo, Tag 42995.
func (m NoUnderlyingPaymentStubs) SetUnderlyingPaymentStubStartDateRelativeTo(v int) {
	m.Set(field.NewUnderlyingPaymentStubStartDateRelativeTo(v))
}

// SetUnderlyingPaymentStubStartDateOffsetPeriod sets UnderlyingPaymentStubStartDateOffsetPeriod, Tag 42996.
func (m NoUnderlyingPaymentStubs) SetUnderlyingPaymentStubStartDateOffsetPeriod(v int) {
	m.Set(field.NewUnderlyingPaymentStubStartDateOffsetPeriod(v))
}

// SetUnderlyingPaymentStubStartDateOffsetUnit sets UnderlyingPaymentStubStartDateOffsetUnit, Tag 42997.
func (m NoUnderlyingPaymentStubs) SetUnderlyingPaymentStubStartDateOffsetUnit(v string) {
	m.Set(field.NewUnderlyingPaymentStubStartDateOffsetUnit(v))
}

// SetUnderlyingPaymentStubStartDateOffsetDayType sets UnderlyingPaymentStubStartDateOffsetDayType, Tag 42998.
func (m NoUnderlyingPaymentStubs) SetUnderlyingPaymentStubStartDateOffsetDayType(v int) {
	m.Set(field.NewUnderlyingPaymentStubStartDateOffsetDayType(v))
}

// SetUnderlyingPaymentStubStartDateAdjusted sets UnderlyingPaymentStubStartDateAdjusted, Tag 42999.
func (m NoUnderlyingPaymentStubs) SetUnderlyingPaymentStubStartDateAdjusted(v string) {
	m.Set(field.NewUnderlyingPaymentStubStartDateAdjusted(v))
}

// SetUnderlyingPaymentStubEndDateUnadjusted sets UnderlyingPaymentStubEndDateUnadjusted, Tag 42984.
func (m NoUnderlyingPaymentStubs) SetUnderlyingPaymentStubEndDateUnadjusted(v string) {
	m.Set(field.NewUnderlyingPaymentStubEndDateUnadjusted(v))
}

// SetUnderlyingPaymentStubEndDateBusinessDayConvention sets UnderlyingPaymentStubEndDateBusinessDayConvention, Tag 42985.
func (m NoUnderlyingPaymentStubs) SetUnderlyingPaymentStubEndDateBusinessDayConvention(v int) {
	m.Set(field.NewUnderlyingPaymentStubEndDateBusinessDayConvention(v))
}

// SetNoUnderlyingPaymentStubEndDateBusinessCenters sets NoUnderlyingPaymentStubEndDateBusinessCenters, Tag 42991.
func (m NoUnderlyingPaymentStubs) SetNoUnderlyingPaymentStubEndDateBusinessCenters(f NoUnderlyingPaymentStubEndDateBusinessCentersRepeatingGroup) {
	m.SetGroup(f)
}

// SetUnderlyingPaymentStubEndDateRelativeTo sets UnderlyingPaymentStubEndDateRelativeTo, Tag 42986.
func (m NoUnderlyingPaymentStubs) SetUnderlyingPaymentStubEndDateRelativeTo(v int) {
	m.Set(field.NewUnderlyingPaymentStubEndDateRelativeTo(v))
}

// SetUnderlyingPaymentStubEndDateOffsetPeriod sets UnderlyingPaymentStubEndDateOffsetPeriod, Tag 42987.
func (m NoUnderlyingPaymentStubs) SetUnderlyingPaymentStubEndDateOffsetPeriod(v int) {
	m.Set(field.NewUnderlyingPaymentStubEndDateOffsetPeriod(v))
}

// SetUnderlyingPaymentStubEndDateOffsetUnit sets UnderlyingPaymentStubEndDateOffsetUnit, Tag 42988.
func (m NoUnderlyingPaymentStubs) SetUnderlyingPaymentStubEndDateOffsetUnit(v string) {
	m.Set(field.NewUnderlyingPaymentStubEndDateOffsetUnit(v))
}

// SetUnderlyingPaymentStubEndDateOffsetDayType sets UnderlyingPaymentStubEndDateOffsetDayType, Tag 42989.
func (m NoUnderlyingPaymentStubs) SetUnderlyingPaymentStubEndDateOffsetDayType(v int) {
	m.Set(field.NewUnderlyingPaymentStubEndDateOffsetDayType(v))
}

// SetUnderlyingPaymentStubEndDateAdjusted sets UnderlyingPaymentStubEndDateAdjusted, Tag 42990.
func (m NoUnderlyingPaymentStubs) SetUnderlyingPaymentStubEndDateAdjusted(v string) {
	m.Set(field.NewUnderlyingPaymentStubEndDateAdjusted(v))
}

// GetUnderlyingPaymentStubType gets UnderlyingPaymentStubType, Tag 40709.
func (m NoUnderlyingPaymentStubs) GetUnderlyingPaymentStubType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStubTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStubLength gets UnderlyingPaymentStubLength, Tag 40710.
func (m NoUnderlyingPaymentStubs) GetUnderlyingPaymentStubLength() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStubLengthField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStubRate gets UnderlyingPaymentStubRate, Tag 40711.
func (m NoUnderlyingPaymentStubs) GetUnderlyingPaymentStubRate() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStubRateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStubFixedAmount gets UnderlyingPaymentStubFixedAmount, Tag 40712.
func (m NoUnderlyingPaymentStubs) GetUnderlyingPaymentStubFixedAmount() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStubFixedAmountField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStubFixedCurrency gets UnderlyingPaymentStubFixedCurrency, Tag 40713.
func (m NoUnderlyingPaymentStubs) GetUnderlyingPaymentStubFixedCurrency() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStubFixedCurrencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStubIndex gets UnderlyingPaymentStubIndex, Tag 40714.
func (m NoUnderlyingPaymentStubs) GetUnderlyingPaymentStubIndex() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStubIndexField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStubIndexSource gets UnderlyingPaymentStubIndexSource, Tag 40715.
func (m NoUnderlyingPaymentStubs) GetUnderlyingPaymentStubIndexSource() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStubIndexSourceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStubIndexCurvePeriod gets UnderlyingPaymentStubIndexCurvePeriod, Tag 40716.
func (m NoUnderlyingPaymentStubs) GetUnderlyingPaymentStubIndexCurvePeriod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStubIndexCurvePeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStubIndexCurveUnit gets UnderlyingPaymentStubIndexCurveUnit, Tag 40717.
func (m NoUnderlyingPaymentStubs) GetUnderlyingPaymentStubIndexCurveUnit() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStubIndexCurveUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStubIndexRateMultiplier gets UnderlyingPaymentStubIndexRateMultiplier, Tag 40718.
func (m NoUnderlyingPaymentStubs) GetUnderlyingPaymentStubIndexRateMultiplier() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStubIndexRateMultiplierField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStubIndexRateSpread gets UnderlyingPaymentStubIndexRateSpread, Tag 40719.
func (m NoUnderlyingPaymentStubs) GetUnderlyingPaymentStubIndexRateSpread() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStubIndexRateSpreadField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStubIndexRateSpreadPositionType gets UnderlyingPaymentStubIndexRateSpreadPositionType, Tag 40720.
func (m NoUnderlyingPaymentStubs) GetUnderlyingPaymentStubIndexRateSpreadPositionType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStubIndexRateSpreadPositionTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStubIndexRateTreatment gets UnderlyingPaymentStubIndexRateTreatment, Tag 40721.
func (m NoUnderlyingPaymentStubs) GetUnderlyingPaymentStubIndexRateTreatment() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStubIndexRateTreatmentField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStubIndexCapRate gets UnderlyingPaymentStubIndexCapRate, Tag 40722.
func (m NoUnderlyingPaymentStubs) GetUnderlyingPaymentStubIndexCapRate() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStubIndexCapRateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStubIndexCapRateBuySide gets UnderlyingPaymentStubIndexCapRateBuySide, Tag 40723.
func (m NoUnderlyingPaymentStubs) GetUnderlyingPaymentStubIndexCapRateBuySide() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStubIndexCapRateBuySideField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStubIndexCapRateSellSide gets UnderlyingPaymentStubIndexCapRateSellSide, Tag 40724.
func (m NoUnderlyingPaymentStubs) GetUnderlyingPaymentStubIndexCapRateSellSide() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStubIndexCapRateSellSideField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStubIndexFloorRate gets UnderlyingPaymentStubIndexFloorRate, Tag 40725.
func (m NoUnderlyingPaymentStubs) GetUnderlyingPaymentStubIndexFloorRate() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStubIndexFloorRateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStubIndexFloorRateBuySide gets UnderlyingPaymentStubIndexFloorRateBuySide, Tag 40726.
func (m NoUnderlyingPaymentStubs) GetUnderlyingPaymentStubIndexFloorRateBuySide() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStubIndexFloorRateBuySideField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStubIndexFloorRateSellSide gets UnderlyingPaymentStubIndexFloorRateSellSide, Tag 40727.
func (m NoUnderlyingPaymentStubs) GetUnderlyingPaymentStubIndexFloorRateSellSide() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStubIndexFloorRateSellSideField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStubIndex2 gets UnderlyingPaymentStubIndex2, Tag 40728.
func (m NoUnderlyingPaymentStubs) GetUnderlyingPaymentStubIndex2() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStubIndex2Field
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStubIndex2Source gets UnderlyingPaymentStubIndex2Source, Tag 40729.
func (m NoUnderlyingPaymentStubs) GetUnderlyingPaymentStubIndex2Source() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStubIndex2SourceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStubIndex2CurvePeriod gets UnderlyingPaymentStubIndex2CurvePeriod, Tag 40730.
func (m NoUnderlyingPaymentStubs) GetUnderlyingPaymentStubIndex2CurvePeriod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStubIndex2CurvePeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStubIndex2CurveUnit gets UnderlyingPaymentStubIndex2CurveUnit, Tag 40731.
func (m NoUnderlyingPaymentStubs) GetUnderlyingPaymentStubIndex2CurveUnit() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStubIndex2CurveUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStubIndex2RateMultiplier gets UnderlyingPaymentStubIndex2RateMultiplier, Tag 40732.
func (m NoUnderlyingPaymentStubs) GetUnderlyingPaymentStubIndex2RateMultiplier() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStubIndex2RateMultiplierField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStubIndex2RateSpread gets UnderlyingPaymentStubIndex2RateSpread, Tag 40733.
func (m NoUnderlyingPaymentStubs) GetUnderlyingPaymentStubIndex2RateSpread() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStubIndex2RateSpreadField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStubIndex2RateSpreadPositionType gets UnderlyingPaymentStubIndex2RateSpreadPositionType, Tag 40734.
func (m NoUnderlyingPaymentStubs) GetUnderlyingPaymentStubIndex2RateSpreadPositionType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStubIndex2RateSpreadPositionTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStubIndex2RateTreatment gets UnderlyingPaymentStubIndex2RateTreatment, Tag 40735.
func (m NoUnderlyingPaymentStubs) GetUnderlyingPaymentStubIndex2RateTreatment() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStubIndex2RateTreatmentField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStubIndex2CapRate gets UnderlyingPaymentStubIndex2CapRate, Tag 40736.
func (m NoUnderlyingPaymentStubs) GetUnderlyingPaymentStubIndex2CapRate() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStubIndex2CapRateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStubIndex2FloorRate gets UnderlyingPaymentStubIndex2FloorRate, Tag 40737.
func (m NoUnderlyingPaymentStubs) GetUnderlyingPaymentStubIndex2FloorRate() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStubIndex2FloorRateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStubStartDateUnadjusted gets UnderlyingPaymentStubStartDateUnadjusted, Tag 42993.
func (m NoUnderlyingPaymentStubs) GetUnderlyingPaymentStubStartDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStubStartDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStubStartDateBusinessDayConvention gets UnderlyingPaymentStubStartDateBusinessDayConvention, Tag 42994.
func (m NoUnderlyingPaymentStubs) GetUnderlyingPaymentStubStartDateBusinessDayConvention() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStubStartDateBusinessDayConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUnderlyingPaymentStubStartDateBusinessCenters gets NoUnderlyingPaymentStubStartDateBusinessCenters, Tag 43000.
func (m NoUnderlyingPaymentStubs) GetNoUnderlyingPaymentStubStartDateBusinessCenters() (NoUnderlyingPaymentStubStartDateBusinessCentersRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingPaymentStubStartDateBusinessCentersRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetUnderlyingPaymentStubStartDateRelativeTo gets UnderlyingPaymentStubStartDateRelativeTo, Tag 42995.
func (m NoUnderlyingPaymentStubs) GetUnderlyingPaymentStubStartDateRelativeTo() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStubStartDateRelativeToField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStubStartDateOffsetPeriod gets UnderlyingPaymentStubStartDateOffsetPeriod, Tag 42996.
func (m NoUnderlyingPaymentStubs) GetUnderlyingPaymentStubStartDateOffsetPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStubStartDateOffsetPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStubStartDateOffsetUnit gets UnderlyingPaymentStubStartDateOffsetUnit, Tag 42997.
func (m NoUnderlyingPaymentStubs) GetUnderlyingPaymentStubStartDateOffsetUnit() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStubStartDateOffsetUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStubStartDateOffsetDayType gets UnderlyingPaymentStubStartDateOffsetDayType, Tag 42998.
func (m NoUnderlyingPaymentStubs) GetUnderlyingPaymentStubStartDateOffsetDayType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStubStartDateOffsetDayTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStubStartDateAdjusted gets UnderlyingPaymentStubStartDateAdjusted, Tag 42999.
func (m NoUnderlyingPaymentStubs) GetUnderlyingPaymentStubStartDateAdjusted() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStubStartDateAdjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStubEndDateUnadjusted gets UnderlyingPaymentStubEndDateUnadjusted, Tag 42984.
func (m NoUnderlyingPaymentStubs) GetUnderlyingPaymentStubEndDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStubEndDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStubEndDateBusinessDayConvention gets UnderlyingPaymentStubEndDateBusinessDayConvention, Tag 42985.
func (m NoUnderlyingPaymentStubs) GetUnderlyingPaymentStubEndDateBusinessDayConvention() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStubEndDateBusinessDayConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUnderlyingPaymentStubEndDateBusinessCenters gets NoUnderlyingPaymentStubEndDateBusinessCenters, Tag 42991.
func (m NoUnderlyingPaymentStubs) GetNoUnderlyingPaymentStubEndDateBusinessCenters() (NoUnderlyingPaymentStubEndDateBusinessCentersRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingPaymentStubEndDateBusinessCentersRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetUnderlyingPaymentStubEndDateRelativeTo gets UnderlyingPaymentStubEndDateRelativeTo, Tag 42986.
func (m NoUnderlyingPaymentStubs) GetUnderlyingPaymentStubEndDateRelativeTo() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStubEndDateRelativeToField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStubEndDateOffsetPeriod gets UnderlyingPaymentStubEndDateOffsetPeriod, Tag 42987.
func (m NoUnderlyingPaymentStubs) GetUnderlyingPaymentStubEndDateOffsetPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStubEndDateOffsetPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStubEndDateOffsetUnit gets UnderlyingPaymentStubEndDateOffsetUnit, Tag 42988.
func (m NoUnderlyingPaymentStubs) GetUnderlyingPaymentStubEndDateOffsetUnit() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStubEndDateOffsetUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStubEndDateOffsetDayType gets UnderlyingPaymentStubEndDateOffsetDayType, Tag 42989.
func (m NoUnderlyingPaymentStubs) GetUnderlyingPaymentStubEndDateOffsetDayType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStubEndDateOffsetDayTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPaymentStubEndDateAdjusted gets UnderlyingPaymentStubEndDateAdjusted, Tag 42990.
func (m NoUnderlyingPaymentStubs) GetUnderlyingPaymentStubEndDateAdjusted() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStubEndDateAdjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingPaymentStubType returns true if UnderlyingPaymentStubType is present, Tag 40709.
func (m NoUnderlyingPaymentStubs) HasUnderlyingPaymentStubType() bool {
	return m.Has(tag.UnderlyingPaymentStubType)
}

// HasUnderlyingPaymentStubLength returns true if UnderlyingPaymentStubLength is present, Tag 40710.
func (m NoUnderlyingPaymentStubs) HasUnderlyingPaymentStubLength() bool {
	return m.Has(tag.UnderlyingPaymentStubLength)
}

// HasUnderlyingPaymentStubRate returns true if UnderlyingPaymentStubRate is present, Tag 40711.
func (m NoUnderlyingPaymentStubs) HasUnderlyingPaymentStubRate() bool {
	return m.Has(tag.UnderlyingPaymentStubRate)
}

// HasUnderlyingPaymentStubFixedAmount returns true if UnderlyingPaymentStubFixedAmount is present, Tag 40712.
func (m NoUnderlyingPaymentStubs) HasUnderlyingPaymentStubFixedAmount() bool {
	return m.Has(tag.UnderlyingPaymentStubFixedAmount)
}

// HasUnderlyingPaymentStubFixedCurrency returns true if UnderlyingPaymentStubFixedCurrency is present, Tag 40713.
func (m NoUnderlyingPaymentStubs) HasUnderlyingPaymentStubFixedCurrency() bool {
	return m.Has(tag.UnderlyingPaymentStubFixedCurrency)
}

// HasUnderlyingPaymentStubIndex returns true if UnderlyingPaymentStubIndex is present, Tag 40714.
func (m NoUnderlyingPaymentStubs) HasUnderlyingPaymentStubIndex() bool {
	return m.Has(tag.UnderlyingPaymentStubIndex)
}

// HasUnderlyingPaymentStubIndexSource returns true if UnderlyingPaymentStubIndexSource is present, Tag 40715.
func (m NoUnderlyingPaymentStubs) HasUnderlyingPaymentStubIndexSource() bool {
	return m.Has(tag.UnderlyingPaymentStubIndexSource)
}

// HasUnderlyingPaymentStubIndexCurvePeriod returns true if UnderlyingPaymentStubIndexCurvePeriod is present, Tag 40716.
func (m NoUnderlyingPaymentStubs) HasUnderlyingPaymentStubIndexCurvePeriod() bool {
	return m.Has(tag.UnderlyingPaymentStubIndexCurvePeriod)
}

// HasUnderlyingPaymentStubIndexCurveUnit returns true if UnderlyingPaymentStubIndexCurveUnit is present, Tag 40717.
func (m NoUnderlyingPaymentStubs) HasUnderlyingPaymentStubIndexCurveUnit() bool {
	return m.Has(tag.UnderlyingPaymentStubIndexCurveUnit)
}

// HasUnderlyingPaymentStubIndexRateMultiplier returns true if UnderlyingPaymentStubIndexRateMultiplier is present, Tag 40718.
func (m NoUnderlyingPaymentStubs) HasUnderlyingPaymentStubIndexRateMultiplier() bool {
	return m.Has(tag.UnderlyingPaymentStubIndexRateMultiplier)
}

// HasUnderlyingPaymentStubIndexRateSpread returns true if UnderlyingPaymentStubIndexRateSpread is present, Tag 40719.
func (m NoUnderlyingPaymentStubs) HasUnderlyingPaymentStubIndexRateSpread() bool {
	return m.Has(tag.UnderlyingPaymentStubIndexRateSpread)
}

// HasUnderlyingPaymentStubIndexRateSpreadPositionType returns true if UnderlyingPaymentStubIndexRateSpreadPositionType is present, Tag 40720.
func (m NoUnderlyingPaymentStubs) HasUnderlyingPaymentStubIndexRateSpreadPositionType() bool {
	return m.Has(tag.UnderlyingPaymentStubIndexRateSpreadPositionType)
}

// HasUnderlyingPaymentStubIndexRateTreatment returns true if UnderlyingPaymentStubIndexRateTreatment is present, Tag 40721.
func (m NoUnderlyingPaymentStubs) HasUnderlyingPaymentStubIndexRateTreatment() bool {
	return m.Has(tag.UnderlyingPaymentStubIndexRateTreatment)
}

// HasUnderlyingPaymentStubIndexCapRate returns true if UnderlyingPaymentStubIndexCapRate is present, Tag 40722.
func (m NoUnderlyingPaymentStubs) HasUnderlyingPaymentStubIndexCapRate() bool {
	return m.Has(tag.UnderlyingPaymentStubIndexCapRate)
}

// HasUnderlyingPaymentStubIndexCapRateBuySide returns true if UnderlyingPaymentStubIndexCapRateBuySide is present, Tag 40723.
func (m NoUnderlyingPaymentStubs) HasUnderlyingPaymentStubIndexCapRateBuySide() bool {
	return m.Has(tag.UnderlyingPaymentStubIndexCapRateBuySide)
}

// HasUnderlyingPaymentStubIndexCapRateSellSide returns true if UnderlyingPaymentStubIndexCapRateSellSide is present, Tag 40724.
func (m NoUnderlyingPaymentStubs) HasUnderlyingPaymentStubIndexCapRateSellSide() bool {
	return m.Has(tag.UnderlyingPaymentStubIndexCapRateSellSide)
}

// HasUnderlyingPaymentStubIndexFloorRate returns true if UnderlyingPaymentStubIndexFloorRate is present, Tag 40725.
func (m NoUnderlyingPaymentStubs) HasUnderlyingPaymentStubIndexFloorRate() bool {
	return m.Has(tag.UnderlyingPaymentStubIndexFloorRate)
}

// HasUnderlyingPaymentStubIndexFloorRateBuySide returns true if UnderlyingPaymentStubIndexFloorRateBuySide is present, Tag 40726.
func (m NoUnderlyingPaymentStubs) HasUnderlyingPaymentStubIndexFloorRateBuySide() bool {
	return m.Has(tag.UnderlyingPaymentStubIndexFloorRateBuySide)
}

// HasUnderlyingPaymentStubIndexFloorRateSellSide returns true if UnderlyingPaymentStubIndexFloorRateSellSide is present, Tag 40727.
func (m NoUnderlyingPaymentStubs) HasUnderlyingPaymentStubIndexFloorRateSellSide() bool {
	return m.Has(tag.UnderlyingPaymentStubIndexFloorRateSellSide)
}

// HasUnderlyingPaymentStubIndex2 returns true if UnderlyingPaymentStubIndex2 is present, Tag 40728.
func (m NoUnderlyingPaymentStubs) HasUnderlyingPaymentStubIndex2() bool {
	return m.Has(tag.UnderlyingPaymentStubIndex2)
}

// HasUnderlyingPaymentStubIndex2Source returns true if UnderlyingPaymentStubIndex2Source is present, Tag 40729.
func (m NoUnderlyingPaymentStubs) HasUnderlyingPaymentStubIndex2Source() bool {
	return m.Has(tag.UnderlyingPaymentStubIndex2Source)
}

// HasUnderlyingPaymentStubIndex2CurvePeriod returns true if UnderlyingPaymentStubIndex2CurvePeriod is present, Tag 40730.
func (m NoUnderlyingPaymentStubs) HasUnderlyingPaymentStubIndex2CurvePeriod() bool {
	return m.Has(tag.UnderlyingPaymentStubIndex2CurvePeriod)
}

// HasUnderlyingPaymentStubIndex2CurveUnit returns true if UnderlyingPaymentStubIndex2CurveUnit is present, Tag 40731.
func (m NoUnderlyingPaymentStubs) HasUnderlyingPaymentStubIndex2CurveUnit() bool {
	return m.Has(tag.UnderlyingPaymentStubIndex2CurveUnit)
}

// HasUnderlyingPaymentStubIndex2RateMultiplier returns true if UnderlyingPaymentStubIndex2RateMultiplier is present, Tag 40732.
func (m NoUnderlyingPaymentStubs) HasUnderlyingPaymentStubIndex2RateMultiplier() bool {
	return m.Has(tag.UnderlyingPaymentStubIndex2RateMultiplier)
}

// HasUnderlyingPaymentStubIndex2RateSpread returns true if UnderlyingPaymentStubIndex2RateSpread is present, Tag 40733.
func (m NoUnderlyingPaymentStubs) HasUnderlyingPaymentStubIndex2RateSpread() bool {
	return m.Has(tag.UnderlyingPaymentStubIndex2RateSpread)
}

// HasUnderlyingPaymentStubIndex2RateSpreadPositionType returns true if UnderlyingPaymentStubIndex2RateSpreadPositionType is present, Tag 40734.
func (m NoUnderlyingPaymentStubs) HasUnderlyingPaymentStubIndex2RateSpreadPositionType() bool {
	return m.Has(tag.UnderlyingPaymentStubIndex2RateSpreadPositionType)
}

// HasUnderlyingPaymentStubIndex2RateTreatment returns true if UnderlyingPaymentStubIndex2RateTreatment is present, Tag 40735.
func (m NoUnderlyingPaymentStubs) HasUnderlyingPaymentStubIndex2RateTreatment() bool {
	return m.Has(tag.UnderlyingPaymentStubIndex2RateTreatment)
}

// HasUnderlyingPaymentStubIndex2CapRate returns true if UnderlyingPaymentStubIndex2CapRate is present, Tag 40736.
func (m NoUnderlyingPaymentStubs) HasUnderlyingPaymentStubIndex2CapRate() bool {
	return m.Has(tag.UnderlyingPaymentStubIndex2CapRate)
}

// HasUnderlyingPaymentStubIndex2FloorRate returns true if UnderlyingPaymentStubIndex2FloorRate is present, Tag 40737.
func (m NoUnderlyingPaymentStubs) HasUnderlyingPaymentStubIndex2FloorRate() bool {
	return m.Has(tag.UnderlyingPaymentStubIndex2FloorRate)
}

// HasUnderlyingPaymentStubStartDateUnadjusted returns true if UnderlyingPaymentStubStartDateUnadjusted is present, Tag 42993.
func (m NoUnderlyingPaymentStubs) HasUnderlyingPaymentStubStartDateUnadjusted() bool {
	return m.Has(tag.UnderlyingPaymentStubStartDateUnadjusted)
}

// HasUnderlyingPaymentStubStartDateBusinessDayConvention returns true if UnderlyingPaymentStubStartDateBusinessDayConvention is present, Tag 42994.
func (m NoUnderlyingPaymentStubs) HasUnderlyingPaymentStubStartDateBusinessDayConvention() bool {
	return m.Has(tag.UnderlyingPaymentStubStartDateBusinessDayConvention)
}

// HasNoUnderlyingPaymentStubStartDateBusinessCenters returns true if NoUnderlyingPaymentStubStartDateBusinessCenters is present, Tag 43000.
func (m NoUnderlyingPaymentStubs) HasNoUnderlyingPaymentStubStartDateBusinessCenters() bool {
	return m.Has(tag.NoUnderlyingPaymentStubStartDateBusinessCenters)
}

// HasUnderlyingPaymentStubStartDateRelativeTo returns true if UnderlyingPaymentStubStartDateRelativeTo is present, Tag 42995.
func (m NoUnderlyingPaymentStubs) HasUnderlyingPaymentStubStartDateRelativeTo() bool {
	return m.Has(tag.UnderlyingPaymentStubStartDateRelativeTo)
}

// HasUnderlyingPaymentStubStartDateOffsetPeriod returns true if UnderlyingPaymentStubStartDateOffsetPeriod is present, Tag 42996.
func (m NoUnderlyingPaymentStubs) HasUnderlyingPaymentStubStartDateOffsetPeriod() bool {
	return m.Has(tag.UnderlyingPaymentStubStartDateOffsetPeriod)
}

// HasUnderlyingPaymentStubStartDateOffsetUnit returns true if UnderlyingPaymentStubStartDateOffsetUnit is present, Tag 42997.
func (m NoUnderlyingPaymentStubs) HasUnderlyingPaymentStubStartDateOffsetUnit() bool {
	return m.Has(tag.UnderlyingPaymentStubStartDateOffsetUnit)
}

// HasUnderlyingPaymentStubStartDateOffsetDayType returns true if UnderlyingPaymentStubStartDateOffsetDayType is present, Tag 42998.
func (m NoUnderlyingPaymentStubs) HasUnderlyingPaymentStubStartDateOffsetDayType() bool {
	return m.Has(tag.UnderlyingPaymentStubStartDateOffsetDayType)
}

// HasUnderlyingPaymentStubStartDateAdjusted returns true if UnderlyingPaymentStubStartDateAdjusted is present, Tag 42999.
func (m NoUnderlyingPaymentStubs) HasUnderlyingPaymentStubStartDateAdjusted() bool {
	return m.Has(tag.UnderlyingPaymentStubStartDateAdjusted)
}

// HasUnderlyingPaymentStubEndDateUnadjusted returns true if UnderlyingPaymentStubEndDateUnadjusted is present, Tag 42984.
func (m NoUnderlyingPaymentStubs) HasUnderlyingPaymentStubEndDateUnadjusted() bool {
	return m.Has(tag.UnderlyingPaymentStubEndDateUnadjusted)
}

// HasUnderlyingPaymentStubEndDateBusinessDayConvention returns true if UnderlyingPaymentStubEndDateBusinessDayConvention is present, Tag 42985.
func (m NoUnderlyingPaymentStubs) HasUnderlyingPaymentStubEndDateBusinessDayConvention() bool {
	return m.Has(tag.UnderlyingPaymentStubEndDateBusinessDayConvention)
}

// HasNoUnderlyingPaymentStubEndDateBusinessCenters returns true if NoUnderlyingPaymentStubEndDateBusinessCenters is present, Tag 42991.
func (m NoUnderlyingPaymentStubs) HasNoUnderlyingPaymentStubEndDateBusinessCenters() bool {
	return m.Has(tag.NoUnderlyingPaymentStubEndDateBusinessCenters)
}

// HasUnderlyingPaymentStubEndDateRelativeTo returns true if UnderlyingPaymentStubEndDateRelativeTo is present, Tag 42986.
func (m NoUnderlyingPaymentStubs) HasUnderlyingPaymentStubEndDateRelativeTo() bool {
	return m.Has(tag.UnderlyingPaymentStubEndDateRelativeTo)
}

// HasUnderlyingPaymentStubEndDateOffsetPeriod returns true if UnderlyingPaymentStubEndDateOffsetPeriod is present, Tag 42987.
func (m NoUnderlyingPaymentStubs) HasUnderlyingPaymentStubEndDateOffsetPeriod() bool {
	return m.Has(tag.UnderlyingPaymentStubEndDateOffsetPeriod)
}

// HasUnderlyingPaymentStubEndDateOffsetUnit returns true if UnderlyingPaymentStubEndDateOffsetUnit is present, Tag 42988.
func (m NoUnderlyingPaymentStubs) HasUnderlyingPaymentStubEndDateOffsetUnit() bool {
	return m.Has(tag.UnderlyingPaymentStubEndDateOffsetUnit)
}

// HasUnderlyingPaymentStubEndDateOffsetDayType returns true if UnderlyingPaymentStubEndDateOffsetDayType is present, Tag 42989.
func (m NoUnderlyingPaymentStubs) HasUnderlyingPaymentStubEndDateOffsetDayType() bool {
	return m.Has(tag.UnderlyingPaymentStubEndDateOffsetDayType)
}

// HasUnderlyingPaymentStubEndDateAdjusted returns true if UnderlyingPaymentStubEndDateAdjusted is present, Tag 42990.
func (m NoUnderlyingPaymentStubs) HasUnderlyingPaymentStubEndDateAdjusted() bool {
	return m.Has(tag.UnderlyingPaymentStubEndDateAdjusted)
}

// NoUnderlyingPaymentStubStartDateBusinessCenters is a repeating group element, Tag 43000.
type NoUnderlyingPaymentStubStartDateBusinessCenters struct {
	*quickfix.Group
}

// SetUnderlyingPaymentStubStartDateBusinessCenter sets UnderlyingPaymentStubStartDateBusinessCenter, Tag 43001.
func (m NoUnderlyingPaymentStubStartDateBusinessCenters) SetUnderlyingPaymentStubStartDateBusinessCenter(v string) {
	m.Set(field.NewUnderlyingPaymentStubStartDateBusinessCenter(v))
}

// GetUnderlyingPaymentStubStartDateBusinessCenter gets UnderlyingPaymentStubStartDateBusinessCenter, Tag 43001.
func (m NoUnderlyingPaymentStubStartDateBusinessCenters) GetUnderlyingPaymentStubStartDateBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStubStartDateBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingPaymentStubStartDateBusinessCenter returns true if UnderlyingPaymentStubStartDateBusinessCenter is present, Tag 43001.
func (m NoUnderlyingPaymentStubStartDateBusinessCenters) HasUnderlyingPaymentStubStartDateBusinessCenter() bool {
	return m.Has(tag.UnderlyingPaymentStubStartDateBusinessCenter)
}

// NoUnderlyingPaymentStubStartDateBusinessCentersRepeatingGroup is a repeating group, Tag 43000.
type NoUnderlyingPaymentStubStartDateBusinessCentersRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingPaymentStubStartDateBusinessCentersRepeatingGroup returns an initialized, NoUnderlyingPaymentStubStartDateBusinessCentersRepeatingGroup.
func NewNoUnderlyingPaymentStubStartDateBusinessCentersRepeatingGroup() NoUnderlyingPaymentStubStartDateBusinessCentersRepeatingGroup {
	return NoUnderlyingPaymentStubStartDateBusinessCentersRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingPaymentStubStartDateBusinessCenters,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingPaymentStubStartDateBusinessCenter),
			},
		),
	}
}

// Add create and append a new NoUnderlyingPaymentStubStartDateBusinessCenters to this group.
func (m NoUnderlyingPaymentStubStartDateBusinessCentersRepeatingGroup) Add() NoUnderlyingPaymentStubStartDateBusinessCenters {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingPaymentStubStartDateBusinessCenters{g}
}

// Get returns the ith NoUnderlyingPaymentStubStartDateBusinessCenters in the NoUnderlyingPaymentStubStartDateBusinessCentersRepeatinGroup.
func (m NoUnderlyingPaymentStubStartDateBusinessCentersRepeatingGroup) Get(i int) NoUnderlyingPaymentStubStartDateBusinessCenters {
	return NoUnderlyingPaymentStubStartDateBusinessCenters{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingPaymentStubEndDateBusinessCenters is a repeating group element, Tag 42991.
type NoUnderlyingPaymentStubEndDateBusinessCenters struct {
	*quickfix.Group
}

// SetUnderlyingPaymentStubEndDateBusinessCenter sets UnderlyingPaymentStubEndDateBusinessCenter, Tag 42992.
func (m NoUnderlyingPaymentStubEndDateBusinessCenters) SetUnderlyingPaymentStubEndDateBusinessCenter(v string) {
	m.Set(field.NewUnderlyingPaymentStubEndDateBusinessCenter(v))
}

// GetUnderlyingPaymentStubEndDateBusinessCenter gets UnderlyingPaymentStubEndDateBusinessCenter, Tag 42992.
func (m NoUnderlyingPaymentStubEndDateBusinessCenters) GetUnderlyingPaymentStubEndDateBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPaymentStubEndDateBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingPaymentStubEndDateBusinessCenter returns true if UnderlyingPaymentStubEndDateBusinessCenter is present, Tag 42992.
func (m NoUnderlyingPaymentStubEndDateBusinessCenters) HasUnderlyingPaymentStubEndDateBusinessCenter() bool {
	return m.Has(tag.UnderlyingPaymentStubEndDateBusinessCenter)
}

// NoUnderlyingPaymentStubEndDateBusinessCentersRepeatingGroup is a repeating group, Tag 42991.
type NoUnderlyingPaymentStubEndDateBusinessCentersRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingPaymentStubEndDateBusinessCentersRepeatingGroup returns an initialized, NoUnderlyingPaymentStubEndDateBusinessCentersRepeatingGroup.
func NewNoUnderlyingPaymentStubEndDateBusinessCentersRepeatingGroup() NoUnderlyingPaymentStubEndDateBusinessCentersRepeatingGroup {
	return NoUnderlyingPaymentStubEndDateBusinessCentersRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingPaymentStubEndDateBusinessCenters,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingPaymentStubEndDateBusinessCenter),
			},
		),
	}
}

// Add create and append a new NoUnderlyingPaymentStubEndDateBusinessCenters to this group.
func (m NoUnderlyingPaymentStubEndDateBusinessCentersRepeatingGroup) Add() NoUnderlyingPaymentStubEndDateBusinessCenters {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingPaymentStubEndDateBusinessCenters{g}
}

// Get returns the ith NoUnderlyingPaymentStubEndDateBusinessCenters in the NoUnderlyingPaymentStubEndDateBusinessCentersRepeatinGroup.
func (m NoUnderlyingPaymentStubEndDateBusinessCentersRepeatingGroup) Get(i int) NoUnderlyingPaymentStubEndDateBusinessCenters {
	return NoUnderlyingPaymentStubEndDateBusinessCenters{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingPaymentStubsRepeatingGroup is a repeating group, Tag 40708.
type NoUnderlyingPaymentStubsRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingPaymentStubsRepeatingGroup returns an initialized, NoUnderlyingPaymentStubsRepeatingGroup.
func NewNoUnderlyingPaymentStubsRepeatingGroup() NoUnderlyingPaymentStubsRepeatingGroup {
	return NoUnderlyingPaymentStubsRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingPaymentStubs,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingPaymentStubType),
				quickfix.GroupElement(tag.UnderlyingPaymentStubLength),
				quickfix.GroupElement(tag.UnderlyingPaymentStubRate),
				quickfix.GroupElement(tag.UnderlyingPaymentStubFixedAmount),
				quickfix.GroupElement(tag.UnderlyingPaymentStubFixedCurrency),
				quickfix.GroupElement(tag.UnderlyingPaymentStubIndex),
				quickfix.GroupElement(tag.UnderlyingPaymentStubIndexSource),
				quickfix.GroupElement(tag.UnderlyingPaymentStubIndexCurvePeriod),
				quickfix.GroupElement(tag.UnderlyingPaymentStubIndexCurveUnit),
				quickfix.GroupElement(tag.UnderlyingPaymentStubIndexRateMultiplier),
				quickfix.GroupElement(tag.UnderlyingPaymentStubIndexRateSpread),
				quickfix.GroupElement(tag.UnderlyingPaymentStubIndexRateSpreadPositionType),
				quickfix.GroupElement(tag.UnderlyingPaymentStubIndexRateTreatment),
				quickfix.GroupElement(tag.UnderlyingPaymentStubIndexCapRate),
				quickfix.GroupElement(tag.UnderlyingPaymentStubIndexCapRateBuySide),
				quickfix.GroupElement(tag.UnderlyingPaymentStubIndexCapRateSellSide),
				quickfix.GroupElement(tag.UnderlyingPaymentStubIndexFloorRate),
				quickfix.GroupElement(tag.UnderlyingPaymentStubIndexFloorRateBuySide),
				quickfix.GroupElement(tag.UnderlyingPaymentStubIndexFloorRateSellSide),
				quickfix.GroupElement(tag.UnderlyingPaymentStubIndex2),
				quickfix.GroupElement(tag.UnderlyingPaymentStubIndex2Source),
				quickfix.GroupElement(tag.UnderlyingPaymentStubIndex2CurvePeriod),
				quickfix.GroupElement(tag.UnderlyingPaymentStubIndex2CurveUnit),
				quickfix.GroupElement(tag.UnderlyingPaymentStubIndex2RateMultiplier),
				quickfix.GroupElement(tag.UnderlyingPaymentStubIndex2RateSpread),
				quickfix.GroupElement(tag.UnderlyingPaymentStubIndex2RateSpreadPositionType),
				quickfix.GroupElement(tag.UnderlyingPaymentStubIndex2RateTreatment),
				quickfix.GroupElement(tag.UnderlyingPaymentStubIndex2CapRate),
				quickfix.GroupElement(tag.UnderlyingPaymentStubIndex2FloorRate),
				quickfix.GroupElement(tag.UnderlyingPaymentStubStartDateUnadjusted),
				quickfix.GroupElement(tag.UnderlyingPaymentStubStartDateBusinessDayConvention),
				NewNoUnderlyingPaymentStubStartDateBusinessCentersRepeatingGroup(),
				quickfix.GroupElement(tag.UnderlyingPaymentStubStartDateRelativeTo),
				quickfix.GroupElement(tag.UnderlyingPaymentStubStartDateOffsetPeriod),
				quickfix.GroupElement(tag.UnderlyingPaymentStubStartDateOffsetUnit),
				quickfix.GroupElement(tag.UnderlyingPaymentStubStartDateOffsetDayType),
				quickfix.GroupElement(tag.UnderlyingPaymentStubStartDateAdjusted),
				quickfix.GroupElement(tag.UnderlyingPaymentStubEndDateUnadjusted),
				quickfix.GroupElement(tag.UnderlyingPaymentStubEndDateBusinessDayConvention),
				NewNoUnderlyingPaymentStubEndDateBusinessCentersRepeatingGroup(),
				quickfix.GroupElement(tag.UnderlyingPaymentStubEndDateRelativeTo),
				quickfix.GroupElement(tag.UnderlyingPaymentStubEndDateOffsetPeriod),
				quickfix.GroupElement(tag.UnderlyingPaymentStubEndDateOffsetUnit),
				quickfix.GroupElement(tag.UnderlyingPaymentStubEndDateOffsetDayType),
				quickfix.GroupElement(tag.UnderlyingPaymentStubEndDateAdjusted),
			},
		),
	}
}

// Add create and append a new NoUnderlyingPaymentStubs to this group.
func (m NoUnderlyingPaymentStubsRepeatingGroup) Add() NoUnderlyingPaymentStubs {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingPaymentStubs{g}
}

// Get returns the ith NoUnderlyingPaymentStubs in the NoUnderlyingPaymentStubsRepeatinGroup.
func (m NoUnderlyingPaymentStubsRepeatingGroup) Get(i int) NoUnderlyingPaymentStubs {
	return NoUnderlyingPaymentStubs{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingStreamCommodityAltIDs is a repeating group element, Tag 41990.
type NoUnderlyingStreamCommodityAltIDs struct {
	*quickfix.Group
}

// SetUnderlyingStreamCommodityAltID sets UnderlyingStreamCommodityAltID, Tag 41991.
func (m NoUnderlyingStreamCommodityAltIDs) SetUnderlyingStreamCommodityAltID(v string) {
	m.Set(field.NewUnderlyingStreamCommodityAltID(v))
}

// SetUnderlyingStreamCommodityAltIDSource sets UnderlyingStreamCommodityAltIDSource, Tag 41992.
func (m NoUnderlyingStreamCommodityAltIDs) SetUnderlyingStreamCommodityAltIDSource(v string) {
	m.Set(field.NewUnderlyingStreamCommodityAltIDSource(v))
}

// GetUnderlyingStreamCommodityAltID gets UnderlyingStreamCommodityAltID, Tag 41991.
func (m NoUnderlyingStreamCommodityAltIDs) GetUnderlyingStreamCommodityAltID() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamCommodityAltIDField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStreamCommodityAltIDSource gets UnderlyingStreamCommodityAltIDSource, Tag 41992.
func (m NoUnderlyingStreamCommodityAltIDs) GetUnderlyingStreamCommodityAltIDSource() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamCommodityAltIDSourceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingStreamCommodityAltID returns true if UnderlyingStreamCommodityAltID is present, Tag 41991.
func (m NoUnderlyingStreamCommodityAltIDs) HasUnderlyingStreamCommodityAltID() bool {
	return m.Has(tag.UnderlyingStreamCommodityAltID)
}

// HasUnderlyingStreamCommodityAltIDSource returns true if UnderlyingStreamCommodityAltIDSource is present, Tag 41992.
func (m NoUnderlyingStreamCommodityAltIDs) HasUnderlyingStreamCommodityAltIDSource() bool {
	return m.Has(tag.UnderlyingStreamCommodityAltIDSource)
}

// NoUnderlyingStreamCommodityAltIDsRepeatingGroup is a repeating group, Tag 41990.
type NoUnderlyingStreamCommodityAltIDsRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingStreamCommodityAltIDsRepeatingGroup returns an initialized, NoUnderlyingStreamCommodityAltIDsRepeatingGroup.
func NewNoUnderlyingStreamCommodityAltIDsRepeatingGroup() NoUnderlyingStreamCommodityAltIDsRepeatingGroup {
	return NoUnderlyingStreamCommodityAltIDsRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingStreamCommodityAltIDs,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingStreamCommodityAltID),
				quickfix.GroupElement(tag.UnderlyingStreamCommodityAltIDSource),
			},
		),
	}
}

// Add create and append a new NoUnderlyingStreamCommodityAltIDs to this group.
func (m NoUnderlyingStreamCommodityAltIDsRepeatingGroup) Add() NoUnderlyingStreamCommodityAltIDs {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingStreamCommodityAltIDs{g}
}

// Get returns the ith NoUnderlyingStreamCommodityAltIDs in the NoUnderlyingStreamCommodityAltIDsRepeatinGroup.
func (m NoUnderlyingStreamCommodityAltIDsRepeatingGroup) Get(i int) NoUnderlyingStreamCommodityAltIDs {
	return NoUnderlyingStreamCommodityAltIDs{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingStreamAssetAttributes is a repeating group element, Tag 41800.
type NoUnderlyingStreamAssetAttributes struct {
	*quickfix.Group
}

// SetUnderlyingStreamAssetAttributeType sets UnderlyingStreamAssetAttributeType, Tag 41801.
func (m NoUnderlyingStreamAssetAttributes) SetUnderlyingStreamAssetAttributeType(v string) {
	m.Set(field.NewUnderlyingStreamAssetAttributeType(v))
}

// SetUnderlyingStreamAssetAttributeValue sets UnderlyingStreamAssetAttributeValue, Tag 41802.
func (m NoUnderlyingStreamAssetAttributes) SetUnderlyingStreamAssetAttributeValue(v string) {
	m.Set(field.NewUnderlyingStreamAssetAttributeValue(v))
}

// SetUnderlyingStreamAssetAttributeLimit sets UnderlyingStreamAssetAttributeLimit, Tag 41803.
func (m NoUnderlyingStreamAssetAttributes) SetUnderlyingStreamAssetAttributeLimit(v string) {
	m.Set(field.NewUnderlyingStreamAssetAttributeLimit(v))
}

// GetUnderlyingStreamAssetAttributeType gets UnderlyingStreamAssetAttributeType, Tag 41801.
func (m NoUnderlyingStreamAssetAttributes) GetUnderlyingStreamAssetAttributeType() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamAssetAttributeTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStreamAssetAttributeValue gets UnderlyingStreamAssetAttributeValue, Tag 41802.
func (m NoUnderlyingStreamAssetAttributes) GetUnderlyingStreamAssetAttributeValue() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamAssetAttributeValueField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStreamAssetAttributeLimit gets UnderlyingStreamAssetAttributeLimit, Tag 41803.
func (m NoUnderlyingStreamAssetAttributes) GetUnderlyingStreamAssetAttributeLimit() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamAssetAttributeLimitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingStreamAssetAttributeType returns true if UnderlyingStreamAssetAttributeType is present, Tag 41801.
func (m NoUnderlyingStreamAssetAttributes) HasUnderlyingStreamAssetAttributeType() bool {
	return m.Has(tag.UnderlyingStreamAssetAttributeType)
}

// HasUnderlyingStreamAssetAttributeValue returns true if UnderlyingStreamAssetAttributeValue is present, Tag 41802.
func (m NoUnderlyingStreamAssetAttributes) HasUnderlyingStreamAssetAttributeValue() bool {
	return m.Has(tag.UnderlyingStreamAssetAttributeValue)
}

// HasUnderlyingStreamAssetAttributeLimit returns true if UnderlyingStreamAssetAttributeLimit is present, Tag 41803.
func (m NoUnderlyingStreamAssetAttributes) HasUnderlyingStreamAssetAttributeLimit() bool {
	return m.Has(tag.UnderlyingStreamAssetAttributeLimit)
}

// NoUnderlyingStreamAssetAttributesRepeatingGroup is a repeating group, Tag 41800.
type NoUnderlyingStreamAssetAttributesRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingStreamAssetAttributesRepeatingGroup returns an initialized, NoUnderlyingStreamAssetAttributesRepeatingGroup.
func NewNoUnderlyingStreamAssetAttributesRepeatingGroup() NoUnderlyingStreamAssetAttributesRepeatingGroup {
	return NoUnderlyingStreamAssetAttributesRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingStreamAssetAttributes,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingStreamAssetAttributeType),
				quickfix.GroupElement(tag.UnderlyingStreamAssetAttributeValue),
				quickfix.GroupElement(tag.UnderlyingStreamAssetAttributeLimit),
			},
		),
	}
}

// Add create and append a new NoUnderlyingStreamAssetAttributes to this group.
func (m NoUnderlyingStreamAssetAttributesRepeatingGroup) Add() NoUnderlyingStreamAssetAttributes {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingStreamAssetAttributes{g}
}

// Get returns the ith NoUnderlyingStreamAssetAttributes in the NoUnderlyingStreamAssetAttributesRepeatinGroup.
func (m NoUnderlyingStreamAssetAttributesRepeatingGroup) Get(i int) NoUnderlyingStreamAssetAttributes {
	return NoUnderlyingStreamAssetAttributes{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingStreamCommodityDataSources is a repeating group element, Tag 41993.
type NoUnderlyingStreamCommodityDataSources struct {
	*quickfix.Group
}

// SetUnderlyingStreamCommodityDataSourceID sets UnderlyingStreamCommodityDataSourceID, Tag 41994.
func (m NoUnderlyingStreamCommodityDataSources) SetUnderlyingStreamCommodityDataSourceID(v string) {
	m.Set(field.NewUnderlyingStreamCommodityDataSourceID(v))
}

// SetUnderlyingStreamCommodityDataSourceIDType sets UnderlyingStreamCommodityDataSourceIDType, Tag 41995.
func (m NoUnderlyingStreamCommodityDataSources) SetUnderlyingStreamCommodityDataSourceIDType(v int) {
	m.Set(field.NewUnderlyingStreamCommodityDataSourceIDType(v))
}

// GetUnderlyingStreamCommodityDataSourceID gets UnderlyingStreamCommodityDataSourceID, Tag 41994.
func (m NoUnderlyingStreamCommodityDataSources) GetUnderlyingStreamCommodityDataSourceID() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamCommodityDataSourceIDField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStreamCommodityDataSourceIDType gets UnderlyingStreamCommodityDataSourceIDType, Tag 41995.
func (m NoUnderlyingStreamCommodityDataSources) GetUnderlyingStreamCommodityDataSourceIDType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamCommodityDataSourceIDTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingStreamCommodityDataSourceID returns true if UnderlyingStreamCommodityDataSourceID is present, Tag 41994.
func (m NoUnderlyingStreamCommodityDataSources) HasUnderlyingStreamCommodityDataSourceID() bool {
	return m.Has(tag.UnderlyingStreamCommodityDataSourceID)
}

// HasUnderlyingStreamCommodityDataSourceIDType returns true if UnderlyingStreamCommodityDataSourceIDType is present, Tag 41995.
func (m NoUnderlyingStreamCommodityDataSources) HasUnderlyingStreamCommodityDataSourceIDType() bool {
	return m.Has(tag.UnderlyingStreamCommodityDataSourceIDType)
}

// NoUnderlyingStreamCommodityDataSourcesRepeatingGroup is a repeating group, Tag 41993.
type NoUnderlyingStreamCommodityDataSourcesRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingStreamCommodityDataSourcesRepeatingGroup returns an initialized, NoUnderlyingStreamCommodityDataSourcesRepeatingGroup.
func NewNoUnderlyingStreamCommodityDataSourcesRepeatingGroup() NoUnderlyingStreamCommodityDataSourcesRepeatingGroup {
	return NoUnderlyingStreamCommodityDataSourcesRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingStreamCommodityDataSources,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingStreamCommodityDataSourceID),
				quickfix.GroupElement(tag.UnderlyingStreamCommodityDataSourceIDType),
			},
		),
	}
}

// Add create and append a new NoUnderlyingStreamCommodityDataSources to this group.
func (m NoUnderlyingStreamCommodityDataSourcesRepeatingGroup) Add() NoUnderlyingStreamCommodityDataSources {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingStreamCommodityDataSources{g}
}

// Get returns the ith NoUnderlyingStreamCommodityDataSources in the NoUnderlyingStreamCommodityDataSourcesRepeatinGroup.
func (m NoUnderlyingStreamCommodityDataSourcesRepeatingGroup) Get(i int) NoUnderlyingStreamCommodityDataSources {
	return NoUnderlyingStreamCommodityDataSources{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingStreamCommoditySettlBusinessCenters is a repeating group element, Tag 41962.
type NoUnderlyingStreamCommoditySettlBusinessCenters struct {
	*quickfix.Group
}

// SetUnderlyingStreamCommoditySettlBusinessCenter sets UnderlyingStreamCommoditySettlBusinessCenter, Tag 41963.
func (m NoUnderlyingStreamCommoditySettlBusinessCenters) SetUnderlyingStreamCommoditySettlBusinessCenter(v string) {
	m.Set(field.NewUnderlyingStreamCommoditySettlBusinessCenter(v))
}

// GetUnderlyingStreamCommoditySettlBusinessCenter gets UnderlyingStreamCommoditySettlBusinessCenter, Tag 41963.
func (m NoUnderlyingStreamCommoditySettlBusinessCenters) GetUnderlyingStreamCommoditySettlBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamCommoditySettlBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingStreamCommoditySettlBusinessCenter returns true if UnderlyingStreamCommoditySettlBusinessCenter is present, Tag 41963.
func (m NoUnderlyingStreamCommoditySettlBusinessCenters) HasUnderlyingStreamCommoditySettlBusinessCenter() bool {
	return m.Has(tag.UnderlyingStreamCommoditySettlBusinessCenter)
}

// NoUnderlyingStreamCommoditySettlBusinessCentersRepeatingGroup is a repeating group, Tag 41962.
type NoUnderlyingStreamCommoditySettlBusinessCentersRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingStreamCommoditySettlBusinessCentersRepeatingGroup returns an initialized, NoUnderlyingStreamCommoditySettlBusinessCentersRepeatingGroup.
func NewNoUnderlyingStreamCommoditySettlBusinessCentersRepeatingGroup() NoUnderlyingStreamCommoditySettlBusinessCentersRepeatingGroup {
	return NoUnderlyingStreamCommoditySettlBusinessCentersRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingStreamCommoditySettlBusinessCenters,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingStreamCommoditySettlBusinessCenter),
			},
		),
	}
}

// Add create and append a new NoUnderlyingStreamCommoditySettlBusinessCenters to this group.
func (m NoUnderlyingStreamCommoditySettlBusinessCentersRepeatingGroup) Add() NoUnderlyingStreamCommoditySettlBusinessCenters {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingStreamCommoditySettlBusinessCenters{g}
}

// Get returns the ith NoUnderlyingStreamCommoditySettlBusinessCenters in the NoUnderlyingStreamCommoditySettlBusinessCentersRepeatinGroup.
func (m NoUnderlyingStreamCommoditySettlBusinessCentersRepeatingGroup) Get(i int) NoUnderlyingStreamCommoditySettlBusinessCenters {
	return NoUnderlyingStreamCommoditySettlBusinessCenters{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingStreamCommoditySettlPeriods is a repeating group element, Tag 42002.
type NoUnderlyingStreamCommoditySettlPeriods struct {
	*quickfix.Group
}

// SetUnderlyingStreamCommoditySettlCountry sets UnderlyingStreamCommoditySettlCountry, Tag 42003.
func (m NoUnderlyingStreamCommoditySettlPeriods) SetUnderlyingStreamCommoditySettlCountry(v string) {
	m.Set(field.NewUnderlyingStreamCommoditySettlCountry(v))
}

// SetUnderlyingStreamCommoditySettlTimeZone sets UnderlyingStreamCommoditySettlTimeZone, Tag 42004.
func (m NoUnderlyingStreamCommoditySettlPeriods) SetUnderlyingStreamCommoditySettlTimeZone(v string) {
	m.Set(field.NewUnderlyingStreamCommoditySettlTimeZone(v))
}

// SetUnderlyingStreamCommoditySettlFlowType sets UnderlyingStreamCommoditySettlFlowType, Tag 42005.
func (m NoUnderlyingStreamCommoditySettlPeriods) SetUnderlyingStreamCommoditySettlFlowType(v int) {
	m.Set(field.NewUnderlyingStreamCommoditySettlFlowType(v))
}

// SetUnderlyingStreamCommoditySettlPeriodNotional sets UnderlyingStreamCommoditySettlPeriodNotional, Tag 42006.
func (m NoUnderlyingStreamCommoditySettlPeriods) SetUnderlyingStreamCommoditySettlPeriodNotional(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingStreamCommoditySettlPeriodNotional(value, scale))
}

// SetUnderlyingStreamCommoditySettlPeriodNotionalUnitOfMeasure sets UnderlyingStreamCommoditySettlPeriodNotionalUnitOfMeasure, Tag 42007.
func (m NoUnderlyingStreamCommoditySettlPeriods) SetUnderlyingStreamCommoditySettlPeriodNotionalUnitOfMeasure(v string) {
	m.Set(field.NewUnderlyingStreamCommoditySettlPeriodNotionalUnitOfMeasure(v))
}

// SetUnderlyingStreamCommoditySettlPeriodFrequencyPeriod sets UnderlyingStreamCommoditySettlPeriodFrequencyPeriod, Tag 42008.
func (m NoUnderlyingStreamCommoditySettlPeriods) SetUnderlyingStreamCommoditySettlPeriodFrequencyPeriod(v int) {
	m.Set(field.NewUnderlyingStreamCommoditySettlPeriodFrequencyPeriod(v))
}

// SetUnderlyingStreamCommoditySettlPeriodFrequencyUnit sets UnderlyingStreamCommoditySettlPeriodFrequencyUnit, Tag 42009.
func (m NoUnderlyingStreamCommoditySettlPeriods) SetUnderlyingStreamCommoditySettlPeriodFrequencyUnit(v string) {
	m.Set(field.NewUnderlyingStreamCommoditySettlPeriodFrequencyUnit(v))
}

// SetUnderlyingStreamCommoditySettlPeriodPrice sets UnderlyingStreamCommoditySettlPeriodPrice, Tag 42010.
func (m NoUnderlyingStreamCommoditySettlPeriods) SetUnderlyingStreamCommoditySettlPeriodPrice(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingStreamCommoditySettlPeriodPrice(value, scale))
}

// SetUnderlyingStreamCommoditySettlPeriodPriceUnitOfMeasure sets UnderlyingStreamCommoditySettlPeriodPriceUnitOfMeasure, Tag 42011.
func (m NoUnderlyingStreamCommoditySettlPeriods) SetUnderlyingStreamCommoditySettlPeriodPriceUnitOfMeasure(v string) {
	m.Set(field.NewUnderlyingStreamCommoditySettlPeriodPriceUnitOfMeasure(v))
}

// SetUnderlyingStreamCommoditySettlPeriodPriceCurrency sets UnderlyingStreamCommoditySettlPeriodPriceCurrency, Tag 42012.
func (m NoUnderlyingStreamCommoditySettlPeriods) SetUnderlyingStreamCommoditySettlPeriodPriceCurrency(v string) {
	m.Set(field.NewUnderlyingStreamCommoditySettlPeriodPriceCurrency(v))
}

// SetUnderlyingStreamCommoditySettlHolidaysProcessingInstruction sets UnderlyingStreamCommoditySettlHolidaysProcessingInstruction, Tag 42013.
func (m NoUnderlyingStreamCommoditySettlPeriods) SetUnderlyingStreamCommoditySettlHolidaysProcessingInstruction(v int) {
	m.Set(field.NewUnderlyingStreamCommoditySettlHolidaysProcessingInstruction(v))
}

// SetNoUnderlyingStreamCommoditySettlDays sets NoUnderlyingStreamCommoditySettlDays, Tag 41996.
func (m NoUnderlyingStreamCommoditySettlPeriods) SetNoUnderlyingStreamCommoditySettlDays(f NoUnderlyingStreamCommoditySettlDaysRepeatingGroup) {
	m.SetGroup(f)
}

// SetUnderlyingStreamCommoditySettlPeriodXID sets UnderlyingStreamCommoditySettlPeriodXID, Tag 42014.
func (m NoUnderlyingStreamCommoditySettlPeriods) SetUnderlyingStreamCommoditySettlPeriodXID(v string) {
	m.Set(field.NewUnderlyingStreamCommoditySettlPeriodXID(v))
}

// SetUnderlyingStreamCommoditySettlPeriodXIDRef sets UnderlyingStreamCommoditySettlPeriodXIDRef, Tag 42015.
func (m NoUnderlyingStreamCommoditySettlPeriods) SetUnderlyingStreamCommoditySettlPeriodXIDRef(v string) {
	m.Set(field.NewUnderlyingStreamCommoditySettlPeriodXIDRef(v))
}

// GetUnderlyingStreamCommoditySettlCountry gets UnderlyingStreamCommoditySettlCountry, Tag 42003.
func (m NoUnderlyingStreamCommoditySettlPeriods) GetUnderlyingStreamCommoditySettlCountry() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamCommoditySettlCountryField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStreamCommoditySettlTimeZone gets UnderlyingStreamCommoditySettlTimeZone, Tag 42004.
func (m NoUnderlyingStreamCommoditySettlPeriods) GetUnderlyingStreamCommoditySettlTimeZone() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamCommoditySettlTimeZoneField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStreamCommoditySettlFlowType gets UnderlyingStreamCommoditySettlFlowType, Tag 42005.
func (m NoUnderlyingStreamCommoditySettlPeriods) GetUnderlyingStreamCommoditySettlFlowType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamCommoditySettlFlowTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStreamCommoditySettlPeriodNotional gets UnderlyingStreamCommoditySettlPeriodNotional, Tag 42006.
func (m NoUnderlyingStreamCommoditySettlPeriods) GetUnderlyingStreamCommoditySettlPeriodNotional() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamCommoditySettlPeriodNotionalField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStreamCommoditySettlPeriodNotionalUnitOfMeasure gets UnderlyingStreamCommoditySettlPeriodNotionalUnitOfMeasure, Tag 42007.
func (m NoUnderlyingStreamCommoditySettlPeriods) GetUnderlyingStreamCommoditySettlPeriodNotionalUnitOfMeasure() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamCommoditySettlPeriodNotionalUnitOfMeasureField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStreamCommoditySettlPeriodFrequencyPeriod gets UnderlyingStreamCommoditySettlPeriodFrequencyPeriod, Tag 42008.
func (m NoUnderlyingStreamCommoditySettlPeriods) GetUnderlyingStreamCommoditySettlPeriodFrequencyPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamCommoditySettlPeriodFrequencyPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStreamCommoditySettlPeriodFrequencyUnit gets UnderlyingStreamCommoditySettlPeriodFrequencyUnit, Tag 42009.
func (m NoUnderlyingStreamCommoditySettlPeriods) GetUnderlyingStreamCommoditySettlPeriodFrequencyUnit() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamCommoditySettlPeriodFrequencyUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStreamCommoditySettlPeriodPrice gets UnderlyingStreamCommoditySettlPeriodPrice, Tag 42010.
func (m NoUnderlyingStreamCommoditySettlPeriods) GetUnderlyingStreamCommoditySettlPeriodPrice() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamCommoditySettlPeriodPriceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStreamCommoditySettlPeriodPriceUnitOfMeasure gets UnderlyingStreamCommoditySettlPeriodPriceUnitOfMeasure, Tag 42011.
func (m NoUnderlyingStreamCommoditySettlPeriods) GetUnderlyingStreamCommoditySettlPeriodPriceUnitOfMeasure() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamCommoditySettlPeriodPriceUnitOfMeasureField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStreamCommoditySettlPeriodPriceCurrency gets UnderlyingStreamCommoditySettlPeriodPriceCurrency, Tag 42012.
func (m NoUnderlyingStreamCommoditySettlPeriods) GetUnderlyingStreamCommoditySettlPeriodPriceCurrency() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamCommoditySettlPeriodPriceCurrencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStreamCommoditySettlHolidaysProcessingInstruction gets UnderlyingStreamCommoditySettlHolidaysProcessingInstruction, Tag 42013.
func (m NoUnderlyingStreamCommoditySettlPeriods) GetUnderlyingStreamCommoditySettlHolidaysProcessingInstruction() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamCommoditySettlHolidaysProcessingInstructionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUnderlyingStreamCommoditySettlDays gets NoUnderlyingStreamCommoditySettlDays, Tag 41996.
func (m NoUnderlyingStreamCommoditySettlPeriods) GetNoUnderlyingStreamCommoditySettlDays() (NoUnderlyingStreamCommoditySettlDaysRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingStreamCommoditySettlDaysRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetUnderlyingStreamCommoditySettlPeriodXID gets UnderlyingStreamCommoditySettlPeriodXID, Tag 42014.
func (m NoUnderlyingStreamCommoditySettlPeriods) GetUnderlyingStreamCommoditySettlPeriodXID() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamCommoditySettlPeriodXIDField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStreamCommoditySettlPeriodXIDRef gets UnderlyingStreamCommoditySettlPeriodXIDRef, Tag 42015.
func (m NoUnderlyingStreamCommoditySettlPeriods) GetUnderlyingStreamCommoditySettlPeriodXIDRef() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamCommoditySettlPeriodXIDRefField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingStreamCommoditySettlCountry returns true if UnderlyingStreamCommoditySettlCountry is present, Tag 42003.
func (m NoUnderlyingStreamCommoditySettlPeriods) HasUnderlyingStreamCommoditySettlCountry() bool {
	return m.Has(tag.UnderlyingStreamCommoditySettlCountry)
}

// HasUnderlyingStreamCommoditySettlTimeZone returns true if UnderlyingStreamCommoditySettlTimeZone is present, Tag 42004.
func (m NoUnderlyingStreamCommoditySettlPeriods) HasUnderlyingStreamCommoditySettlTimeZone() bool {
	return m.Has(tag.UnderlyingStreamCommoditySettlTimeZone)
}

// HasUnderlyingStreamCommoditySettlFlowType returns true if UnderlyingStreamCommoditySettlFlowType is present, Tag 42005.
func (m NoUnderlyingStreamCommoditySettlPeriods) HasUnderlyingStreamCommoditySettlFlowType() bool {
	return m.Has(tag.UnderlyingStreamCommoditySettlFlowType)
}

// HasUnderlyingStreamCommoditySettlPeriodNotional returns true if UnderlyingStreamCommoditySettlPeriodNotional is present, Tag 42006.
func (m NoUnderlyingStreamCommoditySettlPeriods) HasUnderlyingStreamCommoditySettlPeriodNotional() bool {
	return m.Has(tag.UnderlyingStreamCommoditySettlPeriodNotional)
}

// HasUnderlyingStreamCommoditySettlPeriodNotionalUnitOfMeasure returns true if UnderlyingStreamCommoditySettlPeriodNotionalUnitOfMeasure is present, Tag 42007.
func (m NoUnderlyingStreamCommoditySettlPeriods) HasUnderlyingStreamCommoditySettlPeriodNotionalUnitOfMeasure() bool {
	return m.Has(tag.UnderlyingStreamCommoditySettlPeriodNotionalUnitOfMeasure)
}

// HasUnderlyingStreamCommoditySettlPeriodFrequencyPeriod returns true if UnderlyingStreamCommoditySettlPeriodFrequencyPeriod is present, Tag 42008.
func (m NoUnderlyingStreamCommoditySettlPeriods) HasUnderlyingStreamCommoditySettlPeriodFrequencyPeriod() bool {
	return m.Has(tag.UnderlyingStreamCommoditySettlPeriodFrequencyPeriod)
}

// HasUnderlyingStreamCommoditySettlPeriodFrequencyUnit returns true if UnderlyingStreamCommoditySettlPeriodFrequencyUnit is present, Tag 42009.
func (m NoUnderlyingStreamCommoditySettlPeriods) HasUnderlyingStreamCommoditySettlPeriodFrequencyUnit() bool {
	return m.Has(tag.UnderlyingStreamCommoditySettlPeriodFrequencyUnit)
}

// HasUnderlyingStreamCommoditySettlPeriodPrice returns true if UnderlyingStreamCommoditySettlPeriodPrice is present, Tag 42010.
func (m NoUnderlyingStreamCommoditySettlPeriods) HasUnderlyingStreamCommoditySettlPeriodPrice() bool {
	return m.Has(tag.UnderlyingStreamCommoditySettlPeriodPrice)
}

// HasUnderlyingStreamCommoditySettlPeriodPriceUnitOfMeasure returns true if UnderlyingStreamCommoditySettlPeriodPriceUnitOfMeasure is present, Tag 42011.
func (m NoUnderlyingStreamCommoditySettlPeriods) HasUnderlyingStreamCommoditySettlPeriodPriceUnitOfMeasure() bool {
	return m.Has(tag.UnderlyingStreamCommoditySettlPeriodPriceUnitOfMeasure)
}

// HasUnderlyingStreamCommoditySettlPeriodPriceCurrency returns true if UnderlyingStreamCommoditySettlPeriodPriceCurrency is present, Tag 42012.
func (m NoUnderlyingStreamCommoditySettlPeriods) HasUnderlyingStreamCommoditySettlPeriodPriceCurrency() bool {
	return m.Has(tag.UnderlyingStreamCommoditySettlPeriodPriceCurrency)
}

// HasUnderlyingStreamCommoditySettlHolidaysProcessingInstruction returns true if UnderlyingStreamCommoditySettlHolidaysProcessingInstruction is present, Tag 42013.
func (m NoUnderlyingStreamCommoditySettlPeriods) HasUnderlyingStreamCommoditySettlHolidaysProcessingInstruction() bool {
	return m.Has(tag.UnderlyingStreamCommoditySettlHolidaysProcessingInstruction)
}

// HasNoUnderlyingStreamCommoditySettlDays returns true if NoUnderlyingStreamCommoditySettlDays is present, Tag 41996.
func (m NoUnderlyingStreamCommoditySettlPeriods) HasNoUnderlyingStreamCommoditySettlDays() bool {
	return m.Has(tag.NoUnderlyingStreamCommoditySettlDays)
}

// HasUnderlyingStreamCommoditySettlPeriodXID returns true if UnderlyingStreamCommoditySettlPeriodXID is present, Tag 42014.
func (m NoUnderlyingStreamCommoditySettlPeriods) HasUnderlyingStreamCommoditySettlPeriodXID() bool {
	return m.Has(tag.UnderlyingStreamCommoditySettlPeriodXID)
}

// HasUnderlyingStreamCommoditySettlPeriodXIDRef returns true if UnderlyingStreamCommoditySettlPeriodXIDRef is present, Tag 42015.
func (m NoUnderlyingStreamCommoditySettlPeriods) HasUnderlyingStreamCommoditySettlPeriodXIDRef() bool {
	return m.Has(tag.UnderlyingStreamCommoditySettlPeriodXIDRef)
}

// NoUnderlyingStreamCommoditySettlDays is a repeating group element, Tag 41996.
type NoUnderlyingStreamCommoditySettlDays struct {
	*quickfix.Group
}

// SetUnderlyingStreamCommoditySettlDay sets UnderlyingStreamCommoditySettlDay, Tag 41997.
func (m NoUnderlyingStreamCommoditySettlDays) SetUnderlyingStreamCommoditySettlDay(v int) {
	m.Set(field.NewUnderlyingStreamCommoditySettlDay(v))
}

// SetUnderlyingStreamCommoditySettlTotalHours sets UnderlyingStreamCommoditySettlTotalHours, Tag 41998.
func (m NoUnderlyingStreamCommoditySettlDays) SetUnderlyingStreamCommoditySettlTotalHours(v int) {
	m.Set(field.NewUnderlyingStreamCommoditySettlTotalHours(v))
}

// SetNoUnderlyingStreamCommoditySettlTimes sets NoUnderlyingStreamCommoditySettlTimes, Tag 41999.
func (m NoUnderlyingStreamCommoditySettlDays) SetNoUnderlyingStreamCommoditySettlTimes(f NoUnderlyingStreamCommoditySettlTimesRepeatingGroup) {
	m.SetGroup(f)
}

// GetUnderlyingStreamCommoditySettlDay gets UnderlyingStreamCommoditySettlDay, Tag 41997.
func (m NoUnderlyingStreamCommoditySettlDays) GetUnderlyingStreamCommoditySettlDay() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamCommoditySettlDayField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStreamCommoditySettlTotalHours gets UnderlyingStreamCommoditySettlTotalHours, Tag 41998.
func (m NoUnderlyingStreamCommoditySettlDays) GetUnderlyingStreamCommoditySettlTotalHours() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamCommoditySettlTotalHoursField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUnderlyingStreamCommoditySettlTimes gets NoUnderlyingStreamCommoditySettlTimes, Tag 41999.
func (m NoUnderlyingStreamCommoditySettlDays) GetNoUnderlyingStreamCommoditySettlTimes() (NoUnderlyingStreamCommoditySettlTimesRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingStreamCommoditySettlTimesRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// HasUnderlyingStreamCommoditySettlDay returns true if UnderlyingStreamCommoditySettlDay is present, Tag 41997.
func (m NoUnderlyingStreamCommoditySettlDays) HasUnderlyingStreamCommoditySettlDay() bool {
	return m.Has(tag.UnderlyingStreamCommoditySettlDay)
}

// HasUnderlyingStreamCommoditySettlTotalHours returns true if UnderlyingStreamCommoditySettlTotalHours is present, Tag 41998.
func (m NoUnderlyingStreamCommoditySettlDays) HasUnderlyingStreamCommoditySettlTotalHours() bool {
	return m.Has(tag.UnderlyingStreamCommoditySettlTotalHours)
}

// HasNoUnderlyingStreamCommoditySettlTimes returns true if NoUnderlyingStreamCommoditySettlTimes is present, Tag 41999.
func (m NoUnderlyingStreamCommoditySettlDays) HasNoUnderlyingStreamCommoditySettlTimes() bool {
	return m.Has(tag.NoUnderlyingStreamCommoditySettlTimes)
}

// NoUnderlyingStreamCommoditySettlTimes is a repeating group element, Tag 41999.
type NoUnderlyingStreamCommoditySettlTimes struct {
	*quickfix.Group
}

// SetUnderlyingStreamCommoditySettlStart sets UnderlyingStreamCommoditySettlStart, Tag 42000.
func (m NoUnderlyingStreamCommoditySettlTimes) SetUnderlyingStreamCommoditySettlStart(v string) {
	m.Set(field.NewUnderlyingStreamCommoditySettlStart(v))
}

// SetUnderlyingStreamCommoditySettlEnd sets UnderlyingStreamCommoditySettlEnd, Tag 42001.
func (m NoUnderlyingStreamCommoditySettlTimes) SetUnderlyingStreamCommoditySettlEnd(v string) {
	m.Set(field.NewUnderlyingStreamCommoditySettlEnd(v))
}

// SetUnderlyingStreamCommoditySettlTimeType sets UnderlyingStreamCommoditySettlTimeType, Tag 41936.
func (m NoUnderlyingStreamCommoditySettlTimes) SetUnderlyingStreamCommoditySettlTimeType(v int) {
	m.Set(field.NewUnderlyingStreamCommoditySettlTimeType(v))
}

// GetUnderlyingStreamCommoditySettlStart gets UnderlyingStreamCommoditySettlStart, Tag 42000.
func (m NoUnderlyingStreamCommoditySettlTimes) GetUnderlyingStreamCommoditySettlStart() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamCommoditySettlStartField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStreamCommoditySettlEnd gets UnderlyingStreamCommoditySettlEnd, Tag 42001.
func (m NoUnderlyingStreamCommoditySettlTimes) GetUnderlyingStreamCommoditySettlEnd() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamCommoditySettlEndField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingStreamCommoditySettlTimeType gets UnderlyingStreamCommoditySettlTimeType, Tag 41936.
func (m NoUnderlyingStreamCommoditySettlTimes) GetUnderlyingStreamCommoditySettlTimeType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingStreamCommoditySettlTimeTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingStreamCommoditySettlStart returns true if UnderlyingStreamCommoditySettlStart is present, Tag 42000.
func (m NoUnderlyingStreamCommoditySettlTimes) HasUnderlyingStreamCommoditySettlStart() bool {
	return m.Has(tag.UnderlyingStreamCommoditySettlStart)
}

// HasUnderlyingStreamCommoditySettlEnd returns true if UnderlyingStreamCommoditySettlEnd is present, Tag 42001.
func (m NoUnderlyingStreamCommoditySettlTimes) HasUnderlyingStreamCommoditySettlEnd() bool {
	return m.Has(tag.UnderlyingStreamCommoditySettlEnd)
}

// HasUnderlyingStreamCommoditySettlTimeType returns true if UnderlyingStreamCommoditySettlTimeType is present, Tag 41936.
func (m NoUnderlyingStreamCommoditySettlTimes) HasUnderlyingStreamCommoditySettlTimeType() bool {
	return m.Has(tag.UnderlyingStreamCommoditySettlTimeType)
}

// NoUnderlyingStreamCommoditySettlTimesRepeatingGroup is a repeating group, Tag 41999.
type NoUnderlyingStreamCommoditySettlTimesRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingStreamCommoditySettlTimesRepeatingGroup returns an initialized, NoUnderlyingStreamCommoditySettlTimesRepeatingGroup.
func NewNoUnderlyingStreamCommoditySettlTimesRepeatingGroup() NoUnderlyingStreamCommoditySettlTimesRepeatingGroup {
	return NoUnderlyingStreamCommoditySettlTimesRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingStreamCommoditySettlTimes,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingStreamCommoditySettlStart),
				quickfix.GroupElement(tag.UnderlyingStreamCommoditySettlEnd),
				quickfix.GroupElement(tag.UnderlyingStreamCommoditySettlTimeType),
			},
		),
	}
}

// Add create and append a new NoUnderlyingStreamCommoditySettlTimes to this group.
func (m NoUnderlyingStreamCommoditySettlTimesRepeatingGroup) Add() NoUnderlyingStreamCommoditySettlTimes {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingStreamCommoditySettlTimes{g}
}

// Get returns the ith NoUnderlyingStreamCommoditySettlTimes in the NoUnderlyingStreamCommoditySettlTimesRepeatinGroup.
func (m NoUnderlyingStreamCommoditySettlTimesRepeatingGroup) Get(i int) NoUnderlyingStreamCommoditySettlTimes {
	return NoUnderlyingStreamCommoditySettlTimes{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingStreamCommoditySettlDaysRepeatingGroup is a repeating group, Tag 41996.
type NoUnderlyingStreamCommoditySettlDaysRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingStreamCommoditySettlDaysRepeatingGroup returns an initialized, NoUnderlyingStreamCommoditySettlDaysRepeatingGroup.
func NewNoUnderlyingStreamCommoditySettlDaysRepeatingGroup() NoUnderlyingStreamCommoditySettlDaysRepeatingGroup {
	return NoUnderlyingStreamCommoditySettlDaysRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingStreamCommoditySettlDays,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingStreamCommoditySettlDay),
				quickfix.GroupElement(tag.UnderlyingStreamCommoditySettlTotalHours),
				NewNoUnderlyingStreamCommoditySettlTimesRepeatingGroup(),
			},
		),
	}
}

// Add create and append a new NoUnderlyingStreamCommoditySettlDays to this group.
func (m NoUnderlyingStreamCommoditySettlDaysRepeatingGroup) Add() NoUnderlyingStreamCommoditySettlDays {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingStreamCommoditySettlDays{g}
}

// Get returns the ith NoUnderlyingStreamCommoditySettlDays in the NoUnderlyingStreamCommoditySettlDaysRepeatinGroup.
func (m NoUnderlyingStreamCommoditySettlDaysRepeatingGroup) Get(i int) NoUnderlyingStreamCommoditySettlDays {
	return NoUnderlyingStreamCommoditySettlDays{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingStreamCommoditySettlPeriodsRepeatingGroup is a repeating group, Tag 42002.
type NoUnderlyingStreamCommoditySettlPeriodsRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingStreamCommoditySettlPeriodsRepeatingGroup returns an initialized, NoUnderlyingStreamCommoditySettlPeriodsRepeatingGroup.
func NewNoUnderlyingStreamCommoditySettlPeriodsRepeatingGroup() NoUnderlyingStreamCommoditySettlPeriodsRepeatingGroup {
	return NoUnderlyingStreamCommoditySettlPeriodsRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingStreamCommoditySettlPeriods,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingStreamCommoditySettlCountry),
				quickfix.GroupElement(tag.UnderlyingStreamCommoditySettlTimeZone),
				quickfix.GroupElement(tag.UnderlyingStreamCommoditySettlFlowType),
				quickfix.GroupElement(tag.UnderlyingStreamCommoditySettlPeriodNotional),
				quickfix.GroupElement(tag.UnderlyingStreamCommoditySettlPeriodNotionalUnitOfMeasure),
				quickfix.GroupElement(tag.UnderlyingStreamCommoditySettlPeriodFrequencyPeriod),
				quickfix.GroupElement(tag.UnderlyingStreamCommoditySettlPeriodFrequencyUnit),
				quickfix.GroupElement(tag.UnderlyingStreamCommoditySettlPeriodPrice),
				quickfix.GroupElement(tag.UnderlyingStreamCommoditySettlPeriodPriceUnitOfMeasure),
				quickfix.GroupElement(tag.UnderlyingStreamCommoditySettlPeriodPriceCurrency),
				quickfix.GroupElement(tag.UnderlyingStreamCommoditySettlHolidaysProcessingInstruction),
				NewNoUnderlyingStreamCommoditySettlDaysRepeatingGroup(),
				quickfix.GroupElement(tag.UnderlyingStreamCommoditySettlPeriodXID),
				quickfix.GroupElement(tag.UnderlyingStreamCommoditySettlPeriodXIDRef),
			},
		),
	}
}

// Add create and append a new NoUnderlyingStreamCommoditySettlPeriods to this group.
func (m NoUnderlyingStreamCommoditySettlPeriodsRepeatingGroup) Add() NoUnderlyingStreamCommoditySettlPeriods {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingStreamCommoditySettlPeriods{g}
}

// Get returns the ith NoUnderlyingStreamCommoditySettlPeriods in the NoUnderlyingStreamCommoditySettlPeriodsRepeatinGroup.
func (m NoUnderlyingStreamCommoditySettlPeriodsRepeatingGroup) Get(i int) NoUnderlyingStreamCommoditySettlPeriods {
	return NoUnderlyingStreamCommoditySettlPeriods{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingDeliveryStreamCommoditySources is a repeating group element, Tag 41808.
type NoUnderlyingDeliveryStreamCommoditySources struct {
	*quickfix.Group
}

// SetUnderlyingDeliveryStreamCommoditySource sets UnderlyingDeliveryStreamCommoditySource, Tag 41809.
func (m NoUnderlyingDeliveryStreamCommoditySources) SetUnderlyingDeliveryStreamCommoditySource(v string) {
	m.Set(field.NewUnderlyingDeliveryStreamCommoditySource(v))
}

// GetUnderlyingDeliveryStreamCommoditySource gets UnderlyingDeliveryStreamCommoditySource, Tag 41809.
func (m NoUnderlyingDeliveryStreamCommoditySources) GetUnderlyingDeliveryStreamCommoditySource() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingDeliveryStreamCommoditySourceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingDeliveryStreamCommoditySource returns true if UnderlyingDeliveryStreamCommoditySource is present, Tag 41809.
func (m NoUnderlyingDeliveryStreamCommoditySources) HasUnderlyingDeliveryStreamCommoditySource() bool {
	return m.Has(tag.UnderlyingDeliveryStreamCommoditySource)
}

// NoUnderlyingDeliveryStreamCommoditySourcesRepeatingGroup is a repeating group, Tag 41808.
type NoUnderlyingDeliveryStreamCommoditySourcesRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingDeliveryStreamCommoditySourcesRepeatingGroup returns an initialized, NoUnderlyingDeliveryStreamCommoditySourcesRepeatingGroup.
func NewNoUnderlyingDeliveryStreamCommoditySourcesRepeatingGroup() NoUnderlyingDeliveryStreamCommoditySourcesRepeatingGroup {
	return NoUnderlyingDeliveryStreamCommoditySourcesRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingDeliveryStreamCommoditySources,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingDeliveryStreamCommoditySource),
			},
		),
	}
}

// Add create and append a new NoUnderlyingDeliveryStreamCommoditySources to this group.
func (m NoUnderlyingDeliveryStreamCommoditySourcesRepeatingGroup) Add() NoUnderlyingDeliveryStreamCommoditySources {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingDeliveryStreamCommoditySources{g}
}

// Get returns the ith NoUnderlyingDeliveryStreamCommoditySources in the NoUnderlyingDeliveryStreamCommoditySourcesRepeatinGroup.
func (m NoUnderlyingDeliveryStreamCommoditySourcesRepeatingGroup) Get(i int) NoUnderlyingDeliveryStreamCommoditySources {
	return NoUnderlyingDeliveryStreamCommoditySources{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingDeliveryStreamCycles is a repeating group element, Tag 41804.
type NoUnderlyingDeliveryStreamCycles struct {
	*quickfix.Group
}

// SetUnderlyingDeliveryStreamCycleDesc sets UnderlyingDeliveryStreamCycleDesc, Tag 41805.
func (m NoUnderlyingDeliveryStreamCycles) SetUnderlyingDeliveryStreamCycleDesc(v string) {
	m.Set(field.NewUnderlyingDeliveryStreamCycleDesc(v))
}

// SetEncodedUnderlyingDeliveryStreamCycleDescLen sets EncodedUnderlyingDeliveryStreamCycleDescLen, Tag 41806.
func (m NoUnderlyingDeliveryStreamCycles) SetEncodedUnderlyingDeliveryStreamCycleDescLen(v int) {
	m.Set(field.NewEncodedUnderlyingDeliveryStreamCycleDescLen(v))
}

// SetEncodedUnderlyingDeliveryStreamCycleDesc sets EncodedUnderlyingDeliveryStreamCycleDesc, Tag 41807.
func (m NoUnderlyingDeliveryStreamCycles) SetEncodedUnderlyingDeliveryStreamCycleDesc(v string) {
	m.Set(field.NewEncodedUnderlyingDeliveryStreamCycleDesc(v))
}

// GetUnderlyingDeliveryStreamCycleDesc gets UnderlyingDeliveryStreamCycleDesc, Tag 41805.
func (m NoUnderlyingDeliveryStreamCycles) GetUnderlyingDeliveryStreamCycleDesc() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingDeliveryStreamCycleDescField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetEncodedUnderlyingDeliveryStreamCycleDescLen gets EncodedUnderlyingDeliveryStreamCycleDescLen, Tag 41806.
func (m NoUnderlyingDeliveryStreamCycles) GetEncodedUnderlyingDeliveryStreamCycleDescLen() (v int, err quickfix.MessageRejectError) {
	var f field.EncodedUnderlyingDeliveryStreamCycleDescLenField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetEncodedUnderlyingDeliveryStreamCycleDesc gets EncodedUnderlyingDeliveryStreamCycleDesc, Tag 41807.
func (m NoUnderlyingDeliveryStreamCycles) GetEncodedUnderlyingDeliveryStreamCycleDesc() (v string, err quickfix.MessageRejectError) {
	var f field.EncodedUnderlyingDeliveryStreamCycleDescField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingDeliveryStreamCycleDesc returns true if UnderlyingDeliveryStreamCycleDesc is present, Tag 41805.
func (m NoUnderlyingDeliveryStreamCycles) HasUnderlyingDeliveryStreamCycleDesc() bool {
	return m.Has(tag.UnderlyingDeliveryStreamCycleDesc)
}

// HasEncodedUnderlyingDeliveryStreamCycleDescLen returns true if EncodedUnderlyingDeliveryStreamCycleDescLen is present, Tag 41806.
func (m NoUnderlyingDeliveryStreamCycles) HasEncodedUnderlyingDeliveryStreamCycleDescLen() bool {
	return m.Has(tag.EncodedUnderlyingDeliveryStreamCycleDescLen)
}

// HasEncodedUnderlyingDeliveryStreamCycleDesc returns true if EncodedUnderlyingDeliveryStreamCycleDesc is present, Tag 41807.
func (m NoUnderlyingDeliveryStreamCycles) HasEncodedUnderlyingDeliveryStreamCycleDesc() bool {
	return m.Has(tag.EncodedUnderlyingDeliveryStreamCycleDesc)
}

// NoUnderlyingDeliveryStreamCyclesRepeatingGroup is a repeating group, Tag 41804.
type NoUnderlyingDeliveryStreamCyclesRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingDeliveryStreamCyclesRepeatingGroup returns an initialized, NoUnderlyingDeliveryStreamCyclesRepeatingGroup.
func NewNoUnderlyingDeliveryStreamCyclesRepeatingGroup() NoUnderlyingDeliveryStreamCyclesRepeatingGroup {
	return NoUnderlyingDeliveryStreamCyclesRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingDeliveryStreamCycles,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingDeliveryStreamCycleDesc),
				quickfix.GroupElement(tag.EncodedUnderlyingDeliveryStreamCycleDescLen),
				quickfix.GroupElement(tag.EncodedUnderlyingDeliveryStreamCycleDesc),
			},
		),
	}
}

// Add create and append a new NoUnderlyingDeliveryStreamCycles to this group.
func (m NoUnderlyingDeliveryStreamCyclesRepeatingGroup) Add() NoUnderlyingDeliveryStreamCycles {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingDeliveryStreamCycles{g}
}

// Get returns the ith NoUnderlyingDeliveryStreamCycles in the NoUnderlyingDeliveryStreamCyclesRepeatinGroup.
func (m NoUnderlyingDeliveryStreamCyclesRepeatingGroup) Get(i int) NoUnderlyingDeliveryStreamCycles {
	return NoUnderlyingDeliveryStreamCycles{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingDeliverySchedules is a repeating group element, Tag 41756.
type NoUnderlyingDeliverySchedules struct {
	*quickfix.Group
}

// SetUnderlyingDeliveryScheduleType sets UnderlyingDeliveryScheduleType, Tag 41757.
func (m NoUnderlyingDeliverySchedules) SetUnderlyingDeliveryScheduleType(v int) {
	m.Set(field.NewUnderlyingDeliveryScheduleType(v))
}

// SetUnderlyingDeliveryScheduleXID sets UnderlyingDeliveryScheduleXID, Tag 41758.
func (m NoUnderlyingDeliverySchedules) SetUnderlyingDeliveryScheduleXID(v string) {
	m.Set(field.NewUnderlyingDeliveryScheduleXID(v))
}

// SetUnderlyingDeliveryScheduleNotional sets UnderlyingDeliveryScheduleNotional, Tag 41759.
func (m NoUnderlyingDeliverySchedules) SetUnderlyingDeliveryScheduleNotional(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingDeliveryScheduleNotional(value, scale))
}

// SetUnderlyingDeliveryScheduleNotionalUnitOfMeasure sets UnderlyingDeliveryScheduleNotionalUnitOfMeasure, Tag 41760.
func (m NoUnderlyingDeliverySchedules) SetUnderlyingDeliveryScheduleNotionalUnitOfMeasure(v string) {
	m.Set(field.NewUnderlyingDeliveryScheduleNotionalUnitOfMeasure(v))
}

// SetUnderlyingDeliveryScheduleNotionalCommodityFrequency sets UnderlyingDeliveryScheduleNotionalCommodityFrequency, Tag 41761.
func (m NoUnderlyingDeliverySchedules) SetUnderlyingDeliveryScheduleNotionalCommodityFrequency(v int) {
	m.Set(field.NewUnderlyingDeliveryScheduleNotionalCommodityFrequency(v))
}

// SetUnderlyingDeliveryScheduleNegativeTolerance sets UnderlyingDeliveryScheduleNegativeTolerance, Tag 41762.
func (m NoUnderlyingDeliverySchedules) SetUnderlyingDeliveryScheduleNegativeTolerance(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingDeliveryScheduleNegativeTolerance(value, scale))
}

// SetUnderlyingDeliverySchedulePositiveTolerance sets UnderlyingDeliverySchedulePositiveTolerance, Tag 41763.
func (m NoUnderlyingDeliverySchedules) SetUnderlyingDeliverySchedulePositiveTolerance(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingDeliverySchedulePositiveTolerance(value, scale))
}

// SetUnderlyingDeliveryScheduleToleranceUnitOfMeasure sets UnderlyingDeliveryScheduleToleranceUnitOfMeasure, Tag 41764.
func (m NoUnderlyingDeliverySchedules) SetUnderlyingDeliveryScheduleToleranceUnitOfMeasure(v string) {
	m.Set(field.NewUnderlyingDeliveryScheduleToleranceUnitOfMeasure(v))
}

// SetUnderlyingDeliveryScheduleToleranceType sets UnderlyingDeliveryScheduleToleranceType, Tag 41765.
func (m NoUnderlyingDeliverySchedules) SetUnderlyingDeliveryScheduleToleranceType(v int) {
	m.Set(field.NewUnderlyingDeliveryScheduleToleranceType(v))
}

// SetUnderlyingDeliveryScheduleSettlCountry sets UnderlyingDeliveryScheduleSettlCountry, Tag 41766.
func (m NoUnderlyingDeliverySchedules) SetUnderlyingDeliveryScheduleSettlCountry(v string) {
	m.Set(field.NewUnderlyingDeliveryScheduleSettlCountry(v))
}

// SetUnderlyingDeliveryScheduleSettlTimeZone sets UnderlyingDeliveryScheduleSettlTimeZone, Tag 41767.
func (m NoUnderlyingDeliverySchedules) SetUnderlyingDeliveryScheduleSettlTimeZone(v string) {
	m.Set(field.NewUnderlyingDeliveryScheduleSettlTimeZone(v))
}

// SetUnderlyingDeliveryScheduleSettlFlowType sets UnderlyingDeliveryScheduleSettlFlowType, Tag 41768.
func (m NoUnderlyingDeliverySchedules) SetUnderlyingDeliveryScheduleSettlFlowType(v int) {
	m.Set(field.NewUnderlyingDeliveryScheduleSettlFlowType(v))
}

// SetUnderlyingDeliveryScheduleSettlHolidaysProcessingInstruction sets UnderlyingDeliveryScheduleSettlHolidaysProcessingInstruction, Tag 41769.
func (m NoUnderlyingDeliverySchedules) SetUnderlyingDeliveryScheduleSettlHolidaysProcessingInstruction(v int) {
	m.Set(field.NewUnderlyingDeliveryScheduleSettlHolidaysProcessingInstruction(v))
}

// SetNoUnderlyingDeliveryScheduleSettlDays sets NoUnderlyingDeliveryScheduleSettlDays, Tag 41770.
func (m NoUnderlyingDeliverySchedules) SetNoUnderlyingDeliveryScheduleSettlDays(f NoUnderlyingDeliveryScheduleSettlDaysRepeatingGroup) {
	m.SetGroup(f)
}

// GetUnderlyingDeliveryScheduleType gets UnderlyingDeliveryScheduleType, Tag 41757.
func (m NoUnderlyingDeliverySchedules) GetUnderlyingDeliveryScheduleType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingDeliveryScheduleTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDeliveryScheduleXID gets UnderlyingDeliveryScheduleXID, Tag 41758.
func (m NoUnderlyingDeliverySchedules) GetUnderlyingDeliveryScheduleXID() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingDeliveryScheduleXIDField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDeliveryScheduleNotional gets UnderlyingDeliveryScheduleNotional, Tag 41759.
func (m NoUnderlyingDeliverySchedules) GetUnderlyingDeliveryScheduleNotional() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingDeliveryScheduleNotionalField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDeliveryScheduleNotionalUnitOfMeasure gets UnderlyingDeliveryScheduleNotionalUnitOfMeasure, Tag 41760.
func (m NoUnderlyingDeliverySchedules) GetUnderlyingDeliveryScheduleNotionalUnitOfMeasure() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingDeliveryScheduleNotionalUnitOfMeasureField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDeliveryScheduleNotionalCommodityFrequency gets UnderlyingDeliveryScheduleNotionalCommodityFrequency, Tag 41761.
func (m NoUnderlyingDeliverySchedules) GetUnderlyingDeliveryScheduleNotionalCommodityFrequency() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingDeliveryScheduleNotionalCommodityFrequencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDeliveryScheduleNegativeTolerance gets UnderlyingDeliveryScheduleNegativeTolerance, Tag 41762.
func (m NoUnderlyingDeliverySchedules) GetUnderlyingDeliveryScheduleNegativeTolerance() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingDeliveryScheduleNegativeToleranceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDeliverySchedulePositiveTolerance gets UnderlyingDeliverySchedulePositiveTolerance, Tag 41763.
func (m NoUnderlyingDeliverySchedules) GetUnderlyingDeliverySchedulePositiveTolerance() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingDeliverySchedulePositiveToleranceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDeliveryScheduleToleranceUnitOfMeasure gets UnderlyingDeliveryScheduleToleranceUnitOfMeasure, Tag 41764.
func (m NoUnderlyingDeliverySchedules) GetUnderlyingDeliveryScheduleToleranceUnitOfMeasure() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingDeliveryScheduleToleranceUnitOfMeasureField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDeliveryScheduleToleranceType gets UnderlyingDeliveryScheduleToleranceType, Tag 41765.
func (m NoUnderlyingDeliverySchedules) GetUnderlyingDeliveryScheduleToleranceType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingDeliveryScheduleToleranceTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDeliveryScheduleSettlCountry gets UnderlyingDeliveryScheduleSettlCountry, Tag 41766.
func (m NoUnderlyingDeliverySchedules) GetUnderlyingDeliveryScheduleSettlCountry() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingDeliveryScheduleSettlCountryField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDeliveryScheduleSettlTimeZone gets UnderlyingDeliveryScheduleSettlTimeZone, Tag 41767.
func (m NoUnderlyingDeliverySchedules) GetUnderlyingDeliveryScheduleSettlTimeZone() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingDeliveryScheduleSettlTimeZoneField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDeliveryScheduleSettlFlowType gets UnderlyingDeliveryScheduleSettlFlowType, Tag 41768.
func (m NoUnderlyingDeliverySchedules) GetUnderlyingDeliveryScheduleSettlFlowType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingDeliveryScheduleSettlFlowTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDeliveryScheduleSettlHolidaysProcessingInstruction gets UnderlyingDeliveryScheduleSettlHolidaysProcessingInstruction, Tag 41769.
func (m NoUnderlyingDeliverySchedules) GetUnderlyingDeliveryScheduleSettlHolidaysProcessingInstruction() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingDeliveryScheduleSettlHolidaysProcessingInstructionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUnderlyingDeliveryScheduleSettlDays gets NoUnderlyingDeliveryScheduleSettlDays, Tag 41770.
func (m NoUnderlyingDeliverySchedules) GetNoUnderlyingDeliveryScheduleSettlDays() (NoUnderlyingDeliveryScheduleSettlDaysRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingDeliveryScheduleSettlDaysRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// HasUnderlyingDeliveryScheduleType returns true if UnderlyingDeliveryScheduleType is present, Tag 41757.
func (m NoUnderlyingDeliverySchedules) HasUnderlyingDeliveryScheduleType() bool {
	return m.Has(tag.UnderlyingDeliveryScheduleType)
}

// HasUnderlyingDeliveryScheduleXID returns true if UnderlyingDeliveryScheduleXID is present, Tag 41758.
func (m NoUnderlyingDeliverySchedules) HasUnderlyingDeliveryScheduleXID() bool {
	return m.Has(tag.UnderlyingDeliveryScheduleXID)
}

// HasUnderlyingDeliveryScheduleNotional returns true if UnderlyingDeliveryScheduleNotional is present, Tag 41759.
func (m NoUnderlyingDeliverySchedules) HasUnderlyingDeliveryScheduleNotional() bool {
	return m.Has(tag.UnderlyingDeliveryScheduleNotional)
}

// HasUnderlyingDeliveryScheduleNotionalUnitOfMeasure returns true if UnderlyingDeliveryScheduleNotionalUnitOfMeasure is present, Tag 41760.
func (m NoUnderlyingDeliverySchedules) HasUnderlyingDeliveryScheduleNotionalUnitOfMeasure() bool {
	return m.Has(tag.UnderlyingDeliveryScheduleNotionalUnitOfMeasure)
}

// HasUnderlyingDeliveryScheduleNotionalCommodityFrequency returns true if UnderlyingDeliveryScheduleNotionalCommodityFrequency is present, Tag 41761.
func (m NoUnderlyingDeliverySchedules) HasUnderlyingDeliveryScheduleNotionalCommodityFrequency() bool {
	return m.Has(tag.UnderlyingDeliveryScheduleNotionalCommodityFrequency)
}

// HasUnderlyingDeliveryScheduleNegativeTolerance returns true if UnderlyingDeliveryScheduleNegativeTolerance is present, Tag 41762.
func (m NoUnderlyingDeliverySchedules) HasUnderlyingDeliveryScheduleNegativeTolerance() bool {
	return m.Has(tag.UnderlyingDeliveryScheduleNegativeTolerance)
}

// HasUnderlyingDeliverySchedulePositiveTolerance returns true if UnderlyingDeliverySchedulePositiveTolerance is present, Tag 41763.
func (m NoUnderlyingDeliverySchedules) HasUnderlyingDeliverySchedulePositiveTolerance() bool {
	return m.Has(tag.UnderlyingDeliverySchedulePositiveTolerance)
}

// HasUnderlyingDeliveryScheduleToleranceUnitOfMeasure returns true if UnderlyingDeliveryScheduleToleranceUnitOfMeasure is present, Tag 41764.
func (m NoUnderlyingDeliverySchedules) HasUnderlyingDeliveryScheduleToleranceUnitOfMeasure() bool {
	return m.Has(tag.UnderlyingDeliveryScheduleToleranceUnitOfMeasure)
}

// HasUnderlyingDeliveryScheduleToleranceType returns true if UnderlyingDeliveryScheduleToleranceType is present, Tag 41765.
func (m NoUnderlyingDeliverySchedules) HasUnderlyingDeliveryScheduleToleranceType() bool {
	return m.Has(tag.UnderlyingDeliveryScheduleToleranceType)
}

// HasUnderlyingDeliveryScheduleSettlCountry returns true if UnderlyingDeliveryScheduleSettlCountry is present, Tag 41766.
func (m NoUnderlyingDeliverySchedules) HasUnderlyingDeliveryScheduleSettlCountry() bool {
	return m.Has(tag.UnderlyingDeliveryScheduleSettlCountry)
}

// HasUnderlyingDeliveryScheduleSettlTimeZone returns true if UnderlyingDeliveryScheduleSettlTimeZone is present, Tag 41767.
func (m NoUnderlyingDeliverySchedules) HasUnderlyingDeliveryScheduleSettlTimeZone() bool {
	return m.Has(tag.UnderlyingDeliveryScheduleSettlTimeZone)
}

// HasUnderlyingDeliveryScheduleSettlFlowType returns true if UnderlyingDeliveryScheduleSettlFlowType is present, Tag 41768.
func (m NoUnderlyingDeliverySchedules) HasUnderlyingDeliveryScheduleSettlFlowType() bool {
	return m.Has(tag.UnderlyingDeliveryScheduleSettlFlowType)
}

// HasUnderlyingDeliveryScheduleSettlHolidaysProcessingInstruction returns true if UnderlyingDeliveryScheduleSettlHolidaysProcessingInstruction is present, Tag 41769.
func (m NoUnderlyingDeliverySchedules) HasUnderlyingDeliveryScheduleSettlHolidaysProcessingInstruction() bool {
	return m.Has(tag.UnderlyingDeliveryScheduleSettlHolidaysProcessingInstruction)
}

// HasNoUnderlyingDeliveryScheduleSettlDays returns true if NoUnderlyingDeliveryScheduleSettlDays is present, Tag 41770.
func (m NoUnderlyingDeliverySchedules) HasNoUnderlyingDeliveryScheduleSettlDays() bool {
	return m.Has(tag.NoUnderlyingDeliveryScheduleSettlDays)
}

// NoUnderlyingDeliveryScheduleSettlDays is a repeating group element, Tag 41770.
type NoUnderlyingDeliveryScheduleSettlDays struct {
	*quickfix.Group
}

// SetUnderlyingDeliveryScheduleSettlDay sets UnderlyingDeliveryScheduleSettlDay, Tag 41771.
func (m NoUnderlyingDeliveryScheduleSettlDays) SetUnderlyingDeliveryScheduleSettlDay(v int) {
	m.Set(field.NewUnderlyingDeliveryScheduleSettlDay(v))
}

// SetUnderlyingDeliveryScheduleSettlTotalHours sets UnderlyingDeliveryScheduleSettlTotalHours, Tag 41772.
func (m NoUnderlyingDeliveryScheduleSettlDays) SetUnderlyingDeliveryScheduleSettlTotalHours(v int) {
	m.Set(field.NewUnderlyingDeliveryScheduleSettlTotalHours(v))
}

// SetNoUnderlyingDeliveryScheduleSettlTimes sets NoUnderlyingDeliveryScheduleSettlTimes, Tag 41773.
func (m NoUnderlyingDeliveryScheduleSettlDays) SetNoUnderlyingDeliveryScheduleSettlTimes(f NoUnderlyingDeliveryScheduleSettlTimesRepeatingGroup) {
	m.SetGroup(f)
}

// GetUnderlyingDeliveryScheduleSettlDay gets UnderlyingDeliveryScheduleSettlDay, Tag 41771.
func (m NoUnderlyingDeliveryScheduleSettlDays) GetUnderlyingDeliveryScheduleSettlDay() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingDeliveryScheduleSettlDayField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDeliveryScheduleSettlTotalHours gets UnderlyingDeliveryScheduleSettlTotalHours, Tag 41772.
func (m NoUnderlyingDeliveryScheduleSettlDays) GetUnderlyingDeliveryScheduleSettlTotalHours() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingDeliveryScheduleSettlTotalHoursField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUnderlyingDeliveryScheduleSettlTimes gets NoUnderlyingDeliveryScheduleSettlTimes, Tag 41773.
func (m NoUnderlyingDeliveryScheduleSettlDays) GetNoUnderlyingDeliveryScheduleSettlTimes() (NoUnderlyingDeliveryScheduleSettlTimesRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingDeliveryScheduleSettlTimesRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// HasUnderlyingDeliveryScheduleSettlDay returns true if UnderlyingDeliveryScheduleSettlDay is present, Tag 41771.
func (m NoUnderlyingDeliveryScheduleSettlDays) HasUnderlyingDeliveryScheduleSettlDay() bool {
	return m.Has(tag.UnderlyingDeliveryScheduleSettlDay)
}

// HasUnderlyingDeliveryScheduleSettlTotalHours returns true if UnderlyingDeliveryScheduleSettlTotalHours is present, Tag 41772.
func (m NoUnderlyingDeliveryScheduleSettlDays) HasUnderlyingDeliveryScheduleSettlTotalHours() bool {
	return m.Has(tag.UnderlyingDeliveryScheduleSettlTotalHours)
}

// HasNoUnderlyingDeliveryScheduleSettlTimes returns true if NoUnderlyingDeliveryScheduleSettlTimes is present, Tag 41773.
func (m NoUnderlyingDeliveryScheduleSettlDays) HasNoUnderlyingDeliveryScheduleSettlTimes() bool {
	return m.Has(tag.NoUnderlyingDeliveryScheduleSettlTimes)
}

// NoUnderlyingDeliveryScheduleSettlTimes is a repeating group element, Tag 41773.
type NoUnderlyingDeliveryScheduleSettlTimes struct {
	*quickfix.Group
}

// SetUnderlyingDeliveryScheduleSettlStart sets UnderlyingDeliveryScheduleSettlStart, Tag 41774.
func (m NoUnderlyingDeliveryScheduleSettlTimes) SetUnderlyingDeliveryScheduleSettlStart(v string) {
	m.Set(field.NewUnderlyingDeliveryScheduleSettlStart(v))
}

// SetUnderlyingDeliveryScheduleSettlEnd sets UnderlyingDeliveryScheduleSettlEnd, Tag 41775.
func (m NoUnderlyingDeliveryScheduleSettlTimes) SetUnderlyingDeliveryScheduleSettlEnd(v string) {
	m.Set(field.NewUnderlyingDeliveryScheduleSettlEnd(v))
}

// SetUnderlyingDeliveryScheduleSettlTimeType sets UnderlyingDeliveryScheduleSettlTimeType, Tag 41776.
func (m NoUnderlyingDeliveryScheduleSettlTimes) SetUnderlyingDeliveryScheduleSettlTimeType(v int) {
	m.Set(field.NewUnderlyingDeliveryScheduleSettlTimeType(v))
}

// GetUnderlyingDeliveryScheduleSettlStart gets UnderlyingDeliveryScheduleSettlStart, Tag 41774.
func (m NoUnderlyingDeliveryScheduleSettlTimes) GetUnderlyingDeliveryScheduleSettlStart() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingDeliveryScheduleSettlStartField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDeliveryScheduleSettlEnd gets UnderlyingDeliveryScheduleSettlEnd, Tag 41775.
func (m NoUnderlyingDeliveryScheduleSettlTimes) GetUnderlyingDeliveryScheduleSettlEnd() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingDeliveryScheduleSettlEndField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDeliveryScheduleSettlTimeType gets UnderlyingDeliveryScheduleSettlTimeType, Tag 41776.
func (m NoUnderlyingDeliveryScheduleSettlTimes) GetUnderlyingDeliveryScheduleSettlTimeType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingDeliveryScheduleSettlTimeTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingDeliveryScheduleSettlStart returns true if UnderlyingDeliveryScheduleSettlStart is present, Tag 41774.
func (m NoUnderlyingDeliveryScheduleSettlTimes) HasUnderlyingDeliveryScheduleSettlStart() bool {
	return m.Has(tag.UnderlyingDeliveryScheduleSettlStart)
}

// HasUnderlyingDeliveryScheduleSettlEnd returns true if UnderlyingDeliveryScheduleSettlEnd is present, Tag 41775.
func (m NoUnderlyingDeliveryScheduleSettlTimes) HasUnderlyingDeliveryScheduleSettlEnd() bool {
	return m.Has(tag.UnderlyingDeliveryScheduleSettlEnd)
}

// HasUnderlyingDeliveryScheduleSettlTimeType returns true if UnderlyingDeliveryScheduleSettlTimeType is present, Tag 41776.
func (m NoUnderlyingDeliveryScheduleSettlTimes) HasUnderlyingDeliveryScheduleSettlTimeType() bool {
	return m.Has(tag.UnderlyingDeliveryScheduleSettlTimeType)
}

// NoUnderlyingDeliveryScheduleSettlTimesRepeatingGroup is a repeating group, Tag 41773.
type NoUnderlyingDeliveryScheduleSettlTimesRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingDeliveryScheduleSettlTimesRepeatingGroup returns an initialized, NoUnderlyingDeliveryScheduleSettlTimesRepeatingGroup.
func NewNoUnderlyingDeliveryScheduleSettlTimesRepeatingGroup() NoUnderlyingDeliveryScheduleSettlTimesRepeatingGroup {
	return NoUnderlyingDeliveryScheduleSettlTimesRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingDeliveryScheduleSettlTimes,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingDeliveryScheduleSettlStart),
				quickfix.GroupElement(tag.UnderlyingDeliveryScheduleSettlEnd),
				quickfix.GroupElement(tag.UnderlyingDeliveryScheduleSettlTimeType),
			},
		),
	}
}

// Add create and append a new NoUnderlyingDeliveryScheduleSettlTimes to this group.
func (m NoUnderlyingDeliveryScheduleSettlTimesRepeatingGroup) Add() NoUnderlyingDeliveryScheduleSettlTimes {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingDeliveryScheduleSettlTimes{g}
}

// Get returns the ith NoUnderlyingDeliveryScheduleSettlTimes in the NoUnderlyingDeliveryScheduleSettlTimesRepeatinGroup.
func (m NoUnderlyingDeliveryScheduleSettlTimesRepeatingGroup) Get(i int) NoUnderlyingDeliveryScheduleSettlTimes {
	return NoUnderlyingDeliveryScheduleSettlTimes{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingDeliveryScheduleSettlDaysRepeatingGroup is a repeating group, Tag 41770.
type NoUnderlyingDeliveryScheduleSettlDaysRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingDeliveryScheduleSettlDaysRepeatingGroup returns an initialized, NoUnderlyingDeliveryScheduleSettlDaysRepeatingGroup.
func NewNoUnderlyingDeliveryScheduleSettlDaysRepeatingGroup() NoUnderlyingDeliveryScheduleSettlDaysRepeatingGroup {
	return NoUnderlyingDeliveryScheduleSettlDaysRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingDeliveryScheduleSettlDays,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingDeliveryScheduleSettlDay),
				quickfix.GroupElement(tag.UnderlyingDeliveryScheduleSettlTotalHours),
				NewNoUnderlyingDeliveryScheduleSettlTimesRepeatingGroup(),
			},
		),
	}
}

// Add create and append a new NoUnderlyingDeliveryScheduleSettlDays to this group.
func (m NoUnderlyingDeliveryScheduleSettlDaysRepeatingGroup) Add() NoUnderlyingDeliveryScheduleSettlDays {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingDeliveryScheduleSettlDays{g}
}

// Get returns the ith NoUnderlyingDeliveryScheduleSettlDays in the NoUnderlyingDeliveryScheduleSettlDaysRepeatinGroup.
func (m NoUnderlyingDeliveryScheduleSettlDaysRepeatingGroup) Get(i int) NoUnderlyingDeliveryScheduleSettlDays {
	return NoUnderlyingDeliveryScheduleSettlDays{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingDeliverySchedulesRepeatingGroup is a repeating group, Tag 41756.
type NoUnderlyingDeliverySchedulesRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingDeliverySchedulesRepeatingGroup returns an initialized, NoUnderlyingDeliverySchedulesRepeatingGroup.
func NewNoUnderlyingDeliverySchedulesRepeatingGroup() NoUnderlyingDeliverySchedulesRepeatingGroup {
	return NoUnderlyingDeliverySchedulesRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingDeliverySchedules,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingDeliveryScheduleType),
				quickfix.GroupElement(tag.UnderlyingDeliveryScheduleXID),
				quickfix.GroupElement(tag.UnderlyingDeliveryScheduleNotional),
				quickfix.GroupElement(tag.UnderlyingDeliveryScheduleNotionalUnitOfMeasure),
				quickfix.GroupElement(tag.UnderlyingDeliveryScheduleNotionalCommodityFrequency),
				quickfix.GroupElement(tag.UnderlyingDeliveryScheduleNegativeTolerance),
				quickfix.GroupElement(tag.UnderlyingDeliverySchedulePositiveTolerance),
				quickfix.GroupElement(tag.UnderlyingDeliveryScheduleToleranceUnitOfMeasure),
				quickfix.GroupElement(tag.UnderlyingDeliveryScheduleToleranceType),
				quickfix.GroupElement(tag.UnderlyingDeliveryScheduleSettlCountry),
				quickfix.GroupElement(tag.UnderlyingDeliveryScheduleSettlTimeZone),
				quickfix.GroupElement(tag.UnderlyingDeliveryScheduleSettlFlowType),
				quickfix.GroupElement(tag.UnderlyingDeliveryScheduleSettlHolidaysProcessingInstruction),
				NewNoUnderlyingDeliveryScheduleSettlDaysRepeatingGroup(),
			},
		),
	}
}

// Add create and append a new NoUnderlyingDeliverySchedules to this group.
func (m NoUnderlyingDeliverySchedulesRepeatingGroup) Add() NoUnderlyingDeliverySchedules {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingDeliverySchedules{g}
}

// Get returns the ith NoUnderlyingDeliverySchedules in the NoUnderlyingDeliverySchedulesRepeatinGroup.
func (m NoUnderlyingDeliverySchedulesRepeatingGroup) Get(i int) NoUnderlyingDeliverySchedules {
	return NoUnderlyingDeliverySchedules{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingStreamsRepeatingGroup is a repeating group, Tag 40540.
type NoUnderlyingStreamsRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingStreamsRepeatingGroup returns an initialized, NoUnderlyingStreamsRepeatingGroup.
func NewNoUnderlyingStreamsRepeatingGroup() NoUnderlyingStreamsRepeatingGroup {
	return NoUnderlyingStreamsRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingStreams,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingStreamType),
				quickfix.GroupElement(tag.UnderlyingStreamDesc),
				quickfix.GroupElement(tag.UnderlyingStreamPaySide),
				quickfix.GroupElement(tag.UnderlyingStreamReceiveSide),
				quickfix.GroupElement(tag.UnderlyingStreamNotional),
				quickfix.GroupElement(tag.UnderlyingStreamCurrency),
				quickfix.GroupElement(tag.UnderlyingStreamEffectiveDateUnadjusted),
				quickfix.GroupElement(tag.UnderlyingStreamEffectiveDateBusinessDayConvention),
				NewNoUnderlyingStreamEffectiveDateBusinessCentersRepeatingGroup(),
				quickfix.GroupElement(tag.UnderlyingStreamEffectiveDateRelativeTo),
				quickfix.GroupElement(tag.UnderlyingStreamEffectiveDateOffsetPeriod),
				quickfix.GroupElement(tag.UnderlyingStreamEffectiveDateOffsetUnit),
				quickfix.GroupElement(tag.UnderlyingStreamEffectiveDateOffsetDayType),
				quickfix.GroupElement(tag.UnderlyingStreamEffectiveDateAdjusted),
				quickfix.GroupElement(tag.UnderlyingStreamTerminationDateUnadjusted),
				quickfix.GroupElement(tag.UnderlyingStreamTerminationDateBusinessDayConvention),
				NewNoUnderlyingStreamTerminationDateBusinessCentersRepeatingGroup(),
				quickfix.GroupElement(tag.UnderlyingStreamTerminationDateRelativeTo),
				quickfix.GroupElement(tag.UnderlyingStreamTerminationDateOffsetPeriod),
				quickfix.GroupElement(tag.UnderlyingStreamTerminationDateOffsetUnit),
				quickfix.GroupElement(tag.UnderlyingStreamTerminationDateOffsetDayType),
				quickfix.GroupElement(tag.UnderlyingStreamTerminationDateAdjusted),
				quickfix.GroupElement(tag.UnderlyingStreamCalculationPeriodBusinessDayConvention),
				NewNoUnderlyingStreamCalculationPeriodBusinessCentersRepeatingGroup(),
				quickfix.GroupElement(tag.UnderlyingStreamFirstPeriodStartDateUnadjusted),
				quickfix.GroupElement(tag.UnderlyingStreamFirstPeriodStartDateBusinessDayConvention),
				NewNoUnderlyingStreamFirstPeriodStartDateBusinessCentersRepeatingGroup(),
				quickfix.GroupElement(tag.UnderlyingStreamFirstPeriodStartDateAdjusted),
				quickfix.GroupElement(tag.UnderlyingStreamFirstRegularPeriodStartDateUnadjusted),
				quickfix.GroupElement(tag.UnderlyingStreamFirstCompoundingPeriodEndDateUnadjusted),
				quickfix.GroupElement(tag.UnderlyingStreamLastRegularPeriodEndDateUnadjusted),
				quickfix.GroupElement(tag.UnderlyingStreamCalculationFrequencyPeriod),
				quickfix.GroupElement(tag.UnderlyingStreamCalculationFrequencyUnit),
				quickfix.GroupElement(tag.UnderlyingStreamCalculationRollConvention),
				quickfix.GroupElement(tag.UnderlyingStreamCalculationPeriodDatesXID),
				quickfix.GroupElement(tag.UnderlyingStreamCalculationPeriodDatesXIDRef),
				NewNoUnderlyingStreamCalculationPeriodDatesRepeatingGroup(),
				quickfix.GroupElement(tag.UnderlyingStreamCalculationBalanceOfFirstPeriod),
				quickfix.GroupElement(tag.UnderlyingStreamCalculationCorrectionPeriod),
				quickfix.GroupElement(tag.UnderlyingStreamCalculationCorrectionUnit),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamType),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamMarketRate),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamDelayIndicator),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamSettlCurrency),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamDayCount),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamAccrualDays),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamDiscountType),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamDiscountRate),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamDiscountRateDayCount),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamCompoundingMethod),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamInitialPrincipalExchangeIndicator),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamInterimPrincipalExchangeIndicator),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamFinalPrincipalExchangeIndicator),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamPaymentDateBusinessDayConvention),
				NewNoUnderlyingPaymentStreamPaymentDateBusinessCentersRepeatingGroup(),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamPaymentFrequencyPeriod),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamPaymentFrequencyUnit),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamPaymentRollConvention),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamFirstPaymentDateUnadjusted),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamLastRegularPaymentDateUnadjusted),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamPaymentDateRelativeTo),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamPaymentDateOffsetPeriod),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamPaymentDateOffsetUnit),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamPaymentDateOffsetDayType),
				NewNoUnderlyingPaymentStreamPaymentDatesRepeatingGroup(),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamMasterAgreementPaymentDatesIndicator),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamFinalPricePaymentDateUnadjusted),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamFinalPricePaymentDateRelativeTo),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamFinalPricePaymentDateOffsetPeriod),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamFinalPricePaymentDateOffsetUnit),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamFinalPricePaymentDateOffsetDayType),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamFinalPricePaymentDateAdjusted),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamResetDateRelativeTo),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamResetDateBusinessDayConvention),
				NewNoUnderlyingPaymentStreamResetDateBusinessCentersRepeatingGroup(),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamResetFrequencyPeriod),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamResetFrequencyUnit),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamResetWeeklyRollConvention),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamInitialFixingDateRelativeTo),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamInitialFixingDateBusinessDayConvention),
				NewNoUnderlyingPaymentStreamInitialFixingDateBusinessCentersRepeatingGroup(),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamInitialFixingDateOffsetPeriod),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamInitialFixingDateOffsetUnit),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamInitialFixingDateOffsetDayType),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamInitialFixingDateAdjusted),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamFixingDateRelativeTo),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamFixingDateBusinessDayConvention),
				NewNoUnderlyingPaymentStreamFixingDateBusinessCentersRepeatingGroup(),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamFixingDateOffsetPeriod),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamFixingDateOffsetUnit),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamFixingDateOffsetDayType),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamFixingDateAdjusted),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamRateCutoffDateOffsetPeriod),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamRateCutoffDateOffsetUnit),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamRateCutoffDateOffsetDayType),
				NewNoUnderlyingPaymentStreamFixingDatesRepeatingGroup(),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamRate),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamFixedAmount),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamRateOrAmountCurrency),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamFutureValueNotional),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamFutureValueDateAdjusted),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamFixedAmountUnitOfMeasure),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamTotalFixedAmount),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamWorldScaleRate),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamContractPrice),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamContractPriceCurrency),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamRateIndex),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamRateIndexSource),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamRateIndexCurveUnit),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamRateIndexCurvePeriod),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamRateMultiplier),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamRateSpread),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamRateSpreadPositionType),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamRateTreatment),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamCapRate),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamCapRateBuySide),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamCapRateSellSide),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamFloorRate),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamFloorRateBuySide),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamFloorRateSellSide),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamInitialRate),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamFinalRateRoundingDirection),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamFinalRatePrecision),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamAveragingMethod),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamNegativeRateTreatment),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamInflationLagPeriod),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamInflationLagUnit),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamInflationLagDayType),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamInflationInterpolationMethod),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamInflationIndexSource),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamInflationPublicationSource),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamInflationInitialIndexLevel),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamInflationFallbackBondApplicable),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamFRADiscounting),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamRateIndex2CurveUnit),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamRateIndex2CurvePeriod),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamRateIndexLocation),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamRateIndexLevel),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamRateIndexUnitOfMeasure),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamSettlLevel),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamReferenceLevel),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamReferenceLevelUnitOfMeasure),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamReferenceLevelEqualsZeroIndicator),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamRateSpreadCurrency),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamRateSpreadUnitOfMeasure),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamRateConversionFactor),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamRateSpreadType),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamLastResetRate),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamFinalRate),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamCalculationLagPeriod),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamCalculationLagUnit),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamFirstObservationDateOffsetPeriod),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamFirstObservationDateOffsetUnit),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamPricingDayType),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamPricingDayDistribution),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamPricingDayCount),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamPricingBusinessCalendar),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamPricingBusinessDayConvention),
				NewNoUnderlyingPaymentStreamPricingBusinessCentersRepeatingGroup(),
				NewNoUnderlyingPaymentStreamPricingDaysRepeatingGroup(),
				NewNoUnderlyingPaymentStreamPricingDatesRepeatingGroup(),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamFirstObservationDateUnadjusted),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamFirstObservationDateRelativeTo),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamFirstObservationDateOffsetDayType),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamFirstObservationDateAdjusted),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamUnderlierRefID),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamFormulaCurrency),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamFormulaCurrencyDeterminationMethod),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamFormulaReferenceAmount),
				NewNoUnderlyingPaymentStreamFormulasRepeatingGroup(),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamFormulaImageLength),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamFormulaImage),
				quickfix.GroupElement(tag.UnderlyingDividendReinvestmentIndicator),
				quickfix.GroupElement(tag.UnderlyingDividendEntitlementEvent),
				quickfix.GroupElement(tag.UnderlyingDividendAmountType),
				quickfix.GroupElement(tag.UnderlyingDividendUnderlierRefID),
				NewNoUnderlyingDividendPeriodsRepeatingGroup(),
				quickfix.GroupElement(tag.UnderlyingExtraordinaryDividendPartySide),
				quickfix.GroupElement(tag.UnderlyingExtraordinaryDividendAmountType),
				quickfix.GroupElement(tag.UnderlyingExtraordinaryDividendCurrency),
				quickfix.GroupElement(tag.UnderlyingExtraordinaryDividendDeterminationMethod),
				quickfix.GroupElement(tag.UnderlyingDividendFXTriggerDateRelativeTo),
				quickfix.GroupElement(tag.UnderlyingDividendFXTriggerDateOffsetPeriod),
				quickfix.GroupElement(tag.UnderlyingDividendFXTriggerDateOffsetUnit),
				quickfix.GroupElement(tag.UnderlyingDividendFXTriggerDateOffsetDayType),
				quickfix.GroupElement(tag.UnderlyingDividendFXTriggerDateUnadjusted),
				quickfix.GroupElement(tag.UnderlyingDividendFXTriggerDateBusinessDayConvention),
				NewNoUnderlyingDividendFXTriggerDateBusinessCentersRepeatingGroup(),
				quickfix.GroupElement(tag.UnderlyingDividendFXTriggerDateAdjusted),
				quickfix.GroupElement(tag.UnderlyingDividendFloatingRateIndex),
				quickfix.GroupElement(tag.UnderlyingDividendFloatingRateIndexCurvePeriod),
				quickfix.GroupElement(tag.UnderlyingDividendFloatingRateIndexCurveUnit),
				quickfix.GroupElement(tag.UnderlyingDividendFloatingRateMultiplier),
				quickfix.GroupElement(tag.UnderlyingDividendFloatingRateSpread),
				quickfix.GroupElement(tag.UnderlyingDividendFloatingRateSpreadPositionType),
				quickfix.GroupElement(tag.UnderlyingDividendFloatingRateTreatment),
				quickfix.GroupElement(tag.UnderlyingDividendCapRate),
				quickfix.GroupElement(tag.UnderlyingDividendCapRateBuySide),
				quickfix.GroupElement(tag.UnderlyingDividendCapRateSellSide),
				quickfix.GroupElement(tag.UnderlyingDividendFloorRate),
				quickfix.GroupElement(tag.UnderlyingDividendFloorRateBuySide),
				quickfix.GroupElement(tag.UnderlyingDividendFloorRateSellSide),
				quickfix.GroupElement(tag.UnderlyingDividendInitialRate),
				quickfix.GroupElement(tag.UnderlyingDividendFinalRateRoundingDirection),
				quickfix.GroupElement(tag.UnderlyingDividendFinalRatePrecision),
				quickfix.GroupElement(tag.UnderlyingDividendAveragingMethod),
				quickfix.GroupElement(tag.UnderlyingDividendNegativeRateTreatment),
				quickfix.GroupElement(tag.UnderlyingDividendAccrualFixedRate),
				quickfix.GroupElement(tag.UnderlyingDividendAccrualPaymentDateRelativeTo),
				quickfix.GroupElement(tag.UnderlyingDividendAccrualPaymentDateOffsetPeriod),
				quickfix.GroupElement(tag.UnderlyingDividendAccrualPaymentDateOffsetUnit),
				quickfix.GroupElement(tag.UnderlyingDividendAccrualPaymentDateOffsetDayType),
				quickfix.GroupElement(tag.UnderlyingDividendAccrualPaymentDateUnadjusted),
				quickfix.GroupElement(tag.UnderlyingDividendAccrualPaymentDateBusinessDayConvention),
				NewNoUnderlyingDividendAccrualPaymentDateBusinessCentersRepeatingGroup(),
				quickfix.GroupElement(tag.UnderlyingDividendAccrualPaymentDateAdjusted),
				quickfix.GroupElement(tag.UnderlyingDividendCompoundingMethod),
				quickfix.GroupElement(tag.UnderlyingDividendNumOfIndexUnits),
				quickfix.GroupElement(tag.UnderlyingDividendCashPercentage),
				quickfix.GroupElement(tag.UnderlyingDividendCashEquivalentPercentage),
				quickfix.GroupElement(tag.UnderlyingNonCashDividendTreatment),
				quickfix.GroupElement(tag.UnderlyingDividendComposition),
				quickfix.GroupElement(tag.UnderlyingSpecialDividendsIndicator),
				quickfix.GroupElement(tag.UnderlyingMaterialDividendsIndicator),
				quickfix.GroupElement(tag.UnderlyingOptionsExchangeDividendsIndicator),
				quickfix.GroupElement(tag.UnderlyingAdditionalDividendsIndicator),
				quickfix.GroupElement(tag.UnderlyingAllDividendsIndicator),
				quickfix.GroupElement(tag.UnderlyingReturnRateNotionalReset),
				NewNoUnderlyingReturnRatesRepeatingGroup(),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamLinkInitialLevel),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamLinkClosingLevelIndicator),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamLinkExpiringLevelIndicator),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamLinkEstimatedTradingDays),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamLinkStrikePrice),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamLinkStrikePriceType),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamLinkMaximumBoundary),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamLinkMinimumBoundary),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamLinkNumberOfDataSeries),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamVarianceUnadjustedCap),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamRealizedVarianceMethod),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamDaysAdjustmentIndicator),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamNearestExchangeContractRefID),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamVegaNotionalAmount),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamRateIndexID),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamRateIndexIDSource),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamNonDeliverableRefCurrency),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamNonDeliverableFixingDatesBusinessDayConvention),
				NewNoUnderlyingPaymentStreamNonDeliverableFixingDatesBusinessCentersRepeatingGroup(),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamNonDeliverableFixingDatesRelativeTo),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamNonDeliverableFixingDatesOffsetPeriod),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamNonDeliverableFixingDatesOffsetUnit),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamNonDeliverableFixingDatesOffsetDayType),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamNonDeliverableSettlRateSource),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamNonDeliverableSettlReferencePage),
				NewNoUnderlyingNonDeliverableFixingDatesRepeatingGroup(),
				NewNoUnderlyingSettlRateFallbacksRepeatingGroup(),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamFlatRateIndicator),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamFlatRateAmount),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamFlatRateCurrency),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamMaximumPaymentAmount),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamMaximumPaymentCurrency),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamMaximumTransactionAmount),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamMaximumTransactionCurrency),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamCashSettlIndicator),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamCompoundingXIDRef),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamCompoundingSpread),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamInterpolationMethod),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamInterpolationPeriod),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamCompoundingFixedRate),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamCompoundingRateIndex),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamCompoundingRateIndexCurvePeriod),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamCompoundingRateIndexCurveUnit),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamCompoundingRateMultiplier),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamCompoundingRateSpread),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamCompoundingRateSpreadPositionType),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamCompoundingRateTreatment),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamCompoundingCapRate),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamCompoundingCapRateBuySide),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamCompoundingCapRateSellSide),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamCompoundingFloorRate),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamCompoundingFloorRateBuySide),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamCompoundingFloorRateSellSide),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamCompoundingInitialRate),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamCompoundingFinalRateRoundingDirection),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamCompoundingFinalRatePrecision),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamCompoundingAveragingMethod),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamCompoundingNegativeRateTreatment),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamCompoundingDatesBusinessDayConvention),
				NewNoUnderlyingPaymentStreamCompoundingDatesBusinessCentersRepeatingGroup(),
				NewNoUnderlyingPaymentStreamCompoundingDatesRepeatingGroup(),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamCompoundingDatesRelativeTo),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamCompoundingDatesOffsetPeriod),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamCompoundingDatesOffsetUnit),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamCompoundingDatesOffsetDayType),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamCompoundingPeriodSkip),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamCompoundingStartDateUnadjusted),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamCompoundingStartDateRelativeTo),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamCompoundingStartDateOffsetPeriod),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamCompoundingStartDateOffsetUnit),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamCompoundingStartDateOffsetDayType),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamCompoundingStartDateAdjusted),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamCompoundingEndDateUnadjusted),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamCompoundingEndDateRelativeTo),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamCompoundingEndDateOffsetPeriod),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamCompoundingEndDateOffsetUnit),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamCompoundingEndDateOffsetDayType),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamCompoundingEndDateAdjusted),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamCompoundingFrequencyPeriod),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamCompoundingFrequencyUnit),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamCompoundingRollConvention),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamBoundsFirstDateUnadjusted),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamBoundsLastDateUnadjusted),
				quickfix.GroupElement(tag.UnderlyingPaymentStreamOtherDayCount),
				NewNoUnderlyingPaymentSchedulesRepeatingGroup(),
				NewNoUnderlyingPaymentStubsRepeatingGroup(),
				quickfix.GroupElement(tag.UnderlyingStreamText),
				quickfix.GroupElement(tag.EncodedUnderlyingStreamTextLen),
				quickfix.GroupElement(tag.EncodedUnderlyingStreamText),
				quickfix.GroupElement(tag.UnderlyingStreamXID),
				quickfix.GroupElement(tag.UnderlyingStreamNotionalXIDRef),
				quickfix.GroupElement(tag.UnderlyingStreamNotionalFrequencyPeriod),
				quickfix.GroupElement(tag.UnderlyingStreamNotionalFrequencyUnit),
				quickfix.GroupElement(tag.UnderlyingStreamNotionalCommodityFrequency),
				quickfix.GroupElement(tag.UnderlyingStreamNotionalUnitOfMeasure),
				quickfix.GroupElement(tag.UnderlyingStreamTotalNotional),
				quickfix.GroupElement(tag.UnderlyingStreamTotalNotionalUnitOfMeasure),
				quickfix.GroupElement(tag.UnderlyingStreamCommodityBase),
				quickfix.GroupElement(tag.UnderlyingStreamCommodityType),
				quickfix.GroupElement(tag.UnderlyingStreamCommoditySecurityID),
				quickfix.GroupElement(tag.UnderlyingStreamCommoditySecurityIDSource),
				NewNoUnderlyingStreamCommodityAltIDsRepeatingGroup(),
				quickfix.GroupElement(tag.UnderlyingStreamCommodityDesc),
				quickfix.GroupElement(tag.EncodedUnderlyingStreamCommodityDescLen),
				quickfix.GroupElement(tag.EncodedUnderlyingStreamCommodityDesc),
				NewNoUnderlyingStreamAssetAttributesRepeatingGroup(),
				quickfix.GroupElement(tag.UnderlyingStreamCommodityUnitOfMeasure),
				quickfix.GroupElement(tag.UnderlyingStreamCommodityCurrency),
				quickfix.GroupElement(tag.UnderlyingStreamCommodityExchange),
				quickfix.GroupElement(tag.UnderlyingStreamCommodityRateSource),
				quickfix.GroupElement(tag.UnderlyingStreamCommodityRateReferencePage),
				quickfix.GroupElement(tag.UnderlyingStreamCommodityRateReferencePageHeading),
				quickfix.GroupElement(tag.UnderlyingStreamDataProvider),
				NewNoUnderlyingStreamCommodityDataSourcesRepeatingGroup(),
				quickfix.GroupElement(tag.UnderlyingStreamCommodityPricingType),
				quickfix.GroupElement(tag.UnderlyingStreamCommodityNearbySettlDayPeriod),
				quickfix.GroupElement(tag.UnderlyingStreamCommodityNearbySettlDayUnit),
				quickfix.GroupElement(tag.UnderlyingStreamCommoditySettlDateUnadjusted),
				quickfix.GroupElement(tag.UnderlyingStreamCommoditySettlDateBusinessDayConvention),
				NewNoUnderlyingStreamCommoditySettlBusinessCentersRepeatingGroup(),
				quickfix.GroupElement(tag.UnderlyingStreamCommoditySettlDateAdjusted),
				quickfix.GroupElement(tag.UnderlyingStreamCommoditySettlMonth),
				quickfix.GroupElement(tag.UnderlyingStreamCommoditySettlDateRollPeriod),
				quickfix.GroupElement(tag.UnderlyingStreamCommoditySettlDateRollUnit),
				quickfix.GroupElement(tag.UnderlyingStreamCommoditySettlDayType),
				NewNoUnderlyingStreamCommoditySettlPeriodsRepeatingGroup(),
				quickfix.GroupElement(tag.UnderlyingStreamCommodityXID),
				quickfix.GroupElement(tag.UnderlyingStreamCommodityXIDRef),
				quickfix.GroupElement(tag.UnderlyingStreamCommodityDeliveryPricingRegion),
				quickfix.GroupElement(tag.UnderlyingDeliveryStreamType),
				NewNoUnderlyingDeliveryStreamCommoditySourcesRepeatingGroup(),
				quickfix.GroupElement(tag.UnderlyingDeliveryStreamPipeline),
				quickfix.GroupElement(tag.UnderlyingDeliveryStreamEntryPoint),
				quickfix.GroupElement(tag.UnderlyingDeliveryStreamWithdrawalPoint),
				quickfix.GroupElement(tag.UnderlyingDeliveryStreamDeliveryPoint),
				quickfix.GroupElement(tag.UnderlyingDeliveryStreamDeliveryRestriction),
				quickfix.GroupElement(tag.UnderlyingDeliveryStreamDeliveryContingency),
				quickfix.GroupElement(tag.UnderlyingDeliveryStreamDeliveryContingentPartySide),
				quickfix.GroupElement(tag.UnderlyingDeliveryStreamDeliverAtSourceIndicator),
				quickfix.GroupElement(tag.UnderlyingDeliveryStreamRiskApportionment),
				quickfix.GroupElement(tag.UnderlyingDeliveryStreamRiskApportionmentSource),
				NewNoUnderlyingDeliveryStreamCyclesRepeatingGroup(),
				quickfix.GroupElement(tag.UnderlyingDeliveryStreamTitleTransferLocation),
				quickfix.GroupElement(tag.UnderlyingDeliveryStreamTitleTransferCondition),
				quickfix.GroupElement(tag.UnderlyingDeliveryStreamImporterOfRecord),
				quickfix.GroupElement(tag.UnderlyingDeliveryStreamNegativeTolerance),
				quickfix.GroupElement(tag.UnderlyingDeliveryStreamPositiveTolerance),
				quickfix.GroupElement(tag.UnderlyingDeliveryStreamToleranceUnitOfMeasure),
				quickfix.GroupElement(tag.UnderlyingDeliveryStreamToleranceType),
				quickfix.GroupElement(tag.UnderlyingDeliveryStreamToleranceOptionSide),
				quickfix.GroupElement(tag.UnderlyingDeliveryStreamTotalPositiveTolerance),
				quickfix.GroupElement(tag.UnderlyingDeliveryStreamTotalNegativeTolerance),
				quickfix.GroupElement(tag.UnderlyingDeliveryStreamNotionalConversionFactor),
				quickfix.GroupElement(tag.UnderlyingDeliveryStreamTransportEquipment),
				quickfix.GroupElement(tag.UnderlyingDeliveryStreamElectingPartySide),
				quickfix.GroupElement(tag.UnderlyingDeliveryStreamDeliveryPointSource),
				quickfix.GroupElement(tag.UnderlyingDeliveryStreamDeliveryPointDesc),
				quickfix.GroupElement(tag.UnderlyingDeliveryStreamRouteOrCharter),
				NewNoUnderlyingDeliverySchedulesRepeatingGroup(),
				quickfix.GroupElement(tag.UnderlyingStreamVersion),
				quickfix.GroupElement(tag.UnderlyingStreamVersionEffectiveDate),
				quickfix.GroupElement(tag.UnderlyingStreamNotionalDeterminationMethod),
				quickfix.GroupElement(tag.UnderlyingStreamNotionalAdjustments),
			},
		),
	}
}

// Add create and append a new NoUnderlyingStreams to this group.
func (m NoUnderlyingStreamsRepeatingGroup) Add() NoUnderlyingStreams {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingStreams{g}
}

// Get returns the ith NoUnderlyingStreams in the NoUnderlyingStreamsRepeatinGroup.
func (m NoUnderlyingStreamsRepeatingGroup) Get(i int) NoUnderlyingStreams {
	return NoUnderlyingStreams{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingBusinessCenters is a repeating group element, Tag 40962.
type NoUnderlyingBusinessCenters struct {
	*quickfix.Group
}

// SetUnderlyingBusinessCenter sets UnderlyingBusinessCenter, Tag 40963.
func (m NoUnderlyingBusinessCenters) SetUnderlyingBusinessCenter(v string) {
	m.Set(field.NewUnderlyingBusinessCenter(v))
}

// GetUnderlyingBusinessCenter gets UnderlyingBusinessCenter, Tag 40963.
func (m NoUnderlyingBusinessCenters) GetUnderlyingBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingBusinessCenter returns true if UnderlyingBusinessCenter is present, Tag 40963.
func (m NoUnderlyingBusinessCenters) HasUnderlyingBusinessCenter() bool {
	return m.Has(tag.UnderlyingBusinessCenter)
}

// NoUnderlyingBusinessCentersRepeatingGroup is a repeating group, Tag 40962.
type NoUnderlyingBusinessCentersRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingBusinessCentersRepeatingGroup returns an initialized, NoUnderlyingBusinessCentersRepeatingGroup.
func NewNoUnderlyingBusinessCentersRepeatingGroup() NoUnderlyingBusinessCentersRepeatingGroup {
	return NoUnderlyingBusinessCentersRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingBusinessCenters,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingBusinessCenter),
			},
		),
	}
}

// Add create and append a new NoUnderlyingBusinessCenters to this group.
func (m NoUnderlyingBusinessCentersRepeatingGroup) Add() NoUnderlyingBusinessCenters {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingBusinessCenters{g}
}

// Get returns the ith NoUnderlyingBusinessCenters in the NoUnderlyingBusinessCentersRepeatinGroup.
func (m NoUnderlyingBusinessCentersRepeatingGroup) Get(i int) NoUnderlyingBusinessCenters {
	return NoUnderlyingBusinessCenters{m.RepeatingGroup.Get(i)}
}

// NoMarketDisruptionEvents is a repeating group element, Tag 41092.
type NoMarketDisruptionEvents struct {
	*quickfix.Group
}

// SetMarketDisruptionEvent sets MarketDisruptionEvent, Tag 41093.
func (m NoMarketDisruptionEvents) SetMarketDisruptionEvent(v string) {
	m.Set(field.NewMarketDisruptionEvent(v))
}

// SetMarketDisruptionValue sets MarketDisruptionValue, Tag 40991.
func (m NoMarketDisruptionEvents) SetMarketDisruptionValue(v string) {
	m.Set(field.NewMarketDisruptionValue(v))
}

// GetMarketDisruptionEvent gets MarketDisruptionEvent, Tag 41093.
func (m NoMarketDisruptionEvents) GetMarketDisruptionEvent() (v string, err quickfix.MessageRejectError) {
	var f field.MarketDisruptionEventField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetMarketDisruptionValue gets MarketDisruptionValue, Tag 40991.
func (m NoMarketDisruptionEvents) GetMarketDisruptionValue() (v string, err quickfix.MessageRejectError) {
	var f field.MarketDisruptionValueField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasMarketDisruptionEvent returns true if MarketDisruptionEvent is present, Tag 41093.
func (m NoMarketDisruptionEvents) HasMarketDisruptionEvent() bool {
	return m.Has(tag.MarketDisruptionEvent)
}

// HasMarketDisruptionValue returns true if MarketDisruptionValue is present, Tag 40991.
func (m NoMarketDisruptionEvents) HasMarketDisruptionValue() bool {
	return m.Has(tag.MarketDisruptionValue)
}

// NoMarketDisruptionEventsRepeatingGroup is a repeating group, Tag 41092.
type NoMarketDisruptionEventsRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoMarketDisruptionEventsRepeatingGroup returns an initialized, NoMarketDisruptionEventsRepeatingGroup.
func NewNoMarketDisruptionEventsRepeatingGroup() NoMarketDisruptionEventsRepeatingGroup {
	return NoMarketDisruptionEventsRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoMarketDisruptionEvents,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.MarketDisruptionEvent),
				quickfix.GroupElement(tag.MarketDisruptionValue),
			},
		),
	}
}

// Add create and append a new NoMarketDisruptionEvents to this group.
func (m NoMarketDisruptionEventsRepeatingGroup) Add() NoMarketDisruptionEvents {
	g := m.RepeatingGroup.Add()
	return NoMarketDisruptionEvents{g}
}

// Get returns the ith NoMarketDisruptionEvents in the NoMarketDisruptionEventsRepeatinGroup.
func (m NoMarketDisruptionEventsRepeatingGroup) Get(i int) NoMarketDisruptionEvents {
	return NoMarketDisruptionEvents{m.RepeatingGroup.Get(i)}
}

// NoMarketDisruptionFallbacks is a repeating group element, Tag 41094.
type NoMarketDisruptionFallbacks struct {
	*quickfix.Group
}

// SetMarketDisruptionFallbackType sets MarketDisruptionFallbackType, Tag 41095.
func (m NoMarketDisruptionFallbacks) SetMarketDisruptionFallbackType(v string) {
	m.Set(field.NewMarketDisruptionFallbackType(v))
}

// SetMarketDisruptionFallbackValue sets MarketDisruptionFallbackValue, Tag 40992.
func (m NoMarketDisruptionFallbacks) SetMarketDisruptionFallbackValue(v string) {
	m.Set(field.NewMarketDisruptionFallbackValue(v))
}

// GetMarketDisruptionFallbackType gets MarketDisruptionFallbackType, Tag 41095.
func (m NoMarketDisruptionFallbacks) GetMarketDisruptionFallbackType() (v string, err quickfix.MessageRejectError) {
	var f field.MarketDisruptionFallbackTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetMarketDisruptionFallbackValue gets MarketDisruptionFallbackValue, Tag 40992.
func (m NoMarketDisruptionFallbacks) GetMarketDisruptionFallbackValue() (v string, err quickfix.MessageRejectError) {
	var f field.MarketDisruptionFallbackValueField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasMarketDisruptionFallbackType returns true if MarketDisruptionFallbackType is present, Tag 41095.
func (m NoMarketDisruptionFallbacks) HasMarketDisruptionFallbackType() bool {
	return m.Has(tag.MarketDisruptionFallbackType)
}

// HasMarketDisruptionFallbackValue returns true if MarketDisruptionFallbackValue is present, Tag 40992.
func (m NoMarketDisruptionFallbacks) HasMarketDisruptionFallbackValue() bool {
	return m.Has(tag.MarketDisruptionFallbackValue)
}

// NoMarketDisruptionFallbacksRepeatingGroup is a repeating group, Tag 41094.
type NoMarketDisruptionFallbacksRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoMarketDisruptionFallbacksRepeatingGroup returns an initialized, NoMarketDisruptionFallbacksRepeatingGroup.
func NewNoMarketDisruptionFallbacksRepeatingGroup() NoMarketDisruptionFallbacksRepeatingGroup {
	return NoMarketDisruptionFallbacksRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoMarketDisruptionFallbacks,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.MarketDisruptionFallbackType),
				quickfix.GroupElement(tag.MarketDisruptionFallbackValue),
			},
		),
	}
}

// Add create and append a new NoMarketDisruptionFallbacks to this group.
func (m NoMarketDisruptionFallbacksRepeatingGroup) Add() NoMarketDisruptionFallbacks {
	g := m.RepeatingGroup.Add()
	return NoMarketDisruptionFallbacks{g}
}

// Get returns the ith NoMarketDisruptionFallbacks in the NoMarketDisruptionFallbacksRepeatinGroup.
func (m NoMarketDisruptionFallbacksRepeatingGroup) Get(i int) NoMarketDisruptionFallbacks {
	return NoMarketDisruptionFallbacks{m.RepeatingGroup.Get(i)}
}

// NoMarketDisruptionFallbackReferencePrices is a repeating group element, Tag 41096.
type NoMarketDisruptionFallbackReferencePrices struct {
	*quickfix.Group
}

// SetMarketDisruptionFallbackUnderlierType sets MarketDisruptionFallbackUnderlierType, Tag 41097.
func (m NoMarketDisruptionFallbackReferencePrices) SetMarketDisruptionFallbackUnderlierType(v enum.MarketDisruptionFallbackUnderlierType) {
	m.Set(field.NewMarketDisruptionFallbackUnderlierType(v))
}

// SetMarketDisruptionFallbackUnderlierSecurityID sets MarketDisruptionFallbackUnderlierSecurityID, Tag 41098.
func (m NoMarketDisruptionFallbackReferencePrices) SetMarketDisruptionFallbackUnderlierSecurityID(v string) {
	m.Set(field.NewMarketDisruptionFallbackUnderlierSecurityID(v))
}

// SetMarketDisruptionFallbackUnderlierSecurityIDSource sets MarketDisruptionFallbackUnderlierSecurityIDSource, Tag 41099.
func (m NoMarketDisruptionFallbackReferencePrices) SetMarketDisruptionFallbackUnderlierSecurityIDSource(v string) {
	m.Set(field.NewMarketDisruptionFallbackUnderlierSecurityIDSource(v))
}

// SetMarketDisruptionFallbackUnderlierSecurityDesc sets MarketDisruptionFallbackUnderlierSecurityDesc, Tag 41100.
func (m NoMarketDisruptionFallbackReferencePrices) SetMarketDisruptionFallbackUnderlierSecurityDesc(v string) {
	m.Set(field.NewMarketDisruptionFallbackUnderlierSecurityDesc(v))
}

// SetEncodedMarketDisruptionFallbackUnderlierSecurityDescLen sets EncodedMarketDisruptionFallbackUnderlierSecurityDescLen, Tag 41101.
func (m NoMarketDisruptionFallbackReferencePrices) SetEncodedMarketDisruptionFallbackUnderlierSecurityDescLen(v int) {
	m.Set(field.NewEncodedMarketDisruptionFallbackUnderlierSecurityDescLen(v))
}

// SetEncodedMarketDisruptionFallbackUnderlierSecurityDesc sets EncodedMarketDisruptionFallbackUnderlierSecurityDesc, Tag 41102.
func (m NoMarketDisruptionFallbackReferencePrices) SetEncodedMarketDisruptionFallbackUnderlierSecurityDesc(v string) {
	m.Set(field.NewEncodedMarketDisruptionFallbackUnderlierSecurityDesc(v))
}

// SetMarketDisruptionFallbackOpenUnits sets MarketDisruptionFallbackOpenUnits, Tag 41103.
func (m NoMarketDisruptionFallbackReferencePrices) SetMarketDisruptionFallbackOpenUnits(value decimal.Decimal, scale int32) {
	m.Set(field.NewMarketDisruptionFallbackOpenUnits(value, scale))
}

// SetMarketDisruptionFallbackBasketCurrency sets MarketDisruptionFallbackBasketCurrency, Tag 41104.
func (m NoMarketDisruptionFallbackReferencePrices) SetMarketDisruptionFallbackBasketCurrency(v string) {
	m.Set(field.NewMarketDisruptionFallbackBasketCurrency(v))
}

// SetMarketDisruptionFallbackBasketDivisor sets MarketDisruptionFallbackBasketDivisor, Tag 41105.
func (m NoMarketDisruptionFallbackReferencePrices) SetMarketDisruptionFallbackBasketDivisor(value decimal.Decimal, scale int32) {
	m.Set(field.NewMarketDisruptionFallbackBasketDivisor(value, scale))
}

// GetMarketDisruptionFallbackUnderlierType gets MarketDisruptionFallbackUnderlierType, Tag 41097.
func (m NoMarketDisruptionFallbackReferencePrices) GetMarketDisruptionFallbackUnderlierType() (v enum.MarketDisruptionFallbackUnderlierType, err quickfix.MessageRejectError) {
	var f field.MarketDisruptionFallbackUnderlierTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetMarketDisruptionFallbackUnderlierSecurityID gets MarketDisruptionFallbackUnderlierSecurityID, Tag 41098.
func (m NoMarketDisruptionFallbackReferencePrices) GetMarketDisruptionFallbackUnderlierSecurityID() (v string, err quickfix.MessageRejectError) {
	var f field.MarketDisruptionFallbackUnderlierSecurityIDField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetMarketDisruptionFallbackUnderlierSecurityIDSource gets MarketDisruptionFallbackUnderlierSecurityIDSource, Tag 41099.
func (m NoMarketDisruptionFallbackReferencePrices) GetMarketDisruptionFallbackUnderlierSecurityIDSource() (v string, err quickfix.MessageRejectError) {
	var f field.MarketDisruptionFallbackUnderlierSecurityIDSourceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetMarketDisruptionFallbackUnderlierSecurityDesc gets MarketDisruptionFallbackUnderlierSecurityDesc, Tag 41100.
func (m NoMarketDisruptionFallbackReferencePrices) GetMarketDisruptionFallbackUnderlierSecurityDesc() (v string, err quickfix.MessageRejectError) {
	var f field.MarketDisruptionFallbackUnderlierSecurityDescField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetEncodedMarketDisruptionFallbackUnderlierSecurityDescLen gets EncodedMarketDisruptionFallbackUnderlierSecurityDescLen, Tag 41101.
func (m NoMarketDisruptionFallbackReferencePrices) GetEncodedMarketDisruptionFallbackUnderlierSecurityDescLen() (v int, err quickfix.MessageRejectError) {
	var f field.EncodedMarketDisruptionFallbackUnderlierSecurityDescLenField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetEncodedMarketDisruptionFallbackUnderlierSecurityDesc gets EncodedMarketDisruptionFallbackUnderlierSecurityDesc, Tag 41102.
func (m NoMarketDisruptionFallbackReferencePrices) GetEncodedMarketDisruptionFallbackUnderlierSecurityDesc() (v string, err quickfix.MessageRejectError) {
	var f field.EncodedMarketDisruptionFallbackUnderlierSecurityDescField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetMarketDisruptionFallbackOpenUnits gets MarketDisruptionFallbackOpenUnits, Tag 41103.
func (m NoMarketDisruptionFallbackReferencePrices) GetMarketDisruptionFallbackOpenUnits() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.MarketDisruptionFallbackOpenUnitsField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetMarketDisruptionFallbackBasketCurrency gets MarketDisruptionFallbackBasketCurrency, Tag 41104.
func (m NoMarketDisruptionFallbackReferencePrices) GetMarketDisruptionFallbackBasketCurrency() (v string, err quickfix.MessageRejectError) {
	var f field.MarketDisruptionFallbackBasketCurrencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetMarketDisruptionFallbackBasketDivisor gets MarketDisruptionFallbackBasketDivisor, Tag 41105.
func (m NoMarketDisruptionFallbackReferencePrices) GetMarketDisruptionFallbackBasketDivisor() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.MarketDisruptionFallbackBasketDivisorField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasMarketDisruptionFallbackUnderlierType returns true if MarketDisruptionFallbackUnderlierType is present, Tag 41097.
func (m NoMarketDisruptionFallbackReferencePrices) HasMarketDisruptionFallbackUnderlierType() bool {
	return m.Has(tag.MarketDisruptionFallbackUnderlierType)
}

// HasMarketDisruptionFallbackUnderlierSecurityID returns true if MarketDisruptionFallbackUnderlierSecurityID is present, Tag 41098.
func (m NoMarketDisruptionFallbackReferencePrices) HasMarketDisruptionFallbackUnderlierSecurityID() bool {
	return m.Has(tag.MarketDisruptionFallbackUnderlierSecurityID)
}

// HasMarketDisruptionFallbackUnderlierSecurityIDSource returns true if MarketDisruptionFallbackUnderlierSecurityIDSource is present, Tag 41099.
func (m NoMarketDisruptionFallbackReferencePrices) HasMarketDisruptionFallbackUnderlierSecurityIDSource() bool {
	return m.Has(tag.MarketDisruptionFallbackUnderlierSecurityIDSource)
}

// HasMarketDisruptionFallbackUnderlierSecurityDesc returns true if MarketDisruptionFallbackUnderlierSecurityDesc is present, Tag 41100.
func (m NoMarketDisruptionFallbackReferencePrices) HasMarketDisruptionFallbackUnderlierSecurityDesc() bool {
	return m.Has(tag.MarketDisruptionFallbackUnderlierSecurityDesc)
}

// HasEncodedMarketDisruptionFallbackUnderlierSecurityDescLen returns true if EncodedMarketDisruptionFallbackUnderlierSecurityDescLen is present, Tag 41101.
func (m NoMarketDisruptionFallbackReferencePrices) HasEncodedMarketDisruptionFallbackUnderlierSecurityDescLen() bool {
	return m.Has(tag.EncodedMarketDisruptionFallbackUnderlierSecurityDescLen)
}

// HasEncodedMarketDisruptionFallbackUnderlierSecurityDesc returns true if EncodedMarketDisruptionFallbackUnderlierSecurityDesc is present, Tag 41102.
func (m NoMarketDisruptionFallbackReferencePrices) HasEncodedMarketDisruptionFallbackUnderlierSecurityDesc() bool {
	return m.Has(tag.EncodedMarketDisruptionFallbackUnderlierSecurityDesc)
}

// HasMarketDisruptionFallbackOpenUnits returns true if MarketDisruptionFallbackOpenUnits is present, Tag 41103.
func (m NoMarketDisruptionFallbackReferencePrices) HasMarketDisruptionFallbackOpenUnits() bool {
	return m.Has(tag.MarketDisruptionFallbackOpenUnits)
}

// HasMarketDisruptionFallbackBasketCurrency returns true if MarketDisruptionFallbackBasketCurrency is present, Tag 41104.
func (m NoMarketDisruptionFallbackReferencePrices) HasMarketDisruptionFallbackBasketCurrency() bool {
	return m.Has(tag.MarketDisruptionFallbackBasketCurrency)
}

// HasMarketDisruptionFallbackBasketDivisor returns true if MarketDisruptionFallbackBasketDivisor is present, Tag 41105.
func (m NoMarketDisruptionFallbackReferencePrices) HasMarketDisruptionFallbackBasketDivisor() bool {
	return m.Has(tag.MarketDisruptionFallbackBasketDivisor)
}

// NoMarketDisruptionFallbackReferencePricesRepeatingGroup is a repeating group, Tag 41096.
type NoMarketDisruptionFallbackReferencePricesRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoMarketDisruptionFallbackReferencePricesRepeatingGroup returns an initialized, NoMarketDisruptionFallbackReferencePricesRepeatingGroup.
func NewNoMarketDisruptionFallbackReferencePricesRepeatingGroup() NoMarketDisruptionFallbackReferencePricesRepeatingGroup {
	return NoMarketDisruptionFallbackReferencePricesRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoMarketDisruptionFallbackReferencePrices,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.MarketDisruptionFallbackUnderlierType),
				quickfix.GroupElement(tag.MarketDisruptionFallbackUnderlierSecurityID),
				quickfix.GroupElement(tag.MarketDisruptionFallbackUnderlierSecurityIDSource),
				quickfix.GroupElement(tag.MarketDisruptionFallbackUnderlierSecurityDesc),
				quickfix.GroupElement(tag.EncodedMarketDisruptionFallbackUnderlierSecurityDescLen),
				quickfix.GroupElement(tag.EncodedMarketDisruptionFallbackUnderlierSecurityDesc),
				quickfix.GroupElement(tag.MarketDisruptionFallbackOpenUnits),
				quickfix.GroupElement(tag.MarketDisruptionFallbackBasketCurrency),
				quickfix.GroupElement(tag.MarketDisruptionFallbackBasketDivisor),
			},
		),
	}
}

// Add create and append a new NoMarketDisruptionFallbackReferencePrices to this group.
func (m NoMarketDisruptionFallbackReferencePricesRepeatingGroup) Add() NoMarketDisruptionFallbackReferencePrices {
	g := m.RepeatingGroup.Add()
	return NoMarketDisruptionFallbackReferencePrices{g}
}

// Get returns the ith NoMarketDisruptionFallbackReferencePrices in the NoMarketDisruptionFallbackReferencePricesRepeatinGroup.
func (m NoMarketDisruptionFallbackReferencePricesRepeatingGroup) Get(i int) NoMarketDisruptionFallbackReferencePrices {
	return NoMarketDisruptionFallbackReferencePrices{m.RepeatingGroup.Get(i)}
}

// NoOptionExerciseBusinessCenters is a repeating group element, Tag 41116.
type NoOptionExerciseBusinessCenters struct {
	*quickfix.Group
}

// SetOptionExerciseBusinessCenter sets OptionExerciseBusinessCenter, Tag 41117.
func (m NoOptionExerciseBusinessCenters) SetOptionExerciseBusinessCenter(v string) {
	m.Set(field.NewOptionExerciseBusinessCenter(v))
}

// GetOptionExerciseBusinessCenter gets OptionExerciseBusinessCenter, Tag 41117.
func (m NoOptionExerciseBusinessCenters) GetOptionExerciseBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.OptionExerciseBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasOptionExerciseBusinessCenter returns true if OptionExerciseBusinessCenter is present, Tag 41117.
func (m NoOptionExerciseBusinessCenters) HasOptionExerciseBusinessCenter() bool {
	return m.Has(tag.OptionExerciseBusinessCenter)
}

// NoOptionExerciseBusinessCentersRepeatingGroup is a repeating group, Tag 41116.
type NoOptionExerciseBusinessCentersRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoOptionExerciseBusinessCentersRepeatingGroup returns an initialized, NoOptionExerciseBusinessCentersRepeatingGroup.
func NewNoOptionExerciseBusinessCentersRepeatingGroup() NoOptionExerciseBusinessCentersRepeatingGroup {
	return NoOptionExerciseBusinessCentersRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoOptionExerciseBusinessCenters,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.OptionExerciseBusinessCenter),
			},
		),
	}
}

// Add create and append a new NoOptionExerciseBusinessCenters to this group.
func (m NoOptionExerciseBusinessCentersRepeatingGroup) Add() NoOptionExerciseBusinessCenters {
	g := m.RepeatingGroup.Add()
	return NoOptionExerciseBusinessCenters{g}
}

// Get returns the ith NoOptionExerciseBusinessCenters in the NoOptionExerciseBusinessCentersRepeatinGroup.
func (m NoOptionExerciseBusinessCentersRepeatingGroup) Get(i int) NoOptionExerciseBusinessCenters {
	return NoOptionExerciseBusinessCenters{m.RepeatingGroup.Get(i)}
}

// NoOptionExerciseDates is a repeating group element, Tag 41137.
type NoOptionExerciseDates struct {
	*quickfix.Group
}

// SetOptionExerciseDate sets OptionExerciseDate, Tag 41138.
func (m NoOptionExerciseDates) SetOptionExerciseDate(v string) {
	m.Set(field.NewOptionExerciseDate(v))
}

// SetOptionExerciseDateType sets OptionExerciseDateType, Tag 41139.
func (m NoOptionExerciseDates) SetOptionExerciseDateType(v enum.OptionExerciseDateType) {
	m.Set(field.NewOptionExerciseDateType(v))
}

// GetOptionExerciseDate gets OptionExerciseDate, Tag 41138.
func (m NoOptionExerciseDates) GetOptionExerciseDate() (v string, err quickfix.MessageRejectError) {
	var f field.OptionExerciseDateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetOptionExerciseDateType gets OptionExerciseDateType, Tag 41139.
func (m NoOptionExerciseDates) GetOptionExerciseDateType() (v enum.OptionExerciseDateType, err quickfix.MessageRejectError) {
	var f field.OptionExerciseDateTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasOptionExerciseDate returns true if OptionExerciseDate is present, Tag 41138.
func (m NoOptionExerciseDates) HasOptionExerciseDate() bool {
	return m.Has(tag.OptionExerciseDate)
}

// HasOptionExerciseDateType returns true if OptionExerciseDateType is present, Tag 41139.
func (m NoOptionExerciseDates) HasOptionExerciseDateType() bool {
	return m.Has(tag.OptionExerciseDateType)
}

// NoOptionExerciseDatesRepeatingGroup is a repeating group, Tag 41137.
type NoOptionExerciseDatesRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoOptionExerciseDatesRepeatingGroup returns an initialized, NoOptionExerciseDatesRepeatingGroup.
func NewNoOptionExerciseDatesRepeatingGroup() NoOptionExerciseDatesRepeatingGroup {
	return NoOptionExerciseDatesRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoOptionExerciseDates,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.OptionExerciseDate),
				quickfix.GroupElement(tag.OptionExerciseDateType),
			},
		),
	}
}

// Add create and append a new NoOptionExerciseDates to this group.
func (m NoOptionExerciseDatesRepeatingGroup) Add() NoOptionExerciseDates {
	g := m.RepeatingGroup.Add()
	return NoOptionExerciseDates{g}
}

// Get returns the ith NoOptionExerciseDates in the NoOptionExerciseDatesRepeatinGroup.
func (m NoOptionExerciseDatesRepeatingGroup) Get(i int) NoOptionExerciseDates {
	return NoOptionExerciseDates{m.RepeatingGroup.Get(i)}
}

// NoOptionExerciseExpirationDateBusinessCenters is a repeating group element, Tag 41140.
type NoOptionExerciseExpirationDateBusinessCenters struct {
	*quickfix.Group
}

// SetOptionExerciseExpirationDateBusinessCenter sets OptionExerciseExpirationDateBusinessCenter, Tag 41141.
func (m NoOptionExerciseExpirationDateBusinessCenters) SetOptionExerciseExpirationDateBusinessCenter(v string) {
	m.Set(field.NewOptionExerciseExpirationDateBusinessCenter(v))
}

// GetOptionExerciseExpirationDateBusinessCenter gets OptionExerciseExpirationDateBusinessCenter, Tag 41141.
func (m NoOptionExerciseExpirationDateBusinessCenters) GetOptionExerciseExpirationDateBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.OptionExerciseExpirationDateBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasOptionExerciseExpirationDateBusinessCenter returns true if OptionExerciseExpirationDateBusinessCenter is present, Tag 41141.
func (m NoOptionExerciseExpirationDateBusinessCenters) HasOptionExerciseExpirationDateBusinessCenter() bool {
	return m.Has(tag.OptionExerciseExpirationDateBusinessCenter)
}

// NoOptionExerciseExpirationDateBusinessCentersRepeatingGroup is a repeating group, Tag 41140.
type NoOptionExerciseExpirationDateBusinessCentersRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoOptionExerciseExpirationDateBusinessCentersRepeatingGroup returns an initialized, NoOptionExerciseExpirationDateBusinessCentersRepeatingGroup.
func NewNoOptionExerciseExpirationDateBusinessCentersRepeatingGroup() NoOptionExerciseExpirationDateBusinessCentersRepeatingGroup {
	return NoOptionExerciseExpirationDateBusinessCentersRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoOptionExerciseExpirationDateBusinessCenters,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.OptionExerciseExpirationDateBusinessCenter),
			},
		),
	}
}

// Add create and append a new NoOptionExerciseExpirationDateBusinessCenters to this group.
func (m NoOptionExerciseExpirationDateBusinessCentersRepeatingGroup) Add() NoOptionExerciseExpirationDateBusinessCenters {
	g := m.RepeatingGroup.Add()
	return NoOptionExerciseExpirationDateBusinessCenters{g}
}

// Get returns the ith NoOptionExerciseExpirationDateBusinessCenters in the NoOptionExerciseExpirationDateBusinessCentersRepeatinGroup.
func (m NoOptionExerciseExpirationDateBusinessCentersRepeatingGroup) Get(i int) NoOptionExerciseExpirationDateBusinessCenters {
	return NoOptionExerciseExpirationDateBusinessCenters{m.RepeatingGroup.Get(i)}
}

// NoOptionExerciseExpirationDates is a repeating group element, Tag 41152.
type NoOptionExerciseExpirationDates struct {
	*quickfix.Group
}

// SetOptionExerciseExpirationDate sets OptionExerciseExpirationDate, Tag 41153.
func (m NoOptionExerciseExpirationDates) SetOptionExerciseExpirationDate(v string) {
	m.Set(field.NewOptionExerciseExpirationDate(v))
}

// SetOptionExerciseExpirationDateType sets OptionExerciseExpirationDateType, Tag 41154.
func (m NoOptionExerciseExpirationDates) SetOptionExerciseExpirationDateType(v int) {
	m.Set(field.NewOptionExerciseExpirationDateType(v))
}

// GetOptionExerciseExpirationDate gets OptionExerciseExpirationDate, Tag 41153.
func (m NoOptionExerciseExpirationDates) GetOptionExerciseExpirationDate() (v string, err quickfix.MessageRejectError) {
	var f field.OptionExerciseExpirationDateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetOptionExerciseExpirationDateType gets OptionExerciseExpirationDateType, Tag 41154.
func (m NoOptionExerciseExpirationDates) GetOptionExerciseExpirationDateType() (v int, err quickfix.MessageRejectError) {
	var f field.OptionExerciseExpirationDateTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasOptionExerciseExpirationDate returns true if OptionExerciseExpirationDate is present, Tag 41153.
func (m NoOptionExerciseExpirationDates) HasOptionExerciseExpirationDate() bool {
	return m.Has(tag.OptionExerciseExpirationDate)
}

// HasOptionExerciseExpirationDateType returns true if OptionExerciseExpirationDateType is present, Tag 41154.
func (m NoOptionExerciseExpirationDates) HasOptionExerciseExpirationDateType() bool {
	return m.Has(tag.OptionExerciseExpirationDateType)
}

// NoOptionExerciseExpirationDatesRepeatingGroup is a repeating group, Tag 41152.
type NoOptionExerciseExpirationDatesRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoOptionExerciseExpirationDatesRepeatingGroup returns an initialized, NoOptionExerciseExpirationDatesRepeatingGroup.
func NewNoOptionExerciseExpirationDatesRepeatingGroup() NoOptionExerciseExpirationDatesRepeatingGroup {
	return NoOptionExerciseExpirationDatesRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoOptionExerciseExpirationDates,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.OptionExerciseExpirationDate),
				quickfix.GroupElement(tag.OptionExerciseExpirationDateType),
			},
		),
	}
}

// Add create and append a new NoOptionExerciseExpirationDates to this group.
func (m NoOptionExerciseExpirationDatesRepeatingGroup) Add() NoOptionExerciseExpirationDates {
	g := m.RepeatingGroup.Add()
	return NoOptionExerciseExpirationDates{g}
}

// Get returns the ith NoOptionExerciseExpirationDates in the NoOptionExerciseExpirationDatesRepeatinGroup.
func (m NoOptionExerciseExpirationDatesRepeatingGroup) Get(i int) NoOptionExerciseExpirationDates {
	return NoOptionExerciseExpirationDates{m.RepeatingGroup.Get(i)}
}

// NoPricingDateBusinessCenters is a repeating group element, Tag 41230.
type NoPricingDateBusinessCenters struct {
	*quickfix.Group
}

// SetPricingDateBusinessCenter sets PricingDateBusinessCenter, Tag 41231.
func (m NoPricingDateBusinessCenters) SetPricingDateBusinessCenter(v string) {
	m.Set(field.NewPricingDateBusinessCenter(v))
}

// GetPricingDateBusinessCenter gets PricingDateBusinessCenter, Tag 41231.
func (m NoPricingDateBusinessCenters) GetPricingDateBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.PricingDateBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasPricingDateBusinessCenter returns true if PricingDateBusinessCenter is present, Tag 41231.
func (m NoPricingDateBusinessCenters) HasPricingDateBusinessCenter() bool {
	return m.Has(tag.PricingDateBusinessCenter)
}

// NoPricingDateBusinessCentersRepeatingGroup is a repeating group, Tag 41230.
type NoPricingDateBusinessCentersRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoPricingDateBusinessCentersRepeatingGroup returns an initialized, NoPricingDateBusinessCentersRepeatingGroup.
func NewNoPricingDateBusinessCentersRepeatingGroup() NoPricingDateBusinessCentersRepeatingGroup {
	return NoPricingDateBusinessCentersRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoPricingDateBusinessCenters,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.PricingDateBusinessCenter),
			},
		),
	}
}

// Add create and append a new NoPricingDateBusinessCenters to this group.
func (m NoPricingDateBusinessCentersRepeatingGroup) Add() NoPricingDateBusinessCenters {
	g := m.RepeatingGroup.Add()
	return NoPricingDateBusinessCenters{g}
}

// Get returns the ith NoPricingDateBusinessCenters in the NoPricingDateBusinessCentersRepeatinGroup.
func (m NoPricingDateBusinessCentersRepeatingGroup) Get(i int) NoPricingDateBusinessCenters {
	return NoPricingDateBusinessCenters{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingOptionExerciseBusinessCenters is a repeating group element, Tag 41820.
type NoUnderlyingOptionExerciseBusinessCenters struct {
	*quickfix.Group
}

// SetUnderlyingOptionExerciseBusinessCenter sets UnderlyingOptionExerciseBusinessCenter, Tag 41821.
func (m NoUnderlyingOptionExerciseBusinessCenters) SetUnderlyingOptionExerciseBusinessCenter(v string) {
	m.Set(field.NewUnderlyingOptionExerciseBusinessCenter(v))
}

// GetUnderlyingOptionExerciseBusinessCenter gets UnderlyingOptionExerciseBusinessCenter, Tag 41821.
func (m NoUnderlyingOptionExerciseBusinessCenters) GetUnderlyingOptionExerciseBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingOptionExerciseBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingOptionExerciseBusinessCenter returns true if UnderlyingOptionExerciseBusinessCenter is present, Tag 41821.
func (m NoUnderlyingOptionExerciseBusinessCenters) HasUnderlyingOptionExerciseBusinessCenter() bool {
	return m.Has(tag.UnderlyingOptionExerciseBusinessCenter)
}

// NoUnderlyingOptionExerciseBusinessCentersRepeatingGroup is a repeating group, Tag 41820.
type NoUnderlyingOptionExerciseBusinessCentersRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingOptionExerciseBusinessCentersRepeatingGroup returns an initialized, NoUnderlyingOptionExerciseBusinessCentersRepeatingGroup.
func NewNoUnderlyingOptionExerciseBusinessCentersRepeatingGroup() NoUnderlyingOptionExerciseBusinessCentersRepeatingGroup {
	return NoUnderlyingOptionExerciseBusinessCentersRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingOptionExerciseBusinessCenters,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingOptionExerciseBusinessCenter),
			},
		),
	}
}

// Add create and append a new NoUnderlyingOptionExerciseBusinessCenters to this group.
func (m NoUnderlyingOptionExerciseBusinessCentersRepeatingGroup) Add() NoUnderlyingOptionExerciseBusinessCenters {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingOptionExerciseBusinessCenters{g}
}

// Get returns the ith NoUnderlyingOptionExerciseBusinessCenters in the NoUnderlyingOptionExerciseBusinessCentersRepeatinGroup.
func (m NoUnderlyingOptionExerciseBusinessCentersRepeatingGroup) Get(i int) NoUnderlyingOptionExerciseBusinessCenters {
	return NoUnderlyingOptionExerciseBusinessCenters{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingOptionExerciseDates is a repeating group element, Tag 41841.
type NoUnderlyingOptionExerciseDates struct {
	*quickfix.Group
}

// SetUnderlyingOptionExerciseDate sets UnderlyingOptionExerciseDate, Tag 41842.
func (m NoUnderlyingOptionExerciseDates) SetUnderlyingOptionExerciseDate(v string) {
	m.Set(field.NewUnderlyingOptionExerciseDate(v))
}

// SetUnderlyingOptionExerciseDateType sets UnderlyingOptionExerciseDateType, Tag 41843.
func (m NoUnderlyingOptionExerciseDates) SetUnderlyingOptionExerciseDateType(v int) {
	m.Set(field.NewUnderlyingOptionExerciseDateType(v))
}

// GetUnderlyingOptionExerciseDate gets UnderlyingOptionExerciseDate, Tag 41842.
func (m NoUnderlyingOptionExerciseDates) GetUnderlyingOptionExerciseDate() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingOptionExerciseDateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingOptionExerciseDateType gets UnderlyingOptionExerciseDateType, Tag 41843.
func (m NoUnderlyingOptionExerciseDates) GetUnderlyingOptionExerciseDateType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingOptionExerciseDateTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingOptionExerciseDate returns true if UnderlyingOptionExerciseDate is present, Tag 41842.
func (m NoUnderlyingOptionExerciseDates) HasUnderlyingOptionExerciseDate() bool {
	return m.Has(tag.UnderlyingOptionExerciseDate)
}

// HasUnderlyingOptionExerciseDateType returns true if UnderlyingOptionExerciseDateType is present, Tag 41843.
func (m NoUnderlyingOptionExerciseDates) HasUnderlyingOptionExerciseDateType() bool {
	return m.Has(tag.UnderlyingOptionExerciseDateType)
}

// NoUnderlyingOptionExerciseDatesRepeatingGroup is a repeating group, Tag 41841.
type NoUnderlyingOptionExerciseDatesRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingOptionExerciseDatesRepeatingGroup returns an initialized, NoUnderlyingOptionExerciseDatesRepeatingGroup.
func NewNoUnderlyingOptionExerciseDatesRepeatingGroup() NoUnderlyingOptionExerciseDatesRepeatingGroup {
	return NoUnderlyingOptionExerciseDatesRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingOptionExerciseDates,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingOptionExerciseDate),
				quickfix.GroupElement(tag.UnderlyingOptionExerciseDateType),
			},
		),
	}
}

// Add create and append a new NoUnderlyingOptionExerciseDates to this group.
func (m NoUnderlyingOptionExerciseDatesRepeatingGroup) Add() NoUnderlyingOptionExerciseDates {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingOptionExerciseDates{g}
}

// Get returns the ith NoUnderlyingOptionExerciseDates in the NoUnderlyingOptionExerciseDatesRepeatinGroup.
func (m NoUnderlyingOptionExerciseDatesRepeatingGroup) Get(i int) NoUnderlyingOptionExerciseDates {
	return NoUnderlyingOptionExerciseDates{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingOptionExerciseExpirationDateBusinessCenters is a repeating group element, Tag 41844.
type NoUnderlyingOptionExerciseExpirationDateBusinessCenters struct {
	*quickfix.Group
}

// SetUnderlyingOptionExerciseExpirationDateBusinessCenter sets UnderlyingOptionExerciseExpirationDateBusinessCenter, Tag 41845.
func (m NoUnderlyingOptionExerciseExpirationDateBusinessCenters) SetUnderlyingOptionExerciseExpirationDateBusinessCenter(v string) {
	m.Set(field.NewUnderlyingOptionExerciseExpirationDateBusinessCenter(v))
}

// GetUnderlyingOptionExerciseExpirationDateBusinessCenter gets UnderlyingOptionExerciseExpirationDateBusinessCenter, Tag 41845.
func (m NoUnderlyingOptionExerciseExpirationDateBusinessCenters) GetUnderlyingOptionExerciseExpirationDateBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingOptionExerciseExpirationDateBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingOptionExerciseExpirationDateBusinessCenter returns true if UnderlyingOptionExerciseExpirationDateBusinessCenter is present, Tag 41845.
func (m NoUnderlyingOptionExerciseExpirationDateBusinessCenters) HasUnderlyingOptionExerciseExpirationDateBusinessCenter() bool {
	return m.Has(tag.UnderlyingOptionExerciseExpirationDateBusinessCenter)
}

// NoUnderlyingOptionExerciseExpirationDateBusinessCentersRepeatingGroup is a repeating group, Tag 41844.
type NoUnderlyingOptionExerciseExpirationDateBusinessCentersRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingOptionExerciseExpirationDateBusinessCentersRepeatingGroup returns an initialized, NoUnderlyingOptionExerciseExpirationDateBusinessCentersRepeatingGroup.
func NewNoUnderlyingOptionExerciseExpirationDateBusinessCentersRepeatingGroup() NoUnderlyingOptionExerciseExpirationDateBusinessCentersRepeatingGroup {
	return NoUnderlyingOptionExerciseExpirationDateBusinessCentersRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingOptionExerciseExpirationDateBusinessCenters,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingOptionExerciseExpirationDateBusinessCenter),
			},
		),
	}
}

// Add create and append a new NoUnderlyingOptionExerciseExpirationDateBusinessCenters to this group.
func (m NoUnderlyingOptionExerciseExpirationDateBusinessCentersRepeatingGroup) Add() NoUnderlyingOptionExerciseExpirationDateBusinessCenters {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingOptionExerciseExpirationDateBusinessCenters{g}
}

// Get returns the ith NoUnderlyingOptionExerciseExpirationDateBusinessCenters in the NoUnderlyingOptionExerciseExpirationDateBusinessCentersRepeatinGroup.
func (m NoUnderlyingOptionExerciseExpirationDateBusinessCentersRepeatingGroup) Get(i int) NoUnderlyingOptionExerciseExpirationDateBusinessCenters {
	return NoUnderlyingOptionExerciseExpirationDateBusinessCenters{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingOptionExerciseExpirationDates is a repeating group element, Tag 41856.
type NoUnderlyingOptionExerciseExpirationDates struct {
	*quickfix.Group
}

// SetUnderlyingOptionExerciseExpirationDate sets UnderlyingOptionExerciseExpirationDate, Tag 41857.
func (m NoUnderlyingOptionExerciseExpirationDates) SetUnderlyingOptionExerciseExpirationDate(v string) {
	m.Set(field.NewUnderlyingOptionExerciseExpirationDate(v))
}

// SetUnderlyingOptionExerciseExpirationDateType sets UnderlyingOptionExerciseExpirationDateType, Tag 41858.
func (m NoUnderlyingOptionExerciseExpirationDates) SetUnderlyingOptionExerciseExpirationDateType(v int) {
	m.Set(field.NewUnderlyingOptionExerciseExpirationDateType(v))
}

// GetUnderlyingOptionExerciseExpirationDate gets UnderlyingOptionExerciseExpirationDate, Tag 41857.
func (m NoUnderlyingOptionExerciseExpirationDates) GetUnderlyingOptionExerciseExpirationDate() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingOptionExerciseExpirationDateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingOptionExerciseExpirationDateType gets UnderlyingOptionExerciseExpirationDateType, Tag 41858.
func (m NoUnderlyingOptionExerciseExpirationDates) GetUnderlyingOptionExerciseExpirationDateType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingOptionExerciseExpirationDateTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingOptionExerciseExpirationDate returns true if UnderlyingOptionExerciseExpirationDate is present, Tag 41857.
func (m NoUnderlyingOptionExerciseExpirationDates) HasUnderlyingOptionExerciseExpirationDate() bool {
	return m.Has(tag.UnderlyingOptionExerciseExpirationDate)
}

// HasUnderlyingOptionExerciseExpirationDateType returns true if UnderlyingOptionExerciseExpirationDateType is present, Tag 41858.
func (m NoUnderlyingOptionExerciseExpirationDates) HasUnderlyingOptionExerciseExpirationDateType() bool {
	return m.Has(tag.UnderlyingOptionExerciseExpirationDateType)
}

// NoUnderlyingOptionExerciseExpirationDatesRepeatingGroup is a repeating group, Tag 41856.
type NoUnderlyingOptionExerciseExpirationDatesRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingOptionExerciseExpirationDatesRepeatingGroup returns an initialized, NoUnderlyingOptionExerciseExpirationDatesRepeatingGroup.
func NewNoUnderlyingOptionExerciseExpirationDatesRepeatingGroup() NoUnderlyingOptionExerciseExpirationDatesRepeatingGroup {
	return NoUnderlyingOptionExerciseExpirationDatesRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingOptionExerciseExpirationDates,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingOptionExerciseExpirationDate),
				quickfix.GroupElement(tag.UnderlyingOptionExerciseExpirationDateType),
			},
		),
	}
}

// Add create and append a new NoUnderlyingOptionExerciseExpirationDates to this group.
func (m NoUnderlyingOptionExerciseExpirationDatesRepeatingGroup) Add() NoUnderlyingOptionExerciseExpirationDates {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingOptionExerciseExpirationDates{g}
}

// Get returns the ith NoUnderlyingOptionExerciseExpirationDates in the NoUnderlyingOptionExerciseExpirationDatesRepeatinGroup.
func (m NoUnderlyingOptionExerciseExpirationDatesRepeatingGroup) Get(i int) NoUnderlyingOptionExerciseExpirationDates {
	return NoUnderlyingOptionExerciseExpirationDates{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingMarketDisruptionEvents is a repeating group element, Tag 41864.
type NoUnderlyingMarketDisruptionEvents struct {
	*quickfix.Group
}

// SetUnderlyingMarketDisruptionEvent sets UnderlyingMarketDisruptionEvent, Tag 41865.
func (m NoUnderlyingMarketDisruptionEvents) SetUnderlyingMarketDisruptionEvent(v string) {
	m.Set(field.NewUnderlyingMarketDisruptionEvent(v))
}

// SetUnderlyingMarketDisruptionValue sets UnderlyingMarketDisruptionValue, Tag 41338.
func (m NoUnderlyingMarketDisruptionEvents) SetUnderlyingMarketDisruptionValue(v string) {
	m.Set(field.NewUnderlyingMarketDisruptionValue(v))
}

// GetUnderlyingMarketDisruptionEvent gets UnderlyingMarketDisruptionEvent, Tag 41865.
func (m NoUnderlyingMarketDisruptionEvents) GetUnderlyingMarketDisruptionEvent() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingMarketDisruptionEventField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingMarketDisruptionValue gets UnderlyingMarketDisruptionValue, Tag 41338.
func (m NoUnderlyingMarketDisruptionEvents) GetUnderlyingMarketDisruptionValue() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingMarketDisruptionValueField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingMarketDisruptionEvent returns true if UnderlyingMarketDisruptionEvent is present, Tag 41865.
func (m NoUnderlyingMarketDisruptionEvents) HasUnderlyingMarketDisruptionEvent() bool {
	return m.Has(tag.UnderlyingMarketDisruptionEvent)
}

// HasUnderlyingMarketDisruptionValue returns true if UnderlyingMarketDisruptionValue is present, Tag 41338.
func (m NoUnderlyingMarketDisruptionEvents) HasUnderlyingMarketDisruptionValue() bool {
	return m.Has(tag.UnderlyingMarketDisruptionValue)
}

// NoUnderlyingMarketDisruptionEventsRepeatingGroup is a repeating group, Tag 41864.
type NoUnderlyingMarketDisruptionEventsRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingMarketDisruptionEventsRepeatingGroup returns an initialized, NoUnderlyingMarketDisruptionEventsRepeatingGroup.
func NewNoUnderlyingMarketDisruptionEventsRepeatingGroup() NoUnderlyingMarketDisruptionEventsRepeatingGroup {
	return NoUnderlyingMarketDisruptionEventsRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingMarketDisruptionEvents,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingMarketDisruptionEvent),
				quickfix.GroupElement(tag.UnderlyingMarketDisruptionValue),
			},
		),
	}
}

// Add create and append a new NoUnderlyingMarketDisruptionEvents to this group.
func (m NoUnderlyingMarketDisruptionEventsRepeatingGroup) Add() NoUnderlyingMarketDisruptionEvents {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingMarketDisruptionEvents{g}
}

// Get returns the ith NoUnderlyingMarketDisruptionEvents in the NoUnderlyingMarketDisruptionEventsRepeatinGroup.
func (m NoUnderlyingMarketDisruptionEventsRepeatingGroup) Get(i int) NoUnderlyingMarketDisruptionEvents {
	return NoUnderlyingMarketDisruptionEvents{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingMarketDisruptionFallbacks is a repeating group element, Tag 41866.
type NoUnderlyingMarketDisruptionFallbacks struct {
	*quickfix.Group
}

// SetUnderlyingMarketDisruptionFallbackType sets UnderlyingMarketDisruptionFallbackType, Tag 41867.
func (m NoUnderlyingMarketDisruptionFallbacks) SetUnderlyingMarketDisruptionFallbackType(v string) {
	m.Set(field.NewUnderlyingMarketDisruptionFallbackType(v))
}

// SetUnderlyingMarketDisruptionFallbackValue sets UnderlyingMarketDisruptionFallbackValue, Tag 41339.
func (m NoUnderlyingMarketDisruptionFallbacks) SetUnderlyingMarketDisruptionFallbackValue(v string) {
	m.Set(field.NewUnderlyingMarketDisruptionFallbackValue(v))
}

// GetUnderlyingMarketDisruptionFallbackType gets UnderlyingMarketDisruptionFallbackType, Tag 41867.
func (m NoUnderlyingMarketDisruptionFallbacks) GetUnderlyingMarketDisruptionFallbackType() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingMarketDisruptionFallbackTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingMarketDisruptionFallbackValue gets UnderlyingMarketDisruptionFallbackValue, Tag 41339.
func (m NoUnderlyingMarketDisruptionFallbacks) GetUnderlyingMarketDisruptionFallbackValue() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingMarketDisruptionFallbackValueField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingMarketDisruptionFallbackType returns true if UnderlyingMarketDisruptionFallbackType is present, Tag 41867.
func (m NoUnderlyingMarketDisruptionFallbacks) HasUnderlyingMarketDisruptionFallbackType() bool {
	return m.Has(tag.UnderlyingMarketDisruptionFallbackType)
}

// HasUnderlyingMarketDisruptionFallbackValue returns true if UnderlyingMarketDisruptionFallbackValue is present, Tag 41339.
func (m NoUnderlyingMarketDisruptionFallbacks) HasUnderlyingMarketDisruptionFallbackValue() bool {
	return m.Has(tag.UnderlyingMarketDisruptionFallbackValue)
}

// NoUnderlyingMarketDisruptionFallbacksRepeatingGroup is a repeating group, Tag 41866.
type NoUnderlyingMarketDisruptionFallbacksRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingMarketDisruptionFallbacksRepeatingGroup returns an initialized, NoUnderlyingMarketDisruptionFallbacksRepeatingGroup.
func NewNoUnderlyingMarketDisruptionFallbacksRepeatingGroup() NoUnderlyingMarketDisruptionFallbacksRepeatingGroup {
	return NoUnderlyingMarketDisruptionFallbacksRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingMarketDisruptionFallbacks,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingMarketDisruptionFallbackType),
				quickfix.GroupElement(tag.UnderlyingMarketDisruptionFallbackValue),
			},
		),
	}
}

// Add create and append a new NoUnderlyingMarketDisruptionFallbacks to this group.
func (m NoUnderlyingMarketDisruptionFallbacksRepeatingGroup) Add() NoUnderlyingMarketDisruptionFallbacks {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingMarketDisruptionFallbacks{g}
}

// Get returns the ith NoUnderlyingMarketDisruptionFallbacks in the NoUnderlyingMarketDisruptionFallbacksRepeatinGroup.
func (m NoUnderlyingMarketDisruptionFallbacksRepeatingGroup) Get(i int) NoUnderlyingMarketDisruptionFallbacks {
	return NoUnderlyingMarketDisruptionFallbacks{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingMarketDisruptionFallbackReferencePrices is a repeating group element, Tag 41868.
type NoUnderlyingMarketDisruptionFallbackReferencePrices struct {
	*quickfix.Group
}

// SetUnderlyingMarketDisruptionFallbackUnderlierType sets UnderlyingMarketDisruptionFallbackUnderlierType, Tag 41869.
func (m NoUnderlyingMarketDisruptionFallbackReferencePrices) SetUnderlyingMarketDisruptionFallbackUnderlierType(v int) {
	m.Set(field.NewUnderlyingMarketDisruptionFallbackUnderlierType(v))
}

// SetUnderlyingMarketDisruptionFallbackUnderlierSecurityID sets UnderlyingMarketDisruptionFallbackUnderlierSecurityID, Tag 41870.
func (m NoUnderlyingMarketDisruptionFallbackReferencePrices) SetUnderlyingMarketDisruptionFallbackUnderlierSecurityID(v string) {
	m.Set(field.NewUnderlyingMarketDisruptionFallbackUnderlierSecurityID(v))
}

// SetUnderlyingMarketDisruptionFallbackUnderlierSecurityIDSource sets UnderlyingMarketDisruptionFallbackUnderlierSecurityIDSource, Tag 41871.
func (m NoUnderlyingMarketDisruptionFallbackReferencePrices) SetUnderlyingMarketDisruptionFallbackUnderlierSecurityIDSource(v string) {
	m.Set(field.NewUnderlyingMarketDisruptionFallbackUnderlierSecurityIDSource(v))
}

// SetUnderlyingMarketDisruptionFallbackUnderlierSecurityDesc sets UnderlyingMarketDisruptionFallbackUnderlierSecurityDesc, Tag 41872.
func (m NoUnderlyingMarketDisruptionFallbackReferencePrices) SetUnderlyingMarketDisruptionFallbackUnderlierSecurityDesc(v string) {
	m.Set(field.NewUnderlyingMarketDisruptionFallbackUnderlierSecurityDesc(v))
}

// SetEncodedUnderlyingMarketDisruptionFallbackUnderlierSecurityDescLen sets EncodedUnderlyingMarketDisruptionFallbackUnderlierSecurityDescLen, Tag 41873.
func (m NoUnderlyingMarketDisruptionFallbackReferencePrices) SetEncodedUnderlyingMarketDisruptionFallbackUnderlierSecurityDescLen(v int) {
	m.Set(field.NewEncodedUnderlyingMarketDisruptionFallbackUnderlierSecurityDescLen(v))
}

// SetEncodedUnderlyingMarketDisruptionFallbackUnderlierSecurityDesc sets EncodedUnderlyingMarketDisruptionFallbackUnderlierSecurityDesc, Tag 41874.
func (m NoUnderlyingMarketDisruptionFallbackReferencePrices) SetEncodedUnderlyingMarketDisruptionFallbackUnderlierSecurityDesc(v string) {
	m.Set(field.NewEncodedUnderlyingMarketDisruptionFallbackUnderlierSecurityDesc(v))
}

// SetUnderlyingMarketDisruptionFallbackOpenUnits sets UnderlyingMarketDisruptionFallbackOpenUnits, Tag 41875.
func (m NoUnderlyingMarketDisruptionFallbackReferencePrices) SetUnderlyingMarketDisruptionFallbackOpenUnits(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingMarketDisruptionFallbackOpenUnits(value, scale))
}

// SetUnderlyingMarketDisruptionFallbackBasketCurrency sets UnderlyingMarketDisruptionFallbackBasketCurrency, Tag 41876.
func (m NoUnderlyingMarketDisruptionFallbackReferencePrices) SetUnderlyingMarketDisruptionFallbackBasketCurrency(v string) {
	m.Set(field.NewUnderlyingMarketDisruptionFallbackBasketCurrency(v))
}

// SetUnderlyingMarketDisruptionFallbackBasketDivisor sets UnderlyingMarketDisruptionFallbackBasketDivisor, Tag 41877.
func (m NoUnderlyingMarketDisruptionFallbackReferencePrices) SetUnderlyingMarketDisruptionFallbackBasketDivisor(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingMarketDisruptionFallbackBasketDivisor(value, scale))
}

// GetUnderlyingMarketDisruptionFallbackUnderlierType gets UnderlyingMarketDisruptionFallbackUnderlierType, Tag 41869.
func (m NoUnderlyingMarketDisruptionFallbackReferencePrices) GetUnderlyingMarketDisruptionFallbackUnderlierType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingMarketDisruptionFallbackUnderlierTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingMarketDisruptionFallbackUnderlierSecurityID gets UnderlyingMarketDisruptionFallbackUnderlierSecurityID, Tag 41870.
func (m NoUnderlyingMarketDisruptionFallbackReferencePrices) GetUnderlyingMarketDisruptionFallbackUnderlierSecurityID() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingMarketDisruptionFallbackUnderlierSecurityIDField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingMarketDisruptionFallbackUnderlierSecurityIDSource gets UnderlyingMarketDisruptionFallbackUnderlierSecurityIDSource, Tag 41871.
func (m NoUnderlyingMarketDisruptionFallbackReferencePrices) GetUnderlyingMarketDisruptionFallbackUnderlierSecurityIDSource() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingMarketDisruptionFallbackUnderlierSecurityIDSourceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingMarketDisruptionFallbackUnderlierSecurityDesc gets UnderlyingMarketDisruptionFallbackUnderlierSecurityDesc, Tag 41872.
func (m NoUnderlyingMarketDisruptionFallbackReferencePrices) GetUnderlyingMarketDisruptionFallbackUnderlierSecurityDesc() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingMarketDisruptionFallbackUnderlierSecurityDescField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetEncodedUnderlyingMarketDisruptionFallbackUnderlierSecurityDescLen gets EncodedUnderlyingMarketDisruptionFallbackUnderlierSecurityDescLen, Tag 41873.
func (m NoUnderlyingMarketDisruptionFallbackReferencePrices) GetEncodedUnderlyingMarketDisruptionFallbackUnderlierSecurityDescLen() (v int, err quickfix.MessageRejectError) {
	var f field.EncodedUnderlyingMarketDisruptionFallbackUnderlierSecurityDescLenField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetEncodedUnderlyingMarketDisruptionFallbackUnderlierSecurityDesc gets EncodedUnderlyingMarketDisruptionFallbackUnderlierSecurityDesc, Tag 41874.
func (m NoUnderlyingMarketDisruptionFallbackReferencePrices) GetEncodedUnderlyingMarketDisruptionFallbackUnderlierSecurityDesc() (v string, err quickfix.MessageRejectError) {
	var f field.EncodedUnderlyingMarketDisruptionFallbackUnderlierSecurityDescField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingMarketDisruptionFallbackOpenUnits gets UnderlyingMarketDisruptionFallbackOpenUnits, Tag 41875.
func (m NoUnderlyingMarketDisruptionFallbackReferencePrices) GetUnderlyingMarketDisruptionFallbackOpenUnits() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingMarketDisruptionFallbackOpenUnitsField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingMarketDisruptionFallbackBasketCurrency gets UnderlyingMarketDisruptionFallbackBasketCurrency, Tag 41876.
func (m NoUnderlyingMarketDisruptionFallbackReferencePrices) GetUnderlyingMarketDisruptionFallbackBasketCurrency() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingMarketDisruptionFallbackBasketCurrencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingMarketDisruptionFallbackBasketDivisor gets UnderlyingMarketDisruptionFallbackBasketDivisor, Tag 41877.
func (m NoUnderlyingMarketDisruptionFallbackReferencePrices) GetUnderlyingMarketDisruptionFallbackBasketDivisor() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingMarketDisruptionFallbackBasketDivisorField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingMarketDisruptionFallbackUnderlierType returns true if UnderlyingMarketDisruptionFallbackUnderlierType is present, Tag 41869.
func (m NoUnderlyingMarketDisruptionFallbackReferencePrices) HasUnderlyingMarketDisruptionFallbackUnderlierType() bool {
	return m.Has(tag.UnderlyingMarketDisruptionFallbackUnderlierType)
}

// HasUnderlyingMarketDisruptionFallbackUnderlierSecurityID returns true if UnderlyingMarketDisruptionFallbackUnderlierSecurityID is present, Tag 41870.
func (m NoUnderlyingMarketDisruptionFallbackReferencePrices) HasUnderlyingMarketDisruptionFallbackUnderlierSecurityID() bool {
	return m.Has(tag.UnderlyingMarketDisruptionFallbackUnderlierSecurityID)
}

// HasUnderlyingMarketDisruptionFallbackUnderlierSecurityIDSource returns true if UnderlyingMarketDisruptionFallbackUnderlierSecurityIDSource is present, Tag 41871.
func (m NoUnderlyingMarketDisruptionFallbackReferencePrices) HasUnderlyingMarketDisruptionFallbackUnderlierSecurityIDSource() bool {
	return m.Has(tag.UnderlyingMarketDisruptionFallbackUnderlierSecurityIDSource)
}

// HasUnderlyingMarketDisruptionFallbackUnderlierSecurityDesc returns true if UnderlyingMarketDisruptionFallbackUnderlierSecurityDesc is present, Tag 41872.
func (m NoUnderlyingMarketDisruptionFallbackReferencePrices) HasUnderlyingMarketDisruptionFallbackUnderlierSecurityDesc() bool {
	return m.Has(tag.UnderlyingMarketDisruptionFallbackUnderlierSecurityDesc)
}

// HasEncodedUnderlyingMarketDisruptionFallbackUnderlierSecurityDescLen returns true if EncodedUnderlyingMarketDisruptionFallbackUnderlierSecurityDescLen is present, Tag 41873.
func (m NoUnderlyingMarketDisruptionFallbackReferencePrices) HasEncodedUnderlyingMarketDisruptionFallbackUnderlierSecurityDescLen() bool {
	return m.Has(tag.EncodedUnderlyingMarketDisruptionFallbackUnderlierSecurityDescLen)
}

// HasEncodedUnderlyingMarketDisruptionFallbackUnderlierSecurityDesc returns true if EncodedUnderlyingMarketDisruptionFallbackUnderlierSecurityDesc is present, Tag 41874.
func (m NoUnderlyingMarketDisruptionFallbackReferencePrices) HasEncodedUnderlyingMarketDisruptionFallbackUnderlierSecurityDesc() bool {
	return m.Has(tag.EncodedUnderlyingMarketDisruptionFallbackUnderlierSecurityDesc)
}

// HasUnderlyingMarketDisruptionFallbackOpenUnits returns true if UnderlyingMarketDisruptionFallbackOpenUnits is present, Tag 41875.
func (m NoUnderlyingMarketDisruptionFallbackReferencePrices) HasUnderlyingMarketDisruptionFallbackOpenUnits() bool {
	return m.Has(tag.UnderlyingMarketDisruptionFallbackOpenUnits)
}

// HasUnderlyingMarketDisruptionFallbackBasketCurrency returns true if UnderlyingMarketDisruptionFallbackBasketCurrency is present, Tag 41876.
func (m NoUnderlyingMarketDisruptionFallbackReferencePrices) HasUnderlyingMarketDisruptionFallbackBasketCurrency() bool {
	return m.Has(tag.UnderlyingMarketDisruptionFallbackBasketCurrency)
}

// HasUnderlyingMarketDisruptionFallbackBasketDivisor returns true if UnderlyingMarketDisruptionFallbackBasketDivisor is present, Tag 41877.
func (m NoUnderlyingMarketDisruptionFallbackReferencePrices) HasUnderlyingMarketDisruptionFallbackBasketDivisor() bool {
	return m.Has(tag.UnderlyingMarketDisruptionFallbackBasketDivisor)
}

// NoUnderlyingMarketDisruptionFallbackReferencePricesRepeatingGroup is a repeating group, Tag 41868.
type NoUnderlyingMarketDisruptionFallbackReferencePricesRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingMarketDisruptionFallbackReferencePricesRepeatingGroup returns an initialized, NoUnderlyingMarketDisruptionFallbackReferencePricesRepeatingGroup.
func NewNoUnderlyingMarketDisruptionFallbackReferencePricesRepeatingGroup() NoUnderlyingMarketDisruptionFallbackReferencePricesRepeatingGroup {
	return NoUnderlyingMarketDisruptionFallbackReferencePricesRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingMarketDisruptionFallbackReferencePrices,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingMarketDisruptionFallbackUnderlierType),
				quickfix.GroupElement(tag.UnderlyingMarketDisruptionFallbackUnderlierSecurityID),
				quickfix.GroupElement(tag.UnderlyingMarketDisruptionFallbackUnderlierSecurityIDSource),
				quickfix.GroupElement(tag.UnderlyingMarketDisruptionFallbackUnderlierSecurityDesc),
				quickfix.GroupElement(tag.EncodedUnderlyingMarketDisruptionFallbackUnderlierSecurityDescLen),
				quickfix.GroupElement(tag.EncodedUnderlyingMarketDisruptionFallbackUnderlierSecurityDesc),
				quickfix.GroupElement(tag.UnderlyingMarketDisruptionFallbackOpenUnits),
				quickfix.GroupElement(tag.UnderlyingMarketDisruptionFallbackBasketCurrency),
				quickfix.GroupElement(tag.UnderlyingMarketDisruptionFallbackBasketDivisor),
			},
		),
	}
}

// Add create and append a new NoUnderlyingMarketDisruptionFallbackReferencePrices to this group.
func (m NoUnderlyingMarketDisruptionFallbackReferencePricesRepeatingGroup) Add() NoUnderlyingMarketDisruptionFallbackReferencePrices {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingMarketDisruptionFallbackReferencePrices{g}
}

// Get returns the ith NoUnderlyingMarketDisruptionFallbackReferencePrices in the NoUnderlyingMarketDisruptionFallbackReferencePricesRepeatinGroup.
func (m NoUnderlyingMarketDisruptionFallbackReferencePricesRepeatingGroup) Get(i int) NoUnderlyingMarketDisruptionFallbackReferencePrices {
	return NoUnderlyingMarketDisruptionFallbackReferencePrices{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingPricingDateBusinessCenters is a repeating group element, Tag 41947.
type NoUnderlyingPricingDateBusinessCenters struct {
	*quickfix.Group
}

// SetUnderlyingPricingDateBusinessCenter sets UnderlyingPricingDateBusinessCenter, Tag 41948.
func (m NoUnderlyingPricingDateBusinessCenters) SetUnderlyingPricingDateBusinessCenter(v string) {
	m.Set(field.NewUnderlyingPricingDateBusinessCenter(v))
}

// GetUnderlyingPricingDateBusinessCenter gets UnderlyingPricingDateBusinessCenter, Tag 41948.
func (m NoUnderlyingPricingDateBusinessCenters) GetUnderlyingPricingDateBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPricingDateBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingPricingDateBusinessCenter returns true if UnderlyingPricingDateBusinessCenter is present, Tag 41948.
func (m NoUnderlyingPricingDateBusinessCenters) HasUnderlyingPricingDateBusinessCenter() bool {
	return m.Has(tag.UnderlyingPricingDateBusinessCenter)
}

// NoUnderlyingPricingDateBusinessCentersRepeatingGroup is a repeating group, Tag 41947.
type NoUnderlyingPricingDateBusinessCentersRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingPricingDateBusinessCentersRepeatingGroup returns an initialized, NoUnderlyingPricingDateBusinessCentersRepeatingGroup.
func NewNoUnderlyingPricingDateBusinessCentersRepeatingGroup() NoUnderlyingPricingDateBusinessCentersRepeatingGroup {
	return NoUnderlyingPricingDateBusinessCentersRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingPricingDateBusinessCenters,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingPricingDateBusinessCenter),
			},
		),
	}
}

// Add create and append a new NoUnderlyingPricingDateBusinessCenters to this group.
func (m NoUnderlyingPricingDateBusinessCentersRepeatingGroup) Add() NoUnderlyingPricingDateBusinessCenters {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingPricingDateBusinessCenters{g}
}

// Get returns the ith NoUnderlyingPricingDateBusinessCenters in the NoUnderlyingPricingDateBusinessCentersRepeatinGroup.
func (m NoUnderlyingPricingDateBusinessCentersRepeatingGroup) Get(i int) NoUnderlyingPricingDateBusinessCenters {
	return NoUnderlyingPricingDateBusinessCenters{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingAdditionalTerms is a repeating group element, Tag 42036.
type NoUnderlyingAdditionalTerms struct {
	*quickfix.Group
}

// SetUnderlyingAdditionalTermConditionPrecedentBondIndicator sets UnderlyingAdditionalTermConditionPrecedentBondIndicator, Tag 42037.
func (m NoUnderlyingAdditionalTerms) SetUnderlyingAdditionalTermConditionPrecedentBondIndicator(v bool) {
	m.Set(field.NewUnderlyingAdditionalTermConditionPrecedentBondIndicator(v))
}

// SetUnderlyingAdditionalTermDiscrepancyClauseIndicator sets UnderlyingAdditionalTermDiscrepancyClauseIndicator, Tag 42038.
func (m NoUnderlyingAdditionalTerms) SetUnderlyingAdditionalTermDiscrepancyClauseIndicator(v bool) {
	m.Set(field.NewUnderlyingAdditionalTermDiscrepancyClauseIndicator(v))
}

// SetNoUnderlyingAdditionalTermBondRefs sets NoUnderlyingAdditionalTermBondRefs, Tag 41340.
func (m NoUnderlyingAdditionalTerms) SetNoUnderlyingAdditionalTermBondRefs(f NoUnderlyingAdditionalTermBondRefsRepeatingGroup) {
	m.SetGroup(f)
}

// GetUnderlyingAdditionalTermConditionPrecedentBondIndicator gets UnderlyingAdditionalTermConditionPrecedentBondIndicator, Tag 42037.
func (m NoUnderlyingAdditionalTerms) GetUnderlyingAdditionalTermConditionPrecedentBondIndicator() (v bool, err quickfix.MessageRejectError) {
	var f field.UnderlyingAdditionalTermConditionPrecedentBondIndicatorField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingAdditionalTermDiscrepancyClauseIndicator gets UnderlyingAdditionalTermDiscrepancyClauseIndicator, Tag 42038.
func (m NoUnderlyingAdditionalTerms) GetUnderlyingAdditionalTermDiscrepancyClauseIndicator() (v bool, err quickfix.MessageRejectError) {
	var f field.UnderlyingAdditionalTermDiscrepancyClauseIndicatorField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUnderlyingAdditionalTermBondRefs gets NoUnderlyingAdditionalTermBondRefs, Tag 41340.
func (m NoUnderlyingAdditionalTerms) GetNoUnderlyingAdditionalTermBondRefs() (NoUnderlyingAdditionalTermBondRefsRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingAdditionalTermBondRefsRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// HasUnderlyingAdditionalTermConditionPrecedentBondIndicator returns true if UnderlyingAdditionalTermConditionPrecedentBondIndicator is present, Tag 42037.
func (m NoUnderlyingAdditionalTerms) HasUnderlyingAdditionalTermConditionPrecedentBondIndicator() bool {
	return m.Has(tag.UnderlyingAdditionalTermConditionPrecedentBondIndicator)
}

// HasUnderlyingAdditionalTermDiscrepancyClauseIndicator returns true if UnderlyingAdditionalTermDiscrepancyClauseIndicator is present, Tag 42038.
func (m NoUnderlyingAdditionalTerms) HasUnderlyingAdditionalTermDiscrepancyClauseIndicator() bool {
	return m.Has(tag.UnderlyingAdditionalTermDiscrepancyClauseIndicator)
}

// HasNoUnderlyingAdditionalTermBondRefs returns true if NoUnderlyingAdditionalTermBondRefs is present, Tag 41340.
func (m NoUnderlyingAdditionalTerms) HasNoUnderlyingAdditionalTermBondRefs() bool {
	return m.Has(tag.NoUnderlyingAdditionalTermBondRefs)
}

// NoUnderlyingAdditionalTermBondRefs is a repeating group element, Tag 41340.
type NoUnderlyingAdditionalTermBondRefs struct {
	*quickfix.Group
}

// SetUnderlyingAdditionalTermBondSecurityID sets UnderlyingAdditionalTermBondSecurityID, Tag 41341.
func (m NoUnderlyingAdditionalTermBondRefs) SetUnderlyingAdditionalTermBondSecurityID(v string) {
	m.Set(field.NewUnderlyingAdditionalTermBondSecurityID(v))
}

// SetUnderlyingAdditionalTermBondSecurityIDSource sets UnderlyingAdditionalTermBondSecurityIDSource, Tag 41701.
func (m NoUnderlyingAdditionalTermBondRefs) SetUnderlyingAdditionalTermBondSecurityIDSource(v string) {
	m.Set(field.NewUnderlyingAdditionalTermBondSecurityIDSource(v))
}

// SetUnderlyingAdditionalTermBondDesc sets UnderlyingAdditionalTermBondDesc, Tag 41709.
func (m NoUnderlyingAdditionalTermBondRefs) SetUnderlyingAdditionalTermBondDesc(v string) {
	m.Set(field.NewUnderlyingAdditionalTermBondDesc(v))
}

// SetEncodedUnderlyingAdditionalTermBondDescLen sets EncodedUnderlyingAdditionalTermBondDescLen, Tag 41710.
func (m NoUnderlyingAdditionalTermBondRefs) SetEncodedUnderlyingAdditionalTermBondDescLen(v int) {
	m.Set(field.NewEncodedUnderlyingAdditionalTermBondDescLen(v))
}

// SetEncodedUnderlyingAdditionalTermBondDesc sets EncodedUnderlyingAdditionalTermBondDesc, Tag 41711.
func (m NoUnderlyingAdditionalTermBondRefs) SetEncodedUnderlyingAdditionalTermBondDesc(v string) {
	m.Set(field.NewEncodedUnderlyingAdditionalTermBondDesc(v))
}

// SetUnderlyingAdditionalTermBondCurrency sets UnderlyingAdditionalTermBondCurrency, Tag 41712.
func (m NoUnderlyingAdditionalTermBondRefs) SetUnderlyingAdditionalTermBondCurrency(v string) {
	m.Set(field.NewUnderlyingAdditionalTermBondCurrency(v))
}

// SetUnderlyingAdditionalTermBondIssuer sets UnderlyingAdditionalTermBondIssuer, Tag 42017.
func (m NoUnderlyingAdditionalTermBondRefs) SetUnderlyingAdditionalTermBondIssuer(v string) {
	m.Set(field.NewUnderlyingAdditionalTermBondIssuer(v))
}

// SetEncodedUnderlyingAdditionalTermBondIssuerLen sets EncodedUnderlyingAdditionalTermBondIssuerLen, Tag 42025.
func (m NoUnderlyingAdditionalTermBondRefs) SetEncodedUnderlyingAdditionalTermBondIssuerLen(v int) {
	m.Set(field.NewEncodedUnderlyingAdditionalTermBondIssuerLen(v))
}

// SetEncodedUnderlyingAdditionalTermBondIssuer sets EncodedUnderlyingAdditionalTermBondIssuer, Tag 42026.
func (m NoUnderlyingAdditionalTermBondRefs) SetEncodedUnderlyingAdditionalTermBondIssuer(v string) {
	m.Set(field.NewEncodedUnderlyingAdditionalTermBondIssuer(v))
}

// SetUnderlyingAdditionalTermBondSeniority sets UnderlyingAdditionalTermBondSeniority, Tag 42027.
func (m NoUnderlyingAdditionalTermBondRefs) SetUnderlyingAdditionalTermBondSeniority(v string) {
	m.Set(field.NewUnderlyingAdditionalTermBondSeniority(v))
}

// SetUnderlyingAdditionalTermBondCouponType sets UnderlyingAdditionalTermBondCouponType, Tag 42028.
func (m NoUnderlyingAdditionalTermBondRefs) SetUnderlyingAdditionalTermBondCouponType(v int) {
	m.Set(field.NewUnderlyingAdditionalTermBondCouponType(v))
}

// SetUnderlyingAdditionalTermBondCouponRate sets UnderlyingAdditionalTermBondCouponRate, Tag 42029.
func (m NoUnderlyingAdditionalTermBondRefs) SetUnderlyingAdditionalTermBondCouponRate(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingAdditionalTermBondCouponRate(value, scale))
}

// SetUnderlyingAdditionalTermBondMaturityDate sets UnderlyingAdditionalTermBondMaturityDate, Tag 42030.
func (m NoUnderlyingAdditionalTermBondRefs) SetUnderlyingAdditionalTermBondMaturityDate(v string) {
	m.Set(field.NewUnderlyingAdditionalTermBondMaturityDate(v))
}

// SetUnderlyingAdditionalTermBondParValue sets UnderlyingAdditionalTermBondParValue, Tag 42031.
func (m NoUnderlyingAdditionalTermBondRefs) SetUnderlyingAdditionalTermBondParValue(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingAdditionalTermBondParValue(value, scale))
}

// SetUnderlyingAdditionalTermBondCurrentTotalIssuedAmount sets UnderlyingAdditionalTermBondCurrentTotalIssuedAmount, Tag 42032.
func (m NoUnderlyingAdditionalTermBondRefs) SetUnderlyingAdditionalTermBondCurrentTotalIssuedAmount(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingAdditionalTermBondCurrentTotalIssuedAmount(value, scale))
}

// SetUnderlyingAdditionalTermBondCouponFrequencyPeriod sets UnderlyingAdditionalTermBondCouponFrequencyPeriod, Tag 42033.
func (m NoUnderlyingAdditionalTermBondRefs) SetUnderlyingAdditionalTermBondCouponFrequencyPeriod(v int) {
	m.Set(field.NewUnderlyingAdditionalTermBondCouponFrequencyPeriod(v))
}

// SetUnderlyingAdditionalTermBondCouponFrequencyUnit sets UnderlyingAdditionalTermBondCouponFrequencyUnit, Tag 42034.
func (m NoUnderlyingAdditionalTermBondRefs) SetUnderlyingAdditionalTermBondCouponFrequencyUnit(v string) {
	m.Set(field.NewUnderlyingAdditionalTermBondCouponFrequencyUnit(v))
}

// SetUnderlyingAdditionalTermBondDayCount sets UnderlyingAdditionalTermBondDayCount, Tag 42035.
func (m NoUnderlyingAdditionalTermBondRefs) SetUnderlyingAdditionalTermBondDayCount(v int) {
	m.Set(field.NewUnderlyingAdditionalTermBondDayCount(v))
}

// GetUnderlyingAdditionalTermBondSecurityID gets UnderlyingAdditionalTermBondSecurityID, Tag 41341.
func (m NoUnderlyingAdditionalTermBondRefs) GetUnderlyingAdditionalTermBondSecurityID() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingAdditionalTermBondSecurityIDField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingAdditionalTermBondSecurityIDSource gets UnderlyingAdditionalTermBondSecurityIDSource, Tag 41701.
func (m NoUnderlyingAdditionalTermBondRefs) GetUnderlyingAdditionalTermBondSecurityIDSource() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingAdditionalTermBondSecurityIDSourceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingAdditionalTermBondDesc gets UnderlyingAdditionalTermBondDesc, Tag 41709.
func (m NoUnderlyingAdditionalTermBondRefs) GetUnderlyingAdditionalTermBondDesc() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingAdditionalTermBondDescField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetEncodedUnderlyingAdditionalTermBondDescLen gets EncodedUnderlyingAdditionalTermBondDescLen, Tag 41710.
func (m NoUnderlyingAdditionalTermBondRefs) GetEncodedUnderlyingAdditionalTermBondDescLen() (v int, err quickfix.MessageRejectError) {
	var f field.EncodedUnderlyingAdditionalTermBondDescLenField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetEncodedUnderlyingAdditionalTermBondDesc gets EncodedUnderlyingAdditionalTermBondDesc, Tag 41711.
func (m NoUnderlyingAdditionalTermBondRefs) GetEncodedUnderlyingAdditionalTermBondDesc() (v string, err quickfix.MessageRejectError) {
	var f field.EncodedUnderlyingAdditionalTermBondDescField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingAdditionalTermBondCurrency gets UnderlyingAdditionalTermBondCurrency, Tag 41712.
func (m NoUnderlyingAdditionalTermBondRefs) GetUnderlyingAdditionalTermBondCurrency() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingAdditionalTermBondCurrencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingAdditionalTermBondIssuer gets UnderlyingAdditionalTermBondIssuer, Tag 42017.
func (m NoUnderlyingAdditionalTermBondRefs) GetUnderlyingAdditionalTermBondIssuer() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingAdditionalTermBondIssuerField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetEncodedUnderlyingAdditionalTermBondIssuerLen gets EncodedUnderlyingAdditionalTermBondIssuerLen, Tag 42025.
func (m NoUnderlyingAdditionalTermBondRefs) GetEncodedUnderlyingAdditionalTermBondIssuerLen() (v int, err quickfix.MessageRejectError) {
	var f field.EncodedUnderlyingAdditionalTermBondIssuerLenField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetEncodedUnderlyingAdditionalTermBondIssuer gets EncodedUnderlyingAdditionalTermBondIssuer, Tag 42026.
func (m NoUnderlyingAdditionalTermBondRefs) GetEncodedUnderlyingAdditionalTermBondIssuer() (v string, err quickfix.MessageRejectError) {
	var f field.EncodedUnderlyingAdditionalTermBondIssuerField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingAdditionalTermBondSeniority gets UnderlyingAdditionalTermBondSeniority, Tag 42027.
func (m NoUnderlyingAdditionalTermBondRefs) GetUnderlyingAdditionalTermBondSeniority() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingAdditionalTermBondSeniorityField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingAdditionalTermBondCouponType gets UnderlyingAdditionalTermBondCouponType, Tag 42028.
func (m NoUnderlyingAdditionalTermBondRefs) GetUnderlyingAdditionalTermBondCouponType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingAdditionalTermBondCouponTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingAdditionalTermBondCouponRate gets UnderlyingAdditionalTermBondCouponRate, Tag 42029.
func (m NoUnderlyingAdditionalTermBondRefs) GetUnderlyingAdditionalTermBondCouponRate() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingAdditionalTermBondCouponRateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingAdditionalTermBondMaturityDate gets UnderlyingAdditionalTermBondMaturityDate, Tag 42030.
func (m NoUnderlyingAdditionalTermBondRefs) GetUnderlyingAdditionalTermBondMaturityDate() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingAdditionalTermBondMaturityDateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingAdditionalTermBondParValue gets UnderlyingAdditionalTermBondParValue, Tag 42031.
func (m NoUnderlyingAdditionalTermBondRefs) GetUnderlyingAdditionalTermBondParValue() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingAdditionalTermBondParValueField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingAdditionalTermBondCurrentTotalIssuedAmount gets UnderlyingAdditionalTermBondCurrentTotalIssuedAmount, Tag 42032.
func (m NoUnderlyingAdditionalTermBondRefs) GetUnderlyingAdditionalTermBondCurrentTotalIssuedAmount() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingAdditionalTermBondCurrentTotalIssuedAmountField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingAdditionalTermBondCouponFrequencyPeriod gets UnderlyingAdditionalTermBondCouponFrequencyPeriod, Tag 42033.
func (m NoUnderlyingAdditionalTermBondRefs) GetUnderlyingAdditionalTermBondCouponFrequencyPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingAdditionalTermBondCouponFrequencyPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingAdditionalTermBondCouponFrequencyUnit gets UnderlyingAdditionalTermBondCouponFrequencyUnit, Tag 42034.
func (m NoUnderlyingAdditionalTermBondRefs) GetUnderlyingAdditionalTermBondCouponFrequencyUnit() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingAdditionalTermBondCouponFrequencyUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingAdditionalTermBondDayCount gets UnderlyingAdditionalTermBondDayCount, Tag 42035.
func (m NoUnderlyingAdditionalTermBondRefs) GetUnderlyingAdditionalTermBondDayCount() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingAdditionalTermBondDayCountField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingAdditionalTermBondSecurityID returns true if UnderlyingAdditionalTermBondSecurityID is present, Tag 41341.
func (m NoUnderlyingAdditionalTermBondRefs) HasUnderlyingAdditionalTermBondSecurityID() bool {
	return m.Has(tag.UnderlyingAdditionalTermBondSecurityID)
}

// HasUnderlyingAdditionalTermBondSecurityIDSource returns true if UnderlyingAdditionalTermBondSecurityIDSource is present, Tag 41701.
func (m NoUnderlyingAdditionalTermBondRefs) HasUnderlyingAdditionalTermBondSecurityIDSource() bool {
	return m.Has(tag.UnderlyingAdditionalTermBondSecurityIDSource)
}

// HasUnderlyingAdditionalTermBondDesc returns true if UnderlyingAdditionalTermBondDesc is present, Tag 41709.
func (m NoUnderlyingAdditionalTermBondRefs) HasUnderlyingAdditionalTermBondDesc() bool {
	return m.Has(tag.UnderlyingAdditionalTermBondDesc)
}

// HasEncodedUnderlyingAdditionalTermBondDescLen returns true if EncodedUnderlyingAdditionalTermBondDescLen is present, Tag 41710.
func (m NoUnderlyingAdditionalTermBondRefs) HasEncodedUnderlyingAdditionalTermBondDescLen() bool {
	return m.Has(tag.EncodedUnderlyingAdditionalTermBondDescLen)
}

// HasEncodedUnderlyingAdditionalTermBondDesc returns true if EncodedUnderlyingAdditionalTermBondDesc is present, Tag 41711.
func (m NoUnderlyingAdditionalTermBondRefs) HasEncodedUnderlyingAdditionalTermBondDesc() bool {
	return m.Has(tag.EncodedUnderlyingAdditionalTermBondDesc)
}

// HasUnderlyingAdditionalTermBondCurrency returns true if UnderlyingAdditionalTermBondCurrency is present, Tag 41712.
func (m NoUnderlyingAdditionalTermBondRefs) HasUnderlyingAdditionalTermBondCurrency() bool {
	return m.Has(tag.UnderlyingAdditionalTermBondCurrency)
}

// HasUnderlyingAdditionalTermBondIssuer returns true if UnderlyingAdditionalTermBondIssuer is present, Tag 42017.
func (m NoUnderlyingAdditionalTermBondRefs) HasUnderlyingAdditionalTermBondIssuer() bool {
	return m.Has(tag.UnderlyingAdditionalTermBondIssuer)
}

// HasEncodedUnderlyingAdditionalTermBondIssuerLen returns true if EncodedUnderlyingAdditionalTermBondIssuerLen is present, Tag 42025.
func (m NoUnderlyingAdditionalTermBondRefs) HasEncodedUnderlyingAdditionalTermBondIssuerLen() bool {
	return m.Has(tag.EncodedUnderlyingAdditionalTermBondIssuerLen)
}

// HasEncodedUnderlyingAdditionalTermBondIssuer returns true if EncodedUnderlyingAdditionalTermBondIssuer is present, Tag 42026.
func (m NoUnderlyingAdditionalTermBondRefs) HasEncodedUnderlyingAdditionalTermBondIssuer() bool {
	return m.Has(tag.EncodedUnderlyingAdditionalTermBondIssuer)
}

// HasUnderlyingAdditionalTermBondSeniority returns true if UnderlyingAdditionalTermBondSeniority is present, Tag 42027.
func (m NoUnderlyingAdditionalTermBondRefs) HasUnderlyingAdditionalTermBondSeniority() bool {
	return m.Has(tag.UnderlyingAdditionalTermBondSeniority)
}

// HasUnderlyingAdditionalTermBondCouponType returns true if UnderlyingAdditionalTermBondCouponType is present, Tag 42028.
func (m NoUnderlyingAdditionalTermBondRefs) HasUnderlyingAdditionalTermBondCouponType() bool {
	return m.Has(tag.UnderlyingAdditionalTermBondCouponType)
}

// HasUnderlyingAdditionalTermBondCouponRate returns true if UnderlyingAdditionalTermBondCouponRate is present, Tag 42029.
func (m NoUnderlyingAdditionalTermBondRefs) HasUnderlyingAdditionalTermBondCouponRate() bool {
	return m.Has(tag.UnderlyingAdditionalTermBondCouponRate)
}

// HasUnderlyingAdditionalTermBondMaturityDate returns true if UnderlyingAdditionalTermBondMaturityDate is present, Tag 42030.
func (m NoUnderlyingAdditionalTermBondRefs) HasUnderlyingAdditionalTermBondMaturityDate() bool {
	return m.Has(tag.UnderlyingAdditionalTermBondMaturityDate)
}

// HasUnderlyingAdditionalTermBondParValue returns true if UnderlyingAdditionalTermBondParValue is present, Tag 42031.
func (m NoUnderlyingAdditionalTermBondRefs) HasUnderlyingAdditionalTermBondParValue() bool {
	return m.Has(tag.UnderlyingAdditionalTermBondParValue)
}

// HasUnderlyingAdditionalTermBondCurrentTotalIssuedAmount returns true if UnderlyingAdditionalTermBondCurrentTotalIssuedAmount is present, Tag 42032.
func (m NoUnderlyingAdditionalTermBondRefs) HasUnderlyingAdditionalTermBondCurrentTotalIssuedAmount() bool {
	return m.Has(tag.UnderlyingAdditionalTermBondCurrentTotalIssuedAmount)
}

// HasUnderlyingAdditionalTermBondCouponFrequencyPeriod returns true if UnderlyingAdditionalTermBondCouponFrequencyPeriod is present, Tag 42033.
func (m NoUnderlyingAdditionalTermBondRefs) HasUnderlyingAdditionalTermBondCouponFrequencyPeriod() bool {
	return m.Has(tag.UnderlyingAdditionalTermBondCouponFrequencyPeriod)
}

// HasUnderlyingAdditionalTermBondCouponFrequencyUnit returns true if UnderlyingAdditionalTermBondCouponFrequencyUnit is present, Tag 42034.
func (m NoUnderlyingAdditionalTermBondRefs) HasUnderlyingAdditionalTermBondCouponFrequencyUnit() bool {
	return m.Has(tag.UnderlyingAdditionalTermBondCouponFrequencyUnit)
}

// HasUnderlyingAdditionalTermBondDayCount returns true if UnderlyingAdditionalTermBondDayCount is present, Tag 42035.
func (m NoUnderlyingAdditionalTermBondRefs) HasUnderlyingAdditionalTermBondDayCount() bool {
	return m.Has(tag.UnderlyingAdditionalTermBondDayCount)
}

// NoUnderlyingAdditionalTermBondRefsRepeatingGroup is a repeating group, Tag 41340.
type NoUnderlyingAdditionalTermBondRefsRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingAdditionalTermBondRefsRepeatingGroup returns an initialized, NoUnderlyingAdditionalTermBondRefsRepeatingGroup.
func NewNoUnderlyingAdditionalTermBondRefsRepeatingGroup() NoUnderlyingAdditionalTermBondRefsRepeatingGroup {
	return NoUnderlyingAdditionalTermBondRefsRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingAdditionalTermBondRefs,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingAdditionalTermBondSecurityID),
				quickfix.GroupElement(tag.UnderlyingAdditionalTermBondSecurityIDSource),
				quickfix.GroupElement(tag.UnderlyingAdditionalTermBondDesc),
				quickfix.GroupElement(tag.EncodedUnderlyingAdditionalTermBondDescLen),
				quickfix.GroupElement(tag.EncodedUnderlyingAdditionalTermBondDesc),
				quickfix.GroupElement(tag.UnderlyingAdditionalTermBondCurrency),
				quickfix.GroupElement(tag.UnderlyingAdditionalTermBondIssuer),
				quickfix.GroupElement(tag.EncodedUnderlyingAdditionalTermBondIssuerLen),
				quickfix.GroupElement(tag.EncodedUnderlyingAdditionalTermBondIssuer),
				quickfix.GroupElement(tag.UnderlyingAdditionalTermBondSeniority),
				quickfix.GroupElement(tag.UnderlyingAdditionalTermBondCouponType),
				quickfix.GroupElement(tag.UnderlyingAdditionalTermBondCouponRate),
				quickfix.GroupElement(tag.UnderlyingAdditionalTermBondMaturityDate),
				quickfix.GroupElement(tag.UnderlyingAdditionalTermBondParValue),
				quickfix.GroupElement(tag.UnderlyingAdditionalTermBondCurrentTotalIssuedAmount),
				quickfix.GroupElement(tag.UnderlyingAdditionalTermBondCouponFrequencyPeriod),
				quickfix.GroupElement(tag.UnderlyingAdditionalTermBondCouponFrequencyUnit),
				quickfix.GroupElement(tag.UnderlyingAdditionalTermBondDayCount),
			},
		),
	}
}

// Add create and append a new NoUnderlyingAdditionalTermBondRefs to this group.
func (m NoUnderlyingAdditionalTermBondRefsRepeatingGroup) Add() NoUnderlyingAdditionalTermBondRefs {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingAdditionalTermBondRefs{g}
}

// Get returns the ith NoUnderlyingAdditionalTermBondRefs in the NoUnderlyingAdditionalTermBondRefsRepeatinGroup.
func (m NoUnderlyingAdditionalTermBondRefsRepeatingGroup) Get(i int) NoUnderlyingAdditionalTermBondRefs {
	return NoUnderlyingAdditionalTermBondRefs{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingAdditionalTermsRepeatingGroup is a repeating group, Tag 42036.
type NoUnderlyingAdditionalTermsRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingAdditionalTermsRepeatingGroup returns an initialized, NoUnderlyingAdditionalTermsRepeatingGroup.
func NewNoUnderlyingAdditionalTermsRepeatingGroup() NoUnderlyingAdditionalTermsRepeatingGroup {
	return NoUnderlyingAdditionalTermsRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingAdditionalTerms,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingAdditionalTermConditionPrecedentBondIndicator),
				quickfix.GroupElement(tag.UnderlyingAdditionalTermDiscrepancyClauseIndicator),
				NewNoUnderlyingAdditionalTermBondRefsRepeatingGroup(),
			},
		),
	}
}

// Add create and append a new NoUnderlyingAdditionalTerms to this group.
func (m NoUnderlyingAdditionalTermsRepeatingGroup) Add() NoUnderlyingAdditionalTerms {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingAdditionalTerms{g}
}

// Get returns the ith NoUnderlyingAdditionalTerms in the NoUnderlyingAdditionalTermsRepeatinGroup.
func (m NoUnderlyingAdditionalTermsRepeatingGroup) Get(i int) NoUnderlyingAdditionalTerms {
	return NoUnderlyingAdditionalTerms{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingCashSettlTerms is a repeating group element, Tag 42041.
type NoUnderlyingCashSettlTerms struct {
	*quickfix.Group
}

// SetUnderlyingCashSettlCurrency sets UnderlyingCashSettlCurrency, Tag 42042.
func (m NoUnderlyingCashSettlTerms) SetUnderlyingCashSettlCurrency(v string) {
	m.Set(field.NewUnderlyingCashSettlCurrency(v))
}

// SetUnderlyingCashSettlValuationFirstBusinessDayOffset sets UnderlyingCashSettlValuationFirstBusinessDayOffset, Tag 42043.
func (m NoUnderlyingCashSettlTerms) SetUnderlyingCashSettlValuationFirstBusinessDayOffset(v int) {
	m.Set(field.NewUnderlyingCashSettlValuationFirstBusinessDayOffset(v))
}

// SetUnderlyingCashSettlValuationSubsequentBusinessDaysOffset sets UnderlyingCashSettlValuationSubsequentBusinessDaysOffset, Tag 42044.
func (m NoUnderlyingCashSettlTerms) SetUnderlyingCashSettlValuationSubsequentBusinessDaysOffset(v int) {
	m.Set(field.NewUnderlyingCashSettlValuationSubsequentBusinessDaysOffset(v))
}

// SetUnderlyingCashSettlNumOfValuationDates sets UnderlyingCashSettlNumOfValuationDates, Tag 42045.
func (m NoUnderlyingCashSettlTerms) SetUnderlyingCashSettlNumOfValuationDates(v int) {
	m.Set(field.NewUnderlyingCashSettlNumOfValuationDates(v))
}

// SetUnderlyingCashSettlValuationTime sets UnderlyingCashSettlValuationTime, Tag 42046.
func (m NoUnderlyingCashSettlTerms) SetUnderlyingCashSettlValuationTime(v string) {
	m.Set(field.NewUnderlyingCashSettlValuationTime(v))
}

// SetUnderlyingCashSettlBusinessCenter sets UnderlyingCashSettlBusinessCenter, Tag 42047.
func (m NoUnderlyingCashSettlTerms) SetUnderlyingCashSettlBusinessCenter(v string) {
	m.Set(field.NewUnderlyingCashSettlBusinessCenter(v))
}

// SetUnderlyingCashSettlQuoteMethod sets UnderlyingCashSettlQuoteMethod, Tag 42048.
func (m NoUnderlyingCashSettlTerms) SetUnderlyingCashSettlQuoteMethod(v int) {
	m.Set(field.NewUnderlyingCashSettlQuoteMethod(v))
}

// SetUnderlyingCashSettlQuoteAmount sets UnderlyingCashSettlQuoteAmount, Tag 42049.
func (m NoUnderlyingCashSettlTerms) SetUnderlyingCashSettlQuoteAmount(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingCashSettlQuoteAmount(value, scale))
}

// SetUnderlyingCashSettlQuoteCurrency sets UnderlyingCashSettlQuoteCurrency, Tag 42050.
func (m NoUnderlyingCashSettlTerms) SetUnderlyingCashSettlQuoteCurrency(v string) {
	m.Set(field.NewUnderlyingCashSettlQuoteCurrency(v))
}

// SetUnderlyingCashSettlMinimumQuoteAmount sets UnderlyingCashSettlMinimumQuoteAmount, Tag 42051.
func (m NoUnderlyingCashSettlTerms) SetUnderlyingCashSettlMinimumQuoteAmount(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingCashSettlMinimumQuoteAmount(value, scale))
}

// SetUnderlyingCashSettlMinimumQuoteCurrency sets UnderlyingCashSettlMinimumQuoteCurrency, Tag 42052.
func (m NoUnderlyingCashSettlTerms) SetUnderlyingCashSettlMinimumQuoteCurrency(v string) {
	m.Set(field.NewUnderlyingCashSettlMinimumQuoteCurrency(v))
}

// SetNoUnderlyingCashSettlDealers sets NoUnderlyingCashSettlDealers, Tag 42039.
func (m NoUnderlyingCashSettlTerms) SetNoUnderlyingCashSettlDealers(f NoUnderlyingCashSettlDealersRepeatingGroup) {
	m.SetGroup(f)
}

// SetUnderlyingCashSettlBusinessDays sets UnderlyingCashSettlBusinessDays, Tag 42053.
func (m NoUnderlyingCashSettlTerms) SetUnderlyingCashSettlBusinessDays(v int) {
	m.Set(field.NewUnderlyingCashSettlBusinessDays(v))
}

// SetUnderlyingCashSettlAmount sets UnderlyingCashSettlAmount, Tag 42054.
func (m NoUnderlyingCashSettlTerms) SetUnderlyingCashSettlAmount(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingCashSettlAmount(value, scale))
}

// SetUnderlyingCashSettlRecoveryFactor sets UnderlyingCashSettlRecoveryFactor, Tag 42055.
func (m NoUnderlyingCashSettlTerms) SetUnderlyingCashSettlRecoveryFactor(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingCashSettlRecoveryFactor(value, scale))
}

// SetUnderlyingCashSettlFixedTermIndicator sets UnderlyingCashSettlFixedTermIndicator, Tag 42056.
func (m NoUnderlyingCashSettlTerms) SetUnderlyingCashSettlFixedTermIndicator(v bool) {
	m.Set(field.NewUnderlyingCashSettlFixedTermIndicator(v))
}

// SetUnderlyingCashSettlAccruedInterestIndicator sets UnderlyingCashSettlAccruedInterestIndicator, Tag 42057.
func (m NoUnderlyingCashSettlTerms) SetUnderlyingCashSettlAccruedInterestIndicator(v bool) {
	m.Set(field.NewUnderlyingCashSettlAccruedInterestIndicator(v))
}

// SetUnderlyingCashSettlValuationMethod sets UnderlyingCashSettlValuationMethod, Tag 42058.
func (m NoUnderlyingCashSettlTerms) SetUnderlyingCashSettlValuationMethod(v int) {
	m.Set(field.NewUnderlyingCashSettlValuationMethod(v))
}

// SetUnderlyingCashSettlTermXID sets UnderlyingCashSettlTermXID, Tag 42059.
func (m NoUnderlyingCashSettlTerms) SetUnderlyingCashSettlTermXID(v string) {
	m.Set(field.NewUnderlyingCashSettlTermXID(v))
}

// SetUnderlyingCashSettlPriceSource sets UnderlyingCashSettlPriceSource, Tag 42797.
func (m NoUnderlyingCashSettlTerms) SetUnderlyingCashSettlPriceSource(v string) {
	m.Set(field.NewUnderlyingCashSettlPriceSource(v))
}

// SetUnderlyingCashSettlPriceDefault sets UnderlyingCashSettlPriceDefault, Tag 42798.
func (m NoUnderlyingCashSettlTerms) SetUnderlyingCashSettlPriceDefault(v int) {
	m.Set(field.NewUnderlyingCashSettlPriceDefault(v))
}

// SetUnderlyingCashSettlDateUnadjusted sets UnderlyingCashSettlDateUnadjusted, Tag 42790.
func (m NoUnderlyingCashSettlTerms) SetUnderlyingCashSettlDateUnadjusted(v string) {
	m.Set(field.NewUnderlyingCashSettlDateUnadjusted(v))
}

// SetUnderlyingCashSettlDateBusinessDayConvention sets UnderlyingCashSettlDateBusinessDayConvention, Tag 42791.
func (m NoUnderlyingCashSettlTerms) SetUnderlyingCashSettlDateBusinessDayConvention(v int) {
	m.Set(field.NewUnderlyingCashSettlDateBusinessDayConvention(v))
}

// SetNoUnderlyingCashSettlDateBusinessCenters sets NoUnderlyingCashSettlDateBusinessCenters, Tag 42788.
func (m NoUnderlyingCashSettlTerms) SetNoUnderlyingCashSettlDateBusinessCenters(f NoUnderlyingCashSettlDateBusinessCentersRepeatingGroup) {
	m.SetGroup(f)
}

// SetUnderlyingCashSettlDateRelativeTo sets UnderlyingCashSettlDateRelativeTo, Tag 42792.
func (m NoUnderlyingCashSettlTerms) SetUnderlyingCashSettlDateRelativeTo(v int) {
	m.Set(field.NewUnderlyingCashSettlDateRelativeTo(v))
}

// SetUnderlyingCashSettlDateOffsetPeriod sets UnderlyingCashSettlDateOffsetPeriod, Tag 42793.
func (m NoUnderlyingCashSettlTerms) SetUnderlyingCashSettlDateOffsetPeriod(v int) {
	m.Set(field.NewUnderlyingCashSettlDateOffsetPeriod(v))
}

// SetUnderlyingCashSettlDateOffsetUnit sets UnderlyingCashSettlDateOffsetUnit, Tag 42794.
func (m NoUnderlyingCashSettlTerms) SetUnderlyingCashSettlDateOffsetUnit(v string) {
	m.Set(field.NewUnderlyingCashSettlDateOffsetUnit(v))
}

// SetUnderlyingCashSettlDateOffsetDayType sets UnderlyingCashSettlDateOffsetDayType, Tag 42795.
func (m NoUnderlyingCashSettlTerms) SetUnderlyingCashSettlDateOffsetDayType(v int) {
	m.Set(field.NewUnderlyingCashSettlDateOffsetDayType(v))
}

// SetUnderlyingCashSettlDateAdjusted sets UnderlyingCashSettlDateAdjusted, Tag 42796.
func (m NoUnderlyingCashSettlTerms) SetUnderlyingCashSettlDateAdjusted(v string) {
	m.Set(field.NewUnderlyingCashSettlDateAdjusted(v))
}

// GetUnderlyingCashSettlCurrency gets UnderlyingCashSettlCurrency, Tag 42042.
func (m NoUnderlyingCashSettlTerms) GetUnderlyingCashSettlCurrency() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingCashSettlCurrencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingCashSettlValuationFirstBusinessDayOffset gets UnderlyingCashSettlValuationFirstBusinessDayOffset, Tag 42043.
func (m NoUnderlyingCashSettlTerms) GetUnderlyingCashSettlValuationFirstBusinessDayOffset() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingCashSettlValuationFirstBusinessDayOffsetField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingCashSettlValuationSubsequentBusinessDaysOffset gets UnderlyingCashSettlValuationSubsequentBusinessDaysOffset, Tag 42044.
func (m NoUnderlyingCashSettlTerms) GetUnderlyingCashSettlValuationSubsequentBusinessDaysOffset() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingCashSettlValuationSubsequentBusinessDaysOffsetField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingCashSettlNumOfValuationDates gets UnderlyingCashSettlNumOfValuationDates, Tag 42045.
func (m NoUnderlyingCashSettlTerms) GetUnderlyingCashSettlNumOfValuationDates() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingCashSettlNumOfValuationDatesField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingCashSettlValuationTime gets UnderlyingCashSettlValuationTime, Tag 42046.
func (m NoUnderlyingCashSettlTerms) GetUnderlyingCashSettlValuationTime() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingCashSettlValuationTimeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingCashSettlBusinessCenter gets UnderlyingCashSettlBusinessCenter, Tag 42047.
func (m NoUnderlyingCashSettlTerms) GetUnderlyingCashSettlBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingCashSettlBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingCashSettlQuoteMethod gets UnderlyingCashSettlQuoteMethod, Tag 42048.
func (m NoUnderlyingCashSettlTerms) GetUnderlyingCashSettlQuoteMethod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingCashSettlQuoteMethodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingCashSettlQuoteAmount gets UnderlyingCashSettlQuoteAmount, Tag 42049.
func (m NoUnderlyingCashSettlTerms) GetUnderlyingCashSettlQuoteAmount() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingCashSettlQuoteAmountField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingCashSettlQuoteCurrency gets UnderlyingCashSettlQuoteCurrency, Tag 42050.
func (m NoUnderlyingCashSettlTerms) GetUnderlyingCashSettlQuoteCurrency() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingCashSettlQuoteCurrencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingCashSettlMinimumQuoteAmount gets UnderlyingCashSettlMinimumQuoteAmount, Tag 42051.
func (m NoUnderlyingCashSettlTerms) GetUnderlyingCashSettlMinimumQuoteAmount() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingCashSettlMinimumQuoteAmountField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingCashSettlMinimumQuoteCurrency gets UnderlyingCashSettlMinimumQuoteCurrency, Tag 42052.
func (m NoUnderlyingCashSettlTerms) GetUnderlyingCashSettlMinimumQuoteCurrency() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingCashSettlMinimumQuoteCurrencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUnderlyingCashSettlDealers gets NoUnderlyingCashSettlDealers, Tag 42039.
func (m NoUnderlyingCashSettlTerms) GetNoUnderlyingCashSettlDealers() (NoUnderlyingCashSettlDealersRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingCashSettlDealersRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetUnderlyingCashSettlBusinessDays gets UnderlyingCashSettlBusinessDays, Tag 42053.
func (m NoUnderlyingCashSettlTerms) GetUnderlyingCashSettlBusinessDays() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingCashSettlBusinessDaysField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingCashSettlAmount gets UnderlyingCashSettlAmount, Tag 42054.
func (m NoUnderlyingCashSettlTerms) GetUnderlyingCashSettlAmount() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingCashSettlAmountField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingCashSettlRecoveryFactor gets UnderlyingCashSettlRecoveryFactor, Tag 42055.
func (m NoUnderlyingCashSettlTerms) GetUnderlyingCashSettlRecoveryFactor() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingCashSettlRecoveryFactorField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingCashSettlFixedTermIndicator gets UnderlyingCashSettlFixedTermIndicator, Tag 42056.
func (m NoUnderlyingCashSettlTerms) GetUnderlyingCashSettlFixedTermIndicator() (v bool, err quickfix.MessageRejectError) {
	var f field.UnderlyingCashSettlFixedTermIndicatorField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingCashSettlAccruedInterestIndicator gets UnderlyingCashSettlAccruedInterestIndicator, Tag 42057.
func (m NoUnderlyingCashSettlTerms) GetUnderlyingCashSettlAccruedInterestIndicator() (v bool, err quickfix.MessageRejectError) {
	var f field.UnderlyingCashSettlAccruedInterestIndicatorField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingCashSettlValuationMethod gets UnderlyingCashSettlValuationMethod, Tag 42058.
func (m NoUnderlyingCashSettlTerms) GetUnderlyingCashSettlValuationMethod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingCashSettlValuationMethodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingCashSettlTermXID gets UnderlyingCashSettlTermXID, Tag 42059.
func (m NoUnderlyingCashSettlTerms) GetUnderlyingCashSettlTermXID() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingCashSettlTermXIDField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingCashSettlPriceSource gets UnderlyingCashSettlPriceSource, Tag 42797.
func (m NoUnderlyingCashSettlTerms) GetUnderlyingCashSettlPriceSource() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingCashSettlPriceSourceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingCashSettlPriceDefault gets UnderlyingCashSettlPriceDefault, Tag 42798.
func (m NoUnderlyingCashSettlTerms) GetUnderlyingCashSettlPriceDefault() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingCashSettlPriceDefaultField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingCashSettlDateUnadjusted gets UnderlyingCashSettlDateUnadjusted, Tag 42790.
func (m NoUnderlyingCashSettlTerms) GetUnderlyingCashSettlDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingCashSettlDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingCashSettlDateBusinessDayConvention gets UnderlyingCashSettlDateBusinessDayConvention, Tag 42791.
func (m NoUnderlyingCashSettlTerms) GetUnderlyingCashSettlDateBusinessDayConvention() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingCashSettlDateBusinessDayConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUnderlyingCashSettlDateBusinessCenters gets NoUnderlyingCashSettlDateBusinessCenters, Tag 42788.
func (m NoUnderlyingCashSettlTerms) GetNoUnderlyingCashSettlDateBusinessCenters() (NoUnderlyingCashSettlDateBusinessCentersRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingCashSettlDateBusinessCentersRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetUnderlyingCashSettlDateRelativeTo gets UnderlyingCashSettlDateRelativeTo, Tag 42792.
func (m NoUnderlyingCashSettlTerms) GetUnderlyingCashSettlDateRelativeTo() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingCashSettlDateRelativeToField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingCashSettlDateOffsetPeriod gets UnderlyingCashSettlDateOffsetPeriod, Tag 42793.
func (m NoUnderlyingCashSettlTerms) GetUnderlyingCashSettlDateOffsetPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingCashSettlDateOffsetPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingCashSettlDateOffsetUnit gets UnderlyingCashSettlDateOffsetUnit, Tag 42794.
func (m NoUnderlyingCashSettlTerms) GetUnderlyingCashSettlDateOffsetUnit() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingCashSettlDateOffsetUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingCashSettlDateOffsetDayType gets UnderlyingCashSettlDateOffsetDayType, Tag 42795.
func (m NoUnderlyingCashSettlTerms) GetUnderlyingCashSettlDateOffsetDayType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingCashSettlDateOffsetDayTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingCashSettlDateAdjusted gets UnderlyingCashSettlDateAdjusted, Tag 42796.
func (m NoUnderlyingCashSettlTerms) GetUnderlyingCashSettlDateAdjusted() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingCashSettlDateAdjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingCashSettlCurrency returns true if UnderlyingCashSettlCurrency is present, Tag 42042.
func (m NoUnderlyingCashSettlTerms) HasUnderlyingCashSettlCurrency() bool {
	return m.Has(tag.UnderlyingCashSettlCurrency)
}

// HasUnderlyingCashSettlValuationFirstBusinessDayOffset returns true if UnderlyingCashSettlValuationFirstBusinessDayOffset is present, Tag 42043.
func (m NoUnderlyingCashSettlTerms) HasUnderlyingCashSettlValuationFirstBusinessDayOffset() bool {
	return m.Has(tag.UnderlyingCashSettlValuationFirstBusinessDayOffset)
}

// HasUnderlyingCashSettlValuationSubsequentBusinessDaysOffset returns true if UnderlyingCashSettlValuationSubsequentBusinessDaysOffset is present, Tag 42044.
func (m NoUnderlyingCashSettlTerms) HasUnderlyingCashSettlValuationSubsequentBusinessDaysOffset() bool {
	return m.Has(tag.UnderlyingCashSettlValuationSubsequentBusinessDaysOffset)
}

// HasUnderlyingCashSettlNumOfValuationDates returns true if UnderlyingCashSettlNumOfValuationDates is present, Tag 42045.
func (m NoUnderlyingCashSettlTerms) HasUnderlyingCashSettlNumOfValuationDates() bool {
	return m.Has(tag.UnderlyingCashSettlNumOfValuationDates)
}

// HasUnderlyingCashSettlValuationTime returns true if UnderlyingCashSettlValuationTime is present, Tag 42046.
func (m NoUnderlyingCashSettlTerms) HasUnderlyingCashSettlValuationTime() bool {
	return m.Has(tag.UnderlyingCashSettlValuationTime)
}

// HasUnderlyingCashSettlBusinessCenter returns true if UnderlyingCashSettlBusinessCenter is present, Tag 42047.
func (m NoUnderlyingCashSettlTerms) HasUnderlyingCashSettlBusinessCenter() bool {
	return m.Has(tag.UnderlyingCashSettlBusinessCenter)
}

// HasUnderlyingCashSettlQuoteMethod returns true if UnderlyingCashSettlQuoteMethod is present, Tag 42048.
func (m NoUnderlyingCashSettlTerms) HasUnderlyingCashSettlQuoteMethod() bool {
	return m.Has(tag.UnderlyingCashSettlQuoteMethod)
}

// HasUnderlyingCashSettlQuoteAmount returns true if UnderlyingCashSettlQuoteAmount is present, Tag 42049.
func (m NoUnderlyingCashSettlTerms) HasUnderlyingCashSettlQuoteAmount() bool {
	return m.Has(tag.UnderlyingCashSettlQuoteAmount)
}

// HasUnderlyingCashSettlQuoteCurrency returns true if UnderlyingCashSettlQuoteCurrency is present, Tag 42050.
func (m NoUnderlyingCashSettlTerms) HasUnderlyingCashSettlQuoteCurrency() bool {
	return m.Has(tag.UnderlyingCashSettlQuoteCurrency)
}

// HasUnderlyingCashSettlMinimumQuoteAmount returns true if UnderlyingCashSettlMinimumQuoteAmount is present, Tag 42051.
func (m NoUnderlyingCashSettlTerms) HasUnderlyingCashSettlMinimumQuoteAmount() bool {
	return m.Has(tag.UnderlyingCashSettlMinimumQuoteAmount)
}

// HasUnderlyingCashSettlMinimumQuoteCurrency returns true if UnderlyingCashSettlMinimumQuoteCurrency is present, Tag 42052.
func (m NoUnderlyingCashSettlTerms) HasUnderlyingCashSettlMinimumQuoteCurrency() bool {
	return m.Has(tag.UnderlyingCashSettlMinimumQuoteCurrency)
}

// HasNoUnderlyingCashSettlDealers returns true if NoUnderlyingCashSettlDealers is present, Tag 42039.
func (m NoUnderlyingCashSettlTerms) HasNoUnderlyingCashSettlDealers() bool {
	return m.Has(tag.NoUnderlyingCashSettlDealers)
}

// HasUnderlyingCashSettlBusinessDays returns true if UnderlyingCashSettlBusinessDays is present, Tag 42053.
func (m NoUnderlyingCashSettlTerms) HasUnderlyingCashSettlBusinessDays() bool {
	return m.Has(tag.UnderlyingCashSettlBusinessDays)
}

// HasUnderlyingCashSettlAmount returns true if UnderlyingCashSettlAmount is present, Tag 42054.
func (m NoUnderlyingCashSettlTerms) HasUnderlyingCashSettlAmount() bool {
	return m.Has(tag.UnderlyingCashSettlAmount)
}

// HasUnderlyingCashSettlRecoveryFactor returns true if UnderlyingCashSettlRecoveryFactor is present, Tag 42055.
func (m NoUnderlyingCashSettlTerms) HasUnderlyingCashSettlRecoveryFactor() bool {
	return m.Has(tag.UnderlyingCashSettlRecoveryFactor)
}

// HasUnderlyingCashSettlFixedTermIndicator returns true if UnderlyingCashSettlFixedTermIndicator is present, Tag 42056.
func (m NoUnderlyingCashSettlTerms) HasUnderlyingCashSettlFixedTermIndicator() bool {
	return m.Has(tag.UnderlyingCashSettlFixedTermIndicator)
}

// HasUnderlyingCashSettlAccruedInterestIndicator returns true if UnderlyingCashSettlAccruedInterestIndicator is present, Tag 42057.
func (m NoUnderlyingCashSettlTerms) HasUnderlyingCashSettlAccruedInterestIndicator() bool {
	return m.Has(tag.UnderlyingCashSettlAccruedInterestIndicator)
}

// HasUnderlyingCashSettlValuationMethod returns true if UnderlyingCashSettlValuationMethod is present, Tag 42058.
func (m NoUnderlyingCashSettlTerms) HasUnderlyingCashSettlValuationMethod() bool {
	return m.Has(tag.UnderlyingCashSettlValuationMethod)
}

// HasUnderlyingCashSettlTermXID returns true if UnderlyingCashSettlTermXID is present, Tag 42059.
func (m NoUnderlyingCashSettlTerms) HasUnderlyingCashSettlTermXID() bool {
	return m.Has(tag.UnderlyingCashSettlTermXID)
}

// HasUnderlyingCashSettlPriceSource returns true if UnderlyingCashSettlPriceSource is present, Tag 42797.
func (m NoUnderlyingCashSettlTerms) HasUnderlyingCashSettlPriceSource() bool {
	return m.Has(tag.UnderlyingCashSettlPriceSource)
}

// HasUnderlyingCashSettlPriceDefault returns true if UnderlyingCashSettlPriceDefault is present, Tag 42798.
func (m NoUnderlyingCashSettlTerms) HasUnderlyingCashSettlPriceDefault() bool {
	return m.Has(tag.UnderlyingCashSettlPriceDefault)
}

// HasUnderlyingCashSettlDateUnadjusted returns true if UnderlyingCashSettlDateUnadjusted is present, Tag 42790.
func (m NoUnderlyingCashSettlTerms) HasUnderlyingCashSettlDateUnadjusted() bool {
	return m.Has(tag.UnderlyingCashSettlDateUnadjusted)
}

// HasUnderlyingCashSettlDateBusinessDayConvention returns true if UnderlyingCashSettlDateBusinessDayConvention is present, Tag 42791.
func (m NoUnderlyingCashSettlTerms) HasUnderlyingCashSettlDateBusinessDayConvention() bool {
	return m.Has(tag.UnderlyingCashSettlDateBusinessDayConvention)
}

// HasNoUnderlyingCashSettlDateBusinessCenters returns true if NoUnderlyingCashSettlDateBusinessCenters is present, Tag 42788.
func (m NoUnderlyingCashSettlTerms) HasNoUnderlyingCashSettlDateBusinessCenters() bool {
	return m.Has(tag.NoUnderlyingCashSettlDateBusinessCenters)
}

// HasUnderlyingCashSettlDateRelativeTo returns true if UnderlyingCashSettlDateRelativeTo is present, Tag 42792.
func (m NoUnderlyingCashSettlTerms) HasUnderlyingCashSettlDateRelativeTo() bool {
	return m.Has(tag.UnderlyingCashSettlDateRelativeTo)
}

// HasUnderlyingCashSettlDateOffsetPeriod returns true if UnderlyingCashSettlDateOffsetPeriod is present, Tag 42793.
func (m NoUnderlyingCashSettlTerms) HasUnderlyingCashSettlDateOffsetPeriod() bool {
	return m.Has(tag.UnderlyingCashSettlDateOffsetPeriod)
}

// HasUnderlyingCashSettlDateOffsetUnit returns true if UnderlyingCashSettlDateOffsetUnit is present, Tag 42794.
func (m NoUnderlyingCashSettlTerms) HasUnderlyingCashSettlDateOffsetUnit() bool {
	return m.Has(tag.UnderlyingCashSettlDateOffsetUnit)
}

// HasUnderlyingCashSettlDateOffsetDayType returns true if UnderlyingCashSettlDateOffsetDayType is present, Tag 42795.
func (m NoUnderlyingCashSettlTerms) HasUnderlyingCashSettlDateOffsetDayType() bool {
	return m.Has(tag.UnderlyingCashSettlDateOffsetDayType)
}

// HasUnderlyingCashSettlDateAdjusted returns true if UnderlyingCashSettlDateAdjusted is present, Tag 42796.
func (m NoUnderlyingCashSettlTerms) HasUnderlyingCashSettlDateAdjusted() bool {
	return m.Has(tag.UnderlyingCashSettlDateAdjusted)
}

// NoUnderlyingCashSettlDealers is a repeating group element, Tag 42039.
type NoUnderlyingCashSettlDealers struct {
	*quickfix.Group
}

// SetUnderlyingCashSettlDealer sets UnderlyingCashSettlDealer, Tag 42040.
func (m NoUnderlyingCashSettlDealers) SetUnderlyingCashSettlDealer(v string) {
	m.Set(field.NewUnderlyingCashSettlDealer(v))
}

// GetUnderlyingCashSettlDealer gets UnderlyingCashSettlDealer, Tag 42040.
func (m NoUnderlyingCashSettlDealers) GetUnderlyingCashSettlDealer() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingCashSettlDealerField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingCashSettlDealer returns true if UnderlyingCashSettlDealer is present, Tag 42040.
func (m NoUnderlyingCashSettlDealers) HasUnderlyingCashSettlDealer() bool {
	return m.Has(tag.UnderlyingCashSettlDealer)
}

// NoUnderlyingCashSettlDealersRepeatingGroup is a repeating group, Tag 42039.
type NoUnderlyingCashSettlDealersRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingCashSettlDealersRepeatingGroup returns an initialized, NoUnderlyingCashSettlDealersRepeatingGroup.
func NewNoUnderlyingCashSettlDealersRepeatingGroup() NoUnderlyingCashSettlDealersRepeatingGroup {
	return NoUnderlyingCashSettlDealersRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingCashSettlDealers,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingCashSettlDealer),
			},
		),
	}
}

// Add create and append a new NoUnderlyingCashSettlDealers to this group.
func (m NoUnderlyingCashSettlDealersRepeatingGroup) Add() NoUnderlyingCashSettlDealers {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingCashSettlDealers{g}
}

// Get returns the ith NoUnderlyingCashSettlDealers in the NoUnderlyingCashSettlDealersRepeatinGroup.
func (m NoUnderlyingCashSettlDealersRepeatingGroup) Get(i int) NoUnderlyingCashSettlDealers {
	return NoUnderlyingCashSettlDealers{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingCashSettlDateBusinessCenters is a repeating group element, Tag 42788.
type NoUnderlyingCashSettlDateBusinessCenters struct {
	*quickfix.Group
}

// SetUnderlyingCashSettlDateBusinessCenter sets UnderlyingCashSettlDateBusinessCenter, Tag 42789.
func (m NoUnderlyingCashSettlDateBusinessCenters) SetUnderlyingCashSettlDateBusinessCenter(v string) {
	m.Set(field.NewUnderlyingCashSettlDateBusinessCenter(v))
}

// GetUnderlyingCashSettlDateBusinessCenter gets UnderlyingCashSettlDateBusinessCenter, Tag 42789.
func (m NoUnderlyingCashSettlDateBusinessCenters) GetUnderlyingCashSettlDateBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingCashSettlDateBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingCashSettlDateBusinessCenter returns true if UnderlyingCashSettlDateBusinessCenter is present, Tag 42789.
func (m NoUnderlyingCashSettlDateBusinessCenters) HasUnderlyingCashSettlDateBusinessCenter() bool {
	return m.Has(tag.UnderlyingCashSettlDateBusinessCenter)
}

// NoUnderlyingCashSettlDateBusinessCentersRepeatingGroup is a repeating group, Tag 42788.
type NoUnderlyingCashSettlDateBusinessCentersRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingCashSettlDateBusinessCentersRepeatingGroup returns an initialized, NoUnderlyingCashSettlDateBusinessCentersRepeatingGroup.
func NewNoUnderlyingCashSettlDateBusinessCentersRepeatingGroup() NoUnderlyingCashSettlDateBusinessCentersRepeatingGroup {
	return NoUnderlyingCashSettlDateBusinessCentersRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingCashSettlDateBusinessCenters,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingCashSettlDateBusinessCenter),
			},
		),
	}
}

// Add create and append a new NoUnderlyingCashSettlDateBusinessCenters to this group.
func (m NoUnderlyingCashSettlDateBusinessCentersRepeatingGroup) Add() NoUnderlyingCashSettlDateBusinessCenters {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingCashSettlDateBusinessCenters{g}
}

// Get returns the ith NoUnderlyingCashSettlDateBusinessCenters in the NoUnderlyingCashSettlDateBusinessCentersRepeatinGroup.
func (m NoUnderlyingCashSettlDateBusinessCentersRepeatingGroup) Get(i int) NoUnderlyingCashSettlDateBusinessCenters {
	return NoUnderlyingCashSettlDateBusinessCenters{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingCashSettlTermsRepeatingGroup is a repeating group, Tag 42041.
type NoUnderlyingCashSettlTermsRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingCashSettlTermsRepeatingGroup returns an initialized, NoUnderlyingCashSettlTermsRepeatingGroup.
func NewNoUnderlyingCashSettlTermsRepeatingGroup() NoUnderlyingCashSettlTermsRepeatingGroup {
	return NoUnderlyingCashSettlTermsRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingCashSettlTerms,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingCashSettlCurrency),
				quickfix.GroupElement(tag.UnderlyingCashSettlValuationFirstBusinessDayOffset),
				quickfix.GroupElement(tag.UnderlyingCashSettlValuationSubsequentBusinessDaysOffset),
				quickfix.GroupElement(tag.UnderlyingCashSettlNumOfValuationDates),
				quickfix.GroupElement(tag.UnderlyingCashSettlValuationTime),
				quickfix.GroupElement(tag.UnderlyingCashSettlBusinessCenter),
				quickfix.GroupElement(tag.UnderlyingCashSettlQuoteMethod),
				quickfix.GroupElement(tag.UnderlyingCashSettlQuoteAmount),
				quickfix.GroupElement(tag.UnderlyingCashSettlQuoteCurrency),
				quickfix.GroupElement(tag.UnderlyingCashSettlMinimumQuoteAmount),
				quickfix.GroupElement(tag.UnderlyingCashSettlMinimumQuoteCurrency),
				NewNoUnderlyingCashSettlDealersRepeatingGroup(),
				quickfix.GroupElement(tag.UnderlyingCashSettlBusinessDays),
				quickfix.GroupElement(tag.UnderlyingCashSettlAmount),
				quickfix.GroupElement(tag.UnderlyingCashSettlRecoveryFactor),
				quickfix.GroupElement(tag.UnderlyingCashSettlFixedTermIndicator),
				quickfix.GroupElement(tag.UnderlyingCashSettlAccruedInterestIndicator),
				quickfix.GroupElement(tag.UnderlyingCashSettlValuationMethod),
				quickfix.GroupElement(tag.UnderlyingCashSettlTermXID),
				quickfix.GroupElement(tag.UnderlyingCashSettlPriceSource),
				quickfix.GroupElement(tag.UnderlyingCashSettlPriceDefault),
				quickfix.GroupElement(tag.UnderlyingCashSettlDateUnadjusted),
				quickfix.GroupElement(tag.UnderlyingCashSettlDateBusinessDayConvention),
				NewNoUnderlyingCashSettlDateBusinessCentersRepeatingGroup(),
				quickfix.GroupElement(tag.UnderlyingCashSettlDateRelativeTo),
				quickfix.GroupElement(tag.UnderlyingCashSettlDateOffsetPeriod),
				quickfix.GroupElement(tag.UnderlyingCashSettlDateOffsetUnit),
				quickfix.GroupElement(tag.UnderlyingCashSettlDateOffsetDayType),
				quickfix.GroupElement(tag.UnderlyingCashSettlDateAdjusted),
			},
		),
	}
}

// Add create and append a new NoUnderlyingCashSettlTerms to this group.
func (m NoUnderlyingCashSettlTermsRepeatingGroup) Add() NoUnderlyingCashSettlTerms {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingCashSettlTerms{g}
}

// Get returns the ith NoUnderlyingCashSettlTerms in the NoUnderlyingCashSettlTermsRepeatinGroup.
func (m NoUnderlyingCashSettlTermsRepeatingGroup) Get(i int) NoUnderlyingCashSettlTerms {
	return NoUnderlyingCashSettlTerms{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingPhysicalSettlTerms is a repeating group element, Tag 42060.
type NoUnderlyingPhysicalSettlTerms struct {
	*quickfix.Group
}

// SetNoUnderlyingPhysicalSettlDeliverableObligations sets NoUnderlyingPhysicalSettlDeliverableObligations, Tag 42065.
func (m NoUnderlyingPhysicalSettlTerms) SetNoUnderlyingPhysicalSettlDeliverableObligations(f NoUnderlyingPhysicalSettlDeliverableObligationsRepeatingGroup) {
	m.SetGroup(f)
}

// SetUnderlyingPhysicalSettlCurrency sets UnderlyingPhysicalSettlCurrency, Tag 42061.
func (m NoUnderlyingPhysicalSettlTerms) SetUnderlyingPhysicalSettlCurrency(v string) {
	m.Set(field.NewUnderlyingPhysicalSettlCurrency(v))
}

// SetUnderlyingPhysicalSettlBusinessDays sets UnderlyingPhysicalSettlBusinessDays, Tag 42062.
func (m NoUnderlyingPhysicalSettlTerms) SetUnderlyingPhysicalSettlBusinessDays(v int) {
	m.Set(field.NewUnderlyingPhysicalSettlBusinessDays(v))
}

// SetUnderlyingPhysicalSettlMaximumBusinessDays sets UnderlyingPhysicalSettlMaximumBusinessDays, Tag 42063.
func (m NoUnderlyingPhysicalSettlTerms) SetUnderlyingPhysicalSettlMaximumBusinessDays(v int) {
	m.Set(field.NewUnderlyingPhysicalSettlMaximumBusinessDays(v))
}

// SetUnderlyingPhysicalSettlTermXID sets UnderlyingPhysicalSettlTermXID, Tag 42064.
func (m NoUnderlyingPhysicalSettlTerms) SetUnderlyingPhysicalSettlTermXID(v string) {
	m.Set(field.NewUnderlyingPhysicalSettlTermXID(v))
}

// GetNoUnderlyingPhysicalSettlDeliverableObligations gets NoUnderlyingPhysicalSettlDeliverableObligations, Tag 42065.
func (m NoUnderlyingPhysicalSettlTerms) GetNoUnderlyingPhysicalSettlDeliverableObligations() (NoUnderlyingPhysicalSettlDeliverableObligationsRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingPhysicalSettlDeliverableObligationsRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetUnderlyingPhysicalSettlCurrency gets UnderlyingPhysicalSettlCurrency, Tag 42061.
func (m NoUnderlyingPhysicalSettlTerms) GetUnderlyingPhysicalSettlCurrency() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPhysicalSettlCurrencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPhysicalSettlBusinessDays gets UnderlyingPhysicalSettlBusinessDays, Tag 42062.
func (m NoUnderlyingPhysicalSettlTerms) GetUnderlyingPhysicalSettlBusinessDays() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPhysicalSettlBusinessDaysField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPhysicalSettlMaximumBusinessDays gets UnderlyingPhysicalSettlMaximumBusinessDays, Tag 42063.
func (m NoUnderlyingPhysicalSettlTerms) GetUnderlyingPhysicalSettlMaximumBusinessDays() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingPhysicalSettlMaximumBusinessDaysField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPhysicalSettlTermXID gets UnderlyingPhysicalSettlTermXID, Tag 42064.
func (m NoUnderlyingPhysicalSettlTerms) GetUnderlyingPhysicalSettlTermXID() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPhysicalSettlTermXIDField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasNoUnderlyingPhysicalSettlDeliverableObligations returns true if NoUnderlyingPhysicalSettlDeliverableObligations is present, Tag 42065.
func (m NoUnderlyingPhysicalSettlTerms) HasNoUnderlyingPhysicalSettlDeliverableObligations() bool {
	return m.Has(tag.NoUnderlyingPhysicalSettlDeliverableObligations)
}

// HasUnderlyingPhysicalSettlCurrency returns true if UnderlyingPhysicalSettlCurrency is present, Tag 42061.
func (m NoUnderlyingPhysicalSettlTerms) HasUnderlyingPhysicalSettlCurrency() bool {
	return m.Has(tag.UnderlyingPhysicalSettlCurrency)
}

// HasUnderlyingPhysicalSettlBusinessDays returns true if UnderlyingPhysicalSettlBusinessDays is present, Tag 42062.
func (m NoUnderlyingPhysicalSettlTerms) HasUnderlyingPhysicalSettlBusinessDays() bool {
	return m.Has(tag.UnderlyingPhysicalSettlBusinessDays)
}

// HasUnderlyingPhysicalSettlMaximumBusinessDays returns true if UnderlyingPhysicalSettlMaximumBusinessDays is present, Tag 42063.
func (m NoUnderlyingPhysicalSettlTerms) HasUnderlyingPhysicalSettlMaximumBusinessDays() bool {
	return m.Has(tag.UnderlyingPhysicalSettlMaximumBusinessDays)
}

// HasUnderlyingPhysicalSettlTermXID returns true if UnderlyingPhysicalSettlTermXID is present, Tag 42064.
func (m NoUnderlyingPhysicalSettlTerms) HasUnderlyingPhysicalSettlTermXID() bool {
	return m.Has(tag.UnderlyingPhysicalSettlTermXID)
}

// NoUnderlyingPhysicalSettlDeliverableObligations is a repeating group element, Tag 42065.
type NoUnderlyingPhysicalSettlDeliverableObligations struct {
	*quickfix.Group
}

// SetUnderlyingPhysicalSettlDeliverableObligationType sets UnderlyingPhysicalSettlDeliverableObligationType, Tag 42066.
func (m NoUnderlyingPhysicalSettlDeliverableObligations) SetUnderlyingPhysicalSettlDeliverableObligationType(v string) {
	m.Set(field.NewUnderlyingPhysicalSettlDeliverableObligationType(v))
}

// SetUnderlyingPhysicalSettlDeliverableObligationValue sets UnderlyingPhysicalSettlDeliverableObligationValue, Tag 42067.
func (m NoUnderlyingPhysicalSettlDeliverableObligations) SetUnderlyingPhysicalSettlDeliverableObligationValue(v string) {
	m.Set(field.NewUnderlyingPhysicalSettlDeliverableObligationValue(v))
}

// GetUnderlyingPhysicalSettlDeliverableObligationType gets UnderlyingPhysicalSettlDeliverableObligationType, Tag 42066.
func (m NoUnderlyingPhysicalSettlDeliverableObligations) GetUnderlyingPhysicalSettlDeliverableObligationType() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPhysicalSettlDeliverableObligationTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPhysicalSettlDeliverableObligationValue gets UnderlyingPhysicalSettlDeliverableObligationValue, Tag 42067.
func (m NoUnderlyingPhysicalSettlDeliverableObligations) GetUnderlyingPhysicalSettlDeliverableObligationValue() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingPhysicalSettlDeliverableObligationValueField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingPhysicalSettlDeliverableObligationType returns true if UnderlyingPhysicalSettlDeliverableObligationType is present, Tag 42066.
func (m NoUnderlyingPhysicalSettlDeliverableObligations) HasUnderlyingPhysicalSettlDeliverableObligationType() bool {
	return m.Has(tag.UnderlyingPhysicalSettlDeliverableObligationType)
}

// HasUnderlyingPhysicalSettlDeliverableObligationValue returns true if UnderlyingPhysicalSettlDeliverableObligationValue is present, Tag 42067.
func (m NoUnderlyingPhysicalSettlDeliverableObligations) HasUnderlyingPhysicalSettlDeliverableObligationValue() bool {
	return m.Has(tag.UnderlyingPhysicalSettlDeliverableObligationValue)
}

// NoUnderlyingPhysicalSettlDeliverableObligationsRepeatingGroup is a repeating group, Tag 42065.
type NoUnderlyingPhysicalSettlDeliverableObligationsRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingPhysicalSettlDeliverableObligationsRepeatingGroup returns an initialized, NoUnderlyingPhysicalSettlDeliverableObligationsRepeatingGroup.
func NewNoUnderlyingPhysicalSettlDeliverableObligationsRepeatingGroup() NoUnderlyingPhysicalSettlDeliverableObligationsRepeatingGroup {
	return NoUnderlyingPhysicalSettlDeliverableObligationsRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingPhysicalSettlDeliverableObligations,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingPhysicalSettlDeliverableObligationType),
				quickfix.GroupElement(tag.UnderlyingPhysicalSettlDeliverableObligationValue),
			},
		),
	}
}

// Add create and append a new NoUnderlyingPhysicalSettlDeliverableObligations to this group.
func (m NoUnderlyingPhysicalSettlDeliverableObligationsRepeatingGroup) Add() NoUnderlyingPhysicalSettlDeliverableObligations {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingPhysicalSettlDeliverableObligations{g}
}

// Get returns the ith NoUnderlyingPhysicalSettlDeliverableObligations in the NoUnderlyingPhysicalSettlDeliverableObligationsRepeatinGroup.
func (m NoUnderlyingPhysicalSettlDeliverableObligationsRepeatingGroup) Get(i int) NoUnderlyingPhysicalSettlDeliverableObligations {
	return NoUnderlyingPhysicalSettlDeliverableObligations{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingPhysicalSettlTermsRepeatingGroup is a repeating group, Tag 42060.
type NoUnderlyingPhysicalSettlTermsRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingPhysicalSettlTermsRepeatingGroup returns an initialized, NoUnderlyingPhysicalSettlTermsRepeatingGroup.
func NewNoUnderlyingPhysicalSettlTermsRepeatingGroup() NoUnderlyingPhysicalSettlTermsRepeatingGroup {
	return NoUnderlyingPhysicalSettlTermsRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingPhysicalSettlTerms,
			quickfix.GroupTemplate{
				NewNoUnderlyingPhysicalSettlDeliverableObligationsRepeatingGroup(),
				quickfix.GroupElement(tag.UnderlyingPhysicalSettlCurrency),
				quickfix.GroupElement(tag.UnderlyingPhysicalSettlBusinessDays),
				quickfix.GroupElement(tag.UnderlyingPhysicalSettlMaximumBusinessDays),
				quickfix.GroupElement(tag.UnderlyingPhysicalSettlTermXID),
			},
		),
	}
}

// Add create and append a new NoUnderlyingPhysicalSettlTerms to this group.
func (m NoUnderlyingPhysicalSettlTermsRepeatingGroup) Add() NoUnderlyingPhysicalSettlTerms {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingPhysicalSettlTerms{g}
}

// Get returns the ith NoUnderlyingPhysicalSettlTerms in the NoUnderlyingPhysicalSettlTermsRepeatinGroup.
func (m NoUnderlyingPhysicalSettlTermsRepeatingGroup) Get(i int) NoUnderlyingPhysicalSettlTerms {
	return NoUnderlyingPhysicalSettlTerms{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingProtectionTerms is a repeating group element, Tag 42068.
type NoUnderlyingProtectionTerms struct {
	*quickfix.Group
}

// SetUnderlyingProtectionTermNotional sets UnderlyingProtectionTermNotional, Tag 42069.
func (m NoUnderlyingProtectionTerms) SetUnderlyingProtectionTermNotional(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingProtectionTermNotional(value, scale))
}

// SetUnderlyingProtectionTermCurrency sets UnderlyingProtectionTermCurrency, Tag 42070.
func (m NoUnderlyingProtectionTerms) SetUnderlyingProtectionTermCurrency(v string) {
	m.Set(field.NewUnderlyingProtectionTermCurrency(v))
}

// SetUnderlyingProtectionTermSellerNotifies sets UnderlyingProtectionTermSellerNotifies, Tag 42071.
func (m NoUnderlyingProtectionTerms) SetUnderlyingProtectionTermSellerNotifies(v bool) {
	m.Set(field.NewUnderlyingProtectionTermSellerNotifies(v))
}

// SetUnderlyingProtectionTermBuyerNotifies sets UnderlyingProtectionTermBuyerNotifies, Tag 42072.
func (m NoUnderlyingProtectionTerms) SetUnderlyingProtectionTermBuyerNotifies(v bool) {
	m.Set(field.NewUnderlyingProtectionTermBuyerNotifies(v))
}

// SetUnderlyingProtectionTermEventBusinessCenter sets UnderlyingProtectionTermEventBusinessCenter, Tag 42073.
func (m NoUnderlyingProtectionTerms) SetUnderlyingProtectionTermEventBusinessCenter(v string) {
	m.Set(field.NewUnderlyingProtectionTermEventBusinessCenter(v))
}

// SetUnderlyingProtectionTermStandardSources sets UnderlyingProtectionTermStandardSources, Tag 42074.
func (m NoUnderlyingProtectionTerms) SetUnderlyingProtectionTermStandardSources(v bool) {
	m.Set(field.NewUnderlyingProtectionTermStandardSources(v))
}

// SetUnderlyingProtectionTermEventMinimumSources sets UnderlyingProtectionTermEventMinimumSources, Tag 42075.
func (m NoUnderlyingProtectionTerms) SetUnderlyingProtectionTermEventMinimumSources(v int) {
	m.Set(field.NewUnderlyingProtectionTermEventMinimumSources(v))
}

// SetNoUnderlyingProtectionTermEventNewsSources sets NoUnderlyingProtectionTermEventNewsSources, Tag 42090.
func (m NoUnderlyingProtectionTerms) SetNoUnderlyingProtectionTermEventNewsSources(f NoUnderlyingProtectionTermEventNewsSourcesRepeatingGroup) {
	m.SetGroup(f)
}

// SetNoUnderlyingProtectionTermEvents sets NoUnderlyingProtectionTermEvents, Tag 42077.
func (m NoUnderlyingProtectionTerms) SetNoUnderlyingProtectionTermEvents(f NoUnderlyingProtectionTermEventsRepeatingGroup) {
	m.SetGroup(f)
}

// SetNoUnderlyingProtectionTermObligations sets NoUnderlyingProtectionTermObligations, Tag 42087.
func (m NoUnderlyingProtectionTerms) SetNoUnderlyingProtectionTermObligations(f NoUnderlyingProtectionTermObligationsRepeatingGroup) {
	m.SetGroup(f)
}

// SetUnderlyingProtectionTermXID sets UnderlyingProtectionTermXID, Tag 42076.
func (m NoUnderlyingProtectionTerms) SetUnderlyingProtectionTermXID(v string) {
	m.Set(field.NewUnderlyingProtectionTermXID(v))
}

// GetUnderlyingProtectionTermNotional gets UnderlyingProtectionTermNotional, Tag 42069.
func (m NoUnderlyingProtectionTerms) GetUnderlyingProtectionTermNotional() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingProtectionTermNotionalField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProtectionTermCurrency gets UnderlyingProtectionTermCurrency, Tag 42070.
func (m NoUnderlyingProtectionTerms) GetUnderlyingProtectionTermCurrency() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingProtectionTermCurrencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProtectionTermSellerNotifies gets UnderlyingProtectionTermSellerNotifies, Tag 42071.
func (m NoUnderlyingProtectionTerms) GetUnderlyingProtectionTermSellerNotifies() (v bool, err quickfix.MessageRejectError) {
	var f field.UnderlyingProtectionTermSellerNotifiesField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProtectionTermBuyerNotifies gets UnderlyingProtectionTermBuyerNotifies, Tag 42072.
func (m NoUnderlyingProtectionTerms) GetUnderlyingProtectionTermBuyerNotifies() (v bool, err quickfix.MessageRejectError) {
	var f field.UnderlyingProtectionTermBuyerNotifiesField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProtectionTermEventBusinessCenter gets UnderlyingProtectionTermEventBusinessCenter, Tag 42073.
func (m NoUnderlyingProtectionTerms) GetUnderlyingProtectionTermEventBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingProtectionTermEventBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProtectionTermStandardSources gets UnderlyingProtectionTermStandardSources, Tag 42074.
func (m NoUnderlyingProtectionTerms) GetUnderlyingProtectionTermStandardSources() (v bool, err quickfix.MessageRejectError) {
	var f field.UnderlyingProtectionTermStandardSourcesField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProtectionTermEventMinimumSources gets UnderlyingProtectionTermEventMinimumSources, Tag 42075.
func (m NoUnderlyingProtectionTerms) GetUnderlyingProtectionTermEventMinimumSources() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingProtectionTermEventMinimumSourcesField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUnderlyingProtectionTermEventNewsSources gets NoUnderlyingProtectionTermEventNewsSources, Tag 42090.
func (m NoUnderlyingProtectionTerms) GetNoUnderlyingProtectionTermEventNewsSources() (NoUnderlyingProtectionTermEventNewsSourcesRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingProtectionTermEventNewsSourcesRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetNoUnderlyingProtectionTermEvents gets NoUnderlyingProtectionTermEvents, Tag 42077.
func (m NoUnderlyingProtectionTerms) GetNoUnderlyingProtectionTermEvents() (NoUnderlyingProtectionTermEventsRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingProtectionTermEventsRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetNoUnderlyingProtectionTermObligations gets NoUnderlyingProtectionTermObligations, Tag 42087.
func (m NoUnderlyingProtectionTerms) GetNoUnderlyingProtectionTermObligations() (NoUnderlyingProtectionTermObligationsRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingProtectionTermObligationsRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetUnderlyingProtectionTermXID gets UnderlyingProtectionTermXID, Tag 42076.
func (m NoUnderlyingProtectionTerms) GetUnderlyingProtectionTermXID() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingProtectionTermXIDField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingProtectionTermNotional returns true if UnderlyingProtectionTermNotional is present, Tag 42069.
func (m NoUnderlyingProtectionTerms) HasUnderlyingProtectionTermNotional() bool {
	return m.Has(tag.UnderlyingProtectionTermNotional)
}

// HasUnderlyingProtectionTermCurrency returns true if UnderlyingProtectionTermCurrency is present, Tag 42070.
func (m NoUnderlyingProtectionTerms) HasUnderlyingProtectionTermCurrency() bool {
	return m.Has(tag.UnderlyingProtectionTermCurrency)
}

// HasUnderlyingProtectionTermSellerNotifies returns true if UnderlyingProtectionTermSellerNotifies is present, Tag 42071.
func (m NoUnderlyingProtectionTerms) HasUnderlyingProtectionTermSellerNotifies() bool {
	return m.Has(tag.UnderlyingProtectionTermSellerNotifies)
}

// HasUnderlyingProtectionTermBuyerNotifies returns true if UnderlyingProtectionTermBuyerNotifies is present, Tag 42072.
func (m NoUnderlyingProtectionTerms) HasUnderlyingProtectionTermBuyerNotifies() bool {
	return m.Has(tag.UnderlyingProtectionTermBuyerNotifies)
}

// HasUnderlyingProtectionTermEventBusinessCenter returns true if UnderlyingProtectionTermEventBusinessCenter is present, Tag 42073.
func (m NoUnderlyingProtectionTerms) HasUnderlyingProtectionTermEventBusinessCenter() bool {
	return m.Has(tag.UnderlyingProtectionTermEventBusinessCenter)
}

// HasUnderlyingProtectionTermStandardSources returns true if UnderlyingProtectionTermStandardSources is present, Tag 42074.
func (m NoUnderlyingProtectionTerms) HasUnderlyingProtectionTermStandardSources() bool {
	return m.Has(tag.UnderlyingProtectionTermStandardSources)
}

// HasUnderlyingProtectionTermEventMinimumSources returns true if UnderlyingProtectionTermEventMinimumSources is present, Tag 42075.
func (m NoUnderlyingProtectionTerms) HasUnderlyingProtectionTermEventMinimumSources() bool {
	return m.Has(tag.UnderlyingProtectionTermEventMinimumSources)
}

// HasNoUnderlyingProtectionTermEventNewsSources returns true if NoUnderlyingProtectionTermEventNewsSources is present, Tag 42090.
func (m NoUnderlyingProtectionTerms) HasNoUnderlyingProtectionTermEventNewsSources() bool {
	return m.Has(tag.NoUnderlyingProtectionTermEventNewsSources)
}

// HasNoUnderlyingProtectionTermEvents returns true if NoUnderlyingProtectionTermEvents is present, Tag 42077.
func (m NoUnderlyingProtectionTerms) HasNoUnderlyingProtectionTermEvents() bool {
	return m.Has(tag.NoUnderlyingProtectionTermEvents)
}

// HasNoUnderlyingProtectionTermObligations returns true if NoUnderlyingProtectionTermObligations is present, Tag 42087.
func (m NoUnderlyingProtectionTerms) HasNoUnderlyingProtectionTermObligations() bool {
	return m.Has(tag.NoUnderlyingProtectionTermObligations)
}

// HasUnderlyingProtectionTermXID returns true if UnderlyingProtectionTermXID is present, Tag 42076.
func (m NoUnderlyingProtectionTerms) HasUnderlyingProtectionTermXID() bool {
	return m.Has(tag.UnderlyingProtectionTermXID)
}

// NoUnderlyingProtectionTermEventNewsSources is a repeating group element, Tag 42090.
type NoUnderlyingProtectionTermEventNewsSources struct {
	*quickfix.Group
}

// SetUnderlyingProtectionTermEventNewsSource sets UnderlyingProtectionTermEventNewsSource, Tag 42091.
func (m NoUnderlyingProtectionTermEventNewsSources) SetUnderlyingProtectionTermEventNewsSource(v string) {
	m.Set(field.NewUnderlyingProtectionTermEventNewsSource(v))
}

// GetUnderlyingProtectionTermEventNewsSource gets UnderlyingProtectionTermEventNewsSource, Tag 42091.
func (m NoUnderlyingProtectionTermEventNewsSources) GetUnderlyingProtectionTermEventNewsSource() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingProtectionTermEventNewsSourceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingProtectionTermEventNewsSource returns true if UnderlyingProtectionTermEventNewsSource is present, Tag 42091.
func (m NoUnderlyingProtectionTermEventNewsSources) HasUnderlyingProtectionTermEventNewsSource() bool {
	return m.Has(tag.UnderlyingProtectionTermEventNewsSource)
}

// NoUnderlyingProtectionTermEventNewsSourcesRepeatingGroup is a repeating group, Tag 42090.
type NoUnderlyingProtectionTermEventNewsSourcesRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingProtectionTermEventNewsSourcesRepeatingGroup returns an initialized, NoUnderlyingProtectionTermEventNewsSourcesRepeatingGroup.
func NewNoUnderlyingProtectionTermEventNewsSourcesRepeatingGroup() NoUnderlyingProtectionTermEventNewsSourcesRepeatingGroup {
	return NoUnderlyingProtectionTermEventNewsSourcesRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingProtectionTermEventNewsSources,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingProtectionTermEventNewsSource),
			},
		),
	}
}

// Add create and append a new NoUnderlyingProtectionTermEventNewsSources to this group.
func (m NoUnderlyingProtectionTermEventNewsSourcesRepeatingGroup) Add() NoUnderlyingProtectionTermEventNewsSources {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingProtectionTermEventNewsSources{g}
}

// Get returns the ith NoUnderlyingProtectionTermEventNewsSources in the NoUnderlyingProtectionTermEventNewsSourcesRepeatinGroup.
func (m NoUnderlyingProtectionTermEventNewsSourcesRepeatingGroup) Get(i int) NoUnderlyingProtectionTermEventNewsSources {
	return NoUnderlyingProtectionTermEventNewsSources{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingProtectionTermEvents is a repeating group element, Tag 42077.
type NoUnderlyingProtectionTermEvents struct {
	*quickfix.Group
}

// SetUnderlyingProtectionTermEventType sets UnderlyingProtectionTermEventType, Tag 42078.
func (m NoUnderlyingProtectionTermEvents) SetUnderlyingProtectionTermEventType(v string) {
	m.Set(field.NewUnderlyingProtectionTermEventType(v))
}

// SetUnderlyingProtectionTermEventValue sets UnderlyingProtectionTermEventValue, Tag 42079.
func (m NoUnderlyingProtectionTermEvents) SetUnderlyingProtectionTermEventValue(v string) {
	m.Set(field.NewUnderlyingProtectionTermEventValue(v))
}

// SetUnderlyingProtectionTermEventCurrency sets UnderlyingProtectionTermEventCurrency, Tag 42080.
func (m NoUnderlyingProtectionTermEvents) SetUnderlyingProtectionTermEventCurrency(v string) {
	m.Set(field.NewUnderlyingProtectionTermEventCurrency(v))
}

// SetUnderlyingProtectionTermEventPeriod sets UnderlyingProtectionTermEventPeriod, Tag 42081.
func (m NoUnderlyingProtectionTermEvents) SetUnderlyingProtectionTermEventPeriod(v int) {
	m.Set(field.NewUnderlyingProtectionTermEventPeriod(v))
}

// SetUnderlyingProtectionTermEventUnit sets UnderlyingProtectionTermEventUnit, Tag 42082.
func (m NoUnderlyingProtectionTermEvents) SetUnderlyingProtectionTermEventUnit(v string) {
	m.Set(field.NewUnderlyingProtectionTermEventUnit(v))
}

// SetUnderlyingProtectionTermEventDayType sets UnderlyingProtectionTermEventDayType, Tag 42083.
func (m NoUnderlyingProtectionTermEvents) SetUnderlyingProtectionTermEventDayType(v int) {
	m.Set(field.NewUnderlyingProtectionTermEventDayType(v))
}

// SetUnderlyingProtectionTermEventRateSource sets UnderlyingProtectionTermEventRateSource, Tag 42084.
func (m NoUnderlyingProtectionTermEvents) SetUnderlyingProtectionTermEventRateSource(v string) {
	m.Set(field.NewUnderlyingProtectionTermEventRateSource(v))
}

// SetNoUnderlyingProtectionTermEventQualifiers sets NoUnderlyingProtectionTermEventQualifiers, Tag 42085.
func (m NoUnderlyingProtectionTermEvents) SetNoUnderlyingProtectionTermEventQualifiers(f NoUnderlyingProtectionTermEventQualifiersRepeatingGroup) {
	m.SetGroup(f)
}

// GetUnderlyingProtectionTermEventType gets UnderlyingProtectionTermEventType, Tag 42078.
func (m NoUnderlyingProtectionTermEvents) GetUnderlyingProtectionTermEventType() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingProtectionTermEventTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProtectionTermEventValue gets UnderlyingProtectionTermEventValue, Tag 42079.
func (m NoUnderlyingProtectionTermEvents) GetUnderlyingProtectionTermEventValue() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingProtectionTermEventValueField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProtectionTermEventCurrency gets UnderlyingProtectionTermEventCurrency, Tag 42080.
func (m NoUnderlyingProtectionTermEvents) GetUnderlyingProtectionTermEventCurrency() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingProtectionTermEventCurrencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProtectionTermEventPeriod gets UnderlyingProtectionTermEventPeriod, Tag 42081.
func (m NoUnderlyingProtectionTermEvents) GetUnderlyingProtectionTermEventPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingProtectionTermEventPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProtectionTermEventUnit gets UnderlyingProtectionTermEventUnit, Tag 42082.
func (m NoUnderlyingProtectionTermEvents) GetUnderlyingProtectionTermEventUnit() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingProtectionTermEventUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProtectionTermEventDayType gets UnderlyingProtectionTermEventDayType, Tag 42083.
func (m NoUnderlyingProtectionTermEvents) GetUnderlyingProtectionTermEventDayType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingProtectionTermEventDayTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProtectionTermEventRateSource gets UnderlyingProtectionTermEventRateSource, Tag 42084.
func (m NoUnderlyingProtectionTermEvents) GetUnderlyingProtectionTermEventRateSource() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingProtectionTermEventRateSourceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUnderlyingProtectionTermEventQualifiers gets NoUnderlyingProtectionTermEventQualifiers, Tag 42085.
func (m NoUnderlyingProtectionTermEvents) GetNoUnderlyingProtectionTermEventQualifiers() (NoUnderlyingProtectionTermEventQualifiersRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingProtectionTermEventQualifiersRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// HasUnderlyingProtectionTermEventType returns true if UnderlyingProtectionTermEventType is present, Tag 42078.
func (m NoUnderlyingProtectionTermEvents) HasUnderlyingProtectionTermEventType() bool {
	return m.Has(tag.UnderlyingProtectionTermEventType)
}

// HasUnderlyingProtectionTermEventValue returns true if UnderlyingProtectionTermEventValue is present, Tag 42079.
func (m NoUnderlyingProtectionTermEvents) HasUnderlyingProtectionTermEventValue() bool {
	return m.Has(tag.UnderlyingProtectionTermEventValue)
}

// HasUnderlyingProtectionTermEventCurrency returns true if UnderlyingProtectionTermEventCurrency is present, Tag 42080.
func (m NoUnderlyingProtectionTermEvents) HasUnderlyingProtectionTermEventCurrency() bool {
	return m.Has(tag.UnderlyingProtectionTermEventCurrency)
}

// HasUnderlyingProtectionTermEventPeriod returns true if UnderlyingProtectionTermEventPeriod is present, Tag 42081.
func (m NoUnderlyingProtectionTermEvents) HasUnderlyingProtectionTermEventPeriod() bool {
	return m.Has(tag.UnderlyingProtectionTermEventPeriod)
}

// HasUnderlyingProtectionTermEventUnit returns true if UnderlyingProtectionTermEventUnit is present, Tag 42082.
func (m NoUnderlyingProtectionTermEvents) HasUnderlyingProtectionTermEventUnit() bool {
	return m.Has(tag.UnderlyingProtectionTermEventUnit)
}

// HasUnderlyingProtectionTermEventDayType returns true if UnderlyingProtectionTermEventDayType is present, Tag 42083.
func (m NoUnderlyingProtectionTermEvents) HasUnderlyingProtectionTermEventDayType() bool {
	return m.Has(tag.UnderlyingProtectionTermEventDayType)
}

// HasUnderlyingProtectionTermEventRateSource returns true if UnderlyingProtectionTermEventRateSource is present, Tag 42084.
func (m NoUnderlyingProtectionTermEvents) HasUnderlyingProtectionTermEventRateSource() bool {
	return m.Has(tag.UnderlyingProtectionTermEventRateSource)
}

// HasNoUnderlyingProtectionTermEventQualifiers returns true if NoUnderlyingProtectionTermEventQualifiers is present, Tag 42085.
func (m NoUnderlyingProtectionTermEvents) HasNoUnderlyingProtectionTermEventQualifiers() bool {
	return m.Has(tag.NoUnderlyingProtectionTermEventQualifiers)
}

// NoUnderlyingProtectionTermEventQualifiers is a repeating group element, Tag 42085.
type NoUnderlyingProtectionTermEventQualifiers struct {
	*quickfix.Group
}

// SetUnderlyingProtectionTermEventQualifier sets UnderlyingProtectionTermEventQualifier, Tag 42086.
func (m NoUnderlyingProtectionTermEventQualifiers) SetUnderlyingProtectionTermEventQualifier(v string) {
	m.Set(field.NewUnderlyingProtectionTermEventQualifier(v))
}

// GetUnderlyingProtectionTermEventQualifier gets UnderlyingProtectionTermEventQualifier, Tag 42086.
func (m NoUnderlyingProtectionTermEventQualifiers) GetUnderlyingProtectionTermEventQualifier() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingProtectionTermEventQualifierField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingProtectionTermEventQualifier returns true if UnderlyingProtectionTermEventQualifier is present, Tag 42086.
func (m NoUnderlyingProtectionTermEventQualifiers) HasUnderlyingProtectionTermEventQualifier() bool {
	return m.Has(tag.UnderlyingProtectionTermEventQualifier)
}

// NoUnderlyingProtectionTermEventQualifiersRepeatingGroup is a repeating group, Tag 42085.
type NoUnderlyingProtectionTermEventQualifiersRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingProtectionTermEventQualifiersRepeatingGroup returns an initialized, NoUnderlyingProtectionTermEventQualifiersRepeatingGroup.
func NewNoUnderlyingProtectionTermEventQualifiersRepeatingGroup() NoUnderlyingProtectionTermEventQualifiersRepeatingGroup {
	return NoUnderlyingProtectionTermEventQualifiersRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingProtectionTermEventQualifiers,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingProtectionTermEventQualifier),
			},
		),
	}
}

// Add create and append a new NoUnderlyingProtectionTermEventQualifiers to this group.
func (m NoUnderlyingProtectionTermEventQualifiersRepeatingGroup) Add() NoUnderlyingProtectionTermEventQualifiers {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingProtectionTermEventQualifiers{g}
}

// Get returns the ith NoUnderlyingProtectionTermEventQualifiers in the NoUnderlyingProtectionTermEventQualifiersRepeatinGroup.
func (m NoUnderlyingProtectionTermEventQualifiersRepeatingGroup) Get(i int) NoUnderlyingProtectionTermEventQualifiers {
	return NoUnderlyingProtectionTermEventQualifiers{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingProtectionTermEventsRepeatingGroup is a repeating group, Tag 42077.
type NoUnderlyingProtectionTermEventsRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingProtectionTermEventsRepeatingGroup returns an initialized, NoUnderlyingProtectionTermEventsRepeatingGroup.
func NewNoUnderlyingProtectionTermEventsRepeatingGroup() NoUnderlyingProtectionTermEventsRepeatingGroup {
	return NoUnderlyingProtectionTermEventsRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingProtectionTermEvents,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingProtectionTermEventType),
				quickfix.GroupElement(tag.UnderlyingProtectionTermEventValue),
				quickfix.GroupElement(tag.UnderlyingProtectionTermEventCurrency),
				quickfix.GroupElement(tag.UnderlyingProtectionTermEventPeriod),
				quickfix.GroupElement(tag.UnderlyingProtectionTermEventUnit),
				quickfix.GroupElement(tag.UnderlyingProtectionTermEventDayType),
				quickfix.GroupElement(tag.UnderlyingProtectionTermEventRateSource),
				NewNoUnderlyingProtectionTermEventQualifiersRepeatingGroup(),
			},
		),
	}
}

// Add create and append a new NoUnderlyingProtectionTermEvents to this group.
func (m NoUnderlyingProtectionTermEventsRepeatingGroup) Add() NoUnderlyingProtectionTermEvents {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingProtectionTermEvents{g}
}

// Get returns the ith NoUnderlyingProtectionTermEvents in the NoUnderlyingProtectionTermEventsRepeatinGroup.
func (m NoUnderlyingProtectionTermEventsRepeatingGroup) Get(i int) NoUnderlyingProtectionTermEvents {
	return NoUnderlyingProtectionTermEvents{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingProtectionTermObligations is a repeating group element, Tag 42087.
type NoUnderlyingProtectionTermObligations struct {
	*quickfix.Group
}

// SetUnderlyingProtectionTermObligationType sets UnderlyingProtectionTermObligationType, Tag 42088.
func (m NoUnderlyingProtectionTermObligations) SetUnderlyingProtectionTermObligationType(v string) {
	m.Set(field.NewUnderlyingProtectionTermObligationType(v))
}

// SetUnderlyingProtectionTermObligationValue sets UnderlyingProtectionTermObligationValue, Tag 42089.
func (m NoUnderlyingProtectionTermObligations) SetUnderlyingProtectionTermObligationValue(v string) {
	m.Set(field.NewUnderlyingProtectionTermObligationValue(v))
}

// GetUnderlyingProtectionTermObligationType gets UnderlyingProtectionTermObligationType, Tag 42088.
func (m NoUnderlyingProtectionTermObligations) GetUnderlyingProtectionTermObligationType() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingProtectionTermObligationTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProtectionTermObligationValue gets UnderlyingProtectionTermObligationValue, Tag 42089.
func (m NoUnderlyingProtectionTermObligations) GetUnderlyingProtectionTermObligationValue() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingProtectionTermObligationValueField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingProtectionTermObligationType returns true if UnderlyingProtectionTermObligationType is present, Tag 42088.
func (m NoUnderlyingProtectionTermObligations) HasUnderlyingProtectionTermObligationType() bool {
	return m.Has(tag.UnderlyingProtectionTermObligationType)
}

// HasUnderlyingProtectionTermObligationValue returns true if UnderlyingProtectionTermObligationValue is present, Tag 42089.
func (m NoUnderlyingProtectionTermObligations) HasUnderlyingProtectionTermObligationValue() bool {
	return m.Has(tag.UnderlyingProtectionTermObligationValue)
}

// NoUnderlyingProtectionTermObligationsRepeatingGroup is a repeating group, Tag 42087.
type NoUnderlyingProtectionTermObligationsRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingProtectionTermObligationsRepeatingGroup returns an initialized, NoUnderlyingProtectionTermObligationsRepeatingGroup.
func NewNoUnderlyingProtectionTermObligationsRepeatingGroup() NoUnderlyingProtectionTermObligationsRepeatingGroup {
	return NoUnderlyingProtectionTermObligationsRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingProtectionTermObligations,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingProtectionTermObligationType),
				quickfix.GroupElement(tag.UnderlyingProtectionTermObligationValue),
			},
		),
	}
}

// Add create and append a new NoUnderlyingProtectionTermObligations to this group.
func (m NoUnderlyingProtectionTermObligationsRepeatingGroup) Add() NoUnderlyingProtectionTermObligations {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingProtectionTermObligations{g}
}

// Get returns the ith NoUnderlyingProtectionTermObligations in the NoUnderlyingProtectionTermObligationsRepeatinGroup.
func (m NoUnderlyingProtectionTermObligationsRepeatingGroup) Get(i int) NoUnderlyingProtectionTermObligations {
	return NoUnderlyingProtectionTermObligations{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingProtectionTermsRepeatingGroup is a repeating group, Tag 42068.
type NoUnderlyingProtectionTermsRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingProtectionTermsRepeatingGroup returns an initialized, NoUnderlyingProtectionTermsRepeatingGroup.
func NewNoUnderlyingProtectionTermsRepeatingGroup() NoUnderlyingProtectionTermsRepeatingGroup {
	return NoUnderlyingProtectionTermsRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingProtectionTerms,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingProtectionTermNotional),
				quickfix.GroupElement(tag.UnderlyingProtectionTermCurrency),
				quickfix.GroupElement(tag.UnderlyingProtectionTermSellerNotifies),
				quickfix.GroupElement(tag.UnderlyingProtectionTermBuyerNotifies),
				quickfix.GroupElement(tag.UnderlyingProtectionTermEventBusinessCenter),
				quickfix.GroupElement(tag.UnderlyingProtectionTermStandardSources),
				quickfix.GroupElement(tag.UnderlyingProtectionTermEventMinimumSources),
				NewNoUnderlyingProtectionTermEventNewsSourcesRepeatingGroup(),
				NewNoUnderlyingProtectionTermEventsRepeatingGroup(),
				NewNoUnderlyingProtectionTermObligationsRepeatingGroup(),
				quickfix.GroupElement(tag.UnderlyingProtectionTermXID),
			},
		),
	}
}

// Add create and append a new NoUnderlyingProtectionTerms to this group.
func (m NoUnderlyingProtectionTermsRepeatingGroup) Add() NoUnderlyingProtectionTerms {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingProtectionTerms{g}
}

// Get returns the ith NoUnderlyingProtectionTerms in the NoUnderlyingProtectionTermsRepeatinGroup.
func (m NoUnderlyingProtectionTermsRepeatingGroup) Get(i int) NoUnderlyingProtectionTerms {
	return NoUnderlyingProtectionTerms{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingProvisions is a repeating group element, Tag 42149.
type NoUnderlyingProvisions struct {
	*quickfix.Group
}

// SetUnderlyingProvisionType sets UnderlyingProvisionType, Tag 42150.
func (m NoUnderlyingProvisions) SetUnderlyingProvisionType(v int) {
	m.Set(field.NewUnderlyingProvisionType(v))
}

// SetUnderlyingProvisionDateUnadjusted sets UnderlyingProvisionDateUnadjusted, Tag 42151.
func (m NoUnderlyingProvisions) SetUnderlyingProvisionDateUnadjusted(v string) {
	m.Set(field.NewUnderlyingProvisionDateUnadjusted(v))
}

// SetUnderlyingProvisionDateBusinessDayConvention sets UnderlyingProvisionDateBusinessDayConvention, Tag 42152.
func (m NoUnderlyingProvisions) SetUnderlyingProvisionDateBusinessDayConvention(v int) {
	m.Set(field.NewUnderlyingProvisionDateBusinessDayConvention(v))
}

// SetNoUnderlyingProvisionDateBusinessCenters sets NoUnderlyingProvisionDateBusinessCenters, Tag 42190.
func (m NoUnderlyingProvisions) SetNoUnderlyingProvisionDateBusinessCenters(f NoUnderlyingProvisionDateBusinessCentersRepeatingGroup) {
	m.SetGroup(f)
}

// SetUnderlyingProvisionDateAdjusted sets UnderlyingProvisionDateAdjusted, Tag 42153.
func (m NoUnderlyingProvisions) SetUnderlyingProvisionDateAdjusted(v string) {
	m.Set(field.NewUnderlyingProvisionDateAdjusted(v))
}

// SetUnderlyingProvisionDateTenorPeriod sets UnderlyingProvisionDateTenorPeriod, Tag 42154.
func (m NoUnderlyingProvisions) SetUnderlyingProvisionDateTenorPeriod(v int) {
	m.Set(field.NewUnderlyingProvisionDateTenorPeriod(v))
}

// SetUnderlyingProvisionDateTenorUnit sets UnderlyingProvisionDateTenorUnit, Tag 42155.
func (m NoUnderlyingProvisions) SetUnderlyingProvisionDateTenorUnit(v string) {
	m.Set(field.NewUnderlyingProvisionDateTenorUnit(v))
}

// SetUnderlyingProvisionCalculationAgent sets UnderlyingProvisionCalculationAgent, Tag 42156.
func (m NoUnderlyingProvisions) SetUnderlyingProvisionCalculationAgent(v int) {
	m.Set(field.NewUnderlyingProvisionCalculationAgent(v))
}

// SetUnderlyingProvisionOptionSinglePartyBuyerSide sets UnderlyingProvisionOptionSinglePartyBuyerSide, Tag 42157.
func (m NoUnderlyingProvisions) SetUnderlyingProvisionOptionSinglePartyBuyerSide(v int) {
	m.Set(field.NewUnderlyingProvisionOptionSinglePartyBuyerSide(v))
}

// SetUnderlyingProvisionOptionSinglePartySellerSide sets UnderlyingProvisionOptionSinglePartySellerSide, Tag 42158.
func (m NoUnderlyingProvisions) SetUnderlyingProvisionOptionSinglePartySellerSide(v int) {
	m.Set(field.NewUnderlyingProvisionOptionSinglePartySellerSide(v))
}

// SetUnderlyingProvisionCashSettlValueTime sets UnderlyingProvisionCashSettlValueTime, Tag 42104.
func (m NoUnderlyingProvisions) SetUnderlyingProvisionCashSettlValueTime(v string) {
	m.Set(field.NewUnderlyingProvisionCashSettlValueTime(v))
}

// SetUnderlyingProvisionCashSettlValueTimeBusinessCenter sets UnderlyingProvisionCashSettlValueTimeBusinessCenter, Tag 42105.
func (m NoUnderlyingProvisions) SetUnderlyingProvisionCashSettlValueTimeBusinessCenter(v string) {
	m.Set(field.NewUnderlyingProvisionCashSettlValueTimeBusinessCenter(v))
}

// SetUnderlyingProvisionCashSettlValueDateBusinessDayConvention sets UnderlyingProvisionCashSettlValueDateBusinessDayConvention, Tag 42106.
func (m NoUnderlyingProvisions) SetUnderlyingProvisionCashSettlValueDateBusinessDayConvention(v int) {
	m.Set(field.NewUnderlyingProvisionCashSettlValueDateBusinessDayConvention(v))
}

// SetNoUnderlyingProvisionCashSettlValueDateBusinessCenters sets NoUnderlyingProvisionCashSettlValueDateBusinessCenters, Tag 42182.
func (m NoUnderlyingProvisions) SetNoUnderlyingProvisionCashSettlValueDateBusinessCenters(f NoUnderlyingProvisionCashSettlValueDateBusinessCentersRepeatingGroup) {
	m.SetGroup(f)
}

// SetUnderlyingProvisionCashSettlValueDateRelativeTo sets UnderlyingProvisionCashSettlValueDateRelativeTo, Tag 42107.
func (m NoUnderlyingProvisions) SetUnderlyingProvisionCashSettlValueDateRelativeTo(v int) {
	m.Set(field.NewUnderlyingProvisionCashSettlValueDateRelativeTo(v))
}

// SetUnderlyingProvisionCashSettlValueDateOffsetPeriod sets UnderlyingProvisionCashSettlValueDateOffsetPeriod, Tag 42108.
func (m NoUnderlyingProvisions) SetUnderlyingProvisionCashSettlValueDateOffsetPeriod(v int) {
	m.Set(field.NewUnderlyingProvisionCashSettlValueDateOffsetPeriod(v))
}

// SetUnderlyingProvisionCashSettlValueDateOffsetUnit sets UnderlyingProvisionCashSettlValueDateOffsetUnit, Tag 42109.
func (m NoUnderlyingProvisions) SetUnderlyingProvisionCashSettlValueDateOffsetUnit(v string) {
	m.Set(field.NewUnderlyingProvisionCashSettlValueDateOffsetUnit(v))
}

// SetUnderlyingProvisionCashSettlValueDateOffsetDayType sets UnderlyingProvisionCashSettlValueDateOffsetDayType, Tag 42110.
func (m NoUnderlyingProvisions) SetUnderlyingProvisionCashSettlValueDateOffsetDayType(v int) {
	m.Set(field.NewUnderlyingProvisionCashSettlValueDateOffsetDayType(v))
}

// SetUnderlyingProvisionCashSettlValueDateAdjusted sets UnderlyingProvisionCashSettlValueDateAdjusted, Tag 42111.
func (m NoUnderlyingProvisions) SetUnderlyingProvisionCashSettlValueDateAdjusted(v string) {
	m.Set(field.NewUnderlyingProvisionCashSettlValueDateAdjusted(v))
}

// SetUnderlyingProvisionOptionExerciseBusinessDayConvention sets UnderlyingProvisionOptionExerciseBusinessDayConvention, Tag 42115.
func (m NoUnderlyingProvisions) SetUnderlyingProvisionOptionExerciseBusinessDayConvention(v int) {
	m.Set(field.NewUnderlyingProvisionOptionExerciseBusinessDayConvention(v))
}

// SetNoUnderlyingProvisionOptionExerciseBusinessCenters sets NoUnderlyingProvisionOptionExerciseBusinessCenters, Tag 42184.
func (m NoUnderlyingProvisions) SetNoUnderlyingProvisionOptionExerciseBusinessCenters(f NoUnderlyingProvisionOptionExerciseBusinessCentersRepeatingGroup) {
	m.SetGroup(f)
}

// SetNoUnderlyingProvisionOptionExerciseFixedDates sets NoUnderlyingProvisionOptionExerciseFixedDates, Tag 42112.
func (m NoUnderlyingProvisions) SetNoUnderlyingProvisionOptionExerciseFixedDates(f NoUnderlyingProvisionOptionExerciseFixedDatesRepeatingGroup) {
	m.SetGroup(f)
}

// SetUnderlyingProvisionOptionExerciseEarliestDateOffsetPeriod sets UnderlyingProvisionOptionExerciseEarliestDateOffsetPeriod, Tag 42116.
func (m NoUnderlyingProvisions) SetUnderlyingProvisionOptionExerciseEarliestDateOffsetPeriod(v int) {
	m.Set(field.NewUnderlyingProvisionOptionExerciseEarliestDateOffsetPeriod(v))
}

// SetUnderlyingProvisionOptionExerciseEarliestDateOffsetUnit sets UnderlyingProvisionOptionExerciseEarliestDateOffsetUnit, Tag 42117.
func (m NoUnderlyingProvisions) SetUnderlyingProvisionOptionExerciseEarliestDateOffsetUnit(v string) {
	m.Set(field.NewUnderlyingProvisionOptionExerciseEarliestDateOffsetUnit(v))
}

// SetUnderlyingProvisionOptionExerciseFrequencyPeriod sets UnderlyingProvisionOptionExerciseFrequencyPeriod, Tag 42118.
func (m NoUnderlyingProvisions) SetUnderlyingProvisionOptionExerciseFrequencyPeriod(v int) {
	m.Set(field.NewUnderlyingProvisionOptionExerciseFrequencyPeriod(v))
}

// SetUnderlyingProvisionOptionExerciseFrequencyUnit sets UnderlyingProvisionOptionExerciseFrequencyUnit, Tag 42119.
func (m NoUnderlyingProvisions) SetUnderlyingProvisionOptionExerciseFrequencyUnit(v string) {
	m.Set(field.NewUnderlyingProvisionOptionExerciseFrequencyUnit(v))
}

// SetUnderlyingProvisionOptionExerciseStartDateUnadjusted sets UnderlyingProvisionOptionExerciseStartDateUnadjusted, Tag 42120.
func (m NoUnderlyingProvisions) SetUnderlyingProvisionOptionExerciseStartDateUnadjusted(v string) {
	m.Set(field.NewUnderlyingProvisionOptionExerciseStartDateUnadjusted(v))
}

// SetUnderlyingProvisionOptionExerciseStartDateRelativeTo sets UnderlyingProvisionOptionExerciseStartDateRelativeTo, Tag 42121.
func (m NoUnderlyingProvisions) SetUnderlyingProvisionOptionExerciseStartDateRelativeTo(v int) {
	m.Set(field.NewUnderlyingProvisionOptionExerciseStartDateRelativeTo(v))
}

// SetUnderlyingProvisionOptionExerciseStartDateOffsetPeriod sets UnderlyingProvisionOptionExerciseStartDateOffsetPeriod, Tag 42122.
func (m NoUnderlyingProvisions) SetUnderlyingProvisionOptionExerciseStartDateOffsetPeriod(v int) {
	m.Set(field.NewUnderlyingProvisionOptionExerciseStartDateOffsetPeriod(v))
}

// SetUnderlyingProvisionOptionExerciseStartDateOffsetUnit sets UnderlyingProvisionOptionExerciseStartDateOffsetUnit, Tag 42123.
func (m NoUnderlyingProvisions) SetUnderlyingProvisionOptionExerciseStartDateOffsetUnit(v string) {
	m.Set(field.NewUnderlyingProvisionOptionExerciseStartDateOffsetUnit(v))
}

// SetUnderlyingProvisionOptionExerciseStartDateOffsetDayType sets UnderlyingProvisionOptionExerciseStartDateOffsetDayType, Tag 42124.
func (m NoUnderlyingProvisions) SetUnderlyingProvisionOptionExerciseStartDateOffsetDayType(v int) {
	m.Set(field.NewUnderlyingProvisionOptionExerciseStartDateOffsetDayType(v))
}

// SetUnderlyingProvisionOptionExerciseStartDateAdjusted sets UnderlyingProvisionOptionExerciseStartDateAdjusted, Tag 42125.
func (m NoUnderlyingProvisions) SetUnderlyingProvisionOptionExerciseStartDateAdjusted(v string) {
	m.Set(field.NewUnderlyingProvisionOptionExerciseStartDateAdjusted(v))
}

// SetUnderlyingProvisionOptionExercisePeriodSkip sets UnderlyingProvisionOptionExercisePeriodSkip, Tag 42126.
func (m NoUnderlyingProvisions) SetUnderlyingProvisionOptionExercisePeriodSkip(v int) {
	m.Set(field.NewUnderlyingProvisionOptionExercisePeriodSkip(v))
}

// SetUnderlyingProvisionOptionExerciseBoundsFirstDateUnadjusted sets UnderlyingProvisionOptionExerciseBoundsFirstDateUnadjusted, Tag 42127.
func (m NoUnderlyingProvisions) SetUnderlyingProvisionOptionExerciseBoundsFirstDateUnadjusted(v string) {
	m.Set(field.NewUnderlyingProvisionOptionExerciseBoundsFirstDateUnadjusted(v))
}

// SetUnderlyingProvisionOptionExerciseBoundsLastDateUnadjusted sets UnderlyingProvisionOptionExerciseBoundsLastDateUnadjusted, Tag 42128.
func (m NoUnderlyingProvisions) SetUnderlyingProvisionOptionExerciseBoundsLastDateUnadjusted(v string) {
	m.Set(field.NewUnderlyingProvisionOptionExerciseBoundsLastDateUnadjusted(v))
}

// SetUnderlyingProvisionOptionExerciseEarliestTime sets UnderlyingProvisionOptionExerciseEarliestTime, Tag 42129.
func (m NoUnderlyingProvisions) SetUnderlyingProvisionOptionExerciseEarliestTime(v string) {
	m.Set(field.NewUnderlyingProvisionOptionExerciseEarliestTime(v))
}

// SetUnderlyingProvisionOptionExerciseEarliestTimeBusinessCenter sets UnderlyingProvisionOptionExerciseEarliestTimeBusinessCenter, Tag 42130.
func (m NoUnderlyingProvisions) SetUnderlyingProvisionOptionExerciseEarliestTimeBusinessCenter(v string) {
	m.Set(field.NewUnderlyingProvisionOptionExerciseEarliestTimeBusinessCenter(v))
}

// SetUnderlyingProvisionOptionExerciseLatestTime sets UnderlyingProvisionOptionExerciseLatestTime, Tag 42131.
func (m NoUnderlyingProvisions) SetUnderlyingProvisionOptionExerciseLatestTime(v string) {
	m.Set(field.NewUnderlyingProvisionOptionExerciseLatestTime(v))
}

// SetUnderlyingProvisionOptionExerciseLatestTimeBusinessCenter sets UnderlyingProvisionOptionExerciseLatestTimeBusinessCenter, Tag 42132.
func (m NoUnderlyingProvisions) SetUnderlyingProvisionOptionExerciseLatestTimeBusinessCenter(v string) {
	m.Set(field.NewUnderlyingProvisionOptionExerciseLatestTimeBusinessCenter(v))
}

// SetUnderlyingProvisionOptionExpirationDateUnadjusted sets UnderlyingProvisionOptionExpirationDateUnadjusted, Tag 42133.
func (m NoUnderlyingProvisions) SetUnderlyingProvisionOptionExpirationDateUnadjusted(v string) {
	m.Set(field.NewUnderlyingProvisionOptionExpirationDateUnadjusted(v))
}

// SetUnderlyingProvisionOptionExpirationDateBusinessDayConvention sets UnderlyingProvisionOptionExpirationDateBusinessDayConvention, Tag 42134.
func (m NoUnderlyingProvisions) SetUnderlyingProvisionOptionExpirationDateBusinessDayConvention(v int) {
	m.Set(field.NewUnderlyingProvisionOptionExpirationDateBusinessDayConvention(v))
}

// SetNoUnderlyingProvisionOptionExpirationDateBusinessCenters sets NoUnderlyingProvisionOptionExpirationDateBusinessCenters, Tag 42186.
func (m NoUnderlyingProvisions) SetNoUnderlyingProvisionOptionExpirationDateBusinessCenters(f NoUnderlyingProvisionOptionExpirationDateBusinessCentersRepeatingGroup) {
	m.SetGroup(f)
}

// SetUnderlyingProvisionOptionExpirationDateRelativeTo sets UnderlyingProvisionOptionExpirationDateRelativeTo, Tag 42135.
func (m NoUnderlyingProvisions) SetUnderlyingProvisionOptionExpirationDateRelativeTo(v int) {
	m.Set(field.NewUnderlyingProvisionOptionExpirationDateRelativeTo(v))
}

// SetUnderlyingProvisionOptionExpirationDateOffsetPeriod sets UnderlyingProvisionOptionExpirationDateOffsetPeriod, Tag 42136.
func (m NoUnderlyingProvisions) SetUnderlyingProvisionOptionExpirationDateOffsetPeriod(v int) {
	m.Set(field.NewUnderlyingProvisionOptionExpirationDateOffsetPeriod(v))
}

// SetUnderlyingProvisionOptionExpirationDateOffsetUnit sets UnderlyingProvisionOptionExpirationDateOffsetUnit, Tag 42137.
func (m NoUnderlyingProvisions) SetUnderlyingProvisionOptionExpirationDateOffsetUnit(v string) {
	m.Set(field.NewUnderlyingProvisionOptionExpirationDateOffsetUnit(v))
}

// SetUnderlyingProvisionOptionExpirationDateOffsetDayType sets UnderlyingProvisionOptionExpirationDateOffsetDayType, Tag 42138.
func (m NoUnderlyingProvisions) SetUnderlyingProvisionOptionExpirationDateOffsetDayType(v int) {
	m.Set(field.NewUnderlyingProvisionOptionExpirationDateOffsetDayType(v))
}

// SetUnderlyingProvisionOptionExpirationDateAdjusted sets UnderlyingProvisionOptionExpirationDateAdjusted, Tag 42139.
func (m NoUnderlyingProvisions) SetUnderlyingProvisionOptionExpirationDateAdjusted(v string) {
	m.Set(field.NewUnderlyingProvisionOptionExpirationDateAdjusted(v))
}

// SetUnderlyingProvisionOptionExpirationTime sets UnderlyingProvisionOptionExpirationTime, Tag 42140.
func (m NoUnderlyingProvisions) SetUnderlyingProvisionOptionExpirationTime(v string) {
	m.Set(field.NewUnderlyingProvisionOptionExpirationTime(v))
}

// SetUnderlyingProvisionOptionExpirationTimeBusinessCenter sets UnderlyingProvisionOptionExpirationTimeBusinessCenter, Tag 42141.
func (m NoUnderlyingProvisions) SetUnderlyingProvisionOptionExpirationTimeBusinessCenter(v string) {
	m.Set(field.NewUnderlyingProvisionOptionExpirationTimeBusinessCenter(v))
}

// SetUnderlyingProvisionOptionRelevantUnderlyingDateUnadjusted sets UnderlyingProvisionOptionRelevantUnderlyingDateUnadjusted, Tag 42142.
func (m NoUnderlyingProvisions) SetUnderlyingProvisionOptionRelevantUnderlyingDateUnadjusted(v string) {
	m.Set(field.NewUnderlyingProvisionOptionRelevantUnderlyingDateUnadjusted(v))
}

// SetUnderlyingProvisionOptionRelevantUnderlyingDateBusinessDayConvention sets UnderlyingProvisionOptionRelevantUnderlyingDateBusinessDayConvention, Tag 42143.
func (m NoUnderlyingProvisions) SetUnderlyingProvisionOptionRelevantUnderlyingDateBusinessDayConvention(v int) {
	m.Set(field.NewUnderlyingProvisionOptionRelevantUnderlyingDateBusinessDayConvention(v))
}

// SetNoUnderlyingProvisionOptionRelevantUnderlyingDateBusinessCenters sets NoUnderlyingProvisionOptionRelevantUnderlyingDateBusinessCenters, Tag 42188.
func (m NoUnderlyingProvisions) SetNoUnderlyingProvisionOptionRelevantUnderlyingDateBusinessCenters(f NoUnderlyingProvisionOptionRelevantUnderlyingDateBusinessCentersRepeatingGroup) {
	m.SetGroup(f)
}

// SetUnderlyingProvisionOptionRelevantUnderlyingDateRelativeTo sets UnderlyingProvisionOptionRelevantUnderlyingDateRelativeTo, Tag 42144.
func (m NoUnderlyingProvisions) SetUnderlyingProvisionOptionRelevantUnderlyingDateRelativeTo(v int) {
	m.Set(field.NewUnderlyingProvisionOptionRelevantUnderlyingDateRelativeTo(v))
}

// SetUnderlyingProvisionOptionRelevantUnderlyingDateOffsetPeriod sets UnderlyingProvisionOptionRelevantUnderlyingDateOffsetPeriod, Tag 42145.
func (m NoUnderlyingProvisions) SetUnderlyingProvisionOptionRelevantUnderlyingDateOffsetPeriod(v int) {
	m.Set(field.NewUnderlyingProvisionOptionRelevantUnderlyingDateOffsetPeriod(v))
}

// SetUnderlyingProvisionOptionRelevantUnderlyingDateOffsetUnit sets UnderlyingProvisionOptionRelevantUnderlyingDateOffsetUnit, Tag 42146.
func (m NoUnderlyingProvisions) SetUnderlyingProvisionOptionRelevantUnderlyingDateOffsetUnit(v string) {
	m.Set(field.NewUnderlyingProvisionOptionRelevantUnderlyingDateOffsetUnit(v))
}

// SetUnderlyingProvisionOptionRelevantUnderlyingDateOffsetDayType sets UnderlyingProvisionOptionRelevantUnderlyingDateOffsetDayType, Tag 42147.
func (m NoUnderlyingProvisions) SetUnderlyingProvisionOptionRelevantUnderlyingDateOffsetDayType(v int) {
	m.Set(field.NewUnderlyingProvisionOptionRelevantUnderlyingDateOffsetDayType(v))
}

// SetUnderlyingProvisionOptionRelevantUnderlyingDateAdjusted sets UnderlyingProvisionOptionRelevantUnderlyingDateAdjusted, Tag 42148.
func (m NoUnderlyingProvisions) SetUnderlyingProvisionOptionRelevantUnderlyingDateAdjusted(v string) {
	m.Set(field.NewUnderlyingProvisionOptionRelevantUnderlyingDateAdjusted(v))
}

// SetUnderlyingProvisionOptionExerciseStyle sets UnderlyingProvisionOptionExerciseStyle, Tag 42159.
func (m NoUnderlyingProvisions) SetUnderlyingProvisionOptionExerciseStyle(v int) {
	m.Set(field.NewUnderlyingProvisionOptionExerciseStyle(v))
}

// SetUnderlyingProvisionOptionExerciseMultipleNotional sets UnderlyingProvisionOptionExerciseMultipleNotional, Tag 42160.
func (m NoUnderlyingProvisions) SetUnderlyingProvisionOptionExerciseMultipleNotional(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingProvisionOptionExerciseMultipleNotional(value, scale))
}

// SetUnderlyingProvisionOptionExerciseMinimumNotional sets UnderlyingProvisionOptionExerciseMinimumNotional, Tag 42161.
func (m NoUnderlyingProvisions) SetUnderlyingProvisionOptionExerciseMinimumNotional(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingProvisionOptionExerciseMinimumNotional(value, scale))
}

// SetUnderlyingProvisionOptionExerciseMaximumNotional sets UnderlyingProvisionOptionExerciseMaximumNotional, Tag 42162.
func (m NoUnderlyingProvisions) SetUnderlyingProvisionOptionExerciseMaximumNotional(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingProvisionOptionExerciseMaximumNotional(value, scale))
}

// SetUnderlyingProvisionOptionMinimumNumber sets UnderlyingProvisionOptionMinimumNumber, Tag 42163.
func (m NoUnderlyingProvisions) SetUnderlyingProvisionOptionMinimumNumber(v int) {
	m.Set(field.NewUnderlyingProvisionOptionMinimumNumber(v))
}

// SetUnderlyingProvisionOptionMaximumNumber sets UnderlyingProvisionOptionMaximumNumber, Tag 42164.
func (m NoUnderlyingProvisions) SetUnderlyingProvisionOptionMaximumNumber(v int) {
	m.Set(field.NewUnderlyingProvisionOptionMaximumNumber(v))
}

// SetUnderlyingProvisionOptionExerciseConfirmation sets UnderlyingProvisionOptionExerciseConfirmation, Tag 42165.
func (m NoUnderlyingProvisions) SetUnderlyingProvisionOptionExerciseConfirmation(v bool) {
	m.Set(field.NewUnderlyingProvisionOptionExerciseConfirmation(v))
}

// SetUnderlyingProvisionCashSettlPaymentDateBusinessDayConvention sets UnderlyingProvisionCashSettlPaymentDateBusinessDayConvention, Tag 42092.
func (m NoUnderlyingProvisions) SetUnderlyingProvisionCashSettlPaymentDateBusinessDayConvention(v int) {
	m.Set(field.NewUnderlyingProvisionCashSettlPaymentDateBusinessDayConvention(v))
}

// SetNoUnderlyingProvisionCashSettlPaymentDateBusinessCenters sets NoUnderlyingProvisionCashSettlPaymentDateBusinessCenters, Tag 42180.
func (m NoUnderlyingProvisions) SetNoUnderlyingProvisionCashSettlPaymentDateBusinessCenters(f NoUnderlyingProvisionCashSettlPaymentDateBusinessCentersRepeatingGroup) {
	m.SetGroup(f)
}

// SetUnderlyingProvisionCashSettlPaymentDateRelativeTo sets UnderlyingProvisionCashSettlPaymentDateRelativeTo, Tag 42093.
func (m NoUnderlyingProvisions) SetUnderlyingProvisionCashSettlPaymentDateRelativeTo(v int) {
	m.Set(field.NewUnderlyingProvisionCashSettlPaymentDateRelativeTo(v))
}

// SetUnderlyingProvisionCashSettlPaymentDateOffsetPeriod sets UnderlyingProvisionCashSettlPaymentDateOffsetPeriod, Tag 42094.
func (m NoUnderlyingProvisions) SetUnderlyingProvisionCashSettlPaymentDateOffsetPeriod(v int) {
	m.Set(field.NewUnderlyingProvisionCashSettlPaymentDateOffsetPeriod(v))
}

// SetUnderlyingProvisionCashSettlPaymentDateOffsetUnit sets UnderlyingProvisionCashSettlPaymentDateOffsetUnit, Tag 42095.
func (m NoUnderlyingProvisions) SetUnderlyingProvisionCashSettlPaymentDateOffsetUnit(v string) {
	m.Set(field.NewUnderlyingProvisionCashSettlPaymentDateOffsetUnit(v))
}

// SetUnderlyingProvisionCashSettlPaymentDateOffsetDayType sets UnderlyingProvisionCashSettlPaymentDateOffsetDayType, Tag 42096.
func (m NoUnderlyingProvisions) SetUnderlyingProvisionCashSettlPaymentDateOffsetDayType(v int) {
	m.Set(field.NewUnderlyingProvisionCashSettlPaymentDateOffsetDayType(v))
}

// SetUnderlyingProvisionCashSettlPaymentDateRangeFirst sets UnderlyingProvisionCashSettlPaymentDateRangeFirst, Tag 42097.
func (m NoUnderlyingProvisions) SetUnderlyingProvisionCashSettlPaymentDateRangeFirst(v string) {
	m.Set(field.NewUnderlyingProvisionCashSettlPaymentDateRangeFirst(v))
}

// SetUnderlyingProvisionCashSettlPaymentDateRangeLast sets UnderlyingProvisionCashSettlPaymentDateRangeLast, Tag 42098.
func (m NoUnderlyingProvisions) SetUnderlyingProvisionCashSettlPaymentDateRangeLast(v string) {
	m.Set(field.NewUnderlyingProvisionCashSettlPaymentDateRangeLast(v))
}

// SetNoUnderlyingProvisionCashSettlPaymentDates sets NoUnderlyingProvisionCashSettlPaymentDates, Tag 42099.
func (m NoUnderlyingProvisions) SetNoUnderlyingProvisionCashSettlPaymentDates(f NoUnderlyingProvisionCashSettlPaymentDatesRepeatingGroup) {
	m.SetGroup(f)
}

// SetUnderlyingProvisionCashSettlMethod sets UnderlyingProvisionCashSettlMethod, Tag 42166.
func (m NoUnderlyingProvisions) SetUnderlyingProvisionCashSettlMethod(v int) {
	m.Set(field.NewUnderlyingProvisionCashSettlMethod(v))
}

// SetUnderlyingProvisionCashSettlCurrency sets UnderlyingProvisionCashSettlCurrency, Tag 42167.
func (m NoUnderlyingProvisions) SetUnderlyingProvisionCashSettlCurrency(v string) {
	m.Set(field.NewUnderlyingProvisionCashSettlCurrency(v))
}

// SetUnderlyingProvisionCashSettlCurrency2 sets UnderlyingProvisionCashSettlCurrency2, Tag 42168.
func (m NoUnderlyingProvisions) SetUnderlyingProvisionCashSettlCurrency2(v string) {
	m.Set(field.NewUnderlyingProvisionCashSettlCurrency2(v))
}

// SetUnderlyingProvisionCashSettlQuoteType sets UnderlyingProvisionCashSettlQuoteType, Tag 42169.
func (m NoUnderlyingProvisions) SetUnderlyingProvisionCashSettlQuoteType(v int) {
	m.Set(field.NewUnderlyingProvisionCashSettlQuoteType(v))
}

// SetUnderlyingProvisionCashSettlQuoteSource sets UnderlyingProvisionCashSettlQuoteSource, Tag 42102.
func (m NoUnderlyingProvisions) SetUnderlyingProvisionCashSettlQuoteSource(v int) {
	m.Set(field.NewUnderlyingProvisionCashSettlQuoteSource(v))
}

// SetUnderlyingProvisionCashSettlQuoteReferencePage sets UnderlyingProvisionCashSettlQuoteReferencePage, Tag 42103.
func (m NoUnderlyingProvisions) SetUnderlyingProvisionCashSettlQuoteReferencePage(v string) {
	m.Set(field.NewUnderlyingProvisionCashSettlQuoteReferencePage(v))
}

// SetUnderlyingProvisionText sets UnderlyingProvisionText, Tag 42170.
func (m NoUnderlyingProvisions) SetUnderlyingProvisionText(v string) {
	m.Set(field.NewUnderlyingProvisionText(v))
}

// SetEncodedUnderlyingProvisionTextLen sets EncodedUnderlyingProvisionTextLen, Tag 42171.
func (m NoUnderlyingProvisions) SetEncodedUnderlyingProvisionTextLen(v int) {
	m.Set(field.NewEncodedUnderlyingProvisionTextLen(v))
}

// SetEncodedUnderlyingProvisionText sets EncodedUnderlyingProvisionText, Tag 42172.
func (m NoUnderlyingProvisions) SetEncodedUnderlyingProvisionText(v string) {
	m.Set(field.NewEncodedUnderlyingProvisionText(v))
}

// SetNoUnderlyingProvisionPartyIDs sets NoUnderlyingProvisionPartyIDs, Tag 42173.
func (m NoUnderlyingProvisions) SetNoUnderlyingProvisionPartyIDs(f NoUnderlyingProvisionPartyIDsRepeatingGroup) {
	m.SetGroup(f)
}

// SetUnderlyingProvisionBreakFeeElection sets UnderlyingProvisionBreakFeeElection, Tag 43002.
func (m NoUnderlyingProvisions) SetUnderlyingProvisionBreakFeeElection(v int) {
	m.Set(field.NewUnderlyingProvisionBreakFeeElection(v))
}

// SetUnderlyingProvisionBreakFeeRate sets UnderlyingProvisionBreakFeeRate, Tag 43003.
func (m NoUnderlyingProvisions) SetUnderlyingProvisionBreakFeeRate(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingProvisionBreakFeeRate(value, scale))
}

// GetUnderlyingProvisionType gets UnderlyingProvisionType, Tag 42150.
func (m NoUnderlyingProvisions) GetUnderlyingProvisionType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProvisionDateUnadjusted gets UnderlyingProvisionDateUnadjusted, Tag 42151.
func (m NoUnderlyingProvisions) GetUnderlyingProvisionDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProvisionDateBusinessDayConvention gets UnderlyingProvisionDateBusinessDayConvention, Tag 42152.
func (m NoUnderlyingProvisions) GetUnderlyingProvisionDateBusinessDayConvention() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionDateBusinessDayConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUnderlyingProvisionDateBusinessCenters gets NoUnderlyingProvisionDateBusinessCenters, Tag 42190.
func (m NoUnderlyingProvisions) GetNoUnderlyingProvisionDateBusinessCenters() (NoUnderlyingProvisionDateBusinessCentersRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingProvisionDateBusinessCentersRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetUnderlyingProvisionDateAdjusted gets UnderlyingProvisionDateAdjusted, Tag 42153.
func (m NoUnderlyingProvisions) GetUnderlyingProvisionDateAdjusted() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionDateAdjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProvisionDateTenorPeriod gets UnderlyingProvisionDateTenorPeriod, Tag 42154.
func (m NoUnderlyingProvisions) GetUnderlyingProvisionDateTenorPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionDateTenorPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProvisionDateTenorUnit gets UnderlyingProvisionDateTenorUnit, Tag 42155.
func (m NoUnderlyingProvisions) GetUnderlyingProvisionDateTenorUnit() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionDateTenorUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProvisionCalculationAgent gets UnderlyingProvisionCalculationAgent, Tag 42156.
func (m NoUnderlyingProvisions) GetUnderlyingProvisionCalculationAgent() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionCalculationAgentField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProvisionOptionSinglePartyBuyerSide gets UnderlyingProvisionOptionSinglePartyBuyerSide, Tag 42157.
func (m NoUnderlyingProvisions) GetUnderlyingProvisionOptionSinglePartyBuyerSide() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionOptionSinglePartyBuyerSideField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProvisionOptionSinglePartySellerSide gets UnderlyingProvisionOptionSinglePartySellerSide, Tag 42158.
func (m NoUnderlyingProvisions) GetUnderlyingProvisionOptionSinglePartySellerSide() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionOptionSinglePartySellerSideField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProvisionCashSettlValueTime gets UnderlyingProvisionCashSettlValueTime, Tag 42104.
func (m NoUnderlyingProvisions) GetUnderlyingProvisionCashSettlValueTime() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionCashSettlValueTimeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProvisionCashSettlValueTimeBusinessCenter gets UnderlyingProvisionCashSettlValueTimeBusinessCenter, Tag 42105.
func (m NoUnderlyingProvisions) GetUnderlyingProvisionCashSettlValueTimeBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionCashSettlValueTimeBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProvisionCashSettlValueDateBusinessDayConvention gets UnderlyingProvisionCashSettlValueDateBusinessDayConvention, Tag 42106.
func (m NoUnderlyingProvisions) GetUnderlyingProvisionCashSettlValueDateBusinessDayConvention() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionCashSettlValueDateBusinessDayConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUnderlyingProvisionCashSettlValueDateBusinessCenters gets NoUnderlyingProvisionCashSettlValueDateBusinessCenters, Tag 42182.
func (m NoUnderlyingProvisions) GetNoUnderlyingProvisionCashSettlValueDateBusinessCenters() (NoUnderlyingProvisionCashSettlValueDateBusinessCentersRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingProvisionCashSettlValueDateBusinessCentersRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetUnderlyingProvisionCashSettlValueDateRelativeTo gets UnderlyingProvisionCashSettlValueDateRelativeTo, Tag 42107.
func (m NoUnderlyingProvisions) GetUnderlyingProvisionCashSettlValueDateRelativeTo() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionCashSettlValueDateRelativeToField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProvisionCashSettlValueDateOffsetPeriod gets UnderlyingProvisionCashSettlValueDateOffsetPeriod, Tag 42108.
func (m NoUnderlyingProvisions) GetUnderlyingProvisionCashSettlValueDateOffsetPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionCashSettlValueDateOffsetPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProvisionCashSettlValueDateOffsetUnit gets UnderlyingProvisionCashSettlValueDateOffsetUnit, Tag 42109.
func (m NoUnderlyingProvisions) GetUnderlyingProvisionCashSettlValueDateOffsetUnit() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionCashSettlValueDateOffsetUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProvisionCashSettlValueDateOffsetDayType gets UnderlyingProvisionCashSettlValueDateOffsetDayType, Tag 42110.
func (m NoUnderlyingProvisions) GetUnderlyingProvisionCashSettlValueDateOffsetDayType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionCashSettlValueDateOffsetDayTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProvisionCashSettlValueDateAdjusted gets UnderlyingProvisionCashSettlValueDateAdjusted, Tag 42111.
func (m NoUnderlyingProvisions) GetUnderlyingProvisionCashSettlValueDateAdjusted() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionCashSettlValueDateAdjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProvisionOptionExerciseBusinessDayConvention gets UnderlyingProvisionOptionExerciseBusinessDayConvention, Tag 42115.
func (m NoUnderlyingProvisions) GetUnderlyingProvisionOptionExerciseBusinessDayConvention() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionOptionExerciseBusinessDayConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUnderlyingProvisionOptionExerciseBusinessCenters gets NoUnderlyingProvisionOptionExerciseBusinessCenters, Tag 42184.
func (m NoUnderlyingProvisions) GetNoUnderlyingProvisionOptionExerciseBusinessCenters() (NoUnderlyingProvisionOptionExerciseBusinessCentersRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingProvisionOptionExerciseBusinessCentersRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetNoUnderlyingProvisionOptionExerciseFixedDates gets NoUnderlyingProvisionOptionExerciseFixedDates, Tag 42112.
func (m NoUnderlyingProvisions) GetNoUnderlyingProvisionOptionExerciseFixedDates() (NoUnderlyingProvisionOptionExerciseFixedDatesRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingProvisionOptionExerciseFixedDatesRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetUnderlyingProvisionOptionExerciseEarliestDateOffsetPeriod gets UnderlyingProvisionOptionExerciseEarliestDateOffsetPeriod, Tag 42116.
func (m NoUnderlyingProvisions) GetUnderlyingProvisionOptionExerciseEarliestDateOffsetPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionOptionExerciseEarliestDateOffsetPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProvisionOptionExerciseEarliestDateOffsetUnit gets UnderlyingProvisionOptionExerciseEarliestDateOffsetUnit, Tag 42117.
func (m NoUnderlyingProvisions) GetUnderlyingProvisionOptionExerciseEarliestDateOffsetUnit() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionOptionExerciseEarliestDateOffsetUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProvisionOptionExerciseFrequencyPeriod gets UnderlyingProvisionOptionExerciseFrequencyPeriod, Tag 42118.
func (m NoUnderlyingProvisions) GetUnderlyingProvisionOptionExerciseFrequencyPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionOptionExerciseFrequencyPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProvisionOptionExerciseFrequencyUnit gets UnderlyingProvisionOptionExerciseFrequencyUnit, Tag 42119.
func (m NoUnderlyingProvisions) GetUnderlyingProvisionOptionExerciseFrequencyUnit() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionOptionExerciseFrequencyUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProvisionOptionExerciseStartDateUnadjusted gets UnderlyingProvisionOptionExerciseStartDateUnadjusted, Tag 42120.
func (m NoUnderlyingProvisions) GetUnderlyingProvisionOptionExerciseStartDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionOptionExerciseStartDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProvisionOptionExerciseStartDateRelativeTo gets UnderlyingProvisionOptionExerciseStartDateRelativeTo, Tag 42121.
func (m NoUnderlyingProvisions) GetUnderlyingProvisionOptionExerciseStartDateRelativeTo() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionOptionExerciseStartDateRelativeToField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProvisionOptionExerciseStartDateOffsetPeriod gets UnderlyingProvisionOptionExerciseStartDateOffsetPeriod, Tag 42122.
func (m NoUnderlyingProvisions) GetUnderlyingProvisionOptionExerciseStartDateOffsetPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionOptionExerciseStartDateOffsetPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProvisionOptionExerciseStartDateOffsetUnit gets UnderlyingProvisionOptionExerciseStartDateOffsetUnit, Tag 42123.
func (m NoUnderlyingProvisions) GetUnderlyingProvisionOptionExerciseStartDateOffsetUnit() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionOptionExerciseStartDateOffsetUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProvisionOptionExerciseStartDateOffsetDayType gets UnderlyingProvisionOptionExerciseStartDateOffsetDayType, Tag 42124.
func (m NoUnderlyingProvisions) GetUnderlyingProvisionOptionExerciseStartDateOffsetDayType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionOptionExerciseStartDateOffsetDayTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProvisionOptionExerciseStartDateAdjusted gets UnderlyingProvisionOptionExerciseStartDateAdjusted, Tag 42125.
func (m NoUnderlyingProvisions) GetUnderlyingProvisionOptionExerciseStartDateAdjusted() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionOptionExerciseStartDateAdjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProvisionOptionExercisePeriodSkip gets UnderlyingProvisionOptionExercisePeriodSkip, Tag 42126.
func (m NoUnderlyingProvisions) GetUnderlyingProvisionOptionExercisePeriodSkip() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionOptionExercisePeriodSkipField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProvisionOptionExerciseBoundsFirstDateUnadjusted gets UnderlyingProvisionOptionExerciseBoundsFirstDateUnadjusted, Tag 42127.
func (m NoUnderlyingProvisions) GetUnderlyingProvisionOptionExerciseBoundsFirstDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionOptionExerciseBoundsFirstDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProvisionOptionExerciseBoundsLastDateUnadjusted gets UnderlyingProvisionOptionExerciseBoundsLastDateUnadjusted, Tag 42128.
func (m NoUnderlyingProvisions) GetUnderlyingProvisionOptionExerciseBoundsLastDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionOptionExerciseBoundsLastDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProvisionOptionExerciseEarliestTime gets UnderlyingProvisionOptionExerciseEarliestTime, Tag 42129.
func (m NoUnderlyingProvisions) GetUnderlyingProvisionOptionExerciseEarliestTime() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionOptionExerciseEarliestTimeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProvisionOptionExerciseEarliestTimeBusinessCenter gets UnderlyingProvisionOptionExerciseEarliestTimeBusinessCenter, Tag 42130.
func (m NoUnderlyingProvisions) GetUnderlyingProvisionOptionExerciseEarliestTimeBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionOptionExerciseEarliestTimeBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProvisionOptionExerciseLatestTime gets UnderlyingProvisionOptionExerciseLatestTime, Tag 42131.
func (m NoUnderlyingProvisions) GetUnderlyingProvisionOptionExerciseLatestTime() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionOptionExerciseLatestTimeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProvisionOptionExerciseLatestTimeBusinessCenter gets UnderlyingProvisionOptionExerciseLatestTimeBusinessCenter, Tag 42132.
func (m NoUnderlyingProvisions) GetUnderlyingProvisionOptionExerciseLatestTimeBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionOptionExerciseLatestTimeBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProvisionOptionExpirationDateUnadjusted gets UnderlyingProvisionOptionExpirationDateUnadjusted, Tag 42133.
func (m NoUnderlyingProvisions) GetUnderlyingProvisionOptionExpirationDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionOptionExpirationDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProvisionOptionExpirationDateBusinessDayConvention gets UnderlyingProvisionOptionExpirationDateBusinessDayConvention, Tag 42134.
func (m NoUnderlyingProvisions) GetUnderlyingProvisionOptionExpirationDateBusinessDayConvention() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionOptionExpirationDateBusinessDayConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUnderlyingProvisionOptionExpirationDateBusinessCenters gets NoUnderlyingProvisionOptionExpirationDateBusinessCenters, Tag 42186.
func (m NoUnderlyingProvisions) GetNoUnderlyingProvisionOptionExpirationDateBusinessCenters() (NoUnderlyingProvisionOptionExpirationDateBusinessCentersRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingProvisionOptionExpirationDateBusinessCentersRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetUnderlyingProvisionOptionExpirationDateRelativeTo gets UnderlyingProvisionOptionExpirationDateRelativeTo, Tag 42135.
func (m NoUnderlyingProvisions) GetUnderlyingProvisionOptionExpirationDateRelativeTo() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionOptionExpirationDateRelativeToField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProvisionOptionExpirationDateOffsetPeriod gets UnderlyingProvisionOptionExpirationDateOffsetPeriod, Tag 42136.
func (m NoUnderlyingProvisions) GetUnderlyingProvisionOptionExpirationDateOffsetPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionOptionExpirationDateOffsetPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProvisionOptionExpirationDateOffsetUnit gets UnderlyingProvisionOptionExpirationDateOffsetUnit, Tag 42137.
func (m NoUnderlyingProvisions) GetUnderlyingProvisionOptionExpirationDateOffsetUnit() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionOptionExpirationDateOffsetUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProvisionOptionExpirationDateOffsetDayType gets UnderlyingProvisionOptionExpirationDateOffsetDayType, Tag 42138.
func (m NoUnderlyingProvisions) GetUnderlyingProvisionOptionExpirationDateOffsetDayType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionOptionExpirationDateOffsetDayTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProvisionOptionExpirationDateAdjusted gets UnderlyingProvisionOptionExpirationDateAdjusted, Tag 42139.
func (m NoUnderlyingProvisions) GetUnderlyingProvisionOptionExpirationDateAdjusted() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionOptionExpirationDateAdjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProvisionOptionExpirationTime gets UnderlyingProvisionOptionExpirationTime, Tag 42140.
func (m NoUnderlyingProvisions) GetUnderlyingProvisionOptionExpirationTime() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionOptionExpirationTimeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProvisionOptionExpirationTimeBusinessCenter gets UnderlyingProvisionOptionExpirationTimeBusinessCenter, Tag 42141.
func (m NoUnderlyingProvisions) GetUnderlyingProvisionOptionExpirationTimeBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionOptionExpirationTimeBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProvisionOptionRelevantUnderlyingDateUnadjusted gets UnderlyingProvisionOptionRelevantUnderlyingDateUnadjusted, Tag 42142.
func (m NoUnderlyingProvisions) GetUnderlyingProvisionOptionRelevantUnderlyingDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionOptionRelevantUnderlyingDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProvisionOptionRelevantUnderlyingDateBusinessDayConvention gets UnderlyingProvisionOptionRelevantUnderlyingDateBusinessDayConvention, Tag 42143.
func (m NoUnderlyingProvisions) GetUnderlyingProvisionOptionRelevantUnderlyingDateBusinessDayConvention() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionOptionRelevantUnderlyingDateBusinessDayConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUnderlyingProvisionOptionRelevantUnderlyingDateBusinessCenters gets NoUnderlyingProvisionOptionRelevantUnderlyingDateBusinessCenters, Tag 42188.
func (m NoUnderlyingProvisions) GetNoUnderlyingProvisionOptionRelevantUnderlyingDateBusinessCenters() (NoUnderlyingProvisionOptionRelevantUnderlyingDateBusinessCentersRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingProvisionOptionRelevantUnderlyingDateBusinessCentersRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetUnderlyingProvisionOptionRelevantUnderlyingDateRelativeTo gets UnderlyingProvisionOptionRelevantUnderlyingDateRelativeTo, Tag 42144.
func (m NoUnderlyingProvisions) GetUnderlyingProvisionOptionRelevantUnderlyingDateRelativeTo() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionOptionRelevantUnderlyingDateRelativeToField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProvisionOptionRelevantUnderlyingDateOffsetPeriod gets UnderlyingProvisionOptionRelevantUnderlyingDateOffsetPeriod, Tag 42145.
func (m NoUnderlyingProvisions) GetUnderlyingProvisionOptionRelevantUnderlyingDateOffsetPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionOptionRelevantUnderlyingDateOffsetPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProvisionOptionRelevantUnderlyingDateOffsetUnit gets UnderlyingProvisionOptionRelevantUnderlyingDateOffsetUnit, Tag 42146.
func (m NoUnderlyingProvisions) GetUnderlyingProvisionOptionRelevantUnderlyingDateOffsetUnit() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionOptionRelevantUnderlyingDateOffsetUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProvisionOptionRelevantUnderlyingDateOffsetDayType gets UnderlyingProvisionOptionRelevantUnderlyingDateOffsetDayType, Tag 42147.
func (m NoUnderlyingProvisions) GetUnderlyingProvisionOptionRelevantUnderlyingDateOffsetDayType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionOptionRelevantUnderlyingDateOffsetDayTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProvisionOptionRelevantUnderlyingDateAdjusted gets UnderlyingProvisionOptionRelevantUnderlyingDateAdjusted, Tag 42148.
func (m NoUnderlyingProvisions) GetUnderlyingProvisionOptionRelevantUnderlyingDateAdjusted() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionOptionRelevantUnderlyingDateAdjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProvisionOptionExerciseStyle gets UnderlyingProvisionOptionExerciseStyle, Tag 42159.
func (m NoUnderlyingProvisions) GetUnderlyingProvisionOptionExerciseStyle() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionOptionExerciseStyleField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProvisionOptionExerciseMultipleNotional gets UnderlyingProvisionOptionExerciseMultipleNotional, Tag 42160.
func (m NoUnderlyingProvisions) GetUnderlyingProvisionOptionExerciseMultipleNotional() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionOptionExerciseMultipleNotionalField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProvisionOptionExerciseMinimumNotional gets UnderlyingProvisionOptionExerciseMinimumNotional, Tag 42161.
func (m NoUnderlyingProvisions) GetUnderlyingProvisionOptionExerciseMinimumNotional() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionOptionExerciseMinimumNotionalField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProvisionOptionExerciseMaximumNotional gets UnderlyingProvisionOptionExerciseMaximumNotional, Tag 42162.
func (m NoUnderlyingProvisions) GetUnderlyingProvisionOptionExerciseMaximumNotional() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionOptionExerciseMaximumNotionalField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProvisionOptionMinimumNumber gets UnderlyingProvisionOptionMinimumNumber, Tag 42163.
func (m NoUnderlyingProvisions) GetUnderlyingProvisionOptionMinimumNumber() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionOptionMinimumNumberField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProvisionOptionMaximumNumber gets UnderlyingProvisionOptionMaximumNumber, Tag 42164.
func (m NoUnderlyingProvisions) GetUnderlyingProvisionOptionMaximumNumber() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionOptionMaximumNumberField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProvisionOptionExerciseConfirmation gets UnderlyingProvisionOptionExerciseConfirmation, Tag 42165.
func (m NoUnderlyingProvisions) GetUnderlyingProvisionOptionExerciseConfirmation() (v bool, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionOptionExerciseConfirmationField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProvisionCashSettlPaymentDateBusinessDayConvention gets UnderlyingProvisionCashSettlPaymentDateBusinessDayConvention, Tag 42092.
func (m NoUnderlyingProvisions) GetUnderlyingProvisionCashSettlPaymentDateBusinessDayConvention() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionCashSettlPaymentDateBusinessDayConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUnderlyingProvisionCashSettlPaymentDateBusinessCenters gets NoUnderlyingProvisionCashSettlPaymentDateBusinessCenters, Tag 42180.
func (m NoUnderlyingProvisions) GetNoUnderlyingProvisionCashSettlPaymentDateBusinessCenters() (NoUnderlyingProvisionCashSettlPaymentDateBusinessCentersRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingProvisionCashSettlPaymentDateBusinessCentersRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetUnderlyingProvisionCashSettlPaymentDateRelativeTo gets UnderlyingProvisionCashSettlPaymentDateRelativeTo, Tag 42093.
func (m NoUnderlyingProvisions) GetUnderlyingProvisionCashSettlPaymentDateRelativeTo() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionCashSettlPaymentDateRelativeToField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProvisionCashSettlPaymentDateOffsetPeriod gets UnderlyingProvisionCashSettlPaymentDateOffsetPeriod, Tag 42094.
func (m NoUnderlyingProvisions) GetUnderlyingProvisionCashSettlPaymentDateOffsetPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionCashSettlPaymentDateOffsetPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProvisionCashSettlPaymentDateOffsetUnit gets UnderlyingProvisionCashSettlPaymentDateOffsetUnit, Tag 42095.
func (m NoUnderlyingProvisions) GetUnderlyingProvisionCashSettlPaymentDateOffsetUnit() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionCashSettlPaymentDateOffsetUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProvisionCashSettlPaymentDateOffsetDayType gets UnderlyingProvisionCashSettlPaymentDateOffsetDayType, Tag 42096.
func (m NoUnderlyingProvisions) GetUnderlyingProvisionCashSettlPaymentDateOffsetDayType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionCashSettlPaymentDateOffsetDayTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProvisionCashSettlPaymentDateRangeFirst gets UnderlyingProvisionCashSettlPaymentDateRangeFirst, Tag 42097.
func (m NoUnderlyingProvisions) GetUnderlyingProvisionCashSettlPaymentDateRangeFirst() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionCashSettlPaymentDateRangeFirstField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProvisionCashSettlPaymentDateRangeLast gets UnderlyingProvisionCashSettlPaymentDateRangeLast, Tag 42098.
func (m NoUnderlyingProvisions) GetUnderlyingProvisionCashSettlPaymentDateRangeLast() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionCashSettlPaymentDateRangeLastField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUnderlyingProvisionCashSettlPaymentDates gets NoUnderlyingProvisionCashSettlPaymentDates, Tag 42099.
func (m NoUnderlyingProvisions) GetNoUnderlyingProvisionCashSettlPaymentDates() (NoUnderlyingProvisionCashSettlPaymentDatesRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingProvisionCashSettlPaymentDatesRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetUnderlyingProvisionCashSettlMethod gets UnderlyingProvisionCashSettlMethod, Tag 42166.
func (m NoUnderlyingProvisions) GetUnderlyingProvisionCashSettlMethod() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionCashSettlMethodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProvisionCashSettlCurrency gets UnderlyingProvisionCashSettlCurrency, Tag 42167.
func (m NoUnderlyingProvisions) GetUnderlyingProvisionCashSettlCurrency() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionCashSettlCurrencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProvisionCashSettlCurrency2 gets UnderlyingProvisionCashSettlCurrency2, Tag 42168.
func (m NoUnderlyingProvisions) GetUnderlyingProvisionCashSettlCurrency2() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionCashSettlCurrency2Field
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProvisionCashSettlQuoteType gets UnderlyingProvisionCashSettlQuoteType, Tag 42169.
func (m NoUnderlyingProvisions) GetUnderlyingProvisionCashSettlQuoteType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionCashSettlQuoteTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProvisionCashSettlQuoteSource gets UnderlyingProvisionCashSettlQuoteSource, Tag 42102.
func (m NoUnderlyingProvisions) GetUnderlyingProvisionCashSettlQuoteSource() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionCashSettlQuoteSourceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProvisionCashSettlQuoteReferencePage gets UnderlyingProvisionCashSettlQuoteReferencePage, Tag 42103.
func (m NoUnderlyingProvisions) GetUnderlyingProvisionCashSettlQuoteReferencePage() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionCashSettlQuoteReferencePageField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProvisionText gets UnderlyingProvisionText, Tag 42170.
func (m NoUnderlyingProvisions) GetUnderlyingProvisionText() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionTextField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetEncodedUnderlyingProvisionTextLen gets EncodedUnderlyingProvisionTextLen, Tag 42171.
func (m NoUnderlyingProvisions) GetEncodedUnderlyingProvisionTextLen() (v int, err quickfix.MessageRejectError) {
	var f field.EncodedUnderlyingProvisionTextLenField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetEncodedUnderlyingProvisionText gets EncodedUnderlyingProvisionText, Tag 42172.
func (m NoUnderlyingProvisions) GetEncodedUnderlyingProvisionText() (v string, err quickfix.MessageRejectError) {
	var f field.EncodedUnderlyingProvisionTextField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUnderlyingProvisionPartyIDs gets NoUnderlyingProvisionPartyIDs, Tag 42173.
func (m NoUnderlyingProvisions) GetNoUnderlyingProvisionPartyIDs() (NoUnderlyingProvisionPartyIDsRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingProvisionPartyIDsRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetUnderlyingProvisionBreakFeeElection gets UnderlyingProvisionBreakFeeElection, Tag 43002.
func (m NoUnderlyingProvisions) GetUnderlyingProvisionBreakFeeElection() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionBreakFeeElectionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProvisionBreakFeeRate gets UnderlyingProvisionBreakFeeRate, Tag 43003.
func (m NoUnderlyingProvisions) GetUnderlyingProvisionBreakFeeRate() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionBreakFeeRateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingProvisionType returns true if UnderlyingProvisionType is present, Tag 42150.
func (m NoUnderlyingProvisions) HasUnderlyingProvisionType() bool {
	return m.Has(tag.UnderlyingProvisionType)
}

// HasUnderlyingProvisionDateUnadjusted returns true if UnderlyingProvisionDateUnadjusted is present, Tag 42151.
func (m NoUnderlyingProvisions) HasUnderlyingProvisionDateUnadjusted() bool {
	return m.Has(tag.UnderlyingProvisionDateUnadjusted)
}

// HasUnderlyingProvisionDateBusinessDayConvention returns true if UnderlyingProvisionDateBusinessDayConvention is present, Tag 42152.
func (m NoUnderlyingProvisions) HasUnderlyingProvisionDateBusinessDayConvention() bool {
	return m.Has(tag.UnderlyingProvisionDateBusinessDayConvention)
}

// HasNoUnderlyingProvisionDateBusinessCenters returns true if NoUnderlyingProvisionDateBusinessCenters is present, Tag 42190.
func (m NoUnderlyingProvisions) HasNoUnderlyingProvisionDateBusinessCenters() bool {
	return m.Has(tag.NoUnderlyingProvisionDateBusinessCenters)
}

// HasUnderlyingProvisionDateAdjusted returns true if UnderlyingProvisionDateAdjusted is present, Tag 42153.
func (m NoUnderlyingProvisions) HasUnderlyingProvisionDateAdjusted() bool {
	return m.Has(tag.UnderlyingProvisionDateAdjusted)
}

// HasUnderlyingProvisionDateTenorPeriod returns true if UnderlyingProvisionDateTenorPeriod is present, Tag 42154.
func (m NoUnderlyingProvisions) HasUnderlyingProvisionDateTenorPeriod() bool {
	return m.Has(tag.UnderlyingProvisionDateTenorPeriod)
}

// HasUnderlyingProvisionDateTenorUnit returns true if UnderlyingProvisionDateTenorUnit is present, Tag 42155.
func (m NoUnderlyingProvisions) HasUnderlyingProvisionDateTenorUnit() bool {
	return m.Has(tag.UnderlyingProvisionDateTenorUnit)
}

// HasUnderlyingProvisionCalculationAgent returns true if UnderlyingProvisionCalculationAgent is present, Tag 42156.
func (m NoUnderlyingProvisions) HasUnderlyingProvisionCalculationAgent() bool {
	return m.Has(tag.UnderlyingProvisionCalculationAgent)
}

// HasUnderlyingProvisionOptionSinglePartyBuyerSide returns true if UnderlyingProvisionOptionSinglePartyBuyerSide is present, Tag 42157.
func (m NoUnderlyingProvisions) HasUnderlyingProvisionOptionSinglePartyBuyerSide() bool {
	return m.Has(tag.UnderlyingProvisionOptionSinglePartyBuyerSide)
}

// HasUnderlyingProvisionOptionSinglePartySellerSide returns true if UnderlyingProvisionOptionSinglePartySellerSide is present, Tag 42158.
func (m NoUnderlyingProvisions) HasUnderlyingProvisionOptionSinglePartySellerSide() bool {
	return m.Has(tag.UnderlyingProvisionOptionSinglePartySellerSide)
}

// HasUnderlyingProvisionCashSettlValueTime returns true if UnderlyingProvisionCashSettlValueTime is present, Tag 42104.
func (m NoUnderlyingProvisions) HasUnderlyingProvisionCashSettlValueTime() bool {
	return m.Has(tag.UnderlyingProvisionCashSettlValueTime)
}

// HasUnderlyingProvisionCashSettlValueTimeBusinessCenter returns true if UnderlyingProvisionCashSettlValueTimeBusinessCenter is present, Tag 42105.
func (m NoUnderlyingProvisions) HasUnderlyingProvisionCashSettlValueTimeBusinessCenter() bool {
	return m.Has(tag.UnderlyingProvisionCashSettlValueTimeBusinessCenter)
}

// HasUnderlyingProvisionCashSettlValueDateBusinessDayConvention returns true if UnderlyingProvisionCashSettlValueDateBusinessDayConvention is present, Tag 42106.
func (m NoUnderlyingProvisions) HasUnderlyingProvisionCashSettlValueDateBusinessDayConvention() bool {
	return m.Has(tag.UnderlyingProvisionCashSettlValueDateBusinessDayConvention)
}

// HasNoUnderlyingProvisionCashSettlValueDateBusinessCenters returns true if NoUnderlyingProvisionCashSettlValueDateBusinessCenters is present, Tag 42182.
func (m NoUnderlyingProvisions) HasNoUnderlyingProvisionCashSettlValueDateBusinessCenters() bool {
	return m.Has(tag.NoUnderlyingProvisionCashSettlValueDateBusinessCenters)
}

// HasUnderlyingProvisionCashSettlValueDateRelativeTo returns true if UnderlyingProvisionCashSettlValueDateRelativeTo is present, Tag 42107.
func (m NoUnderlyingProvisions) HasUnderlyingProvisionCashSettlValueDateRelativeTo() bool {
	return m.Has(tag.UnderlyingProvisionCashSettlValueDateRelativeTo)
}

// HasUnderlyingProvisionCashSettlValueDateOffsetPeriod returns true if UnderlyingProvisionCashSettlValueDateOffsetPeriod is present, Tag 42108.
func (m NoUnderlyingProvisions) HasUnderlyingProvisionCashSettlValueDateOffsetPeriod() bool {
	return m.Has(tag.UnderlyingProvisionCashSettlValueDateOffsetPeriod)
}

// HasUnderlyingProvisionCashSettlValueDateOffsetUnit returns true if UnderlyingProvisionCashSettlValueDateOffsetUnit is present, Tag 42109.
func (m NoUnderlyingProvisions) HasUnderlyingProvisionCashSettlValueDateOffsetUnit() bool {
	return m.Has(tag.UnderlyingProvisionCashSettlValueDateOffsetUnit)
}

// HasUnderlyingProvisionCashSettlValueDateOffsetDayType returns true if UnderlyingProvisionCashSettlValueDateOffsetDayType is present, Tag 42110.
func (m NoUnderlyingProvisions) HasUnderlyingProvisionCashSettlValueDateOffsetDayType() bool {
	return m.Has(tag.UnderlyingProvisionCashSettlValueDateOffsetDayType)
}

// HasUnderlyingProvisionCashSettlValueDateAdjusted returns true if UnderlyingProvisionCashSettlValueDateAdjusted is present, Tag 42111.
func (m NoUnderlyingProvisions) HasUnderlyingProvisionCashSettlValueDateAdjusted() bool {
	return m.Has(tag.UnderlyingProvisionCashSettlValueDateAdjusted)
}

// HasUnderlyingProvisionOptionExerciseBusinessDayConvention returns true if UnderlyingProvisionOptionExerciseBusinessDayConvention is present, Tag 42115.
func (m NoUnderlyingProvisions) HasUnderlyingProvisionOptionExerciseBusinessDayConvention() bool {
	return m.Has(tag.UnderlyingProvisionOptionExerciseBusinessDayConvention)
}

// HasNoUnderlyingProvisionOptionExerciseBusinessCenters returns true if NoUnderlyingProvisionOptionExerciseBusinessCenters is present, Tag 42184.
func (m NoUnderlyingProvisions) HasNoUnderlyingProvisionOptionExerciseBusinessCenters() bool {
	return m.Has(tag.NoUnderlyingProvisionOptionExerciseBusinessCenters)
}

// HasNoUnderlyingProvisionOptionExerciseFixedDates returns true if NoUnderlyingProvisionOptionExerciseFixedDates is present, Tag 42112.
func (m NoUnderlyingProvisions) HasNoUnderlyingProvisionOptionExerciseFixedDates() bool {
	return m.Has(tag.NoUnderlyingProvisionOptionExerciseFixedDates)
}

// HasUnderlyingProvisionOptionExerciseEarliestDateOffsetPeriod returns true if UnderlyingProvisionOptionExerciseEarliestDateOffsetPeriod is present, Tag 42116.
func (m NoUnderlyingProvisions) HasUnderlyingProvisionOptionExerciseEarliestDateOffsetPeriod() bool {
	return m.Has(tag.UnderlyingProvisionOptionExerciseEarliestDateOffsetPeriod)
}

// HasUnderlyingProvisionOptionExerciseEarliestDateOffsetUnit returns true if UnderlyingProvisionOptionExerciseEarliestDateOffsetUnit is present, Tag 42117.
func (m NoUnderlyingProvisions) HasUnderlyingProvisionOptionExerciseEarliestDateOffsetUnit() bool {
	return m.Has(tag.UnderlyingProvisionOptionExerciseEarliestDateOffsetUnit)
}

// HasUnderlyingProvisionOptionExerciseFrequencyPeriod returns true if UnderlyingProvisionOptionExerciseFrequencyPeriod is present, Tag 42118.
func (m NoUnderlyingProvisions) HasUnderlyingProvisionOptionExerciseFrequencyPeriod() bool {
	return m.Has(tag.UnderlyingProvisionOptionExerciseFrequencyPeriod)
}

// HasUnderlyingProvisionOptionExerciseFrequencyUnit returns true if UnderlyingProvisionOptionExerciseFrequencyUnit is present, Tag 42119.
func (m NoUnderlyingProvisions) HasUnderlyingProvisionOptionExerciseFrequencyUnit() bool {
	return m.Has(tag.UnderlyingProvisionOptionExerciseFrequencyUnit)
}

// HasUnderlyingProvisionOptionExerciseStartDateUnadjusted returns true if UnderlyingProvisionOptionExerciseStartDateUnadjusted is present, Tag 42120.
func (m NoUnderlyingProvisions) HasUnderlyingProvisionOptionExerciseStartDateUnadjusted() bool {
	return m.Has(tag.UnderlyingProvisionOptionExerciseStartDateUnadjusted)
}

// HasUnderlyingProvisionOptionExerciseStartDateRelativeTo returns true if UnderlyingProvisionOptionExerciseStartDateRelativeTo is present, Tag 42121.
func (m NoUnderlyingProvisions) HasUnderlyingProvisionOptionExerciseStartDateRelativeTo() bool {
	return m.Has(tag.UnderlyingProvisionOptionExerciseStartDateRelativeTo)
}

// HasUnderlyingProvisionOptionExerciseStartDateOffsetPeriod returns true if UnderlyingProvisionOptionExerciseStartDateOffsetPeriod is present, Tag 42122.
func (m NoUnderlyingProvisions) HasUnderlyingProvisionOptionExerciseStartDateOffsetPeriod() bool {
	return m.Has(tag.UnderlyingProvisionOptionExerciseStartDateOffsetPeriod)
}

// HasUnderlyingProvisionOptionExerciseStartDateOffsetUnit returns true if UnderlyingProvisionOptionExerciseStartDateOffsetUnit is present, Tag 42123.
func (m NoUnderlyingProvisions) HasUnderlyingProvisionOptionExerciseStartDateOffsetUnit() bool {
	return m.Has(tag.UnderlyingProvisionOptionExerciseStartDateOffsetUnit)
}

// HasUnderlyingProvisionOptionExerciseStartDateOffsetDayType returns true if UnderlyingProvisionOptionExerciseStartDateOffsetDayType is present, Tag 42124.
func (m NoUnderlyingProvisions) HasUnderlyingProvisionOptionExerciseStartDateOffsetDayType() bool {
	return m.Has(tag.UnderlyingProvisionOptionExerciseStartDateOffsetDayType)
}

// HasUnderlyingProvisionOptionExerciseStartDateAdjusted returns true if UnderlyingProvisionOptionExerciseStartDateAdjusted is present, Tag 42125.
func (m NoUnderlyingProvisions) HasUnderlyingProvisionOptionExerciseStartDateAdjusted() bool {
	return m.Has(tag.UnderlyingProvisionOptionExerciseStartDateAdjusted)
}

// HasUnderlyingProvisionOptionExercisePeriodSkip returns true if UnderlyingProvisionOptionExercisePeriodSkip is present, Tag 42126.
func (m NoUnderlyingProvisions) HasUnderlyingProvisionOptionExercisePeriodSkip() bool {
	return m.Has(tag.UnderlyingProvisionOptionExercisePeriodSkip)
}

// HasUnderlyingProvisionOptionExerciseBoundsFirstDateUnadjusted returns true if UnderlyingProvisionOptionExerciseBoundsFirstDateUnadjusted is present, Tag 42127.
func (m NoUnderlyingProvisions) HasUnderlyingProvisionOptionExerciseBoundsFirstDateUnadjusted() bool {
	return m.Has(tag.UnderlyingProvisionOptionExerciseBoundsFirstDateUnadjusted)
}

// HasUnderlyingProvisionOptionExerciseBoundsLastDateUnadjusted returns true if UnderlyingProvisionOptionExerciseBoundsLastDateUnadjusted is present, Tag 42128.
func (m NoUnderlyingProvisions) HasUnderlyingProvisionOptionExerciseBoundsLastDateUnadjusted() bool {
	return m.Has(tag.UnderlyingProvisionOptionExerciseBoundsLastDateUnadjusted)
}

// HasUnderlyingProvisionOptionExerciseEarliestTime returns true if UnderlyingProvisionOptionExerciseEarliestTime is present, Tag 42129.
func (m NoUnderlyingProvisions) HasUnderlyingProvisionOptionExerciseEarliestTime() bool {
	return m.Has(tag.UnderlyingProvisionOptionExerciseEarliestTime)
}

// HasUnderlyingProvisionOptionExerciseEarliestTimeBusinessCenter returns true if UnderlyingProvisionOptionExerciseEarliestTimeBusinessCenter is present, Tag 42130.
func (m NoUnderlyingProvisions) HasUnderlyingProvisionOptionExerciseEarliestTimeBusinessCenter() bool {
	return m.Has(tag.UnderlyingProvisionOptionExerciseEarliestTimeBusinessCenter)
}

// HasUnderlyingProvisionOptionExerciseLatestTime returns true if UnderlyingProvisionOptionExerciseLatestTime is present, Tag 42131.
func (m NoUnderlyingProvisions) HasUnderlyingProvisionOptionExerciseLatestTime() bool {
	return m.Has(tag.UnderlyingProvisionOptionExerciseLatestTime)
}

// HasUnderlyingProvisionOptionExerciseLatestTimeBusinessCenter returns true if UnderlyingProvisionOptionExerciseLatestTimeBusinessCenter is present, Tag 42132.
func (m NoUnderlyingProvisions) HasUnderlyingProvisionOptionExerciseLatestTimeBusinessCenter() bool {
	return m.Has(tag.UnderlyingProvisionOptionExerciseLatestTimeBusinessCenter)
}

// HasUnderlyingProvisionOptionExpirationDateUnadjusted returns true if UnderlyingProvisionOptionExpirationDateUnadjusted is present, Tag 42133.
func (m NoUnderlyingProvisions) HasUnderlyingProvisionOptionExpirationDateUnadjusted() bool {
	return m.Has(tag.UnderlyingProvisionOptionExpirationDateUnadjusted)
}

// HasUnderlyingProvisionOptionExpirationDateBusinessDayConvention returns true if UnderlyingProvisionOptionExpirationDateBusinessDayConvention is present, Tag 42134.
func (m NoUnderlyingProvisions) HasUnderlyingProvisionOptionExpirationDateBusinessDayConvention() bool {
	return m.Has(tag.UnderlyingProvisionOptionExpirationDateBusinessDayConvention)
}

// HasNoUnderlyingProvisionOptionExpirationDateBusinessCenters returns true if NoUnderlyingProvisionOptionExpirationDateBusinessCenters is present, Tag 42186.
func (m NoUnderlyingProvisions) HasNoUnderlyingProvisionOptionExpirationDateBusinessCenters() bool {
	return m.Has(tag.NoUnderlyingProvisionOptionExpirationDateBusinessCenters)
}

// HasUnderlyingProvisionOptionExpirationDateRelativeTo returns true if UnderlyingProvisionOptionExpirationDateRelativeTo is present, Tag 42135.
func (m NoUnderlyingProvisions) HasUnderlyingProvisionOptionExpirationDateRelativeTo() bool {
	return m.Has(tag.UnderlyingProvisionOptionExpirationDateRelativeTo)
}

// HasUnderlyingProvisionOptionExpirationDateOffsetPeriod returns true if UnderlyingProvisionOptionExpirationDateOffsetPeriod is present, Tag 42136.
func (m NoUnderlyingProvisions) HasUnderlyingProvisionOptionExpirationDateOffsetPeriod() bool {
	return m.Has(tag.UnderlyingProvisionOptionExpirationDateOffsetPeriod)
}

// HasUnderlyingProvisionOptionExpirationDateOffsetUnit returns true if UnderlyingProvisionOptionExpirationDateOffsetUnit is present, Tag 42137.
func (m NoUnderlyingProvisions) HasUnderlyingProvisionOptionExpirationDateOffsetUnit() bool {
	return m.Has(tag.UnderlyingProvisionOptionExpirationDateOffsetUnit)
}

// HasUnderlyingProvisionOptionExpirationDateOffsetDayType returns true if UnderlyingProvisionOptionExpirationDateOffsetDayType is present, Tag 42138.
func (m NoUnderlyingProvisions) HasUnderlyingProvisionOptionExpirationDateOffsetDayType() bool {
	return m.Has(tag.UnderlyingProvisionOptionExpirationDateOffsetDayType)
}

// HasUnderlyingProvisionOptionExpirationDateAdjusted returns true if UnderlyingProvisionOptionExpirationDateAdjusted is present, Tag 42139.
func (m NoUnderlyingProvisions) HasUnderlyingProvisionOptionExpirationDateAdjusted() bool {
	return m.Has(tag.UnderlyingProvisionOptionExpirationDateAdjusted)
}

// HasUnderlyingProvisionOptionExpirationTime returns true if UnderlyingProvisionOptionExpirationTime is present, Tag 42140.
func (m NoUnderlyingProvisions) HasUnderlyingProvisionOptionExpirationTime() bool {
	return m.Has(tag.UnderlyingProvisionOptionExpirationTime)
}

// HasUnderlyingProvisionOptionExpirationTimeBusinessCenter returns true if UnderlyingProvisionOptionExpirationTimeBusinessCenter is present, Tag 42141.
func (m NoUnderlyingProvisions) HasUnderlyingProvisionOptionExpirationTimeBusinessCenter() bool {
	return m.Has(tag.UnderlyingProvisionOptionExpirationTimeBusinessCenter)
}

// HasUnderlyingProvisionOptionRelevantUnderlyingDateUnadjusted returns true if UnderlyingProvisionOptionRelevantUnderlyingDateUnadjusted is present, Tag 42142.
func (m NoUnderlyingProvisions) HasUnderlyingProvisionOptionRelevantUnderlyingDateUnadjusted() bool {
	return m.Has(tag.UnderlyingProvisionOptionRelevantUnderlyingDateUnadjusted)
}

// HasUnderlyingProvisionOptionRelevantUnderlyingDateBusinessDayConvention returns true if UnderlyingProvisionOptionRelevantUnderlyingDateBusinessDayConvention is present, Tag 42143.
func (m NoUnderlyingProvisions) HasUnderlyingProvisionOptionRelevantUnderlyingDateBusinessDayConvention() bool {
	return m.Has(tag.UnderlyingProvisionOptionRelevantUnderlyingDateBusinessDayConvention)
}

// HasNoUnderlyingProvisionOptionRelevantUnderlyingDateBusinessCenters returns true if NoUnderlyingProvisionOptionRelevantUnderlyingDateBusinessCenters is present, Tag 42188.
func (m NoUnderlyingProvisions) HasNoUnderlyingProvisionOptionRelevantUnderlyingDateBusinessCenters() bool {
	return m.Has(tag.NoUnderlyingProvisionOptionRelevantUnderlyingDateBusinessCenters)
}

// HasUnderlyingProvisionOptionRelevantUnderlyingDateRelativeTo returns true if UnderlyingProvisionOptionRelevantUnderlyingDateRelativeTo is present, Tag 42144.
func (m NoUnderlyingProvisions) HasUnderlyingProvisionOptionRelevantUnderlyingDateRelativeTo() bool {
	return m.Has(tag.UnderlyingProvisionOptionRelevantUnderlyingDateRelativeTo)
}

// HasUnderlyingProvisionOptionRelevantUnderlyingDateOffsetPeriod returns true if UnderlyingProvisionOptionRelevantUnderlyingDateOffsetPeriod is present, Tag 42145.
func (m NoUnderlyingProvisions) HasUnderlyingProvisionOptionRelevantUnderlyingDateOffsetPeriod() bool {
	return m.Has(tag.UnderlyingProvisionOptionRelevantUnderlyingDateOffsetPeriod)
}

// HasUnderlyingProvisionOptionRelevantUnderlyingDateOffsetUnit returns true if UnderlyingProvisionOptionRelevantUnderlyingDateOffsetUnit is present, Tag 42146.
func (m NoUnderlyingProvisions) HasUnderlyingProvisionOptionRelevantUnderlyingDateOffsetUnit() bool {
	return m.Has(tag.UnderlyingProvisionOptionRelevantUnderlyingDateOffsetUnit)
}

// HasUnderlyingProvisionOptionRelevantUnderlyingDateOffsetDayType returns true if UnderlyingProvisionOptionRelevantUnderlyingDateOffsetDayType is present, Tag 42147.
func (m NoUnderlyingProvisions) HasUnderlyingProvisionOptionRelevantUnderlyingDateOffsetDayType() bool {
	return m.Has(tag.UnderlyingProvisionOptionRelevantUnderlyingDateOffsetDayType)
}

// HasUnderlyingProvisionOptionRelevantUnderlyingDateAdjusted returns true if UnderlyingProvisionOptionRelevantUnderlyingDateAdjusted is present, Tag 42148.
func (m NoUnderlyingProvisions) HasUnderlyingProvisionOptionRelevantUnderlyingDateAdjusted() bool {
	return m.Has(tag.UnderlyingProvisionOptionRelevantUnderlyingDateAdjusted)
}

// HasUnderlyingProvisionOptionExerciseStyle returns true if UnderlyingProvisionOptionExerciseStyle is present, Tag 42159.
func (m NoUnderlyingProvisions) HasUnderlyingProvisionOptionExerciseStyle() bool {
	return m.Has(tag.UnderlyingProvisionOptionExerciseStyle)
}

// HasUnderlyingProvisionOptionExerciseMultipleNotional returns true if UnderlyingProvisionOptionExerciseMultipleNotional is present, Tag 42160.
func (m NoUnderlyingProvisions) HasUnderlyingProvisionOptionExerciseMultipleNotional() bool {
	return m.Has(tag.UnderlyingProvisionOptionExerciseMultipleNotional)
}

// HasUnderlyingProvisionOptionExerciseMinimumNotional returns true if UnderlyingProvisionOptionExerciseMinimumNotional is present, Tag 42161.
func (m NoUnderlyingProvisions) HasUnderlyingProvisionOptionExerciseMinimumNotional() bool {
	return m.Has(tag.UnderlyingProvisionOptionExerciseMinimumNotional)
}

// HasUnderlyingProvisionOptionExerciseMaximumNotional returns true if UnderlyingProvisionOptionExerciseMaximumNotional is present, Tag 42162.
func (m NoUnderlyingProvisions) HasUnderlyingProvisionOptionExerciseMaximumNotional() bool {
	return m.Has(tag.UnderlyingProvisionOptionExerciseMaximumNotional)
}

// HasUnderlyingProvisionOptionMinimumNumber returns true if UnderlyingProvisionOptionMinimumNumber is present, Tag 42163.
func (m NoUnderlyingProvisions) HasUnderlyingProvisionOptionMinimumNumber() bool {
	return m.Has(tag.UnderlyingProvisionOptionMinimumNumber)
}

// HasUnderlyingProvisionOptionMaximumNumber returns true if UnderlyingProvisionOptionMaximumNumber is present, Tag 42164.
func (m NoUnderlyingProvisions) HasUnderlyingProvisionOptionMaximumNumber() bool {
	return m.Has(tag.UnderlyingProvisionOptionMaximumNumber)
}

// HasUnderlyingProvisionOptionExerciseConfirmation returns true if UnderlyingProvisionOptionExerciseConfirmation is present, Tag 42165.
func (m NoUnderlyingProvisions) HasUnderlyingProvisionOptionExerciseConfirmation() bool {
	return m.Has(tag.UnderlyingProvisionOptionExerciseConfirmation)
}

// HasUnderlyingProvisionCashSettlPaymentDateBusinessDayConvention returns true if UnderlyingProvisionCashSettlPaymentDateBusinessDayConvention is present, Tag 42092.
func (m NoUnderlyingProvisions) HasUnderlyingProvisionCashSettlPaymentDateBusinessDayConvention() bool {
	return m.Has(tag.UnderlyingProvisionCashSettlPaymentDateBusinessDayConvention)
}

// HasNoUnderlyingProvisionCashSettlPaymentDateBusinessCenters returns true if NoUnderlyingProvisionCashSettlPaymentDateBusinessCenters is present, Tag 42180.
func (m NoUnderlyingProvisions) HasNoUnderlyingProvisionCashSettlPaymentDateBusinessCenters() bool {
	return m.Has(tag.NoUnderlyingProvisionCashSettlPaymentDateBusinessCenters)
}

// HasUnderlyingProvisionCashSettlPaymentDateRelativeTo returns true if UnderlyingProvisionCashSettlPaymentDateRelativeTo is present, Tag 42093.
func (m NoUnderlyingProvisions) HasUnderlyingProvisionCashSettlPaymentDateRelativeTo() bool {
	return m.Has(tag.UnderlyingProvisionCashSettlPaymentDateRelativeTo)
}

// HasUnderlyingProvisionCashSettlPaymentDateOffsetPeriod returns true if UnderlyingProvisionCashSettlPaymentDateOffsetPeriod is present, Tag 42094.
func (m NoUnderlyingProvisions) HasUnderlyingProvisionCashSettlPaymentDateOffsetPeriod() bool {
	return m.Has(tag.UnderlyingProvisionCashSettlPaymentDateOffsetPeriod)
}

// HasUnderlyingProvisionCashSettlPaymentDateOffsetUnit returns true if UnderlyingProvisionCashSettlPaymentDateOffsetUnit is present, Tag 42095.
func (m NoUnderlyingProvisions) HasUnderlyingProvisionCashSettlPaymentDateOffsetUnit() bool {
	return m.Has(tag.UnderlyingProvisionCashSettlPaymentDateOffsetUnit)
}

// HasUnderlyingProvisionCashSettlPaymentDateOffsetDayType returns true if UnderlyingProvisionCashSettlPaymentDateOffsetDayType is present, Tag 42096.
func (m NoUnderlyingProvisions) HasUnderlyingProvisionCashSettlPaymentDateOffsetDayType() bool {
	return m.Has(tag.UnderlyingProvisionCashSettlPaymentDateOffsetDayType)
}

// HasUnderlyingProvisionCashSettlPaymentDateRangeFirst returns true if UnderlyingProvisionCashSettlPaymentDateRangeFirst is present, Tag 42097.
func (m NoUnderlyingProvisions) HasUnderlyingProvisionCashSettlPaymentDateRangeFirst() bool {
	return m.Has(tag.UnderlyingProvisionCashSettlPaymentDateRangeFirst)
}

// HasUnderlyingProvisionCashSettlPaymentDateRangeLast returns true if UnderlyingProvisionCashSettlPaymentDateRangeLast is present, Tag 42098.
func (m NoUnderlyingProvisions) HasUnderlyingProvisionCashSettlPaymentDateRangeLast() bool {
	return m.Has(tag.UnderlyingProvisionCashSettlPaymentDateRangeLast)
}

// HasNoUnderlyingProvisionCashSettlPaymentDates returns true if NoUnderlyingProvisionCashSettlPaymentDates is present, Tag 42099.
func (m NoUnderlyingProvisions) HasNoUnderlyingProvisionCashSettlPaymentDates() bool {
	return m.Has(tag.NoUnderlyingProvisionCashSettlPaymentDates)
}

// HasUnderlyingProvisionCashSettlMethod returns true if UnderlyingProvisionCashSettlMethod is present, Tag 42166.
func (m NoUnderlyingProvisions) HasUnderlyingProvisionCashSettlMethod() bool {
	return m.Has(tag.UnderlyingProvisionCashSettlMethod)
}

// HasUnderlyingProvisionCashSettlCurrency returns true if UnderlyingProvisionCashSettlCurrency is present, Tag 42167.
func (m NoUnderlyingProvisions) HasUnderlyingProvisionCashSettlCurrency() bool {
	return m.Has(tag.UnderlyingProvisionCashSettlCurrency)
}

// HasUnderlyingProvisionCashSettlCurrency2 returns true if UnderlyingProvisionCashSettlCurrency2 is present, Tag 42168.
func (m NoUnderlyingProvisions) HasUnderlyingProvisionCashSettlCurrency2() bool {
	return m.Has(tag.UnderlyingProvisionCashSettlCurrency2)
}

// HasUnderlyingProvisionCashSettlQuoteType returns true if UnderlyingProvisionCashSettlQuoteType is present, Tag 42169.
func (m NoUnderlyingProvisions) HasUnderlyingProvisionCashSettlQuoteType() bool {
	return m.Has(tag.UnderlyingProvisionCashSettlQuoteType)
}

// HasUnderlyingProvisionCashSettlQuoteSource returns true if UnderlyingProvisionCashSettlQuoteSource is present, Tag 42102.
func (m NoUnderlyingProvisions) HasUnderlyingProvisionCashSettlQuoteSource() bool {
	return m.Has(tag.UnderlyingProvisionCashSettlQuoteSource)
}

// HasUnderlyingProvisionCashSettlQuoteReferencePage returns true if UnderlyingProvisionCashSettlQuoteReferencePage is present, Tag 42103.
func (m NoUnderlyingProvisions) HasUnderlyingProvisionCashSettlQuoteReferencePage() bool {
	return m.Has(tag.UnderlyingProvisionCashSettlQuoteReferencePage)
}

// HasUnderlyingProvisionText returns true if UnderlyingProvisionText is present, Tag 42170.
func (m NoUnderlyingProvisions) HasUnderlyingProvisionText() bool {
	return m.Has(tag.UnderlyingProvisionText)
}

// HasEncodedUnderlyingProvisionTextLen returns true if EncodedUnderlyingProvisionTextLen is present, Tag 42171.
func (m NoUnderlyingProvisions) HasEncodedUnderlyingProvisionTextLen() bool {
	return m.Has(tag.EncodedUnderlyingProvisionTextLen)
}

// HasEncodedUnderlyingProvisionText returns true if EncodedUnderlyingProvisionText is present, Tag 42172.
func (m NoUnderlyingProvisions) HasEncodedUnderlyingProvisionText() bool {
	return m.Has(tag.EncodedUnderlyingProvisionText)
}

// HasNoUnderlyingProvisionPartyIDs returns true if NoUnderlyingProvisionPartyIDs is present, Tag 42173.
func (m NoUnderlyingProvisions) HasNoUnderlyingProvisionPartyIDs() bool {
	return m.Has(tag.NoUnderlyingProvisionPartyIDs)
}

// HasUnderlyingProvisionBreakFeeElection returns true if UnderlyingProvisionBreakFeeElection is present, Tag 43002.
func (m NoUnderlyingProvisions) HasUnderlyingProvisionBreakFeeElection() bool {
	return m.Has(tag.UnderlyingProvisionBreakFeeElection)
}

// HasUnderlyingProvisionBreakFeeRate returns true if UnderlyingProvisionBreakFeeRate is present, Tag 43003.
func (m NoUnderlyingProvisions) HasUnderlyingProvisionBreakFeeRate() bool {
	return m.Has(tag.UnderlyingProvisionBreakFeeRate)
}

// NoUnderlyingProvisionDateBusinessCenters is a repeating group element, Tag 42190.
type NoUnderlyingProvisionDateBusinessCenters struct {
	*quickfix.Group
}

// SetUnderlyingProvisionDateBusinessCenter sets UnderlyingProvisionDateBusinessCenter, Tag 42191.
func (m NoUnderlyingProvisionDateBusinessCenters) SetUnderlyingProvisionDateBusinessCenter(v string) {
	m.Set(field.NewUnderlyingProvisionDateBusinessCenter(v))
}

// GetUnderlyingProvisionDateBusinessCenter gets UnderlyingProvisionDateBusinessCenter, Tag 42191.
func (m NoUnderlyingProvisionDateBusinessCenters) GetUnderlyingProvisionDateBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionDateBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingProvisionDateBusinessCenter returns true if UnderlyingProvisionDateBusinessCenter is present, Tag 42191.
func (m NoUnderlyingProvisionDateBusinessCenters) HasUnderlyingProvisionDateBusinessCenter() bool {
	return m.Has(tag.UnderlyingProvisionDateBusinessCenter)
}

// NoUnderlyingProvisionDateBusinessCentersRepeatingGroup is a repeating group, Tag 42190.
type NoUnderlyingProvisionDateBusinessCentersRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingProvisionDateBusinessCentersRepeatingGroup returns an initialized, NoUnderlyingProvisionDateBusinessCentersRepeatingGroup.
func NewNoUnderlyingProvisionDateBusinessCentersRepeatingGroup() NoUnderlyingProvisionDateBusinessCentersRepeatingGroup {
	return NoUnderlyingProvisionDateBusinessCentersRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingProvisionDateBusinessCenters,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingProvisionDateBusinessCenter),
			},
		),
	}
}

// Add create and append a new NoUnderlyingProvisionDateBusinessCenters to this group.
func (m NoUnderlyingProvisionDateBusinessCentersRepeatingGroup) Add() NoUnderlyingProvisionDateBusinessCenters {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingProvisionDateBusinessCenters{g}
}

// Get returns the ith NoUnderlyingProvisionDateBusinessCenters in the NoUnderlyingProvisionDateBusinessCentersRepeatinGroup.
func (m NoUnderlyingProvisionDateBusinessCentersRepeatingGroup) Get(i int) NoUnderlyingProvisionDateBusinessCenters {
	return NoUnderlyingProvisionDateBusinessCenters{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingProvisionCashSettlValueDateBusinessCenters is a repeating group element, Tag 42182.
type NoUnderlyingProvisionCashSettlValueDateBusinessCenters struct {
	*quickfix.Group
}

// SetUnderlyingProvisionCashSettlValueDateBusinessCenter sets UnderlyingProvisionCashSettlValueDateBusinessCenter, Tag 42183.
func (m NoUnderlyingProvisionCashSettlValueDateBusinessCenters) SetUnderlyingProvisionCashSettlValueDateBusinessCenter(v string) {
	m.Set(field.NewUnderlyingProvisionCashSettlValueDateBusinessCenter(v))
}

// GetUnderlyingProvisionCashSettlValueDateBusinessCenter gets UnderlyingProvisionCashSettlValueDateBusinessCenter, Tag 42183.
func (m NoUnderlyingProvisionCashSettlValueDateBusinessCenters) GetUnderlyingProvisionCashSettlValueDateBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionCashSettlValueDateBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingProvisionCashSettlValueDateBusinessCenter returns true if UnderlyingProvisionCashSettlValueDateBusinessCenter is present, Tag 42183.
func (m NoUnderlyingProvisionCashSettlValueDateBusinessCenters) HasUnderlyingProvisionCashSettlValueDateBusinessCenter() bool {
	return m.Has(tag.UnderlyingProvisionCashSettlValueDateBusinessCenter)
}

// NoUnderlyingProvisionCashSettlValueDateBusinessCentersRepeatingGroup is a repeating group, Tag 42182.
type NoUnderlyingProvisionCashSettlValueDateBusinessCentersRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingProvisionCashSettlValueDateBusinessCentersRepeatingGroup returns an initialized, NoUnderlyingProvisionCashSettlValueDateBusinessCentersRepeatingGroup.
func NewNoUnderlyingProvisionCashSettlValueDateBusinessCentersRepeatingGroup() NoUnderlyingProvisionCashSettlValueDateBusinessCentersRepeatingGroup {
	return NoUnderlyingProvisionCashSettlValueDateBusinessCentersRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingProvisionCashSettlValueDateBusinessCenters,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingProvisionCashSettlValueDateBusinessCenter),
			},
		),
	}
}

// Add create and append a new NoUnderlyingProvisionCashSettlValueDateBusinessCenters to this group.
func (m NoUnderlyingProvisionCashSettlValueDateBusinessCentersRepeatingGroup) Add() NoUnderlyingProvisionCashSettlValueDateBusinessCenters {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingProvisionCashSettlValueDateBusinessCenters{g}
}

// Get returns the ith NoUnderlyingProvisionCashSettlValueDateBusinessCenters in the NoUnderlyingProvisionCashSettlValueDateBusinessCentersRepeatinGroup.
func (m NoUnderlyingProvisionCashSettlValueDateBusinessCentersRepeatingGroup) Get(i int) NoUnderlyingProvisionCashSettlValueDateBusinessCenters {
	return NoUnderlyingProvisionCashSettlValueDateBusinessCenters{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingProvisionOptionExerciseBusinessCenters is a repeating group element, Tag 42184.
type NoUnderlyingProvisionOptionExerciseBusinessCenters struct {
	*quickfix.Group
}

// SetUnderlyingProvisionOptionExerciseBusinessCenter sets UnderlyingProvisionOptionExerciseBusinessCenter, Tag 42185.
func (m NoUnderlyingProvisionOptionExerciseBusinessCenters) SetUnderlyingProvisionOptionExerciseBusinessCenter(v string) {
	m.Set(field.NewUnderlyingProvisionOptionExerciseBusinessCenter(v))
}

// GetUnderlyingProvisionOptionExerciseBusinessCenter gets UnderlyingProvisionOptionExerciseBusinessCenter, Tag 42185.
func (m NoUnderlyingProvisionOptionExerciseBusinessCenters) GetUnderlyingProvisionOptionExerciseBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionOptionExerciseBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingProvisionOptionExerciseBusinessCenter returns true if UnderlyingProvisionOptionExerciseBusinessCenter is present, Tag 42185.
func (m NoUnderlyingProvisionOptionExerciseBusinessCenters) HasUnderlyingProvisionOptionExerciseBusinessCenter() bool {
	return m.Has(tag.UnderlyingProvisionOptionExerciseBusinessCenter)
}

// NoUnderlyingProvisionOptionExerciseBusinessCentersRepeatingGroup is a repeating group, Tag 42184.
type NoUnderlyingProvisionOptionExerciseBusinessCentersRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingProvisionOptionExerciseBusinessCentersRepeatingGroup returns an initialized, NoUnderlyingProvisionOptionExerciseBusinessCentersRepeatingGroup.
func NewNoUnderlyingProvisionOptionExerciseBusinessCentersRepeatingGroup() NoUnderlyingProvisionOptionExerciseBusinessCentersRepeatingGroup {
	return NoUnderlyingProvisionOptionExerciseBusinessCentersRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingProvisionOptionExerciseBusinessCenters,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingProvisionOptionExerciseBusinessCenter),
			},
		),
	}
}

// Add create and append a new NoUnderlyingProvisionOptionExerciseBusinessCenters to this group.
func (m NoUnderlyingProvisionOptionExerciseBusinessCentersRepeatingGroup) Add() NoUnderlyingProvisionOptionExerciseBusinessCenters {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingProvisionOptionExerciseBusinessCenters{g}
}

// Get returns the ith NoUnderlyingProvisionOptionExerciseBusinessCenters in the NoUnderlyingProvisionOptionExerciseBusinessCentersRepeatinGroup.
func (m NoUnderlyingProvisionOptionExerciseBusinessCentersRepeatingGroup) Get(i int) NoUnderlyingProvisionOptionExerciseBusinessCenters {
	return NoUnderlyingProvisionOptionExerciseBusinessCenters{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingProvisionOptionExerciseFixedDates is a repeating group element, Tag 42112.
type NoUnderlyingProvisionOptionExerciseFixedDates struct {
	*quickfix.Group
}

// SetUnderlyingProvisionOptionExerciseFixedDate sets UnderlyingProvisionOptionExerciseFixedDate, Tag 42113.
func (m NoUnderlyingProvisionOptionExerciseFixedDates) SetUnderlyingProvisionOptionExerciseFixedDate(v string) {
	m.Set(field.NewUnderlyingProvisionOptionExerciseFixedDate(v))
}

// SetUnderlyingProvisionOptionExerciseFixedDateType sets UnderlyingProvisionOptionExerciseFixedDateType, Tag 42114.
func (m NoUnderlyingProvisionOptionExerciseFixedDates) SetUnderlyingProvisionOptionExerciseFixedDateType(v int) {
	m.Set(field.NewUnderlyingProvisionOptionExerciseFixedDateType(v))
}

// GetUnderlyingProvisionOptionExerciseFixedDate gets UnderlyingProvisionOptionExerciseFixedDate, Tag 42113.
func (m NoUnderlyingProvisionOptionExerciseFixedDates) GetUnderlyingProvisionOptionExerciseFixedDate() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionOptionExerciseFixedDateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProvisionOptionExerciseFixedDateType gets UnderlyingProvisionOptionExerciseFixedDateType, Tag 42114.
func (m NoUnderlyingProvisionOptionExerciseFixedDates) GetUnderlyingProvisionOptionExerciseFixedDateType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionOptionExerciseFixedDateTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingProvisionOptionExerciseFixedDate returns true if UnderlyingProvisionOptionExerciseFixedDate is present, Tag 42113.
func (m NoUnderlyingProvisionOptionExerciseFixedDates) HasUnderlyingProvisionOptionExerciseFixedDate() bool {
	return m.Has(tag.UnderlyingProvisionOptionExerciseFixedDate)
}

// HasUnderlyingProvisionOptionExerciseFixedDateType returns true if UnderlyingProvisionOptionExerciseFixedDateType is present, Tag 42114.
func (m NoUnderlyingProvisionOptionExerciseFixedDates) HasUnderlyingProvisionOptionExerciseFixedDateType() bool {
	return m.Has(tag.UnderlyingProvisionOptionExerciseFixedDateType)
}

// NoUnderlyingProvisionOptionExerciseFixedDatesRepeatingGroup is a repeating group, Tag 42112.
type NoUnderlyingProvisionOptionExerciseFixedDatesRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingProvisionOptionExerciseFixedDatesRepeatingGroup returns an initialized, NoUnderlyingProvisionOptionExerciseFixedDatesRepeatingGroup.
func NewNoUnderlyingProvisionOptionExerciseFixedDatesRepeatingGroup() NoUnderlyingProvisionOptionExerciseFixedDatesRepeatingGroup {
	return NoUnderlyingProvisionOptionExerciseFixedDatesRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingProvisionOptionExerciseFixedDates,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingProvisionOptionExerciseFixedDate),
				quickfix.GroupElement(tag.UnderlyingProvisionOptionExerciseFixedDateType),
			},
		),
	}
}

// Add create and append a new NoUnderlyingProvisionOptionExerciseFixedDates to this group.
func (m NoUnderlyingProvisionOptionExerciseFixedDatesRepeatingGroup) Add() NoUnderlyingProvisionOptionExerciseFixedDates {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingProvisionOptionExerciseFixedDates{g}
}

// Get returns the ith NoUnderlyingProvisionOptionExerciseFixedDates in the NoUnderlyingProvisionOptionExerciseFixedDatesRepeatinGroup.
func (m NoUnderlyingProvisionOptionExerciseFixedDatesRepeatingGroup) Get(i int) NoUnderlyingProvisionOptionExerciseFixedDates {
	return NoUnderlyingProvisionOptionExerciseFixedDates{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingProvisionOptionExpirationDateBusinessCenters is a repeating group element, Tag 42186.
type NoUnderlyingProvisionOptionExpirationDateBusinessCenters struct {
	*quickfix.Group
}

// SetUnderlyingProvisionOptionExpirationDateBusinessCenter sets UnderlyingProvisionOptionExpirationDateBusinessCenter, Tag 42187.
func (m NoUnderlyingProvisionOptionExpirationDateBusinessCenters) SetUnderlyingProvisionOptionExpirationDateBusinessCenter(v string) {
	m.Set(field.NewUnderlyingProvisionOptionExpirationDateBusinessCenter(v))
}

// GetUnderlyingProvisionOptionExpirationDateBusinessCenter gets UnderlyingProvisionOptionExpirationDateBusinessCenter, Tag 42187.
func (m NoUnderlyingProvisionOptionExpirationDateBusinessCenters) GetUnderlyingProvisionOptionExpirationDateBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionOptionExpirationDateBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingProvisionOptionExpirationDateBusinessCenter returns true if UnderlyingProvisionOptionExpirationDateBusinessCenter is present, Tag 42187.
func (m NoUnderlyingProvisionOptionExpirationDateBusinessCenters) HasUnderlyingProvisionOptionExpirationDateBusinessCenter() bool {
	return m.Has(tag.UnderlyingProvisionOptionExpirationDateBusinessCenter)
}

// NoUnderlyingProvisionOptionExpirationDateBusinessCentersRepeatingGroup is a repeating group, Tag 42186.
type NoUnderlyingProvisionOptionExpirationDateBusinessCentersRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingProvisionOptionExpirationDateBusinessCentersRepeatingGroup returns an initialized, NoUnderlyingProvisionOptionExpirationDateBusinessCentersRepeatingGroup.
func NewNoUnderlyingProvisionOptionExpirationDateBusinessCentersRepeatingGroup() NoUnderlyingProvisionOptionExpirationDateBusinessCentersRepeatingGroup {
	return NoUnderlyingProvisionOptionExpirationDateBusinessCentersRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingProvisionOptionExpirationDateBusinessCenters,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingProvisionOptionExpirationDateBusinessCenter),
			},
		),
	}
}

// Add create and append a new NoUnderlyingProvisionOptionExpirationDateBusinessCenters to this group.
func (m NoUnderlyingProvisionOptionExpirationDateBusinessCentersRepeatingGroup) Add() NoUnderlyingProvisionOptionExpirationDateBusinessCenters {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingProvisionOptionExpirationDateBusinessCenters{g}
}

// Get returns the ith NoUnderlyingProvisionOptionExpirationDateBusinessCenters in the NoUnderlyingProvisionOptionExpirationDateBusinessCentersRepeatinGroup.
func (m NoUnderlyingProvisionOptionExpirationDateBusinessCentersRepeatingGroup) Get(i int) NoUnderlyingProvisionOptionExpirationDateBusinessCenters {
	return NoUnderlyingProvisionOptionExpirationDateBusinessCenters{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingProvisionOptionRelevantUnderlyingDateBusinessCenters is a repeating group element, Tag 42188.
type NoUnderlyingProvisionOptionRelevantUnderlyingDateBusinessCenters struct {
	*quickfix.Group
}

// SetUnderlyingProvisionOptionRelevantUnderlyingDateBusinessCenter sets UnderlyingProvisionOptionRelevantUnderlyingDateBusinessCenter, Tag 42189.
func (m NoUnderlyingProvisionOptionRelevantUnderlyingDateBusinessCenters) SetUnderlyingProvisionOptionRelevantUnderlyingDateBusinessCenter(v string) {
	m.Set(field.NewUnderlyingProvisionOptionRelevantUnderlyingDateBusinessCenter(v))
}

// GetUnderlyingProvisionOptionRelevantUnderlyingDateBusinessCenter gets UnderlyingProvisionOptionRelevantUnderlyingDateBusinessCenter, Tag 42189.
func (m NoUnderlyingProvisionOptionRelevantUnderlyingDateBusinessCenters) GetUnderlyingProvisionOptionRelevantUnderlyingDateBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionOptionRelevantUnderlyingDateBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingProvisionOptionRelevantUnderlyingDateBusinessCenter returns true if UnderlyingProvisionOptionRelevantUnderlyingDateBusinessCenter is present, Tag 42189.
func (m NoUnderlyingProvisionOptionRelevantUnderlyingDateBusinessCenters) HasUnderlyingProvisionOptionRelevantUnderlyingDateBusinessCenter() bool {
	return m.Has(tag.UnderlyingProvisionOptionRelevantUnderlyingDateBusinessCenter)
}

// NoUnderlyingProvisionOptionRelevantUnderlyingDateBusinessCentersRepeatingGroup is a repeating group, Tag 42188.
type NoUnderlyingProvisionOptionRelevantUnderlyingDateBusinessCentersRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingProvisionOptionRelevantUnderlyingDateBusinessCentersRepeatingGroup returns an initialized, NoUnderlyingProvisionOptionRelevantUnderlyingDateBusinessCentersRepeatingGroup.
func NewNoUnderlyingProvisionOptionRelevantUnderlyingDateBusinessCentersRepeatingGroup() NoUnderlyingProvisionOptionRelevantUnderlyingDateBusinessCentersRepeatingGroup {
	return NoUnderlyingProvisionOptionRelevantUnderlyingDateBusinessCentersRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingProvisionOptionRelevantUnderlyingDateBusinessCenters,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingProvisionOptionRelevantUnderlyingDateBusinessCenter),
			},
		),
	}
}

// Add create and append a new NoUnderlyingProvisionOptionRelevantUnderlyingDateBusinessCenters to this group.
func (m NoUnderlyingProvisionOptionRelevantUnderlyingDateBusinessCentersRepeatingGroup) Add() NoUnderlyingProvisionOptionRelevantUnderlyingDateBusinessCenters {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingProvisionOptionRelevantUnderlyingDateBusinessCenters{g}
}

// Get returns the ith NoUnderlyingProvisionOptionRelevantUnderlyingDateBusinessCenters in the NoUnderlyingProvisionOptionRelevantUnderlyingDateBusinessCentersRepeatinGroup.
func (m NoUnderlyingProvisionOptionRelevantUnderlyingDateBusinessCentersRepeatingGroup) Get(i int) NoUnderlyingProvisionOptionRelevantUnderlyingDateBusinessCenters {
	return NoUnderlyingProvisionOptionRelevantUnderlyingDateBusinessCenters{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingProvisionCashSettlPaymentDateBusinessCenters is a repeating group element, Tag 42180.
type NoUnderlyingProvisionCashSettlPaymentDateBusinessCenters struct {
	*quickfix.Group
}

// SetUnderlyingProvisionCashSettlPaymentDateBusinessCenter sets UnderlyingProvisionCashSettlPaymentDateBusinessCenter, Tag 42181.
func (m NoUnderlyingProvisionCashSettlPaymentDateBusinessCenters) SetUnderlyingProvisionCashSettlPaymentDateBusinessCenter(v string) {
	m.Set(field.NewUnderlyingProvisionCashSettlPaymentDateBusinessCenter(v))
}

// GetUnderlyingProvisionCashSettlPaymentDateBusinessCenter gets UnderlyingProvisionCashSettlPaymentDateBusinessCenter, Tag 42181.
func (m NoUnderlyingProvisionCashSettlPaymentDateBusinessCenters) GetUnderlyingProvisionCashSettlPaymentDateBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionCashSettlPaymentDateBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingProvisionCashSettlPaymentDateBusinessCenter returns true if UnderlyingProvisionCashSettlPaymentDateBusinessCenter is present, Tag 42181.
func (m NoUnderlyingProvisionCashSettlPaymentDateBusinessCenters) HasUnderlyingProvisionCashSettlPaymentDateBusinessCenter() bool {
	return m.Has(tag.UnderlyingProvisionCashSettlPaymentDateBusinessCenter)
}

// NoUnderlyingProvisionCashSettlPaymentDateBusinessCentersRepeatingGroup is a repeating group, Tag 42180.
type NoUnderlyingProvisionCashSettlPaymentDateBusinessCentersRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingProvisionCashSettlPaymentDateBusinessCentersRepeatingGroup returns an initialized, NoUnderlyingProvisionCashSettlPaymentDateBusinessCentersRepeatingGroup.
func NewNoUnderlyingProvisionCashSettlPaymentDateBusinessCentersRepeatingGroup() NoUnderlyingProvisionCashSettlPaymentDateBusinessCentersRepeatingGroup {
	return NoUnderlyingProvisionCashSettlPaymentDateBusinessCentersRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingProvisionCashSettlPaymentDateBusinessCenters,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingProvisionCashSettlPaymentDateBusinessCenter),
			},
		),
	}
}

// Add create and append a new NoUnderlyingProvisionCashSettlPaymentDateBusinessCenters to this group.
func (m NoUnderlyingProvisionCashSettlPaymentDateBusinessCentersRepeatingGroup) Add() NoUnderlyingProvisionCashSettlPaymentDateBusinessCenters {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingProvisionCashSettlPaymentDateBusinessCenters{g}
}

// Get returns the ith NoUnderlyingProvisionCashSettlPaymentDateBusinessCenters in the NoUnderlyingProvisionCashSettlPaymentDateBusinessCentersRepeatinGroup.
func (m NoUnderlyingProvisionCashSettlPaymentDateBusinessCentersRepeatingGroup) Get(i int) NoUnderlyingProvisionCashSettlPaymentDateBusinessCenters {
	return NoUnderlyingProvisionCashSettlPaymentDateBusinessCenters{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingProvisionCashSettlPaymentDates is a repeating group element, Tag 42099.
type NoUnderlyingProvisionCashSettlPaymentDates struct {
	*quickfix.Group
}

// SetUnderlyingProvisionCashSettlPaymentDate sets UnderlyingProvisionCashSettlPaymentDate, Tag 42100.
func (m NoUnderlyingProvisionCashSettlPaymentDates) SetUnderlyingProvisionCashSettlPaymentDate(v string) {
	m.Set(field.NewUnderlyingProvisionCashSettlPaymentDate(v))
}

// SetUnderlyingProvisionCashSettlPaymentDateType sets UnderlyingProvisionCashSettlPaymentDateType, Tag 42101.
func (m NoUnderlyingProvisionCashSettlPaymentDates) SetUnderlyingProvisionCashSettlPaymentDateType(v int) {
	m.Set(field.NewUnderlyingProvisionCashSettlPaymentDateType(v))
}

// GetUnderlyingProvisionCashSettlPaymentDate gets UnderlyingProvisionCashSettlPaymentDate, Tag 42100.
func (m NoUnderlyingProvisionCashSettlPaymentDates) GetUnderlyingProvisionCashSettlPaymentDate() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionCashSettlPaymentDateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProvisionCashSettlPaymentDateType gets UnderlyingProvisionCashSettlPaymentDateType, Tag 42101.
func (m NoUnderlyingProvisionCashSettlPaymentDates) GetUnderlyingProvisionCashSettlPaymentDateType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionCashSettlPaymentDateTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingProvisionCashSettlPaymentDate returns true if UnderlyingProvisionCashSettlPaymentDate is present, Tag 42100.
func (m NoUnderlyingProvisionCashSettlPaymentDates) HasUnderlyingProvisionCashSettlPaymentDate() bool {
	return m.Has(tag.UnderlyingProvisionCashSettlPaymentDate)
}

// HasUnderlyingProvisionCashSettlPaymentDateType returns true if UnderlyingProvisionCashSettlPaymentDateType is present, Tag 42101.
func (m NoUnderlyingProvisionCashSettlPaymentDates) HasUnderlyingProvisionCashSettlPaymentDateType() bool {
	return m.Has(tag.UnderlyingProvisionCashSettlPaymentDateType)
}

// NoUnderlyingProvisionCashSettlPaymentDatesRepeatingGroup is a repeating group, Tag 42099.
type NoUnderlyingProvisionCashSettlPaymentDatesRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingProvisionCashSettlPaymentDatesRepeatingGroup returns an initialized, NoUnderlyingProvisionCashSettlPaymentDatesRepeatingGroup.
func NewNoUnderlyingProvisionCashSettlPaymentDatesRepeatingGroup() NoUnderlyingProvisionCashSettlPaymentDatesRepeatingGroup {
	return NoUnderlyingProvisionCashSettlPaymentDatesRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingProvisionCashSettlPaymentDates,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingProvisionCashSettlPaymentDate),
				quickfix.GroupElement(tag.UnderlyingProvisionCashSettlPaymentDateType),
			},
		),
	}
}

// Add create and append a new NoUnderlyingProvisionCashSettlPaymentDates to this group.
func (m NoUnderlyingProvisionCashSettlPaymentDatesRepeatingGroup) Add() NoUnderlyingProvisionCashSettlPaymentDates {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingProvisionCashSettlPaymentDates{g}
}

// Get returns the ith NoUnderlyingProvisionCashSettlPaymentDates in the NoUnderlyingProvisionCashSettlPaymentDatesRepeatinGroup.
func (m NoUnderlyingProvisionCashSettlPaymentDatesRepeatingGroup) Get(i int) NoUnderlyingProvisionCashSettlPaymentDates {
	return NoUnderlyingProvisionCashSettlPaymentDates{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingProvisionPartyIDs is a repeating group element, Tag 42173.
type NoUnderlyingProvisionPartyIDs struct {
	*quickfix.Group
}

// SetUnderlyingProvisionPartyID sets UnderlyingProvisionPartyID, Tag 42174.
func (m NoUnderlyingProvisionPartyIDs) SetUnderlyingProvisionPartyID(v string) {
	m.Set(field.NewUnderlyingProvisionPartyID(v))
}

// SetUnderlyingProvisionPartyIDSource sets UnderlyingProvisionPartyIDSource, Tag 42175.
func (m NoUnderlyingProvisionPartyIDs) SetUnderlyingProvisionPartyIDSource(v string) {
	m.Set(field.NewUnderlyingProvisionPartyIDSource(v))
}

// SetUnderlyingProvisionPartyRole sets UnderlyingProvisionPartyRole, Tag 42176.
func (m NoUnderlyingProvisionPartyIDs) SetUnderlyingProvisionPartyRole(v int) {
	m.Set(field.NewUnderlyingProvisionPartyRole(v))
}

// SetUnderlyingProvisionPartyRoleQualifier sets UnderlyingProvisionPartyRoleQualifier, Tag 40918.
func (m NoUnderlyingProvisionPartyIDs) SetUnderlyingProvisionPartyRoleQualifier(v int) {
	m.Set(field.NewUnderlyingProvisionPartyRoleQualifier(v))
}

// SetNoUnderlyingProvisionPartySubIDs sets NoUnderlyingProvisionPartySubIDs, Tag 42177.
func (m NoUnderlyingProvisionPartyIDs) SetNoUnderlyingProvisionPartySubIDs(f NoUnderlyingProvisionPartySubIDsRepeatingGroup) {
	m.SetGroup(f)
}

// GetUnderlyingProvisionPartyID gets UnderlyingProvisionPartyID, Tag 42174.
func (m NoUnderlyingProvisionPartyIDs) GetUnderlyingProvisionPartyID() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionPartyIDField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProvisionPartyIDSource gets UnderlyingProvisionPartyIDSource, Tag 42175.
func (m NoUnderlyingProvisionPartyIDs) GetUnderlyingProvisionPartyIDSource() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionPartyIDSourceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProvisionPartyRole gets UnderlyingProvisionPartyRole, Tag 42176.
func (m NoUnderlyingProvisionPartyIDs) GetUnderlyingProvisionPartyRole() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionPartyRoleField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProvisionPartyRoleQualifier gets UnderlyingProvisionPartyRoleQualifier, Tag 40918.
func (m NoUnderlyingProvisionPartyIDs) GetUnderlyingProvisionPartyRoleQualifier() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionPartyRoleQualifierField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoUnderlyingProvisionPartySubIDs gets NoUnderlyingProvisionPartySubIDs, Tag 42177.
func (m NoUnderlyingProvisionPartyIDs) GetNoUnderlyingProvisionPartySubIDs() (NoUnderlyingProvisionPartySubIDsRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoUnderlyingProvisionPartySubIDsRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// HasUnderlyingProvisionPartyID returns true if UnderlyingProvisionPartyID is present, Tag 42174.
func (m NoUnderlyingProvisionPartyIDs) HasUnderlyingProvisionPartyID() bool {
	return m.Has(tag.UnderlyingProvisionPartyID)
}

// HasUnderlyingProvisionPartyIDSource returns true if UnderlyingProvisionPartyIDSource is present, Tag 42175.
func (m NoUnderlyingProvisionPartyIDs) HasUnderlyingProvisionPartyIDSource() bool {
	return m.Has(tag.UnderlyingProvisionPartyIDSource)
}

// HasUnderlyingProvisionPartyRole returns true if UnderlyingProvisionPartyRole is present, Tag 42176.
func (m NoUnderlyingProvisionPartyIDs) HasUnderlyingProvisionPartyRole() bool {
	return m.Has(tag.UnderlyingProvisionPartyRole)
}

// HasUnderlyingProvisionPartyRoleQualifier returns true if UnderlyingProvisionPartyRoleQualifier is present, Tag 40918.
func (m NoUnderlyingProvisionPartyIDs) HasUnderlyingProvisionPartyRoleQualifier() bool {
	return m.Has(tag.UnderlyingProvisionPartyRoleQualifier)
}

// HasNoUnderlyingProvisionPartySubIDs returns true if NoUnderlyingProvisionPartySubIDs is present, Tag 42177.
func (m NoUnderlyingProvisionPartyIDs) HasNoUnderlyingProvisionPartySubIDs() bool {
	return m.Has(tag.NoUnderlyingProvisionPartySubIDs)
}

// NoUnderlyingProvisionPartySubIDs is a repeating group element, Tag 42177.
type NoUnderlyingProvisionPartySubIDs struct {
	*quickfix.Group
}

// SetUnderlyingProvisionPartySubID sets UnderlyingProvisionPartySubID, Tag 42178.
func (m NoUnderlyingProvisionPartySubIDs) SetUnderlyingProvisionPartySubID(v string) {
	m.Set(field.NewUnderlyingProvisionPartySubID(v))
}

// SetUnderlyingProvisionPartySubIDType sets UnderlyingProvisionPartySubIDType, Tag 42179.
func (m NoUnderlyingProvisionPartySubIDs) SetUnderlyingProvisionPartySubIDType(v int) {
	m.Set(field.NewUnderlyingProvisionPartySubIDType(v))
}

// GetUnderlyingProvisionPartySubID gets UnderlyingProvisionPartySubID, Tag 42178.
func (m NoUnderlyingProvisionPartySubIDs) GetUnderlyingProvisionPartySubID() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionPartySubIDField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingProvisionPartySubIDType gets UnderlyingProvisionPartySubIDType, Tag 42179.
func (m NoUnderlyingProvisionPartySubIDs) GetUnderlyingProvisionPartySubIDType() (v int, err quickfix.MessageRejectError) {
	var f field.UnderlyingProvisionPartySubIDTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingProvisionPartySubID returns true if UnderlyingProvisionPartySubID is present, Tag 42178.
func (m NoUnderlyingProvisionPartySubIDs) HasUnderlyingProvisionPartySubID() bool {
	return m.Has(tag.UnderlyingProvisionPartySubID)
}

// HasUnderlyingProvisionPartySubIDType returns true if UnderlyingProvisionPartySubIDType is present, Tag 42179.
func (m NoUnderlyingProvisionPartySubIDs) HasUnderlyingProvisionPartySubIDType() bool {
	return m.Has(tag.UnderlyingProvisionPartySubIDType)
}

// NoUnderlyingProvisionPartySubIDsRepeatingGroup is a repeating group, Tag 42177.
type NoUnderlyingProvisionPartySubIDsRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingProvisionPartySubIDsRepeatingGroup returns an initialized, NoUnderlyingProvisionPartySubIDsRepeatingGroup.
func NewNoUnderlyingProvisionPartySubIDsRepeatingGroup() NoUnderlyingProvisionPartySubIDsRepeatingGroup {
	return NoUnderlyingProvisionPartySubIDsRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingProvisionPartySubIDs,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingProvisionPartySubID),
				quickfix.GroupElement(tag.UnderlyingProvisionPartySubIDType),
			},
		),
	}
}

// Add create and append a new NoUnderlyingProvisionPartySubIDs to this group.
func (m NoUnderlyingProvisionPartySubIDsRepeatingGroup) Add() NoUnderlyingProvisionPartySubIDs {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingProvisionPartySubIDs{g}
}

// Get returns the ith NoUnderlyingProvisionPartySubIDs in the NoUnderlyingProvisionPartySubIDsRepeatinGroup.
func (m NoUnderlyingProvisionPartySubIDsRepeatingGroup) Get(i int) NoUnderlyingProvisionPartySubIDs {
	return NoUnderlyingProvisionPartySubIDs{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingProvisionPartyIDsRepeatingGroup is a repeating group, Tag 42173.
type NoUnderlyingProvisionPartyIDsRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingProvisionPartyIDsRepeatingGroup returns an initialized, NoUnderlyingProvisionPartyIDsRepeatingGroup.
func NewNoUnderlyingProvisionPartyIDsRepeatingGroup() NoUnderlyingProvisionPartyIDsRepeatingGroup {
	return NoUnderlyingProvisionPartyIDsRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingProvisionPartyIDs,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingProvisionPartyID),
				quickfix.GroupElement(tag.UnderlyingProvisionPartyIDSource),
				quickfix.GroupElement(tag.UnderlyingProvisionPartyRole),
				quickfix.GroupElement(tag.UnderlyingProvisionPartyRoleQualifier),
				NewNoUnderlyingProvisionPartySubIDsRepeatingGroup(),
			},
		),
	}
}

// Add create and append a new NoUnderlyingProvisionPartyIDs to this group.
func (m NoUnderlyingProvisionPartyIDsRepeatingGroup) Add() NoUnderlyingProvisionPartyIDs {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingProvisionPartyIDs{g}
}

// Get returns the ith NoUnderlyingProvisionPartyIDs in the NoUnderlyingProvisionPartyIDsRepeatinGroup.
func (m NoUnderlyingProvisionPartyIDsRepeatingGroup) Get(i int) NoUnderlyingProvisionPartyIDs {
	return NoUnderlyingProvisionPartyIDs{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingProvisionsRepeatingGroup is a repeating group, Tag 42149.
type NoUnderlyingProvisionsRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingProvisionsRepeatingGroup returns an initialized, NoUnderlyingProvisionsRepeatingGroup.
func NewNoUnderlyingProvisionsRepeatingGroup() NoUnderlyingProvisionsRepeatingGroup {
	return NoUnderlyingProvisionsRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingProvisions,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingProvisionType),
				quickfix.GroupElement(tag.UnderlyingProvisionDateUnadjusted),
				quickfix.GroupElement(tag.UnderlyingProvisionDateBusinessDayConvention),
				NewNoUnderlyingProvisionDateBusinessCentersRepeatingGroup(),
				quickfix.GroupElement(tag.UnderlyingProvisionDateAdjusted),
				quickfix.GroupElement(tag.UnderlyingProvisionDateTenorPeriod),
				quickfix.GroupElement(tag.UnderlyingProvisionDateTenorUnit),
				quickfix.GroupElement(tag.UnderlyingProvisionCalculationAgent),
				quickfix.GroupElement(tag.UnderlyingProvisionOptionSinglePartyBuyerSide),
				quickfix.GroupElement(tag.UnderlyingProvisionOptionSinglePartySellerSide),
				quickfix.GroupElement(tag.UnderlyingProvisionCashSettlValueTime),
				quickfix.GroupElement(tag.UnderlyingProvisionCashSettlValueTimeBusinessCenter),
				quickfix.GroupElement(tag.UnderlyingProvisionCashSettlValueDateBusinessDayConvention),
				NewNoUnderlyingProvisionCashSettlValueDateBusinessCentersRepeatingGroup(),
				quickfix.GroupElement(tag.UnderlyingProvisionCashSettlValueDateRelativeTo),
				quickfix.GroupElement(tag.UnderlyingProvisionCashSettlValueDateOffsetPeriod),
				quickfix.GroupElement(tag.UnderlyingProvisionCashSettlValueDateOffsetUnit),
				quickfix.GroupElement(tag.UnderlyingProvisionCashSettlValueDateOffsetDayType),
				quickfix.GroupElement(tag.UnderlyingProvisionCashSettlValueDateAdjusted),
				quickfix.GroupElement(tag.UnderlyingProvisionOptionExerciseBusinessDayConvention),
				NewNoUnderlyingProvisionOptionExerciseBusinessCentersRepeatingGroup(),
				NewNoUnderlyingProvisionOptionExerciseFixedDatesRepeatingGroup(),
				quickfix.GroupElement(tag.UnderlyingProvisionOptionExerciseEarliestDateOffsetPeriod),
				quickfix.GroupElement(tag.UnderlyingProvisionOptionExerciseEarliestDateOffsetUnit),
				quickfix.GroupElement(tag.UnderlyingProvisionOptionExerciseFrequencyPeriod),
				quickfix.GroupElement(tag.UnderlyingProvisionOptionExerciseFrequencyUnit),
				quickfix.GroupElement(tag.UnderlyingProvisionOptionExerciseStartDateUnadjusted),
				quickfix.GroupElement(tag.UnderlyingProvisionOptionExerciseStartDateRelativeTo),
				quickfix.GroupElement(tag.UnderlyingProvisionOptionExerciseStartDateOffsetPeriod),
				quickfix.GroupElement(tag.UnderlyingProvisionOptionExerciseStartDateOffsetUnit),
				quickfix.GroupElement(tag.UnderlyingProvisionOptionExerciseStartDateOffsetDayType),
				quickfix.GroupElement(tag.UnderlyingProvisionOptionExerciseStartDateAdjusted),
				quickfix.GroupElement(tag.UnderlyingProvisionOptionExercisePeriodSkip),
				quickfix.GroupElement(tag.UnderlyingProvisionOptionExerciseBoundsFirstDateUnadjusted),
				quickfix.GroupElement(tag.UnderlyingProvisionOptionExerciseBoundsLastDateUnadjusted),
				quickfix.GroupElement(tag.UnderlyingProvisionOptionExerciseEarliestTime),
				quickfix.GroupElement(tag.UnderlyingProvisionOptionExerciseEarliestTimeBusinessCenter),
				quickfix.GroupElement(tag.UnderlyingProvisionOptionExerciseLatestTime),
				quickfix.GroupElement(tag.UnderlyingProvisionOptionExerciseLatestTimeBusinessCenter),
				quickfix.GroupElement(tag.UnderlyingProvisionOptionExpirationDateUnadjusted),
				quickfix.GroupElement(tag.UnderlyingProvisionOptionExpirationDateBusinessDayConvention),
				NewNoUnderlyingProvisionOptionExpirationDateBusinessCentersRepeatingGroup(),
				quickfix.GroupElement(tag.UnderlyingProvisionOptionExpirationDateRelativeTo),
				quickfix.GroupElement(tag.UnderlyingProvisionOptionExpirationDateOffsetPeriod),
				quickfix.GroupElement(tag.UnderlyingProvisionOptionExpirationDateOffsetUnit),
				quickfix.GroupElement(tag.UnderlyingProvisionOptionExpirationDateOffsetDayType),
				quickfix.GroupElement(tag.UnderlyingProvisionOptionExpirationDateAdjusted),
				quickfix.GroupElement(tag.UnderlyingProvisionOptionExpirationTime),
				quickfix.GroupElement(tag.UnderlyingProvisionOptionExpirationTimeBusinessCenter),
				quickfix.GroupElement(tag.UnderlyingProvisionOptionRelevantUnderlyingDateUnadjusted),
				quickfix.GroupElement(tag.UnderlyingProvisionOptionRelevantUnderlyingDateBusinessDayConvention),
				NewNoUnderlyingProvisionOptionRelevantUnderlyingDateBusinessCentersRepeatingGroup(),
				quickfix.GroupElement(tag.UnderlyingProvisionOptionRelevantUnderlyingDateRelativeTo),
				quickfix.GroupElement(tag.UnderlyingProvisionOptionRelevantUnderlyingDateOffsetPeriod),
				quickfix.GroupElement(tag.UnderlyingProvisionOptionRelevantUnderlyingDateOffsetUnit),
				quickfix.GroupElement(tag.UnderlyingProvisionOptionRelevantUnderlyingDateOffsetDayType),
				quickfix.GroupElement(tag.UnderlyingProvisionOptionRelevantUnderlyingDateAdjusted),
				quickfix.GroupElement(tag.UnderlyingProvisionOptionExerciseStyle),
				quickfix.GroupElement(tag.UnderlyingProvisionOptionExerciseMultipleNotional),
				quickfix.GroupElement(tag.UnderlyingProvisionOptionExerciseMinimumNotional),
				quickfix.GroupElement(tag.UnderlyingProvisionOptionExerciseMaximumNotional),
				quickfix.GroupElement(tag.UnderlyingProvisionOptionMinimumNumber),
				quickfix.GroupElement(tag.UnderlyingProvisionOptionMaximumNumber),
				quickfix.GroupElement(tag.UnderlyingProvisionOptionExerciseConfirmation),
				quickfix.GroupElement(tag.UnderlyingProvisionCashSettlPaymentDateBusinessDayConvention),
				NewNoUnderlyingProvisionCashSettlPaymentDateBusinessCentersRepeatingGroup(),
				quickfix.GroupElement(tag.UnderlyingProvisionCashSettlPaymentDateRelativeTo),
				quickfix.GroupElement(tag.UnderlyingProvisionCashSettlPaymentDateOffsetPeriod),
				quickfix.GroupElement(tag.UnderlyingProvisionCashSettlPaymentDateOffsetUnit),
				quickfix.GroupElement(tag.UnderlyingProvisionCashSettlPaymentDateOffsetDayType),
				quickfix.GroupElement(tag.UnderlyingProvisionCashSettlPaymentDateRangeFirst),
				quickfix.GroupElement(tag.UnderlyingProvisionCashSettlPaymentDateRangeLast),
				NewNoUnderlyingProvisionCashSettlPaymentDatesRepeatingGroup(),
				quickfix.GroupElement(tag.UnderlyingProvisionCashSettlMethod),
				quickfix.GroupElement(tag.UnderlyingProvisionCashSettlCurrency),
				quickfix.GroupElement(tag.UnderlyingProvisionCashSettlCurrency2),
				quickfix.GroupElement(tag.UnderlyingProvisionCashSettlQuoteType),
				quickfix.GroupElement(tag.UnderlyingProvisionCashSettlQuoteSource),
				quickfix.GroupElement(tag.UnderlyingProvisionCashSettlQuoteReferencePage),
				quickfix.GroupElement(tag.UnderlyingProvisionText),
				quickfix.GroupElement(tag.EncodedUnderlyingProvisionTextLen),
				quickfix.GroupElement(tag.EncodedUnderlyingProvisionText),
				NewNoUnderlyingProvisionPartyIDsRepeatingGroup(),
				quickfix.GroupElement(tag.UnderlyingProvisionBreakFeeElection),
				quickfix.GroupElement(tag.UnderlyingProvisionBreakFeeRate),
			},
		),
	}
}

// Add create and append a new NoUnderlyingProvisions to this group.
func (m NoUnderlyingProvisionsRepeatingGroup) Add() NoUnderlyingProvisions {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingProvisions{g}
}

// Get returns the ith NoUnderlyingProvisions in the NoUnderlyingProvisionsRepeatinGroup.
func (m NoUnderlyingProvisionsRepeatingGroup) Get(i int) NoUnderlyingProvisions {
	return NoUnderlyingProvisions{m.RepeatingGroup.Get(i)}
}

// NoExtraordinaryEvents is a repeating group element, Tag 42296.
type NoExtraordinaryEvents struct {
	*quickfix.Group
}

// SetExtraordinaryEventType sets ExtraordinaryEventType, Tag 42297.
func (m NoExtraordinaryEvents) SetExtraordinaryEventType(v string) {
	m.Set(field.NewExtraordinaryEventType(v))
}

// SetExtraordinaryEventValue sets ExtraordinaryEventValue, Tag 42298.
func (m NoExtraordinaryEvents) SetExtraordinaryEventValue(v string) {
	m.Set(field.NewExtraordinaryEventValue(v))
}

// GetExtraordinaryEventType gets ExtraordinaryEventType, Tag 42297.
func (m NoExtraordinaryEvents) GetExtraordinaryEventType() (v string, err quickfix.MessageRejectError) {
	var f field.ExtraordinaryEventTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetExtraordinaryEventValue gets ExtraordinaryEventValue, Tag 42298.
func (m NoExtraordinaryEvents) GetExtraordinaryEventValue() (v string, err quickfix.MessageRejectError) {
	var f field.ExtraordinaryEventValueField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasExtraordinaryEventType returns true if ExtraordinaryEventType is present, Tag 42297.
func (m NoExtraordinaryEvents) HasExtraordinaryEventType() bool {
	return m.Has(tag.ExtraordinaryEventType)
}

// HasExtraordinaryEventValue returns true if ExtraordinaryEventValue is present, Tag 42298.
func (m NoExtraordinaryEvents) HasExtraordinaryEventValue() bool {
	return m.Has(tag.ExtraordinaryEventValue)
}

// NoExtraordinaryEventsRepeatingGroup is a repeating group, Tag 42296.
type NoExtraordinaryEventsRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoExtraordinaryEventsRepeatingGroup returns an initialized, NoExtraordinaryEventsRepeatingGroup.
func NewNoExtraordinaryEventsRepeatingGroup() NoExtraordinaryEventsRepeatingGroup {
	return NoExtraordinaryEventsRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoExtraordinaryEvents,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.ExtraordinaryEventType),
				quickfix.GroupElement(tag.ExtraordinaryEventValue),
			},
		),
	}
}

// Add create and append a new NoExtraordinaryEvents to this group.
func (m NoExtraordinaryEventsRepeatingGroup) Add() NoExtraordinaryEvents {
	g := m.RepeatingGroup.Add()
	return NoExtraordinaryEvents{g}
}

// Get returns the ith NoExtraordinaryEvents in the NoExtraordinaryEventsRepeatinGroup.
func (m NoExtraordinaryEventsRepeatingGroup) Get(i int) NoExtraordinaryEvents {
	return NoExtraordinaryEvents{m.RepeatingGroup.Get(i)}
}

// NoSettlMethodElectionDateBusinessCenters is a repeating group element, Tag 42775.
type NoSettlMethodElectionDateBusinessCenters struct {
	*quickfix.Group
}

// SetSettlMethodElectionDateBusinessCenter sets SettlMethodElectionDateBusinessCenter, Tag 42776.
func (m NoSettlMethodElectionDateBusinessCenters) SetSettlMethodElectionDateBusinessCenter(v string) {
	m.Set(field.NewSettlMethodElectionDateBusinessCenter(v))
}

// GetSettlMethodElectionDateBusinessCenter gets SettlMethodElectionDateBusinessCenter, Tag 42776.
func (m NoSettlMethodElectionDateBusinessCenters) GetSettlMethodElectionDateBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.SettlMethodElectionDateBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasSettlMethodElectionDateBusinessCenter returns true if SettlMethodElectionDateBusinessCenter is present, Tag 42776.
func (m NoSettlMethodElectionDateBusinessCenters) HasSettlMethodElectionDateBusinessCenter() bool {
	return m.Has(tag.SettlMethodElectionDateBusinessCenter)
}

// NoSettlMethodElectionDateBusinessCentersRepeatingGroup is a repeating group, Tag 42775.
type NoSettlMethodElectionDateBusinessCentersRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoSettlMethodElectionDateBusinessCentersRepeatingGroup returns an initialized, NoSettlMethodElectionDateBusinessCentersRepeatingGroup.
func NewNoSettlMethodElectionDateBusinessCentersRepeatingGroup() NoSettlMethodElectionDateBusinessCentersRepeatingGroup {
	return NoSettlMethodElectionDateBusinessCentersRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoSettlMethodElectionDateBusinessCenters,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.SettlMethodElectionDateBusinessCenter),
			},
		),
	}
}

// Add create and append a new NoSettlMethodElectionDateBusinessCenters to this group.
func (m NoSettlMethodElectionDateBusinessCentersRepeatingGroup) Add() NoSettlMethodElectionDateBusinessCenters {
	g := m.RepeatingGroup.Add()
	return NoSettlMethodElectionDateBusinessCenters{g}
}

// Get returns the ith NoSettlMethodElectionDateBusinessCenters in the NoSettlMethodElectionDateBusinessCentersRepeatinGroup.
func (m NoSettlMethodElectionDateBusinessCentersRepeatingGroup) Get(i int) NoSettlMethodElectionDateBusinessCenters {
	return NoSettlMethodElectionDateBusinessCenters{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingDividendPayments is a repeating group element, Tag 42855.
type NoUnderlyingDividendPayments struct {
	*quickfix.Group
}

// SetUnderlyingDividendPaymentDate sets UnderlyingDividendPaymentDate, Tag 42856.
func (m NoUnderlyingDividendPayments) SetUnderlyingDividendPaymentDate(v string) {
	m.Set(field.NewUnderlyingDividendPaymentDate(v))
}

// SetUnderlyingDividendPaymentAmount sets UnderlyingDividendPaymentAmount, Tag 42857.
func (m NoUnderlyingDividendPayments) SetUnderlyingDividendPaymentAmount(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingDividendPaymentAmount(value, scale))
}

// SetUnderlyingDividendPaymentCurrency sets UnderlyingDividendPaymentCurrency, Tag 42858.
func (m NoUnderlyingDividendPayments) SetUnderlyingDividendPaymentCurrency(v string) {
	m.Set(field.NewUnderlyingDividendPaymentCurrency(v))
}

// SetUnderlyingDividendAccruedInterest sets UnderlyingDividendAccruedInterest, Tag 42859.
func (m NoUnderlyingDividendPayments) SetUnderlyingDividendAccruedInterest(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingDividendAccruedInterest(value, scale))
}

// GetUnderlyingDividendPaymentDate gets UnderlyingDividendPaymentDate, Tag 42856.
func (m NoUnderlyingDividendPayments) GetUnderlyingDividendPaymentDate() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingDividendPaymentDateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDividendPaymentAmount gets UnderlyingDividendPaymentAmount, Tag 42857.
func (m NoUnderlyingDividendPayments) GetUnderlyingDividendPaymentAmount() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingDividendPaymentAmountField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDividendPaymentCurrency gets UnderlyingDividendPaymentCurrency, Tag 42858.
func (m NoUnderlyingDividendPayments) GetUnderlyingDividendPaymentCurrency() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingDividendPaymentCurrencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingDividendAccruedInterest gets UnderlyingDividendAccruedInterest, Tag 42859.
func (m NoUnderlyingDividendPayments) GetUnderlyingDividendAccruedInterest() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingDividendAccruedInterestField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingDividendPaymentDate returns true if UnderlyingDividendPaymentDate is present, Tag 42856.
func (m NoUnderlyingDividendPayments) HasUnderlyingDividendPaymentDate() bool {
	return m.Has(tag.UnderlyingDividendPaymentDate)
}

// HasUnderlyingDividendPaymentAmount returns true if UnderlyingDividendPaymentAmount is present, Tag 42857.
func (m NoUnderlyingDividendPayments) HasUnderlyingDividendPaymentAmount() bool {
	return m.Has(tag.UnderlyingDividendPaymentAmount)
}

// HasUnderlyingDividendPaymentCurrency returns true if UnderlyingDividendPaymentCurrency is present, Tag 42858.
func (m NoUnderlyingDividendPayments) HasUnderlyingDividendPaymentCurrency() bool {
	return m.Has(tag.UnderlyingDividendPaymentCurrency)
}

// HasUnderlyingDividendAccruedInterest returns true if UnderlyingDividendAccruedInterest is present, Tag 42859.
func (m NoUnderlyingDividendPayments) HasUnderlyingDividendAccruedInterest() bool {
	return m.Has(tag.UnderlyingDividendAccruedInterest)
}

// NoUnderlyingDividendPaymentsRepeatingGroup is a repeating group, Tag 42855.
type NoUnderlyingDividendPaymentsRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingDividendPaymentsRepeatingGroup returns an initialized, NoUnderlyingDividendPaymentsRepeatingGroup.
func NewNoUnderlyingDividendPaymentsRepeatingGroup() NoUnderlyingDividendPaymentsRepeatingGroup {
	return NoUnderlyingDividendPaymentsRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingDividendPayments,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingDividendPaymentDate),
				quickfix.GroupElement(tag.UnderlyingDividendPaymentAmount),
				quickfix.GroupElement(tag.UnderlyingDividendPaymentCurrency),
				quickfix.GroupElement(tag.UnderlyingDividendAccruedInterest),
			},
		),
	}
}

// Add create and append a new NoUnderlyingDividendPayments to this group.
func (m NoUnderlyingDividendPaymentsRepeatingGroup) Add() NoUnderlyingDividendPayments {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingDividendPayments{g}
}

// Get returns the ith NoUnderlyingDividendPayments in the NoUnderlyingDividendPaymentsRepeatinGroup.
func (m NoUnderlyingDividendPaymentsRepeatingGroup) Get(i int) NoUnderlyingDividendPayments {
	return NoUnderlyingDividendPayments{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingExtraordinaryEvents is a repeating group element, Tag 42884.
type NoUnderlyingExtraordinaryEvents struct {
	*quickfix.Group
}

// SetUnderlyingExtraordinaryEventType sets UnderlyingExtraordinaryEventType, Tag 42885.
func (m NoUnderlyingExtraordinaryEvents) SetUnderlyingExtraordinaryEventType(v string) {
	m.Set(field.NewUnderlyingExtraordinaryEventType(v))
}

// SetUnderlyingExtraordinaryEventValue sets UnderlyingExtraordinaryEventValue, Tag 42886.
func (m NoUnderlyingExtraordinaryEvents) SetUnderlyingExtraordinaryEventValue(v string) {
	m.Set(field.NewUnderlyingExtraordinaryEventValue(v))
}

// GetUnderlyingExtraordinaryEventType gets UnderlyingExtraordinaryEventType, Tag 42885.
func (m NoUnderlyingExtraordinaryEvents) GetUnderlyingExtraordinaryEventType() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingExtraordinaryEventTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingExtraordinaryEventValue gets UnderlyingExtraordinaryEventValue, Tag 42886.
func (m NoUnderlyingExtraordinaryEvents) GetUnderlyingExtraordinaryEventValue() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingExtraordinaryEventValueField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingExtraordinaryEventType returns true if UnderlyingExtraordinaryEventType is present, Tag 42885.
func (m NoUnderlyingExtraordinaryEvents) HasUnderlyingExtraordinaryEventType() bool {
	return m.Has(tag.UnderlyingExtraordinaryEventType)
}

// HasUnderlyingExtraordinaryEventValue returns true if UnderlyingExtraordinaryEventValue is present, Tag 42886.
func (m NoUnderlyingExtraordinaryEvents) HasUnderlyingExtraordinaryEventValue() bool {
	return m.Has(tag.UnderlyingExtraordinaryEventValue)
}

// NoUnderlyingExtraordinaryEventsRepeatingGroup is a repeating group, Tag 42884.
type NoUnderlyingExtraordinaryEventsRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingExtraordinaryEventsRepeatingGroup returns an initialized, NoUnderlyingExtraordinaryEventsRepeatingGroup.
func NewNoUnderlyingExtraordinaryEventsRepeatingGroup() NoUnderlyingExtraordinaryEventsRepeatingGroup {
	return NoUnderlyingExtraordinaryEventsRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingExtraordinaryEvents,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingExtraordinaryEventType),
				quickfix.GroupElement(tag.UnderlyingExtraordinaryEventValue),
			},
		),
	}
}

// Add create and append a new NoUnderlyingExtraordinaryEvents to this group.
func (m NoUnderlyingExtraordinaryEventsRepeatingGroup) Add() NoUnderlyingExtraordinaryEvents {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingExtraordinaryEvents{g}
}

// Get returns the ith NoUnderlyingExtraordinaryEvents in the NoUnderlyingExtraordinaryEventsRepeatinGroup.
func (m NoUnderlyingExtraordinaryEventsRepeatingGroup) Get(i int) NoUnderlyingExtraordinaryEvents {
	return NoUnderlyingExtraordinaryEvents{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingRateSpreadSteps is a repeating group element, Tag 43005.
type NoUnderlyingRateSpreadSteps struct {
	*quickfix.Group
}

// SetUnderlyingRateSpreadStepDate sets UnderlyingRateSpreadStepDate, Tag 43006.
func (m NoUnderlyingRateSpreadSteps) SetUnderlyingRateSpreadStepDate(v string) {
	m.Set(field.NewUnderlyingRateSpreadStepDate(v))
}

// SetUnderlyingRateSpreadStepValue sets UnderlyingRateSpreadStepValue, Tag 43007.
func (m NoUnderlyingRateSpreadSteps) SetUnderlyingRateSpreadStepValue(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnderlyingRateSpreadStepValue(value, scale))
}

// GetUnderlyingRateSpreadStepDate gets UnderlyingRateSpreadStepDate, Tag 43006.
func (m NoUnderlyingRateSpreadSteps) GetUnderlyingRateSpreadStepDate() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingRateSpreadStepDateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingRateSpreadStepValue gets UnderlyingRateSpreadStepValue, Tag 43007.
func (m NoUnderlyingRateSpreadSteps) GetUnderlyingRateSpreadStepValue() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnderlyingRateSpreadStepValueField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingRateSpreadStepDate returns true if UnderlyingRateSpreadStepDate is present, Tag 43006.
func (m NoUnderlyingRateSpreadSteps) HasUnderlyingRateSpreadStepDate() bool {
	return m.Has(tag.UnderlyingRateSpreadStepDate)
}

// HasUnderlyingRateSpreadStepValue returns true if UnderlyingRateSpreadStepValue is present, Tag 43007.
func (m NoUnderlyingRateSpreadSteps) HasUnderlyingRateSpreadStepValue() bool {
	return m.Has(tag.UnderlyingRateSpreadStepValue)
}

// NoUnderlyingRateSpreadStepsRepeatingGroup is a repeating group, Tag 43005.
type NoUnderlyingRateSpreadStepsRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingRateSpreadStepsRepeatingGroup returns an initialized, NoUnderlyingRateSpreadStepsRepeatingGroup.
func NewNoUnderlyingRateSpreadStepsRepeatingGroup() NoUnderlyingRateSpreadStepsRepeatingGroup {
	return NoUnderlyingRateSpreadStepsRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingRateSpreadSteps,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingRateSpreadStepDate),
				quickfix.GroupElement(tag.UnderlyingRateSpreadStepValue),
			},
		),
	}
}

// Add create and append a new NoUnderlyingRateSpreadSteps to this group.
func (m NoUnderlyingRateSpreadStepsRepeatingGroup) Add() NoUnderlyingRateSpreadSteps {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingRateSpreadSteps{g}
}

// Get returns the ith NoUnderlyingRateSpreadSteps in the NoUnderlyingRateSpreadStepsRepeatinGroup.
func (m NoUnderlyingRateSpreadStepsRepeatingGroup) Get(i int) NoUnderlyingRateSpreadSteps {
	return NoUnderlyingRateSpreadSteps{m.RepeatingGroup.Get(i)}
}

// NoUnderlyingSettlMethodElectionDateBusinessCenters is a repeating group element, Tag 43074.
type NoUnderlyingSettlMethodElectionDateBusinessCenters struct {
	*quickfix.Group
}

// SetUnderlyingSettlMethodElectionDateBusinessCenter sets UnderlyingSettlMethodElectionDateBusinessCenter, Tag 43075.
func (m NoUnderlyingSettlMethodElectionDateBusinessCenters) SetUnderlyingSettlMethodElectionDateBusinessCenter(v string) {
	m.Set(field.NewUnderlyingSettlMethodElectionDateBusinessCenter(v))
}

// GetUnderlyingSettlMethodElectionDateBusinessCenter gets UnderlyingSettlMethodElectionDateBusinessCenter, Tag 43075.
func (m NoUnderlyingSettlMethodElectionDateBusinessCenters) GetUnderlyingSettlMethodElectionDateBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.UnderlyingSettlMethodElectionDateBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasUnderlyingSettlMethodElectionDateBusinessCenter returns true if UnderlyingSettlMethodElectionDateBusinessCenter is present, Tag 43075.
func (m NoUnderlyingSettlMethodElectionDateBusinessCenters) HasUnderlyingSettlMethodElectionDateBusinessCenter() bool {
	return m.Has(tag.UnderlyingSettlMethodElectionDateBusinessCenter)
}

// NoUnderlyingSettlMethodElectionDateBusinessCentersRepeatingGroup is a repeating group, Tag 43074.
type NoUnderlyingSettlMethodElectionDateBusinessCentersRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoUnderlyingSettlMethodElectionDateBusinessCentersRepeatingGroup returns an initialized, NoUnderlyingSettlMethodElectionDateBusinessCentersRepeatingGroup.
func NewNoUnderlyingSettlMethodElectionDateBusinessCentersRepeatingGroup() NoUnderlyingSettlMethodElectionDateBusinessCentersRepeatingGroup {
	return NoUnderlyingSettlMethodElectionDateBusinessCentersRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoUnderlyingSettlMethodElectionDateBusinessCenters,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.UnderlyingSettlMethodElectionDateBusinessCenter),
			},
		),
	}
}

// Add create and append a new NoUnderlyingSettlMethodElectionDateBusinessCenters to this group.
func (m NoUnderlyingSettlMethodElectionDateBusinessCentersRepeatingGroup) Add() NoUnderlyingSettlMethodElectionDateBusinessCenters {
	g := m.RepeatingGroup.Add()
	return NoUnderlyingSettlMethodElectionDateBusinessCenters{g}
}

// Get returns the ith NoUnderlyingSettlMethodElectionDateBusinessCenters in the NoUnderlyingSettlMethodElectionDateBusinessCentersRepeatinGroup.
func (m NoUnderlyingSettlMethodElectionDateBusinessCentersRepeatingGroup) Get(i int) NoUnderlyingSettlMethodElectionDateBusinessCenters {
	return NoUnderlyingSettlMethodElectionDateBusinessCenters{m.RepeatingGroup.Get(i)}
}
