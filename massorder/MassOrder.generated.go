package massorder

import (
	"time"

	"github.com/shopspring/decimal"

	"github.com/quickfixgo/enum"
	"github.com/quickfixgo/field"
	"github.com/quickfixgo/fixt11"
	"github.com/quickfixgo/quickfix"
	"github.com/quickfixgo/tag"
)

// MassOrder is the fix50sp2 MassOrder type, MsgType = DJ.
type MassOrder struct {
	fixt11.Header
	*quickfix.Body
	fixt11.Trailer
	Message *quickfix.Message
}

// FromMessage creates a MassOrder from a quickfix.Message instance.
func FromMessage(m *quickfix.Message) MassOrder {
	return MassOrder{
		Header:  fixt11.Header{&m.Header},
		Body:    &m.Body,
		Trailer: fixt11.Trailer{&m.Trailer},
		Message: m,
	}
}

// ToMessage returns a quickfix.Message instance.
func (m MassOrder) ToMessage() *quickfix.Message {
	return m.Message
}

// New returns a MassOrder initialized with the required fields for MassOrder.
func New(massorderrequestid field.MassOrderRequestIDField) (m MassOrder) {
	m.Message = quickfix.NewMessage()
	m.Header = fixt11.NewHeader(&m.Message.Header)
	m.Body = &m.Message.Body
	m.Trailer.Trailer = &m.Message.Trailer

	m.Header.Set(field.NewMsgType("DJ"))
	m.Set(massorderrequestid)

	return
}

// A RouteOut is the callback type that should be implemented for routing Message.
type RouteOut func(msg MassOrder, sessionID quickfix.SessionID) quickfix.MessageRejectError

// Route returns the beginstring, message type, and MessageRoute for this Message type.
func Route(router RouteOut) (string, string, quickfix.MessageRoute) {
	r := func(msg *quickfix.Message, sessionID quickfix.SessionID) quickfix.MessageRejectError {
		return router(FromMessage(msg), sessionID)
	}
	return "9", "DJ", r
}

// SetAccount sets Account, Tag 1.
func (m MassOrder) SetAccount(v string) {
	m.Set(field.NewAccount(v))
}

// SetText sets Text, Tag 58.
func (m MassOrder) SetText(v string) {
	m.Set(field.NewText(v))
}

// SetTransactTime sets TransactTime, Tag 60.
func (m MassOrder) SetTransactTime(v time.Time) {
	m.Set(field.NewTransactTime(v))
}

// SetEncodedTextLen sets EncodedTextLen, Tag 354.
func (m MassOrder) SetEncodedTextLen(v int) {
	m.Set(field.NewEncodedTextLen(v))
}

// SetEncodedText sets EncodedText, Tag 355.
func (m MassOrder) SetEncodedText(v string) {
	m.Set(field.NewEncodedText(v))
}

// SetNoPartyIDs sets NoPartyIDs, Tag 453.
func (m MassOrder) SetNoPartyIDs(f NoPartyIDsRepeatingGroup) {
	m.SetGroup(f)
}

// SetOrderCapacity sets OrderCapacity, Tag 528.
func (m MassOrder) SetOrderCapacity(v enum.OrderCapacity) {
	m.Set(field.NewOrderCapacity(v))
}

// SetOrderRestrictions sets OrderRestrictions, Tag 529.
func (m MassOrder) SetOrderRestrictions(v enum.OrderRestrictions) {
	m.Set(field.NewOrderRestrictions(v))
}

// SetAccountType sets AccountType, Tag 581.
func (m MassOrder) SetAccountType(v enum.AccountType) {
	m.Set(field.NewAccountType(v))
}

// SetCustOrderCapacity sets CustOrderCapacity, Tag 582.
func (m MassOrder) SetCustOrderCapacity(v enum.CustOrderCapacity) {
	m.Set(field.NewCustOrderCapacity(v))
}

// SetAcctIDSource sets AcctIDSource, Tag 660.
func (m MassOrder) SetAcctIDSource(v enum.AcctIDSource) {
	m.Set(field.NewAcctIDSource(v))
}

// SetLastFragment sets LastFragment, Tag 893.
func (m MassOrder) SetLastFragment(v bool) {
	m.Set(field.NewLastFragment(v))
}

// SetManualOrderIndicator sets ManualOrderIndicator, Tag 1028.
func (m MassOrder) SetManualOrderIndicator(v bool) {
	m.Set(field.NewManualOrderIndicator(v))
}

// SetCustOrderHandlingInst sets CustOrderHandlingInst, Tag 1031.
func (m MassOrder) SetCustOrderHandlingInst(v enum.CustOrderHandlingInst) {
	m.Set(field.NewCustOrderHandlingInst(v))
}

// SetMarketSegmentID sets MarketSegmentID, Tag 1300.
func (m MassOrder) SetMarketSegmentID(v string) {
	m.Set(field.NewMarketSegmentID(v))
}

// SetMarketID sets MarketID, Tag 1301.
func (m MassOrder) SetMarketID(v string) {
	m.Set(field.NewMarketID(v))
}

// SetThrottleInst sets ThrottleInst, Tag 1685.
func (m MassOrder) SetThrottleInst(v enum.ThrottleInst) {
	m.Set(field.NewThrottleInst(v))
}

// SetTradingCapacity sets TradingCapacity, Tag 1815.
func (m MassOrder) SetTradingCapacity(v enum.TradingCapacity) {
	m.Set(field.NewTradingCapacity(v))
}

// SetClearingAccountType sets ClearingAccountType, Tag 1816.
func (m MassOrder) SetClearingAccountType(v enum.ClearingAccountType) {
	m.Set(field.NewClearingAccountType(v))
}

// SetMassOrderRequestID sets MassOrderRequestID, Tag 2423.
func (m MassOrder) SetMassOrderRequestID(v string) {
	m.Set(field.NewMassOrderRequestID(v))
}

// SetOrderResponseLevel sets OrderResponseLevel, Tag 2427.
func (m MassOrder) SetOrderResponseLevel(v enum.OrderResponseLevel) {
	m.Set(field.NewOrderResponseLevel(v))
}

// SetNoOrderEntries sets NoOrderEntries, Tag 2428.
func (m MassOrder) SetNoOrderEntries(f NoOrderEntriesRepeatingGroup) {
	m.SetGroup(f)
}

// SetTotNoOrderEntries sets TotNoOrderEntries, Tag 2432.
func (m MassOrder) SetTotNoOrderEntries(v int) {
	m.Set(field.NewTotNoOrderEntries(v))
}

// GetAccount gets Account, Tag 1.
func (m MassOrder) GetAccount() (v string, err quickfix.MessageRejectError) {
	var f field.AccountField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetText gets Text, Tag 58.
func (m MassOrder) GetText() (v string, err quickfix.MessageRejectError) {
	var f field.TextField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetTransactTime gets TransactTime, Tag 60.
func (m MassOrder) GetTransactTime() (v time.Time, err quickfix.MessageRejectError) {
	var f field.TransactTimeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetEncodedTextLen gets EncodedTextLen, Tag 354.
func (m MassOrder) GetEncodedTextLen() (v int, err quickfix.MessageRejectError) {
	var f field.EncodedTextLenField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetEncodedText gets EncodedText, Tag 355.
func (m MassOrder) GetEncodedText() (v string, err quickfix.MessageRejectError) {
	var f field.EncodedTextField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoPartyIDs gets NoPartyIDs, Tag 453.
func (m MassOrder) GetNoPartyIDs() (NoPartyIDsRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoPartyIDsRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetOrderCapacity gets OrderCapacity, Tag 528.
func (m MassOrder) GetOrderCapacity() (v enum.OrderCapacity, err quickfix.MessageRejectError) {
	var f field.OrderCapacityField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetOrderRestrictions gets OrderRestrictions, Tag 529.
func (m MassOrder) GetOrderRestrictions() (v enum.OrderRestrictions, err quickfix.MessageRejectError) {
	var f field.OrderRestrictionsField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetAccountType gets AccountType, Tag 581.
func (m MassOrder) GetAccountType() (v enum.AccountType, err quickfix.MessageRejectError) {
	var f field.AccountTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetCustOrderCapacity gets CustOrderCapacity, Tag 582.
func (m MassOrder) GetCustOrderCapacity() (v enum.CustOrderCapacity, err quickfix.MessageRejectError) {
	var f field.CustOrderCapacityField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetAcctIDSource gets AcctIDSource, Tag 660.
func (m MassOrder) GetAcctIDSource() (v enum.AcctIDSource, err quickfix.MessageRejectError) {
	var f field.AcctIDSourceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetLastFragment gets LastFragment, Tag 893.
func (m MassOrder) GetLastFragment() (v bool, err quickfix.MessageRejectError) {
	var f field.LastFragmentField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetManualOrderIndicator gets ManualOrderIndicator, Tag 1028.
func (m MassOrder) GetManualOrderIndicator() (v bool, err quickfix.MessageRejectError) {
	var f field.ManualOrderIndicatorField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetCustOrderHandlingInst gets CustOrderHandlingInst, Tag 1031.
func (m MassOrder) GetCustOrderHandlingInst() (v enum.CustOrderHandlingInst, err quickfix.MessageRejectError) {
	var f field.CustOrderHandlingInstField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetMarketSegmentID gets MarketSegmentID, Tag 1300.
func (m MassOrder) GetMarketSegmentID() (v string, err quickfix.MessageRejectError) {
	var f field.MarketSegmentIDField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetMarketID gets MarketID, Tag 1301.
func (m MassOrder) GetMarketID() (v string, err quickfix.MessageRejectError) {
	var f field.MarketIDField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetThrottleInst gets ThrottleInst, Tag 1685.
func (m MassOrder) GetThrottleInst() (v enum.ThrottleInst, err quickfix.MessageRejectError) {
	var f field.ThrottleInstField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetTradingCapacity gets TradingCapacity, Tag 1815.
func (m MassOrder) GetTradingCapacity() (v enum.TradingCapacity, err quickfix.MessageRejectError) {
	var f field.TradingCapacityField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetClearingAccountType gets ClearingAccountType, Tag 1816.
func (m MassOrder) GetClearingAccountType() (v enum.ClearingAccountType, err quickfix.MessageRejectError) {
	var f field.ClearingAccountTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetMassOrderRequestID gets MassOrderRequestID, Tag 2423.
func (m MassOrder) GetMassOrderRequestID() (v string, err quickfix.MessageRejectError) {
	var f field.MassOrderRequestIDField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetOrderResponseLevel gets OrderResponseLevel, Tag 2427.
func (m MassOrder) GetOrderResponseLevel() (v enum.OrderResponseLevel, err quickfix.MessageRejectError) {
	var f field.OrderResponseLevelField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoOrderEntries gets NoOrderEntries, Tag 2428.
func (m MassOrder) GetNoOrderEntries() (NoOrderEntriesRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoOrderEntriesRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetTotNoOrderEntries gets TotNoOrderEntries, Tag 2432.
func (m MassOrder) GetTotNoOrderEntries() (v int, err quickfix.MessageRejectError) {
	var f field.TotNoOrderEntriesField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasAccount returns true if Account is present, Tag 1.
func (m MassOrder) HasAccount() bool {
	return m.Has(tag.Account)
}

// HasText returns true if Text is present, Tag 58.
func (m MassOrder) HasText() bool {
	return m.Has(tag.Text)
}

// HasTransactTime returns true if TransactTime is present, Tag 60.
func (m MassOrder) HasTransactTime() bool {
	return m.Has(tag.TransactTime)
}

// HasEncodedTextLen returns true if EncodedTextLen is present, Tag 354.
func (m MassOrder) HasEncodedTextLen() bool {
	return m.Has(tag.EncodedTextLen)
}

// HasEncodedText returns true if EncodedText is present, Tag 355.
func (m MassOrder) HasEncodedText() bool {
	return m.Has(tag.EncodedText)
}

// HasNoPartyIDs returns true if NoPartyIDs is present, Tag 453.
func (m MassOrder) HasNoPartyIDs() bool {
	return m.Has(tag.NoPartyIDs)
}

// HasOrderCapacity returns true if OrderCapacity is present, Tag 528.
func (m MassOrder) HasOrderCapacity() bool {
	return m.Has(tag.OrderCapacity)
}

// HasOrderRestrictions returns true if OrderRestrictions is present, Tag 529.
func (m MassOrder) HasOrderRestrictions() bool {
	return m.Has(tag.OrderRestrictions)
}

// HasAccountType returns true if AccountType is present, Tag 581.
func (m MassOrder) HasAccountType() bool {
	return m.Has(tag.AccountType)
}

// HasCustOrderCapacity returns true if CustOrderCapacity is present, Tag 582.
func (m MassOrder) HasCustOrderCapacity() bool {
	return m.Has(tag.CustOrderCapacity)
}

// HasAcctIDSource returns true if AcctIDSource is present, Tag 660.
func (m MassOrder) HasAcctIDSource() bool {
	return m.Has(tag.AcctIDSource)
}

// HasLastFragment returns true if LastFragment is present, Tag 893.
func (m MassOrder) HasLastFragment() bool {
	return m.Has(tag.LastFragment)
}

// HasManualOrderIndicator returns true if ManualOrderIndicator is present, Tag 1028.
func (m MassOrder) HasManualOrderIndicator() bool {
	return m.Has(tag.ManualOrderIndicator)
}

// HasCustOrderHandlingInst returns true if CustOrderHandlingInst is present, Tag 1031.
func (m MassOrder) HasCustOrderHandlingInst() bool {
	return m.Has(tag.CustOrderHandlingInst)
}

// HasMarketSegmentID returns true if MarketSegmentID is present, Tag 1300.
func (m MassOrder) HasMarketSegmentID() bool {
	return m.Has(tag.MarketSegmentID)
}

// HasMarketID returns true if MarketID is present, Tag 1301.
func (m MassOrder) HasMarketID() bool {
	return m.Has(tag.MarketID)
}

// HasThrottleInst returns true if ThrottleInst is present, Tag 1685.
func (m MassOrder) HasThrottleInst() bool {
	return m.Has(tag.ThrottleInst)
}

// HasTradingCapacity returns true if TradingCapacity is present, Tag 1815.
func (m MassOrder) HasTradingCapacity() bool {
	return m.Has(tag.TradingCapacity)
}

// HasClearingAccountType returns true if ClearingAccountType is present, Tag 1816.
func (m MassOrder) HasClearingAccountType() bool {
	return m.Has(tag.ClearingAccountType)
}

// HasMassOrderRequestID returns true if MassOrderRequestID is present, Tag 2423.
func (m MassOrder) HasMassOrderRequestID() bool {
	return m.Has(tag.MassOrderRequestID)
}

// HasOrderResponseLevel returns true if OrderResponseLevel is present, Tag 2427.
func (m MassOrder) HasOrderResponseLevel() bool {
	return m.Has(tag.OrderResponseLevel)
}

// HasNoOrderEntries returns true if NoOrderEntries is present, Tag 2428.
func (m MassOrder) HasNoOrderEntries() bool {
	return m.Has(tag.NoOrderEntries)
}

// HasTotNoOrderEntries returns true if TotNoOrderEntries is present, Tag 2432.
func (m MassOrder) HasTotNoOrderEntries() bool {
	return m.Has(tag.TotNoOrderEntries)
}

// NoPartyIDs is a repeating group element, Tag 453.
type NoPartyIDs struct {
	*quickfix.Group
}

// SetPartyID sets PartyID, Tag 448.
func (m NoPartyIDs) SetPartyID(v string) {
	m.Set(field.NewPartyID(v))
}

// SetPartyIDSource sets PartyIDSource, Tag 447.
func (m NoPartyIDs) SetPartyIDSource(v enum.PartyIDSource) {
	m.Set(field.NewPartyIDSource(v))
}

// SetPartyRole sets PartyRole, Tag 452.
func (m NoPartyIDs) SetPartyRole(v enum.PartyRole) {
	m.Set(field.NewPartyRole(v))
}

// SetNoPartySubIDs sets NoPartySubIDs, Tag 802.
func (m NoPartyIDs) SetNoPartySubIDs(f NoPartySubIDsRepeatingGroup) {
	m.SetGroup(f)
}

// SetPartyRoleQualifier sets PartyRoleQualifier, Tag 2376.
func (m NoPartyIDs) SetPartyRoleQualifier(v int) {
	m.Set(field.NewPartyRoleQualifier(v))
}

// GetPartyID gets PartyID, Tag 448.
func (m NoPartyIDs) GetPartyID() (v string, err quickfix.MessageRejectError) {
	var f field.PartyIDField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPartyIDSource gets PartyIDSource, Tag 447.
func (m NoPartyIDs) GetPartyIDSource() (v enum.PartyIDSource, err quickfix.MessageRejectError) {
	var f field.PartyIDSourceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPartyRole gets PartyRole, Tag 452.
func (m NoPartyIDs) GetPartyRole() (v enum.PartyRole, err quickfix.MessageRejectError) {
	var f field.PartyRoleField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoPartySubIDs gets NoPartySubIDs, Tag 802.
func (m NoPartyIDs) GetNoPartySubIDs() (NoPartySubIDsRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoPartySubIDsRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetPartyRoleQualifier gets PartyRoleQualifier, Tag 2376.
func (m NoPartyIDs) GetPartyRoleQualifier() (v int, err quickfix.MessageRejectError) {
	var f field.PartyRoleQualifierField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasPartyID returns true if PartyID is present, Tag 448.
func (m NoPartyIDs) HasPartyID() bool {
	return m.Has(tag.PartyID)
}

// HasPartyIDSource returns true if PartyIDSource is present, Tag 447.
func (m NoPartyIDs) HasPartyIDSource() bool {
	return m.Has(tag.PartyIDSource)
}

// HasPartyRole returns true if PartyRole is present, Tag 452.
func (m NoPartyIDs) HasPartyRole() bool {
	return m.Has(tag.PartyRole)
}

// HasNoPartySubIDs returns true if NoPartySubIDs is present, Tag 802.
func (m NoPartyIDs) HasNoPartySubIDs() bool {
	return m.Has(tag.NoPartySubIDs)
}

// HasPartyRoleQualifier returns true if PartyRoleQualifier is present, Tag 2376.
func (m NoPartyIDs) HasPartyRoleQualifier() bool {
	return m.Has(tag.PartyRoleQualifier)
}

// NoPartySubIDs is a repeating group element, Tag 802.
type NoPartySubIDs struct {
	*quickfix.Group
}

// SetPartySubID sets PartySubID, Tag 523.
func (m NoPartySubIDs) SetPartySubID(v string) {
	m.Set(field.NewPartySubID(v))
}

// SetPartySubIDType sets PartySubIDType, Tag 803.
func (m NoPartySubIDs) SetPartySubIDType(v enum.PartySubIDType) {
	m.Set(field.NewPartySubIDType(v))
}

// GetPartySubID gets PartySubID, Tag 523.
func (m NoPartySubIDs) GetPartySubID() (v string, err quickfix.MessageRejectError) {
	var f field.PartySubIDField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPartySubIDType gets PartySubIDType, Tag 803.
func (m NoPartySubIDs) GetPartySubIDType() (v enum.PartySubIDType, err quickfix.MessageRejectError) {
	var f field.PartySubIDTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasPartySubID returns true if PartySubID is present, Tag 523.
func (m NoPartySubIDs) HasPartySubID() bool {
	return m.Has(tag.PartySubID)
}

// HasPartySubIDType returns true if PartySubIDType is present, Tag 803.
func (m NoPartySubIDs) HasPartySubIDType() bool {
	return m.Has(tag.PartySubIDType)
}

// NoPartySubIDsRepeatingGroup is a repeating group, Tag 802.
type NoPartySubIDsRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoPartySubIDsRepeatingGroup returns an initialized, NoPartySubIDsRepeatingGroup.
func NewNoPartySubIDsRepeatingGroup() NoPartySubIDsRepeatingGroup {
	return NoPartySubIDsRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoPartySubIDs,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.PartySubID),
				quickfix.GroupElement(tag.PartySubIDType),
			},
		),
	}
}

// Add create and append a new NoPartySubIDs to this group.
func (m NoPartySubIDsRepeatingGroup) Add() NoPartySubIDs {
	g := m.RepeatingGroup.Add()
	return NoPartySubIDs{g}
}

// Get returns the ith NoPartySubIDs in the NoPartySubIDsRepeatinGroup.
func (m NoPartySubIDsRepeatingGroup) Get(i int) NoPartySubIDs {
	return NoPartySubIDs{m.RepeatingGroup.Get(i)}
}

// NoPartyIDsRepeatingGroup is a repeating group, Tag 453.
type NoPartyIDsRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoPartyIDsRepeatingGroup returns an initialized, NoPartyIDsRepeatingGroup.
func NewNoPartyIDsRepeatingGroup() NoPartyIDsRepeatingGroup {
	return NoPartyIDsRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoPartyIDs,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.PartyID),
				quickfix.GroupElement(tag.PartyIDSource),
				quickfix.GroupElement(tag.PartyRole),
				NewNoPartySubIDsRepeatingGroup(),
				quickfix.GroupElement(tag.PartyRoleQualifier),
			},
		),
	}
}

// Add create and append a new NoPartyIDs to this group.
func (m NoPartyIDsRepeatingGroup) Add() NoPartyIDs {
	g := m.RepeatingGroup.Add()
	return NoPartyIDs{g}
}

// Get returns the ith NoPartyIDs in the NoPartyIDsRepeatinGroup.
func (m NoPartyIDsRepeatingGroup) Get(i int) NoPartyIDs {
	return NoPartyIDs{m.RepeatingGroup.Get(i)}
}

// NoOrderEntries is a repeating group element, Tag 2428.
type NoOrderEntries struct {
	*quickfix.Group
}

// SetOrderEntryAction sets OrderEntryAction, Tag 2429.
func (m NoOrderEntries) SetOrderEntryAction(v enum.OrderEntryAction) {
	m.Set(field.NewOrderEntryAction(v))
}

// SetOrderEntryID sets OrderEntryID, Tag 2430.
func (m NoOrderEntries) SetOrderEntryID(v int) {
	m.Set(field.NewOrderEntryID(v))
}

// SetClOrdID sets ClOrdID, Tag 11.
func (m NoOrderEntries) SetClOrdID(v string) {
	m.Set(field.NewClOrdID(v))
}

// SetOrigClOrdID sets OrigClOrdID, Tag 41.
func (m NoOrderEntries) SetOrigClOrdID(v string) {
	m.Set(field.NewOrigClOrdID(v))
}

// SetOrderID sets OrderID, Tag 37.
func (m NoOrderEntries) SetOrderID(v string) {
	m.Set(field.NewOrderID(v))
}

// SetOrdType sets OrdType, Tag 40.
func (m NoOrderEntries) SetOrdType(v enum.OrdType) {
	m.Set(field.NewOrdType(v))
}

// SetPrice sets Price, Tag 44.
func (m NoOrderEntries) SetPrice(value decimal.Decimal, scale int32) {
	m.Set(field.NewPrice(value, scale))
}

// SetSide sets Side, Tag 54.
func (m NoOrderEntries) SetSide(v enum.Side) {
	m.Set(field.NewSide(v))
}

// SetTimeInForce sets TimeInForce, Tag 59.
func (m NoOrderEntries) SetTimeInForce(v enum.TimeInForce) {
	m.Set(field.NewTimeInForce(v))
}

// SetOrderQty sets OrderQty, Tag 38.
func (m NoOrderEntries) SetOrderQty(value decimal.Decimal, scale int32) {
	m.Set(field.NewOrderQty(value, scale))
}

// SetCashOrderQty sets CashOrderQty, Tag 152.
func (m NoOrderEntries) SetCashOrderQty(value decimal.Decimal, scale int32) {
	m.Set(field.NewCashOrderQty(value, scale))
}

// SetOrderPercent sets OrderPercent, Tag 516.
func (m NoOrderEntries) SetOrderPercent(value decimal.Decimal, scale int32) {
	m.Set(field.NewOrderPercent(value, scale))
}

// SetRoundingDirection sets RoundingDirection, Tag 468.
func (m NoOrderEntries) SetRoundingDirection(v enum.RoundingDirection) {
	m.Set(field.NewRoundingDirection(v))
}

// SetRoundingModulus sets RoundingModulus, Tag 469.
func (m NoOrderEntries) SetRoundingModulus(value decimal.Decimal, scale int32) {
	m.Set(field.NewRoundingModulus(value, scale))
}

// SetSymbol sets Symbol, Tag 55.
func (m NoOrderEntries) SetSymbol(v string) {
	m.Set(field.NewSymbol(v))
}

// SetSymbolSfx sets SymbolSfx, Tag 65.
func (m NoOrderEntries) SetSymbolSfx(v enum.SymbolSfx) {
	m.Set(field.NewSymbolSfx(v))
}

// SetSecurityID sets SecurityID, Tag 48.
func (m NoOrderEntries) SetSecurityID(v string) {
	m.Set(field.NewSecurityID(v))
}

// SetSecurityIDSource sets SecurityIDSource, Tag 22.
func (m NoOrderEntries) SetSecurityIDSource(v enum.SecurityIDSource) {
	m.Set(field.NewSecurityIDSource(v))
}

// SetNoSecurityAltID sets NoSecurityAltID, Tag 454.
func (m NoOrderEntries) SetNoSecurityAltID(f NoSecurityAltIDRepeatingGroup) {
	m.SetGroup(f)
}

// SetProduct sets Product, Tag 460.
func (m NoOrderEntries) SetProduct(v enum.Product) {
	m.Set(field.NewProduct(v))
}

// SetProductComplex sets ProductComplex, Tag 1227.
func (m NoOrderEntries) SetProductComplex(v string) {
	m.Set(field.NewProductComplex(v))
}

// SetSecurityGroup sets SecurityGroup, Tag 1151.
func (m NoOrderEntries) SetSecurityGroup(v string) {
	m.Set(field.NewSecurityGroup(v))
}

// SetCFICode sets CFICode, Tag 461.
func (m NoOrderEntries) SetCFICode(v string) {
	m.Set(field.NewCFICode(v))
}

// SetSecurityType sets SecurityType, Tag 167.
func (m NoOrderEntries) SetSecurityType(v enum.SecurityType) {
	m.Set(field.NewSecurityType(v))
}

// SetSecuritySubType sets SecuritySubType, Tag 762.
func (m NoOrderEntries) SetSecuritySubType(v string) {
	m.Set(field.NewSecuritySubType(v))
}

// SetMaturityMonthYear sets MaturityMonthYear, Tag 200.
func (m NoOrderEntries) SetMaturityMonthYear(v string) {
	m.Set(field.NewMaturityMonthYear(v))
}

// SetMaturityDate sets MaturityDate, Tag 541.
func (m NoOrderEntries) SetMaturityDate(v string) {
	m.Set(field.NewMaturityDate(v))
}

// SetMaturityTime sets MaturityTime, Tag 1079.
func (m NoOrderEntries) SetMaturityTime(v string) {
	m.Set(field.NewMaturityTime(v))
}

// SetSettleOnOpenFlag sets SettleOnOpenFlag, Tag 966.
func (m NoOrderEntries) SetSettleOnOpenFlag(v string) {
	m.Set(field.NewSettleOnOpenFlag(v))
}

// SetInstrmtAssignmentMethod sets InstrmtAssignmentMethod, Tag 1049.
func (m NoOrderEntries) SetInstrmtAssignmentMethod(v enum.InstrmtAssignmentMethod) {
	m.Set(field.NewInstrmtAssignmentMethod(v))
}

// SetSecurityStatus sets SecurityStatus, Tag 965.
func (m NoOrderEntries) SetSecurityStatus(v enum.SecurityStatus) {
	m.Set(field.NewSecurityStatus(v))
}

// SetCouponPaymentDate sets CouponPaymentDate, Tag 224.
func (m NoOrderEntries) SetCouponPaymentDate(v string) {
	m.Set(field.NewCouponPaymentDate(v))
}

// SetIssueDate sets IssueDate, Tag 225.
func (m NoOrderEntries) SetIssueDate(v string) {
	m.Set(field.NewIssueDate(v))
}

// SetRepoCollateralSecurityType sets RepoCollateralSecurityType, Tag 239.
func (m NoOrderEntries) SetRepoCollateralSecurityType(v string) {
	m.Set(field.NewRepoCollateralSecurityType(v))
}

// SetRepurchaseTerm sets RepurchaseTerm, Tag 226.
func (m NoOrderEntries) SetRepurchaseTerm(v int) {
	m.Set(field.NewRepurchaseTerm(v))
}

// SetRepurchaseRate sets RepurchaseRate, Tag 227.
func (m NoOrderEntries) SetRepurchaseRate(value decimal.Decimal, scale int32) {
	m.Set(field.NewRepurchaseRate(value, scale))
}

// SetFactor sets Factor, Tag 228.
func (m NoOrderEntries) SetFactor(value decimal.Decimal, scale int32) {
	m.Set(field.NewFactor(value, scale))
}

// SetCreditRating sets CreditRating, Tag 255.
func (m NoOrderEntries) SetCreditRating(v string) {
	m.Set(field.NewCreditRating(v))
}

// SetInstrRegistry sets InstrRegistry, Tag 543.
func (m NoOrderEntries) SetInstrRegistry(v enum.InstrRegistry) {
	m.Set(field.NewInstrRegistry(v))
}

// SetCountryOfIssue sets CountryOfIssue, Tag 470.
func (m NoOrderEntries) SetCountryOfIssue(v string) {
	m.Set(field.NewCountryOfIssue(v))
}

// SetStateOrProvinceOfIssue sets StateOrProvinceOfIssue, Tag 471.
func (m NoOrderEntries) SetStateOrProvinceOfIssue(v string) {
	m.Set(field.NewStateOrProvinceOfIssue(v))
}

// SetLocaleOfIssue sets LocaleOfIssue, Tag 472.
func (m NoOrderEntries) SetLocaleOfIssue(v string) {
	m.Set(field.NewLocaleOfIssue(v))
}

// SetRedemptionDate sets RedemptionDate, Tag 240.
func (m NoOrderEntries) SetRedemptionDate(v string) {
	m.Set(field.NewRedemptionDate(v))
}

// SetStrikePrice sets StrikePrice, Tag 202.
func (m NoOrderEntries) SetStrikePrice(value decimal.Decimal, scale int32) {
	m.Set(field.NewStrikePrice(value, scale))
}

// SetStrikeCurrency sets StrikeCurrency, Tag 947.
func (m NoOrderEntries) SetStrikeCurrency(v string) {
	m.Set(field.NewStrikeCurrency(v))
}

// SetStrikeMultiplier sets StrikeMultiplier, Tag 967.
func (m NoOrderEntries) SetStrikeMultiplier(value decimal.Decimal, scale int32) {
	m.Set(field.NewStrikeMultiplier(value, scale))
}

// SetStrikeValue sets StrikeValue, Tag 968.
func (m NoOrderEntries) SetStrikeValue(value decimal.Decimal, scale int32) {
	m.Set(field.NewStrikeValue(value, scale))
}

// SetOptAttribute sets OptAttribute, Tag 206.
func (m NoOrderEntries) SetOptAttribute(v string) {
	m.Set(field.NewOptAttribute(v))
}

// SetContractMultiplier sets ContractMultiplier, Tag 231.
func (m NoOrderEntries) SetContractMultiplier(value decimal.Decimal, scale int32) {
	m.Set(field.NewContractMultiplier(value, scale))
}

// SetMinPriceIncrement sets MinPriceIncrement, Tag 969.
func (m NoOrderEntries) SetMinPriceIncrement(value decimal.Decimal, scale int32) {
	m.Set(field.NewMinPriceIncrement(value, scale))
}

// SetMinPriceIncrementAmount sets MinPriceIncrementAmount, Tag 1146.
func (m NoOrderEntries) SetMinPriceIncrementAmount(value decimal.Decimal, scale int32) {
	m.Set(field.NewMinPriceIncrementAmount(value, scale))
}

// SetUnitOfMeasure sets UnitOfMeasure, Tag 996.
func (m NoOrderEntries) SetUnitOfMeasure(v enum.UnitOfMeasure) {
	m.Set(field.NewUnitOfMeasure(v))
}

// SetUnitOfMeasureQty sets UnitOfMeasureQty, Tag 1147.
func (m NoOrderEntries) SetUnitOfMeasureQty(value decimal.Decimal, scale int32) {
	m.Set(field.NewUnitOfMeasureQty(value, scale))
}

// SetPriceUnitOfMeasure sets PriceUnitOfMeasure, Tag 1191.
func (m NoOrderEntries) SetPriceUnitOfMeasure(v string) {
	m.Set(field.NewPriceUnitOfMeasure(v))
}

// SetPriceUnitOfMeasureQty sets PriceUnitOfMeasureQty, Tag 1192.
func (m NoOrderEntries) SetPriceUnitOfMeasureQty(value decimal.Decimal, scale int32) {
	m.Set(field.NewPriceUnitOfMeasureQty(value, scale))
}

// SetSettlMethod sets SettlMethod, Tag 1193.
func (m NoOrderEntries) SetSettlMethod(v enum.SettlMethod) {
	m.Set(field.NewSettlMethod(v))
}

// SetExerciseStyle sets ExerciseStyle, Tag 1194.
func (m NoOrderEntries) SetExerciseStyle(v enum.ExerciseStyle) {
	m.Set(field.NewExerciseStyle(v))
}

// SetOptPayoutAmount sets OptPayoutAmount, Tag 1195.
func (m NoOrderEntries) SetOptPayoutAmount(value decimal.Decimal, scale int32) {
	m.Set(field.NewOptPayoutAmount(value, scale))
}

// SetPriceQuoteMethod sets PriceQuoteMethod, Tag 1196.
func (m NoOrderEntries) SetPriceQuoteMethod(v enum.PriceQuoteMethod) {
	m.Set(field.NewPriceQuoteMethod(v))
}

// SetValuationMethod sets ValuationMethod, Tag 1197.
func (m NoOrderEntries) SetValuationMethod(v enum.ValuationMethod) {
	m.Set(field.NewValuationMethod(v))
}

// SetListMethod sets ListMethod, Tag 1198.
func (m NoOrderEntries) SetListMethod(v enum.ListMethod) {
	m.Set(field.NewListMethod(v))
}

// SetCapPrice sets CapPrice, Tag 1199.
func (m NoOrderEntries) SetCapPrice(value decimal.Decimal, scale int32) {
	m.Set(field.NewCapPrice(value, scale))
}

// SetFloorPrice sets FloorPrice, Tag 1200.
func (m NoOrderEntries) SetFloorPrice(value decimal.Decimal, scale int32) {
	m.Set(field.NewFloorPrice(value, scale))
}

// SetPutOrCall sets PutOrCall, Tag 201.
func (m NoOrderEntries) SetPutOrCall(v enum.PutOrCall) {
	m.Set(field.NewPutOrCall(v))
}

// SetFlexibleIndicator sets FlexibleIndicator, Tag 1244.
func (m NoOrderEntries) SetFlexibleIndicator(v bool) {
	m.Set(field.NewFlexibleIndicator(v))
}

// SetFlexProductEligibilityIndicator sets FlexProductEligibilityIndicator, Tag 1242.
func (m NoOrderEntries) SetFlexProductEligibilityIndicator(v bool) {
	m.Set(field.NewFlexProductEligibilityIndicator(v))
}

// SetTimeUnit sets TimeUnit, Tag 997.
func (m NoOrderEntries) SetTimeUnit(v enum.TimeUnit) {
	m.Set(field.NewTimeUnit(v))
}

// SetCouponRate sets CouponRate, Tag 223.
func (m NoOrderEntries) SetCouponRate(value decimal.Decimal, scale int32) {
	m.Set(field.NewCouponRate(value, scale))
}

// SetSecurityExchange sets SecurityExchange, Tag 207.
func (m NoOrderEntries) SetSecurityExchange(v string) {
	m.Set(field.NewSecurityExchange(v))
}

// SetPositionLimit sets PositionLimit, Tag 970.
func (m NoOrderEntries) SetPositionLimit(v int) {
	m.Set(field.NewPositionLimit(v))
}

// SetNTPositionLimit sets NTPositionLimit, Tag 971.
func (m NoOrderEntries) SetNTPositionLimit(v int) {
	m.Set(field.NewNTPositionLimit(v))
}

// SetIssuer sets Issuer, Tag 106.
func (m NoOrderEntries) SetIssuer(v string) {
	m.Set(field.NewIssuer(v))
}

// SetEncodedIssuerLen sets EncodedIssuerLen, Tag 348.
func (m NoOrderEntries) SetEncodedIssuerLen(v int) {
	m.Set(field.NewEncodedIssuerLen(v))
}

// SetEncodedIssuer sets EncodedIssuer, Tag 349.
func (m NoOrderEntries) SetEncodedIssuer(v string) {
	m.Set(field.NewEncodedIssuer(v))
}

// SetSecurityDesc sets SecurityDesc, Tag 107.
func (m NoOrderEntries) SetSecurityDesc(v string) {
	m.Set(field.NewSecurityDesc(v))
}

// SetEncodedSecurityDescLen sets EncodedSecurityDescLen, Tag 350.
func (m NoOrderEntries) SetEncodedSecurityDescLen(v int) {
	m.Set(field.NewEncodedSecurityDescLen(v))
}

// SetEncodedSecurityDesc sets EncodedSecurityDesc, Tag 351.
func (m NoOrderEntries) SetEncodedSecurityDesc(v string) {
	m.Set(field.NewEncodedSecurityDesc(v))
}

// SetSecurityXMLLen sets SecurityXMLLen, Tag 1184.
func (m NoOrderEntries) SetSecurityXMLLen(v int) {
	m.Set(field.NewSecurityXMLLen(v))
}

// SetSecurityXML sets SecurityXML, Tag 1185.
func (m NoOrderEntries) SetSecurityXML(v string) {
	m.Set(field.NewSecurityXML(v))
}

// SetSecurityXMLSchema sets SecurityXMLSchema, Tag 1186.
func (m NoOrderEntries) SetSecurityXMLSchema(v string) {
	m.Set(field.NewSecurityXMLSchema(v))
}

// SetPool sets Pool, Tag 691.
func (m NoOrderEntries) SetPool(v string) {
	m.Set(field.NewPool(v))
}

// SetContractSettlMonth sets ContractSettlMonth, Tag 667.
func (m NoOrderEntries) SetContractSettlMonth(v string) {
	m.Set(field.NewContractSettlMonth(v))
}

// SetCPProgram sets CPProgram, Tag 875.
func (m NoOrderEntries) SetCPProgram(v enum.CPProgram) {
	m.Set(field.NewCPProgram(v))
}

// SetCPRegType sets CPRegType, Tag 876.
func (m NoOrderEntries) SetCPRegType(v string) {
	m.Set(field.NewCPRegType(v))
}

// SetNoEvents sets NoEvents, Tag 864.
func (m NoOrderEntries) SetNoEvents(f NoEventsRepeatingGroup) {
	m.SetGroup(f)
}

// SetDatedDate sets DatedDate, Tag 873.
func (m NoOrderEntries) SetDatedDate(v string) {
	m.Set(field.NewDatedDate(v))
}

// SetInterestAccrualDate sets InterestAccrualDate, Tag 874.
func (m NoOrderEntries) SetInterestAccrualDate(v string) {
	m.Set(field.NewInterestAccrualDate(v))
}

// SetNoInstrumentParties sets NoInstrumentParties, Tag 1018.
func (m NoOrderEntries) SetNoInstrumentParties(f NoInstrumentPartiesRepeatingGroup) {
	m.SetGroup(f)
}

// SetContractMultiplierUnit sets ContractMultiplierUnit, Tag 1435.
func (m NoOrderEntries) SetContractMultiplierUnit(v enum.ContractMultiplierUnit) {
	m.Set(field.NewContractMultiplierUnit(v))
}

// SetFlowScheduleType sets FlowScheduleType, Tag 1439.
func (m NoOrderEntries) SetFlowScheduleType(v enum.FlowScheduleType) {
	m.Set(field.NewFlowScheduleType(v))
}

// SetRestructuringType sets RestructuringType, Tag 1449.
func (m NoOrderEntries) SetRestructuringType(v enum.RestructuringType) {
	m.Set(field.NewRestructuringType(v))
}

// SetSeniority sets Seniority, Tag 1450.
func (m NoOrderEntries) SetSeniority(v enum.Seniority) {
	m.Set(field.NewSeniority(v))
}

// SetNotionalPercentageOutstanding sets NotionalPercentageOutstanding, Tag 1451.
func (m NoOrderEntries) SetNotionalPercentageOutstanding(value decimal.Decimal, scale int32) {
	m.Set(field.NewNotionalPercentageOutstanding(value, scale))
}

// SetOriginalNotionalPercentageOutstanding sets OriginalNotionalPercentageOutstanding, Tag 1452.
func (m NoOrderEntries) SetOriginalNotionalPercentageOutstanding(value decimal.Decimal, scale int32) {
	m.Set(field.NewOriginalNotionalPercentageOutstanding(value, scale))
}

// SetAttachmentPoint sets AttachmentPoint, Tag 1457.
func (m NoOrderEntries) SetAttachmentPoint(value decimal.Decimal, scale int32) {
	m.Set(field.NewAttachmentPoint(value, scale))
}

// SetDetachmentPoint sets DetachmentPoint, Tag 1458.
func (m NoOrderEntries) SetDetachmentPoint(value decimal.Decimal, scale int32) {
	m.Set(field.NewDetachmentPoint(value, scale))
}

// SetStrikePriceDeterminationMethod sets StrikePriceDeterminationMethod, Tag 1478.
func (m NoOrderEntries) SetStrikePriceDeterminationMethod(v enum.StrikePriceDeterminationMethod) {
	m.Set(field.NewStrikePriceDeterminationMethod(v))
}

// SetStrikePriceBoundaryMethod sets StrikePriceBoundaryMethod, Tag 1479.
func (m NoOrderEntries) SetStrikePriceBoundaryMethod(v enum.StrikePriceBoundaryMethod) {
	m.Set(field.NewStrikePriceBoundaryMethod(v))
}

// SetStrikePriceBoundaryPrecision sets StrikePriceBoundaryPrecision, Tag 1480.
func (m NoOrderEntries) SetStrikePriceBoundaryPrecision(value decimal.Decimal, scale int32) {
	m.Set(field.NewStrikePriceBoundaryPrecision(value, scale))
}

// SetUnderlyingPriceDeterminationMethod sets UnderlyingPriceDeterminationMethod, Tag 1481.
func (m NoOrderEntries) SetUnderlyingPriceDeterminationMethod(v enum.UnderlyingPriceDeterminationMethod) {
	m.Set(field.NewUnderlyingPriceDeterminationMethod(v))
}

// SetOptPayoutType sets OptPayoutType, Tag 1482.
func (m NoOrderEntries) SetOptPayoutType(v enum.OptPayoutType) {
	m.Set(field.NewOptPayoutType(v))
}

// SetNoComplexEvents sets NoComplexEvents, Tag 1483.
func (m NoOrderEntries) SetNoComplexEvents(f NoComplexEventsRepeatingGroup) {
	m.SetGroup(f)
}

// SetPriceQuoteCurrency sets PriceQuoteCurrency, Tag 1524.
func (m NoOrderEntries) SetPriceQuoteCurrency(v string) {
	m.Set(field.NewPriceQuoteCurrency(v))
}

// SetObligationType sets ObligationType, Tag 1739.
func (m NoOrderEntries) SetObligationType(v enum.ObligationType) {
	m.Set(field.NewObligationType(v))
}

// SetShortSaleRestriction sets ShortSaleRestriction, Tag 1687.
func (m NoOrderEntries) SetShortSaleRestriction(v enum.ShortSaleRestriction) {
	m.Set(field.NewShortSaleRestriction(v))
}

// SetUnitOfMeasureCurrency sets UnitOfMeasureCurrency, Tag 1716.
func (m NoOrderEntries) SetUnitOfMeasureCurrency(v string) {
	m.Set(field.NewUnitOfMeasureCurrency(v))
}

// SetPriceUnitOfMeasureCurrency sets PriceUnitOfMeasureCurrency, Tag 1717.
func (m NoOrderEntries) SetPriceUnitOfMeasureCurrency(v string) {
	m.Set(field.NewPriceUnitOfMeasureCurrency(v))
}

// SetRefTickTableID sets RefTickTableID, Tag 1787.
func (m NoOrderEntries) SetRefTickTableID(v int) {
	m.Set(field.NewRefTickTableID(v))
}

// SetAssetClass sets AssetClass, Tag 1938.
func (m NoOrderEntries) SetAssetClass(v enum.AssetClass) {
	m.Set(field.NewAssetClass(v))
}

// SetAssetSubClass sets AssetSubClass, Tag 1939.
func (m NoOrderEntries) SetAssetSubClass(v enum.AssetSubClass) {
	m.Set(field.NewAssetSubClass(v))
}

// SetAssetType sets AssetType, Tag 1940.
func (m NoOrderEntries) SetAssetType(v string) {
	m.Set(field.NewAssetType(v))
}

// SetNoSecondaryAssetClasses sets NoSecondaryAssetClasses, Tag 1976.
func (m NoOrderEntries) SetNoSecondaryAssetClasses(f NoSecondaryAssetClassesRepeatingGroup) {
	m.SetGroup(f)
}

// SetSwapClass sets SwapClass, Tag 1941.
func (m NoOrderEntries) SetSwapClass(v enum.SwapClass) {
	m.Set(field.NewSwapClass(v))
}

// SetNthToDefault sets NthToDefault, Tag 1942.
func (m NoOrderEntries) SetNthToDefault(v int) {
	m.Set(field.NewNthToDefault(v))
}

// SetMthToDefault sets MthToDefault, Tag 1943.
func (m NoOrderEntries) SetMthToDefault(v int) {
	m.Set(field.NewMthToDefault(v))
}

// SetSettledEntityMatrixSource sets SettledEntityMatrixSource, Tag 1944.
func (m NoOrderEntries) SetSettledEntityMatrixSource(v string) {
	m.Set(field.NewSettledEntityMatrixSource(v))
}

// SetSettledEntityMatrixPublicationDate sets SettledEntityMatrixPublicationDate, Tag 1945.
func (m NoOrderEntries) SetSettledEntityMatrixPublicationDate(v string) {
	m.Set(field.NewSettledEntityMatrixPublicationDate(v))
}

// SetCouponType sets CouponType, Tag 1946.
func (m NoOrderEntries) SetCouponType(v enum.CouponType) {
	m.Set(field.NewCouponType(v))
}

// SetTotalIssuedAmount sets TotalIssuedAmount, Tag 1947.
func (m NoOrderEntries) SetTotalIssuedAmount(value decimal.Decimal, scale int32) {
	m.Set(field.NewTotalIssuedAmount(value, scale))
}

// SetCouponFrequencyPeriod sets CouponFrequencyPeriod, Tag 1948.
func (m NoOrderEntries) SetCouponFrequencyPeriod(v int) {
	m.Set(field.NewCouponFrequencyPeriod(v))
}

// SetCouponFrequencyUnit sets CouponFrequencyUnit, Tag 1949.
func (m NoOrderEntries) SetCouponFrequencyUnit(v enum.CouponFrequencyUnit) {
	m.Set(field.NewCouponFrequencyUnit(v))
}

// SetCouponDayCount sets CouponDayCount, Tag 1950.
func (m NoOrderEntries) SetCouponDayCount(v enum.CouponDayCount) {
	m.Set(field.NewCouponDayCount(v))
}

// SetConvertibleBondEquityID sets ConvertibleBondEquityID, Tag 1951.
func (m NoOrderEntries) SetConvertibleBondEquityID(v string) {
	m.Set(field.NewConvertibleBondEquityID(v))
}

// SetConvertibleBondEquityIDSource sets ConvertibleBondEquityIDSource, Tag 1952.
func (m NoOrderEntries) SetConvertibleBondEquityIDSource(v string) {
	m.Set(field.NewConvertibleBondEquityIDSource(v))
}

// SetContractPriceRefMonth sets ContractPriceRefMonth, Tag 1953.
func (m NoOrderEntries) SetContractPriceRefMonth(v string) {
	m.Set(field.NewContractPriceRefMonth(v))
}

// SetLienSeniority sets LienSeniority, Tag 1954.
func (m NoOrderEntries) SetLienSeniority(v enum.LienSeniority) {
	m.Set(field.NewLienSeniority(v))
}

// SetLoanFacility sets LoanFacility, Tag 1955.
func (m NoOrderEntries) SetLoanFacility(v enum.LoanFacility) {
	m.Set(field.NewLoanFacility(v))
}

// SetReferenceEntityType sets ReferenceEntityType, Tag 1956.
func (m NoOrderEntries) SetReferenceEntityType(v enum.ReferenceEntityType) {
	m.Set(field.NewReferenceEntityType(v))
}

// SetIndexSeries sets IndexSeries, Tag 1957.
func (m NoOrderEntries) SetIndexSeries(v int) {
	m.Set(field.NewIndexSeries(v))
}

// SetIndexAnnexVersion sets IndexAnnexVersion, Tag 1958.
func (m NoOrderEntries) SetIndexAnnexVersion(v int) {
	m.Set(field.NewIndexAnnexVersion(v))
}

// SetIndexAnnexDate sets IndexAnnexDate, Tag 1959.
func (m NoOrderEntries) SetIndexAnnexDate(v string) {
	m.Set(field.NewIndexAnnexDate(v))
}

// SetIndexAnnexSource sets IndexAnnexSource, Tag 1960.
func (m NoOrderEntries) SetIndexAnnexSource(v string) {
	m.Set(field.NewIndexAnnexSource(v))
}

// SetBusinessDayConvention sets BusinessDayConvention, Tag 40921.
func (m NoOrderEntries) SetBusinessDayConvention(v enum.BusinessDayConvention) {
	m.Set(field.NewBusinessDayConvention(v))
}

// SetNoBusinessCenters sets NoBusinessCenters, Tag 40278.
func (m NoOrderEntries) SetNoBusinessCenters(f NoBusinessCentersRepeatingGroup) {
	m.SetGroup(f)
}

// SetDateRollConvention sets DateRollConvention, Tag 40922.
func (m NoOrderEntries) SetDateRollConvention(v enum.DateRollConvention) {
	m.Set(field.NewDateRollConvention(v))
}

// SetNoStreams sets NoStreams, Tag 40049.
func (m NoOrderEntries) SetNoStreams(f NoStreamsRepeatingGroup) {
	m.SetGroup(f)
}

// SetNoProvisions sets NoProvisions, Tag 40090.
func (m NoOrderEntries) SetNoProvisions(f NoProvisionsRepeatingGroup) {
	m.SetGroup(f)
}

// SetNoAdditionalTerms sets NoAdditionalTerms, Tag 40019.
func (m NoOrderEntries) SetNoAdditionalTerms(f NoAdditionalTermsRepeatingGroup) {
	m.SetGroup(f)
}

// SetNoProtectionTerms sets NoProtectionTerms, Tag 40181.
func (m NoOrderEntries) SetNoProtectionTerms(f NoProtectionTermsRepeatingGroup) {
	m.SetGroup(f)
}

// SetNoCashSettlTerms sets NoCashSettlTerms, Tag 40022.
func (m NoOrderEntries) SetNoCashSettlTerms(f NoCashSettlTermsRepeatingGroup) {
	m.SetGroup(f)
}

// SetNoPhysicalSettlTerms sets NoPhysicalSettlTerms, Tag 40204.
func (m NoOrderEntries) SetNoPhysicalSettlTerms(f NoPhysicalSettlTermsRepeatingGroup) {
	m.SetGroup(f)
}

// SetNoAssetAttributes sets NoAssetAttributes, Tag 2304.
func (m NoOrderEntries) SetNoAssetAttributes(f NoAssetAttributesRepeatingGroup) {
	m.SetGroup(f)
}

// SetSwapSubClass sets SwapSubClass, Tag 1575.
func (m NoOrderEntries) SetSwapSubClass(v enum.SwapSubClass) {
	m.Set(field.NewSwapSubClass(v))
}

// SetSettlRateIndex sets SettlRateIndex, Tag 1577.
func (m NoOrderEntries) SetSettlRateIndex(v string) {
	m.Set(field.NewSettlRateIndex(v))
}

// SetSettlRateIndexLocation sets SettlRateIndexLocation, Tag 1580.
func (m NoOrderEntries) SetSettlRateIndexLocation(v string) {
	m.Set(field.NewSettlRateIndexLocation(v))
}

// SetOptionExpirationDesc sets OptionExpirationDesc, Tag 1581.
func (m NoOrderEntries) SetOptionExpirationDesc(v string) {
	m.Set(field.NewOptionExpirationDesc(v))
}

// SetEncodedOptionExpirationDescLen sets EncodedOptionExpirationDescLen, Tag 1678.
func (m NoOrderEntries) SetEncodedOptionExpirationDescLen(v int) {
	m.Set(field.NewEncodedOptionExpirationDescLen(v))
}

// SetEncodedOptionExpirationDesc sets EncodedOptionExpirationDesc, Tag 1697.
func (m NoOrderEntries) SetEncodedOptionExpirationDesc(v string) {
	m.Set(field.NewEncodedOptionExpirationDesc(v))
}

// SetStrikeUnitOfMeasure sets StrikeUnitOfMeasure, Tag 1698.
func (m NoOrderEntries) SetStrikeUnitOfMeasure(v string) {
	m.Set(field.NewStrikeUnitOfMeasure(v))
}

// SetStrikeIndex sets StrikeIndex, Tag 1866.
func (m NoOrderEntries) SetStrikeIndex(v string) {
	m.Set(field.NewStrikeIndex(v))
}

// SetStrikeIndexSpread sets StrikeIndexSpread, Tag 2001.
func (m NoOrderEntries) SetStrikeIndexSpread(value decimal.Decimal, scale int32) {
	m.Set(field.NewStrikeIndexSpread(value, scale))
}

// SetValuationSource sets ValuationSource, Tag 2002.
func (m NoOrderEntries) SetValuationSource(v string) {
	m.Set(field.NewValuationSource(v))
}

// SetValuationReferenceModel sets ValuationReferenceModel, Tag 2140.
func (m NoOrderEntries) SetValuationReferenceModel(v string) {
	m.Set(field.NewValuationReferenceModel(v))
}

// SetStrategyType sets StrategyType, Tag 2141.
func (m NoOrderEntries) SetStrategyType(v enum.StrategyType) {
	m.Set(field.NewStrategyType(v))
}

// SetCommonPricingIndicator sets CommonPricingIndicator, Tag 2142.
func (m NoOrderEntries) SetCommonPricingIndicator(v bool) {
	m.Set(field.NewCommonPricingIndicator(v))
}

// SetSettlDisruptionProvision sets SettlDisruptionProvision, Tag 2143.
func (m NoOrderEntries) SetSettlDisruptionProvision(v enum.SettlDisruptionProvision) {
	m.Set(field.NewSettlDisruptionProvision(v))
}

// SetInstrumentRoundingDirection sets InstrumentRoundingDirection, Tag 2144.
func (m NoOrderEntries) SetInstrumentRoundingDirection(v string) {
	m.Set(field.NewInstrumentRoundingDirection(v))
}

// SetInstrumentRoundingPrecision sets InstrumentRoundingPrecision, Tag 2145.
func (m NoOrderEntries) SetInstrumentRoundingPrecision(v int) {
	m.Set(field.NewInstrumentRoundingPrecision(v))
}

// SetPricingDateUnadjusted sets PricingDateUnadjusted, Tag 41232.
func (m NoOrderEntries) SetPricingDateUnadjusted(v string) {
	m.Set(field.NewPricingDateUnadjusted(v))
}

// SetPricingDateBusinessDayConvention sets PricingDateBusinessDayConvention, Tag 41233.
func (m NoOrderEntries) SetPricingDateBusinessDayConvention(v int) {
	m.Set(field.NewPricingDateBusinessDayConvention(v))
}

// SetNoPricingDateBusinessCenters sets NoPricingDateBusinessCenters, Tag 41230.
func (m NoOrderEntries) SetNoPricingDateBusinessCenters(f NoPricingDateBusinessCentersRepeatingGroup) {
	m.SetGroup(f)
}

// SetPricingDateAdjusted sets PricingDateAdjusted, Tag 41234.
func (m NoOrderEntries) SetPricingDateAdjusted(v string) {
	m.Set(field.NewPricingDateAdjusted(v))
}

// SetPricingTime sets PricingTime, Tag 41235.
func (m NoOrderEntries) SetPricingTime(v string) {
	m.Set(field.NewPricingTime(v))
}

// SetPricingTimeBusinessCenter sets PricingTimeBusinessCenter, Tag 41236.
func (m NoOrderEntries) SetPricingTimeBusinessCenter(v string) {
	m.Set(field.NewPricingTimeBusinessCenter(v))
}

// SetMarketDisruptionProvision sets MarketDisruptionProvision, Tag 41087.
func (m NoOrderEntries) SetMarketDisruptionProvision(v enum.MarketDisruptionProvision) {
	m.Set(field.NewMarketDisruptionProvision(v))
}

// SetNoMarketDisruptionEvents sets NoMarketDisruptionEvents, Tag 41092.
func (m NoOrderEntries) SetNoMarketDisruptionEvents(f NoMarketDisruptionEventsRepeatingGroup) {
	m.SetGroup(f)
}

// SetMarketDisruptionFallbackProvision sets MarketDisruptionFallbackProvision, Tag 41088.
func (m NoOrderEntries) SetMarketDisruptionFallbackProvision(v enum.MarketDisruptionFallbackProvision) {
	m.Set(field.NewMarketDisruptionFallbackProvision(v))
}

// SetNoMarketDisruptionFallbacks sets NoMarketDisruptionFallbacks, Tag 41094.
func (m NoOrderEntries) SetNoMarketDisruptionFallbacks(f NoMarketDisruptionFallbacksRepeatingGroup) {
	m.SetGroup(f)
}

// SetNoMarketDisruptionFallbackReferencePrices sets NoMarketDisruptionFallbackReferencePrices, Tag 41096.
func (m NoOrderEntries) SetNoMarketDisruptionFallbackReferencePrices(f NoMarketDisruptionFallbackReferencePricesRepeatingGroup) {
	m.SetGroup(f)
}

// SetMarketDisruptionMaximumDays sets MarketDisruptionMaximumDays, Tag 41089.
func (m NoOrderEntries) SetMarketDisruptionMaximumDays(v int) {
	m.Set(field.NewMarketDisruptionMaximumDays(v))
}

// SetMarketDisruptionMaterialityPercentage sets MarketDisruptionMaterialityPercentage, Tag 41090.
func (m NoOrderEntries) SetMarketDisruptionMaterialityPercentage(value decimal.Decimal, scale int32) {
	m.Set(field.NewMarketDisruptionMaterialityPercentage(value, scale))
}

// SetMarketDisruptionMinimumFuturesContracts sets MarketDisruptionMinimumFuturesContracts, Tag 41091.
func (m NoOrderEntries) SetMarketDisruptionMinimumFuturesContracts(v int) {
	m.Set(field.NewMarketDisruptionMinimumFuturesContracts(v))
}

// SetExerciseDesc sets ExerciseDesc, Tag 41106.
func (m NoOrderEntries) SetExerciseDesc(v string) {
	m.Set(field.NewExerciseDesc(v))
}

// SetEncodedExerciseDescLen sets EncodedExerciseDescLen, Tag 41107.
func (m NoOrderEntries) SetEncodedExerciseDescLen(v int) {
	m.Set(field.NewEncodedExerciseDescLen(v))
}

// SetEncodedExerciseDesc sets EncodedExerciseDesc, Tag 41108.
func (m NoOrderEntries) SetEncodedExerciseDesc(v string) {
	m.Set(field.NewEncodedExerciseDesc(v))
}

// SetAutomaticExerciseIndicator sets AutomaticExerciseIndicator, Tag 41109.
func (m NoOrderEntries) SetAutomaticExerciseIndicator(v bool) {
	m.Set(field.NewAutomaticExerciseIndicator(v))
}

// SetAutomaticExerciseThresholdRate sets AutomaticExerciseThresholdRate, Tag 41110.
func (m NoOrderEntries) SetAutomaticExerciseThresholdRate(value decimal.Decimal, scale int32) {
	m.Set(field.NewAutomaticExerciseThresholdRate(value, scale))
}

// SetExerciseConfirmationMethod sets ExerciseConfirmationMethod, Tag 41111.
func (m NoOrderEntries) SetExerciseConfirmationMethod(v enum.ExerciseConfirmationMethod) {
	m.Set(field.NewExerciseConfirmationMethod(v))
}

// SetManualNoticeBusinessCenter sets ManualNoticeBusinessCenter, Tag 41112.
func (m NoOrderEntries) SetManualNoticeBusinessCenter(v string) {
	m.Set(field.NewManualNoticeBusinessCenter(v))
}

// SetFallbackExerciseIndicator sets FallbackExerciseIndicator, Tag 41113.
func (m NoOrderEntries) SetFallbackExerciseIndicator(v bool) {
	m.Set(field.NewFallbackExerciseIndicator(v))
}

// SetLimitedRightToConfirmIndicator sets LimitedRightToConfirmIndicator, Tag 41114.
func (m NoOrderEntries) SetLimitedRightToConfirmIndicator(v bool) {
	m.Set(field.NewLimitedRightToConfirmIndicator(v))
}

// SetExerciseSplitTicketIndicator sets ExerciseSplitTicketIndicator, Tag 41115.
func (m NoOrderEntries) SetExerciseSplitTicketIndicator(v bool) {
	m.Set(field.NewExerciseSplitTicketIndicator(v))
}

// SetOptionExerciseBusinessDayConvention sets OptionExerciseBusinessDayConvention, Tag 41118.
func (m NoOrderEntries) SetOptionExerciseBusinessDayConvention(v int) {
	m.Set(field.NewOptionExerciseBusinessDayConvention(v))
}

// SetNoOptionExerciseBusinessCenters sets NoOptionExerciseBusinessCenters, Tag 41116.
func (m NoOrderEntries) SetNoOptionExerciseBusinessCenters(f NoOptionExerciseBusinessCentersRepeatingGroup) {
	m.SetGroup(f)
}

// SetNoOptionExerciseDates sets NoOptionExerciseDates, Tag 41137.
func (m NoOrderEntries) SetNoOptionExerciseDates(f NoOptionExerciseDatesRepeatingGroup) {
	m.SetGroup(f)
}

// SetOptionExerciseEarliestDateOffsetDayType sets OptionExerciseEarliestDateOffsetDayType, Tag 41119.
func (m NoOrderEntries) SetOptionExerciseEarliestDateOffsetDayType(v int) {
	m.Set(field.NewOptionExerciseEarliestDateOffsetDayType(v))
}

// SetOptionExerciseEarliestDateOffsetPeriod sets OptionExerciseEarliestDateOffsetPeriod, Tag 41120.
func (m NoOrderEntries) SetOptionExerciseEarliestDateOffsetPeriod(v int) {
	m.Set(field.NewOptionExerciseEarliestDateOffsetPeriod(v))
}

// SetOptionExerciseEarliestDateOffsetUnit sets OptionExerciseEarliestDateOffsetUnit, Tag 41121.
func (m NoOrderEntries) SetOptionExerciseEarliestDateOffsetUnit(v string) {
	m.Set(field.NewOptionExerciseEarliestDateOffsetUnit(v))
}

// SetOptionExerciseFrequencyPeriod sets OptionExerciseFrequencyPeriod, Tag 41122.
func (m NoOrderEntries) SetOptionExerciseFrequencyPeriod(v int) {
	m.Set(field.NewOptionExerciseFrequencyPeriod(v))
}

// SetOptionExerciseFrequencyUnit sets OptionExerciseFrequencyUnit, Tag 41123.
func (m NoOrderEntries) SetOptionExerciseFrequencyUnit(v string) {
	m.Set(field.NewOptionExerciseFrequencyUnit(v))
}

// SetOptionExerciseStartDateUnadjusted sets OptionExerciseStartDateUnadjusted, Tag 41124.
func (m NoOrderEntries) SetOptionExerciseStartDateUnadjusted(v string) {
	m.Set(field.NewOptionExerciseStartDateUnadjusted(v))
}

// SetOptionExerciseStartDateRelativeTo sets OptionExerciseStartDateRelativeTo, Tag 41125.
func (m NoOrderEntries) SetOptionExerciseStartDateRelativeTo(v int) {
	m.Set(field.NewOptionExerciseStartDateRelativeTo(v))
}

// SetOptionExerciseStartDateOffsetPeriod sets OptionExerciseStartDateOffsetPeriod, Tag 41126.
func (m NoOrderEntries) SetOptionExerciseStartDateOffsetPeriod(v int) {
	m.Set(field.NewOptionExerciseStartDateOffsetPeriod(v))
}

// SetOptionExerciseStartDateOffsetUnit sets OptionExerciseStartDateOffsetUnit, Tag 41127.
func (m NoOrderEntries) SetOptionExerciseStartDateOffsetUnit(v string) {
	m.Set(field.NewOptionExerciseStartDateOffsetUnit(v))
}

// SetOptionExerciseStartDateOffsetDayType sets OptionExerciseStartDateOffsetDayType, Tag 41128.
func (m NoOrderEntries) SetOptionExerciseStartDateOffsetDayType(v int) {
	m.Set(field.NewOptionExerciseStartDateOffsetDayType(v))
}

// SetOptionExerciseStartDateAdjusted sets OptionExerciseStartDateAdjusted, Tag 41129.
func (m NoOrderEntries) SetOptionExerciseStartDateAdjusted(v string) {
	m.Set(field.NewOptionExerciseStartDateAdjusted(v))
}

// SetOptionExerciseSkip sets OptionExerciseSkip, Tag 41130.
func (m NoOrderEntries) SetOptionExerciseSkip(v int) {
	m.Set(field.NewOptionExerciseSkip(v))
}

// SetOptionExerciseNominationDeadline sets OptionExerciseNominationDeadline, Tag 41131.
func (m NoOrderEntries) SetOptionExerciseNominationDeadline(v string) {
	m.Set(field.NewOptionExerciseNominationDeadline(v))
}

// SetOptionExerciseFirstDateUnadjusted sets OptionExerciseFirstDateUnadjusted, Tag 41132.
func (m NoOrderEntries) SetOptionExerciseFirstDateUnadjusted(v string) {
	m.Set(field.NewOptionExerciseFirstDateUnadjusted(v))
}

// SetOptionExerciseLastDateUnadjusted sets OptionExerciseLastDateUnadjusted, Tag 41133.
func (m NoOrderEntries) SetOptionExerciseLastDateUnadjusted(v string) {
	m.Set(field.NewOptionExerciseLastDateUnadjusted(v))
}

// SetOptionExerciseEarliestTime sets OptionExerciseEarliestTime, Tag 41134.
func (m NoOrderEntries) SetOptionExerciseEarliestTime(v string) {
	m.Set(field.NewOptionExerciseEarliestTime(v))
}

// SetOptionExerciseLatestTime sets OptionExerciseLatestTime, Tag 41135.
func (m NoOrderEntries) SetOptionExerciseLatestTime(v string) {
	m.Set(field.NewOptionExerciseLatestTime(v))
}

// SetOptionExerciseTimeBusinessCenter sets OptionExerciseTimeBusinessCenter, Tag 41136.
func (m NoOrderEntries) SetOptionExerciseTimeBusinessCenter(v string) {
	m.Set(field.NewOptionExerciseTimeBusinessCenter(v))
}

// SetOptionExerciseExpirationDateBusinessDayConvention sets OptionExerciseExpirationDateBusinessDayConvention, Tag 41142.
func (m NoOrderEntries) SetOptionExerciseExpirationDateBusinessDayConvention(v int) {
	m.Set(field.NewOptionExerciseExpirationDateBusinessDayConvention(v))
}

// SetNoOptionExerciseExpirationDateBusinessCenters sets NoOptionExerciseExpirationDateBusinessCenters, Tag 41140.
func (m NoOrderEntries) SetNoOptionExerciseExpirationDateBusinessCenters(f NoOptionExerciseExpirationDateBusinessCentersRepeatingGroup) {
	m.SetGroup(f)
}

// SetNoOptionExerciseExpirationDates sets NoOptionExerciseExpirationDates, Tag 41152.
func (m NoOrderEntries) SetNoOptionExerciseExpirationDates(f NoOptionExerciseExpirationDatesRepeatingGroup) {
	m.SetGroup(f)
}

// SetOptionExerciseExpirationDateRelativeTo sets OptionExerciseExpirationDateRelativeTo, Tag 41143.
func (m NoOrderEntries) SetOptionExerciseExpirationDateRelativeTo(v int) {
	m.Set(field.NewOptionExerciseExpirationDateRelativeTo(v))
}

// SetOptionExerciseExpirationDateOffsetPeriod sets OptionExerciseExpirationDateOffsetPeriod, Tag 41144.
func (m NoOrderEntries) SetOptionExerciseExpirationDateOffsetPeriod(v int) {
	m.Set(field.NewOptionExerciseExpirationDateOffsetPeriod(v))
}

// SetOptionExerciseExpirationDateOffsetUnit sets OptionExerciseExpirationDateOffsetUnit, Tag 41145.
func (m NoOrderEntries) SetOptionExerciseExpirationDateOffsetUnit(v string) {
	m.Set(field.NewOptionExerciseExpirationDateOffsetUnit(v))
}

// SetOptionExerciseExpirationFrequencyPeriod sets OptionExerciseExpirationFrequencyPeriod, Tag 41146.
func (m NoOrderEntries) SetOptionExerciseExpirationFrequencyPeriod(v int) {
	m.Set(field.NewOptionExerciseExpirationFrequencyPeriod(v))
}

// SetOptionExerciseExpirationFrequencyUnit sets OptionExerciseExpirationFrequencyUnit, Tag 41147.
func (m NoOrderEntries) SetOptionExerciseExpirationFrequencyUnit(v string) {
	m.Set(field.NewOptionExerciseExpirationFrequencyUnit(v))
}

// SetOptionExerciseExpirationRollConvention sets OptionExerciseExpirationRollConvention, Tag 41148.
func (m NoOrderEntries) SetOptionExerciseExpirationRollConvention(v string) {
	m.Set(field.NewOptionExerciseExpirationRollConvention(v))
}

// SetOptionExerciseExpirationDateOffsetDayType sets OptionExerciseExpirationDateOffsetDayType, Tag 41149.
func (m NoOrderEntries) SetOptionExerciseExpirationDateOffsetDayType(v int) {
	m.Set(field.NewOptionExerciseExpirationDateOffsetDayType(v))
}

// SetOptionExerciseExpirationTime sets OptionExerciseExpirationTime, Tag 41150.
func (m NoOrderEntries) SetOptionExerciseExpirationTime(v string) {
	m.Set(field.NewOptionExerciseExpirationTime(v))
}

// SetOptionExerciseExpirationTimeBusinessCenter sets OptionExerciseExpirationTimeBusinessCenter, Tag 41151.
func (m NoOrderEntries) SetOptionExerciseExpirationTimeBusinessCenter(v string) {
	m.Set(field.NewOptionExerciseExpirationTimeBusinessCenter(v))
}

// SetSettlMethodElectingPartySide sets SettlMethodElectingPartySide, Tag 42590.
func (m NoOrderEntries) SetSettlMethodElectingPartySide(v int) {
	m.Set(field.NewSettlMethodElectingPartySide(v))
}

// SetSettlMethodElectionDateUnadjusted sets SettlMethodElectionDateUnadjusted, Tag 42777.
func (m NoOrderEntries) SetSettlMethodElectionDateUnadjusted(v string) {
	m.Set(field.NewSettlMethodElectionDateUnadjusted(v))
}

// SetSettlMethodElectionDateBusinessDayConvention sets SettlMethodElectionDateBusinessDayConvention, Tag 42778.
func (m NoOrderEntries) SetSettlMethodElectionDateBusinessDayConvention(v int) {
	m.Set(field.NewSettlMethodElectionDateBusinessDayConvention(v))
}

// SetNoSettlMethodElectionDateBusinessCenters sets NoSettlMethodElectionDateBusinessCenters, Tag 42775.
func (m NoOrderEntries) SetNoSettlMethodElectionDateBusinessCenters(f NoSettlMethodElectionDateBusinessCentersRepeatingGroup) {
	m.SetGroup(f)
}

// SetSettlMethodElectionDateRelativeTo sets SettlMethodElectionDateRelativeTo, Tag 42779.
func (m NoOrderEntries) SetSettlMethodElectionDateRelativeTo(v int) {
	m.Set(field.NewSettlMethodElectionDateRelativeTo(v))
}

// SetSettlMethodElectionDateOffsetPeriod sets SettlMethodElectionDateOffsetPeriod, Tag 42780.
func (m NoOrderEntries) SetSettlMethodElectionDateOffsetPeriod(v int) {
	m.Set(field.NewSettlMethodElectionDateOffsetPeriod(v))
}

// SetSettlMethodElectionDateOffsetUnit sets SettlMethodElectionDateOffsetUnit, Tag 42781.
func (m NoOrderEntries) SetSettlMethodElectionDateOffsetUnit(v string) {
	m.Set(field.NewSettlMethodElectionDateOffsetUnit(v))
}

// SetSettlMethodElectionDateOffsetDayType sets SettlMethodElectionDateOffsetDayType, Tag 42782.
func (m NoOrderEntries) SetSettlMethodElectionDateOffsetDayType(v int) {
	m.Set(field.NewSettlMethodElectionDateOffsetDayType(v))
}

// SetSettlMethodElectionDateAdjusted sets SettlMethodElectionDateAdjusted, Tag 42783.
func (m NoOrderEntries) SetSettlMethodElectionDateAdjusted(v string) {
	m.Set(field.NewSettlMethodElectionDateAdjusted(v))
}

// SetMakeWholeDate sets MakeWholeDate, Tag 42591.
func (m NoOrderEntries) SetMakeWholeDate(v string) {
	m.Set(field.NewMakeWholeDate(v))
}

// SetMakeWholeAmount sets MakeWholeAmount, Tag 42592.
func (m NoOrderEntries) SetMakeWholeAmount(value decimal.Decimal, scale int32) {
	m.Set(field.NewMakeWholeAmount(value, scale))
}

// SetMakeWholeBenchmarkCurveName sets MakeWholeBenchmarkCurveName, Tag 42593.
func (m NoOrderEntries) SetMakeWholeBenchmarkCurveName(v string) {
	m.Set(field.NewMakeWholeBenchmarkCurveName(v))
}

// SetMakeWholeBenchmarkCurvePoint sets MakeWholeBenchmarkCurvePoint, Tag 42594.
func (m NoOrderEntries) SetMakeWholeBenchmarkCurvePoint(v string) {
	m.Set(field.NewMakeWholeBenchmarkCurvePoint(v))
}

// SetMakeWholeRecallSpread sets MakeWholeRecallSpread, Tag 42595.
func (m NoOrderEntries) SetMakeWholeRecallSpread(value decimal.Decimal, scale int32) {
	m.Set(field.NewMakeWholeRecallSpread(value, scale))
}

// SetMakeWholeBenchmarkQuote sets MakeWholeBenchmarkQuote, Tag 42596.
func (m NoOrderEntries) SetMakeWholeBenchmarkQuote(v int) {
	m.Set(field.NewMakeWholeBenchmarkQuote(v))
}

// SetMakeWholeInterpolationMethod sets MakeWholeInterpolationMethod, Tag 42597.
func (m NoOrderEntries) SetMakeWholeInterpolationMethod(v int) {
	m.Set(field.NewMakeWholeInterpolationMethod(v))
}

// SetTradingUnitPeriodMultiplier sets TradingUnitPeriodMultiplier, Tag 2353.
func (m NoOrderEntries) SetTradingUnitPeriodMultiplier(v int) {
	m.Set(field.NewTradingUnitPeriodMultiplier(v))
}

// SetAssetGroup sets AssetGroup, Tag 2210.
func (m NoOrderEntries) SetAssetGroup(v enum.AssetGroup) {
	m.Set(field.NewAssetGroup(v))
}

// SetOrigStrikePrice sets OrigStrikePrice, Tag 2578.
func (m NoOrderEntries) SetOrigStrikePrice(value decimal.Decimal, scale int32) {
	m.Set(field.NewOrigStrikePrice(value, scale))
}

// SetStrikePricePrecision sets StrikePricePrecision, Tag 2577.
func (m NoOrderEntries) SetStrikePricePrecision(v int) {
	m.Set(field.NewStrikePricePrecision(v))
}

// SetSettlSubMethod sets SettlSubMethod, Tag 2579.
func (m NoOrderEntries) SetSettlSubMethod(v enum.SettlSubMethod) {
	m.Set(field.NewSettlSubMethod(v))
}

// SetBlockTradeEligibilityIndicator sets BlockTradeEligibilityIndicator, Tag 2575.
func (m NoOrderEntries) SetBlockTradeEligibilityIndicator(v bool) {
	m.Set(field.NewBlockTradeEligibilityIndicator(v))
}

// SetLowExercisePriceOptionIndicator sets LowExercisePriceOptionIndicator, Tag 2574.
func (m NoOrderEntries) SetLowExercisePriceOptionIndicator(v bool) {
	m.Set(field.NewLowExercisePriceOptionIndicator(v))
}

// SetInstrumentPricePrecision sets InstrumentPricePrecision, Tag 2576.
func (m NoOrderEntries) SetInstrumentPricePrecision(v int) {
	m.Set(field.NewInstrumentPricePrecision(v))
}

// SetStrikeIndexCurvePoint sets StrikeIndexCurvePoint, Tag 2600.
func (m NoOrderEntries) SetStrikeIndexCurvePoint(v string) {
	m.Set(field.NewStrikeIndexCurvePoint(v))
}

// SetStrikeIndexQuote sets StrikeIndexQuote, Tag 2601.
func (m NoOrderEntries) SetStrikeIndexQuote(v enum.StrikeIndexQuote) {
	m.Set(field.NewStrikeIndexQuote(v))
}

// SetNoExtraordinaryEvents sets NoExtraordinaryEvents, Tag 42296.
func (m NoOrderEntries) SetNoExtraordinaryEvents(f NoExtraordinaryEventsRepeatingGroup) {
	m.SetGroup(f)
}

// SetExtraordinaryEventAdjustmentMethod sets ExtraordinaryEventAdjustmentMethod, Tag 2602.
func (m NoOrderEntries) SetExtraordinaryEventAdjustmentMethod(v enum.ExtraordinaryEventAdjustmentMethod) {
	m.Set(field.NewExtraordinaryEventAdjustmentMethod(v))
}

// SetExchangeLookAlike sets ExchangeLookAlike, Tag 2603.
func (m NoOrderEntries) SetExchangeLookAlike(v bool) {
	m.Set(field.NewExchangeLookAlike(v))
}

// SetInTheMoneyCondition sets InTheMoneyCondition, Tag 2681.
func (m NoOrderEntries) SetInTheMoneyCondition(v enum.InTheMoneyCondition) {
	m.Set(field.NewInTheMoneyCondition(v))
}

// SetContraryInstructionEligibilityIndicator sets ContraryInstructionEligibilityIndicator, Tag 2685.
func (m NoOrderEntries) SetContraryInstructionEligibilityIndicator(v bool) {
	m.Set(field.NewContraryInstructionEligibilityIndicator(v))
}

// SetFinancialInstrumentFullName sets FinancialInstrumentFullName, Tag 2714.
func (m NoOrderEntries) SetFinancialInstrumentFullName(v string) {
	m.Set(field.NewFinancialInstrumentFullName(v))
}

// SetEncodedFinancialInstrumentFullNameLen sets EncodedFinancialInstrumentFullNameLen, Tag 2715.
func (m NoOrderEntries) SetEncodedFinancialInstrumentFullNameLen(v int) {
	m.Set(field.NewEncodedFinancialInstrumentFullNameLen(v))
}

// SetEncodedFinancialInstrumentFullName sets EncodedFinancialInstrumentFullName, Tag 2716.
func (m NoOrderEntries) SetEncodedFinancialInstrumentFullName(v string) {
	m.Set(field.NewEncodedFinancialInstrumentFullName(v))
}

// SetAssetSubType sets AssetSubType, Tag 2735.
func (m NoOrderEntries) SetAssetSubType(v string) {
	m.Set(field.NewAssetSubType(v))
}

// SetFinancialInstrumentShortName sets FinancialInstrumentShortName, Tag 2737.
func (m NoOrderEntries) SetFinancialInstrumentShortName(v string) {
	m.Set(field.NewFinancialInstrumentShortName(v))
}

// SetReturnTrigger sets ReturnTrigger, Tag 2753.
func (m NoOrderEntries) SetReturnTrigger(v enum.ReturnTrigger) {
	m.Set(field.NewReturnTrigger(v))
}

// SetDeliveryRouteOrCharter sets DeliveryRouteOrCharter, Tag 2752.
func (m NoOrderEntries) SetDeliveryRouteOrCharter(v string) {
	m.Set(field.NewDeliveryRouteOrCharter(v))
}

// SetCouponOtherDayCount sets CouponOtherDayCount, Tag 2879.
func (m NoOrderEntries) SetCouponOtherDayCount(v string) {
	m.Set(field.NewCouponOtherDayCount(v))
}

// SetUPICode sets UPICode, Tag 2891.
func (m NoOrderEntries) SetUPICode(v string) {
	m.Set(field.NewUPICode(v))
}

// GetOrderEntryAction gets OrderEntryAction, Tag 2429.
func (m NoOrderEntries) GetOrderEntryAction() (v enum.OrderEntryAction, err quickfix.MessageRejectError) {
	var f field.OrderEntryActionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetOrderEntryID gets OrderEntryID, Tag 2430.
func (m NoOrderEntries) GetOrderEntryID() (v int, err quickfix.MessageRejectError) {
	var f field.OrderEntryIDField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetClOrdID gets ClOrdID, Tag 11.
func (m NoOrderEntries) GetClOrdID() (v string, err quickfix.MessageRejectError) {
	var f field.ClOrdIDField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetOrigClOrdID gets OrigClOrdID, Tag 41.
func (m NoOrderEntries) GetOrigClOrdID() (v string, err quickfix.MessageRejectError) {
	var f field.OrigClOrdIDField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetOrderID gets OrderID, Tag 37.
func (m NoOrderEntries) GetOrderID() (v string, err quickfix.MessageRejectError) {
	var f field.OrderIDField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetOrdType gets OrdType, Tag 40.
func (m NoOrderEntries) GetOrdType() (v enum.OrdType, err quickfix.MessageRejectError) {
	var f field.OrdTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPrice gets Price, Tag 44.
func (m NoOrderEntries) GetPrice() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.PriceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetSide gets Side, Tag 54.
func (m NoOrderEntries) GetSide() (v enum.Side, err quickfix.MessageRejectError) {
	var f field.SideField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetTimeInForce gets TimeInForce, Tag 59.
func (m NoOrderEntries) GetTimeInForce() (v enum.TimeInForce, err quickfix.MessageRejectError) {
	var f field.TimeInForceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetOrderQty gets OrderQty, Tag 38.
func (m NoOrderEntries) GetOrderQty() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.OrderQtyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetCashOrderQty gets CashOrderQty, Tag 152.
func (m NoOrderEntries) GetCashOrderQty() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.CashOrderQtyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetOrderPercent gets OrderPercent, Tag 516.
func (m NoOrderEntries) GetOrderPercent() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.OrderPercentField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetRoundingDirection gets RoundingDirection, Tag 468.
func (m NoOrderEntries) GetRoundingDirection() (v enum.RoundingDirection, err quickfix.MessageRejectError) {
	var f field.RoundingDirectionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetRoundingModulus gets RoundingModulus, Tag 469.
func (m NoOrderEntries) GetRoundingModulus() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.RoundingModulusField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetSymbol gets Symbol, Tag 55.
func (m NoOrderEntries) GetSymbol() (v string, err quickfix.MessageRejectError) {
	var f field.SymbolField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetSymbolSfx gets SymbolSfx, Tag 65.
func (m NoOrderEntries) GetSymbolSfx() (v enum.SymbolSfx, err quickfix.MessageRejectError) {
	var f field.SymbolSfxField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetSecurityID gets SecurityID, Tag 48.
func (m NoOrderEntries) GetSecurityID() (v string, err quickfix.MessageRejectError) {
	var f field.SecurityIDField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetSecurityIDSource gets SecurityIDSource, Tag 22.
func (m NoOrderEntries) GetSecurityIDSource() (v enum.SecurityIDSource, err quickfix.MessageRejectError) {
	var f field.SecurityIDSourceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoSecurityAltID gets NoSecurityAltID, Tag 454.
func (m NoOrderEntries) GetNoSecurityAltID() (NoSecurityAltIDRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoSecurityAltIDRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetProduct gets Product, Tag 460.
func (m NoOrderEntries) GetProduct() (v enum.Product, err quickfix.MessageRejectError) {
	var f field.ProductField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProductComplex gets ProductComplex, Tag 1227.
func (m NoOrderEntries) GetProductComplex() (v string, err quickfix.MessageRejectError) {
	var f field.ProductComplexField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetSecurityGroup gets SecurityGroup, Tag 1151.
func (m NoOrderEntries) GetSecurityGroup() (v string, err quickfix.MessageRejectError) {
	var f field.SecurityGroupField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetCFICode gets CFICode, Tag 461.
func (m NoOrderEntries) GetCFICode() (v string, err quickfix.MessageRejectError) {
	var f field.CFICodeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetSecurityType gets SecurityType, Tag 167.
func (m NoOrderEntries) GetSecurityType() (v enum.SecurityType, err quickfix.MessageRejectError) {
	var f field.SecurityTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetSecuritySubType gets SecuritySubType, Tag 762.
func (m NoOrderEntries) GetSecuritySubType() (v string, err quickfix.MessageRejectError) {
	var f field.SecuritySubTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetMaturityMonthYear gets MaturityMonthYear, Tag 200.
func (m NoOrderEntries) GetMaturityMonthYear() (v string, err quickfix.MessageRejectError) {
	var f field.MaturityMonthYearField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetMaturityDate gets MaturityDate, Tag 541.
func (m NoOrderEntries) GetMaturityDate() (v string, err quickfix.MessageRejectError) {
	var f field.MaturityDateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetMaturityTime gets MaturityTime, Tag 1079.
func (m NoOrderEntries) GetMaturityTime() (v string, err quickfix.MessageRejectError) {
	var f field.MaturityTimeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetSettleOnOpenFlag gets SettleOnOpenFlag, Tag 966.
func (m NoOrderEntries) GetSettleOnOpenFlag() (v string, err quickfix.MessageRejectError) {
	var f field.SettleOnOpenFlagField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetInstrmtAssignmentMethod gets InstrmtAssignmentMethod, Tag 1049.
func (m NoOrderEntries) GetInstrmtAssignmentMethod() (v enum.InstrmtAssignmentMethod, err quickfix.MessageRejectError) {
	var f field.InstrmtAssignmentMethodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetSecurityStatus gets SecurityStatus, Tag 965.
func (m NoOrderEntries) GetSecurityStatus() (v enum.SecurityStatus, err quickfix.MessageRejectError) {
	var f field.SecurityStatusField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetCouponPaymentDate gets CouponPaymentDate, Tag 224.
func (m NoOrderEntries) GetCouponPaymentDate() (v string, err quickfix.MessageRejectError) {
	var f field.CouponPaymentDateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetIssueDate gets IssueDate, Tag 225.
func (m NoOrderEntries) GetIssueDate() (v string, err quickfix.MessageRejectError) {
	var f field.IssueDateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetRepoCollateralSecurityType gets RepoCollateralSecurityType, Tag 239.
func (m NoOrderEntries) GetRepoCollateralSecurityType() (v string, err quickfix.MessageRejectError) {
	var f field.RepoCollateralSecurityTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetRepurchaseTerm gets RepurchaseTerm, Tag 226.
func (m NoOrderEntries) GetRepurchaseTerm() (v int, err quickfix.MessageRejectError) {
	var f field.RepurchaseTermField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetRepurchaseRate gets RepurchaseRate, Tag 227.
func (m NoOrderEntries) GetRepurchaseRate() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.RepurchaseRateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetFactor gets Factor, Tag 228.
func (m NoOrderEntries) GetFactor() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.FactorField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetCreditRating gets CreditRating, Tag 255.
func (m NoOrderEntries) GetCreditRating() (v string, err quickfix.MessageRejectError) {
	var f field.CreditRatingField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetInstrRegistry gets InstrRegistry, Tag 543.
func (m NoOrderEntries) GetInstrRegistry() (v enum.InstrRegistry, err quickfix.MessageRejectError) {
	var f field.InstrRegistryField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetCountryOfIssue gets CountryOfIssue, Tag 470.
func (m NoOrderEntries) GetCountryOfIssue() (v string, err quickfix.MessageRejectError) {
	var f field.CountryOfIssueField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStateOrProvinceOfIssue gets StateOrProvinceOfIssue, Tag 471.
func (m NoOrderEntries) GetStateOrProvinceOfIssue() (v string, err quickfix.MessageRejectError) {
	var f field.StateOrProvinceOfIssueField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetLocaleOfIssue gets LocaleOfIssue, Tag 472.
func (m NoOrderEntries) GetLocaleOfIssue() (v string, err quickfix.MessageRejectError) {
	var f field.LocaleOfIssueField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetRedemptionDate gets RedemptionDate, Tag 240.
func (m NoOrderEntries) GetRedemptionDate() (v string, err quickfix.MessageRejectError) {
	var f field.RedemptionDateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStrikePrice gets StrikePrice, Tag 202.
func (m NoOrderEntries) GetStrikePrice() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.StrikePriceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStrikeCurrency gets StrikeCurrency, Tag 947.
func (m NoOrderEntries) GetStrikeCurrency() (v string, err quickfix.MessageRejectError) {
	var f field.StrikeCurrencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStrikeMultiplier gets StrikeMultiplier, Tag 967.
func (m NoOrderEntries) GetStrikeMultiplier() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.StrikeMultiplierField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStrikeValue gets StrikeValue, Tag 968.
func (m NoOrderEntries) GetStrikeValue() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.StrikeValueField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetOptAttribute gets OptAttribute, Tag 206.
func (m NoOrderEntries) GetOptAttribute() (v string, err quickfix.MessageRejectError) {
	var f field.OptAttributeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetContractMultiplier gets ContractMultiplier, Tag 231.
func (m NoOrderEntries) GetContractMultiplier() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.ContractMultiplierField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetMinPriceIncrement gets MinPriceIncrement, Tag 969.
func (m NoOrderEntries) GetMinPriceIncrement() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.MinPriceIncrementField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetMinPriceIncrementAmount gets MinPriceIncrementAmount, Tag 1146.
func (m NoOrderEntries) GetMinPriceIncrementAmount() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.MinPriceIncrementAmountField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnitOfMeasure gets UnitOfMeasure, Tag 996.
func (m NoOrderEntries) GetUnitOfMeasure() (v enum.UnitOfMeasure, err quickfix.MessageRejectError) {
	var f field.UnitOfMeasureField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnitOfMeasureQty gets UnitOfMeasureQty, Tag 1147.
func (m NoOrderEntries) GetUnitOfMeasureQty() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.UnitOfMeasureQtyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPriceUnitOfMeasure gets PriceUnitOfMeasure, Tag 1191.
func (m NoOrderEntries) GetPriceUnitOfMeasure() (v string, err quickfix.MessageRejectError) {
	var f field.PriceUnitOfMeasureField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPriceUnitOfMeasureQty gets PriceUnitOfMeasureQty, Tag 1192.
func (m NoOrderEntries) GetPriceUnitOfMeasureQty() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.PriceUnitOfMeasureQtyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetSettlMethod gets SettlMethod, Tag 1193.
func (m NoOrderEntries) GetSettlMethod() (v enum.SettlMethod, err quickfix.MessageRejectError) {
	var f field.SettlMethodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetExerciseStyle gets ExerciseStyle, Tag 1194.
func (m NoOrderEntries) GetExerciseStyle() (v enum.ExerciseStyle, err quickfix.MessageRejectError) {
	var f field.ExerciseStyleField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetOptPayoutAmount gets OptPayoutAmount, Tag 1195.
func (m NoOrderEntries) GetOptPayoutAmount() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.OptPayoutAmountField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPriceQuoteMethod gets PriceQuoteMethod, Tag 1196.
func (m NoOrderEntries) GetPriceQuoteMethod() (v enum.PriceQuoteMethod, err quickfix.MessageRejectError) {
	var f field.PriceQuoteMethodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetValuationMethod gets ValuationMethod, Tag 1197.
func (m NoOrderEntries) GetValuationMethod() (v enum.ValuationMethod, err quickfix.MessageRejectError) {
	var f field.ValuationMethodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetListMethod gets ListMethod, Tag 1198.
func (m NoOrderEntries) GetListMethod() (v enum.ListMethod, err quickfix.MessageRejectError) {
	var f field.ListMethodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetCapPrice gets CapPrice, Tag 1199.
func (m NoOrderEntries) GetCapPrice() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.CapPriceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetFloorPrice gets FloorPrice, Tag 1200.
func (m NoOrderEntries) GetFloorPrice() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.FloorPriceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPutOrCall gets PutOrCall, Tag 201.
func (m NoOrderEntries) GetPutOrCall() (v enum.PutOrCall, err quickfix.MessageRejectError) {
	var f field.PutOrCallField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetFlexibleIndicator gets FlexibleIndicator, Tag 1244.
func (m NoOrderEntries) GetFlexibleIndicator() (v bool, err quickfix.MessageRejectError) {
	var f field.FlexibleIndicatorField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetFlexProductEligibilityIndicator gets FlexProductEligibilityIndicator, Tag 1242.
func (m NoOrderEntries) GetFlexProductEligibilityIndicator() (v bool, err quickfix.MessageRejectError) {
	var f field.FlexProductEligibilityIndicatorField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetTimeUnit gets TimeUnit, Tag 997.
func (m NoOrderEntries) GetTimeUnit() (v enum.TimeUnit, err quickfix.MessageRejectError) {
	var f field.TimeUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetCouponRate gets CouponRate, Tag 223.
func (m NoOrderEntries) GetCouponRate() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.CouponRateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetSecurityExchange gets SecurityExchange, Tag 207.
func (m NoOrderEntries) GetSecurityExchange() (v string, err quickfix.MessageRejectError) {
	var f field.SecurityExchangeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPositionLimit gets PositionLimit, Tag 970.
func (m NoOrderEntries) GetPositionLimit() (v int, err quickfix.MessageRejectError) {
	var f field.PositionLimitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNTPositionLimit gets NTPositionLimit, Tag 971.
func (m NoOrderEntries) GetNTPositionLimit() (v int, err quickfix.MessageRejectError) {
	var f field.NTPositionLimitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetIssuer gets Issuer, Tag 106.
func (m NoOrderEntries) GetIssuer() (v string, err quickfix.MessageRejectError) {
	var f field.IssuerField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetEncodedIssuerLen gets EncodedIssuerLen, Tag 348.
func (m NoOrderEntries) GetEncodedIssuerLen() (v int, err quickfix.MessageRejectError) {
	var f field.EncodedIssuerLenField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetEncodedIssuer gets EncodedIssuer, Tag 349.
func (m NoOrderEntries) GetEncodedIssuer() (v string, err quickfix.MessageRejectError) {
	var f field.EncodedIssuerField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetSecurityDesc gets SecurityDesc, Tag 107.
func (m NoOrderEntries) GetSecurityDesc() (v string, err quickfix.MessageRejectError) {
	var f field.SecurityDescField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetEncodedSecurityDescLen gets EncodedSecurityDescLen, Tag 350.
func (m NoOrderEntries) GetEncodedSecurityDescLen() (v int, err quickfix.MessageRejectError) {
	var f field.EncodedSecurityDescLenField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetEncodedSecurityDesc gets EncodedSecurityDesc, Tag 351.
func (m NoOrderEntries) GetEncodedSecurityDesc() (v string, err quickfix.MessageRejectError) {
	var f field.EncodedSecurityDescField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetSecurityXMLLen gets SecurityXMLLen, Tag 1184.
func (m NoOrderEntries) GetSecurityXMLLen() (v int, err quickfix.MessageRejectError) {
	var f field.SecurityXMLLenField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetSecurityXML gets SecurityXML, Tag 1185.
func (m NoOrderEntries) GetSecurityXML() (v string, err quickfix.MessageRejectError) {
	var f field.SecurityXMLField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetSecurityXMLSchema gets SecurityXMLSchema, Tag 1186.
func (m NoOrderEntries) GetSecurityXMLSchema() (v string, err quickfix.MessageRejectError) {
	var f field.SecurityXMLSchemaField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPool gets Pool, Tag 691.
func (m NoOrderEntries) GetPool() (v string, err quickfix.MessageRejectError) {
	var f field.PoolField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetContractSettlMonth gets ContractSettlMonth, Tag 667.
func (m NoOrderEntries) GetContractSettlMonth() (v string, err quickfix.MessageRejectError) {
	var f field.ContractSettlMonthField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetCPProgram gets CPProgram, Tag 875.
func (m NoOrderEntries) GetCPProgram() (v enum.CPProgram, err quickfix.MessageRejectError) {
	var f field.CPProgramField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetCPRegType gets CPRegType, Tag 876.
func (m NoOrderEntries) GetCPRegType() (v string, err quickfix.MessageRejectError) {
	var f field.CPRegTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoEvents gets NoEvents, Tag 864.
func (m NoOrderEntries) GetNoEvents() (NoEventsRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoEventsRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetDatedDate gets DatedDate, Tag 873.
func (m NoOrderEntries) GetDatedDate() (v string, err quickfix.MessageRejectError) {
	var f field.DatedDateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetInterestAccrualDate gets InterestAccrualDate, Tag 874.
func (m NoOrderEntries) GetInterestAccrualDate() (v string, err quickfix.MessageRejectError) {
	var f field.InterestAccrualDateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoInstrumentParties gets NoInstrumentParties, Tag 1018.
func (m NoOrderEntries) GetNoInstrumentParties() (NoInstrumentPartiesRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoInstrumentPartiesRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetContractMultiplierUnit gets ContractMultiplierUnit, Tag 1435.
func (m NoOrderEntries) GetContractMultiplierUnit() (v enum.ContractMultiplierUnit, err quickfix.MessageRejectError) {
	var f field.ContractMultiplierUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetFlowScheduleType gets FlowScheduleType, Tag 1439.
func (m NoOrderEntries) GetFlowScheduleType() (v enum.FlowScheduleType, err quickfix.MessageRejectError) {
	var f field.FlowScheduleTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetRestructuringType gets RestructuringType, Tag 1449.
func (m NoOrderEntries) GetRestructuringType() (v enum.RestructuringType, err quickfix.MessageRejectError) {
	var f field.RestructuringTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetSeniority gets Seniority, Tag 1450.
func (m NoOrderEntries) GetSeniority() (v enum.Seniority, err quickfix.MessageRejectError) {
	var f field.SeniorityField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNotionalPercentageOutstanding gets NotionalPercentageOutstanding, Tag 1451.
func (m NoOrderEntries) GetNotionalPercentageOutstanding() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.NotionalPercentageOutstandingField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetOriginalNotionalPercentageOutstanding gets OriginalNotionalPercentageOutstanding, Tag 1452.
func (m NoOrderEntries) GetOriginalNotionalPercentageOutstanding() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.OriginalNotionalPercentageOutstandingField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetAttachmentPoint gets AttachmentPoint, Tag 1457.
func (m NoOrderEntries) GetAttachmentPoint() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.AttachmentPointField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDetachmentPoint gets DetachmentPoint, Tag 1458.
func (m NoOrderEntries) GetDetachmentPoint() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.DetachmentPointField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStrikePriceDeterminationMethod gets StrikePriceDeterminationMethod, Tag 1478.
func (m NoOrderEntries) GetStrikePriceDeterminationMethod() (v enum.StrikePriceDeterminationMethod, err quickfix.MessageRejectError) {
	var f field.StrikePriceDeterminationMethodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStrikePriceBoundaryMethod gets StrikePriceBoundaryMethod, Tag 1479.
func (m NoOrderEntries) GetStrikePriceBoundaryMethod() (v enum.StrikePriceBoundaryMethod, err quickfix.MessageRejectError) {
	var f field.StrikePriceBoundaryMethodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStrikePriceBoundaryPrecision gets StrikePriceBoundaryPrecision, Tag 1480.
func (m NoOrderEntries) GetStrikePriceBoundaryPrecision() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.StrikePriceBoundaryPrecisionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnderlyingPriceDeterminationMethod gets UnderlyingPriceDeterminationMethod, Tag 1481.
func (m NoOrderEntries) GetUnderlyingPriceDeterminationMethod() (v enum.UnderlyingPriceDeterminationMethod, err quickfix.MessageRejectError) {
	var f field.UnderlyingPriceDeterminationMethodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetOptPayoutType gets OptPayoutType, Tag 1482.
func (m NoOrderEntries) GetOptPayoutType() (v enum.OptPayoutType, err quickfix.MessageRejectError) {
	var f field.OptPayoutTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoComplexEvents gets NoComplexEvents, Tag 1483.
func (m NoOrderEntries) GetNoComplexEvents() (NoComplexEventsRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoComplexEventsRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetPriceQuoteCurrency gets PriceQuoteCurrency, Tag 1524.
func (m NoOrderEntries) GetPriceQuoteCurrency() (v string, err quickfix.MessageRejectError) {
	var f field.PriceQuoteCurrencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetObligationType gets ObligationType, Tag 1739.
func (m NoOrderEntries) GetObligationType() (v enum.ObligationType, err quickfix.MessageRejectError) {
	var f field.ObligationTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetShortSaleRestriction gets ShortSaleRestriction, Tag 1687.
func (m NoOrderEntries) GetShortSaleRestriction() (v enum.ShortSaleRestriction, err quickfix.MessageRejectError) {
	var f field.ShortSaleRestrictionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUnitOfMeasureCurrency gets UnitOfMeasureCurrency, Tag 1716.
func (m NoOrderEntries) GetUnitOfMeasureCurrency() (v string, err quickfix.MessageRejectError) {
	var f field.UnitOfMeasureCurrencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPriceUnitOfMeasureCurrency gets PriceUnitOfMeasureCurrency, Tag 1717.
func (m NoOrderEntries) GetPriceUnitOfMeasureCurrency() (v string, err quickfix.MessageRejectError) {
	var f field.PriceUnitOfMeasureCurrencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetRefTickTableID gets RefTickTableID, Tag 1787.
func (m NoOrderEntries) GetRefTickTableID() (v int, err quickfix.MessageRejectError) {
	var f field.RefTickTableIDField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetAssetClass gets AssetClass, Tag 1938.
func (m NoOrderEntries) GetAssetClass() (v enum.AssetClass, err quickfix.MessageRejectError) {
	var f field.AssetClassField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetAssetSubClass gets AssetSubClass, Tag 1939.
func (m NoOrderEntries) GetAssetSubClass() (v enum.AssetSubClass, err quickfix.MessageRejectError) {
	var f field.AssetSubClassField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetAssetType gets AssetType, Tag 1940.
func (m NoOrderEntries) GetAssetType() (v string, err quickfix.MessageRejectError) {
	var f field.AssetTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoSecondaryAssetClasses gets NoSecondaryAssetClasses, Tag 1976.
func (m NoOrderEntries) GetNoSecondaryAssetClasses() (NoSecondaryAssetClassesRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoSecondaryAssetClassesRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetSwapClass gets SwapClass, Tag 1941.
func (m NoOrderEntries) GetSwapClass() (v enum.SwapClass, err quickfix.MessageRejectError) {
	var f field.SwapClassField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNthToDefault gets NthToDefault, Tag 1942.
func (m NoOrderEntries) GetNthToDefault() (v int, err quickfix.MessageRejectError) {
	var f field.NthToDefaultField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetMthToDefault gets MthToDefault, Tag 1943.
func (m NoOrderEntries) GetMthToDefault() (v int, err quickfix.MessageRejectError) {
	var f field.MthToDefaultField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetSettledEntityMatrixSource gets SettledEntityMatrixSource, Tag 1944.
func (m NoOrderEntries) GetSettledEntityMatrixSource() (v string, err quickfix.MessageRejectError) {
	var f field.SettledEntityMatrixSourceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetSettledEntityMatrixPublicationDate gets SettledEntityMatrixPublicationDate, Tag 1945.
func (m NoOrderEntries) GetSettledEntityMatrixPublicationDate() (v string, err quickfix.MessageRejectError) {
	var f field.SettledEntityMatrixPublicationDateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetCouponType gets CouponType, Tag 1946.
func (m NoOrderEntries) GetCouponType() (v enum.CouponType, err quickfix.MessageRejectError) {
	var f field.CouponTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetTotalIssuedAmount gets TotalIssuedAmount, Tag 1947.
func (m NoOrderEntries) GetTotalIssuedAmount() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.TotalIssuedAmountField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetCouponFrequencyPeriod gets CouponFrequencyPeriod, Tag 1948.
func (m NoOrderEntries) GetCouponFrequencyPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.CouponFrequencyPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetCouponFrequencyUnit gets CouponFrequencyUnit, Tag 1949.
func (m NoOrderEntries) GetCouponFrequencyUnit() (v enum.CouponFrequencyUnit, err quickfix.MessageRejectError) {
	var f field.CouponFrequencyUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetCouponDayCount gets CouponDayCount, Tag 1950.
func (m NoOrderEntries) GetCouponDayCount() (v enum.CouponDayCount, err quickfix.MessageRejectError) {
	var f field.CouponDayCountField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetConvertibleBondEquityID gets ConvertibleBondEquityID, Tag 1951.
func (m NoOrderEntries) GetConvertibleBondEquityID() (v string, err quickfix.MessageRejectError) {
	var f field.ConvertibleBondEquityIDField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetConvertibleBondEquityIDSource gets ConvertibleBondEquityIDSource, Tag 1952.
func (m NoOrderEntries) GetConvertibleBondEquityIDSource() (v string, err quickfix.MessageRejectError) {
	var f field.ConvertibleBondEquityIDSourceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetContractPriceRefMonth gets ContractPriceRefMonth, Tag 1953.
func (m NoOrderEntries) GetContractPriceRefMonth() (v string, err quickfix.MessageRejectError) {
	var f field.ContractPriceRefMonthField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetLienSeniority gets LienSeniority, Tag 1954.
func (m NoOrderEntries) GetLienSeniority() (v enum.LienSeniority, err quickfix.MessageRejectError) {
	var f field.LienSeniorityField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetLoanFacility gets LoanFacility, Tag 1955.
func (m NoOrderEntries) GetLoanFacility() (v enum.LoanFacility, err quickfix.MessageRejectError) {
	var f field.LoanFacilityField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetReferenceEntityType gets ReferenceEntityType, Tag 1956.
func (m NoOrderEntries) GetReferenceEntityType() (v enum.ReferenceEntityType, err quickfix.MessageRejectError) {
	var f field.ReferenceEntityTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetIndexSeries gets IndexSeries, Tag 1957.
func (m NoOrderEntries) GetIndexSeries() (v int, err quickfix.MessageRejectError) {
	var f field.IndexSeriesField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetIndexAnnexVersion gets IndexAnnexVersion, Tag 1958.
func (m NoOrderEntries) GetIndexAnnexVersion() (v int, err quickfix.MessageRejectError) {
	var f field.IndexAnnexVersionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetIndexAnnexDate gets IndexAnnexDate, Tag 1959.
func (m NoOrderEntries) GetIndexAnnexDate() (v string, err quickfix.MessageRejectError) {
	var f field.IndexAnnexDateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetIndexAnnexSource gets IndexAnnexSource, Tag 1960.
func (m NoOrderEntries) GetIndexAnnexSource() (v string, err quickfix.MessageRejectError) {
	var f field.IndexAnnexSourceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetBusinessDayConvention gets BusinessDayConvention, Tag 40921.
func (m NoOrderEntries) GetBusinessDayConvention() (v enum.BusinessDayConvention, err quickfix.MessageRejectError) {
	var f field.BusinessDayConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoBusinessCenters gets NoBusinessCenters, Tag 40278.
func (m NoOrderEntries) GetNoBusinessCenters() (NoBusinessCentersRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoBusinessCentersRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetDateRollConvention gets DateRollConvention, Tag 40922.
func (m NoOrderEntries) GetDateRollConvention() (v enum.DateRollConvention, err quickfix.MessageRejectError) {
	var f field.DateRollConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoStreams gets NoStreams, Tag 40049.
func (m NoOrderEntries) GetNoStreams() (NoStreamsRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoStreamsRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetNoProvisions gets NoProvisions, Tag 40090.
func (m NoOrderEntries) GetNoProvisions() (NoProvisionsRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoProvisionsRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetNoAdditionalTerms gets NoAdditionalTerms, Tag 40019.
func (m NoOrderEntries) GetNoAdditionalTerms() (NoAdditionalTermsRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoAdditionalTermsRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetNoProtectionTerms gets NoProtectionTerms, Tag 40181.
func (m NoOrderEntries) GetNoProtectionTerms() (NoProtectionTermsRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoProtectionTermsRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetNoCashSettlTerms gets NoCashSettlTerms, Tag 40022.
func (m NoOrderEntries) GetNoCashSettlTerms() (NoCashSettlTermsRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoCashSettlTermsRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetNoPhysicalSettlTerms gets NoPhysicalSettlTerms, Tag 40204.
func (m NoOrderEntries) GetNoPhysicalSettlTerms() (NoPhysicalSettlTermsRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoPhysicalSettlTermsRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetNoAssetAttributes gets NoAssetAttributes, Tag 2304.
func (m NoOrderEntries) GetNoAssetAttributes() (NoAssetAttributesRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoAssetAttributesRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetSwapSubClass gets SwapSubClass, Tag 1575.
func (m NoOrderEntries) GetSwapSubClass() (v enum.SwapSubClass, err quickfix.MessageRejectError) {
	var f field.SwapSubClassField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetSettlRateIndex gets SettlRateIndex, Tag 1577.
func (m NoOrderEntries) GetSettlRateIndex() (v string, err quickfix.MessageRejectError) {
	var f field.SettlRateIndexField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetSettlRateIndexLocation gets SettlRateIndexLocation, Tag 1580.
func (m NoOrderEntries) GetSettlRateIndexLocation() (v string, err quickfix.MessageRejectError) {
	var f field.SettlRateIndexLocationField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetOptionExpirationDesc gets OptionExpirationDesc, Tag 1581.
func (m NoOrderEntries) GetOptionExpirationDesc() (v string, err quickfix.MessageRejectError) {
	var f field.OptionExpirationDescField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetEncodedOptionExpirationDescLen gets EncodedOptionExpirationDescLen, Tag 1678.
func (m NoOrderEntries) GetEncodedOptionExpirationDescLen() (v int, err quickfix.MessageRejectError) {
	var f field.EncodedOptionExpirationDescLenField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetEncodedOptionExpirationDesc gets EncodedOptionExpirationDesc, Tag 1697.
func (m NoOrderEntries) GetEncodedOptionExpirationDesc() (v string, err quickfix.MessageRejectError) {
	var f field.EncodedOptionExpirationDescField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStrikeUnitOfMeasure gets StrikeUnitOfMeasure, Tag 1698.
func (m NoOrderEntries) GetStrikeUnitOfMeasure() (v string, err quickfix.MessageRejectError) {
	var f field.StrikeUnitOfMeasureField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStrikeIndex gets StrikeIndex, Tag 1866.
func (m NoOrderEntries) GetStrikeIndex() (v string, err quickfix.MessageRejectError) {
	var f field.StrikeIndexField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStrikeIndexSpread gets StrikeIndexSpread, Tag 2001.
func (m NoOrderEntries) GetStrikeIndexSpread() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.StrikeIndexSpreadField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetValuationSource gets ValuationSource, Tag 2002.
func (m NoOrderEntries) GetValuationSource() (v string, err quickfix.MessageRejectError) {
	var f field.ValuationSourceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetValuationReferenceModel gets ValuationReferenceModel, Tag 2140.
func (m NoOrderEntries) GetValuationReferenceModel() (v string, err quickfix.MessageRejectError) {
	var f field.ValuationReferenceModelField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStrategyType gets StrategyType, Tag 2141.
func (m NoOrderEntries) GetStrategyType() (v enum.StrategyType, err quickfix.MessageRejectError) {
	var f field.StrategyTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetCommonPricingIndicator gets CommonPricingIndicator, Tag 2142.
func (m NoOrderEntries) GetCommonPricingIndicator() (v bool, err quickfix.MessageRejectError) {
	var f field.CommonPricingIndicatorField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetSettlDisruptionProvision gets SettlDisruptionProvision, Tag 2143.
func (m NoOrderEntries) GetSettlDisruptionProvision() (v enum.SettlDisruptionProvision, err quickfix.MessageRejectError) {
	var f field.SettlDisruptionProvisionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetInstrumentRoundingDirection gets InstrumentRoundingDirection, Tag 2144.
func (m NoOrderEntries) GetInstrumentRoundingDirection() (v string, err quickfix.MessageRejectError) {
	var f field.InstrumentRoundingDirectionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetInstrumentRoundingPrecision gets InstrumentRoundingPrecision, Tag 2145.
func (m NoOrderEntries) GetInstrumentRoundingPrecision() (v int, err quickfix.MessageRejectError) {
	var f field.InstrumentRoundingPrecisionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPricingDateUnadjusted gets PricingDateUnadjusted, Tag 41232.
func (m NoOrderEntries) GetPricingDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.PricingDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPricingDateBusinessDayConvention gets PricingDateBusinessDayConvention, Tag 41233.
func (m NoOrderEntries) GetPricingDateBusinessDayConvention() (v int, err quickfix.MessageRejectError) {
	var f field.PricingDateBusinessDayConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoPricingDateBusinessCenters gets NoPricingDateBusinessCenters, Tag 41230.
func (m NoOrderEntries) GetNoPricingDateBusinessCenters() (NoPricingDateBusinessCentersRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoPricingDateBusinessCentersRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetPricingDateAdjusted gets PricingDateAdjusted, Tag 41234.
func (m NoOrderEntries) GetPricingDateAdjusted() (v string, err quickfix.MessageRejectError) {
	var f field.PricingDateAdjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPricingTime gets PricingTime, Tag 41235.
func (m NoOrderEntries) GetPricingTime() (v string, err quickfix.MessageRejectError) {
	var f field.PricingTimeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPricingTimeBusinessCenter gets PricingTimeBusinessCenter, Tag 41236.
func (m NoOrderEntries) GetPricingTimeBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.PricingTimeBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetMarketDisruptionProvision gets MarketDisruptionProvision, Tag 41087.
func (m NoOrderEntries) GetMarketDisruptionProvision() (v enum.MarketDisruptionProvision, err quickfix.MessageRejectError) {
	var f field.MarketDisruptionProvisionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoMarketDisruptionEvents gets NoMarketDisruptionEvents, Tag 41092.
func (m NoOrderEntries) GetNoMarketDisruptionEvents() (NoMarketDisruptionEventsRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoMarketDisruptionEventsRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetMarketDisruptionFallbackProvision gets MarketDisruptionFallbackProvision, Tag 41088.
func (m NoOrderEntries) GetMarketDisruptionFallbackProvision() (v enum.MarketDisruptionFallbackProvision, err quickfix.MessageRejectError) {
	var f field.MarketDisruptionFallbackProvisionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoMarketDisruptionFallbacks gets NoMarketDisruptionFallbacks, Tag 41094.
func (m NoOrderEntries) GetNoMarketDisruptionFallbacks() (NoMarketDisruptionFallbacksRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoMarketDisruptionFallbacksRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetNoMarketDisruptionFallbackReferencePrices gets NoMarketDisruptionFallbackReferencePrices, Tag 41096.
func (m NoOrderEntries) GetNoMarketDisruptionFallbackReferencePrices() (NoMarketDisruptionFallbackReferencePricesRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoMarketDisruptionFallbackReferencePricesRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetMarketDisruptionMaximumDays gets MarketDisruptionMaximumDays, Tag 41089.
func (m NoOrderEntries) GetMarketDisruptionMaximumDays() (v int, err quickfix.MessageRejectError) {
	var f field.MarketDisruptionMaximumDaysField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetMarketDisruptionMaterialityPercentage gets MarketDisruptionMaterialityPercentage, Tag 41090.
func (m NoOrderEntries) GetMarketDisruptionMaterialityPercentage() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.MarketDisruptionMaterialityPercentageField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetMarketDisruptionMinimumFuturesContracts gets MarketDisruptionMinimumFuturesContracts, Tag 41091.
func (m NoOrderEntries) GetMarketDisruptionMinimumFuturesContracts() (v int, err quickfix.MessageRejectError) {
	var f field.MarketDisruptionMinimumFuturesContractsField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetExerciseDesc gets ExerciseDesc, Tag 41106.
func (m NoOrderEntries) GetExerciseDesc() (v string, err quickfix.MessageRejectError) {
	var f field.ExerciseDescField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetEncodedExerciseDescLen gets EncodedExerciseDescLen, Tag 41107.
func (m NoOrderEntries) GetEncodedExerciseDescLen() (v int, err quickfix.MessageRejectError) {
	var f field.EncodedExerciseDescLenField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetEncodedExerciseDesc gets EncodedExerciseDesc, Tag 41108.
func (m NoOrderEntries) GetEncodedExerciseDesc() (v string, err quickfix.MessageRejectError) {
	var f field.EncodedExerciseDescField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetAutomaticExerciseIndicator gets AutomaticExerciseIndicator, Tag 41109.
func (m NoOrderEntries) GetAutomaticExerciseIndicator() (v bool, err quickfix.MessageRejectError) {
	var f field.AutomaticExerciseIndicatorField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetAutomaticExerciseThresholdRate gets AutomaticExerciseThresholdRate, Tag 41110.
func (m NoOrderEntries) GetAutomaticExerciseThresholdRate() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.AutomaticExerciseThresholdRateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetExerciseConfirmationMethod gets ExerciseConfirmationMethod, Tag 41111.
func (m NoOrderEntries) GetExerciseConfirmationMethod() (v enum.ExerciseConfirmationMethod, err quickfix.MessageRejectError) {
	var f field.ExerciseConfirmationMethodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetManualNoticeBusinessCenter gets ManualNoticeBusinessCenter, Tag 41112.
func (m NoOrderEntries) GetManualNoticeBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.ManualNoticeBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetFallbackExerciseIndicator gets FallbackExerciseIndicator, Tag 41113.
func (m NoOrderEntries) GetFallbackExerciseIndicator() (v bool, err quickfix.MessageRejectError) {
	var f field.FallbackExerciseIndicatorField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetLimitedRightToConfirmIndicator gets LimitedRightToConfirmIndicator, Tag 41114.
func (m NoOrderEntries) GetLimitedRightToConfirmIndicator() (v bool, err quickfix.MessageRejectError) {
	var f field.LimitedRightToConfirmIndicatorField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetExerciseSplitTicketIndicator gets ExerciseSplitTicketIndicator, Tag 41115.
func (m NoOrderEntries) GetExerciseSplitTicketIndicator() (v bool, err quickfix.MessageRejectError) {
	var f field.ExerciseSplitTicketIndicatorField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetOptionExerciseBusinessDayConvention gets OptionExerciseBusinessDayConvention, Tag 41118.
func (m NoOrderEntries) GetOptionExerciseBusinessDayConvention() (v int, err quickfix.MessageRejectError) {
	var f field.OptionExerciseBusinessDayConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoOptionExerciseBusinessCenters gets NoOptionExerciseBusinessCenters, Tag 41116.
func (m NoOrderEntries) GetNoOptionExerciseBusinessCenters() (NoOptionExerciseBusinessCentersRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoOptionExerciseBusinessCentersRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetNoOptionExerciseDates gets NoOptionExerciseDates, Tag 41137.
func (m NoOrderEntries) GetNoOptionExerciseDates() (NoOptionExerciseDatesRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoOptionExerciseDatesRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetOptionExerciseEarliestDateOffsetDayType gets OptionExerciseEarliestDateOffsetDayType, Tag 41119.
func (m NoOrderEntries) GetOptionExerciseEarliestDateOffsetDayType() (v int, err quickfix.MessageRejectError) {
	var f field.OptionExerciseEarliestDateOffsetDayTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetOptionExerciseEarliestDateOffsetPeriod gets OptionExerciseEarliestDateOffsetPeriod, Tag 41120.
func (m NoOrderEntries) GetOptionExerciseEarliestDateOffsetPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.OptionExerciseEarliestDateOffsetPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetOptionExerciseEarliestDateOffsetUnit gets OptionExerciseEarliestDateOffsetUnit, Tag 41121.
func (m NoOrderEntries) GetOptionExerciseEarliestDateOffsetUnit() (v string, err quickfix.MessageRejectError) {
	var f field.OptionExerciseEarliestDateOffsetUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetOptionExerciseFrequencyPeriod gets OptionExerciseFrequencyPeriod, Tag 41122.
func (m NoOrderEntries) GetOptionExerciseFrequencyPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.OptionExerciseFrequencyPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetOptionExerciseFrequencyUnit gets OptionExerciseFrequencyUnit, Tag 41123.
func (m NoOrderEntries) GetOptionExerciseFrequencyUnit() (v string, err quickfix.MessageRejectError) {
	var f field.OptionExerciseFrequencyUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetOptionExerciseStartDateUnadjusted gets OptionExerciseStartDateUnadjusted, Tag 41124.
func (m NoOrderEntries) GetOptionExerciseStartDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.OptionExerciseStartDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetOptionExerciseStartDateRelativeTo gets OptionExerciseStartDateRelativeTo, Tag 41125.
func (m NoOrderEntries) GetOptionExerciseStartDateRelativeTo() (v int, err quickfix.MessageRejectError) {
	var f field.OptionExerciseStartDateRelativeToField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetOptionExerciseStartDateOffsetPeriod gets OptionExerciseStartDateOffsetPeriod, Tag 41126.
func (m NoOrderEntries) GetOptionExerciseStartDateOffsetPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.OptionExerciseStartDateOffsetPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetOptionExerciseStartDateOffsetUnit gets OptionExerciseStartDateOffsetUnit, Tag 41127.
func (m NoOrderEntries) GetOptionExerciseStartDateOffsetUnit() (v string, err quickfix.MessageRejectError) {
	var f field.OptionExerciseStartDateOffsetUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetOptionExerciseStartDateOffsetDayType gets OptionExerciseStartDateOffsetDayType, Tag 41128.
func (m NoOrderEntries) GetOptionExerciseStartDateOffsetDayType() (v int, err quickfix.MessageRejectError) {
	var f field.OptionExerciseStartDateOffsetDayTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetOptionExerciseStartDateAdjusted gets OptionExerciseStartDateAdjusted, Tag 41129.
func (m NoOrderEntries) GetOptionExerciseStartDateAdjusted() (v string, err quickfix.MessageRejectError) {
	var f field.OptionExerciseStartDateAdjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetOptionExerciseSkip gets OptionExerciseSkip, Tag 41130.
func (m NoOrderEntries) GetOptionExerciseSkip() (v int, err quickfix.MessageRejectError) {
	var f field.OptionExerciseSkipField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetOptionExerciseNominationDeadline gets OptionExerciseNominationDeadline, Tag 41131.
func (m NoOrderEntries) GetOptionExerciseNominationDeadline() (v string, err quickfix.MessageRejectError) {
	var f field.OptionExerciseNominationDeadlineField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetOptionExerciseFirstDateUnadjusted gets OptionExerciseFirstDateUnadjusted, Tag 41132.
func (m NoOrderEntries) GetOptionExerciseFirstDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.OptionExerciseFirstDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetOptionExerciseLastDateUnadjusted gets OptionExerciseLastDateUnadjusted, Tag 41133.
func (m NoOrderEntries) GetOptionExerciseLastDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.OptionExerciseLastDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetOptionExerciseEarliestTime gets OptionExerciseEarliestTime, Tag 41134.
func (m NoOrderEntries) GetOptionExerciseEarliestTime() (v string, err quickfix.MessageRejectError) {
	var f field.OptionExerciseEarliestTimeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetOptionExerciseLatestTime gets OptionExerciseLatestTime, Tag 41135.
func (m NoOrderEntries) GetOptionExerciseLatestTime() (v string, err quickfix.MessageRejectError) {
	var f field.OptionExerciseLatestTimeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetOptionExerciseTimeBusinessCenter gets OptionExerciseTimeBusinessCenter, Tag 41136.
func (m NoOrderEntries) GetOptionExerciseTimeBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.OptionExerciseTimeBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetOptionExerciseExpirationDateBusinessDayConvention gets OptionExerciseExpirationDateBusinessDayConvention, Tag 41142.
func (m NoOrderEntries) GetOptionExerciseExpirationDateBusinessDayConvention() (v int, err quickfix.MessageRejectError) {
	var f field.OptionExerciseExpirationDateBusinessDayConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoOptionExerciseExpirationDateBusinessCenters gets NoOptionExerciseExpirationDateBusinessCenters, Tag 41140.
func (m NoOrderEntries) GetNoOptionExerciseExpirationDateBusinessCenters() (NoOptionExerciseExpirationDateBusinessCentersRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoOptionExerciseExpirationDateBusinessCentersRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetNoOptionExerciseExpirationDates gets NoOptionExerciseExpirationDates, Tag 41152.
func (m NoOrderEntries) GetNoOptionExerciseExpirationDates() (NoOptionExerciseExpirationDatesRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoOptionExerciseExpirationDatesRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetOptionExerciseExpirationDateRelativeTo gets OptionExerciseExpirationDateRelativeTo, Tag 41143.
func (m NoOrderEntries) GetOptionExerciseExpirationDateRelativeTo() (v int, err quickfix.MessageRejectError) {
	var f field.OptionExerciseExpirationDateRelativeToField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetOptionExerciseExpirationDateOffsetPeriod gets OptionExerciseExpirationDateOffsetPeriod, Tag 41144.
func (m NoOrderEntries) GetOptionExerciseExpirationDateOffsetPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.OptionExerciseExpirationDateOffsetPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetOptionExerciseExpirationDateOffsetUnit gets OptionExerciseExpirationDateOffsetUnit, Tag 41145.
func (m NoOrderEntries) GetOptionExerciseExpirationDateOffsetUnit() (v string, err quickfix.MessageRejectError) {
	var f field.OptionExerciseExpirationDateOffsetUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetOptionExerciseExpirationFrequencyPeriod gets OptionExerciseExpirationFrequencyPeriod, Tag 41146.
func (m NoOrderEntries) GetOptionExerciseExpirationFrequencyPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.OptionExerciseExpirationFrequencyPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetOptionExerciseExpirationFrequencyUnit gets OptionExerciseExpirationFrequencyUnit, Tag 41147.
func (m NoOrderEntries) GetOptionExerciseExpirationFrequencyUnit() (v string, err quickfix.MessageRejectError) {
	var f field.OptionExerciseExpirationFrequencyUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetOptionExerciseExpirationRollConvention gets OptionExerciseExpirationRollConvention, Tag 41148.
func (m NoOrderEntries) GetOptionExerciseExpirationRollConvention() (v string, err quickfix.MessageRejectError) {
	var f field.OptionExerciseExpirationRollConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetOptionExerciseExpirationDateOffsetDayType gets OptionExerciseExpirationDateOffsetDayType, Tag 41149.
func (m NoOrderEntries) GetOptionExerciseExpirationDateOffsetDayType() (v int, err quickfix.MessageRejectError) {
	var f field.OptionExerciseExpirationDateOffsetDayTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetOptionExerciseExpirationTime gets OptionExerciseExpirationTime, Tag 41150.
func (m NoOrderEntries) GetOptionExerciseExpirationTime() (v string, err quickfix.MessageRejectError) {
	var f field.OptionExerciseExpirationTimeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetOptionExerciseExpirationTimeBusinessCenter gets OptionExerciseExpirationTimeBusinessCenter, Tag 41151.
func (m NoOrderEntries) GetOptionExerciseExpirationTimeBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.OptionExerciseExpirationTimeBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetSettlMethodElectingPartySide gets SettlMethodElectingPartySide, Tag 42590.
func (m NoOrderEntries) GetSettlMethodElectingPartySide() (v int, err quickfix.MessageRejectError) {
	var f field.SettlMethodElectingPartySideField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetSettlMethodElectionDateUnadjusted gets SettlMethodElectionDateUnadjusted, Tag 42777.
func (m NoOrderEntries) GetSettlMethodElectionDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.SettlMethodElectionDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetSettlMethodElectionDateBusinessDayConvention gets SettlMethodElectionDateBusinessDayConvention, Tag 42778.
func (m NoOrderEntries) GetSettlMethodElectionDateBusinessDayConvention() (v int, err quickfix.MessageRejectError) {
	var f field.SettlMethodElectionDateBusinessDayConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoSettlMethodElectionDateBusinessCenters gets NoSettlMethodElectionDateBusinessCenters, Tag 42775.
func (m NoOrderEntries) GetNoSettlMethodElectionDateBusinessCenters() (NoSettlMethodElectionDateBusinessCentersRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoSettlMethodElectionDateBusinessCentersRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetSettlMethodElectionDateRelativeTo gets SettlMethodElectionDateRelativeTo, Tag 42779.
func (m NoOrderEntries) GetSettlMethodElectionDateRelativeTo() (v int, err quickfix.MessageRejectError) {
	var f field.SettlMethodElectionDateRelativeToField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetSettlMethodElectionDateOffsetPeriod gets SettlMethodElectionDateOffsetPeriod, Tag 42780.
func (m NoOrderEntries) GetSettlMethodElectionDateOffsetPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.SettlMethodElectionDateOffsetPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetSettlMethodElectionDateOffsetUnit gets SettlMethodElectionDateOffsetUnit, Tag 42781.
func (m NoOrderEntries) GetSettlMethodElectionDateOffsetUnit() (v string, err quickfix.MessageRejectError) {
	var f field.SettlMethodElectionDateOffsetUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetSettlMethodElectionDateOffsetDayType gets SettlMethodElectionDateOffsetDayType, Tag 42782.
func (m NoOrderEntries) GetSettlMethodElectionDateOffsetDayType() (v int, err quickfix.MessageRejectError) {
	var f field.SettlMethodElectionDateOffsetDayTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetSettlMethodElectionDateAdjusted gets SettlMethodElectionDateAdjusted, Tag 42783.
func (m NoOrderEntries) GetSettlMethodElectionDateAdjusted() (v string, err quickfix.MessageRejectError) {
	var f field.SettlMethodElectionDateAdjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetMakeWholeDate gets MakeWholeDate, Tag 42591.
func (m NoOrderEntries) GetMakeWholeDate() (v string, err quickfix.MessageRejectError) {
	var f field.MakeWholeDateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetMakeWholeAmount gets MakeWholeAmount, Tag 42592.
func (m NoOrderEntries) GetMakeWholeAmount() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.MakeWholeAmountField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetMakeWholeBenchmarkCurveName gets MakeWholeBenchmarkCurveName, Tag 42593.
func (m NoOrderEntries) GetMakeWholeBenchmarkCurveName() (v string, err quickfix.MessageRejectError) {
	var f field.MakeWholeBenchmarkCurveNameField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetMakeWholeBenchmarkCurvePoint gets MakeWholeBenchmarkCurvePoint, Tag 42594.
func (m NoOrderEntries) GetMakeWholeBenchmarkCurvePoint() (v string, err quickfix.MessageRejectError) {
	var f field.MakeWholeBenchmarkCurvePointField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetMakeWholeRecallSpread gets MakeWholeRecallSpread, Tag 42595.
func (m NoOrderEntries) GetMakeWholeRecallSpread() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.MakeWholeRecallSpreadField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetMakeWholeBenchmarkQuote gets MakeWholeBenchmarkQuote, Tag 42596.
func (m NoOrderEntries) GetMakeWholeBenchmarkQuote() (v int, err quickfix.MessageRejectError) {
	var f field.MakeWholeBenchmarkQuoteField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetMakeWholeInterpolationMethod gets MakeWholeInterpolationMethod, Tag 42597.
func (m NoOrderEntries) GetMakeWholeInterpolationMethod() (v int, err quickfix.MessageRejectError) {
	var f field.MakeWholeInterpolationMethodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetTradingUnitPeriodMultiplier gets TradingUnitPeriodMultiplier, Tag 2353.
func (m NoOrderEntries) GetTradingUnitPeriodMultiplier() (v int, err quickfix.MessageRejectError) {
	var f field.TradingUnitPeriodMultiplierField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetAssetGroup gets AssetGroup, Tag 2210.
func (m NoOrderEntries) GetAssetGroup() (v enum.AssetGroup, err quickfix.MessageRejectError) {
	var f field.AssetGroupField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetOrigStrikePrice gets OrigStrikePrice, Tag 2578.
func (m NoOrderEntries) GetOrigStrikePrice() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.OrigStrikePriceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStrikePricePrecision gets StrikePricePrecision, Tag 2577.
func (m NoOrderEntries) GetStrikePricePrecision() (v int, err quickfix.MessageRejectError) {
	var f field.StrikePricePrecisionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetSettlSubMethod gets SettlSubMethod, Tag 2579.
func (m NoOrderEntries) GetSettlSubMethod() (v enum.SettlSubMethod, err quickfix.MessageRejectError) {
	var f field.SettlSubMethodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetBlockTradeEligibilityIndicator gets BlockTradeEligibilityIndicator, Tag 2575.
func (m NoOrderEntries) GetBlockTradeEligibilityIndicator() (v bool, err quickfix.MessageRejectError) {
	var f field.BlockTradeEligibilityIndicatorField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetLowExercisePriceOptionIndicator gets LowExercisePriceOptionIndicator, Tag 2574.
func (m NoOrderEntries) GetLowExercisePriceOptionIndicator() (v bool, err quickfix.MessageRejectError) {
	var f field.LowExercisePriceOptionIndicatorField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetInstrumentPricePrecision gets InstrumentPricePrecision, Tag 2576.
func (m NoOrderEntries) GetInstrumentPricePrecision() (v int, err quickfix.MessageRejectError) {
	var f field.InstrumentPricePrecisionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStrikeIndexCurvePoint gets StrikeIndexCurvePoint, Tag 2600.
func (m NoOrderEntries) GetStrikeIndexCurvePoint() (v string, err quickfix.MessageRejectError) {
	var f field.StrikeIndexCurvePointField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStrikeIndexQuote gets StrikeIndexQuote, Tag 2601.
func (m NoOrderEntries) GetStrikeIndexQuote() (v enum.StrikeIndexQuote, err quickfix.MessageRejectError) {
	var f field.StrikeIndexQuoteField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoExtraordinaryEvents gets NoExtraordinaryEvents, Tag 42296.
func (m NoOrderEntries) GetNoExtraordinaryEvents() (NoExtraordinaryEventsRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoExtraordinaryEventsRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetExtraordinaryEventAdjustmentMethod gets ExtraordinaryEventAdjustmentMethod, Tag 2602.
func (m NoOrderEntries) GetExtraordinaryEventAdjustmentMethod() (v enum.ExtraordinaryEventAdjustmentMethod, err quickfix.MessageRejectError) {
	var f field.ExtraordinaryEventAdjustmentMethodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetExchangeLookAlike gets ExchangeLookAlike, Tag 2603.
func (m NoOrderEntries) GetExchangeLookAlike() (v bool, err quickfix.MessageRejectError) {
	var f field.ExchangeLookAlikeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetInTheMoneyCondition gets InTheMoneyCondition, Tag 2681.
func (m NoOrderEntries) GetInTheMoneyCondition() (v enum.InTheMoneyCondition, err quickfix.MessageRejectError) {
	var f field.InTheMoneyConditionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetContraryInstructionEligibilityIndicator gets ContraryInstructionEligibilityIndicator, Tag 2685.
func (m NoOrderEntries) GetContraryInstructionEligibilityIndicator() (v bool, err quickfix.MessageRejectError) {
	var f field.ContraryInstructionEligibilityIndicatorField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetFinancialInstrumentFullName gets FinancialInstrumentFullName, Tag 2714.
func (m NoOrderEntries) GetFinancialInstrumentFullName() (v string, err quickfix.MessageRejectError) {
	var f field.FinancialInstrumentFullNameField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetEncodedFinancialInstrumentFullNameLen gets EncodedFinancialInstrumentFullNameLen, Tag 2715.
func (m NoOrderEntries) GetEncodedFinancialInstrumentFullNameLen() (v int, err quickfix.MessageRejectError) {
	var f field.EncodedFinancialInstrumentFullNameLenField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetEncodedFinancialInstrumentFullName gets EncodedFinancialInstrumentFullName, Tag 2716.
func (m NoOrderEntries) GetEncodedFinancialInstrumentFullName() (v string, err quickfix.MessageRejectError) {
	var f field.EncodedFinancialInstrumentFullNameField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetAssetSubType gets AssetSubType, Tag 2735.
func (m NoOrderEntries) GetAssetSubType() (v string, err quickfix.MessageRejectError) {
	var f field.AssetSubTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetFinancialInstrumentShortName gets FinancialInstrumentShortName, Tag 2737.
func (m NoOrderEntries) GetFinancialInstrumentShortName() (v string, err quickfix.MessageRejectError) {
	var f field.FinancialInstrumentShortNameField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetReturnTrigger gets ReturnTrigger, Tag 2753.
func (m NoOrderEntries) GetReturnTrigger() (v enum.ReturnTrigger, err quickfix.MessageRejectError) {
	var f field.ReturnTriggerField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDeliveryRouteOrCharter gets DeliveryRouteOrCharter, Tag 2752.
func (m NoOrderEntries) GetDeliveryRouteOrCharter() (v string, err quickfix.MessageRejectError) {
	var f field.DeliveryRouteOrCharterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetCouponOtherDayCount gets CouponOtherDayCount, Tag 2879.
func (m NoOrderEntries) GetCouponOtherDayCount() (v string, err quickfix.MessageRejectError) {
	var f field.CouponOtherDayCountField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetUPICode gets UPICode, Tag 2891.
func (m NoOrderEntries) GetUPICode() (v string, err quickfix.MessageRejectError) {
	var f field.UPICodeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasOrderEntryAction returns true if OrderEntryAction is present, Tag 2429.
func (m NoOrderEntries) HasOrderEntryAction() bool {
	return m.Has(tag.OrderEntryAction)
}

// HasOrderEntryID returns true if OrderEntryID is present, Tag 2430.
func (m NoOrderEntries) HasOrderEntryID() bool {
	return m.Has(tag.OrderEntryID)
}

// HasClOrdID returns true if ClOrdID is present, Tag 11.
func (m NoOrderEntries) HasClOrdID() bool {
	return m.Has(tag.ClOrdID)
}

// HasOrigClOrdID returns true if OrigClOrdID is present, Tag 41.
func (m NoOrderEntries) HasOrigClOrdID() bool {
	return m.Has(tag.OrigClOrdID)
}

// HasOrderID returns true if OrderID is present, Tag 37.
func (m NoOrderEntries) HasOrderID() bool {
	return m.Has(tag.OrderID)
}

// HasOrdType returns true if OrdType is present, Tag 40.
func (m NoOrderEntries) HasOrdType() bool {
	return m.Has(tag.OrdType)
}

// HasPrice returns true if Price is present, Tag 44.
func (m NoOrderEntries) HasPrice() bool {
	return m.Has(tag.Price)
}

// HasSide returns true if Side is present, Tag 54.
func (m NoOrderEntries) HasSide() bool {
	return m.Has(tag.Side)
}

// HasTimeInForce returns true if TimeInForce is present, Tag 59.
func (m NoOrderEntries) HasTimeInForce() bool {
	return m.Has(tag.TimeInForce)
}

// HasOrderQty returns true if OrderQty is present, Tag 38.
func (m NoOrderEntries) HasOrderQty() bool {
	return m.Has(tag.OrderQty)
}

// HasCashOrderQty returns true if CashOrderQty is present, Tag 152.
func (m NoOrderEntries) HasCashOrderQty() bool {
	return m.Has(tag.CashOrderQty)
}

// HasOrderPercent returns true if OrderPercent is present, Tag 516.
func (m NoOrderEntries) HasOrderPercent() bool {
	return m.Has(tag.OrderPercent)
}

// HasRoundingDirection returns true if RoundingDirection is present, Tag 468.
func (m NoOrderEntries) HasRoundingDirection() bool {
	return m.Has(tag.RoundingDirection)
}

// HasRoundingModulus returns true if RoundingModulus is present, Tag 469.
func (m NoOrderEntries) HasRoundingModulus() bool {
	return m.Has(tag.RoundingModulus)
}

// HasSymbol returns true if Symbol is present, Tag 55.
func (m NoOrderEntries) HasSymbol() bool {
	return m.Has(tag.Symbol)
}

// HasSymbolSfx returns true if SymbolSfx is present, Tag 65.
func (m NoOrderEntries) HasSymbolSfx() bool {
	return m.Has(tag.SymbolSfx)
}

// HasSecurityID returns true if SecurityID is present, Tag 48.
func (m NoOrderEntries) HasSecurityID() bool {
	return m.Has(tag.SecurityID)
}

// HasSecurityIDSource returns true if SecurityIDSource is present, Tag 22.
func (m NoOrderEntries) HasSecurityIDSource() bool {
	return m.Has(tag.SecurityIDSource)
}

// HasNoSecurityAltID returns true if NoSecurityAltID is present, Tag 454.
func (m NoOrderEntries) HasNoSecurityAltID() bool {
	return m.Has(tag.NoSecurityAltID)
}

// HasProduct returns true if Product is present, Tag 460.
func (m NoOrderEntries) HasProduct() bool {
	return m.Has(tag.Product)
}

// HasProductComplex returns true if ProductComplex is present, Tag 1227.
func (m NoOrderEntries) HasProductComplex() bool {
	return m.Has(tag.ProductComplex)
}

// HasSecurityGroup returns true if SecurityGroup is present, Tag 1151.
func (m NoOrderEntries) HasSecurityGroup() bool {
	return m.Has(tag.SecurityGroup)
}

// HasCFICode returns true if CFICode is present, Tag 461.
func (m NoOrderEntries) HasCFICode() bool {
	return m.Has(tag.CFICode)
}

// HasSecurityType returns true if SecurityType is present, Tag 167.
func (m NoOrderEntries) HasSecurityType() bool {
	return m.Has(tag.SecurityType)
}

// HasSecuritySubType returns true if SecuritySubType is present, Tag 762.
func (m NoOrderEntries) HasSecuritySubType() bool {
	return m.Has(tag.SecuritySubType)
}

// HasMaturityMonthYear returns true if MaturityMonthYear is present, Tag 200.
func (m NoOrderEntries) HasMaturityMonthYear() bool {
	return m.Has(tag.MaturityMonthYear)
}

// HasMaturityDate returns true if MaturityDate is present, Tag 541.
func (m NoOrderEntries) HasMaturityDate() bool {
	return m.Has(tag.MaturityDate)
}

// HasMaturityTime returns true if MaturityTime is present, Tag 1079.
func (m NoOrderEntries) HasMaturityTime() bool {
	return m.Has(tag.MaturityTime)
}

// HasSettleOnOpenFlag returns true if SettleOnOpenFlag is present, Tag 966.
func (m NoOrderEntries) HasSettleOnOpenFlag() bool {
	return m.Has(tag.SettleOnOpenFlag)
}

// HasInstrmtAssignmentMethod returns true if InstrmtAssignmentMethod is present, Tag 1049.
func (m NoOrderEntries) HasInstrmtAssignmentMethod() bool {
	return m.Has(tag.InstrmtAssignmentMethod)
}

// HasSecurityStatus returns true if SecurityStatus is present, Tag 965.
func (m NoOrderEntries) HasSecurityStatus() bool {
	return m.Has(tag.SecurityStatus)
}

// HasCouponPaymentDate returns true if CouponPaymentDate is present, Tag 224.
func (m NoOrderEntries) HasCouponPaymentDate() bool {
	return m.Has(tag.CouponPaymentDate)
}

// HasIssueDate returns true if IssueDate is present, Tag 225.
func (m NoOrderEntries) HasIssueDate() bool {
	return m.Has(tag.IssueDate)
}

// HasRepoCollateralSecurityType returns true if RepoCollateralSecurityType is present, Tag 239.
func (m NoOrderEntries) HasRepoCollateralSecurityType() bool {
	return m.Has(tag.RepoCollateralSecurityType)
}

// HasRepurchaseTerm returns true if RepurchaseTerm is present, Tag 226.
func (m NoOrderEntries) HasRepurchaseTerm() bool {
	return m.Has(tag.RepurchaseTerm)
}

// HasRepurchaseRate returns true if RepurchaseRate is present, Tag 227.
func (m NoOrderEntries) HasRepurchaseRate() bool {
	return m.Has(tag.RepurchaseRate)
}

// HasFactor returns true if Factor is present, Tag 228.
func (m NoOrderEntries) HasFactor() bool {
	return m.Has(tag.Factor)
}

// HasCreditRating returns true if CreditRating is present, Tag 255.
func (m NoOrderEntries) HasCreditRating() bool {
	return m.Has(tag.CreditRating)
}

// HasInstrRegistry returns true if InstrRegistry is present, Tag 543.
func (m NoOrderEntries) HasInstrRegistry() bool {
	return m.Has(tag.InstrRegistry)
}

// HasCountryOfIssue returns true if CountryOfIssue is present, Tag 470.
func (m NoOrderEntries) HasCountryOfIssue() bool {
	return m.Has(tag.CountryOfIssue)
}

// HasStateOrProvinceOfIssue returns true if StateOrProvinceOfIssue is present, Tag 471.
func (m NoOrderEntries) HasStateOrProvinceOfIssue() bool {
	return m.Has(tag.StateOrProvinceOfIssue)
}

// HasLocaleOfIssue returns true if LocaleOfIssue is present, Tag 472.
func (m NoOrderEntries) HasLocaleOfIssue() bool {
	return m.Has(tag.LocaleOfIssue)
}

// HasRedemptionDate returns true if RedemptionDate is present, Tag 240.
func (m NoOrderEntries) HasRedemptionDate() bool {
	return m.Has(tag.RedemptionDate)
}

// HasStrikePrice returns true if StrikePrice is present, Tag 202.
func (m NoOrderEntries) HasStrikePrice() bool {
	return m.Has(tag.StrikePrice)
}

// HasStrikeCurrency returns true if StrikeCurrency is present, Tag 947.
func (m NoOrderEntries) HasStrikeCurrency() bool {
	return m.Has(tag.StrikeCurrency)
}

// HasStrikeMultiplier returns true if StrikeMultiplier is present, Tag 967.
func (m NoOrderEntries) HasStrikeMultiplier() bool {
	return m.Has(tag.StrikeMultiplier)
}

// HasStrikeValue returns true if StrikeValue is present, Tag 968.
func (m NoOrderEntries) HasStrikeValue() bool {
	return m.Has(tag.StrikeValue)
}

// HasOptAttribute returns true if OptAttribute is present, Tag 206.
func (m NoOrderEntries) HasOptAttribute() bool {
	return m.Has(tag.OptAttribute)
}

// HasContractMultiplier returns true if ContractMultiplier is present, Tag 231.
func (m NoOrderEntries) HasContractMultiplier() bool {
	return m.Has(tag.ContractMultiplier)
}

// HasMinPriceIncrement returns true if MinPriceIncrement is present, Tag 969.
func (m NoOrderEntries) HasMinPriceIncrement() bool {
	return m.Has(tag.MinPriceIncrement)
}

// HasMinPriceIncrementAmount returns true if MinPriceIncrementAmount is present, Tag 1146.
func (m NoOrderEntries) HasMinPriceIncrementAmount() bool {
	return m.Has(tag.MinPriceIncrementAmount)
}

// HasUnitOfMeasure returns true if UnitOfMeasure is present, Tag 996.
func (m NoOrderEntries) HasUnitOfMeasure() bool {
	return m.Has(tag.UnitOfMeasure)
}

// HasUnitOfMeasureQty returns true if UnitOfMeasureQty is present, Tag 1147.
func (m NoOrderEntries) HasUnitOfMeasureQty() bool {
	return m.Has(tag.UnitOfMeasureQty)
}

// HasPriceUnitOfMeasure returns true if PriceUnitOfMeasure is present, Tag 1191.
func (m NoOrderEntries) HasPriceUnitOfMeasure() bool {
	return m.Has(tag.PriceUnitOfMeasure)
}

// HasPriceUnitOfMeasureQty returns true if PriceUnitOfMeasureQty is present, Tag 1192.
func (m NoOrderEntries) HasPriceUnitOfMeasureQty() bool {
	return m.Has(tag.PriceUnitOfMeasureQty)
}

// HasSettlMethod returns true if SettlMethod is present, Tag 1193.
func (m NoOrderEntries) HasSettlMethod() bool {
	return m.Has(tag.SettlMethod)
}

// HasExerciseStyle returns true if ExerciseStyle is present, Tag 1194.
func (m NoOrderEntries) HasExerciseStyle() bool {
	return m.Has(tag.ExerciseStyle)
}

// HasOptPayoutAmount returns true if OptPayoutAmount is present, Tag 1195.
func (m NoOrderEntries) HasOptPayoutAmount() bool {
	return m.Has(tag.OptPayoutAmount)
}

// HasPriceQuoteMethod returns true if PriceQuoteMethod is present, Tag 1196.
func (m NoOrderEntries) HasPriceQuoteMethod() bool {
	return m.Has(tag.PriceQuoteMethod)
}

// HasValuationMethod returns true if ValuationMethod is present, Tag 1197.
func (m NoOrderEntries) HasValuationMethod() bool {
	return m.Has(tag.ValuationMethod)
}

// HasListMethod returns true if ListMethod is present, Tag 1198.
func (m NoOrderEntries) HasListMethod() bool {
	return m.Has(tag.ListMethod)
}

// HasCapPrice returns true if CapPrice is present, Tag 1199.
func (m NoOrderEntries) HasCapPrice() bool {
	return m.Has(tag.CapPrice)
}

// HasFloorPrice returns true if FloorPrice is present, Tag 1200.
func (m NoOrderEntries) HasFloorPrice() bool {
	return m.Has(tag.FloorPrice)
}

// HasPutOrCall returns true if PutOrCall is present, Tag 201.
func (m NoOrderEntries) HasPutOrCall() bool {
	return m.Has(tag.PutOrCall)
}

// HasFlexibleIndicator returns true if FlexibleIndicator is present, Tag 1244.
func (m NoOrderEntries) HasFlexibleIndicator() bool {
	return m.Has(tag.FlexibleIndicator)
}

// HasFlexProductEligibilityIndicator returns true if FlexProductEligibilityIndicator is present, Tag 1242.
func (m NoOrderEntries) HasFlexProductEligibilityIndicator() bool {
	return m.Has(tag.FlexProductEligibilityIndicator)
}

// HasTimeUnit returns true if TimeUnit is present, Tag 997.
func (m NoOrderEntries) HasTimeUnit() bool {
	return m.Has(tag.TimeUnit)
}

// HasCouponRate returns true if CouponRate is present, Tag 223.
func (m NoOrderEntries) HasCouponRate() bool {
	return m.Has(tag.CouponRate)
}

// HasSecurityExchange returns true if SecurityExchange is present, Tag 207.
func (m NoOrderEntries) HasSecurityExchange() bool {
	return m.Has(tag.SecurityExchange)
}

// HasPositionLimit returns true if PositionLimit is present, Tag 970.
func (m NoOrderEntries) HasPositionLimit() bool {
	return m.Has(tag.PositionLimit)
}

// HasNTPositionLimit returns true if NTPositionLimit is present, Tag 971.
func (m NoOrderEntries) HasNTPositionLimit() bool {
	return m.Has(tag.NTPositionLimit)
}

// HasIssuer returns true if Issuer is present, Tag 106.
func (m NoOrderEntries) HasIssuer() bool {
	return m.Has(tag.Issuer)
}

// HasEncodedIssuerLen returns true if EncodedIssuerLen is present, Tag 348.
func (m NoOrderEntries) HasEncodedIssuerLen() bool {
	return m.Has(tag.EncodedIssuerLen)
}

// HasEncodedIssuer returns true if EncodedIssuer is present, Tag 349.
func (m NoOrderEntries) HasEncodedIssuer() bool {
	return m.Has(tag.EncodedIssuer)
}

// HasSecurityDesc returns true if SecurityDesc is present, Tag 107.
func (m NoOrderEntries) HasSecurityDesc() bool {
	return m.Has(tag.SecurityDesc)
}

// HasEncodedSecurityDescLen returns true if EncodedSecurityDescLen is present, Tag 350.
func (m NoOrderEntries) HasEncodedSecurityDescLen() bool {
	return m.Has(tag.EncodedSecurityDescLen)
}

// HasEncodedSecurityDesc returns true if EncodedSecurityDesc is present, Tag 351.
func (m NoOrderEntries) HasEncodedSecurityDesc() bool {
	return m.Has(tag.EncodedSecurityDesc)
}

// HasSecurityXMLLen returns true if SecurityXMLLen is present, Tag 1184.
func (m NoOrderEntries) HasSecurityXMLLen() bool {
	return m.Has(tag.SecurityXMLLen)
}

// HasSecurityXML returns true if SecurityXML is present, Tag 1185.
func (m NoOrderEntries) HasSecurityXML() bool {
	return m.Has(tag.SecurityXML)
}

// HasSecurityXMLSchema returns true if SecurityXMLSchema is present, Tag 1186.
func (m NoOrderEntries) HasSecurityXMLSchema() bool {
	return m.Has(tag.SecurityXMLSchema)
}

// HasPool returns true if Pool is present, Tag 691.
func (m NoOrderEntries) HasPool() bool {
	return m.Has(tag.Pool)
}

// HasContractSettlMonth returns true if ContractSettlMonth is present, Tag 667.
func (m NoOrderEntries) HasContractSettlMonth() bool {
	return m.Has(tag.ContractSettlMonth)
}

// HasCPProgram returns true if CPProgram is present, Tag 875.
func (m NoOrderEntries) HasCPProgram() bool {
	return m.Has(tag.CPProgram)
}

// HasCPRegType returns true if CPRegType is present, Tag 876.
func (m NoOrderEntries) HasCPRegType() bool {
	return m.Has(tag.CPRegType)
}

// HasNoEvents returns true if NoEvents is present, Tag 864.
func (m NoOrderEntries) HasNoEvents() bool {
	return m.Has(tag.NoEvents)
}

// HasDatedDate returns true if DatedDate is present, Tag 873.
func (m NoOrderEntries) HasDatedDate() bool {
	return m.Has(tag.DatedDate)
}

// HasInterestAccrualDate returns true if InterestAccrualDate is present, Tag 874.
func (m NoOrderEntries) HasInterestAccrualDate() bool {
	return m.Has(tag.InterestAccrualDate)
}

// HasNoInstrumentParties returns true if NoInstrumentParties is present, Tag 1018.
func (m NoOrderEntries) HasNoInstrumentParties() bool {
	return m.Has(tag.NoInstrumentParties)
}

// HasContractMultiplierUnit returns true if ContractMultiplierUnit is present, Tag 1435.
func (m NoOrderEntries) HasContractMultiplierUnit() bool {
	return m.Has(tag.ContractMultiplierUnit)
}

// HasFlowScheduleType returns true if FlowScheduleType is present, Tag 1439.
func (m NoOrderEntries) HasFlowScheduleType() bool {
	return m.Has(tag.FlowScheduleType)
}

// HasRestructuringType returns true if RestructuringType is present, Tag 1449.
func (m NoOrderEntries) HasRestructuringType() bool {
	return m.Has(tag.RestructuringType)
}

// HasSeniority returns true if Seniority is present, Tag 1450.
func (m NoOrderEntries) HasSeniority() bool {
	return m.Has(tag.Seniority)
}

// HasNotionalPercentageOutstanding returns true if NotionalPercentageOutstanding is present, Tag 1451.
func (m NoOrderEntries) HasNotionalPercentageOutstanding() bool {
	return m.Has(tag.NotionalPercentageOutstanding)
}

// HasOriginalNotionalPercentageOutstanding returns true if OriginalNotionalPercentageOutstanding is present, Tag 1452.
func (m NoOrderEntries) HasOriginalNotionalPercentageOutstanding() bool {
	return m.Has(tag.OriginalNotionalPercentageOutstanding)
}

// HasAttachmentPoint returns true if AttachmentPoint is present, Tag 1457.
func (m NoOrderEntries) HasAttachmentPoint() bool {
	return m.Has(tag.AttachmentPoint)
}

// HasDetachmentPoint returns true if DetachmentPoint is present, Tag 1458.
func (m NoOrderEntries) HasDetachmentPoint() bool {
	return m.Has(tag.DetachmentPoint)
}

// HasStrikePriceDeterminationMethod returns true if StrikePriceDeterminationMethod is present, Tag 1478.
func (m NoOrderEntries) HasStrikePriceDeterminationMethod() bool {
	return m.Has(tag.StrikePriceDeterminationMethod)
}

// HasStrikePriceBoundaryMethod returns true if StrikePriceBoundaryMethod is present, Tag 1479.
func (m NoOrderEntries) HasStrikePriceBoundaryMethod() bool {
	return m.Has(tag.StrikePriceBoundaryMethod)
}

// HasStrikePriceBoundaryPrecision returns true if StrikePriceBoundaryPrecision is present, Tag 1480.
func (m NoOrderEntries) HasStrikePriceBoundaryPrecision() bool {
	return m.Has(tag.StrikePriceBoundaryPrecision)
}

// HasUnderlyingPriceDeterminationMethod returns true if UnderlyingPriceDeterminationMethod is present, Tag 1481.
func (m NoOrderEntries) HasUnderlyingPriceDeterminationMethod() bool {
	return m.Has(tag.UnderlyingPriceDeterminationMethod)
}

// HasOptPayoutType returns true if OptPayoutType is present, Tag 1482.
func (m NoOrderEntries) HasOptPayoutType() bool {
	return m.Has(tag.OptPayoutType)
}

// HasNoComplexEvents returns true if NoComplexEvents is present, Tag 1483.
func (m NoOrderEntries) HasNoComplexEvents() bool {
	return m.Has(tag.NoComplexEvents)
}

// HasPriceQuoteCurrency returns true if PriceQuoteCurrency is present, Tag 1524.
func (m NoOrderEntries) HasPriceQuoteCurrency() bool {
	return m.Has(tag.PriceQuoteCurrency)
}

// HasObligationType returns true if ObligationType is present, Tag 1739.
func (m NoOrderEntries) HasObligationType() bool {
	return m.Has(tag.ObligationType)
}

// HasShortSaleRestriction returns true if ShortSaleRestriction is present, Tag 1687.
func (m NoOrderEntries) HasShortSaleRestriction() bool {
	return m.Has(tag.ShortSaleRestriction)
}

// HasUnitOfMeasureCurrency returns true if UnitOfMeasureCurrency is present, Tag 1716.
func (m NoOrderEntries) HasUnitOfMeasureCurrency() bool {
	return m.Has(tag.UnitOfMeasureCurrency)
}

// HasPriceUnitOfMeasureCurrency returns true if PriceUnitOfMeasureCurrency is present, Tag 1717.
func (m NoOrderEntries) HasPriceUnitOfMeasureCurrency() bool {
	return m.Has(tag.PriceUnitOfMeasureCurrency)
}

// HasRefTickTableID returns true if RefTickTableID is present, Tag 1787.
func (m NoOrderEntries) HasRefTickTableID() bool {
	return m.Has(tag.RefTickTableID)
}

// HasAssetClass returns true if AssetClass is present, Tag 1938.
func (m NoOrderEntries) HasAssetClass() bool {
	return m.Has(tag.AssetClass)
}

// HasAssetSubClass returns true if AssetSubClass is present, Tag 1939.
func (m NoOrderEntries) HasAssetSubClass() bool {
	return m.Has(tag.AssetSubClass)
}

// HasAssetType returns true if AssetType is present, Tag 1940.
func (m NoOrderEntries) HasAssetType() bool {
	return m.Has(tag.AssetType)
}

// HasNoSecondaryAssetClasses returns true if NoSecondaryAssetClasses is present, Tag 1976.
func (m NoOrderEntries) HasNoSecondaryAssetClasses() bool {
	return m.Has(tag.NoSecondaryAssetClasses)
}

// HasSwapClass returns true if SwapClass is present, Tag 1941.
func (m NoOrderEntries) HasSwapClass() bool {
	return m.Has(tag.SwapClass)
}

// HasNthToDefault returns true if NthToDefault is present, Tag 1942.
func (m NoOrderEntries) HasNthToDefault() bool {
	return m.Has(tag.NthToDefault)
}

// HasMthToDefault returns true if MthToDefault is present, Tag 1943.
func (m NoOrderEntries) HasMthToDefault() bool {
	return m.Has(tag.MthToDefault)
}

// HasSettledEntityMatrixSource returns true if SettledEntityMatrixSource is present, Tag 1944.
func (m NoOrderEntries) HasSettledEntityMatrixSource() bool {
	return m.Has(tag.SettledEntityMatrixSource)
}

// HasSettledEntityMatrixPublicationDate returns true if SettledEntityMatrixPublicationDate is present, Tag 1945.
func (m NoOrderEntries) HasSettledEntityMatrixPublicationDate() bool {
	return m.Has(tag.SettledEntityMatrixPublicationDate)
}

// HasCouponType returns true if CouponType is present, Tag 1946.
func (m NoOrderEntries) HasCouponType() bool {
	return m.Has(tag.CouponType)
}

// HasTotalIssuedAmount returns true if TotalIssuedAmount is present, Tag 1947.
func (m NoOrderEntries) HasTotalIssuedAmount() bool {
	return m.Has(tag.TotalIssuedAmount)
}

// HasCouponFrequencyPeriod returns true if CouponFrequencyPeriod is present, Tag 1948.
func (m NoOrderEntries) HasCouponFrequencyPeriod() bool {
	return m.Has(tag.CouponFrequencyPeriod)
}

// HasCouponFrequencyUnit returns true if CouponFrequencyUnit is present, Tag 1949.
func (m NoOrderEntries) HasCouponFrequencyUnit() bool {
	return m.Has(tag.CouponFrequencyUnit)
}

// HasCouponDayCount returns true if CouponDayCount is present, Tag 1950.
func (m NoOrderEntries) HasCouponDayCount() bool {
	return m.Has(tag.CouponDayCount)
}

// HasConvertibleBondEquityID returns true if ConvertibleBondEquityID is present, Tag 1951.
func (m NoOrderEntries) HasConvertibleBondEquityID() bool {
	return m.Has(tag.ConvertibleBondEquityID)
}

// HasConvertibleBondEquityIDSource returns true if ConvertibleBondEquityIDSource is present, Tag 1952.
func (m NoOrderEntries) HasConvertibleBondEquityIDSource() bool {
	return m.Has(tag.ConvertibleBondEquityIDSource)
}

// HasContractPriceRefMonth returns true if ContractPriceRefMonth is present, Tag 1953.
func (m NoOrderEntries) HasContractPriceRefMonth() bool {
	return m.Has(tag.ContractPriceRefMonth)
}

// HasLienSeniority returns true if LienSeniority is present, Tag 1954.
func (m NoOrderEntries) HasLienSeniority() bool {
	return m.Has(tag.LienSeniority)
}

// HasLoanFacility returns true if LoanFacility is present, Tag 1955.
func (m NoOrderEntries) HasLoanFacility() bool {
	return m.Has(tag.LoanFacility)
}

// HasReferenceEntityType returns true if ReferenceEntityType is present, Tag 1956.
func (m NoOrderEntries) HasReferenceEntityType() bool {
	return m.Has(tag.ReferenceEntityType)
}

// HasIndexSeries returns true if IndexSeries is present, Tag 1957.
func (m NoOrderEntries) HasIndexSeries() bool {
	return m.Has(tag.IndexSeries)
}

// HasIndexAnnexVersion returns true if IndexAnnexVersion is present, Tag 1958.
func (m NoOrderEntries) HasIndexAnnexVersion() bool {
	return m.Has(tag.IndexAnnexVersion)
}

// HasIndexAnnexDate returns true if IndexAnnexDate is present, Tag 1959.
func (m NoOrderEntries) HasIndexAnnexDate() bool {
	return m.Has(tag.IndexAnnexDate)
}

// HasIndexAnnexSource returns true if IndexAnnexSource is present, Tag 1960.
func (m NoOrderEntries) HasIndexAnnexSource() bool {
	return m.Has(tag.IndexAnnexSource)
}

// HasBusinessDayConvention returns true if BusinessDayConvention is present, Tag 40921.
func (m NoOrderEntries) HasBusinessDayConvention() bool {
	return m.Has(tag.BusinessDayConvention)
}

// HasNoBusinessCenters returns true if NoBusinessCenters is present, Tag 40278.
func (m NoOrderEntries) HasNoBusinessCenters() bool {
	return m.Has(tag.NoBusinessCenters)
}

// HasDateRollConvention returns true if DateRollConvention is present, Tag 40922.
func (m NoOrderEntries) HasDateRollConvention() bool {
	return m.Has(tag.DateRollConvention)
}

// HasNoStreams returns true if NoStreams is present, Tag 40049.
func (m NoOrderEntries) HasNoStreams() bool {
	return m.Has(tag.NoStreams)
}

// HasNoProvisions returns true if NoProvisions is present, Tag 40090.
func (m NoOrderEntries) HasNoProvisions() bool {
	return m.Has(tag.NoProvisions)
}

// HasNoAdditionalTerms returns true if NoAdditionalTerms is present, Tag 40019.
func (m NoOrderEntries) HasNoAdditionalTerms() bool {
	return m.Has(tag.NoAdditionalTerms)
}

// HasNoProtectionTerms returns true if NoProtectionTerms is present, Tag 40181.
func (m NoOrderEntries) HasNoProtectionTerms() bool {
	return m.Has(tag.NoProtectionTerms)
}

// HasNoCashSettlTerms returns true if NoCashSettlTerms is present, Tag 40022.
func (m NoOrderEntries) HasNoCashSettlTerms() bool {
	return m.Has(tag.NoCashSettlTerms)
}

// HasNoPhysicalSettlTerms returns true if NoPhysicalSettlTerms is present, Tag 40204.
func (m NoOrderEntries) HasNoPhysicalSettlTerms() bool {
	return m.Has(tag.NoPhysicalSettlTerms)
}

// HasNoAssetAttributes returns true if NoAssetAttributes is present, Tag 2304.
func (m NoOrderEntries) HasNoAssetAttributes() bool {
	return m.Has(tag.NoAssetAttributes)
}

// HasSwapSubClass returns true if SwapSubClass is present, Tag 1575.
func (m NoOrderEntries) HasSwapSubClass() bool {
	return m.Has(tag.SwapSubClass)
}

// HasSettlRateIndex returns true if SettlRateIndex is present, Tag 1577.
func (m NoOrderEntries) HasSettlRateIndex() bool {
	return m.Has(tag.SettlRateIndex)
}

// HasSettlRateIndexLocation returns true if SettlRateIndexLocation is present, Tag 1580.
func (m NoOrderEntries) HasSettlRateIndexLocation() bool {
	return m.Has(tag.SettlRateIndexLocation)
}

// HasOptionExpirationDesc returns true if OptionExpirationDesc is present, Tag 1581.
func (m NoOrderEntries) HasOptionExpirationDesc() bool {
	return m.Has(tag.OptionExpirationDesc)
}

// HasEncodedOptionExpirationDescLen returns true if EncodedOptionExpirationDescLen is present, Tag 1678.
func (m NoOrderEntries) HasEncodedOptionExpirationDescLen() bool {
	return m.Has(tag.EncodedOptionExpirationDescLen)
}

// HasEncodedOptionExpirationDesc returns true if EncodedOptionExpirationDesc is present, Tag 1697.
func (m NoOrderEntries) HasEncodedOptionExpirationDesc() bool {
	return m.Has(tag.EncodedOptionExpirationDesc)
}

// HasStrikeUnitOfMeasure returns true if StrikeUnitOfMeasure is present, Tag 1698.
func (m NoOrderEntries) HasStrikeUnitOfMeasure() bool {
	return m.Has(tag.StrikeUnitOfMeasure)
}

// HasStrikeIndex returns true if StrikeIndex is present, Tag 1866.
func (m NoOrderEntries) HasStrikeIndex() bool {
	return m.Has(tag.StrikeIndex)
}

// HasStrikeIndexSpread returns true if StrikeIndexSpread is present, Tag 2001.
func (m NoOrderEntries) HasStrikeIndexSpread() bool {
	return m.Has(tag.StrikeIndexSpread)
}

// HasValuationSource returns true if ValuationSource is present, Tag 2002.
func (m NoOrderEntries) HasValuationSource() bool {
	return m.Has(tag.ValuationSource)
}

// HasValuationReferenceModel returns true if ValuationReferenceModel is present, Tag 2140.
func (m NoOrderEntries) HasValuationReferenceModel() bool {
	return m.Has(tag.ValuationReferenceModel)
}

// HasStrategyType returns true if StrategyType is present, Tag 2141.
func (m NoOrderEntries) HasStrategyType() bool {
	return m.Has(tag.StrategyType)
}

// HasCommonPricingIndicator returns true if CommonPricingIndicator is present, Tag 2142.
func (m NoOrderEntries) HasCommonPricingIndicator() bool {
	return m.Has(tag.CommonPricingIndicator)
}

// HasSettlDisruptionProvision returns true if SettlDisruptionProvision is present, Tag 2143.
func (m NoOrderEntries) HasSettlDisruptionProvision() bool {
	return m.Has(tag.SettlDisruptionProvision)
}

// HasInstrumentRoundingDirection returns true if InstrumentRoundingDirection is present, Tag 2144.
func (m NoOrderEntries) HasInstrumentRoundingDirection() bool {
	return m.Has(tag.InstrumentRoundingDirection)
}

// HasInstrumentRoundingPrecision returns true if InstrumentRoundingPrecision is present, Tag 2145.
func (m NoOrderEntries) HasInstrumentRoundingPrecision() bool {
	return m.Has(tag.InstrumentRoundingPrecision)
}

// HasPricingDateUnadjusted returns true if PricingDateUnadjusted is present, Tag 41232.
func (m NoOrderEntries) HasPricingDateUnadjusted() bool {
	return m.Has(tag.PricingDateUnadjusted)
}

// HasPricingDateBusinessDayConvention returns true if PricingDateBusinessDayConvention is present, Tag 41233.
func (m NoOrderEntries) HasPricingDateBusinessDayConvention() bool {
	return m.Has(tag.PricingDateBusinessDayConvention)
}

// HasNoPricingDateBusinessCenters returns true if NoPricingDateBusinessCenters is present, Tag 41230.
func (m NoOrderEntries) HasNoPricingDateBusinessCenters() bool {
	return m.Has(tag.NoPricingDateBusinessCenters)
}

// HasPricingDateAdjusted returns true if PricingDateAdjusted is present, Tag 41234.
func (m NoOrderEntries) HasPricingDateAdjusted() bool {
	return m.Has(tag.PricingDateAdjusted)
}

// HasPricingTime returns true if PricingTime is present, Tag 41235.
func (m NoOrderEntries) HasPricingTime() bool {
	return m.Has(tag.PricingTime)
}

// HasPricingTimeBusinessCenter returns true if PricingTimeBusinessCenter is present, Tag 41236.
func (m NoOrderEntries) HasPricingTimeBusinessCenter() bool {
	return m.Has(tag.PricingTimeBusinessCenter)
}

// HasMarketDisruptionProvision returns true if MarketDisruptionProvision is present, Tag 41087.
func (m NoOrderEntries) HasMarketDisruptionProvision() bool {
	return m.Has(tag.MarketDisruptionProvision)
}

// HasNoMarketDisruptionEvents returns true if NoMarketDisruptionEvents is present, Tag 41092.
func (m NoOrderEntries) HasNoMarketDisruptionEvents() bool {
	return m.Has(tag.NoMarketDisruptionEvents)
}

// HasMarketDisruptionFallbackProvision returns true if MarketDisruptionFallbackProvision is present, Tag 41088.
func (m NoOrderEntries) HasMarketDisruptionFallbackProvision() bool {
	return m.Has(tag.MarketDisruptionFallbackProvision)
}

// HasNoMarketDisruptionFallbacks returns true if NoMarketDisruptionFallbacks is present, Tag 41094.
func (m NoOrderEntries) HasNoMarketDisruptionFallbacks() bool {
	return m.Has(tag.NoMarketDisruptionFallbacks)
}

// HasNoMarketDisruptionFallbackReferencePrices returns true if NoMarketDisruptionFallbackReferencePrices is present, Tag 41096.
func (m NoOrderEntries) HasNoMarketDisruptionFallbackReferencePrices() bool {
	return m.Has(tag.NoMarketDisruptionFallbackReferencePrices)
}

// HasMarketDisruptionMaximumDays returns true if MarketDisruptionMaximumDays is present, Tag 41089.
func (m NoOrderEntries) HasMarketDisruptionMaximumDays() bool {
	return m.Has(tag.MarketDisruptionMaximumDays)
}

// HasMarketDisruptionMaterialityPercentage returns true if MarketDisruptionMaterialityPercentage is present, Tag 41090.
func (m NoOrderEntries) HasMarketDisruptionMaterialityPercentage() bool {
	return m.Has(tag.MarketDisruptionMaterialityPercentage)
}

// HasMarketDisruptionMinimumFuturesContracts returns true if MarketDisruptionMinimumFuturesContracts is present, Tag 41091.
func (m NoOrderEntries) HasMarketDisruptionMinimumFuturesContracts() bool {
	return m.Has(tag.MarketDisruptionMinimumFuturesContracts)
}

// HasExerciseDesc returns true if ExerciseDesc is present, Tag 41106.
func (m NoOrderEntries) HasExerciseDesc() bool {
	return m.Has(tag.ExerciseDesc)
}

// HasEncodedExerciseDescLen returns true if EncodedExerciseDescLen is present, Tag 41107.
func (m NoOrderEntries) HasEncodedExerciseDescLen() bool {
	return m.Has(tag.EncodedExerciseDescLen)
}

// HasEncodedExerciseDesc returns true if EncodedExerciseDesc is present, Tag 41108.
func (m NoOrderEntries) HasEncodedExerciseDesc() bool {
	return m.Has(tag.EncodedExerciseDesc)
}

// HasAutomaticExerciseIndicator returns true if AutomaticExerciseIndicator is present, Tag 41109.
func (m NoOrderEntries) HasAutomaticExerciseIndicator() bool {
	return m.Has(tag.AutomaticExerciseIndicator)
}

// HasAutomaticExerciseThresholdRate returns true if AutomaticExerciseThresholdRate is present, Tag 41110.
func (m NoOrderEntries) HasAutomaticExerciseThresholdRate() bool {
	return m.Has(tag.AutomaticExerciseThresholdRate)
}

// HasExerciseConfirmationMethod returns true if ExerciseConfirmationMethod is present, Tag 41111.
func (m NoOrderEntries) HasExerciseConfirmationMethod() bool {
	return m.Has(tag.ExerciseConfirmationMethod)
}

// HasManualNoticeBusinessCenter returns true if ManualNoticeBusinessCenter is present, Tag 41112.
func (m NoOrderEntries) HasManualNoticeBusinessCenter() bool {
	return m.Has(tag.ManualNoticeBusinessCenter)
}

// HasFallbackExerciseIndicator returns true if FallbackExerciseIndicator is present, Tag 41113.
func (m NoOrderEntries) HasFallbackExerciseIndicator() bool {
	return m.Has(tag.FallbackExerciseIndicator)
}

// HasLimitedRightToConfirmIndicator returns true if LimitedRightToConfirmIndicator is present, Tag 41114.
func (m NoOrderEntries) HasLimitedRightToConfirmIndicator() bool {
	return m.Has(tag.LimitedRightToConfirmIndicator)
}

// HasExerciseSplitTicketIndicator returns true if ExerciseSplitTicketIndicator is present, Tag 41115.
func (m NoOrderEntries) HasExerciseSplitTicketIndicator() bool {
	return m.Has(tag.ExerciseSplitTicketIndicator)
}

// HasOptionExerciseBusinessDayConvention returns true if OptionExerciseBusinessDayConvention is present, Tag 41118.
func (m NoOrderEntries) HasOptionExerciseBusinessDayConvention() bool {
	return m.Has(tag.OptionExerciseBusinessDayConvention)
}

// HasNoOptionExerciseBusinessCenters returns true if NoOptionExerciseBusinessCenters is present, Tag 41116.
func (m NoOrderEntries) HasNoOptionExerciseBusinessCenters() bool {
	return m.Has(tag.NoOptionExerciseBusinessCenters)
}

// HasNoOptionExerciseDates returns true if NoOptionExerciseDates is present, Tag 41137.
func (m NoOrderEntries) HasNoOptionExerciseDates() bool {
	return m.Has(tag.NoOptionExerciseDates)
}

// HasOptionExerciseEarliestDateOffsetDayType returns true if OptionExerciseEarliestDateOffsetDayType is present, Tag 41119.
func (m NoOrderEntries) HasOptionExerciseEarliestDateOffsetDayType() bool {
	return m.Has(tag.OptionExerciseEarliestDateOffsetDayType)
}

// HasOptionExerciseEarliestDateOffsetPeriod returns true if OptionExerciseEarliestDateOffsetPeriod is present, Tag 41120.
func (m NoOrderEntries) HasOptionExerciseEarliestDateOffsetPeriod() bool {
	return m.Has(tag.OptionExerciseEarliestDateOffsetPeriod)
}

// HasOptionExerciseEarliestDateOffsetUnit returns true if OptionExerciseEarliestDateOffsetUnit is present, Tag 41121.
func (m NoOrderEntries) HasOptionExerciseEarliestDateOffsetUnit() bool {
	return m.Has(tag.OptionExerciseEarliestDateOffsetUnit)
}

// HasOptionExerciseFrequencyPeriod returns true if OptionExerciseFrequencyPeriod is present, Tag 41122.
func (m NoOrderEntries) HasOptionExerciseFrequencyPeriod() bool {
	return m.Has(tag.OptionExerciseFrequencyPeriod)
}

// HasOptionExerciseFrequencyUnit returns true if OptionExerciseFrequencyUnit is present, Tag 41123.
func (m NoOrderEntries) HasOptionExerciseFrequencyUnit() bool {
	return m.Has(tag.OptionExerciseFrequencyUnit)
}

// HasOptionExerciseStartDateUnadjusted returns true if OptionExerciseStartDateUnadjusted is present, Tag 41124.
func (m NoOrderEntries) HasOptionExerciseStartDateUnadjusted() bool {
	return m.Has(tag.OptionExerciseStartDateUnadjusted)
}

// HasOptionExerciseStartDateRelativeTo returns true if OptionExerciseStartDateRelativeTo is present, Tag 41125.
func (m NoOrderEntries) HasOptionExerciseStartDateRelativeTo() bool {
	return m.Has(tag.OptionExerciseStartDateRelativeTo)
}

// HasOptionExerciseStartDateOffsetPeriod returns true if OptionExerciseStartDateOffsetPeriod is present, Tag 41126.
func (m NoOrderEntries) HasOptionExerciseStartDateOffsetPeriod() bool {
	return m.Has(tag.OptionExerciseStartDateOffsetPeriod)
}

// HasOptionExerciseStartDateOffsetUnit returns true if OptionExerciseStartDateOffsetUnit is present, Tag 41127.
func (m NoOrderEntries) HasOptionExerciseStartDateOffsetUnit() bool {
	return m.Has(tag.OptionExerciseStartDateOffsetUnit)
}

// HasOptionExerciseStartDateOffsetDayType returns true if OptionExerciseStartDateOffsetDayType is present, Tag 41128.
func (m NoOrderEntries) HasOptionExerciseStartDateOffsetDayType() bool {
	return m.Has(tag.OptionExerciseStartDateOffsetDayType)
}

// HasOptionExerciseStartDateAdjusted returns true if OptionExerciseStartDateAdjusted is present, Tag 41129.
func (m NoOrderEntries) HasOptionExerciseStartDateAdjusted() bool {
	return m.Has(tag.OptionExerciseStartDateAdjusted)
}

// HasOptionExerciseSkip returns true if OptionExerciseSkip is present, Tag 41130.
func (m NoOrderEntries) HasOptionExerciseSkip() bool {
	return m.Has(tag.OptionExerciseSkip)
}

// HasOptionExerciseNominationDeadline returns true if OptionExerciseNominationDeadline is present, Tag 41131.
func (m NoOrderEntries) HasOptionExerciseNominationDeadline() bool {
	return m.Has(tag.OptionExerciseNominationDeadline)
}

// HasOptionExerciseFirstDateUnadjusted returns true if OptionExerciseFirstDateUnadjusted is present, Tag 41132.
func (m NoOrderEntries) HasOptionExerciseFirstDateUnadjusted() bool {
	return m.Has(tag.OptionExerciseFirstDateUnadjusted)
}

// HasOptionExerciseLastDateUnadjusted returns true if OptionExerciseLastDateUnadjusted is present, Tag 41133.
func (m NoOrderEntries) HasOptionExerciseLastDateUnadjusted() bool {
	return m.Has(tag.OptionExerciseLastDateUnadjusted)
}

// HasOptionExerciseEarliestTime returns true if OptionExerciseEarliestTime is present, Tag 41134.
func (m NoOrderEntries) HasOptionExerciseEarliestTime() bool {
	return m.Has(tag.OptionExerciseEarliestTime)
}

// HasOptionExerciseLatestTime returns true if OptionExerciseLatestTime is present, Tag 41135.
func (m NoOrderEntries) HasOptionExerciseLatestTime() bool {
	return m.Has(tag.OptionExerciseLatestTime)
}

// HasOptionExerciseTimeBusinessCenter returns true if OptionExerciseTimeBusinessCenter is present, Tag 41136.
func (m NoOrderEntries) HasOptionExerciseTimeBusinessCenter() bool {
	return m.Has(tag.OptionExerciseTimeBusinessCenter)
}

// HasOptionExerciseExpirationDateBusinessDayConvention returns true if OptionExerciseExpirationDateBusinessDayConvention is present, Tag 41142.
func (m NoOrderEntries) HasOptionExerciseExpirationDateBusinessDayConvention() bool {
	return m.Has(tag.OptionExerciseExpirationDateBusinessDayConvention)
}

// HasNoOptionExerciseExpirationDateBusinessCenters returns true if NoOptionExerciseExpirationDateBusinessCenters is present, Tag 41140.
func (m NoOrderEntries) HasNoOptionExerciseExpirationDateBusinessCenters() bool {
	return m.Has(tag.NoOptionExerciseExpirationDateBusinessCenters)
}

// HasNoOptionExerciseExpirationDates returns true if NoOptionExerciseExpirationDates is present, Tag 41152.
func (m NoOrderEntries) HasNoOptionExerciseExpirationDates() bool {
	return m.Has(tag.NoOptionExerciseExpirationDates)
}

// HasOptionExerciseExpirationDateRelativeTo returns true if OptionExerciseExpirationDateRelativeTo is present, Tag 41143.
func (m NoOrderEntries) HasOptionExerciseExpirationDateRelativeTo() bool {
	return m.Has(tag.OptionExerciseExpirationDateRelativeTo)
}

// HasOptionExerciseExpirationDateOffsetPeriod returns true if OptionExerciseExpirationDateOffsetPeriod is present, Tag 41144.
func (m NoOrderEntries) HasOptionExerciseExpirationDateOffsetPeriod() bool {
	return m.Has(tag.OptionExerciseExpirationDateOffsetPeriod)
}

// HasOptionExerciseExpirationDateOffsetUnit returns true if OptionExerciseExpirationDateOffsetUnit is present, Tag 41145.
func (m NoOrderEntries) HasOptionExerciseExpirationDateOffsetUnit() bool {
	return m.Has(tag.OptionExerciseExpirationDateOffsetUnit)
}

// HasOptionExerciseExpirationFrequencyPeriod returns true if OptionExerciseExpirationFrequencyPeriod is present, Tag 41146.
func (m NoOrderEntries) HasOptionExerciseExpirationFrequencyPeriod() bool {
	return m.Has(tag.OptionExerciseExpirationFrequencyPeriod)
}

// HasOptionExerciseExpirationFrequencyUnit returns true if OptionExerciseExpirationFrequencyUnit is present, Tag 41147.
func (m NoOrderEntries) HasOptionExerciseExpirationFrequencyUnit() bool {
	return m.Has(tag.OptionExerciseExpirationFrequencyUnit)
}

// HasOptionExerciseExpirationRollConvention returns true if OptionExerciseExpirationRollConvention is present, Tag 41148.
func (m NoOrderEntries) HasOptionExerciseExpirationRollConvention() bool {
	return m.Has(tag.OptionExerciseExpirationRollConvention)
}

// HasOptionExerciseExpirationDateOffsetDayType returns true if OptionExerciseExpirationDateOffsetDayType is present, Tag 41149.
func (m NoOrderEntries) HasOptionExerciseExpirationDateOffsetDayType() bool {
	return m.Has(tag.OptionExerciseExpirationDateOffsetDayType)
}

// HasOptionExerciseExpirationTime returns true if OptionExerciseExpirationTime is present, Tag 41150.
func (m NoOrderEntries) HasOptionExerciseExpirationTime() bool {
	return m.Has(tag.OptionExerciseExpirationTime)
}

// HasOptionExerciseExpirationTimeBusinessCenter returns true if OptionExerciseExpirationTimeBusinessCenter is present, Tag 41151.
func (m NoOrderEntries) HasOptionExerciseExpirationTimeBusinessCenter() bool {
	return m.Has(tag.OptionExerciseExpirationTimeBusinessCenter)
}

// HasSettlMethodElectingPartySide returns true if SettlMethodElectingPartySide is present, Tag 42590.
func (m NoOrderEntries) HasSettlMethodElectingPartySide() bool {
	return m.Has(tag.SettlMethodElectingPartySide)
}

// HasSettlMethodElectionDateUnadjusted returns true if SettlMethodElectionDateUnadjusted is present, Tag 42777.
func (m NoOrderEntries) HasSettlMethodElectionDateUnadjusted() bool {
	return m.Has(tag.SettlMethodElectionDateUnadjusted)
}

// HasSettlMethodElectionDateBusinessDayConvention returns true if SettlMethodElectionDateBusinessDayConvention is present, Tag 42778.
func (m NoOrderEntries) HasSettlMethodElectionDateBusinessDayConvention() bool {
	return m.Has(tag.SettlMethodElectionDateBusinessDayConvention)
}

// HasNoSettlMethodElectionDateBusinessCenters returns true if NoSettlMethodElectionDateBusinessCenters is present, Tag 42775.
func (m NoOrderEntries) HasNoSettlMethodElectionDateBusinessCenters() bool {
	return m.Has(tag.NoSettlMethodElectionDateBusinessCenters)
}

// HasSettlMethodElectionDateRelativeTo returns true if SettlMethodElectionDateRelativeTo is present, Tag 42779.
func (m NoOrderEntries) HasSettlMethodElectionDateRelativeTo() bool {
	return m.Has(tag.SettlMethodElectionDateRelativeTo)
}

// HasSettlMethodElectionDateOffsetPeriod returns true if SettlMethodElectionDateOffsetPeriod is present, Tag 42780.
func (m NoOrderEntries) HasSettlMethodElectionDateOffsetPeriod() bool {
	return m.Has(tag.SettlMethodElectionDateOffsetPeriod)
}

// HasSettlMethodElectionDateOffsetUnit returns true if SettlMethodElectionDateOffsetUnit is present, Tag 42781.
func (m NoOrderEntries) HasSettlMethodElectionDateOffsetUnit() bool {
	return m.Has(tag.SettlMethodElectionDateOffsetUnit)
}

// HasSettlMethodElectionDateOffsetDayType returns true if SettlMethodElectionDateOffsetDayType is present, Tag 42782.
func (m NoOrderEntries) HasSettlMethodElectionDateOffsetDayType() bool {
	return m.Has(tag.SettlMethodElectionDateOffsetDayType)
}

// HasSettlMethodElectionDateAdjusted returns true if SettlMethodElectionDateAdjusted is present, Tag 42783.
func (m NoOrderEntries) HasSettlMethodElectionDateAdjusted() bool {
	return m.Has(tag.SettlMethodElectionDateAdjusted)
}

// HasMakeWholeDate returns true if MakeWholeDate is present, Tag 42591.
func (m NoOrderEntries) HasMakeWholeDate() bool {
	return m.Has(tag.MakeWholeDate)
}

// HasMakeWholeAmount returns true if MakeWholeAmount is present, Tag 42592.
func (m NoOrderEntries) HasMakeWholeAmount() bool {
	return m.Has(tag.MakeWholeAmount)
}

// HasMakeWholeBenchmarkCurveName returns true if MakeWholeBenchmarkCurveName is present, Tag 42593.
func (m NoOrderEntries) HasMakeWholeBenchmarkCurveName() bool {
	return m.Has(tag.MakeWholeBenchmarkCurveName)
}

// HasMakeWholeBenchmarkCurvePoint returns true if MakeWholeBenchmarkCurvePoint is present, Tag 42594.
func (m NoOrderEntries) HasMakeWholeBenchmarkCurvePoint() bool {
	return m.Has(tag.MakeWholeBenchmarkCurvePoint)
}

// HasMakeWholeRecallSpread returns true if MakeWholeRecallSpread is present, Tag 42595.
func (m NoOrderEntries) HasMakeWholeRecallSpread() bool {
	return m.Has(tag.MakeWholeRecallSpread)
}

// HasMakeWholeBenchmarkQuote returns true if MakeWholeBenchmarkQuote is present, Tag 42596.
func (m NoOrderEntries) HasMakeWholeBenchmarkQuote() bool {
	return m.Has(tag.MakeWholeBenchmarkQuote)
}

// HasMakeWholeInterpolationMethod returns true if MakeWholeInterpolationMethod is present, Tag 42597.
func (m NoOrderEntries) HasMakeWholeInterpolationMethod() bool {
	return m.Has(tag.MakeWholeInterpolationMethod)
}

// HasTradingUnitPeriodMultiplier returns true if TradingUnitPeriodMultiplier is present, Tag 2353.
func (m NoOrderEntries) HasTradingUnitPeriodMultiplier() bool {
	return m.Has(tag.TradingUnitPeriodMultiplier)
}

// HasAssetGroup returns true if AssetGroup is present, Tag 2210.
func (m NoOrderEntries) HasAssetGroup() bool {
	return m.Has(tag.AssetGroup)
}

// HasOrigStrikePrice returns true if OrigStrikePrice is present, Tag 2578.
func (m NoOrderEntries) HasOrigStrikePrice() bool {
	return m.Has(tag.OrigStrikePrice)
}

// HasStrikePricePrecision returns true if StrikePricePrecision is present, Tag 2577.
func (m NoOrderEntries) HasStrikePricePrecision() bool {
	return m.Has(tag.StrikePricePrecision)
}

// HasSettlSubMethod returns true if SettlSubMethod is present, Tag 2579.
func (m NoOrderEntries) HasSettlSubMethod() bool {
	return m.Has(tag.SettlSubMethod)
}

// HasBlockTradeEligibilityIndicator returns true if BlockTradeEligibilityIndicator is present, Tag 2575.
func (m NoOrderEntries) HasBlockTradeEligibilityIndicator() bool {
	return m.Has(tag.BlockTradeEligibilityIndicator)
}

// HasLowExercisePriceOptionIndicator returns true if LowExercisePriceOptionIndicator is present, Tag 2574.
func (m NoOrderEntries) HasLowExercisePriceOptionIndicator() bool {
	return m.Has(tag.LowExercisePriceOptionIndicator)
}

// HasInstrumentPricePrecision returns true if InstrumentPricePrecision is present, Tag 2576.
func (m NoOrderEntries) HasInstrumentPricePrecision() bool {
	return m.Has(tag.InstrumentPricePrecision)
}

// HasStrikeIndexCurvePoint returns true if StrikeIndexCurvePoint is present, Tag 2600.
func (m NoOrderEntries) HasStrikeIndexCurvePoint() bool {
	return m.Has(tag.StrikeIndexCurvePoint)
}

// HasStrikeIndexQuote returns true if StrikeIndexQuote is present, Tag 2601.
func (m NoOrderEntries) HasStrikeIndexQuote() bool {
	return m.Has(tag.StrikeIndexQuote)
}

// HasNoExtraordinaryEvents returns true if NoExtraordinaryEvents is present, Tag 42296.
func (m NoOrderEntries) HasNoExtraordinaryEvents() bool {
	return m.Has(tag.NoExtraordinaryEvents)
}

// HasExtraordinaryEventAdjustmentMethod returns true if ExtraordinaryEventAdjustmentMethod is present, Tag 2602.
func (m NoOrderEntries) HasExtraordinaryEventAdjustmentMethod() bool {
	return m.Has(tag.ExtraordinaryEventAdjustmentMethod)
}

// HasExchangeLookAlike returns true if ExchangeLookAlike is present, Tag 2603.
func (m NoOrderEntries) HasExchangeLookAlike() bool {
	return m.Has(tag.ExchangeLookAlike)
}

// HasInTheMoneyCondition returns true if InTheMoneyCondition is present, Tag 2681.
func (m NoOrderEntries) HasInTheMoneyCondition() bool {
	return m.Has(tag.InTheMoneyCondition)
}

// HasContraryInstructionEligibilityIndicator returns true if ContraryInstructionEligibilityIndicator is present, Tag 2685.
func (m NoOrderEntries) HasContraryInstructionEligibilityIndicator() bool {
	return m.Has(tag.ContraryInstructionEligibilityIndicator)
}

// HasFinancialInstrumentFullName returns true if FinancialInstrumentFullName is present, Tag 2714.
func (m NoOrderEntries) HasFinancialInstrumentFullName() bool {
	return m.Has(tag.FinancialInstrumentFullName)
}

// HasEncodedFinancialInstrumentFullNameLen returns true if EncodedFinancialInstrumentFullNameLen is present, Tag 2715.
func (m NoOrderEntries) HasEncodedFinancialInstrumentFullNameLen() bool {
	return m.Has(tag.EncodedFinancialInstrumentFullNameLen)
}

// HasEncodedFinancialInstrumentFullName returns true if EncodedFinancialInstrumentFullName is present, Tag 2716.
func (m NoOrderEntries) HasEncodedFinancialInstrumentFullName() bool {
	return m.Has(tag.EncodedFinancialInstrumentFullName)
}

// HasAssetSubType returns true if AssetSubType is present, Tag 2735.
func (m NoOrderEntries) HasAssetSubType() bool {
	return m.Has(tag.AssetSubType)
}

// HasFinancialInstrumentShortName returns true if FinancialInstrumentShortName is present, Tag 2737.
func (m NoOrderEntries) HasFinancialInstrumentShortName() bool {
	return m.Has(tag.FinancialInstrumentShortName)
}

// HasReturnTrigger returns true if ReturnTrigger is present, Tag 2753.
func (m NoOrderEntries) HasReturnTrigger() bool {
	return m.Has(tag.ReturnTrigger)
}

// HasDeliveryRouteOrCharter returns true if DeliveryRouteOrCharter is present, Tag 2752.
func (m NoOrderEntries) HasDeliveryRouteOrCharter() bool {
	return m.Has(tag.DeliveryRouteOrCharter)
}

// HasCouponOtherDayCount returns true if CouponOtherDayCount is present, Tag 2879.
func (m NoOrderEntries) HasCouponOtherDayCount() bool {
	return m.Has(tag.CouponOtherDayCount)
}

// HasUPICode returns true if UPICode is present, Tag 2891.
func (m NoOrderEntries) HasUPICode() bool {
	return m.Has(tag.UPICode)
}

// NoSecurityAltID is a repeating group element, Tag 454.
type NoSecurityAltID struct {
	*quickfix.Group
}

// SetSecurityAltID sets SecurityAltID, Tag 455.
func (m NoSecurityAltID) SetSecurityAltID(v string) {
	m.Set(field.NewSecurityAltID(v))
}

// SetSecurityAltIDSource sets SecurityAltIDSource, Tag 456.
func (m NoSecurityAltID) SetSecurityAltIDSource(v string) {
	m.Set(field.NewSecurityAltIDSource(v))
}

// GetSecurityAltID gets SecurityAltID, Tag 455.
func (m NoSecurityAltID) GetSecurityAltID() (v string, err quickfix.MessageRejectError) {
	var f field.SecurityAltIDField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetSecurityAltIDSource gets SecurityAltIDSource, Tag 456.
func (m NoSecurityAltID) GetSecurityAltIDSource() (v string, err quickfix.MessageRejectError) {
	var f field.SecurityAltIDSourceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasSecurityAltID returns true if SecurityAltID is present, Tag 455.
func (m NoSecurityAltID) HasSecurityAltID() bool {
	return m.Has(tag.SecurityAltID)
}

// HasSecurityAltIDSource returns true if SecurityAltIDSource is present, Tag 456.
func (m NoSecurityAltID) HasSecurityAltIDSource() bool {
	return m.Has(tag.SecurityAltIDSource)
}

// NoSecurityAltIDRepeatingGroup is a repeating group, Tag 454.
type NoSecurityAltIDRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoSecurityAltIDRepeatingGroup returns an initialized, NoSecurityAltIDRepeatingGroup.
func NewNoSecurityAltIDRepeatingGroup() NoSecurityAltIDRepeatingGroup {
	return NoSecurityAltIDRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoSecurityAltID,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.SecurityAltID),
				quickfix.GroupElement(tag.SecurityAltIDSource),
			},
		),
	}
}

// Add create and append a new NoSecurityAltID to this group.
func (m NoSecurityAltIDRepeatingGroup) Add() NoSecurityAltID {
	g := m.RepeatingGroup.Add()
	return NoSecurityAltID{g}
}

// Get returns the ith NoSecurityAltID in the NoSecurityAltIDRepeatinGroup.
func (m NoSecurityAltIDRepeatingGroup) Get(i int) NoSecurityAltID {
	return NoSecurityAltID{m.RepeatingGroup.Get(i)}
}

// NoEvents is a repeating group element, Tag 864.
type NoEvents struct {
	*quickfix.Group
}

// SetEventType sets EventType, Tag 865.
func (m NoEvents) SetEventType(v enum.EventType) {
	m.Set(field.NewEventType(v))
}

// SetEventDate sets EventDate, Tag 866.
func (m NoEvents) SetEventDate(v string) {
	m.Set(field.NewEventDate(v))
}

// SetEventTime sets EventTime, Tag 1145.
func (m NoEvents) SetEventTime(v time.Time) {
	m.Set(field.NewEventTime(v))
}

// SetEventPx sets EventPx, Tag 867.
func (m NoEvents) SetEventPx(value decimal.Decimal, scale int32) {
	m.Set(field.NewEventPx(value, scale))
}

// SetEventText sets EventText, Tag 868.
func (m NoEvents) SetEventText(v string) {
	m.Set(field.NewEventText(v))
}

// SetEventTimeUnit sets EventTimeUnit, Tag 1827.
func (m NoEvents) SetEventTimeUnit(v enum.EventTimeUnit) {
	m.Set(field.NewEventTimeUnit(v))
}

// SetEventTimePeriod sets EventTimePeriod, Tag 1826.
func (m NoEvents) SetEventTimePeriod(v int) {
	m.Set(field.NewEventTimePeriod(v))
}

// SetEventMonthYear sets EventMonthYear, Tag 2340.
func (m NoEvents) SetEventMonthYear(v string) {
	m.Set(field.NewEventMonthYear(v))
}

// SetEncodedEventTextLen sets EncodedEventTextLen, Tag 1578.
func (m NoEvents) SetEncodedEventTextLen(v int) {
	m.Set(field.NewEncodedEventTextLen(v))
}

// SetEncodedEventText sets EncodedEventText, Tag 1579.
func (m NoEvents) SetEncodedEventText(v string) {
	m.Set(field.NewEncodedEventText(v))
}

// GetEventType gets EventType, Tag 865.
func (m NoEvents) GetEventType() (v enum.EventType, err quickfix.MessageRejectError) {
	var f field.EventTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetEventDate gets EventDate, Tag 866.
func (m NoEvents) GetEventDate() (v string, err quickfix.MessageRejectError) {
	var f field.EventDateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetEventTime gets EventTime, Tag 1145.
func (m NoEvents) GetEventTime() (v time.Time, err quickfix.MessageRejectError) {
	var f field.EventTimeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetEventPx gets EventPx, Tag 867.
func (m NoEvents) GetEventPx() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.EventPxField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetEventText gets EventText, Tag 868.
func (m NoEvents) GetEventText() (v string, err quickfix.MessageRejectError) {
	var f field.EventTextField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetEventTimeUnit gets EventTimeUnit, Tag 1827.
func (m NoEvents) GetEventTimeUnit() (v enum.EventTimeUnit, err quickfix.MessageRejectError) {
	var f field.EventTimeUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetEventTimePeriod gets EventTimePeriod, Tag 1826.
func (m NoEvents) GetEventTimePeriod() (v int, err quickfix.MessageRejectError) {
	var f field.EventTimePeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetEventMonthYear gets EventMonthYear, Tag 2340.
func (m NoEvents) GetEventMonthYear() (v string, err quickfix.MessageRejectError) {
	var f field.EventMonthYearField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetEncodedEventTextLen gets EncodedEventTextLen, Tag 1578.
func (m NoEvents) GetEncodedEventTextLen() (v int, err quickfix.MessageRejectError) {
	var f field.EncodedEventTextLenField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetEncodedEventText gets EncodedEventText, Tag 1579.
func (m NoEvents) GetEncodedEventText() (v string, err quickfix.MessageRejectError) {
	var f field.EncodedEventTextField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasEventType returns true if EventType is present, Tag 865.
func (m NoEvents) HasEventType() bool {
	return m.Has(tag.EventType)
}

// HasEventDate returns true if EventDate is present, Tag 866.
func (m NoEvents) HasEventDate() bool {
	return m.Has(tag.EventDate)
}

// HasEventTime returns true if EventTime is present, Tag 1145.
func (m NoEvents) HasEventTime() bool {
	return m.Has(tag.EventTime)
}

// HasEventPx returns true if EventPx is present, Tag 867.
func (m NoEvents) HasEventPx() bool {
	return m.Has(tag.EventPx)
}

// HasEventText returns true if EventText is present, Tag 868.
func (m NoEvents) HasEventText() bool {
	return m.Has(tag.EventText)
}

// HasEventTimeUnit returns true if EventTimeUnit is present, Tag 1827.
func (m NoEvents) HasEventTimeUnit() bool {
	return m.Has(tag.EventTimeUnit)
}

// HasEventTimePeriod returns true if EventTimePeriod is present, Tag 1826.
func (m NoEvents) HasEventTimePeriod() bool {
	return m.Has(tag.EventTimePeriod)
}

// HasEventMonthYear returns true if EventMonthYear is present, Tag 2340.
func (m NoEvents) HasEventMonthYear() bool {
	return m.Has(tag.EventMonthYear)
}

// HasEncodedEventTextLen returns true if EncodedEventTextLen is present, Tag 1578.
func (m NoEvents) HasEncodedEventTextLen() bool {
	return m.Has(tag.EncodedEventTextLen)
}

// HasEncodedEventText returns true if EncodedEventText is present, Tag 1579.
func (m NoEvents) HasEncodedEventText() bool {
	return m.Has(tag.EncodedEventText)
}

// NoEventsRepeatingGroup is a repeating group, Tag 864.
type NoEventsRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoEventsRepeatingGroup returns an initialized, NoEventsRepeatingGroup.
func NewNoEventsRepeatingGroup() NoEventsRepeatingGroup {
	return NoEventsRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoEvents,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.EventType),
				quickfix.GroupElement(tag.EventDate),
				quickfix.GroupElement(tag.EventTime),
				quickfix.GroupElement(tag.EventPx),
				quickfix.GroupElement(tag.EventText),
				quickfix.GroupElement(tag.EventTimeUnit),
				quickfix.GroupElement(tag.EventTimePeriod),
				quickfix.GroupElement(tag.EventMonthYear),
				quickfix.GroupElement(tag.EncodedEventTextLen),
				quickfix.GroupElement(tag.EncodedEventText),
			},
		),
	}
}

// Add create and append a new NoEvents to this group.
func (m NoEventsRepeatingGroup) Add() NoEvents {
	g := m.RepeatingGroup.Add()
	return NoEvents{g}
}

// Get returns the ith NoEvents in the NoEventsRepeatinGroup.
func (m NoEventsRepeatingGroup) Get(i int) NoEvents {
	return NoEvents{m.RepeatingGroup.Get(i)}
}

// NoInstrumentParties is a repeating group element, Tag 1018.
type NoInstrumentParties struct {
	*quickfix.Group
}

// SetInstrumentPartyID sets InstrumentPartyID, Tag 1019.
func (m NoInstrumentParties) SetInstrumentPartyID(v string) {
	m.Set(field.NewInstrumentPartyID(v))
}

// SetInstrumentPartyIDSource sets InstrumentPartyIDSource, Tag 1050.
func (m NoInstrumentParties) SetInstrumentPartyIDSource(v string) {
	m.Set(field.NewInstrumentPartyIDSource(v))
}

// SetInstrumentPartyRole sets InstrumentPartyRole, Tag 1051.
func (m NoInstrumentParties) SetInstrumentPartyRole(v int) {
	m.Set(field.NewInstrumentPartyRole(v))
}

// SetNoInstrumentPartySubIDs sets NoInstrumentPartySubIDs, Tag 1052.
func (m NoInstrumentParties) SetNoInstrumentPartySubIDs(f NoInstrumentPartySubIDsRepeatingGroup) {
	m.SetGroup(f)
}

// SetInstrumentPartyRoleQualifier sets InstrumentPartyRoleQualifier, Tag 2378.
func (m NoInstrumentParties) SetInstrumentPartyRoleQualifier(v int) {
	m.Set(field.NewInstrumentPartyRoleQualifier(v))
}

// GetInstrumentPartyID gets InstrumentPartyID, Tag 1019.
func (m NoInstrumentParties) GetInstrumentPartyID() (v string, err quickfix.MessageRejectError) {
	var f field.InstrumentPartyIDField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetInstrumentPartyIDSource gets InstrumentPartyIDSource, Tag 1050.
func (m NoInstrumentParties) GetInstrumentPartyIDSource() (v string, err quickfix.MessageRejectError) {
	var f field.InstrumentPartyIDSourceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetInstrumentPartyRole gets InstrumentPartyRole, Tag 1051.
func (m NoInstrumentParties) GetInstrumentPartyRole() (v int, err quickfix.MessageRejectError) {
	var f field.InstrumentPartyRoleField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoInstrumentPartySubIDs gets NoInstrumentPartySubIDs, Tag 1052.
func (m NoInstrumentParties) GetNoInstrumentPartySubIDs() (NoInstrumentPartySubIDsRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoInstrumentPartySubIDsRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetInstrumentPartyRoleQualifier gets InstrumentPartyRoleQualifier, Tag 2378.
func (m NoInstrumentParties) GetInstrumentPartyRoleQualifier() (v int, err quickfix.MessageRejectError) {
	var f field.InstrumentPartyRoleQualifierField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasInstrumentPartyID returns true if InstrumentPartyID is present, Tag 1019.
func (m NoInstrumentParties) HasInstrumentPartyID() bool {
	return m.Has(tag.InstrumentPartyID)
}

// HasInstrumentPartyIDSource returns true if InstrumentPartyIDSource is present, Tag 1050.
func (m NoInstrumentParties) HasInstrumentPartyIDSource() bool {
	return m.Has(tag.InstrumentPartyIDSource)
}

// HasInstrumentPartyRole returns true if InstrumentPartyRole is present, Tag 1051.
func (m NoInstrumentParties) HasInstrumentPartyRole() bool {
	return m.Has(tag.InstrumentPartyRole)
}

// HasNoInstrumentPartySubIDs returns true if NoInstrumentPartySubIDs is present, Tag 1052.
func (m NoInstrumentParties) HasNoInstrumentPartySubIDs() bool {
	return m.Has(tag.NoInstrumentPartySubIDs)
}

// HasInstrumentPartyRoleQualifier returns true if InstrumentPartyRoleQualifier is present, Tag 2378.
func (m NoInstrumentParties) HasInstrumentPartyRoleQualifier() bool {
	return m.Has(tag.InstrumentPartyRoleQualifier)
}

// NoInstrumentPartySubIDs is a repeating group element, Tag 1052.
type NoInstrumentPartySubIDs struct {
	*quickfix.Group
}

// SetInstrumentPartySubID sets InstrumentPartySubID, Tag 1053.
func (m NoInstrumentPartySubIDs) SetInstrumentPartySubID(v string) {
	m.Set(field.NewInstrumentPartySubID(v))
}

// SetInstrumentPartySubIDType sets InstrumentPartySubIDType, Tag 1054.
func (m NoInstrumentPartySubIDs) SetInstrumentPartySubIDType(v int) {
	m.Set(field.NewInstrumentPartySubIDType(v))
}

// GetInstrumentPartySubID gets InstrumentPartySubID, Tag 1053.
func (m NoInstrumentPartySubIDs) GetInstrumentPartySubID() (v string, err quickfix.MessageRejectError) {
	var f field.InstrumentPartySubIDField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetInstrumentPartySubIDType gets InstrumentPartySubIDType, Tag 1054.
func (m NoInstrumentPartySubIDs) GetInstrumentPartySubIDType() (v int, err quickfix.MessageRejectError) {
	var f field.InstrumentPartySubIDTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasInstrumentPartySubID returns true if InstrumentPartySubID is present, Tag 1053.
func (m NoInstrumentPartySubIDs) HasInstrumentPartySubID() bool {
	return m.Has(tag.InstrumentPartySubID)
}

// HasInstrumentPartySubIDType returns true if InstrumentPartySubIDType is present, Tag 1054.
func (m NoInstrumentPartySubIDs) HasInstrumentPartySubIDType() bool {
	return m.Has(tag.InstrumentPartySubIDType)
}

// NoInstrumentPartySubIDsRepeatingGroup is a repeating group, Tag 1052.
type NoInstrumentPartySubIDsRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoInstrumentPartySubIDsRepeatingGroup returns an initialized, NoInstrumentPartySubIDsRepeatingGroup.
func NewNoInstrumentPartySubIDsRepeatingGroup() NoInstrumentPartySubIDsRepeatingGroup {
	return NoInstrumentPartySubIDsRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoInstrumentPartySubIDs,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.InstrumentPartySubID),
				quickfix.GroupElement(tag.InstrumentPartySubIDType),
			},
		),
	}
}

// Add create and append a new NoInstrumentPartySubIDs to this group.
func (m NoInstrumentPartySubIDsRepeatingGroup) Add() NoInstrumentPartySubIDs {
	g := m.RepeatingGroup.Add()
	return NoInstrumentPartySubIDs{g}
}

// Get returns the ith NoInstrumentPartySubIDs in the NoInstrumentPartySubIDsRepeatinGroup.
func (m NoInstrumentPartySubIDsRepeatingGroup) Get(i int) NoInstrumentPartySubIDs {
	return NoInstrumentPartySubIDs{m.RepeatingGroup.Get(i)}
}

// NoInstrumentPartiesRepeatingGroup is a repeating group, Tag 1018.
type NoInstrumentPartiesRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoInstrumentPartiesRepeatingGroup returns an initialized, NoInstrumentPartiesRepeatingGroup.
func NewNoInstrumentPartiesRepeatingGroup() NoInstrumentPartiesRepeatingGroup {
	return NoInstrumentPartiesRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoInstrumentParties,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.InstrumentPartyID),
				quickfix.GroupElement(tag.InstrumentPartyIDSource),
				quickfix.GroupElement(tag.InstrumentPartyRole),
				NewNoInstrumentPartySubIDsRepeatingGroup(),
				quickfix.GroupElement(tag.InstrumentPartyRoleQualifier),
			},
		),
	}
}

// Add create and append a new NoInstrumentParties to this group.
func (m NoInstrumentPartiesRepeatingGroup) Add() NoInstrumentParties {
	g := m.RepeatingGroup.Add()
	return NoInstrumentParties{g}
}

// Get returns the ith NoInstrumentParties in the NoInstrumentPartiesRepeatinGroup.
func (m NoInstrumentPartiesRepeatingGroup) Get(i int) NoInstrumentParties {
	return NoInstrumentParties{m.RepeatingGroup.Get(i)}
}

// NoComplexEvents is a repeating group element, Tag 1483.
type NoComplexEvents struct {
	*quickfix.Group
}

// SetComplexEventType sets ComplexEventType, Tag 1484.
func (m NoComplexEvents) SetComplexEventType(v enum.ComplexEventType) {
	m.Set(field.NewComplexEventType(v))
}

// SetComplexOptPayoutAmount sets ComplexOptPayoutAmount, Tag 1485.
func (m NoComplexEvents) SetComplexOptPayoutAmount(value decimal.Decimal, scale int32) {
	m.Set(field.NewComplexOptPayoutAmount(value, scale))
}

// SetComplexEventPrice sets ComplexEventPrice, Tag 1486.
func (m NoComplexEvents) SetComplexEventPrice(value decimal.Decimal, scale int32) {
	m.Set(field.NewComplexEventPrice(value, scale))
}

// SetComplexEventPriceBoundaryMethod sets ComplexEventPriceBoundaryMethod, Tag 1487.
func (m NoComplexEvents) SetComplexEventPriceBoundaryMethod(v enum.ComplexEventPriceBoundaryMethod) {
	m.Set(field.NewComplexEventPriceBoundaryMethod(v))
}

// SetComplexEventPriceBoundaryPrecision sets ComplexEventPriceBoundaryPrecision, Tag 1488.
func (m NoComplexEvents) SetComplexEventPriceBoundaryPrecision(value decimal.Decimal, scale int32) {
	m.Set(field.NewComplexEventPriceBoundaryPrecision(value, scale))
}

// SetComplexEventPriceTimeType sets ComplexEventPriceTimeType, Tag 1489.
func (m NoComplexEvents) SetComplexEventPriceTimeType(v enum.ComplexEventPriceTimeType) {
	m.Set(field.NewComplexEventPriceTimeType(v))
}

// SetComplexEventCondition sets ComplexEventCondition, Tag 1490.
func (m NoComplexEvents) SetComplexEventCondition(v enum.ComplexEventCondition) {
	m.Set(field.NewComplexEventCondition(v))
}

// SetNoComplexEventDates sets NoComplexEventDates, Tag 1491.
func (m NoComplexEvents) SetNoComplexEventDates(f NoComplexEventDatesRepeatingGroup) {
	m.SetGroup(f)
}

// SetComplexOptPayoutPaySide sets ComplexOptPayoutPaySide, Tag 2117.
func (m NoComplexEvents) SetComplexOptPayoutPaySide(v int) {
	m.Set(field.NewComplexOptPayoutPaySide(v))
}

// SetComplexOptPayoutReceiveSide sets ComplexOptPayoutReceiveSide, Tag 2118.
func (m NoComplexEvents) SetComplexOptPayoutReceiveSide(v int) {
	m.Set(field.NewComplexOptPayoutReceiveSide(v))
}

// SetComplexOptPayoutUnderlier sets ComplexOptPayoutUnderlier, Tag 2119.
func (m NoComplexEvents) SetComplexOptPayoutUnderlier(v string) {
	m.Set(field.NewComplexOptPayoutUnderlier(v))
}

// SetComplexOptPayoutPercentage sets ComplexOptPayoutPercentage, Tag 2120.
func (m NoComplexEvents) SetComplexOptPayoutPercentage(value decimal.Decimal, scale int32) {
	m.Set(field.NewComplexOptPayoutPercentage(value, scale))
}

// SetComplexOptPayoutTime sets ComplexOptPayoutTime, Tag 2121.
func (m NoComplexEvents) SetComplexOptPayoutTime(v enum.ComplexOptPayoutTime) {
	m.Set(field.NewComplexOptPayoutTime(v))
}

// SetComplexOptPayoutCurrency sets ComplexOptPayoutCurrency, Tag 2122.
func (m NoComplexEvents) SetComplexOptPayoutCurrency(v string) {
	m.Set(field.NewComplexOptPayoutCurrency(v))
}

// SetComplexEventPricePercentage sets ComplexEventPricePercentage, Tag 2123.
func (m NoComplexEvents) SetComplexEventPricePercentage(value decimal.Decimal, scale int32) {
	m.Set(field.NewComplexEventPricePercentage(value, scale))
}

// SetComplexEventCurrencyOne sets ComplexEventCurrencyOne, Tag 2124.
func (m NoComplexEvents) SetComplexEventCurrencyOne(v string) {
	m.Set(field.NewComplexEventCurrencyOne(v))
}

// SetComplexEventCurrencyTwo sets ComplexEventCurrencyTwo, Tag 2125.
func (m NoComplexEvents) SetComplexEventCurrencyTwo(v string) {
	m.Set(field.NewComplexEventCurrencyTwo(v))
}

// SetComplexEventQuoteBasis sets ComplexEventQuoteBasis, Tag 2126.
func (m NoComplexEvents) SetComplexEventQuoteBasis(v enum.ComplexEventQuoteBasis) {
	m.Set(field.NewComplexEventQuoteBasis(v))
}

// SetComplexEventFixedFXRate sets ComplexEventFixedFXRate, Tag 2127.
func (m NoComplexEvents) SetComplexEventFixedFXRate(value decimal.Decimal, scale int32) {
	m.Set(field.NewComplexEventFixedFXRate(value, scale))
}

// SetComplexEventDeterminationMethod sets ComplexEventDeterminationMethod, Tag 2128.
func (m NoComplexEvents) SetComplexEventDeterminationMethod(v string) {
	m.Set(field.NewComplexEventDeterminationMethod(v))
}

// SetComplexEventCalculationAgent sets ComplexEventCalculationAgent, Tag 2129.
func (m NoComplexEvents) SetComplexEventCalculationAgent(v int) {
	m.Set(field.NewComplexEventCalculationAgent(v))
}

// SetComplexEventStrikePrice sets ComplexEventStrikePrice, Tag 2130.
func (m NoComplexEvents) SetComplexEventStrikePrice(value decimal.Decimal, scale int32) {
	m.Set(field.NewComplexEventStrikePrice(value, scale))
}

// SetComplexEventStrikeFactor sets ComplexEventStrikeFactor, Tag 2131.
func (m NoComplexEvents) SetComplexEventStrikeFactor(value decimal.Decimal, scale int32) {
	m.Set(field.NewComplexEventStrikeFactor(value, scale))
}

// SetComplexEventStrikeNumberOfOptions sets ComplexEventStrikeNumberOfOptions, Tag 2132.
func (m NoComplexEvents) SetComplexEventStrikeNumberOfOptions(v int) {
	m.Set(field.NewComplexEventStrikeNumberOfOptions(v))
}

// SetNoComplexEventRateSources sets NoComplexEventRateSources, Tag 41013.
func (m NoComplexEvents) SetNoComplexEventRateSources(f NoComplexEventRateSourcesRepeatingGroup) {
	m.SetGroup(f)
}

// SetComplexEventDateUnadjusted sets ComplexEventDateUnadjusted, Tag 41020.
func (m NoComplexEvents) SetComplexEventDateUnadjusted(v string) {
	m.Set(field.NewComplexEventDateUnadjusted(v))
}

// SetComplexEventDateRelativeTo sets ComplexEventDateRelativeTo, Tag 41021.
func (m NoComplexEvents) SetComplexEventDateRelativeTo(v int) {
	m.Set(field.NewComplexEventDateRelativeTo(v))
}

// SetComplexEventDateOffsetPeriod sets ComplexEventDateOffsetPeriod, Tag 41022.
func (m NoComplexEvents) SetComplexEventDateOffsetPeriod(v int) {
	m.Set(field.NewComplexEventDateOffsetPeriod(v))
}

// SetComplexEventDateOffsetUnit sets ComplexEventDateOffsetUnit, Tag 41023.
func (m NoComplexEvents) SetComplexEventDateOffsetUnit(v string) {
	m.Set(field.NewComplexEventDateOffsetUnit(v))
}

// SetComplexEventDateOffsetDayType sets ComplexEventDateOffsetDayType, Tag 41024.
func (m NoComplexEvents) SetComplexEventDateOffsetDayType(v enum.ComplexEventDateOffsetDayType) {
	m.Set(field.NewComplexEventDateOffsetDayType(v))
}

// SetComplexEventDateBusinessDayConvention sets ComplexEventDateBusinessDayConvention, Tag 41025.
func (m NoComplexEvents) SetComplexEventDateBusinessDayConvention(v int) {
	m.Set(field.NewComplexEventDateBusinessDayConvention(v))
}

// SetNoComplexEventDateBusinessCenters sets NoComplexEventDateBusinessCenters, Tag 41018.
func (m NoComplexEvents) SetNoComplexEventDateBusinessCenters(f NoComplexEventDateBusinessCentersRepeatingGroup) {
	m.SetGroup(f)
}

// SetComplexEventDateAdjusted sets ComplexEventDateAdjusted, Tag 41026.
func (m NoComplexEvents) SetComplexEventDateAdjusted(v string) {
	m.Set(field.NewComplexEventDateAdjusted(v))
}

// SetComplexEventFixingTime sets ComplexEventFixingTime, Tag 41027.
func (m NoComplexEvents) SetComplexEventFixingTime(v string) {
	m.Set(field.NewComplexEventFixingTime(v))
}

// SetComplexEventFixingTimeBusinessCenter sets ComplexEventFixingTimeBusinessCenter, Tag 41028.
func (m NoComplexEvents) SetComplexEventFixingTimeBusinessCenter(v string) {
	m.Set(field.NewComplexEventFixingTimeBusinessCenter(v))
}

// SetNoComplexEventPeriods sets NoComplexEventPeriods, Tag 41010.
func (m NoComplexEvents) SetNoComplexEventPeriods(f NoComplexEventPeriodsRepeatingGroup) {
	m.SetGroup(f)
}

// SetComplexEventCreditEventsXIDRef sets ComplexEventCreditEventsXIDRef, Tag 2133.
func (m NoComplexEvents) SetComplexEventCreditEventsXIDRef(v string) {
	m.Set(field.NewComplexEventCreditEventsXIDRef(v))
}

// SetComplexEventCreditEventNotifyingParty sets ComplexEventCreditEventNotifyingParty, Tag 2134.
func (m NoComplexEvents) SetComplexEventCreditEventNotifyingParty(v enum.ComplexEventCreditEventNotifyingParty) {
	m.Set(field.NewComplexEventCreditEventNotifyingParty(v))
}

// SetComplexEventCreditEventBusinessCenter sets ComplexEventCreditEventBusinessCenter, Tag 2135.
func (m NoComplexEvents) SetComplexEventCreditEventBusinessCenter(v string) {
	m.Set(field.NewComplexEventCreditEventBusinessCenter(v))
}

// SetComplexEventCreditEventStandardSources sets ComplexEventCreditEventStandardSources, Tag 2136.
func (m NoComplexEvents) SetComplexEventCreditEventStandardSources(v bool) {
	m.Set(field.NewComplexEventCreditEventStandardSources(v))
}

// SetComplexEventCreditEventMinimumSources sets ComplexEventCreditEventMinimumSources, Tag 2137.
func (m NoComplexEvents) SetComplexEventCreditEventMinimumSources(v int) {
	m.Set(field.NewComplexEventCreditEventMinimumSources(v))
}

// SetNoComplexEventCreditEventSources sets NoComplexEventCreditEventSources, Tag 41029.
func (m NoComplexEvents) SetNoComplexEventCreditEventSources(f NoComplexEventCreditEventSourcesRepeatingGroup) {
	m.SetGroup(f)
}

// SetNoComplexEventCreditEvents sets NoComplexEventCreditEvents, Tag 40997.
func (m NoComplexEvents) SetNoComplexEventCreditEvents(f NoComplexEventCreditEventsRepeatingGroup) {
	m.SetGroup(f)
}

// SetComplexEventXID sets ComplexEventXID, Tag 2138.
func (m NoComplexEvents) SetComplexEventXID(v string) {
	m.Set(field.NewComplexEventXID(v))
}

// SetComplexEventXIDRef sets ComplexEventXIDRef, Tag 2139.
func (m NoComplexEvents) SetComplexEventXIDRef(v string) {
	m.Set(field.NewComplexEventXIDRef(v))
}

// SetComplexEventSpotRate sets ComplexEventSpotRate, Tag 2407.
func (m NoComplexEvents) SetComplexEventSpotRate(value decimal.Decimal, scale int32) {
	m.Set(field.NewComplexEventSpotRate(value, scale))
}

// SetComplexEventForwardPoints sets ComplexEventForwardPoints, Tag 2408.
func (m NoComplexEvents) SetComplexEventForwardPoints(value decimal.Decimal, scale int32) {
	m.Set(field.NewComplexEventForwardPoints(value, scale))
}

// SetComplexEventFuturesPriceValuation sets ComplexEventFuturesPriceValuation, Tag 2597.
func (m NoComplexEvents) SetComplexEventFuturesPriceValuation(v bool) {
	m.Set(field.NewComplexEventFuturesPriceValuation(v))
}

// SetComplexEventOptionsPriceValuation sets ComplexEventOptionsPriceValuation, Tag 2598.
func (m NoComplexEvents) SetComplexEventOptionsPriceValuation(v bool) {
	m.Set(field.NewComplexEventOptionsPriceValuation(v))
}

// SetComplexEventPVFinalPriceElectionFallback sets ComplexEventPVFinalPriceElectionFallback, Tag 2599.
func (m NoComplexEvents) SetComplexEventPVFinalPriceElectionFallback(v enum.ComplexEventPVFinalPriceElectionFallback) {
	m.Set(field.NewComplexEventPVFinalPriceElectionFallback(v))
}

// GetComplexEventType gets ComplexEventType, Tag 1484.
func (m NoComplexEvents) GetComplexEventType() (v enum.ComplexEventType, err quickfix.MessageRejectError) {
	var f field.ComplexEventTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetComplexOptPayoutAmount gets ComplexOptPayoutAmount, Tag 1485.
func (m NoComplexEvents) GetComplexOptPayoutAmount() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.ComplexOptPayoutAmountField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetComplexEventPrice gets ComplexEventPrice, Tag 1486.
func (m NoComplexEvents) GetComplexEventPrice() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.ComplexEventPriceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetComplexEventPriceBoundaryMethod gets ComplexEventPriceBoundaryMethod, Tag 1487.
func (m NoComplexEvents) GetComplexEventPriceBoundaryMethod() (v enum.ComplexEventPriceBoundaryMethod, err quickfix.MessageRejectError) {
	var f field.ComplexEventPriceBoundaryMethodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetComplexEventPriceBoundaryPrecision gets ComplexEventPriceBoundaryPrecision, Tag 1488.
func (m NoComplexEvents) GetComplexEventPriceBoundaryPrecision() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.ComplexEventPriceBoundaryPrecisionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetComplexEventPriceTimeType gets ComplexEventPriceTimeType, Tag 1489.
func (m NoComplexEvents) GetComplexEventPriceTimeType() (v enum.ComplexEventPriceTimeType, err quickfix.MessageRejectError) {
	var f field.ComplexEventPriceTimeTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetComplexEventCondition gets ComplexEventCondition, Tag 1490.
func (m NoComplexEvents) GetComplexEventCondition() (v enum.ComplexEventCondition, err quickfix.MessageRejectError) {
	var f field.ComplexEventConditionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoComplexEventDates gets NoComplexEventDates, Tag 1491.
func (m NoComplexEvents) GetNoComplexEventDates() (NoComplexEventDatesRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoComplexEventDatesRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetComplexOptPayoutPaySide gets ComplexOptPayoutPaySide, Tag 2117.
func (m NoComplexEvents) GetComplexOptPayoutPaySide() (v int, err quickfix.MessageRejectError) {
	var f field.ComplexOptPayoutPaySideField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetComplexOptPayoutReceiveSide gets ComplexOptPayoutReceiveSide, Tag 2118.
func (m NoComplexEvents) GetComplexOptPayoutReceiveSide() (v int, err quickfix.MessageRejectError) {
	var f field.ComplexOptPayoutReceiveSideField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetComplexOptPayoutUnderlier gets ComplexOptPayoutUnderlier, Tag 2119.
func (m NoComplexEvents) GetComplexOptPayoutUnderlier() (v string, err quickfix.MessageRejectError) {
	var f field.ComplexOptPayoutUnderlierField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetComplexOptPayoutPercentage gets ComplexOptPayoutPercentage, Tag 2120.
func (m NoComplexEvents) GetComplexOptPayoutPercentage() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.ComplexOptPayoutPercentageField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetComplexOptPayoutTime gets ComplexOptPayoutTime, Tag 2121.
func (m NoComplexEvents) GetComplexOptPayoutTime() (v enum.ComplexOptPayoutTime, err quickfix.MessageRejectError) {
	var f field.ComplexOptPayoutTimeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetComplexOptPayoutCurrency gets ComplexOptPayoutCurrency, Tag 2122.
func (m NoComplexEvents) GetComplexOptPayoutCurrency() (v string, err quickfix.MessageRejectError) {
	var f field.ComplexOptPayoutCurrencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetComplexEventPricePercentage gets ComplexEventPricePercentage, Tag 2123.
func (m NoComplexEvents) GetComplexEventPricePercentage() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.ComplexEventPricePercentageField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetComplexEventCurrencyOne gets ComplexEventCurrencyOne, Tag 2124.
func (m NoComplexEvents) GetComplexEventCurrencyOne() (v string, err quickfix.MessageRejectError) {
	var f field.ComplexEventCurrencyOneField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetComplexEventCurrencyTwo gets ComplexEventCurrencyTwo, Tag 2125.
func (m NoComplexEvents) GetComplexEventCurrencyTwo() (v string, err quickfix.MessageRejectError) {
	var f field.ComplexEventCurrencyTwoField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetComplexEventQuoteBasis gets ComplexEventQuoteBasis, Tag 2126.
func (m NoComplexEvents) GetComplexEventQuoteBasis() (v enum.ComplexEventQuoteBasis, err quickfix.MessageRejectError) {
	var f field.ComplexEventQuoteBasisField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetComplexEventFixedFXRate gets ComplexEventFixedFXRate, Tag 2127.
func (m NoComplexEvents) GetComplexEventFixedFXRate() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.ComplexEventFixedFXRateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetComplexEventDeterminationMethod gets ComplexEventDeterminationMethod, Tag 2128.
func (m NoComplexEvents) GetComplexEventDeterminationMethod() (v string, err quickfix.MessageRejectError) {
	var f field.ComplexEventDeterminationMethodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetComplexEventCalculationAgent gets ComplexEventCalculationAgent, Tag 2129.
func (m NoComplexEvents) GetComplexEventCalculationAgent() (v int, err quickfix.MessageRejectError) {
	var f field.ComplexEventCalculationAgentField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetComplexEventStrikePrice gets ComplexEventStrikePrice, Tag 2130.
func (m NoComplexEvents) GetComplexEventStrikePrice() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.ComplexEventStrikePriceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetComplexEventStrikeFactor gets ComplexEventStrikeFactor, Tag 2131.
func (m NoComplexEvents) GetComplexEventStrikeFactor() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.ComplexEventStrikeFactorField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetComplexEventStrikeNumberOfOptions gets ComplexEventStrikeNumberOfOptions, Tag 2132.
func (m NoComplexEvents) GetComplexEventStrikeNumberOfOptions() (v int, err quickfix.MessageRejectError) {
	var f field.ComplexEventStrikeNumberOfOptionsField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoComplexEventRateSources gets NoComplexEventRateSources, Tag 41013.
func (m NoComplexEvents) GetNoComplexEventRateSources() (NoComplexEventRateSourcesRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoComplexEventRateSourcesRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetComplexEventDateUnadjusted gets ComplexEventDateUnadjusted, Tag 41020.
func (m NoComplexEvents) GetComplexEventDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.ComplexEventDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetComplexEventDateRelativeTo gets ComplexEventDateRelativeTo, Tag 41021.
func (m NoComplexEvents) GetComplexEventDateRelativeTo() (v int, err quickfix.MessageRejectError) {
	var f field.ComplexEventDateRelativeToField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetComplexEventDateOffsetPeriod gets ComplexEventDateOffsetPeriod, Tag 41022.
func (m NoComplexEvents) GetComplexEventDateOffsetPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.ComplexEventDateOffsetPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetComplexEventDateOffsetUnit gets ComplexEventDateOffsetUnit, Tag 41023.
func (m NoComplexEvents) GetComplexEventDateOffsetUnit() (v string, err quickfix.MessageRejectError) {
	var f field.ComplexEventDateOffsetUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetComplexEventDateOffsetDayType gets ComplexEventDateOffsetDayType, Tag 41024.
func (m NoComplexEvents) GetComplexEventDateOffsetDayType() (v enum.ComplexEventDateOffsetDayType, err quickfix.MessageRejectError) {
	var f field.ComplexEventDateOffsetDayTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetComplexEventDateBusinessDayConvention gets ComplexEventDateBusinessDayConvention, Tag 41025.
func (m NoComplexEvents) GetComplexEventDateBusinessDayConvention() (v int, err quickfix.MessageRejectError) {
	var f field.ComplexEventDateBusinessDayConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoComplexEventDateBusinessCenters gets NoComplexEventDateBusinessCenters, Tag 41018.
func (m NoComplexEvents) GetNoComplexEventDateBusinessCenters() (NoComplexEventDateBusinessCentersRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoComplexEventDateBusinessCentersRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetComplexEventDateAdjusted gets ComplexEventDateAdjusted, Tag 41026.
func (m NoComplexEvents) GetComplexEventDateAdjusted() (v string, err quickfix.MessageRejectError) {
	var f field.ComplexEventDateAdjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetComplexEventFixingTime gets ComplexEventFixingTime, Tag 41027.
func (m NoComplexEvents) GetComplexEventFixingTime() (v string, err quickfix.MessageRejectError) {
	var f field.ComplexEventFixingTimeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetComplexEventFixingTimeBusinessCenter gets ComplexEventFixingTimeBusinessCenter, Tag 41028.
func (m NoComplexEvents) GetComplexEventFixingTimeBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.ComplexEventFixingTimeBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoComplexEventPeriods gets NoComplexEventPeriods, Tag 41010.
func (m NoComplexEvents) GetNoComplexEventPeriods() (NoComplexEventPeriodsRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoComplexEventPeriodsRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetComplexEventCreditEventsXIDRef gets ComplexEventCreditEventsXIDRef, Tag 2133.
func (m NoComplexEvents) GetComplexEventCreditEventsXIDRef() (v string, err quickfix.MessageRejectError) {
	var f field.ComplexEventCreditEventsXIDRefField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetComplexEventCreditEventNotifyingParty gets ComplexEventCreditEventNotifyingParty, Tag 2134.
func (m NoComplexEvents) GetComplexEventCreditEventNotifyingParty() (v enum.ComplexEventCreditEventNotifyingParty, err quickfix.MessageRejectError) {
	var f field.ComplexEventCreditEventNotifyingPartyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetComplexEventCreditEventBusinessCenter gets ComplexEventCreditEventBusinessCenter, Tag 2135.
func (m NoComplexEvents) GetComplexEventCreditEventBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.ComplexEventCreditEventBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetComplexEventCreditEventStandardSources gets ComplexEventCreditEventStandardSources, Tag 2136.
func (m NoComplexEvents) GetComplexEventCreditEventStandardSources() (v bool, err quickfix.MessageRejectError) {
	var f field.ComplexEventCreditEventStandardSourcesField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetComplexEventCreditEventMinimumSources gets ComplexEventCreditEventMinimumSources, Tag 2137.
func (m NoComplexEvents) GetComplexEventCreditEventMinimumSources() (v int, err quickfix.MessageRejectError) {
	var f field.ComplexEventCreditEventMinimumSourcesField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoComplexEventCreditEventSources gets NoComplexEventCreditEventSources, Tag 41029.
func (m NoComplexEvents) GetNoComplexEventCreditEventSources() (NoComplexEventCreditEventSourcesRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoComplexEventCreditEventSourcesRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetNoComplexEventCreditEvents gets NoComplexEventCreditEvents, Tag 40997.
func (m NoComplexEvents) GetNoComplexEventCreditEvents() (NoComplexEventCreditEventsRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoComplexEventCreditEventsRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetComplexEventXID gets ComplexEventXID, Tag 2138.
func (m NoComplexEvents) GetComplexEventXID() (v string, err quickfix.MessageRejectError) {
	var f field.ComplexEventXIDField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetComplexEventXIDRef gets ComplexEventXIDRef, Tag 2139.
func (m NoComplexEvents) GetComplexEventXIDRef() (v string, err quickfix.MessageRejectError) {
	var f field.ComplexEventXIDRefField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetComplexEventSpotRate gets ComplexEventSpotRate, Tag 2407.
func (m NoComplexEvents) GetComplexEventSpotRate() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.ComplexEventSpotRateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetComplexEventForwardPoints gets ComplexEventForwardPoints, Tag 2408.
func (m NoComplexEvents) GetComplexEventForwardPoints() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.ComplexEventForwardPointsField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetComplexEventFuturesPriceValuation gets ComplexEventFuturesPriceValuation, Tag 2597.
func (m NoComplexEvents) GetComplexEventFuturesPriceValuation() (v bool, err quickfix.MessageRejectError) {
	var f field.ComplexEventFuturesPriceValuationField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetComplexEventOptionsPriceValuation gets ComplexEventOptionsPriceValuation, Tag 2598.
func (m NoComplexEvents) GetComplexEventOptionsPriceValuation() (v bool, err quickfix.MessageRejectError) {
	var f field.ComplexEventOptionsPriceValuationField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetComplexEventPVFinalPriceElectionFallback gets ComplexEventPVFinalPriceElectionFallback, Tag 2599.
func (m NoComplexEvents) GetComplexEventPVFinalPriceElectionFallback() (v enum.ComplexEventPVFinalPriceElectionFallback, err quickfix.MessageRejectError) {
	var f field.ComplexEventPVFinalPriceElectionFallbackField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasComplexEventType returns true if ComplexEventType is present, Tag 1484.
func (m NoComplexEvents) HasComplexEventType() bool {
	return m.Has(tag.ComplexEventType)
}

// HasComplexOptPayoutAmount returns true if ComplexOptPayoutAmount is present, Tag 1485.
func (m NoComplexEvents) HasComplexOptPayoutAmount() bool {
	return m.Has(tag.ComplexOptPayoutAmount)
}

// HasComplexEventPrice returns true if ComplexEventPrice is present, Tag 1486.
func (m NoComplexEvents) HasComplexEventPrice() bool {
	return m.Has(tag.ComplexEventPrice)
}

// HasComplexEventPriceBoundaryMethod returns true if ComplexEventPriceBoundaryMethod is present, Tag 1487.
func (m NoComplexEvents) HasComplexEventPriceBoundaryMethod() bool {
	return m.Has(tag.ComplexEventPriceBoundaryMethod)
}

// HasComplexEventPriceBoundaryPrecision returns true if ComplexEventPriceBoundaryPrecision is present, Tag 1488.
func (m NoComplexEvents) HasComplexEventPriceBoundaryPrecision() bool {
	return m.Has(tag.ComplexEventPriceBoundaryPrecision)
}

// HasComplexEventPriceTimeType returns true if ComplexEventPriceTimeType is present, Tag 1489.
func (m NoComplexEvents) HasComplexEventPriceTimeType() bool {
	return m.Has(tag.ComplexEventPriceTimeType)
}

// HasComplexEventCondition returns true if ComplexEventCondition is present, Tag 1490.
func (m NoComplexEvents) HasComplexEventCondition() bool {
	return m.Has(tag.ComplexEventCondition)
}

// HasNoComplexEventDates returns true if NoComplexEventDates is present, Tag 1491.
func (m NoComplexEvents) HasNoComplexEventDates() bool {
	return m.Has(tag.NoComplexEventDates)
}

// HasComplexOptPayoutPaySide returns true if ComplexOptPayoutPaySide is present, Tag 2117.
func (m NoComplexEvents) HasComplexOptPayoutPaySide() bool {
	return m.Has(tag.ComplexOptPayoutPaySide)
}

// HasComplexOptPayoutReceiveSide returns true if ComplexOptPayoutReceiveSide is present, Tag 2118.
func (m NoComplexEvents) HasComplexOptPayoutReceiveSide() bool {
	return m.Has(tag.ComplexOptPayoutReceiveSide)
}

// HasComplexOptPayoutUnderlier returns true if ComplexOptPayoutUnderlier is present, Tag 2119.
func (m NoComplexEvents) HasComplexOptPayoutUnderlier() bool {
	return m.Has(tag.ComplexOptPayoutUnderlier)
}

// HasComplexOptPayoutPercentage returns true if ComplexOptPayoutPercentage is present, Tag 2120.
func (m NoComplexEvents) HasComplexOptPayoutPercentage() bool {
	return m.Has(tag.ComplexOptPayoutPercentage)
}

// HasComplexOptPayoutTime returns true if ComplexOptPayoutTime is present, Tag 2121.
func (m NoComplexEvents) HasComplexOptPayoutTime() bool {
	return m.Has(tag.ComplexOptPayoutTime)
}

// HasComplexOptPayoutCurrency returns true if ComplexOptPayoutCurrency is present, Tag 2122.
func (m NoComplexEvents) HasComplexOptPayoutCurrency() bool {
	return m.Has(tag.ComplexOptPayoutCurrency)
}

// HasComplexEventPricePercentage returns true if ComplexEventPricePercentage is present, Tag 2123.
func (m NoComplexEvents) HasComplexEventPricePercentage() bool {
	return m.Has(tag.ComplexEventPricePercentage)
}

// HasComplexEventCurrencyOne returns true if ComplexEventCurrencyOne is present, Tag 2124.
func (m NoComplexEvents) HasComplexEventCurrencyOne() bool {
	return m.Has(tag.ComplexEventCurrencyOne)
}

// HasComplexEventCurrencyTwo returns true if ComplexEventCurrencyTwo is present, Tag 2125.
func (m NoComplexEvents) HasComplexEventCurrencyTwo() bool {
	return m.Has(tag.ComplexEventCurrencyTwo)
}

// HasComplexEventQuoteBasis returns true if ComplexEventQuoteBasis is present, Tag 2126.
func (m NoComplexEvents) HasComplexEventQuoteBasis() bool {
	return m.Has(tag.ComplexEventQuoteBasis)
}

// HasComplexEventFixedFXRate returns true if ComplexEventFixedFXRate is present, Tag 2127.
func (m NoComplexEvents) HasComplexEventFixedFXRate() bool {
	return m.Has(tag.ComplexEventFixedFXRate)
}

// HasComplexEventDeterminationMethod returns true if ComplexEventDeterminationMethod is present, Tag 2128.
func (m NoComplexEvents) HasComplexEventDeterminationMethod() bool {
	return m.Has(tag.ComplexEventDeterminationMethod)
}

// HasComplexEventCalculationAgent returns true if ComplexEventCalculationAgent is present, Tag 2129.
func (m NoComplexEvents) HasComplexEventCalculationAgent() bool {
	return m.Has(tag.ComplexEventCalculationAgent)
}

// HasComplexEventStrikePrice returns true if ComplexEventStrikePrice is present, Tag 2130.
func (m NoComplexEvents) HasComplexEventStrikePrice() bool {
	return m.Has(tag.ComplexEventStrikePrice)
}

// HasComplexEventStrikeFactor returns true if ComplexEventStrikeFactor is present, Tag 2131.
func (m NoComplexEvents) HasComplexEventStrikeFactor() bool {
	return m.Has(tag.ComplexEventStrikeFactor)
}

// HasComplexEventStrikeNumberOfOptions returns true if ComplexEventStrikeNumberOfOptions is present, Tag 2132.
func (m NoComplexEvents) HasComplexEventStrikeNumberOfOptions() bool {
	return m.Has(tag.ComplexEventStrikeNumberOfOptions)
}

// HasNoComplexEventRateSources returns true if NoComplexEventRateSources is present, Tag 41013.
func (m NoComplexEvents) HasNoComplexEventRateSources() bool {
	return m.Has(tag.NoComplexEventRateSources)
}

// HasComplexEventDateUnadjusted returns true if ComplexEventDateUnadjusted is present, Tag 41020.
func (m NoComplexEvents) HasComplexEventDateUnadjusted() bool {
	return m.Has(tag.ComplexEventDateUnadjusted)
}

// HasComplexEventDateRelativeTo returns true if ComplexEventDateRelativeTo is present, Tag 41021.
func (m NoComplexEvents) HasComplexEventDateRelativeTo() bool {
	return m.Has(tag.ComplexEventDateRelativeTo)
}

// HasComplexEventDateOffsetPeriod returns true if ComplexEventDateOffsetPeriod is present, Tag 41022.
func (m NoComplexEvents) HasComplexEventDateOffsetPeriod() bool {
	return m.Has(tag.ComplexEventDateOffsetPeriod)
}

// HasComplexEventDateOffsetUnit returns true if ComplexEventDateOffsetUnit is present, Tag 41023.
func (m NoComplexEvents) HasComplexEventDateOffsetUnit() bool {
	return m.Has(tag.ComplexEventDateOffsetUnit)
}

// HasComplexEventDateOffsetDayType returns true if ComplexEventDateOffsetDayType is present, Tag 41024.
func (m NoComplexEvents) HasComplexEventDateOffsetDayType() bool {
	return m.Has(tag.ComplexEventDateOffsetDayType)
}

// HasComplexEventDateBusinessDayConvention returns true if ComplexEventDateBusinessDayConvention is present, Tag 41025.
func (m NoComplexEvents) HasComplexEventDateBusinessDayConvention() bool {
	return m.Has(tag.ComplexEventDateBusinessDayConvention)
}

// HasNoComplexEventDateBusinessCenters returns true if NoComplexEventDateBusinessCenters is present, Tag 41018.
func (m NoComplexEvents) HasNoComplexEventDateBusinessCenters() bool {
	return m.Has(tag.NoComplexEventDateBusinessCenters)
}

// HasComplexEventDateAdjusted returns true if ComplexEventDateAdjusted is present, Tag 41026.
func (m NoComplexEvents) HasComplexEventDateAdjusted() bool {
	return m.Has(tag.ComplexEventDateAdjusted)
}

// HasComplexEventFixingTime returns true if ComplexEventFixingTime is present, Tag 41027.
func (m NoComplexEvents) HasComplexEventFixingTime() bool {
	return m.Has(tag.ComplexEventFixingTime)
}

// HasComplexEventFixingTimeBusinessCenter returns true if ComplexEventFixingTimeBusinessCenter is present, Tag 41028.
func (m NoComplexEvents) HasComplexEventFixingTimeBusinessCenter() bool {
	return m.Has(tag.ComplexEventFixingTimeBusinessCenter)
}

// HasNoComplexEventPeriods returns true if NoComplexEventPeriods is present, Tag 41010.
func (m NoComplexEvents) HasNoComplexEventPeriods() bool {
	return m.Has(tag.NoComplexEventPeriods)
}

// HasComplexEventCreditEventsXIDRef returns true if ComplexEventCreditEventsXIDRef is present, Tag 2133.
func (m NoComplexEvents) HasComplexEventCreditEventsXIDRef() bool {
	return m.Has(tag.ComplexEventCreditEventsXIDRef)
}

// HasComplexEventCreditEventNotifyingParty returns true if ComplexEventCreditEventNotifyingParty is present, Tag 2134.
func (m NoComplexEvents) HasComplexEventCreditEventNotifyingParty() bool {
	return m.Has(tag.ComplexEventCreditEventNotifyingParty)
}

// HasComplexEventCreditEventBusinessCenter returns true if ComplexEventCreditEventBusinessCenter is present, Tag 2135.
func (m NoComplexEvents) HasComplexEventCreditEventBusinessCenter() bool {
	return m.Has(tag.ComplexEventCreditEventBusinessCenter)
}

// HasComplexEventCreditEventStandardSources returns true if ComplexEventCreditEventStandardSources is present, Tag 2136.
func (m NoComplexEvents) HasComplexEventCreditEventStandardSources() bool {
	return m.Has(tag.ComplexEventCreditEventStandardSources)
}

// HasComplexEventCreditEventMinimumSources returns true if ComplexEventCreditEventMinimumSources is present, Tag 2137.
func (m NoComplexEvents) HasComplexEventCreditEventMinimumSources() bool {
	return m.Has(tag.ComplexEventCreditEventMinimumSources)
}

// HasNoComplexEventCreditEventSources returns true if NoComplexEventCreditEventSources is present, Tag 41029.
func (m NoComplexEvents) HasNoComplexEventCreditEventSources() bool {
	return m.Has(tag.NoComplexEventCreditEventSources)
}

// HasNoComplexEventCreditEvents returns true if NoComplexEventCreditEvents is present, Tag 40997.
func (m NoComplexEvents) HasNoComplexEventCreditEvents() bool {
	return m.Has(tag.NoComplexEventCreditEvents)
}

// HasComplexEventXID returns true if ComplexEventXID is present, Tag 2138.
func (m NoComplexEvents) HasComplexEventXID() bool {
	return m.Has(tag.ComplexEventXID)
}

// HasComplexEventXIDRef returns true if ComplexEventXIDRef is present, Tag 2139.
func (m NoComplexEvents) HasComplexEventXIDRef() bool {
	return m.Has(tag.ComplexEventXIDRef)
}

// HasComplexEventSpotRate returns true if ComplexEventSpotRate is present, Tag 2407.
func (m NoComplexEvents) HasComplexEventSpotRate() bool {
	return m.Has(tag.ComplexEventSpotRate)
}

// HasComplexEventForwardPoints returns true if ComplexEventForwardPoints is present, Tag 2408.
func (m NoComplexEvents) HasComplexEventForwardPoints() bool {
	return m.Has(tag.ComplexEventForwardPoints)
}

// HasComplexEventFuturesPriceValuation returns true if ComplexEventFuturesPriceValuation is present, Tag 2597.
func (m NoComplexEvents) HasComplexEventFuturesPriceValuation() bool {
	return m.Has(tag.ComplexEventFuturesPriceValuation)
}

// HasComplexEventOptionsPriceValuation returns true if ComplexEventOptionsPriceValuation is present, Tag 2598.
func (m NoComplexEvents) HasComplexEventOptionsPriceValuation() bool {
	return m.Has(tag.ComplexEventOptionsPriceValuation)
}

// HasComplexEventPVFinalPriceElectionFallback returns true if ComplexEventPVFinalPriceElectionFallback is present, Tag 2599.
func (m NoComplexEvents) HasComplexEventPVFinalPriceElectionFallback() bool {
	return m.Has(tag.ComplexEventPVFinalPriceElectionFallback)
}

// NoComplexEventDates is a repeating group element, Tag 1491.
type NoComplexEventDates struct {
	*quickfix.Group
}

// SetComplexEventStartDate sets ComplexEventStartDate, Tag 1492.
func (m NoComplexEventDates) SetComplexEventStartDate(v string) {
	m.Set(field.NewComplexEventStartDate(v))
}

// SetComplexEventEndDate sets ComplexEventEndDate, Tag 1493.
func (m NoComplexEventDates) SetComplexEventEndDate(v string) {
	m.Set(field.NewComplexEventEndDate(v))
}

// SetNoComplexEventTimes sets NoComplexEventTimes, Tag 1494.
func (m NoComplexEventDates) SetNoComplexEventTimes(f NoComplexEventTimesRepeatingGroup) {
	m.SetGroup(f)
}

// GetComplexEventStartDate gets ComplexEventStartDate, Tag 1492.
func (m NoComplexEventDates) GetComplexEventStartDate() (v string, err quickfix.MessageRejectError) {
	var f field.ComplexEventStartDateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetComplexEventEndDate gets ComplexEventEndDate, Tag 1493.
func (m NoComplexEventDates) GetComplexEventEndDate() (v string, err quickfix.MessageRejectError) {
	var f field.ComplexEventEndDateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoComplexEventTimes gets NoComplexEventTimes, Tag 1494.
func (m NoComplexEventDates) GetNoComplexEventTimes() (NoComplexEventTimesRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoComplexEventTimesRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// HasComplexEventStartDate returns true if ComplexEventStartDate is present, Tag 1492.
func (m NoComplexEventDates) HasComplexEventStartDate() bool {
	return m.Has(tag.ComplexEventStartDate)
}

// HasComplexEventEndDate returns true if ComplexEventEndDate is present, Tag 1493.
func (m NoComplexEventDates) HasComplexEventEndDate() bool {
	return m.Has(tag.ComplexEventEndDate)
}

// HasNoComplexEventTimes returns true if NoComplexEventTimes is present, Tag 1494.
func (m NoComplexEventDates) HasNoComplexEventTimes() bool {
	return m.Has(tag.NoComplexEventTimes)
}

// NoComplexEventTimes is a repeating group element, Tag 1494.
type NoComplexEventTimes struct {
	*quickfix.Group
}

// SetComplexEventStartTime sets ComplexEventStartTime, Tag 1495.
func (m NoComplexEventTimes) SetComplexEventStartTime(v string) {
	m.Set(field.NewComplexEventStartTime(v))
}

// SetComplexEventEndTime sets ComplexEventEndTime, Tag 1496.
func (m NoComplexEventTimes) SetComplexEventEndTime(v string) {
	m.Set(field.NewComplexEventEndTime(v))
}

// GetComplexEventStartTime gets ComplexEventStartTime, Tag 1495.
func (m NoComplexEventTimes) GetComplexEventStartTime() (v string, err quickfix.MessageRejectError) {
	var f field.ComplexEventStartTimeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetComplexEventEndTime gets ComplexEventEndTime, Tag 1496.
func (m NoComplexEventTimes) GetComplexEventEndTime() (v string, err quickfix.MessageRejectError) {
	var f field.ComplexEventEndTimeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasComplexEventStartTime returns true if ComplexEventStartTime is present, Tag 1495.
func (m NoComplexEventTimes) HasComplexEventStartTime() bool {
	return m.Has(tag.ComplexEventStartTime)
}

// HasComplexEventEndTime returns true if ComplexEventEndTime is present, Tag 1496.
func (m NoComplexEventTimes) HasComplexEventEndTime() bool {
	return m.Has(tag.ComplexEventEndTime)
}

// NoComplexEventTimesRepeatingGroup is a repeating group, Tag 1494.
type NoComplexEventTimesRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoComplexEventTimesRepeatingGroup returns an initialized, NoComplexEventTimesRepeatingGroup.
func NewNoComplexEventTimesRepeatingGroup() NoComplexEventTimesRepeatingGroup {
	return NoComplexEventTimesRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoComplexEventTimes,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.ComplexEventStartTime),
				quickfix.GroupElement(tag.ComplexEventEndTime),
			},
		),
	}
}

// Add create and append a new NoComplexEventTimes to this group.
func (m NoComplexEventTimesRepeatingGroup) Add() NoComplexEventTimes {
	g := m.RepeatingGroup.Add()
	return NoComplexEventTimes{g}
}

// Get returns the ith NoComplexEventTimes in the NoComplexEventTimesRepeatinGroup.
func (m NoComplexEventTimesRepeatingGroup) Get(i int) NoComplexEventTimes {
	return NoComplexEventTimes{m.RepeatingGroup.Get(i)}
}

// NoComplexEventDatesRepeatingGroup is a repeating group, Tag 1491.
type NoComplexEventDatesRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoComplexEventDatesRepeatingGroup returns an initialized, NoComplexEventDatesRepeatingGroup.
func NewNoComplexEventDatesRepeatingGroup() NoComplexEventDatesRepeatingGroup {
	return NoComplexEventDatesRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoComplexEventDates,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.ComplexEventStartDate),
				quickfix.GroupElement(tag.ComplexEventEndDate),
				NewNoComplexEventTimesRepeatingGroup(),
			},
		),
	}
}

// Add create and append a new NoComplexEventDates to this group.
func (m NoComplexEventDatesRepeatingGroup) Add() NoComplexEventDates {
	g := m.RepeatingGroup.Add()
	return NoComplexEventDates{g}
}

// Get returns the ith NoComplexEventDates in the NoComplexEventDatesRepeatinGroup.
func (m NoComplexEventDatesRepeatingGroup) Get(i int) NoComplexEventDates {
	return NoComplexEventDates{m.RepeatingGroup.Get(i)}
}

// NoComplexEventRateSources is a repeating group element, Tag 41013.
type NoComplexEventRateSources struct {
	*quickfix.Group
}

// SetComplexEventRateSource sets ComplexEventRateSource, Tag 41014.
func (m NoComplexEventRateSources) SetComplexEventRateSource(v int) {
	m.Set(field.NewComplexEventRateSource(v))
}

// SetComplexEventRateSourceType sets ComplexEventRateSourceType, Tag 41015.
func (m NoComplexEventRateSources) SetComplexEventRateSourceType(v int) {
	m.Set(field.NewComplexEventRateSourceType(v))
}

// SetComplexEventReferencePage sets ComplexEventReferencePage, Tag 41016.
func (m NoComplexEventRateSources) SetComplexEventReferencePage(v string) {
	m.Set(field.NewComplexEventReferencePage(v))
}

// SetComplexEventReferencePageHeading sets ComplexEventReferencePageHeading, Tag 41017.
func (m NoComplexEventRateSources) SetComplexEventReferencePageHeading(v string) {
	m.Set(field.NewComplexEventReferencePageHeading(v))
}

// GetComplexEventRateSource gets ComplexEventRateSource, Tag 41014.
func (m NoComplexEventRateSources) GetComplexEventRateSource() (v int, err quickfix.MessageRejectError) {
	var f field.ComplexEventRateSourceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetComplexEventRateSourceType gets ComplexEventRateSourceType, Tag 41015.
func (m NoComplexEventRateSources) GetComplexEventRateSourceType() (v int, err quickfix.MessageRejectError) {
	var f field.ComplexEventRateSourceTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetComplexEventReferencePage gets ComplexEventReferencePage, Tag 41016.
func (m NoComplexEventRateSources) GetComplexEventReferencePage() (v string, err quickfix.MessageRejectError) {
	var f field.ComplexEventReferencePageField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetComplexEventReferencePageHeading gets ComplexEventReferencePageHeading, Tag 41017.
func (m NoComplexEventRateSources) GetComplexEventReferencePageHeading() (v string, err quickfix.MessageRejectError) {
	var f field.ComplexEventReferencePageHeadingField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasComplexEventRateSource returns true if ComplexEventRateSource is present, Tag 41014.
func (m NoComplexEventRateSources) HasComplexEventRateSource() bool {
	return m.Has(tag.ComplexEventRateSource)
}

// HasComplexEventRateSourceType returns true if ComplexEventRateSourceType is present, Tag 41015.
func (m NoComplexEventRateSources) HasComplexEventRateSourceType() bool {
	return m.Has(tag.ComplexEventRateSourceType)
}

// HasComplexEventReferencePage returns true if ComplexEventReferencePage is present, Tag 41016.
func (m NoComplexEventRateSources) HasComplexEventReferencePage() bool {
	return m.Has(tag.ComplexEventReferencePage)
}

// HasComplexEventReferencePageHeading returns true if ComplexEventReferencePageHeading is present, Tag 41017.
func (m NoComplexEventRateSources) HasComplexEventReferencePageHeading() bool {
	return m.Has(tag.ComplexEventReferencePageHeading)
}

// NoComplexEventRateSourcesRepeatingGroup is a repeating group, Tag 41013.
type NoComplexEventRateSourcesRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoComplexEventRateSourcesRepeatingGroup returns an initialized, NoComplexEventRateSourcesRepeatingGroup.
func NewNoComplexEventRateSourcesRepeatingGroup() NoComplexEventRateSourcesRepeatingGroup {
	return NoComplexEventRateSourcesRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoComplexEventRateSources,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.ComplexEventRateSource),
				quickfix.GroupElement(tag.ComplexEventRateSourceType),
				quickfix.GroupElement(tag.ComplexEventReferencePage),
				quickfix.GroupElement(tag.ComplexEventReferencePageHeading),
			},
		),
	}
}

// Add create and append a new NoComplexEventRateSources to this group.
func (m NoComplexEventRateSourcesRepeatingGroup) Add() NoComplexEventRateSources {
	g := m.RepeatingGroup.Add()
	return NoComplexEventRateSources{g}
}

// Get returns the ith NoComplexEventRateSources in the NoComplexEventRateSourcesRepeatinGroup.
func (m NoComplexEventRateSourcesRepeatingGroup) Get(i int) NoComplexEventRateSources {
	return NoComplexEventRateSources{m.RepeatingGroup.Get(i)}
}

// NoComplexEventDateBusinessCenters is a repeating group element, Tag 41018.
type NoComplexEventDateBusinessCenters struct {
	*quickfix.Group
}

// SetComplexEventDateBusinessCenter sets ComplexEventDateBusinessCenter, Tag 41019.
func (m NoComplexEventDateBusinessCenters) SetComplexEventDateBusinessCenter(v string) {
	m.Set(field.NewComplexEventDateBusinessCenter(v))
}

// GetComplexEventDateBusinessCenter gets ComplexEventDateBusinessCenter, Tag 41019.
func (m NoComplexEventDateBusinessCenters) GetComplexEventDateBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.ComplexEventDateBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasComplexEventDateBusinessCenter returns true if ComplexEventDateBusinessCenter is present, Tag 41019.
func (m NoComplexEventDateBusinessCenters) HasComplexEventDateBusinessCenter() bool {
	return m.Has(tag.ComplexEventDateBusinessCenter)
}

// NoComplexEventDateBusinessCentersRepeatingGroup is a repeating group, Tag 41018.
type NoComplexEventDateBusinessCentersRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoComplexEventDateBusinessCentersRepeatingGroup returns an initialized, NoComplexEventDateBusinessCentersRepeatingGroup.
func NewNoComplexEventDateBusinessCentersRepeatingGroup() NoComplexEventDateBusinessCentersRepeatingGroup {
	return NoComplexEventDateBusinessCentersRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoComplexEventDateBusinessCenters,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.ComplexEventDateBusinessCenter),
			},
		),
	}
}

// Add create and append a new NoComplexEventDateBusinessCenters to this group.
func (m NoComplexEventDateBusinessCentersRepeatingGroup) Add() NoComplexEventDateBusinessCenters {
	g := m.RepeatingGroup.Add()
	return NoComplexEventDateBusinessCenters{g}
}

// Get returns the ith NoComplexEventDateBusinessCenters in the NoComplexEventDateBusinessCentersRepeatinGroup.
func (m NoComplexEventDateBusinessCentersRepeatingGroup) Get(i int) NoComplexEventDateBusinessCenters {
	return NoComplexEventDateBusinessCenters{m.RepeatingGroup.Get(i)}
}

// NoComplexEventPeriods is a repeating group element, Tag 41010.
type NoComplexEventPeriods struct {
	*quickfix.Group
}

// SetComplexEventPeriodType sets ComplexEventPeriodType, Tag 41011.
func (m NoComplexEventPeriods) SetComplexEventPeriodType(v enum.ComplexEventPeriodType) {
	m.Set(field.NewComplexEventPeriodType(v))
}

// SetComplexEventBusinessCenter sets ComplexEventBusinessCenter, Tag 41012.
func (m NoComplexEventPeriods) SetComplexEventBusinessCenter(v string) {
	m.Set(field.NewComplexEventBusinessCenter(v))
}

// SetNoComplexEventSchedules sets NoComplexEventSchedules, Tag 41031.
func (m NoComplexEventPeriods) SetNoComplexEventSchedules(f NoComplexEventSchedulesRepeatingGroup) {
	m.SetGroup(f)
}

// SetNoComplexEventPeriodDateTimes sets NoComplexEventPeriodDateTimes, Tag 41007.
func (m NoComplexEventPeriods) SetNoComplexEventPeriodDateTimes(f NoComplexEventPeriodDateTimesRepeatingGroup) {
	m.SetGroup(f)
}

// SetNoComplexEventAveragingObservations sets NoComplexEventAveragingObservations, Tag 40994.
func (m NoComplexEventPeriods) SetNoComplexEventAveragingObservations(f NoComplexEventAveragingObservationsRepeatingGroup) {
	m.SetGroup(f)
}

// GetComplexEventPeriodType gets ComplexEventPeriodType, Tag 41011.
func (m NoComplexEventPeriods) GetComplexEventPeriodType() (v enum.ComplexEventPeriodType, err quickfix.MessageRejectError) {
	var f field.ComplexEventPeriodTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetComplexEventBusinessCenter gets ComplexEventBusinessCenter, Tag 41012.
func (m NoComplexEventPeriods) GetComplexEventBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.ComplexEventBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoComplexEventSchedules gets NoComplexEventSchedules, Tag 41031.
func (m NoComplexEventPeriods) GetNoComplexEventSchedules() (NoComplexEventSchedulesRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoComplexEventSchedulesRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetNoComplexEventPeriodDateTimes gets NoComplexEventPeriodDateTimes, Tag 41007.
func (m NoComplexEventPeriods) GetNoComplexEventPeriodDateTimes() (NoComplexEventPeriodDateTimesRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoComplexEventPeriodDateTimesRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetNoComplexEventAveragingObservations gets NoComplexEventAveragingObservations, Tag 40994.
func (m NoComplexEventPeriods) GetNoComplexEventAveragingObservations() (NoComplexEventAveragingObservationsRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoComplexEventAveragingObservationsRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// HasComplexEventPeriodType returns true if ComplexEventPeriodType is present, Tag 41011.
func (m NoComplexEventPeriods) HasComplexEventPeriodType() bool {
	return m.Has(tag.ComplexEventPeriodType)
}

// HasComplexEventBusinessCenter returns true if ComplexEventBusinessCenter is present, Tag 41012.
func (m NoComplexEventPeriods) HasComplexEventBusinessCenter() bool {
	return m.Has(tag.ComplexEventBusinessCenter)
}

// HasNoComplexEventSchedules returns true if NoComplexEventSchedules is present, Tag 41031.
func (m NoComplexEventPeriods) HasNoComplexEventSchedules() bool {
	return m.Has(tag.NoComplexEventSchedules)
}

// HasNoComplexEventPeriodDateTimes returns true if NoComplexEventPeriodDateTimes is present, Tag 41007.
func (m NoComplexEventPeriods) HasNoComplexEventPeriodDateTimes() bool {
	return m.Has(tag.NoComplexEventPeriodDateTimes)
}

// HasNoComplexEventAveragingObservations returns true if NoComplexEventAveragingObservations is present, Tag 40994.
func (m NoComplexEventPeriods) HasNoComplexEventAveragingObservations() bool {
	return m.Has(tag.NoComplexEventAveragingObservations)
}

// NoComplexEventSchedules is a repeating group element, Tag 41031.
type NoComplexEventSchedules struct {
	*quickfix.Group
}

// SetComplexEventScheduleStartDate sets ComplexEventScheduleStartDate, Tag 41032.
func (m NoComplexEventSchedules) SetComplexEventScheduleStartDate(v string) {
	m.Set(field.NewComplexEventScheduleStartDate(v))
}

// SetComplexEventScheduleEndDate sets ComplexEventScheduleEndDate, Tag 41033.
func (m NoComplexEventSchedules) SetComplexEventScheduleEndDate(v string) {
	m.Set(field.NewComplexEventScheduleEndDate(v))
}

// SetComplexEventScheduleFrequencyPeriod sets ComplexEventScheduleFrequencyPeriod, Tag 41034.
func (m NoComplexEventSchedules) SetComplexEventScheduleFrequencyPeriod(v int) {
	m.Set(field.NewComplexEventScheduleFrequencyPeriod(v))
}

// SetComplexEventScheduleFrequencyUnit sets ComplexEventScheduleFrequencyUnit, Tag 41035.
func (m NoComplexEventSchedules) SetComplexEventScheduleFrequencyUnit(v string) {
	m.Set(field.NewComplexEventScheduleFrequencyUnit(v))
}

// SetComplexEventScheduleRollConvention sets ComplexEventScheduleRollConvention, Tag 41036.
func (m NoComplexEventSchedules) SetComplexEventScheduleRollConvention(v string) {
	m.Set(field.NewComplexEventScheduleRollConvention(v))
}

// GetComplexEventScheduleStartDate gets ComplexEventScheduleStartDate, Tag 41032.
func (m NoComplexEventSchedules) GetComplexEventScheduleStartDate() (v string, err quickfix.MessageRejectError) {
	var f field.ComplexEventScheduleStartDateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetComplexEventScheduleEndDate gets ComplexEventScheduleEndDate, Tag 41033.
func (m NoComplexEventSchedules) GetComplexEventScheduleEndDate() (v string, err quickfix.MessageRejectError) {
	var f field.ComplexEventScheduleEndDateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetComplexEventScheduleFrequencyPeriod gets ComplexEventScheduleFrequencyPeriod, Tag 41034.
func (m NoComplexEventSchedules) GetComplexEventScheduleFrequencyPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.ComplexEventScheduleFrequencyPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetComplexEventScheduleFrequencyUnit gets ComplexEventScheduleFrequencyUnit, Tag 41035.
func (m NoComplexEventSchedules) GetComplexEventScheduleFrequencyUnit() (v string, err quickfix.MessageRejectError) {
	var f field.ComplexEventScheduleFrequencyUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetComplexEventScheduleRollConvention gets ComplexEventScheduleRollConvention, Tag 41036.
func (m NoComplexEventSchedules) GetComplexEventScheduleRollConvention() (v string, err quickfix.MessageRejectError) {
	var f field.ComplexEventScheduleRollConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasComplexEventScheduleStartDate returns true if ComplexEventScheduleStartDate is present, Tag 41032.
func (m NoComplexEventSchedules) HasComplexEventScheduleStartDate() bool {
	return m.Has(tag.ComplexEventScheduleStartDate)
}

// HasComplexEventScheduleEndDate returns true if ComplexEventScheduleEndDate is present, Tag 41033.
func (m NoComplexEventSchedules) HasComplexEventScheduleEndDate() bool {
	return m.Has(tag.ComplexEventScheduleEndDate)
}

// HasComplexEventScheduleFrequencyPeriod returns true if ComplexEventScheduleFrequencyPeriod is present, Tag 41034.
func (m NoComplexEventSchedules) HasComplexEventScheduleFrequencyPeriod() bool {
	return m.Has(tag.ComplexEventScheduleFrequencyPeriod)
}

// HasComplexEventScheduleFrequencyUnit returns true if ComplexEventScheduleFrequencyUnit is present, Tag 41035.
func (m NoComplexEventSchedules) HasComplexEventScheduleFrequencyUnit() bool {
	return m.Has(tag.ComplexEventScheduleFrequencyUnit)
}

// HasComplexEventScheduleRollConvention returns true if ComplexEventScheduleRollConvention is present, Tag 41036.
func (m NoComplexEventSchedules) HasComplexEventScheduleRollConvention() bool {
	return m.Has(tag.ComplexEventScheduleRollConvention)
}

// NoComplexEventSchedulesRepeatingGroup is a repeating group, Tag 41031.
type NoComplexEventSchedulesRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoComplexEventSchedulesRepeatingGroup returns an initialized, NoComplexEventSchedulesRepeatingGroup.
func NewNoComplexEventSchedulesRepeatingGroup() NoComplexEventSchedulesRepeatingGroup {
	return NoComplexEventSchedulesRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoComplexEventSchedules,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.ComplexEventScheduleStartDate),
				quickfix.GroupElement(tag.ComplexEventScheduleEndDate),
				quickfix.GroupElement(tag.ComplexEventScheduleFrequencyPeriod),
				quickfix.GroupElement(tag.ComplexEventScheduleFrequencyUnit),
				quickfix.GroupElement(tag.ComplexEventScheduleRollConvention),
			},
		),
	}
}

// Add create and append a new NoComplexEventSchedules to this group.
func (m NoComplexEventSchedulesRepeatingGroup) Add() NoComplexEventSchedules {
	g := m.RepeatingGroup.Add()
	return NoComplexEventSchedules{g}
}

// Get returns the ith NoComplexEventSchedules in the NoComplexEventSchedulesRepeatinGroup.
func (m NoComplexEventSchedulesRepeatingGroup) Get(i int) NoComplexEventSchedules {
	return NoComplexEventSchedules{m.RepeatingGroup.Get(i)}
}

// NoComplexEventPeriodDateTimes is a repeating group element, Tag 41007.
type NoComplexEventPeriodDateTimes struct {
	*quickfix.Group
}

// SetComplexEventPeriodDate sets ComplexEventPeriodDate, Tag 41008.
func (m NoComplexEventPeriodDateTimes) SetComplexEventPeriodDate(v string) {
	m.Set(field.NewComplexEventPeriodDate(v))
}

// SetComplexEventPeriodTime sets ComplexEventPeriodTime, Tag 41009.
func (m NoComplexEventPeriodDateTimes) SetComplexEventPeriodTime(v string) {
	m.Set(field.NewComplexEventPeriodTime(v))
}

// GetComplexEventPeriodDate gets ComplexEventPeriodDate, Tag 41008.
func (m NoComplexEventPeriodDateTimes) GetComplexEventPeriodDate() (v string, err quickfix.MessageRejectError) {
	var f field.ComplexEventPeriodDateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetComplexEventPeriodTime gets ComplexEventPeriodTime, Tag 41009.
func (m NoComplexEventPeriodDateTimes) GetComplexEventPeriodTime() (v string, err quickfix.MessageRejectError) {
	var f field.ComplexEventPeriodTimeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasComplexEventPeriodDate returns true if ComplexEventPeriodDate is present, Tag 41008.
func (m NoComplexEventPeriodDateTimes) HasComplexEventPeriodDate() bool {
	return m.Has(tag.ComplexEventPeriodDate)
}

// HasComplexEventPeriodTime returns true if ComplexEventPeriodTime is present, Tag 41009.
func (m NoComplexEventPeriodDateTimes) HasComplexEventPeriodTime() bool {
	return m.Has(tag.ComplexEventPeriodTime)
}

// NoComplexEventPeriodDateTimesRepeatingGroup is a repeating group, Tag 41007.
type NoComplexEventPeriodDateTimesRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoComplexEventPeriodDateTimesRepeatingGroup returns an initialized, NoComplexEventPeriodDateTimesRepeatingGroup.
func NewNoComplexEventPeriodDateTimesRepeatingGroup() NoComplexEventPeriodDateTimesRepeatingGroup {
	return NoComplexEventPeriodDateTimesRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoComplexEventPeriodDateTimes,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.ComplexEventPeriodDate),
				quickfix.GroupElement(tag.ComplexEventPeriodTime),
			},
		),
	}
}

// Add create and append a new NoComplexEventPeriodDateTimes to this group.
func (m NoComplexEventPeriodDateTimesRepeatingGroup) Add() NoComplexEventPeriodDateTimes {
	g := m.RepeatingGroup.Add()
	return NoComplexEventPeriodDateTimes{g}
}

// Get returns the ith NoComplexEventPeriodDateTimes in the NoComplexEventPeriodDateTimesRepeatinGroup.
func (m NoComplexEventPeriodDateTimesRepeatingGroup) Get(i int) NoComplexEventPeriodDateTimes {
	return NoComplexEventPeriodDateTimes{m.RepeatingGroup.Get(i)}
}

// NoComplexEventAveragingObservations is a repeating group element, Tag 40994.
type NoComplexEventAveragingObservations struct {
	*quickfix.Group
}

// SetComplexEventAveragingObservationNumber sets ComplexEventAveragingObservationNumber, Tag 40995.
func (m NoComplexEventAveragingObservations) SetComplexEventAveragingObservationNumber(v int) {
	m.Set(field.NewComplexEventAveragingObservationNumber(v))
}

// SetComplexEventAveragingWeight sets ComplexEventAveragingWeight, Tag 40996.
func (m NoComplexEventAveragingObservations) SetComplexEventAveragingWeight(value decimal.Decimal, scale int32) {
	m.Set(field.NewComplexEventAveragingWeight(value, scale))
}

// GetComplexEventAveragingObservationNumber gets ComplexEventAveragingObservationNumber, Tag 40995.
func (m NoComplexEventAveragingObservations) GetComplexEventAveragingObservationNumber() (v int, err quickfix.MessageRejectError) {
	var f field.ComplexEventAveragingObservationNumberField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetComplexEventAveragingWeight gets ComplexEventAveragingWeight, Tag 40996.
func (m NoComplexEventAveragingObservations) GetComplexEventAveragingWeight() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.ComplexEventAveragingWeightField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasComplexEventAveragingObservationNumber returns true if ComplexEventAveragingObservationNumber is present, Tag 40995.
func (m NoComplexEventAveragingObservations) HasComplexEventAveragingObservationNumber() bool {
	return m.Has(tag.ComplexEventAveragingObservationNumber)
}

// HasComplexEventAveragingWeight returns true if ComplexEventAveragingWeight is present, Tag 40996.
func (m NoComplexEventAveragingObservations) HasComplexEventAveragingWeight() bool {
	return m.Has(tag.ComplexEventAveragingWeight)
}

// NoComplexEventAveragingObservationsRepeatingGroup is a repeating group, Tag 40994.
type NoComplexEventAveragingObservationsRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoComplexEventAveragingObservationsRepeatingGroup returns an initialized, NoComplexEventAveragingObservationsRepeatingGroup.
func NewNoComplexEventAveragingObservationsRepeatingGroup() NoComplexEventAveragingObservationsRepeatingGroup {
	return NoComplexEventAveragingObservationsRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoComplexEventAveragingObservations,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.ComplexEventAveragingObservationNumber),
				quickfix.GroupElement(tag.ComplexEventAveragingWeight),
			},
		),
	}
}

// Add create and append a new NoComplexEventAveragingObservations to this group.
func (m NoComplexEventAveragingObservationsRepeatingGroup) Add() NoComplexEventAveragingObservations {
	g := m.RepeatingGroup.Add()
	return NoComplexEventAveragingObservations{g}
}

// Get returns the ith NoComplexEventAveragingObservations in the NoComplexEventAveragingObservationsRepeatinGroup.
func (m NoComplexEventAveragingObservationsRepeatingGroup) Get(i int) NoComplexEventAveragingObservations {
	return NoComplexEventAveragingObservations{m.RepeatingGroup.Get(i)}
}

// NoComplexEventPeriodsRepeatingGroup is a repeating group, Tag 41010.
type NoComplexEventPeriodsRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoComplexEventPeriodsRepeatingGroup returns an initialized, NoComplexEventPeriodsRepeatingGroup.
func NewNoComplexEventPeriodsRepeatingGroup() NoComplexEventPeriodsRepeatingGroup {
	return NoComplexEventPeriodsRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoComplexEventPeriods,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.ComplexEventPeriodType),
				quickfix.GroupElement(tag.ComplexEventBusinessCenter),
				NewNoComplexEventSchedulesRepeatingGroup(),
				NewNoComplexEventPeriodDateTimesRepeatingGroup(),
				NewNoComplexEventAveragingObservationsRepeatingGroup(),
			},
		),
	}
}

// Add create and append a new NoComplexEventPeriods to this group.
func (m NoComplexEventPeriodsRepeatingGroup) Add() NoComplexEventPeriods {
	g := m.RepeatingGroup.Add()
	return NoComplexEventPeriods{g}
}

// Get returns the ith NoComplexEventPeriods in the NoComplexEventPeriodsRepeatinGroup.
func (m NoComplexEventPeriodsRepeatingGroup) Get(i int) NoComplexEventPeriods {
	return NoComplexEventPeriods{m.RepeatingGroup.Get(i)}
}

// NoComplexEventCreditEventSources is a repeating group element, Tag 41029.
type NoComplexEventCreditEventSources struct {
	*quickfix.Group
}

// SetComplexEventCreditEventSource sets ComplexEventCreditEventSource, Tag 41030.
func (m NoComplexEventCreditEventSources) SetComplexEventCreditEventSource(v string) {
	m.Set(field.NewComplexEventCreditEventSource(v))
}

// GetComplexEventCreditEventSource gets ComplexEventCreditEventSource, Tag 41030.
func (m NoComplexEventCreditEventSources) GetComplexEventCreditEventSource() (v string, err quickfix.MessageRejectError) {
	var f field.ComplexEventCreditEventSourceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasComplexEventCreditEventSource returns true if ComplexEventCreditEventSource is present, Tag 41030.
func (m NoComplexEventCreditEventSources) HasComplexEventCreditEventSource() bool {
	return m.Has(tag.ComplexEventCreditEventSource)
}

// NoComplexEventCreditEventSourcesRepeatingGroup is a repeating group, Tag 41029.
type NoComplexEventCreditEventSourcesRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoComplexEventCreditEventSourcesRepeatingGroup returns an initialized, NoComplexEventCreditEventSourcesRepeatingGroup.
func NewNoComplexEventCreditEventSourcesRepeatingGroup() NoComplexEventCreditEventSourcesRepeatingGroup {
	return NoComplexEventCreditEventSourcesRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoComplexEventCreditEventSources,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.ComplexEventCreditEventSource),
			},
		),
	}
}

// Add create and append a new NoComplexEventCreditEventSources to this group.
func (m NoComplexEventCreditEventSourcesRepeatingGroup) Add() NoComplexEventCreditEventSources {
	g := m.RepeatingGroup.Add()
	return NoComplexEventCreditEventSources{g}
}

// Get returns the ith NoComplexEventCreditEventSources in the NoComplexEventCreditEventSourcesRepeatinGroup.
func (m NoComplexEventCreditEventSourcesRepeatingGroup) Get(i int) NoComplexEventCreditEventSources {
	return NoComplexEventCreditEventSources{m.RepeatingGroup.Get(i)}
}

// NoComplexEventCreditEvents is a repeating group element, Tag 40997.
type NoComplexEventCreditEvents struct {
	*quickfix.Group
}

// SetComplexEventCreditEventType sets ComplexEventCreditEventType, Tag 40998.
func (m NoComplexEventCreditEvents) SetComplexEventCreditEventType(v string) {
	m.Set(field.NewComplexEventCreditEventType(v))
}

// SetComplexEventCreditEventValue sets ComplexEventCreditEventValue, Tag 40999.
func (m NoComplexEventCreditEvents) SetComplexEventCreditEventValue(v string) {
	m.Set(field.NewComplexEventCreditEventValue(v))
}

// SetComplexEventCreditEventCurrency sets ComplexEventCreditEventCurrency, Tag 41000.
func (m NoComplexEventCreditEvents) SetComplexEventCreditEventCurrency(v string) {
	m.Set(field.NewComplexEventCreditEventCurrency(v))
}

// SetComplexEventCreditEventPeriod sets ComplexEventCreditEventPeriod, Tag 41001.
func (m NoComplexEventCreditEvents) SetComplexEventCreditEventPeriod(v int) {
	m.Set(field.NewComplexEventCreditEventPeriod(v))
}

// SetComplexEventCreditEventUnit sets ComplexEventCreditEventUnit, Tag 41002.
func (m NoComplexEventCreditEvents) SetComplexEventCreditEventUnit(v string) {
	m.Set(field.NewComplexEventCreditEventUnit(v))
}

// SetComplexEventCreditEventDayType sets ComplexEventCreditEventDayType, Tag 41003.
func (m NoComplexEventCreditEvents) SetComplexEventCreditEventDayType(v int) {
	m.Set(field.NewComplexEventCreditEventDayType(v))
}

// SetComplexEventCreditEventRateSource sets ComplexEventCreditEventRateSource, Tag 41004.
func (m NoComplexEventCreditEvents) SetComplexEventCreditEventRateSource(v int) {
	m.Set(field.NewComplexEventCreditEventRateSource(v))
}

// SetNoComplexEventCreditEventQualifiers sets NoComplexEventCreditEventQualifiers, Tag 41005.
func (m NoComplexEventCreditEvents) SetNoComplexEventCreditEventQualifiers(f NoComplexEventCreditEventQualifiersRepeatingGroup) {
	m.SetGroup(f)
}

// GetComplexEventCreditEventType gets ComplexEventCreditEventType, Tag 40998.
func (m NoComplexEventCreditEvents) GetComplexEventCreditEventType() (v string, err quickfix.MessageRejectError) {
	var f field.ComplexEventCreditEventTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetComplexEventCreditEventValue gets ComplexEventCreditEventValue, Tag 40999.
func (m NoComplexEventCreditEvents) GetComplexEventCreditEventValue() (v string, err quickfix.MessageRejectError) {
	var f field.ComplexEventCreditEventValueField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetComplexEventCreditEventCurrency gets ComplexEventCreditEventCurrency, Tag 41000.
func (m NoComplexEventCreditEvents) GetComplexEventCreditEventCurrency() (v string, err quickfix.MessageRejectError) {
	var f field.ComplexEventCreditEventCurrencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetComplexEventCreditEventPeriod gets ComplexEventCreditEventPeriod, Tag 41001.
func (m NoComplexEventCreditEvents) GetComplexEventCreditEventPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.ComplexEventCreditEventPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetComplexEventCreditEventUnit gets ComplexEventCreditEventUnit, Tag 41002.
func (m NoComplexEventCreditEvents) GetComplexEventCreditEventUnit() (v string, err quickfix.MessageRejectError) {
	var f field.ComplexEventCreditEventUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetComplexEventCreditEventDayType gets ComplexEventCreditEventDayType, Tag 41003.
func (m NoComplexEventCreditEvents) GetComplexEventCreditEventDayType() (v int, err quickfix.MessageRejectError) {
	var f field.ComplexEventCreditEventDayTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetComplexEventCreditEventRateSource gets ComplexEventCreditEventRateSource, Tag 41004.
func (m NoComplexEventCreditEvents) GetComplexEventCreditEventRateSource() (v int, err quickfix.MessageRejectError) {
	var f field.ComplexEventCreditEventRateSourceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoComplexEventCreditEventQualifiers gets NoComplexEventCreditEventQualifiers, Tag 41005.
func (m NoComplexEventCreditEvents) GetNoComplexEventCreditEventQualifiers() (NoComplexEventCreditEventQualifiersRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoComplexEventCreditEventQualifiersRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// HasComplexEventCreditEventType returns true if ComplexEventCreditEventType is present, Tag 40998.
func (m NoComplexEventCreditEvents) HasComplexEventCreditEventType() bool {
	return m.Has(tag.ComplexEventCreditEventType)
}

// HasComplexEventCreditEventValue returns true if ComplexEventCreditEventValue is present, Tag 40999.
func (m NoComplexEventCreditEvents) HasComplexEventCreditEventValue() bool {
	return m.Has(tag.ComplexEventCreditEventValue)
}

// HasComplexEventCreditEventCurrency returns true if ComplexEventCreditEventCurrency is present, Tag 41000.
func (m NoComplexEventCreditEvents) HasComplexEventCreditEventCurrency() bool {
	return m.Has(tag.ComplexEventCreditEventCurrency)
}

// HasComplexEventCreditEventPeriod returns true if ComplexEventCreditEventPeriod is present, Tag 41001.
func (m NoComplexEventCreditEvents) HasComplexEventCreditEventPeriod() bool {
	return m.Has(tag.ComplexEventCreditEventPeriod)
}

// HasComplexEventCreditEventUnit returns true if ComplexEventCreditEventUnit is present, Tag 41002.
func (m NoComplexEventCreditEvents) HasComplexEventCreditEventUnit() bool {
	return m.Has(tag.ComplexEventCreditEventUnit)
}

// HasComplexEventCreditEventDayType returns true if ComplexEventCreditEventDayType is present, Tag 41003.
func (m NoComplexEventCreditEvents) HasComplexEventCreditEventDayType() bool {
	return m.Has(tag.ComplexEventCreditEventDayType)
}

// HasComplexEventCreditEventRateSource returns true if ComplexEventCreditEventRateSource is present, Tag 41004.
func (m NoComplexEventCreditEvents) HasComplexEventCreditEventRateSource() bool {
	return m.Has(tag.ComplexEventCreditEventRateSource)
}

// HasNoComplexEventCreditEventQualifiers returns true if NoComplexEventCreditEventQualifiers is present, Tag 41005.
func (m NoComplexEventCreditEvents) HasNoComplexEventCreditEventQualifiers() bool {
	return m.Has(tag.NoComplexEventCreditEventQualifiers)
}

// NoComplexEventCreditEventQualifiers is a repeating group element, Tag 41005.
type NoComplexEventCreditEventQualifiers struct {
	*quickfix.Group
}

// SetComplexEventCreditEventQualifier sets ComplexEventCreditEventQualifier, Tag 41006.
func (m NoComplexEventCreditEventQualifiers) SetComplexEventCreditEventQualifier(v string) {
	m.Set(field.NewComplexEventCreditEventQualifier(v))
}

// GetComplexEventCreditEventQualifier gets ComplexEventCreditEventQualifier, Tag 41006.
func (m NoComplexEventCreditEventQualifiers) GetComplexEventCreditEventQualifier() (v string, err quickfix.MessageRejectError) {
	var f field.ComplexEventCreditEventQualifierField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasComplexEventCreditEventQualifier returns true if ComplexEventCreditEventQualifier is present, Tag 41006.
func (m NoComplexEventCreditEventQualifiers) HasComplexEventCreditEventQualifier() bool {
	return m.Has(tag.ComplexEventCreditEventQualifier)
}

// NoComplexEventCreditEventQualifiersRepeatingGroup is a repeating group, Tag 41005.
type NoComplexEventCreditEventQualifiersRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoComplexEventCreditEventQualifiersRepeatingGroup returns an initialized, NoComplexEventCreditEventQualifiersRepeatingGroup.
func NewNoComplexEventCreditEventQualifiersRepeatingGroup() NoComplexEventCreditEventQualifiersRepeatingGroup {
	return NoComplexEventCreditEventQualifiersRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoComplexEventCreditEventQualifiers,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.ComplexEventCreditEventQualifier),
			},
		),
	}
}

// Add create and append a new NoComplexEventCreditEventQualifiers to this group.
func (m NoComplexEventCreditEventQualifiersRepeatingGroup) Add() NoComplexEventCreditEventQualifiers {
	g := m.RepeatingGroup.Add()
	return NoComplexEventCreditEventQualifiers{g}
}

// Get returns the ith NoComplexEventCreditEventQualifiers in the NoComplexEventCreditEventQualifiersRepeatinGroup.
func (m NoComplexEventCreditEventQualifiersRepeatingGroup) Get(i int) NoComplexEventCreditEventQualifiers {
	return NoComplexEventCreditEventQualifiers{m.RepeatingGroup.Get(i)}
}

// NoComplexEventCreditEventsRepeatingGroup is a repeating group, Tag 40997.
type NoComplexEventCreditEventsRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoComplexEventCreditEventsRepeatingGroup returns an initialized, NoComplexEventCreditEventsRepeatingGroup.
func NewNoComplexEventCreditEventsRepeatingGroup() NoComplexEventCreditEventsRepeatingGroup {
	return NoComplexEventCreditEventsRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoComplexEventCreditEvents,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.ComplexEventCreditEventType),
				quickfix.GroupElement(tag.ComplexEventCreditEventValue),
				quickfix.GroupElement(tag.ComplexEventCreditEventCurrency),
				quickfix.GroupElement(tag.ComplexEventCreditEventPeriod),
				quickfix.GroupElement(tag.ComplexEventCreditEventUnit),
				quickfix.GroupElement(tag.ComplexEventCreditEventDayType),
				quickfix.GroupElement(tag.ComplexEventCreditEventRateSource),
				NewNoComplexEventCreditEventQualifiersRepeatingGroup(),
			},
		),
	}
}

// Add create and append a new NoComplexEventCreditEvents to this group.
func (m NoComplexEventCreditEventsRepeatingGroup) Add() NoComplexEventCreditEvents {
	g := m.RepeatingGroup.Add()
	return NoComplexEventCreditEvents{g}
}

// Get returns the ith NoComplexEventCreditEvents in the NoComplexEventCreditEventsRepeatinGroup.
func (m NoComplexEventCreditEventsRepeatingGroup) Get(i int) NoComplexEventCreditEvents {
	return NoComplexEventCreditEvents{m.RepeatingGroup.Get(i)}
}

// NoComplexEventsRepeatingGroup is a repeating group, Tag 1483.
type NoComplexEventsRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoComplexEventsRepeatingGroup returns an initialized, NoComplexEventsRepeatingGroup.
func NewNoComplexEventsRepeatingGroup() NoComplexEventsRepeatingGroup {
	return NoComplexEventsRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoComplexEvents,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.ComplexEventType),
				quickfix.GroupElement(tag.ComplexOptPayoutAmount),
				quickfix.GroupElement(tag.ComplexEventPrice),
				quickfix.GroupElement(tag.ComplexEventPriceBoundaryMethod),
				quickfix.GroupElement(tag.ComplexEventPriceBoundaryPrecision),
				quickfix.GroupElement(tag.ComplexEventPriceTimeType),
				quickfix.GroupElement(tag.ComplexEventCondition),
				NewNoComplexEventDatesRepeatingGroup(),
				quickfix.GroupElement(tag.ComplexOptPayoutPaySide),
				quickfix.GroupElement(tag.ComplexOptPayoutReceiveSide),
				quickfix.GroupElement(tag.ComplexOptPayoutUnderlier),
				quickfix.GroupElement(tag.ComplexOptPayoutPercentage),
				quickfix.GroupElement(tag.ComplexOptPayoutTime),
				quickfix.GroupElement(tag.ComplexOptPayoutCurrency),
				quickfix.GroupElement(tag.ComplexEventPricePercentage),
				quickfix.GroupElement(tag.ComplexEventCurrencyOne),
				quickfix.GroupElement(tag.ComplexEventCurrencyTwo),
				quickfix.GroupElement(tag.ComplexEventQuoteBasis),
				quickfix.GroupElement(tag.ComplexEventFixedFXRate),
				quickfix.GroupElement(tag.ComplexEventDeterminationMethod),
				quickfix.GroupElement(tag.ComplexEventCalculationAgent),
				quickfix.GroupElement(tag.ComplexEventStrikePrice),
				quickfix.GroupElement(tag.ComplexEventStrikeFactor),
				quickfix.GroupElement(tag.ComplexEventStrikeNumberOfOptions),
				NewNoComplexEventRateSourcesRepeatingGroup(),
				quickfix.GroupElement(tag.ComplexEventDateUnadjusted),
				quickfix.GroupElement(tag.ComplexEventDateRelativeTo),
				quickfix.GroupElement(tag.ComplexEventDateOffsetPeriod),
				quickfix.GroupElement(tag.ComplexEventDateOffsetUnit),
				quickfix.GroupElement(tag.ComplexEventDateOffsetDayType),
				quickfix.GroupElement(tag.ComplexEventDateBusinessDayConvention),
				NewNoComplexEventDateBusinessCentersRepeatingGroup(),
				quickfix.GroupElement(tag.ComplexEventDateAdjusted),
				quickfix.GroupElement(tag.ComplexEventFixingTime),
				quickfix.GroupElement(tag.ComplexEventFixingTimeBusinessCenter),
				NewNoComplexEventPeriodsRepeatingGroup(),
				quickfix.GroupElement(tag.ComplexEventCreditEventsXIDRef),
				quickfix.GroupElement(tag.ComplexEventCreditEventNotifyingParty),
				quickfix.GroupElement(tag.ComplexEventCreditEventBusinessCenter),
				quickfix.GroupElement(tag.ComplexEventCreditEventStandardSources),
				quickfix.GroupElement(tag.ComplexEventCreditEventMinimumSources),
				NewNoComplexEventCreditEventSourcesRepeatingGroup(),
				NewNoComplexEventCreditEventsRepeatingGroup(),
				quickfix.GroupElement(tag.ComplexEventXID),
				quickfix.GroupElement(tag.ComplexEventXIDRef),
				quickfix.GroupElement(tag.ComplexEventSpotRate),
				quickfix.GroupElement(tag.ComplexEventForwardPoints),
				quickfix.GroupElement(tag.ComplexEventFuturesPriceValuation),
				quickfix.GroupElement(tag.ComplexEventOptionsPriceValuation),
				quickfix.GroupElement(tag.ComplexEventPVFinalPriceElectionFallback),
			},
		),
	}
}

// Add create and append a new NoComplexEvents to this group.
func (m NoComplexEventsRepeatingGroup) Add() NoComplexEvents {
	g := m.RepeatingGroup.Add()
	return NoComplexEvents{g}
}

// Get returns the ith NoComplexEvents in the NoComplexEventsRepeatinGroup.
func (m NoComplexEventsRepeatingGroup) Get(i int) NoComplexEvents {
	return NoComplexEvents{m.RepeatingGroup.Get(i)}
}

// NoSecondaryAssetClasses is a repeating group element, Tag 1976.
type NoSecondaryAssetClasses struct {
	*quickfix.Group
}

// SetSecondaryAssetClass sets SecondaryAssetClass, Tag 1977.
func (m NoSecondaryAssetClasses) SetSecondaryAssetClass(v int) {
	m.Set(field.NewSecondaryAssetClass(v))
}

// SetSecondaryAssetSubClass sets SecondaryAssetSubClass, Tag 1978.
func (m NoSecondaryAssetClasses) SetSecondaryAssetSubClass(v int) {
	m.Set(field.NewSecondaryAssetSubClass(v))
}

// SetSecondaryAssetType sets SecondaryAssetType, Tag 1979.
func (m NoSecondaryAssetClasses) SetSecondaryAssetType(v string) {
	m.Set(field.NewSecondaryAssetType(v))
}

// SetSecondaryAssetSubType sets SecondaryAssetSubType, Tag 2741.
func (m NoSecondaryAssetClasses) SetSecondaryAssetSubType(v string) {
	m.Set(field.NewSecondaryAssetSubType(v))
}

// GetSecondaryAssetClass gets SecondaryAssetClass, Tag 1977.
func (m NoSecondaryAssetClasses) GetSecondaryAssetClass() (v int, err quickfix.MessageRejectError) {
	var f field.SecondaryAssetClassField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetSecondaryAssetSubClass gets SecondaryAssetSubClass, Tag 1978.
func (m NoSecondaryAssetClasses) GetSecondaryAssetSubClass() (v int, err quickfix.MessageRejectError) {
	var f field.SecondaryAssetSubClassField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetSecondaryAssetType gets SecondaryAssetType, Tag 1979.
func (m NoSecondaryAssetClasses) GetSecondaryAssetType() (v string, err quickfix.MessageRejectError) {
	var f field.SecondaryAssetTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetSecondaryAssetSubType gets SecondaryAssetSubType, Tag 2741.
func (m NoSecondaryAssetClasses) GetSecondaryAssetSubType() (v string, err quickfix.MessageRejectError) {
	var f field.SecondaryAssetSubTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasSecondaryAssetClass returns true if SecondaryAssetClass is present, Tag 1977.
func (m NoSecondaryAssetClasses) HasSecondaryAssetClass() bool {
	return m.Has(tag.SecondaryAssetClass)
}

// HasSecondaryAssetSubClass returns true if SecondaryAssetSubClass is present, Tag 1978.
func (m NoSecondaryAssetClasses) HasSecondaryAssetSubClass() bool {
	return m.Has(tag.SecondaryAssetSubClass)
}

// HasSecondaryAssetType returns true if SecondaryAssetType is present, Tag 1979.
func (m NoSecondaryAssetClasses) HasSecondaryAssetType() bool {
	return m.Has(tag.SecondaryAssetType)
}

// HasSecondaryAssetSubType returns true if SecondaryAssetSubType is present, Tag 2741.
func (m NoSecondaryAssetClasses) HasSecondaryAssetSubType() bool {
	return m.Has(tag.SecondaryAssetSubType)
}

// NoSecondaryAssetClassesRepeatingGroup is a repeating group, Tag 1976.
type NoSecondaryAssetClassesRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoSecondaryAssetClassesRepeatingGroup returns an initialized, NoSecondaryAssetClassesRepeatingGroup.
func NewNoSecondaryAssetClassesRepeatingGroup() NoSecondaryAssetClassesRepeatingGroup {
	return NoSecondaryAssetClassesRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoSecondaryAssetClasses,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.SecondaryAssetClass),
				quickfix.GroupElement(tag.SecondaryAssetSubClass),
				quickfix.GroupElement(tag.SecondaryAssetType),
				quickfix.GroupElement(tag.SecondaryAssetSubType),
			},
		),
	}
}

// Add create and append a new NoSecondaryAssetClasses to this group.
func (m NoSecondaryAssetClassesRepeatingGroup) Add() NoSecondaryAssetClasses {
	g := m.RepeatingGroup.Add()
	return NoSecondaryAssetClasses{g}
}

// Get returns the ith NoSecondaryAssetClasses in the NoSecondaryAssetClassesRepeatinGroup.
func (m NoSecondaryAssetClassesRepeatingGroup) Get(i int) NoSecondaryAssetClasses {
	return NoSecondaryAssetClasses{m.RepeatingGroup.Get(i)}
}

// NoBusinessCenters is a repeating group element, Tag 40278.
type NoBusinessCenters struct {
	*quickfix.Group
}

// SetBusinessCenter sets BusinessCenter, Tag 40471.
func (m NoBusinessCenters) SetBusinessCenter(v string) {
	m.Set(field.NewBusinessCenter(v))
}

// GetBusinessCenter gets BusinessCenter, Tag 40471.
func (m NoBusinessCenters) GetBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.BusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasBusinessCenter returns true if BusinessCenter is present, Tag 40471.
func (m NoBusinessCenters) HasBusinessCenter() bool {
	return m.Has(tag.BusinessCenter)
}

// NoBusinessCentersRepeatingGroup is a repeating group, Tag 40278.
type NoBusinessCentersRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoBusinessCentersRepeatingGroup returns an initialized, NoBusinessCentersRepeatingGroup.
func NewNoBusinessCentersRepeatingGroup() NoBusinessCentersRepeatingGroup {
	return NoBusinessCentersRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoBusinessCenters,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.BusinessCenter),
			},
		),
	}
}

// Add create and append a new NoBusinessCenters to this group.
func (m NoBusinessCentersRepeatingGroup) Add() NoBusinessCenters {
	g := m.RepeatingGroup.Add()
	return NoBusinessCenters{g}
}

// Get returns the ith NoBusinessCenters in the NoBusinessCentersRepeatinGroup.
func (m NoBusinessCentersRepeatingGroup) Get(i int) NoBusinessCenters {
	return NoBusinessCenters{m.RepeatingGroup.Get(i)}
}

// NoStreams is a repeating group element, Tag 40049.
type NoStreams struct {
	*quickfix.Group
}

// SetStreamType sets StreamType, Tag 40050.
func (m NoStreams) SetStreamType(v enum.StreamType) {
	m.Set(field.NewStreamType(v))
}

// SetStreamDesc sets StreamDesc, Tag 40051.
func (m NoStreams) SetStreamDesc(v string) {
	m.Set(field.NewStreamDesc(v))
}

// SetStreamPaySide sets StreamPaySide, Tag 40052.
func (m NoStreams) SetStreamPaySide(v int) {
	m.Set(field.NewStreamPaySide(v))
}

// SetStreamReceiveSide sets StreamReceiveSide, Tag 40053.
func (m NoStreams) SetStreamReceiveSide(v int) {
	m.Set(field.NewStreamReceiveSide(v))
}

// SetStreamNotional sets StreamNotional, Tag 40054.
func (m NoStreams) SetStreamNotional(value decimal.Decimal, scale int32) {
	m.Set(field.NewStreamNotional(value, scale))
}

// SetStreamCurrency sets StreamCurrency, Tag 40055.
func (m NoStreams) SetStreamCurrency(v string) {
	m.Set(field.NewStreamCurrency(v))
}

// SetStreamEffectiveDateUnadjusted sets StreamEffectiveDateUnadjusted, Tag 40907.
func (m NoStreams) SetStreamEffectiveDateUnadjusted(v string) {
	m.Set(field.NewStreamEffectiveDateUnadjusted(v))
}

// SetStreamEffectiveDateBusinessDayConvention sets StreamEffectiveDateBusinessDayConvention, Tag 40908.
func (m NoStreams) SetStreamEffectiveDateBusinessDayConvention(v int) {
	m.Set(field.NewStreamEffectiveDateBusinessDayConvention(v))
}

// SetNoStreamEffectiveBusinessCenters sets NoStreamEffectiveBusinessCenters, Tag 40960.
func (m NoStreams) SetNoStreamEffectiveBusinessCenters(f NoStreamEffectiveBusinessCentersRepeatingGroup) {
	m.SetGroup(f)
}

// SetStreamEffectiveDateRelativeTo sets StreamEffectiveDateRelativeTo, Tag 40910.
func (m NoStreams) SetStreamEffectiveDateRelativeTo(v int) {
	m.Set(field.NewStreamEffectiveDateRelativeTo(v))
}

// SetStreamEffectiveDateOffsetPeriod sets StreamEffectiveDateOffsetPeriod, Tag 40911.
func (m NoStreams) SetStreamEffectiveDateOffsetPeriod(v int) {
	m.Set(field.NewStreamEffectiveDateOffsetPeriod(v))
}

// SetStreamEffectiveDateOffsetUnit sets StreamEffectiveDateOffsetUnit, Tag 40912.
func (m NoStreams) SetStreamEffectiveDateOffsetUnit(v string) {
	m.Set(field.NewStreamEffectiveDateOffsetUnit(v))
}

// SetStreamEffectiveDateOffsetDayType sets StreamEffectiveDateOffsetDayType, Tag 40913.
func (m NoStreams) SetStreamEffectiveDateOffsetDayType(v int) {
	m.Set(field.NewStreamEffectiveDateOffsetDayType(v))
}

// SetStreamEffectiveDateAdjusted sets StreamEffectiveDateAdjusted, Tag 40914.
func (m NoStreams) SetStreamEffectiveDateAdjusted(v string) {
	m.Set(field.NewStreamEffectiveDateAdjusted(v))
}

// SetStreamTerminationDateUnadjusted sets StreamTerminationDateUnadjusted, Tag 40065.
func (m NoStreams) SetStreamTerminationDateUnadjusted(v string) {
	m.Set(field.NewStreamTerminationDateUnadjusted(v))
}

// SetStreamTerminationDateBusinessDayConvention sets StreamTerminationDateBusinessDayConvention, Tag 40066.
func (m NoStreams) SetStreamTerminationDateBusinessDayConvention(v int) {
	m.Set(field.NewStreamTerminationDateBusinessDayConvention(v))
}

// SetNoStreamTerminationDateBusinessCenters sets NoStreamTerminationDateBusinessCenters, Tag 40961.
func (m NoStreams) SetNoStreamTerminationDateBusinessCenters(f NoStreamTerminationDateBusinessCentersRepeatingGroup) {
	m.SetGroup(f)
}

// SetStreamTerminationDateRelativeTo sets StreamTerminationDateRelativeTo, Tag 40068.
func (m NoStreams) SetStreamTerminationDateRelativeTo(v int) {
	m.Set(field.NewStreamTerminationDateRelativeTo(v))
}

// SetStreamTerminationDateOffsetPeriod sets StreamTerminationDateOffsetPeriod, Tag 40069.
func (m NoStreams) SetStreamTerminationDateOffsetPeriod(v int) {
	m.Set(field.NewStreamTerminationDateOffsetPeriod(v))
}

// SetStreamTerminationDateOffsetUnit sets StreamTerminationDateOffsetUnit, Tag 40070.
func (m NoStreams) SetStreamTerminationDateOffsetUnit(v string) {
	m.Set(field.NewStreamTerminationDateOffsetUnit(v))
}

// SetStreamTerminationDateOffsetDayType sets StreamTerminationDateOffsetDayType, Tag 40071.
func (m NoStreams) SetStreamTerminationDateOffsetDayType(v int) {
	m.Set(field.NewStreamTerminationDateOffsetDayType(v))
}

// SetStreamTerminationDateAdjusted sets StreamTerminationDateAdjusted, Tag 40072.
func (m NoStreams) SetStreamTerminationDateAdjusted(v string) {
	m.Set(field.NewStreamTerminationDateAdjusted(v))
}

// SetStreamCalculationPeriodBusinessDayConvention sets StreamCalculationPeriodBusinessDayConvention, Tag 40073.
func (m NoStreams) SetStreamCalculationPeriodBusinessDayConvention(v int) {
	m.Set(field.NewStreamCalculationPeriodBusinessDayConvention(v))
}

// SetNoStreamCalculationPeriodBusinessCenters sets NoStreamCalculationPeriodBusinessCenters, Tag 40958.
func (m NoStreams) SetNoStreamCalculationPeriodBusinessCenters(f NoStreamCalculationPeriodBusinessCentersRepeatingGroup) {
	m.SetGroup(f)
}

// SetStreamFirstPeriodStartDateUnadjusted sets StreamFirstPeriodStartDateUnadjusted, Tag 40075.
func (m NoStreams) SetStreamFirstPeriodStartDateUnadjusted(v string) {
	m.Set(field.NewStreamFirstPeriodStartDateUnadjusted(v))
}

// SetStreamFirstPeriodStartDateBusinessDayConvention sets StreamFirstPeriodStartDateBusinessDayConvention, Tag 40076.
func (m NoStreams) SetStreamFirstPeriodStartDateBusinessDayConvention(v int) {
	m.Set(field.NewStreamFirstPeriodStartDateBusinessDayConvention(v))
}

// SetNoStreamFirstPeriodStartDateBusinessCenters sets NoStreamFirstPeriodStartDateBusinessCenters, Tag 40959.
func (m NoStreams) SetNoStreamFirstPeriodStartDateBusinessCenters(f NoStreamFirstPeriodStartDateBusinessCentersRepeatingGroup) {
	m.SetGroup(f)
}

// SetStreamFirstPeriodStartDateAdjusted sets StreamFirstPeriodStartDateAdjusted, Tag 40078.
func (m NoStreams) SetStreamFirstPeriodStartDateAdjusted(v string) {
	m.Set(field.NewStreamFirstPeriodStartDateAdjusted(v))
}

// SetStreamFirstRegularPeriodStartDateUnadjusted sets StreamFirstRegularPeriodStartDateUnadjusted, Tag 40079.
func (m NoStreams) SetStreamFirstRegularPeriodStartDateUnadjusted(v string) {
	m.Set(field.NewStreamFirstRegularPeriodStartDateUnadjusted(v))
}

// SetStreamFirstCompoundingPeriodEndDateUnadjusted sets StreamFirstCompoundingPeriodEndDateUnadjusted, Tag 40080.
func (m NoStreams) SetStreamFirstCompoundingPeriodEndDateUnadjusted(v string) {
	m.Set(field.NewStreamFirstCompoundingPeriodEndDateUnadjusted(v))
}

// SetStreamLastRegularPeriodEndDateUnadjusted sets StreamLastRegularPeriodEndDateUnadjusted, Tag 40081.
func (m NoStreams) SetStreamLastRegularPeriodEndDateUnadjusted(v string) {
	m.Set(field.NewStreamLastRegularPeriodEndDateUnadjusted(v))
}

// SetStreamCalculationFrequencyPeriod sets StreamCalculationFrequencyPeriod, Tag 40082.
func (m NoStreams) SetStreamCalculationFrequencyPeriod(v int) {
	m.Set(field.NewStreamCalculationFrequencyPeriod(v))
}

// SetStreamCalculationFrequencyUnit sets StreamCalculationFrequencyUnit, Tag 40083.
func (m NoStreams) SetStreamCalculationFrequencyUnit(v string) {
	m.Set(field.NewStreamCalculationFrequencyUnit(v))
}

// SetStreamCalculationRollConvention sets StreamCalculationRollConvention, Tag 40084.
func (m NoStreams) SetStreamCalculationRollConvention(v string) {
	m.Set(field.NewStreamCalculationRollConvention(v))
}

// SetStreamCalculationPeriodDatesXID sets StreamCalculationPeriodDatesXID, Tag 41244.
func (m NoStreams) SetStreamCalculationPeriodDatesXID(v string) {
	m.Set(field.NewStreamCalculationPeriodDatesXID(v))
}

// SetStreamCalculationPeriodDatesXIDRef sets StreamCalculationPeriodDatesXIDRef, Tag 41245.
func (m NoStreams) SetStreamCalculationPeriodDatesXIDRef(v string) {
	m.Set(field.NewStreamCalculationPeriodDatesXIDRef(v))
}

// SetNoStreamCalculationPeriodDates sets NoStreamCalculationPeriodDates, Tag 41241.
func (m NoStreams) SetNoStreamCalculationPeriodDates(f NoStreamCalculationPeriodDatesRepeatingGroup) {
	m.SetGroup(f)
}

// SetStreamCalculationBalanceOfFirstPeriod sets StreamCalculationBalanceOfFirstPeriod, Tag 41246.
func (m NoStreams) SetStreamCalculationBalanceOfFirstPeriod(v bool) {
	m.Set(field.NewStreamCalculationBalanceOfFirstPeriod(v))
}

// SetStreamCalculationCorrectionPeriod sets StreamCalculationCorrectionPeriod, Tag 41247.
func (m NoStreams) SetStreamCalculationCorrectionPeriod(v int) {
	m.Set(field.NewStreamCalculationCorrectionPeriod(v))
}

// SetStreamCalculationCorrectionUnit sets StreamCalculationCorrectionUnit, Tag 41248.
func (m NoStreams) SetStreamCalculationCorrectionUnit(v string) {
	m.Set(field.NewStreamCalculationCorrectionUnit(v))
}

// SetPaymentStreamType sets PaymentStreamType, Tag 40738.
func (m NoStreams) SetPaymentStreamType(v enum.PaymentStreamType) {
	m.Set(field.NewPaymentStreamType(v))
}

// SetPaymentStreamMarketRate sets PaymentStreamMarketRate, Tag 40739.
func (m NoStreams) SetPaymentStreamMarketRate(v int) {
	m.Set(field.NewPaymentStreamMarketRate(v))
}

// SetPaymentStreamDelayIndicator sets PaymentStreamDelayIndicator, Tag 40740.
func (m NoStreams) SetPaymentStreamDelayIndicator(v bool) {
	m.Set(field.NewPaymentStreamDelayIndicator(v))
}

// SetPaymentStreamSettlCurrency sets PaymentStreamSettlCurrency, Tag 40741.
func (m NoStreams) SetPaymentStreamSettlCurrency(v string) {
	m.Set(field.NewPaymentStreamSettlCurrency(v))
}

// SetPaymentStreamDayCount sets PaymentStreamDayCount, Tag 40742.
func (m NoStreams) SetPaymentStreamDayCount(v int) {
	m.Set(field.NewPaymentStreamDayCount(v))
}

// SetPaymentStreamAccrualDays sets PaymentStreamAccrualDays, Tag 40743.
func (m NoStreams) SetPaymentStreamAccrualDays(v int) {
	m.Set(field.NewPaymentStreamAccrualDays(v))
}

// SetPaymentStreamDiscountType sets PaymentStreamDiscountType, Tag 40744.
func (m NoStreams) SetPaymentStreamDiscountType(v enum.PaymentStreamDiscountType) {
	m.Set(field.NewPaymentStreamDiscountType(v))
}

// SetPaymentStreamDiscountRate sets PaymentStreamDiscountRate, Tag 40745.
func (m NoStreams) SetPaymentStreamDiscountRate(value decimal.Decimal, scale int32) {
	m.Set(field.NewPaymentStreamDiscountRate(value, scale))
}

// SetPaymentStreamDiscountRateDayCount sets PaymentStreamDiscountRateDayCount, Tag 40746.
func (m NoStreams) SetPaymentStreamDiscountRateDayCount(v int) {
	m.Set(field.NewPaymentStreamDiscountRateDayCount(v))
}

// SetPaymentStreamCompoundingMethod sets PaymentStreamCompoundingMethod, Tag 40747.
func (m NoStreams) SetPaymentStreamCompoundingMethod(v enum.PaymentStreamCompoundingMethod) {
	m.Set(field.NewPaymentStreamCompoundingMethod(v))
}

// SetPaymentStreamInitialPrincipalExchangeIndicator sets PaymentStreamInitialPrincipalExchangeIndicator, Tag 40748.
func (m NoStreams) SetPaymentStreamInitialPrincipalExchangeIndicator(v bool) {
	m.Set(field.NewPaymentStreamInitialPrincipalExchangeIndicator(v))
}

// SetPaymentStreamInterimPrincipalExchangeIndicator sets PaymentStreamInterimPrincipalExchangeIndicator, Tag 40749.
func (m NoStreams) SetPaymentStreamInterimPrincipalExchangeIndicator(v bool) {
	m.Set(field.NewPaymentStreamInterimPrincipalExchangeIndicator(v))
}

// SetPaymentStreamFinalPrincipalExchangeIndicator sets PaymentStreamFinalPrincipalExchangeIndicator, Tag 40750.
func (m NoStreams) SetPaymentStreamFinalPrincipalExchangeIndicator(v bool) {
	m.Set(field.NewPaymentStreamFinalPrincipalExchangeIndicator(v))
}

// SetPaymentStreamPaymentDateBusinessDayConvention sets PaymentStreamPaymentDateBusinessDayConvention, Tag 40751.
func (m NoStreams) SetPaymentStreamPaymentDateBusinessDayConvention(v int) {
	m.Set(field.NewPaymentStreamPaymentDateBusinessDayConvention(v))
}

// SetNoPaymentStreamPaymentDateBusinessCenters sets NoPaymentStreamPaymentDateBusinessCenters, Tag 40947.
func (m NoStreams) SetNoPaymentStreamPaymentDateBusinessCenters(f NoPaymentStreamPaymentDateBusinessCentersRepeatingGroup) {
	m.SetGroup(f)
}

// SetPaymentStreamPaymentFrequencyPeriod sets PaymentStreamPaymentFrequencyPeriod, Tag 40753.
func (m NoStreams) SetPaymentStreamPaymentFrequencyPeriod(v int) {
	m.Set(field.NewPaymentStreamPaymentFrequencyPeriod(v))
}

// SetPaymentStreamPaymentFrequencyUnit sets PaymentStreamPaymentFrequencyUnit, Tag 40754.
func (m NoStreams) SetPaymentStreamPaymentFrequencyUnit(v enum.PaymentStreamPaymentFrequencyUnit) {
	m.Set(field.NewPaymentStreamPaymentFrequencyUnit(v))
}

// SetPaymentStreamPaymentRollConvention sets PaymentStreamPaymentRollConvention, Tag 40755.
func (m NoStreams) SetPaymentStreamPaymentRollConvention(v string) {
	m.Set(field.NewPaymentStreamPaymentRollConvention(v))
}

// SetPaymentStreamFirstPaymentDateUnadjusted sets PaymentStreamFirstPaymentDateUnadjusted, Tag 40756.
func (m NoStreams) SetPaymentStreamFirstPaymentDateUnadjusted(v string) {
	m.Set(field.NewPaymentStreamFirstPaymentDateUnadjusted(v))
}

// SetPaymentStreamLastRegularPaymentDateUnadjusted sets PaymentStreamLastRegularPaymentDateUnadjusted, Tag 40757.
func (m NoStreams) SetPaymentStreamLastRegularPaymentDateUnadjusted(v string) {
	m.Set(field.NewPaymentStreamLastRegularPaymentDateUnadjusted(v))
}

// SetPaymentStreamPaymentDateRelativeTo sets PaymentStreamPaymentDateRelativeTo, Tag 40758.
func (m NoStreams) SetPaymentStreamPaymentDateRelativeTo(v int) {
	m.Set(field.NewPaymentStreamPaymentDateRelativeTo(v))
}

// SetPaymentStreamPaymentDateOffsetPeriod sets PaymentStreamPaymentDateOffsetPeriod, Tag 40759.
func (m NoStreams) SetPaymentStreamPaymentDateOffsetPeriod(v int) {
	m.Set(field.NewPaymentStreamPaymentDateOffsetPeriod(v))
}

// SetPaymentStreamPaymentDateOffsetUnit sets PaymentStreamPaymentDateOffsetUnit, Tag 40760.
func (m NoStreams) SetPaymentStreamPaymentDateOffsetUnit(v enum.PaymentStreamPaymentDateOffsetUnit) {
	m.Set(field.NewPaymentStreamPaymentDateOffsetUnit(v))
}

// SetPaymentStreamPaymentDateOffsetDayType sets PaymentStreamPaymentDateOffsetDayType, Tag 40920.
func (m NoStreams) SetPaymentStreamPaymentDateOffsetDayType(v enum.PaymentStreamPaymentDateOffsetDayType) {
	m.Set(field.NewPaymentStreamPaymentDateOffsetDayType(v))
}

// SetNoPaymentStreamPaymentDates sets NoPaymentStreamPaymentDates, Tag 41220.
func (m NoStreams) SetNoPaymentStreamPaymentDates(f NoPaymentStreamPaymentDatesRepeatingGroup) {
	m.SetGroup(f)
}

// SetPaymentStreamMasterAgreementPaymentDatesIndicator sets PaymentStreamMasterAgreementPaymentDatesIndicator, Tag 41223.
func (m NoStreams) SetPaymentStreamMasterAgreementPaymentDatesIndicator(v bool) {
	m.Set(field.NewPaymentStreamMasterAgreementPaymentDatesIndicator(v))
}

// SetPaymentStreamFinalPricePaymentDateUnadjusted sets PaymentStreamFinalPricePaymentDateUnadjusted, Tag 42654.
func (m NoStreams) SetPaymentStreamFinalPricePaymentDateUnadjusted(v string) {
	m.Set(field.NewPaymentStreamFinalPricePaymentDateUnadjusted(v))
}

// SetPaymentStreamFinalPricePaymentDateRelativeTo sets PaymentStreamFinalPricePaymentDateRelativeTo, Tag 42655.
func (m NoStreams) SetPaymentStreamFinalPricePaymentDateRelativeTo(v int) {
	m.Set(field.NewPaymentStreamFinalPricePaymentDateRelativeTo(v))
}

// SetPaymentStreamFinalPricePaymentDateOffsetfPeriod sets PaymentStreamFinalPricePaymentDateOffsetfPeriod, Tag 42656.
func (m NoStreams) SetPaymentStreamFinalPricePaymentDateOffsetfPeriod(v int) {
	m.Set(field.NewPaymentStreamFinalPricePaymentDateOffsetfPeriod(v))
}

// SetPaymentStreamFinalPricePaymentDateOffsetUnit sets PaymentStreamFinalPricePaymentDateOffsetUnit, Tag 42657.
func (m NoStreams) SetPaymentStreamFinalPricePaymentDateOffsetUnit(v string) {
	m.Set(field.NewPaymentStreamFinalPricePaymentDateOffsetUnit(v))
}

// SetPaymentStreamFinalPricePaymentDateOffsetDayType sets PaymentStreamFinalPricePaymentDateOffsetDayType, Tag 42658.
func (m NoStreams) SetPaymentStreamFinalPricePaymentDateOffsetDayType(v int) {
	m.Set(field.NewPaymentStreamFinalPricePaymentDateOffsetDayType(v))
}

// SetPaymentStreamFinalPricePaymentDateAdjusted sets PaymentStreamFinalPricePaymentDateAdjusted, Tag 42659.
func (m NoStreams) SetPaymentStreamFinalPricePaymentDateAdjusted(v string) {
	m.Set(field.NewPaymentStreamFinalPricePaymentDateAdjusted(v))
}

// SetPaymentStreamResetDateRelativeTo sets PaymentStreamResetDateRelativeTo, Tag 40761.
func (m NoStreams) SetPaymentStreamResetDateRelativeTo(v int) {
	m.Set(field.NewPaymentStreamResetDateRelativeTo(v))
}

// SetPaymentStreamResetDateBusinessDayConvention sets PaymentStreamResetDateBusinessDayConvention, Tag 40762.
func (m NoStreams) SetPaymentStreamResetDateBusinessDayConvention(v int) {
	m.Set(field.NewPaymentStreamResetDateBusinessDayConvention(v))
}

// SetNoPaymentStreamResetDateBusinessCenters sets NoPaymentStreamResetDateBusinessCenters, Tag 40948.
func (m NoStreams) SetNoPaymentStreamResetDateBusinessCenters(f NoPaymentStreamResetDateBusinessCentersRepeatingGroup) {
	m.SetGroup(f)
}

// SetPaymentStreamResetFrequencyPeriod sets PaymentStreamResetFrequencyPeriod, Tag 40764.
func (m NoStreams) SetPaymentStreamResetFrequencyPeriod(v int) {
	m.Set(field.NewPaymentStreamResetFrequencyPeriod(v))
}

// SetPaymentStreamResetFrequencyUnit sets PaymentStreamResetFrequencyUnit, Tag 40765.
func (m NoStreams) SetPaymentStreamResetFrequencyUnit(v string) {
	m.Set(field.NewPaymentStreamResetFrequencyUnit(v))
}

// SetPaymentStreamResetWeeklyRollConvention sets PaymentStreamResetWeeklyRollConvention, Tag 40766.
func (m NoStreams) SetPaymentStreamResetWeeklyRollConvention(v enum.PaymentStreamResetWeeklyRollConvention) {
	m.Set(field.NewPaymentStreamResetWeeklyRollConvention(v))
}

// SetPaymentStreamInitialFixingDateRelativeTo sets PaymentStreamInitialFixingDateRelativeTo, Tag 40767.
func (m NoStreams) SetPaymentStreamInitialFixingDateRelativeTo(v int) {
	m.Set(field.NewPaymentStreamInitialFixingDateRelativeTo(v))
}

// SetPaymentStreamInitialFixingDateBusinessDayConvention sets PaymentStreamInitialFixingDateBusinessDayConvention, Tag 40768.
func (m NoStreams) SetPaymentStreamInitialFixingDateBusinessDayConvention(v int) {
	m.Set(field.NewPaymentStreamInitialFixingDateBusinessDayConvention(v))
}

// SetNoPaymentStreamInitialFixingDateBusinessCenters sets NoPaymentStreamInitialFixingDateBusinessCenters, Tag 40949.
func (m NoStreams) SetNoPaymentStreamInitialFixingDateBusinessCenters(f NoPaymentStreamInitialFixingDateBusinessCentersRepeatingGroup) {
	m.SetGroup(f)
}

// SetPaymentStreamInitialFixingDateOffsetPeriod sets PaymentStreamInitialFixingDateOffsetPeriod, Tag 40770.
func (m NoStreams) SetPaymentStreamInitialFixingDateOffsetPeriod(v int) {
	m.Set(field.NewPaymentStreamInitialFixingDateOffsetPeriod(v))
}

// SetPaymentStreamInitialFixingDateOffsetUnit sets PaymentStreamInitialFixingDateOffsetUnit, Tag 40771.
func (m NoStreams) SetPaymentStreamInitialFixingDateOffsetUnit(v string) {
	m.Set(field.NewPaymentStreamInitialFixingDateOffsetUnit(v))
}

// SetPaymentStreamInitialFixingDateOffsetDayType sets PaymentStreamInitialFixingDateOffsetDayType, Tag 40772.
func (m NoStreams) SetPaymentStreamInitialFixingDateOffsetDayType(v int) {
	m.Set(field.NewPaymentStreamInitialFixingDateOffsetDayType(v))
}

// SetPaymentStreamInitialFixingDateAdjusted sets PaymentStreamInitialFixingDateAdjusted, Tag 40773.
func (m NoStreams) SetPaymentStreamInitialFixingDateAdjusted(v string) {
	m.Set(field.NewPaymentStreamInitialFixingDateAdjusted(v))
}

// SetPaymentStreamFixingDateRelativeTo sets PaymentStreamFixingDateRelativeTo, Tag 40774.
func (m NoStreams) SetPaymentStreamFixingDateRelativeTo(v int) {
	m.Set(field.NewPaymentStreamFixingDateRelativeTo(v))
}

// SetPaymentStreamFixingDateBusinessDayConvention sets PaymentStreamFixingDateBusinessDayConvention, Tag 40775.
func (m NoStreams) SetPaymentStreamFixingDateBusinessDayConvention(v int) {
	m.Set(field.NewPaymentStreamFixingDateBusinessDayConvention(v))
}

// SetNoPaymentStreamFixingDateBusinessCenters sets NoPaymentStreamFixingDateBusinessCenters, Tag 40950.
func (m NoStreams) SetNoPaymentStreamFixingDateBusinessCenters(f NoPaymentStreamFixingDateBusinessCentersRepeatingGroup) {
	m.SetGroup(f)
}

// SetPaymentStreamFixingDateOffsetPeriod sets PaymentStreamFixingDateOffsetPeriod, Tag 40777.
func (m NoStreams) SetPaymentStreamFixingDateOffsetPeriod(v int) {
	m.Set(field.NewPaymentStreamFixingDateOffsetPeriod(v))
}

// SetPaymentStreamFixingDateOffsetUnit sets PaymentStreamFixingDateOffsetUnit, Tag 40778.
func (m NoStreams) SetPaymentStreamFixingDateOffsetUnit(v string) {
	m.Set(field.NewPaymentStreamFixingDateOffsetUnit(v))
}

// SetPaymentStreamFixingDateOffsetDayType sets PaymentStreamFixingDateOffsetDayType, Tag 40779.
func (m NoStreams) SetPaymentStreamFixingDateOffsetDayType(v int) {
	m.Set(field.NewPaymentStreamFixingDateOffsetDayType(v))
}

// SetPaymentStreamFixingDateAdjusted sets PaymentStreamFixingDateAdjusted, Tag 40780.
func (m NoStreams) SetPaymentStreamFixingDateAdjusted(v string) {
	m.Set(field.NewPaymentStreamFixingDateAdjusted(v))
}

// SetPaymentStreamRateCutoffDateOffsetPeriod sets PaymentStreamRateCutoffDateOffsetPeriod, Tag 40781.
func (m NoStreams) SetPaymentStreamRateCutoffDateOffsetPeriod(v int) {
	m.Set(field.NewPaymentStreamRateCutoffDateOffsetPeriod(v))
}

// SetPaymentStreamRateCutoffDateOffsetUnit sets PaymentStreamRateCutoffDateOffsetUnit, Tag 40782.
func (m NoStreams) SetPaymentStreamRateCutoffDateOffsetUnit(v string) {
	m.Set(field.NewPaymentStreamRateCutoffDateOffsetUnit(v))
}

// SetPaymentStreamRateCutoffDateOffsetDayType sets PaymentStreamRateCutoffDateOffsetDayType, Tag 40783.
func (m NoStreams) SetPaymentStreamRateCutoffDateOffsetDayType(v int) {
	m.Set(field.NewPaymentStreamRateCutoffDateOffsetDayType(v))
}

// SetNoPaymentStreamFixingDates sets NoPaymentStreamFixingDates, Tag 42660.
func (m NoStreams) SetNoPaymentStreamFixingDates(f NoPaymentStreamFixingDatesRepeatingGroup) {
	m.SetGroup(f)
}

// SetPaymentStreamRate sets PaymentStreamRate, Tag 40784.
func (m NoStreams) SetPaymentStreamRate(value decimal.Decimal, scale int32) {
	m.Set(field.NewPaymentStreamRate(value, scale))
}

// SetPaymentStreamFixedAmount sets PaymentStreamFixedAmount, Tag 40785.
func (m NoStreams) SetPaymentStreamFixedAmount(value decimal.Decimal, scale int32) {
	m.Set(field.NewPaymentStreamFixedAmount(value, scale))
}

// SetPaymentStreamRateOrAmountCurrency sets PaymentStreamRateOrAmountCurrency, Tag 40786.
func (m NoStreams) SetPaymentStreamRateOrAmountCurrency(v string) {
	m.Set(field.NewPaymentStreamRateOrAmountCurrency(v))
}

// SetPaymentStreamFutureValueNotional sets PaymentStreamFutureValueNotional, Tag 40787.
func (m NoStreams) SetPaymentStreamFutureValueNotional(value decimal.Decimal, scale int32) {
	m.Set(field.NewPaymentStreamFutureValueNotional(value, scale))
}

// SetPaymentStreamFutureValueDateAdjusted sets PaymentStreamFutureValueDateAdjusted, Tag 40788.
func (m NoStreams) SetPaymentStreamFutureValueDateAdjusted(v string) {
	m.Set(field.NewPaymentStreamFutureValueDateAdjusted(v))
}

// SetPaymentStreamFixedAmountUnitOfMeasure sets PaymentStreamFixedAmountUnitOfMeasure, Tag 41187.
func (m NoStreams) SetPaymentStreamFixedAmountUnitOfMeasure(v string) {
	m.Set(field.NewPaymentStreamFixedAmountUnitOfMeasure(v))
}

// SetPaymentStreamTotalFixedAmount sets PaymentStreamTotalFixedAmount, Tag 41188.
func (m NoStreams) SetPaymentStreamTotalFixedAmount(value decimal.Decimal, scale int32) {
	m.Set(field.NewPaymentStreamTotalFixedAmount(value, scale))
}

// SetPaymentStreamWorldScaleRate sets PaymentStreamWorldScaleRate, Tag 41189.
func (m NoStreams) SetPaymentStreamWorldScaleRate(value decimal.Decimal, scale int32) {
	m.Set(field.NewPaymentStreamWorldScaleRate(value, scale))
}

// SetPaymentStreamContractPrice sets PaymentStreamContractPrice, Tag 41190.
func (m NoStreams) SetPaymentStreamContractPrice(value decimal.Decimal, scale int32) {
	m.Set(field.NewPaymentStreamContractPrice(value, scale))
}

// SetPaymentStreamContractPriceCurrency sets PaymentStreamContractPriceCurrency, Tag 41191.
func (m NoStreams) SetPaymentStreamContractPriceCurrency(v string) {
	m.Set(field.NewPaymentStreamContractPriceCurrency(v))
}

// SetPaymentStreamRateIndex sets PaymentStreamRateIndex, Tag 40789.
func (m NoStreams) SetPaymentStreamRateIndex(v string) {
	m.Set(field.NewPaymentStreamRateIndex(v))
}

// SetPaymentStreamRateIndexSource sets PaymentStreamRateIndexSource, Tag 40790.
func (m NoStreams) SetPaymentStreamRateIndexSource(v enum.PaymentStreamRateIndexSource) {
	m.Set(field.NewPaymentStreamRateIndexSource(v))
}

// SetPaymentStreamRateIndexCurveUnit sets PaymentStreamRateIndexCurveUnit, Tag 40791.
func (m NoStreams) SetPaymentStreamRateIndexCurveUnit(v enum.PaymentStreamRateIndexCurveUnit) {
	m.Set(field.NewPaymentStreamRateIndexCurveUnit(v))
}

// SetPaymentStreamRateIndexCurvePeriod sets PaymentStreamRateIndexCurvePeriod, Tag 40792.
func (m NoStreams) SetPaymentStreamRateIndexCurvePeriod(v int) {
	m.Set(field.NewPaymentStreamRateIndexCurvePeriod(v))
}

// SetPaymentStreamRateMultiplier sets PaymentStreamRateMultiplier, Tag 40793.
func (m NoStreams) SetPaymentStreamRateMultiplier(value decimal.Decimal, scale int32) {
	m.Set(field.NewPaymentStreamRateMultiplier(value, scale))
}

// SetPaymentStreamRateSpread sets PaymentStreamRateSpread, Tag 40794.
func (m NoStreams) SetPaymentStreamRateSpread(value decimal.Decimal, scale int32) {
	m.Set(field.NewPaymentStreamRateSpread(value, scale))
}

// SetPaymentStreamRateSpreadPositionType sets PaymentStreamRateSpreadPositionType, Tag 40795.
func (m NoStreams) SetPaymentStreamRateSpreadPositionType(v enum.PaymentStreamRateSpreadPositionType) {
	m.Set(field.NewPaymentStreamRateSpreadPositionType(v))
}

// SetPaymentStreamRateTreatment sets PaymentStreamRateTreatment, Tag 40796.
func (m NoStreams) SetPaymentStreamRateTreatment(v enum.PaymentStreamRateTreatment) {
	m.Set(field.NewPaymentStreamRateTreatment(v))
}

// SetPaymentStreamCapRate sets PaymentStreamCapRate, Tag 40797.
func (m NoStreams) SetPaymentStreamCapRate(value decimal.Decimal, scale int32) {
	m.Set(field.NewPaymentStreamCapRate(value, scale))
}

// SetPaymentStreamCapRateBuySide sets PaymentStreamCapRateBuySide, Tag 40798.
func (m NoStreams) SetPaymentStreamCapRateBuySide(v enum.PaymentStreamCapRateBuySide) {
	m.Set(field.NewPaymentStreamCapRateBuySide(v))
}

// SetPaymentStreamCapRateSellSide sets PaymentStreamCapRateSellSide, Tag 40799.
func (m NoStreams) SetPaymentStreamCapRateSellSide(v int) {
	m.Set(field.NewPaymentStreamCapRateSellSide(v))
}

// SetPaymentStreamFloorRate sets PaymentStreamFloorRate, Tag 40800.
func (m NoStreams) SetPaymentStreamFloorRate(value decimal.Decimal, scale int32) {
	m.Set(field.NewPaymentStreamFloorRate(value, scale))
}

// SetPaymentStreamFloorRateBuySide sets PaymentStreamFloorRateBuySide, Tag 40801.
func (m NoStreams) SetPaymentStreamFloorRateBuySide(v enum.PaymentStreamFloorRateBuySide) {
	m.Set(field.NewPaymentStreamFloorRateBuySide(v))
}

// SetPaymentStreamFloorRateSellSide sets PaymentStreamFloorRateSellSide, Tag 40802.
func (m NoStreams) SetPaymentStreamFloorRateSellSide(v int) {
	m.Set(field.NewPaymentStreamFloorRateSellSide(v))
}

// SetPaymentStreamInitialRate sets PaymentStreamInitialRate, Tag 40803.
func (m NoStreams) SetPaymentStreamInitialRate(value decimal.Decimal, scale int32) {
	m.Set(field.NewPaymentStreamInitialRate(value, scale))
}

// SetPaymentStreamFinalRateRoundingDirection sets PaymentStreamFinalRateRoundingDirection, Tag 40804.
func (m NoStreams) SetPaymentStreamFinalRateRoundingDirection(v string) {
	m.Set(field.NewPaymentStreamFinalRateRoundingDirection(v))
}

// SetPaymentStreamFinalRatePrecision sets PaymentStreamFinalRatePrecision, Tag 40805.
func (m NoStreams) SetPaymentStreamFinalRatePrecision(v int) {
	m.Set(field.NewPaymentStreamFinalRatePrecision(v))
}

// SetPaymentStreamAveragingMethod sets PaymentStreamAveragingMethod, Tag 40806.
func (m NoStreams) SetPaymentStreamAveragingMethod(v enum.PaymentStreamAveragingMethod) {
	m.Set(field.NewPaymentStreamAveragingMethod(v))
}

// SetPaymentStreamNegativeRateTreatment sets PaymentStreamNegativeRateTreatment, Tag 40807.
func (m NoStreams) SetPaymentStreamNegativeRateTreatment(v enum.PaymentStreamNegativeRateTreatment) {
	m.Set(field.NewPaymentStreamNegativeRateTreatment(v))
}

// SetPaymentStreamInflationLagPeriod sets PaymentStreamInflationLagPeriod, Tag 40808.
func (m NoStreams) SetPaymentStreamInflationLagPeriod(v int) {
	m.Set(field.NewPaymentStreamInflationLagPeriod(v))
}

// SetPaymentStreamInflationLagUnit sets PaymentStreamInflationLagUnit, Tag 40809.
func (m NoStreams) SetPaymentStreamInflationLagUnit(v enum.PaymentStreamInflationLagUnit) {
	m.Set(field.NewPaymentStreamInflationLagUnit(v))
}

// SetPaymentStreamInflationLagDayType sets PaymentStreamInflationLagDayType, Tag 40810.
func (m NoStreams) SetPaymentStreamInflationLagDayType(v enum.PaymentStreamInflationLagDayType) {
	m.Set(field.NewPaymentStreamInflationLagDayType(v))
}

// SetPaymentStreamInflationInterpolationMethod sets PaymentStreamInflationInterpolationMethod, Tag 40811.
func (m NoStreams) SetPaymentStreamInflationInterpolationMethod(v enum.PaymentStreamInflationInterpolationMethod) {
	m.Set(field.NewPaymentStreamInflationInterpolationMethod(v))
}

// SetPaymentStreamInflationIndexSource sets PaymentStreamInflationIndexSource, Tag 40812.
func (m NoStreams) SetPaymentStreamInflationIndexSource(v int) {
	m.Set(field.NewPaymentStreamInflationIndexSource(v))
}

// SetPaymentStreamInflationPublicationSource sets PaymentStreamInflationPublicationSource, Tag 40813.
func (m NoStreams) SetPaymentStreamInflationPublicationSource(v string) {
	m.Set(field.NewPaymentStreamInflationPublicationSource(v))
}

// SetPaymentStreamInflationInitialIndexLevel sets PaymentStreamInflationInitialIndexLevel, Tag 40814.
func (m NoStreams) SetPaymentStreamInflationInitialIndexLevel(value decimal.Decimal, scale int32) {
	m.Set(field.NewPaymentStreamInflationInitialIndexLevel(value, scale))
}

// SetPaymentStreamInflationFallbackBondApplicable sets PaymentStreamInflationFallbackBondApplicable, Tag 40815.
func (m NoStreams) SetPaymentStreamInflationFallbackBondApplicable(v bool) {
	m.Set(field.NewPaymentStreamInflationFallbackBondApplicable(v))
}

// SetPaymentStreamFRADiscounting sets PaymentStreamFRADiscounting, Tag 40816.
func (m NoStreams) SetPaymentStreamFRADiscounting(v enum.PaymentStreamFRADiscounting) {
	m.Set(field.NewPaymentStreamFRADiscounting(v))
}

// SetPaymentStreamRateIndex2CurvePeriod sets PaymentStreamRateIndex2CurvePeriod, Tag 41194.
func (m NoStreams) SetPaymentStreamRateIndex2CurvePeriod(v int) {
	m.Set(field.NewPaymentStreamRateIndex2CurvePeriod(v))
}

// SetPaymentStreamRateIndex2CurveUnit sets PaymentStreamRateIndex2CurveUnit, Tag 41195.
func (m NoStreams) SetPaymentStreamRateIndex2CurveUnit(v string) {
	m.Set(field.NewPaymentStreamRateIndex2CurveUnit(v))
}

// SetPaymentStreamRateIndexLocation sets PaymentStreamRateIndexLocation, Tag 41196.
func (m NoStreams) SetPaymentStreamRateIndexLocation(v string) {
	m.Set(field.NewPaymentStreamRateIndexLocation(v))
}

// SetPaymentStreamRateIndexLevel sets PaymentStreamRateIndexLevel, Tag 41197.
func (m NoStreams) SetPaymentStreamRateIndexLevel(value decimal.Decimal, scale int32) {
	m.Set(field.NewPaymentStreamRateIndexLevel(value, scale))
}

// SetPaymentStreamRateIndexUnitOfMeasure sets PaymentStreamRateIndexUnitOfMeasure, Tag 41198.
func (m NoStreams) SetPaymentStreamRateIndexUnitOfMeasure(v string) {
	m.Set(field.NewPaymentStreamRateIndexUnitOfMeasure(v))
}

// SetPaymentStreamSettlLevel sets PaymentStreamSettlLevel, Tag 41199.
func (m NoStreams) SetPaymentStreamSettlLevel(v enum.PaymentStreamSettlLevel) {
	m.Set(field.NewPaymentStreamSettlLevel(v))
}

// SetPaymentStreamReferenceLevel sets PaymentStreamReferenceLevel, Tag 41200.
func (m NoStreams) SetPaymentStreamReferenceLevel(value decimal.Decimal, scale int32) {
	m.Set(field.NewPaymentStreamReferenceLevel(value, scale))
}

// SetPaymentStreamReferenceLevelUnitOfMeasure sets PaymentStreamReferenceLevelUnitOfMeasure, Tag 41201.
func (m NoStreams) SetPaymentStreamReferenceLevelUnitOfMeasure(v string) {
	m.Set(field.NewPaymentStreamReferenceLevelUnitOfMeasure(v))
}

// SetPaymentStreamReferenceLevelEqualsZeroIndicator sets PaymentStreamReferenceLevelEqualsZeroIndicator, Tag 41202.
func (m NoStreams) SetPaymentStreamReferenceLevelEqualsZeroIndicator(v bool) {
	m.Set(field.NewPaymentStreamReferenceLevelEqualsZeroIndicator(v))
}

// SetPaymentStreamRateSpreadCurrency sets PaymentStreamRateSpreadCurrency, Tag 41203.
func (m NoStreams) SetPaymentStreamRateSpreadCurrency(v string) {
	m.Set(field.NewPaymentStreamRateSpreadCurrency(v))
}

// SetPaymentStreamRateSpreadUnitOfMeasure sets PaymentStreamRateSpreadUnitOfMeasure, Tag 41204.
func (m NoStreams) SetPaymentStreamRateSpreadUnitOfMeasure(v string) {
	m.Set(field.NewPaymentStreamRateSpreadUnitOfMeasure(v))
}

// SetPaymentStreamRateConversionFactor sets PaymentStreamRateConversionFactor, Tag 41205.
func (m NoStreams) SetPaymentStreamRateConversionFactor(value decimal.Decimal, scale int32) {
	m.Set(field.NewPaymentStreamRateConversionFactor(value, scale))
}

// SetPaymentStreamRateSpreadType sets PaymentStreamRateSpreadType, Tag 41206.
func (m NoStreams) SetPaymentStreamRateSpreadType(v enum.PaymentStreamRateSpreadType) {
	m.Set(field.NewPaymentStreamRateSpreadType(v))
}

// SetPaymentStreamLastResetRate sets PaymentStreamLastResetRate, Tag 41207.
func (m NoStreams) SetPaymentStreamLastResetRate(value decimal.Decimal, scale int32) {
	m.Set(field.NewPaymentStreamLastResetRate(value, scale))
}

// SetPaymentStreamFinalRate sets PaymentStreamFinalRate, Tag 41208.
func (m NoStreams) SetPaymentStreamFinalRate(value decimal.Decimal, scale int32) {
	m.Set(field.NewPaymentStreamFinalRate(value, scale))
}

// SetPaymentStreamCalculationLagPeriod sets PaymentStreamCalculationLagPeriod, Tag 41209.
func (m NoStreams) SetPaymentStreamCalculationLagPeriod(v int) {
	m.Set(field.NewPaymentStreamCalculationLagPeriod(v))
}

// SetPaymentStreamCalculationLagUnit sets PaymentStreamCalculationLagUnit, Tag 41210.
func (m NoStreams) SetPaymentStreamCalculationLagUnit(v string) {
	m.Set(field.NewPaymentStreamCalculationLagUnit(v))
}

// SetPaymentStreamFirstObservationDateOffsetPeriod sets PaymentStreamFirstObservationDateOffsetPeriod, Tag 41211.
func (m NoStreams) SetPaymentStreamFirstObservationDateOffsetPeriod(v int) {
	m.Set(field.NewPaymentStreamFirstObservationDateOffsetPeriod(v))
}

// SetPaymentStreamFirstObservationDateOffsetUnit sets PaymentStreamFirstObservationDateOffsetUnit, Tag 41212.
func (m NoStreams) SetPaymentStreamFirstObservationDateOffsetUnit(v string) {
	m.Set(field.NewPaymentStreamFirstObservationDateOffsetUnit(v))
}

// SetPaymentStreamPricingDayType sets PaymentStreamPricingDayType, Tag 41213.
func (m NoStreams) SetPaymentStreamPricingDayType(v int) {
	m.Set(field.NewPaymentStreamPricingDayType(v))
}

// SetPaymentStreamPricingDayDistribution sets PaymentStreamPricingDayDistribution, Tag 41214.
func (m NoStreams) SetPaymentStreamPricingDayDistribution(v enum.PaymentStreamPricingDayDistribution) {
	m.Set(field.NewPaymentStreamPricingDayDistribution(v))
}

// SetPaymentStreamPricingDayCount sets PaymentStreamPricingDayCount, Tag 41215.
func (m NoStreams) SetPaymentStreamPricingDayCount(v int) {
	m.Set(field.NewPaymentStreamPricingDayCount(v))
}

// SetPaymentStreamPricingBusinessCalendar sets PaymentStreamPricingBusinessCalendar, Tag 41216.
func (m NoStreams) SetPaymentStreamPricingBusinessCalendar(v string) {
	m.Set(field.NewPaymentStreamPricingBusinessCalendar(v))
}

// SetPaymentStreamPricingBusinessDayConvention sets PaymentStreamPricingBusinessDayConvention, Tag 41217.
func (m NoStreams) SetPaymentStreamPricingBusinessDayConvention(v int) {
	m.Set(field.NewPaymentStreamPricingBusinessDayConvention(v))
}

// SetNoPaymentStreamPricingBusinessCenters sets NoPaymentStreamPricingBusinessCenters, Tag 41192.
func (m NoStreams) SetNoPaymentStreamPricingBusinessCenters(f NoPaymentStreamPricingBusinessCentersRepeatingGroup) {
	m.SetGroup(f)
}

// SetNoPaymentStreamPricingDays sets NoPaymentStreamPricingDays, Tag 41227.
func (m NoStreams) SetNoPaymentStreamPricingDays(f NoPaymentStreamPricingDaysRepeatingGroup) {
	m.SetGroup(f)
}

// SetNoPaymentStreamPricingDates sets NoPaymentStreamPricingDates, Tag 41224.
func (m NoStreams) SetNoPaymentStreamPricingDates(f NoPaymentStreamPricingDatesRepeatingGroup) {
	m.SetGroup(f)
}

// SetPaymentStreamFirstObservationDateUnadjusted sets PaymentStreamFirstObservationDateUnadjusted, Tag 42663.
func (m NoStreams) SetPaymentStreamFirstObservationDateUnadjusted(v string) {
	m.Set(field.NewPaymentStreamFirstObservationDateUnadjusted(v))
}

// SetPaymentStreamFirstObservationDateRelativeTo sets PaymentStreamFirstObservationDateRelativeTo, Tag 42664.
func (m NoStreams) SetPaymentStreamFirstObservationDateRelativeTo(v int) {
	m.Set(field.NewPaymentStreamFirstObservationDateRelativeTo(v))
}

// SetPaymentStreamFirstObservationDateOffsetDayType sets PaymentStreamFirstObservationDateOffsetDayType, Tag 42665.
func (m NoStreams) SetPaymentStreamFirstObservationDateOffsetDayType(v int) {
	m.Set(field.NewPaymentStreamFirstObservationDateOffsetDayType(v))
}

// SetPaymentStreamFirstObservationDateAdjusted sets PaymentStreamFirstObservationDateAdjusted, Tag 42666.
func (m NoStreams) SetPaymentStreamFirstObservationDateAdjusted(v string) {
	m.Set(field.NewPaymentStreamFirstObservationDateAdjusted(v))
}

// SetPaymentStreamUnderlierRefID sets PaymentStreamUnderlierRefID, Tag 42667.
func (m NoStreams) SetPaymentStreamUnderlierRefID(v string) {
	m.Set(field.NewPaymentStreamUnderlierRefID(v))
}

// SetPaymentStreamFormulaCurrency sets PaymentStreamFormulaCurrency, Tag 42686.
func (m NoStreams) SetPaymentStreamFormulaCurrency(v string) {
	m.Set(field.NewPaymentStreamFormulaCurrency(v))
}

// SetPaymentStreamFormulaCurrencyDeterminationMethod sets PaymentStreamFormulaCurrencyDeterminationMethod, Tag 42687.
func (m NoStreams) SetPaymentStreamFormulaCurrencyDeterminationMethod(v string) {
	m.Set(field.NewPaymentStreamFormulaCurrencyDeterminationMethod(v))
}

// SetPaymentStreamFormulaReferenceAmount sets PaymentStreamFormulaReferenceAmount, Tag 42688.
func (m NoStreams) SetPaymentStreamFormulaReferenceAmount(v int) {
	m.Set(field.NewPaymentStreamFormulaReferenceAmount(v))
}

// SetNoPaymentStreamFormulas sets NoPaymentStreamFormulas, Tag 42683.
func (m NoStreams) SetNoPaymentStreamFormulas(f NoPaymentStreamFormulasRepeatingGroup) {
	m.SetGroup(f)
}

// SetPaymentStreamFormulaImageLength sets PaymentStreamFormulaImageLength, Tag 42652.
func (m NoStreams) SetPaymentStreamFormulaImageLength(v int) {
	m.Set(field.NewPaymentStreamFormulaImageLength(v))
}

// SetPaymentStreamFormulaImage sets PaymentStreamFormulaImage, Tag 42653.
func (m NoStreams) SetPaymentStreamFormulaImage(v string) {
	m.Set(field.NewPaymentStreamFormulaImage(v))
}

// SetDividendReinvestmentIndicator sets DividendReinvestmentIndicator, Tag 42245.
func (m NoStreams) SetDividendReinvestmentIndicator(v bool) {
	m.Set(field.NewDividendReinvestmentIndicator(v))
}

// SetDividendEntitlementEvent sets DividendEntitlementEvent, Tag 42246.
func (m NoStreams) SetDividendEntitlementEvent(v enum.DividendEntitlementEvent) {
	m.Set(field.NewDividendEntitlementEvent(v))
}

// SetDividendAmountType sets DividendAmountType, Tag 42247.
func (m NoStreams) SetDividendAmountType(v enum.DividendAmountType) {
	m.Set(field.NewDividendAmountType(v))
}

// SetDividendUnderlierRefID sets DividendUnderlierRefID, Tag 42248.
func (m NoStreams) SetDividendUnderlierRefID(v string) {
	m.Set(field.NewDividendUnderlierRefID(v))
}

// SetNoDividendPeriods sets NoDividendPeriods, Tag 42274.
func (m NoStreams) SetNoDividendPeriods(f NoDividendPeriodsRepeatingGroup) {
	m.SetGroup(f)
}

// SetExtraordinaryDividendPartySide sets ExtraordinaryDividendPartySide, Tag 42249.
func (m NoStreams) SetExtraordinaryDividendPartySide(v int) {
	m.Set(field.NewExtraordinaryDividendPartySide(v))
}

// SetExtraordinaryDividendAmountType sets ExtraordinaryDividendAmountType, Tag 42250.
func (m NoStreams) SetExtraordinaryDividendAmountType(v int) {
	m.Set(field.NewExtraordinaryDividendAmountType(v))
}

// SetExtraordinaryDividendCurrency sets ExtraordinaryDividendCurrency, Tag 42251.
func (m NoStreams) SetExtraordinaryDividendCurrency(v string) {
	m.Set(field.NewExtraordinaryDividendCurrency(v))
}

// SetExtraordinaryDividendDeterminationMethod sets ExtraordinaryDividendDeterminationMethod, Tag 42252.
func (m NoStreams) SetExtraordinaryDividendDeterminationMethod(v string) {
	m.Set(field.NewExtraordinaryDividendDeterminationMethod(v))
}

// SetDividendFXTriggerDateRelativeTo sets DividendFXTriggerDateRelativeTo, Tag 42265.
func (m NoStreams) SetDividendFXTriggerDateRelativeTo(v int) {
	m.Set(field.NewDividendFXTriggerDateRelativeTo(v))
}

// SetDividendFXTriggerDateOffsetPeriod sets DividendFXTriggerDateOffsetPeriod, Tag 42266.
func (m NoStreams) SetDividendFXTriggerDateOffsetPeriod(v int) {
	m.Set(field.NewDividendFXTriggerDateOffsetPeriod(v))
}

// SetDividendFXTriggerDateOffsetUnit sets DividendFXTriggerDateOffsetUnit, Tag 42267.
func (m NoStreams) SetDividendFXTriggerDateOffsetUnit(v string) {
	m.Set(field.NewDividendFXTriggerDateOffsetUnit(v))
}

// SetDividendFXTriggerDateOffsetDayType sets DividendFXTriggerDateOffsetDayType, Tag 42268.
func (m NoStreams) SetDividendFXTriggerDateOffsetDayType(v int) {
	m.Set(field.NewDividendFXTriggerDateOffsetDayType(v))
}

// SetDividendFXTriggerDateUnadjusted sets DividendFXTriggerDateUnadjusted, Tag 42269.
func (m NoStreams) SetDividendFXTriggerDateUnadjusted(v string) {
	m.Set(field.NewDividendFXTriggerDateUnadjusted(v))
}

// SetDividendFXTriggerDateBusinessDayConvention sets DividendFXTriggerDateBusinessDayConvention, Tag 42270.
func (m NoStreams) SetDividendFXTriggerDateBusinessDayConvention(v int) {
	m.Set(field.NewDividendFXTriggerDateBusinessDayConvention(v))
}

// SetNoDividendFXTriggerDateBusinessCenters sets NoDividendFXTriggerDateBusinessCenters, Tag 42272.
func (m NoStreams) SetNoDividendFXTriggerDateBusinessCenters(f NoDividendFXTriggerDateBusinessCentersRepeatingGroup) {
	m.SetGroup(f)
}

// SetDividendFXTriggerDateAdjusted sets DividendFXTriggerDateAdjusted, Tag 42271.
func (m NoStreams) SetDividendFXTriggerDateAdjusted(v string) {
	m.Set(field.NewDividendFXTriggerDateAdjusted(v))
}

// SetDividendFloatingRateIndex sets DividendFloatingRateIndex, Tag 42218.
func (m NoStreams) SetDividendFloatingRateIndex(v string) {
	m.Set(field.NewDividendFloatingRateIndex(v))
}

// SetDividendFloatingRateIndexCurvePeriod sets DividendFloatingRateIndexCurvePeriod, Tag 42219.
func (m NoStreams) SetDividendFloatingRateIndexCurvePeriod(v int) {
	m.Set(field.NewDividendFloatingRateIndexCurvePeriod(v))
}

// SetDividendFloatingRateIndexCurveUnit sets DividendFloatingRateIndexCurveUnit, Tag 42220.
func (m NoStreams) SetDividendFloatingRateIndexCurveUnit(v string) {
	m.Set(field.NewDividendFloatingRateIndexCurveUnit(v))
}

// SetDividendFloatingRateMultiplier sets DividendFloatingRateMultiplier, Tag 42221.
func (m NoStreams) SetDividendFloatingRateMultiplier(value decimal.Decimal, scale int32) {
	m.Set(field.NewDividendFloatingRateMultiplier(value, scale))
}

// SetDividendFloatingRateSpread sets DividendFloatingRateSpread, Tag 42222.
func (m NoStreams) SetDividendFloatingRateSpread(value decimal.Decimal, scale int32) {
	m.Set(field.NewDividendFloatingRateSpread(value, scale))
}

// SetDividendFloatingRateSpreadPositionType sets DividendFloatingRateSpreadPositionType, Tag 42223.
func (m NoStreams) SetDividendFloatingRateSpreadPositionType(v int) {
	m.Set(field.NewDividendFloatingRateSpreadPositionType(v))
}

// SetDividendFloatingRateTreatment sets DividendFloatingRateTreatment, Tag 42224.
func (m NoStreams) SetDividendFloatingRateTreatment(v int) {
	m.Set(field.NewDividendFloatingRateTreatment(v))
}

// SetDividendCapRate sets DividendCapRate, Tag 42225.
func (m NoStreams) SetDividendCapRate(value decimal.Decimal, scale int32) {
	m.Set(field.NewDividendCapRate(value, scale))
}

// SetDividendCapRateBuySide sets DividendCapRateBuySide, Tag 42226.
func (m NoStreams) SetDividendCapRateBuySide(v int) {
	m.Set(field.NewDividendCapRateBuySide(v))
}

// SetDividendCapRateSellSide sets DividendCapRateSellSide, Tag 42227.
func (m NoStreams) SetDividendCapRateSellSide(v int) {
	m.Set(field.NewDividendCapRateSellSide(v))
}

// SetDividendFloorRate sets DividendFloorRate, Tag 42228.
func (m NoStreams) SetDividendFloorRate(value decimal.Decimal, scale int32) {
	m.Set(field.NewDividendFloorRate(value, scale))
}

// SetDividendFloorRateBuySide sets DividendFloorRateBuySide, Tag 42229.
func (m NoStreams) SetDividendFloorRateBuySide(v int) {
	m.Set(field.NewDividendFloorRateBuySide(v))
}

// SetDividendFloorRateSellSide sets DividendFloorRateSellSide, Tag 42230.
func (m NoStreams) SetDividendFloorRateSellSide(v int) {
	m.Set(field.NewDividendFloorRateSellSide(v))
}

// SetDividendInitialRate sets DividendInitialRate, Tag 42231.
func (m NoStreams) SetDividendInitialRate(value decimal.Decimal, scale int32) {
	m.Set(field.NewDividendInitialRate(value, scale))
}

// SetDividendFinalRateRoundingDirection sets DividendFinalRateRoundingDirection, Tag 42232.
func (m NoStreams) SetDividendFinalRateRoundingDirection(v string) {
	m.Set(field.NewDividendFinalRateRoundingDirection(v))
}

// SetDividendFinalRatePrecision sets DividendFinalRatePrecision, Tag 42233.
func (m NoStreams) SetDividendFinalRatePrecision(v int) {
	m.Set(field.NewDividendFinalRatePrecision(v))
}

// SetDividendAveragingMethod sets DividendAveragingMethod, Tag 42234.
func (m NoStreams) SetDividendAveragingMethod(v int) {
	m.Set(field.NewDividendAveragingMethod(v))
}

// SetDividendNegativeRateTreatment sets DividendNegativeRateTreatment, Tag 42235.
func (m NoStreams) SetDividendNegativeRateTreatment(v int) {
	m.Set(field.NewDividendNegativeRateTreatment(v))
}

// SetDividendAccrualFixedRate sets DividendAccrualFixedRate, Tag 42253.
func (m NoStreams) SetDividendAccrualFixedRate(value decimal.Decimal, scale int32) {
	m.Set(field.NewDividendAccrualFixedRate(value, scale))
}

// SetDividendAccrualPaymentDateRelativeTo sets DividendAccrualPaymentDateRelativeTo, Tag 42238.
func (m NoStreams) SetDividendAccrualPaymentDateRelativeTo(v int) {
	m.Set(field.NewDividendAccrualPaymentDateRelativeTo(v))
}

// SetDividendAccrualPaymentDateOffsetPeriod sets DividendAccrualPaymentDateOffsetPeriod, Tag 42239.
func (m NoStreams) SetDividendAccrualPaymentDateOffsetPeriod(v int) {
	m.Set(field.NewDividendAccrualPaymentDateOffsetPeriod(v))
}

// SetDividendAccrualPaymentDateOffsetUnit sets DividendAccrualPaymentDateOffsetUnit, Tag 42240.
func (m NoStreams) SetDividendAccrualPaymentDateOffsetUnit(v string) {
	m.Set(field.NewDividendAccrualPaymentDateOffsetUnit(v))
}

// SetDividendAccrualPaymentDateOffsetDayType sets DividendAccrualPaymentDateOffsetDayType, Tag 42241.
func (m NoStreams) SetDividendAccrualPaymentDateOffsetDayType(v int) {
	m.Set(field.NewDividendAccrualPaymentDateOffsetDayType(v))
}

// SetDividendAccrualPaymentDateUnadjusted sets DividendAccrualPaymentDateUnadjusted, Tag 42242.
func (m NoStreams) SetDividendAccrualPaymentDateUnadjusted(v string) {
	m.Set(field.NewDividendAccrualPaymentDateUnadjusted(v))
}

// SetDividendAccrualPaymeentDateBusinessDayConvention sets DividendAccrualPaymeentDateBusinessDayConvention, Tag 42243.
func (m NoStreams) SetDividendAccrualPaymeentDateBusinessDayConvention(v int) {
	m.Set(field.NewDividendAccrualPaymeentDateBusinessDayConvention(v))
}

// SetNoDividendAccrualPaymentDateBusinessCenters sets NoDividendAccrualPaymentDateBusinessCenters, Tag 42236.
func (m NoStreams) SetNoDividendAccrualPaymentDateBusinessCenters(f NoDividendAccrualPaymentDateBusinessCentersRepeatingGroup) {
	m.SetGroup(f)
}

// SetDividendAccrualPaymentDateAdjusted sets DividendAccrualPaymentDateAdjusted, Tag 42244.
func (m NoStreams) SetDividendAccrualPaymentDateAdjusted(v string) {
	m.Set(field.NewDividendAccrualPaymentDateAdjusted(v))
}

// SetDividendCompoundingMethod sets DividendCompoundingMethod, Tag 42254.
func (m NoStreams) SetDividendCompoundingMethod(v int) {
	m.Set(field.NewDividendCompoundingMethod(v))
}

// SetDividendNumOfIndexUnits sets DividendNumOfIndexUnits, Tag 42255.
func (m NoStreams) SetDividendNumOfIndexUnits(v int) {
	m.Set(field.NewDividendNumOfIndexUnits(v))
}

// SetDividendCashPercentage sets DividendCashPercentage, Tag 42256.
func (m NoStreams) SetDividendCashPercentage(value decimal.Decimal, scale int32) {
	m.Set(field.NewDividendCashPercentage(value, scale))
}

// SetDividendCashEquivalentPercentage sets DividendCashEquivalentPercentage, Tag 42257.
func (m NoStreams) SetDividendCashEquivalentPercentage(value decimal.Decimal, scale int32) {
	m.Set(field.NewDividendCashEquivalentPercentage(value, scale))
}

// SetNonCashDividendTreatment sets NonCashDividendTreatment, Tag 42258.
func (m NoStreams) SetNonCashDividendTreatment(v enum.NonCashDividendTreatment) {
	m.Set(field.NewNonCashDividendTreatment(v))
}

// SetDividendComposition sets DividendComposition, Tag 42259.
func (m NoStreams) SetDividendComposition(v enum.DividendComposition) {
	m.Set(field.NewDividendComposition(v))
}

// SetSpecialDividendsIndicator sets SpecialDividendsIndicator, Tag 42260.
func (m NoStreams) SetSpecialDividendsIndicator(v bool) {
	m.Set(field.NewSpecialDividendsIndicator(v))
}

// SetMaterialDividendsIndicator sets MaterialDividendsIndicator, Tag 42261.
func (m NoStreams) SetMaterialDividendsIndicator(v bool) {
	m.Set(field.NewMaterialDividendsIndicator(v))
}

// SetOptionsExchangeDividendsIndicator sets OptionsExchangeDividendsIndicator, Tag 42262.
func (m NoStreams) SetOptionsExchangeDividendsIndicator(v bool) {
	m.Set(field.NewOptionsExchangeDividendsIndicator(v))
}

// SetAdditionalDividendsIndicator sets AdditionalDividendsIndicator, Tag 42263.
func (m NoStreams) SetAdditionalDividendsIndicator(v bool) {
	m.Set(field.NewAdditionalDividendsIndicator(v))
}

// SetAllDividendsIndicator sets AllDividendsIndicator, Tag 42264.
func (m NoStreams) SetAllDividendsIndicator(v bool) {
	m.Set(field.NewAllDividendsIndicator(v))
}

// SetReturnRateNotionalReset sets ReturnRateNotionalReset, Tag 42668.
func (m NoStreams) SetReturnRateNotionalReset(v bool) {
	m.Set(field.NewReturnRateNotionalReset(v))
}

// SetNoReturnRates sets NoReturnRates, Tag 42735.
func (m NoStreams) SetNoReturnRates(f NoReturnRatesRepeatingGroup) {
	m.SetGroup(f)
}

// SetPaymentStreamLinkInitialLevel sets PaymentStreamLinkInitialLevel, Tag 42669.
func (m NoStreams) SetPaymentStreamLinkInitialLevel(value decimal.Decimal, scale int32) {
	m.Set(field.NewPaymentStreamLinkInitialLevel(value, scale))
}

// SetPaymentStreamLinkClosingLevelIndicator sets PaymentStreamLinkClosingLevelIndicator, Tag 42670.
func (m NoStreams) SetPaymentStreamLinkClosingLevelIndicator(v bool) {
	m.Set(field.NewPaymentStreamLinkClosingLevelIndicator(v))
}

// SetPaymentStreamLinkExpiringLevelIndicator sets PaymentStreamLinkExpiringLevelIndicator, Tag 42671.
func (m NoStreams) SetPaymentStreamLinkExpiringLevelIndicator(v bool) {
	m.Set(field.NewPaymentStreamLinkExpiringLevelIndicator(v))
}

// SetPaymentStreamLinkEstimatedTradingDays sets PaymentStreamLinkEstimatedTradingDays, Tag 42672.
func (m NoStreams) SetPaymentStreamLinkEstimatedTradingDays(v int) {
	m.Set(field.NewPaymentStreamLinkEstimatedTradingDays(v))
}

// SetPaymentStreamLinkStrikePrice sets PaymentStreamLinkStrikePrice, Tag 42673.
func (m NoStreams) SetPaymentStreamLinkStrikePrice(value decimal.Decimal, scale int32) {
	m.Set(field.NewPaymentStreamLinkStrikePrice(value, scale))
}

// SetPaymentStreamLinkStrikePriceType sets PaymentStreamLinkStrikePriceType, Tag 42674.
func (m NoStreams) SetPaymentStreamLinkStrikePriceType(v enum.PaymentStreamLinkStrikePriceType) {
	m.Set(field.NewPaymentStreamLinkStrikePriceType(v))
}

// SetPaymentStreamLinkMaximumBoundary sets PaymentStreamLinkMaximumBoundary, Tag 42675.
func (m NoStreams) SetPaymentStreamLinkMaximumBoundary(value decimal.Decimal, scale int32) {
	m.Set(field.NewPaymentStreamLinkMaximumBoundary(value, scale))
}

// SetPaymentStreamLinkMinimumBoundary sets PaymentStreamLinkMinimumBoundary, Tag 42676.
func (m NoStreams) SetPaymentStreamLinkMinimumBoundary(value decimal.Decimal, scale int32) {
	m.Set(field.NewPaymentStreamLinkMinimumBoundary(value, scale))
}

// SetPaymentStreamLinkNumberOfDataSeries sets PaymentStreamLinkNumberOfDataSeries, Tag 42677.
func (m NoStreams) SetPaymentStreamLinkNumberOfDataSeries(v int) {
	m.Set(field.NewPaymentStreamLinkNumberOfDataSeries(v))
}

// SetPaymentStreamVarianceUnadjustedCap sets PaymentStreamVarianceUnadjustedCap, Tag 42678.
func (m NoStreams) SetPaymentStreamVarianceUnadjustedCap(value decimal.Decimal, scale int32) {
	m.Set(field.NewPaymentStreamVarianceUnadjustedCap(value, scale))
}

// SetPaymentStreamRealizedVarianceMethod sets PaymentStreamRealizedVarianceMethod, Tag 42679.
func (m NoStreams) SetPaymentStreamRealizedVarianceMethod(v enum.PaymentStreamRealizedVarianceMethod) {
	m.Set(field.NewPaymentStreamRealizedVarianceMethod(v))
}

// SetPaymentStreamDaysAdjustmentIndicator sets PaymentStreamDaysAdjustmentIndicator, Tag 42680.
func (m NoStreams) SetPaymentStreamDaysAdjustmentIndicator(v bool) {
	m.Set(field.NewPaymentStreamDaysAdjustmentIndicator(v))
}

// SetPaymentStreamNearestExchangeContractRefID sets PaymentStreamNearestExchangeContractRefID, Tag 42681.
func (m NoStreams) SetPaymentStreamNearestExchangeContractRefID(v string) {
	m.Set(field.NewPaymentStreamNearestExchangeContractRefID(v))
}

// SetPaymentStreamVegaNotionalAmount sets PaymentStreamVegaNotionalAmount, Tag 42682.
func (m NoStreams) SetPaymentStreamVegaNotionalAmount(value decimal.Decimal, scale int32) {
	m.Set(field.NewPaymentStreamVegaNotionalAmount(value, scale))
}

// SetPaymentStreamRateIndexID sets PaymentStreamRateIndexID, Tag 43090.
func (m NoStreams) SetPaymentStreamRateIndexID(v string) {
	m.Set(field.NewPaymentStreamRateIndexID(v))
}

// SetPaymentStreamRateIndexIDSource sets PaymentStreamRateIndexIDSource, Tag 43091.
func (m NoStreams) SetPaymentStreamRateIndexIDSource(v string) {
	m.Set(field.NewPaymentStreamRateIndexIDSource(v))
}

// SetPaymentStreamNonDeliverableRefCurrency sets PaymentStreamNonDeliverableRefCurrency, Tag 40817.
func (m NoStreams) SetPaymentStreamNonDeliverableRefCurrency(v string) {
	m.Set(field.NewPaymentStreamNonDeliverableRefCurrency(v))
}

// SetPaymentStreamNonDeliverableFixingDatesBusinessDayConvention sets PaymentStreamNonDeliverableFixingDatesBusinessDayConvention, Tag 40818.
func (m NoStreams) SetPaymentStreamNonDeliverableFixingDatesBusinessDayConvention(v int) {
	m.Set(field.NewPaymentStreamNonDeliverableFixingDatesBusinessDayConvention(v))
}

// SetNoPaymentStreamNonDeliverableFixingDatesBusinessCenters sets NoPaymentStreamNonDeliverableFixingDatesBusinessCenters, Tag 40946.
func (m NoStreams) SetNoPaymentStreamNonDeliverableFixingDatesBusinessCenters(f NoPaymentStreamNonDeliverableFixingDatesBusinessCentersRepeatingGroup) {
	m.SetGroup(f)
}

// SetPaymentStreamNonDeliverableFixingDatesRelativeTo sets PaymentStreamNonDeliverableFixingDatesRelativeTo, Tag 40820.
func (m NoStreams) SetPaymentStreamNonDeliverableFixingDatesRelativeTo(v int) {
	m.Set(field.NewPaymentStreamNonDeliverableFixingDatesRelativeTo(v))
}

// SetPaymentStreamNonDeliverableFixingDatesOffsetPeriod sets PaymentStreamNonDeliverableFixingDatesOffsetPeriod, Tag 40821.
func (m NoStreams) SetPaymentStreamNonDeliverableFixingDatesOffsetPeriod(v int) {
	m.Set(field.NewPaymentStreamNonDeliverableFixingDatesOffsetPeriod(v))
}

// SetPaymentStreamNonDeliverableFixingDatesOffsetUnit sets PaymentStreamNonDeliverableFixingDatesOffsetUnit, Tag 40822.
func (m NoStreams) SetPaymentStreamNonDeliverableFixingDatesOffsetUnit(v string) {
	m.Set(field.NewPaymentStreamNonDeliverableFixingDatesOffsetUnit(v))
}

// SetPaymentStreamNonDeliverableFixingDatesOffsetDayType sets PaymentStreamNonDeliverableFixingDatesOffsetDayType, Tag 40823.
func (m NoStreams) SetPaymentStreamNonDeliverableFixingDatesOffsetDayType(v int) {
	m.Set(field.NewPaymentStreamNonDeliverableFixingDatesOffsetDayType(v))
}

// SetPaymentStreamNonDeliverableSettlRateSource sets PaymentStreamNonDeliverableSettlRateSource, Tag 40371.
func (m NoStreams) SetPaymentStreamNonDeliverableSettlRateSource(v int) {
	m.Set(field.NewPaymentStreamNonDeliverableSettlRateSource(v))
}

// SetPaymentStreamNonDeliverableSettlReferencePage sets PaymentStreamNonDeliverableSettlReferencePage, Tag 40372.
func (m NoStreams) SetPaymentStreamNonDeliverableSettlReferencePage(v string) {
	m.Set(field.NewPaymentStreamNonDeliverableSettlReferencePage(v))
}

// SetNoNonDeliverableFixingDates sets NoNonDeliverableFixingDates, Tag 40825.
func (m NoStreams) SetNoNonDeliverableFixingDates(f NoNonDeliverableFixingDatesRepeatingGroup) {
	m.SetGroup(f)
}

// SetNoSettlRateFallbacks sets NoSettlRateFallbacks, Tag 40085.
func (m NoStreams) SetNoSettlRateFallbacks(f NoSettlRateFallbacksRepeatingGroup) {
	m.SetGroup(f)
}

// SetPaymentStreamFlatRateIndicator sets PaymentStreamFlatRateIndicator, Tag 41180.
func (m NoStreams) SetPaymentStreamFlatRateIndicator(v bool) {
	m.Set(field.NewPaymentStreamFlatRateIndicator(v))
}

// SetPaymentStreamFlatRateAmount sets PaymentStreamFlatRateAmount, Tag 41181.
func (m NoStreams) SetPaymentStreamFlatRateAmount(value decimal.Decimal, scale int32) {
	m.Set(field.NewPaymentStreamFlatRateAmount(value, scale))
}

// SetPaymentStreamFlatRateCurrency sets PaymentStreamFlatRateCurrency, Tag 41182.
func (m NoStreams) SetPaymentStreamFlatRateCurrency(v string) {
	m.Set(field.NewPaymentStreamFlatRateCurrency(v))
}

// SetPaymentStreamMaximumPaymentAmount sets PaymentStreamMaximumPaymentAmount, Tag 41183.
func (m NoStreams) SetPaymentStreamMaximumPaymentAmount(value decimal.Decimal, scale int32) {
	m.Set(field.NewPaymentStreamMaximumPaymentAmount(value, scale))
}

// SetPaymentStreamMaximumPaymentCurrency sets PaymentStreamMaximumPaymentCurrency, Tag 41184.
func (m NoStreams) SetPaymentStreamMaximumPaymentCurrency(v string) {
	m.Set(field.NewPaymentStreamMaximumPaymentCurrency(v))
}

// SetPaymentStreamMaximumTransactionAmount sets PaymentStreamMaximumTransactionAmount, Tag 41185.
func (m NoStreams) SetPaymentStreamMaximumTransactionAmount(value decimal.Decimal, scale int32) {
	m.Set(field.NewPaymentStreamMaximumTransactionAmount(value, scale))
}

// SetPaymentStreamMaximumTransactionCurrency sets PaymentStreamMaximumTransactionCurrency, Tag 41186.
func (m NoStreams) SetPaymentStreamMaximumTransactionCurrency(v string) {
	m.Set(field.NewPaymentStreamMaximumTransactionCurrency(v))
}

// SetPaymentStreamCashSettlIndicator sets PaymentStreamCashSettlIndicator, Tag 42600.
func (m NoStreams) SetPaymentStreamCashSettlIndicator(v bool) {
	m.Set(field.NewPaymentStreamCashSettlIndicator(v))
}

// SetPaymentStreamCompoundingXIDRef sets PaymentStreamCompoundingXIDRef, Tag 42601.
func (m NoStreams) SetPaymentStreamCompoundingXIDRef(v string) {
	m.Set(field.NewPaymentStreamCompoundingXIDRef(v))
}

// SetPaymentStreamCompoundingSpread sets PaymentStreamCompoundingSpread, Tag 42602.
func (m NoStreams) SetPaymentStreamCompoundingSpread(value decimal.Decimal, scale int32) {
	m.Set(field.NewPaymentStreamCompoundingSpread(value, scale))
}

// SetPaymentStreamInterpolationMethod sets PaymentStreamInterpolationMethod, Tag 42603.
func (m NoStreams) SetPaymentStreamInterpolationMethod(v int) {
	m.Set(field.NewPaymentStreamInterpolationMethod(v))
}

// SetPaymentStreamInterpolationPeriod sets PaymentStreamInterpolationPeriod, Tag 42604.
func (m NoStreams) SetPaymentStreamInterpolationPeriod(v enum.PaymentStreamInterpolationPeriod) {
	m.Set(field.NewPaymentStreamInterpolationPeriod(v))
}

// SetPaymentStreamCompoundingFixedRate sets PaymentStreamCompoundingFixedRate, Tag 42605.
func (m NoStreams) SetPaymentStreamCompoundingFixedRate(value decimal.Decimal, scale int32) {
	m.Set(field.NewPaymentStreamCompoundingFixedRate(value, scale))
}

// SetPaymentStreamCompoundingRateIndex sets PaymentStreamCompoundingRateIndex, Tag 42628.
func (m NoStreams) SetPaymentStreamCompoundingRateIndex(v string) {
	m.Set(field.NewPaymentStreamCompoundingRateIndex(v))
}

// SetPaymentStreamCompoundingRateIndexCurvePeriod sets PaymentStreamCompoundingRateIndexCurvePeriod, Tag 42629.
func (m NoStreams) SetPaymentStreamCompoundingRateIndexCurvePeriod(v int) {
	m.Set(field.NewPaymentStreamCompoundingRateIndexCurvePeriod(v))
}

// SetPaymentStreamCompoundingRateIndexCurveUnit sets PaymentStreamCompoundingRateIndexCurveUnit, Tag 42630.
func (m NoStreams) SetPaymentStreamCompoundingRateIndexCurveUnit(v string) {
	m.Set(field.NewPaymentStreamCompoundingRateIndexCurveUnit(v))
}

// SetPaymentStreamCompoundingRateMultiplier sets PaymentStreamCompoundingRateMultiplier, Tag 42631.
func (m NoStreams) SetPaymentStreamCompoundingRateMultiplier(value decimal.Decimal, scale int32) {
	m.Set(field.NewPaymentStreamCompoundingRateMultiplier(value, scale))
}

// SetPaymentStreamCompoundingRateSpread sets PaymentStreamCompoundingRateSpread, Tag 42632.
func (m NoStreams) SetPaymentStreamCompoundingRateSpread(value decimal.Decimal, scale int32) {
	m.Set(field.NewPaymentStreamCompoundingRateSpread(value, scale))
}

// SetPaymentStreamCompoundingRateSpreadPositionType sets PaymentStreamCompoundingRateSpreadPositionType, Tag 42633.
func (m NoStreams) SetPaymentStreamCompoundingRateSpreadPositionType(v int) {
	m.Set(field.NewPaymentStreamCompoundingRateSpreadPositionType(v))
}

// SetPaymentStreamCompoundingRateTreatment sets PaymentStreamCompoundingRateTreatment, Tag 42634.
func (m NoStreams) SetPaymentStreamCompoundingRateTreatment(v int) {
	m.Set(field.NewPaymentStreamCompoundingRateTreatment(v))
}

// SetPaymentStreamCompoundingCapRate sets PaymentStreamCompoundingCapRate, Tag 42635.
func (m NoStreams) SetPaymentStreamCompoundingCapRate(value decimal.Decimal, scale int32) {
	m.Set(field.NewPaymentStreamCompoundingCapRate(value, scale))
}

// SetPaymentStreamCompoundingCapRateBuySide sets PaymentStreamCompoundingCapRateBuySide, Tag 42636.
func (m NoStreams) SetPaymentStreamCompoundingCapRateBuySide(v int) {
	m.Set(field.NewPaymentStreamCompoundingCapRateBuySide(v))
}

// SetPaymentStreamCompoundingCapRateSellSide sets PaymentStreamCompoundingCapRateSellSide, Tag 42637.
func (m NoStreams) SetPaymentStreamCompoundingCapRateSellSide(v int) {
	m.Set(field.NewPaymentStreamCompoundingCapRateSellSide(v))
}

// SetPaymentStreamCompoundingFloorRate sets PaymentStreamCompoundingFloorRate, Tag 42638.
func (m NoStreams) SetPaymentStreamCompoundingFloorRate(value decimal.Decimal, scale int32) {
	m.Set(field.NewPaymentStreamCompoundingFloorRate(value, scale))
}

// SetPaymentStreamCompoundingFloorRateBuySide sets PaymentStreamCompoundingFloorRateBuySide, Tag 42639.
func (m NoStreams) SetPaymentStreamCompoundingFloorRateBuySide(v int) {
	m.Set(field.NewPaymentStreamCompoundingFloorRateBuySide(v))
}

// SetPaymentStreamCompoundingFloorRateSellSide sets PaymentStreamCompoundingFloorRateSellSide, Tag 42640.
func (m NoStreams) SetPaymentStreamCompoundingFloorRateSellSide(v int) {
	m.Set(field.NewPaymentStreamCompoundingFloorRateSellSide(v))
}

// SetPaymentStreamCompoundingInitialRate sets PaymentStreamCompoundingInitialRate, Tag 42641.
func (m NoStreams) SetPaymentStreamCompoundingInitialRate(value decimal.Decimal, scale int32) {
	m.Set(field.NewPaymentStreamCompoundingInitialRate(value, scale))
}

// SetPaymentStreamCompoundingFinalRateRoundingDirection sets PaymentStreamCompoundingFinalRateRoundingDirection, Tag 42642.
func (m NoStreams) SetPaymentStreamCompoundingFinalRateRoundingDirection(v string) {
	m.Set(field.NewPaymentStreamCompoundingFinalRateRoundingDirection(v))
}

// SetPaymentStreamCompoundingFinalRatePrecision sets PaymentStreamCompoundingFinalRatePrecision, Tag 42643.
func (m NoStreams) SetPaymentStreamCompoundingFinalRatePrecision(v int) {
	m.Set(field.NewPaymentStreamCompoundingFinalRatePrecision(v))
}

// SetPaymentStreamCompoundingAveragingMethod sets PaymentStreamCompoundingAveragingMethod, Tag 42644.
func (m NoStreams) SetPaymentStreamCompoundingAveragingMethod(v int) {
	m.Set(field.NewPaymentStreamCompoundingAveragingMethod(v))
}

// SetPaymentStreamCompoundingNegativeRateTreatment sets PaymentStreamCompoundingNegativeRateTreatment, Tag 42645.
func (m NoStreams) SetPaymentStreamCompoundingNegativeRateTreatment(v int) {
	m.Set(field.NewPaymentStreamCompoundingNegativeRateTreatment(v))
}

// SetPaymentStreamCompoundingDatesBusinessDayConvention sets PaymentStreamCompoundingDatesBusinessDayConvention, Tag 42609.
func (m NoStreams) SetPaymentStreamCompoundingDatesBusinessDayConvention(v int) {
	m.Set(field.NewPaymentStreamCompoundingDatesBusinessDayConvention(v))
}

// SetNoPaymentStreamCompoundingDatesBusinessCenters sets NoPaymentStreamCompoundingDatesBusinessCenters, Tag 42620.
func (m NoStreams) SetNoPaymentStreamCompoundingDatesBusinessCenters(f NoPaymentStreamCompoundingDatesBusinessCentersRepeatingGroup) {
	m.SetGroup(f)
}

// SetNoPaymentStreamCompoundingDates sets NoPaymentStreamCompoundingDates, Tag 42606.
func (m NoStreams) SetNoPaymentStreamCompoundingDates(f NoPaymentStreamCompoundingDatesRepeatingGroup) {
	m.SetGroup(f)
}

// SetPaymentStreamCompoundingDatesRelativeTo sets PaymentStreamCompoundingDatesRelativeTo, Tag 42610.
func (m NoStreams) SetPaymentStreamCompoundingDatesRelativeTo(v int) {
	m.Set(field.NewPaymentStreamCompoundingDatesRelativeTo(v))
}

// SetPaymentStreamCompoundingDatesOffsetPeriod sets PaymentStreamCompoundingDatesOffsetPeriod, Tag 42611.
func (m NoStreams) SetPaymentStreamCompoundingDatesOffsetPeriod(v int) {
	m.Set(field.NewPaymentStreamCompoundingDatesOffsetPeriod(v))
}

// SetPaymentStreamCompoundingDatesOffsetUnit sets PaymentStreamCompoundingDatesOffsetUnit, Tag 42612.
func (m NoStreams) SetPaymentStreamCompoundingDatesOffsetUnit(v string) {
	m.Set(field.NewPaymentStreamCompoundingDatesOffsetUnit(v))
}

// SetPaymentStreamCompoundingDatesOffsetDayType sets PaymentStreamCompoundingDatesOffsetDayType, Tag 42613.
func (m NoStreams) SetPaymentStreamCompoundingDatesOffsetDayType(v int) {
	m.Set(field.NewPaymentStreamCompoundingDatesOffsetDayType(v))
}

// SetPaymentStreamCompoundingPeriodSkip sets PaymentStreamCompoundingPeriodSkip, Tag 42614.
func (m NoStreams) SetPaymentStreamCompoundingPeriodSkip(v int) {
	m.Set(field.NewPaymentStreamCompoundingPeriodSkip(v))
}

// SetPaymentStreamCompoundingStartDateUnadjusted sets PaymentStreamCompoundingStartDateUnadjusted, Tag 42646.
func (m NoStreams) SetPaymentStreamCompoundingStartDateUnadjusted(v string) {
	m.Set(field.NewPaymentStreamCompoundingStartDateUnadjusted(v))
}

// SetPaymentStreamCompoundingStartDateRelativeTo sets PaymentStreamCompoundingStartDateRelativeTo, Tag 42647.
func (m NoStreams) SetPaymentStreamCompoundingStartDateRelativeTo(v int) {
	m.Set(field.NewPaymentStreamCompoundingStartDateRelativeTo(v))
}

// SetPaymentStreamCompoundingStartDateOffsetPeriod sets PaymentStreamCompoundingStartDateOffsetPeriod, Tag 42648.
func (m NoStreams) SetPaymentStreamCompoundingStartDateOffsetPeriod(v int) {
	m.Set(field.NewPaymentStreamCompoundingStartDateOffsetPeriod(v))
}

// SetPaymentStreamCompoundingStartDateOffsetUnit sets PaymentStreamCompoundingStartDateOffsetUnit, Tag 42649.
func (m NoStreams) SetPaymentStreamCompoundingStartDateOffsetUnit(v string) {
	m.Set(field.NewPaymentStreamCompoundingStartDateOffsetUnit(v))
}

// SetPaymentStreamCompoundingStartDateOffsetDayType sets PaymentStreamCompoundingStartDateOffsetDayType, Tag 42650.
func (m NoStreams) SetPaymentStreamCompoundingStartDateOffsetDayType(v int) {
	m.Set(field.NewPaymentStreamCompoundingStartDateOffsetDayType(v))
}

// SetPaymentStreamCompoundingStartDateAdjusted sets PaymentStreamCompoundingStartDateAdjusted, Tag 42651.
func (m NoStreams) SetPaymentStreamCompoundingStartDateAdjusted(v string) {
	m.Set(field.NewPaymentStreamCompoundingStartDateAdjusted(v))
}

// SetPaymentStreamCompoundingEndDateUnadjusted sets PaymentStreamCompoundingEndDateUnadjusted, Tag 42622.
func (m NoStreams) SetPaymentStreamCompoundingEndDateUnadjusted(v string) {
	m.Set(field.NewPaymentStreamCompoundingEndDateUnadjusted(v))
}

// SetPaymentStreamCompoundingEndDateRelativeTo sets PaymentStreamCompoundingEndDateRelativeTo, Tag 42623.
func (m NoStreams) SetPaymentStreamCompoundingEndDateRelativeTo(v int) {
	m.Set(field.NewPaymentStreamCompoundingEndDateRelativeTo(v))
}

// SetPaymentStreamCompoundingEndDateOffsetPeriod sets PaymentStreamCompoundingEndDateOffsetPeriod, Tag 42624.
func (m NoStreams) SetPaymentStreamCompoundingEndDateOffsetPeriod(v int) {
	m.Set(field.NewPaymentStreamCompoundingEndDateOffsetPeriod(v))
}

// SetPaymentStreamCompoundingEndDateOffsetUnit sets PaymentStreamCompoundingEndDateOffsetUnit, Tag 42625.
func (m NoStreams) SetPaymentStreamCompoundingEndDateOffsetUnit(v string) {
	m.Set(field.NewPaymentStreamCompoundingEndDateOffsetUnit(v))
}

// SetPaymentStreamCompoundingEndDateOffsetDayType sets PaymentStreamCompoundingEndDateOffsetDayType, Tag 42626.
func (m NoStreams) SetPaymentStreamCompoundingEndDateOffsetDayType(v int) {
	m.Set(field.NewPaymentStreamCompoundingEndDateOffsetDayType(v))
}

// SetPaymentStreamCompoundingEndDateAdjusted sets PaymentStreamCompoundingEndDateAdjusted, Tag 42627.
func (m NoStreams) SetPaymentStreamCompoundingEndDateAdjusted(v string) {
	m.Set(field.NewPaymentStreamCompoundingEndDateAdjusted(v))
}

// SetPaymentStreamCompoundingFrequencyPeriod sets PaymentStreamCompoundingFrequencyPeriod, Tag 42615.
func (m NoStreams) SetPaymentStreamCompoundingFrequencyPeriod(v int) {
	m.Set(field.NewPaymentStreamCompoundingFrequencyPeriod(v))
}

// SetPaymentStreamCompoundingFrequencyUnit sets PaymentStreamCompoundingFrequencyUnit, Tag 42616.
func (m NoStreams) SetPaymentStreamCompoundingFrequencyUnit(v string) {
	m.Set(field.NewPaymentStreamCompoundingFrequencyUnit(v))
}

// SetPaymentStreamCompoundingRollConvention sets PaymentStreamCompoundingRollConvention, Tag 42617.
func (m NoStreams) SetPaymentStreamCompoundingRollConvention(v string) {
	m.Set(field.NewPaymentStreamCompoundingRollConvention(v))
}

// SetPaymentStreamBoundsFirstDateUnadjusted sets PaymentStreamBoundsFirstDateUnadjusted, Tag 42618.
func (m NoStreams) SetPaymentStreamBoundsFirstDateUnadjusted(v string) {
	m.Set(field.NewPaymentStreamBoundsFirstDateUnadjusted(v))
}

// SetPaymentStreamBoundsLastDateUnadjusted sets PaymentStreamBoundsLastDateUnadjusted, Tag 42619.
func (m NoStreams) SetPaymentStreamBoundsLastDateUnadjusted(v string) {
	m.Set(field.NewPaymentStreamBoundsLastDateUnadjusted(v))
}

// SetPaymentStreamOtherDayCount sets PaymentStreamOtherDayCount, Tag 43106.
func (m NoStreams) SetPaymentStreamOtherDayCount(v string) {
	m.Set(field.NewPaymentStreamOtherDayCount(v))
}

// SetNoPaymentSchedules sets NoPaymentSchedules, Tag 40828.
func (m NoStreams) SetNoPaymentSchedules(f NoPaymentSchedulesRepeatingGroup) {
	m.SetGroup(f)
}

// SetNoPaymentStubs sets NoPaymentStubs, Tag 40872.
func (m NoStreams) SetNoPaymentStubs(f NoPaymentStubsRepeatingGroup) {
	m.SetGroup(f)
}

// SetStreamText sets StreamText, Tag 40056.
func (m NoStreams) SetStreamText(v string) {
	m.Set(field.NewStreamText(v))
}

// SetEncodedStreamTextLen sets EncodedStreamTextLen, Tag 40982.
func (m NoStreams) SetEncodedStreamTextLen(v int) {
	m.Set(field.NewEncodedStreamTextLen(v))
}

// SetEncodedStreamText sets EncodedStreamText, Tag 40983.
func (m NoStreams) SetEncodedStreamText(v string) {
	m.Set(field.NewEncodedStreamText(v))
}

// SetStreamXID sets StreamXID, Tag 41303.
func (m NoStreams) SetStreamXID(v string) {
	m.Set(field.NewStreamXID(v))
}

// SetStreamNotionalXIDRef sets StreamNotionalXIDRef, Tag 41305.
func (m NoStreams) SetStreamNotionalXIDRef(v string) {
	m.Set(field.NewStreamNotionalXIDRef(v))
}

// SetStreamNotionalFrequencyPeriod sets StreamNotionalFrequencyPeriod, Tag 41306.
func (m NoStreams) SetStreamNotionalFrequencyPeriod(v int) {
	m.Set(field.NewStreamNotionalFrequencyPeriod(v))
}

// SetStreamNotionalFrequencyUnit sets StreamNotionalFrequencyUnit, Tag 41307.
func (m NoStreams) SetStreamNotionalFrequencyUnit(v string) {
	m.Set(field.NewStreamNotionalFrequencyUnit(v))
}

// SetStreamNotionalCommodityFrequency sets StreamNotionalCommodityFrequency, Tag 41308.
func (m NoStreams) SetStreamNotionalCommodityFrequency(v enum.StreamNotionalCommodityFrequency) {
	m.Set(field.NewStreamNotionalCommodityFrequency(v))
}

// SetStreamNotionalUnitOfMeasure sets StreamNotionalUnitOfMeasure, Tag 41309.
func (m NoStreams) SetStreamNotionalUnitOfMeasure(v string) {
	m.Set(field.NewStreamNotionalUnitOfMeasure(v))
}

// SetStreamTotalNotional sets StreamTotalNotional, Tag 41310.
func (m NoStreams) SetStreamTotalNotional(value decimal.Decimal, scale int32) {
	m.Set(field.NewStreamTotalNotional(value, scale))
}

// SetStreamTotalNotionalUnitOfMeasure sets StreamTotalNotionalUnitOfMeasure, Tag 41311.
func (m NoStreams) SetStreamTotalNotionalUnitOfMeasure(v string) {
	m.Set(field.NewStreamTotalNotionalUnitOfMeasure(v))
}

// SetStreamCommodityBase sets StreamCommodityBase, Tag 41251.
func (m NoStreams) SetStreamCommodityBase(v string) {
	m.Set(field.NewStreamCommodityBase(v))
}

// SetStreamCommodityType sets StreamCommodityType, Tag 41252.
func (m NoStreams) SetStreamCommodityType(v string) {
	m.Set(field.NewStreamCommodityType(v))
}

// SetStreamCommoditySecurityID sets StreamCommoditySecurityID, Tag 41253.
func (m NoStreams) SetStreamCommoditySecurityID(v string) {
	m.Set(field.NewStreamCommoditySecurityID(v))
}

// SetStreamCommoditySecurityIDSource sets StreamCommoditySecurityIDSource, Tag 41254.
func (m NoStreams) SetStreamCommoditySecurityIDSource(v string) {
	m.Set(field.NewStreamCommoditySecurityIDSource(v))
}

// SetNoStreamCommodityAltIDs sets NoStreamCommodityAltIDs, Tag 41277.
func (m NoStreams) SetNoStreamCommodityAltIDs(f NoStreamCommodityAltIDsRepeatingGroup) {
	m.SetGroup(f)
}

// SetStreamCommodityDesc sets StreamCommodityDesc, Tag 41255.
func (m NoStreams) SetStreamCommodityDesc(v string) {
	m.Set(field.NewStreamCommodityDesc(v))
}

// SetEncodedStreamCommodityDescLen sets EncodedStreamCommodityDescLen, Tag 41256.
func (m NoStreams) SetEncodedStreamCommodityDescLen(v int) {
	m.Set(field.NewEncodedStreamCommodityDescLen(v))
}

// SetEncodedStreamCommodityDesc sets EncodedStreamCommodityDesc, Tag 41257.
func (m NoStreams) SetEncodedStreamCommodityDesc(v string) {
	m.Set(field.NewEncodedStreamCommodityDesc(v))
}

// SetNoStreamAssetAttributes sets NoStreamAssetAttributes, Tag 41237.
func (m NoStreams) SetNoStreamAssetAttributes(f NoStreamAssetAttributesRepeatingGroup) {
	m.SetGroup(f)
}

// SetStreamCommodityUnitOfMeasure sets StreamCommodityUnitOfMeasure, Tag 41258.
func (m NoStreams) SetStreamCommodityUnitOfMeasure(v string) {
	m.Set(field.NewStreamCommodityUnitOfMeasure(v))
}

// SetStreamCommodityCurrency sets StreamCommodityCurrency, Tag 41259.
func (m NoStreams) SetStreamCommodityCurrency(v string) {
	m.Set(field.NewStreamCommodityCurrency(v))
}

// SetStreamCommodityExchange sets StreamCommodityExchange, Tag 41260.
func (m NoStreams) SetStreamCommodityExchange(v string) {
	m.Set(field.NewStreamCommodityExchange(v))
}

// SetStreamCommodityRateSource sets StreamCommodityRateSource, Tag 41261.
func (m NoStreams) SetStreamCommodityRateSource(v int) {
	m.Set(field.NewStreamCommodityRateSource(v))
}

// SetStreamCommodityRateReferencePage sets StreamCommodityRateReferencePage, Tag 41262.
func (m NoStreams) SetStreamCommodityRateReferencePage(v string) {
	m.Set(field.NewStreamCommodityRateReferencePage(v))
}

// SetStreamCommodityRateReferencePageHeading sets StreamCommodityRateReferencePageHeading, Tag 41263.
func (m NoStreams) SetStreamCommodityRateReferencePageHeading(v string) {
	m.Set(field.NewStreamCommodityRateReferencePageHeading(v))
}

// SetStreamDataProvider sets StreamDataProvider, Tag 41264.
func (m NoStreams) SetStreamDataProvider(v string) {
	m.Set(field.NewStreamDataProvider(v))
}

// SetNoStreamCommodityDataSources sets NoStreamCommodityDataSources, Tag 41280.
func (m NoStreams) SetNoStreamCommodityDataSources(f NoStreamCommodityDataSourcesRepeatingGroup) {
	m.SetGroup(f)
}

// SetStreamCommodityPricingType sets StreamCommodityPricingType, Tag 41265.
func (m NoStreams) SetStreamCommodityPricingType(v string) {
	m.Set(field.NewStreamCommodityPricingType(v))
}

// SetStreamCommodityNearbySettlDayPeriod sets StreamCommodityNearbySettlDayPeriod, Tag 41266.
func (m NoStreams) SetStreamCommodityNearbySettlDayPeriod(v int) {
	m.Set(field.NewStreamCommodityNearbySettlDayPeriod(v))
}

// SetStreamCommodityNearbySettlDayUnit sets StreamCommodityNearbySettlDayUnit, Tag 41267.
func (m NoStreams) SetStreamCommodityNearbySettlDayUnit(v enum.StreamCommodityNearbySettlDayUnit) {
	m.Set(field.NewStreamCommodityNearbySettlDayUnit(v))
}

// SetStreamCommoditySettlDateUnadjusted sets StreamCommoditySettlDateUnadjusted, Tag 41268.
func (m NoStreams) SetStreamCommoditySettlDateUnadjusted(v string) {
	m.Set(field.NewStreamCommoditySettlDateUnadjusted(v))
}

// SetStreamCommoditySettlDateBusinessDayConvention sets StreamCommoditySettlDateBusinessDayConvention, Tag 41269.
func (m NoStreams) SetStreamCommoditySettlDateBusinessDayConvention(v int) {
	m.Set(field.NewStreamCommoditySettlDateBusinessDayConvention(v))
}

// SetNoStreamCommoditySettlBusinessCenters sets NoStreamCommoditySettlBusinessCenters, Tag 41249.
func (m NoStreams) SetNoStreamCommoditySettlBusinessCenters(f NoStreamCommoditySettlBusinessCentersRepeatingGroup) {
	m.SetGroup(f)
}

// SetStreamCommoditySettlDateAdjusted sets StreamCommoditySettlDateAdjusted, Tag 41270.
func (m NoStreams) SetStreamCommoditySettlDateAdjusted(v string) {
	m.Set(field.NewStreamCommoditySettlDateAdjusted(v))
}

// SetStreamCommoditySettlMonth sets StreamCommoditySettlMonth, Tag 41271.
func (m NoStreams) SetStreamCommoditySettlMonth(v int) {
	m.Set(field.NewStreamCommoditySettlMonth(v))
}

// SetStreamCommoditySettlDateRollPeriod sets StreamCommoditySettlDateRollPeriod, Tag 41272.
func (m NoStreams) SetStreamCommoditySettlDateRollPeriod(v int) {
	m.Set(field.NewStreamCommoditySettlDateRollPeriod(v))
}

// SetStreamCommoditySettlDateRollUnit sets StreamCommoditySettlDateRollUnit, Tag 41273.
func (m NoStreams) SetStreamCommoditySettlDateRollUnit(v enum.StreamCommoditySettlDateRollUnit) {
	m.Set(field.NewStreamCommoditySettlDateRollUnit(v))
}

// SetStreamCommoditySettlDayType sets StreamCommoditySettlDayType, Tag 41274.
func (m NoStreams) SetStreamCommoditySettlDayType(v int) {
	m.Set(field.NewStreamCommoditySettlDayType(v))
}

// SetNoStreamCommoditySettlPeriods sets NoStreamCommoditySettlPeriods, Tag 41289.
func (m NoStreams) SetNoStreamCommoditySettlPeriods(f NoStreamCommoditySettlPeriodsRepeatingGroup) {
	m.SetGroup(f)
}

// SetStreamCommodityXID sets StreamCommodityXID, Tag 41275.
func (m NoStreams) SetStreamCommodityXID(v string) {
	m.Set(field.NewStreamCommodityXID(v))
}

// SetStreamCommodityXIDRef sets StreamCommodityXIDRef, Tag 41276.
func (m NoStreams) SetStreamCommodityXIDRef(v string) {
	m.Set(field.NewStreamCommodityXIDRef(v))
}

// SetStreamCommodityDeliveryPricingRegion sets StreamCommodityDeliveryPricingRegion, Tag 42587.
func (m NoStreams) SetStreamCommodityDeliveryPricingRegion(v string) {
	m.Set(field.NewStreamCommodityDeliveryPricingRegion(v))
}

// SetDeliveryStreamType sets DeliveryStreamType, Tag 41058.
func (m NoStreams) SetDeliveryStreamType(v enum.DeliveryStreamType) {
	m.Set(field.NewDeliveryStreamType(v))
}

// SetNoDeliveryStreamCommoditySources sets NoDeliveryStreamCommoditySources, Tag 41085.
func (m NoStreams) SetNoDeliveryStreamCommoditySources(f NoDeliveryStreamCommoditySourcesRepeatingGroup) {
	m.SetGroup(f)
}

// SetDeliveryStreamPipeline sets DeliveryStreamPipeline, Tag 41059.
func (m NoStreams) SetDeliveryStreamPipeline(v string) {
	m.Set(field.NewDeliveryStreamPipeline(v))
}

// SetDeliveryStreamEntryPoint sets DeliveryStreamEntryPoint, Tag 41060.
func (m NoStreams) SetDeliveryStreamEntryPoint(v string) {
	m.Set(field.NewDeliveryStreamEntryPoint(v))
}

// SetDeliveryStreamWithdrawalPoint sets DeliveryStreamWithdrawalPoint, Tag 41061.
func (m NoStreams) SetDeliveryStreamWithdrawalPoint(v string) {
	m.Set(field.NewDeliveryStreamWithdrawalPoint(v))
}

// SetDeliveryStreamDeliveryPoint sets DeliveryStreamDeliveryPoint, Tag 41062.
func (m NoStreams) SetDeliveryStreamDeliveryPoint(v string) {
	m.Set(field.NewDeliveryStreamDeliveryPoint(v))
}

// SetDeliveryStreamDeliveryRestriction sets DeliveryStreamDeliveryRestriction, Tag 41063.
func (m NoStreams) SetDeliveryStreamDeliveryRestriction(v enum.DeliveryStreamDeliveryRestriction) {
	m.Set(field.NewDeliveryStreamDeliveryRestriction(v))
}

// SetDeliveryStreamDeliveryContingency sets DeliveryStreamDeliveryContingency, Tag 41064.
func (m NoStreams) SetDeliveryStreamDeliveryContingency(v string) {
	m.Set(field.NewDeliveryStreamDeliveryContingency(v))
}

// SetDeliveryStreamDeliveryContingentPartySide sets DeliveryStreamDeliveryContingentPartySide, Tag 41065.
func (m NoStreams) SetDeliveryStreamDeliveryContingentPartySide(v int) {
	m.Set(field.NewDeliveryStreamDeliveryContingentPartySide(v))
}

// SetDeliveryStreamDeliverAtSourceIndicator sets DeliveryStreamDeliverAtSourceIndicator, Tag 41066.
func (m NoStreams) SetDeliveryStreamDeliverAtSourceIndicator(v bool) {
	m.Set(field.NewDeliveryStreamDeliverAtSourceIndicator(v))
}

// SetDeliveryStreamRiskApportionment sets DeliveryStreamRiskApportionment, Tag 41067.
func (m NoStreams) SetDeliveryStreamRiskApportionment(v string) {
	m.Set(field.NewDeliveryStreamRiskApportionment(v))
}

// SetDeliveryStreamRiskApportionmentSource sets DeliveryStreamRiskApportionmentSource, Tag 41218.
func (m NoStreams) SetDeliveryStreamRiskApportionmentSource(v string) {
	m.Set(field.NewDeliveryStreamRiskApportionmentSource(v))
}

// SetNoDeliveryStreamCycles sets NoDeliveryStreamCycles, Tag 41081.
func (m NoStreams) SetNoDeliveryStreamCycles(f NoDeliveryStreamCyclesRepeatingGroup) {
	m.SetGroup(f)
}

// SetDeliveryStreamTitleTransferLocation sets DeliveryStreamTitleTransferLocation, Tag 41068.
func (m NoStreams) SetDeliveryStreamTitleTransferLocation(v string) {
	m.Set(field.NewDeliveryStreamTitleTransferLocation(v))
}

// SetDeliveryStreamTitleTransferCondition sets DeliveryStreamTitleTransferCondition, Tag 41069.
func (m NoStreams) SetDeliveryStreamTitleTransferCondition(v enum.DeliveryStreamTitleTransferCondition) {
	m.Set(field.NewDeliveryStreamTitleTransferCondition(v))
}

// SetDeliveryStreamImporterOfRecord sets DeliveryStreamImporterOfRecord, Tag 41070.
func (m NoStreams) SetDeliveryStreamImporterOfRecord(v string) {
	m.Set(field.NewDeliveryStreamImporterOfRecord(v))
}

// SetDeliveryStreamNegativeTolerance sets DeliveryStreamNegativeTolerance, Tag 41071.
func (m NoStreams) SetDeliveryStreamNegativeTolerance(value decimal.Decimal, scale int32) {
	m.Set(field.NewDeliveryStreamNegativeTolerance(value, scale))
}

// SetDeliveryStreamPositiveTolerance sets DeliveryStreamPositiveTolerance, Tag 41072.
func (m NoStreams) SetDeliveryStreamPositiveTolerance(value decimal.Decimal, scale int32) {
	m.Set(field.NewDeliveryStreamPositiveTolerance(value, scale))
}

// SetDeliveryStreamToleranceUnitOfMeasure sets DeliveryStreamToleranceUnitOfMeasure, Tag 41073.
func (m NoStreams) SetDeliveryStreamToleranceUnitOfMeasure(v string) {
	m.Set(field.NewDeliveryStreamToleranceUnitOfMeasure(v))
}

// SetDeliveryStreamToleranceType sets DeliveryStreamToleranceType, Tag 41074.
func (m NoStreams) SetDeliveryStreamToleranceType(v int) {
	m.Set(field.NewDeliveryStreamToleranceType(v))
}

// SetDeliveryStreamToleranceOptionSide sets DeliveryStreamToleranceOptionSide, Tag 41075.
func (m NoStreams) SetDeliveryStreamToleranceOptionSide(v enum.DeliveryStreamToleranceOptionSide) {
	m.Set(field.NewDeliveryStreamToleranceOptionSide(v))
}

// SetDeliveryStreamTotalPositiveTolerance sets DeliveryStreamTotalPositiveTolerance, Tag 41076.
func (m NoStreams) SetDeliveryStreamTotalPositiveTolerance(value decimal.Decimal, scale int32) {
	m.Set(field.NewDeliveryStreamTotalPositiveTolerance(value, scale))
}

// SetDeliveryStreamTotalNegativeTolerance sets DeliveryStreamTotalNegativeTolerance, Tag 41077.
func (m NoStreams) SetDeliveryStreamTotalNegativeTolerance(value decimal.Decimal, scale int32) {
	m.Set(field.NewDeliveryStreamTotalNegativeTolerance(value, scale))
}

// SetDeliveryStreamNotionalConversionFactor sets DeliveryStreamNotionalConversionFactor, Tag 41078.
func (m NoStreams) SetDeliveryStreamNotionalConversionFactor(value decimal.Decimal, scale int32) {
	m.Set(field.NewDeliveryStreamNotionalConversionFactor(value, scale))
}

// SetDeliveryStreamTransportEquipment sets DeliveryStreamTransportEquipment, Tag 41079.
func (m NoStreams) SetDeliveryStreamTransportEquipment(v string) {
	m.Set(field.NewDeliveryStreamTransportEquipment(v))
}

// SetDeliveryStreamElectingPartySide sets DeliveryStreamElectingPartySide, Tag 41080.
func (m NoStreams) SetDeliveryStreamElectingPartySide(v enum.DeliveryStreamElectingPartySide) {
	m.Set(field.NewDeliveryStreamElectingPartySide(v))
}

// SetDeliveryStreamDeliveryPointSource sets DeliveryStreamDeliveryPointSource, Tag 42192.
func (m NoStreams) SetDeliveryStreamDeliveryPointSource(v enum.DeliveryStreamDeliveryPointSource) {
	m.Set(field.NewDeliveryStreamDeliveryPointSource(v))
}

// SetDeliveryStreamDeliveryPointDesc sets DeliveryStreamDeliveryPointDesc, Tag 42193.
func (m NoStreams) SetDeliveryStreamDeliveryPointDesc(v string) {
	m.Set(field.NewDeliveryStreamDeliveryPointDesc(v))
}

// SetDeliveryStreamRouteOrCharter sets DeliveryStreamRouteOrCharter, Tag 43094.
func (m NoStreams) SetDeliveryStreamRouteOrCharter(v string) {
	m.Set(field.NewDeliveryStreamRouteOrCharter(v))
}

// SetNoDeliverySchedules sets NoDeliverySchedules, Tag 41037.
func (m NoStreams) SetNoDeliverySchedules(f NoDeliverySchedulesRepeatingGroup) {
	m.SetGroup(f)
}

// SetStreamVersion sets StreamVersion, Tag 42784.
func (m NoStreams) SetStreamVersion(v string) {
	m.Set(field.NewStreamVersion(v))
}

// SetStreamVersionEffectiveDate sets StreamVersionEffectiveDate, Tag 42785.
func (m NoStreams) SetStreamVersionEffectiveDate(v string) {
	m.Set(field.NewStreamVersionEffectiveDate(v))
}

// SetStreamNotionalDeterminationMethod sets StreamNotionalDeterminationMethod, Tag 42786.
func (m NoStreams) SetStreamNotionalDeterminationMethod(v string) {
	m.Set(field.NewStreamNotionalDeterminationMethod(v))
}

// SetStreamNotionalAdjustments sets StreamNotionalAdjustments, Tag 42787.
func (m NoStreams) SetStreamNotionalAdjustments(v enum.StreamNotionalAdjustments) {
	m.Set(field.NewStreamNotionalAdjustments(v))
}

// GetStreamType gets StreamType, Tag 40050.
func (m NoStreams) GetStreamType() (v enum.StreamType, err quickfix.MessageRejectError) {
	var f field.StreamTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStreamDesc gets StreamDesc, Tag 40051.
func (m NoStreams) GetStreamDesc() (v string, err quickfix.MessageRejectError) {
	var f field.StreamDescField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStreamPaySide gets StreamPaySide, Tag 40052.
func (m NoStreams) GetStreamPaySide() (v int, err quickfix.MessageRejectError) {
	var f field.StreamPaySideField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStreamReceiveSide gets StreamReceiveSide, Tag 40053.
func (m NoStreams) GetStreamReceiveSide() (v int, err quickfix.MessageRejectError) {
	var f field.StreamReceiveSideField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStreamNotional gets StreamNotional, Tag 40054.
func (m NoStreams) GetStreamNotional() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.StreamNotionalField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStreamCurrency gets StreamCurrency, Tag 40055.
func (m NoStreams) GetStreamCurrency() (v string, err quickfix.MessageRejectError) {
	var f field.StreamCurrencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStreamEffectiveDateUnadjusted gets StreamEffectiveDateUnadjusted, Tag 40907.
func (m NoStreams) GetStreamEffectiveDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.StreamEffectiveDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStreamEffectiveDateBusinessDayConvention gets StreamEffectiveDateBusinessDayConvention, Tag 40908.
func (m NoStreams) GetStreamEffectiveDateBusinessDayConvention() (v int, err quickfix.MessageRejectError) {
	var f field.StreamEffectiveDateBusinessDayConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoStreamEffectiveBusinessCenters gets NoStreamEffectiveBusinessCenters, Tag 40960.
func (m NoStreams) GetNoStreamEffectiveBusinessCenters() (NoStreamEffectiveBusinessCentersRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoStreamEffectiveBusinessCentersRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetStreamEffectiveDateRelativeTo gets StreamEffectiveDateRelativeTo, Tag 40910.
func (m NoStreams) GetStreamEffectiveDateRelativeTo() (v int, err quickfix.MessageRejectError) {
	var f field.StreamEffectiveDateRelativeToField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStreamEffectiveDateOffsetPeriod gets StreamEffectiveDateOffsetPeriod, Tag 40911.
func (m NoStreams) GetStreamEffectiveDateOffsetPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.StreamEffectiveDateOffsetPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStreamEffectiveDateOffsetUnit gets StreamEffectiveDateOffsetUnit, Tag 40912.
func (m NoStreams) GetStreamEffectiveDateOffsetUnit() (v string, err quickfix.MessageRejectError) {
	var f field.StreamEffectiveDateOffsetUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStreamEffectiveDateOffsetDayType gets StreamEffectiveDateOffsetDayType, Tag 40913.
func (m NoStreams) GetStreamEffectiveDateOffsetDayType() (v int, err quickfix.MessageRejectError) {
	var f field.StreamEffectiveDateOffsetDayTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStreamEffectiveDateAdjusted gets StreamEffectiveDateAdjusted, Tag 40914.
func (m NoStreams) GetStreamEffectiveDateAdjusted() (v string, err quickfix.MessageRejectError) {
	var f field.StreamEffectiveDateAdjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStreamTerminationDateUnadjusted gets StreamTerminationDateUnadjusted, Tag 40065.
func (m NoStreams) GetStreamTerminationDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.StreamTerminationDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStreamTerminationDateBusinessDayConvention gets StreamTerminationDateBusinessDayConvention, Tag 40066.
func (m NoStreams) GetStreamTerminationDateBusinessDayConvention() (v int, err quickfix.MessageRejectError) {
	var f field.StreamTerminationDateBusinessDayConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoStreamTerminationDateBusinessCenters gets NoStreamTerminationDateBusinessCenters, Tag 40961.
func (m NoStreams) GetNoStreamTerminationDateBusinessCenters() (NoStreamTerminationDateBusinessCentersRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoStreamTerminationDateBusinessCentersRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetStreamTerminationDateRelativeTo gets StreamTerminationDateRelativeTo, Tag 40068.
func (m NoStreams) GetStreamTerminationDateRelativeTo() (v int, err quickfix.MessageRejectError) {
	var f field.StreamTerminationDateRelativeToField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStreamTerminationDateOffsetPeriod gets StreamTerminationDateOffsetPeriod, Tag 40069.
func (m NoStreams) GetStreamTerminationDateOffsetPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.StreamTerminationDateOffsetPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStreamTerminationDateOffsetUnit gets StreamTerminationDateOffsetUnit, Tag 40070.
func (m NoStreams) GetStreamTerminationDateOffsetUnit() (v string, err quickfix.MessageRejectError) {
	var f field.StreamTerminationDateOffsetUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStreamTerminationDateOffsetDayType gets StreamTerminationDateOffsetDayType, Tag 40071.
func (m NoStreams) GetStreamTerminationDateOffsetDayType() (v int, err quickfix.MessageRejectError) {
	var f field.StreamTerminationDateOffsetDayTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStreamTerminationDateAdjusted gets StreamTerminationDateAdjusted, Tag 40072.
func (m NoStreams) GetStreamTerminationDateAdjusted() (v string, err quickfix.MessageRejectError) {
	var f field.StreamTerminationDateAdjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStreamCalculationPeriodBusinessDayConvention gets StreamCalculationPeriodBusinessDayConvention, Tag 40073.
func (m NoStreams) GetStreamCalculationPeriodBusinessDayConvention() (v int, err quickfix.MessageRejectError) {
	var f field.StreamCalculationPeriodBusinessDayConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoStreamCalculationPeriodBusinessCenters gets NoStreamCalculationPeriodBusinessCenters, Tag 40958.
func (m NoStreams) GetNoStreamCalculationPeriodBusinessCenters() (NoStreamCalculationPeriodBusinessCentersRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoStreamCalculationPeriodBusinessCentersRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetStreamFirstPeriodStartDateUnadjusted gets StreamFirstPeriodStartDateUnadjusted, Tag 40075.
func (m NoStreams) GetStreamFirstPeriodStartDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.StreamFirstPeriodStartDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStreamFirstPeriodStartDateBusinessDayConvention gets StreamFirstPeriodStartDateBusinessDayConvention, Tag 40076.
func (m NoStreams) GetStreamFirstPeriodStartDateBusinessDayConvention() (v int, err quickfix.MessageRejectError) {
	var f field.StreamFirstPeriodStartDateBusinessDayConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoStreamFirstPeriodStartDateBusinessCenters gets NoStreamFirstPeriodStartDateBusinessCenters, Tag 40959.
func (m NoStreams) GetNoStreamFirstPeriodStartDateBusinessCenters() (NoStreamFirstPeriodStartDateBusinessCentersRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoStreamFirstPeriodStartDateBusinessCentersRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetStreamFirstPeriodStartDateAdjusted gets StreamFirstPeriodStartDateAdjusted, Tag 40078.
func (m NoStreams) GetStreamFirstPeriodStartDateAdjusted() (v string, err quickfix.MessageRejectError) {
	var f field.StreamFirstPeriodStartDateAdjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStreamFirstRegularPeriodStartDateUnadjusted gets StreamFirstRegularPeriodStartDateUnadjusted, Tag 40079.
func (m NoStreams) GetStreamFirstRegularPeriodStartDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.StreamFirstRegularPeriodStartDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStreamFirstCompoundingPeriodEndDateUnadjusted gets StreamFirstCompoundingPeriodEndDateUnadjusted, Tag 40080.
func (m NoStreams) GetStreamFirstCompoundingPeriodEndDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.StreamFirstCompoundingPeriodEndDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStreamLastRegularPeriodEndDateUnadjusted gets StreamLastRegularPeriodEndDateUnadjusted, Tag 40081.
func (m NoStreams) GetStreamLastRegularPeriodEndDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.StreamLastRegularPeriodEndDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStreamCalculationFrequencyPeriod gets StreamCalculationFrequencyPeriod, Tag 40082.
func (m NoStreams) GetStreamCalculationFrequencyPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.StreamCalculationFrequencyPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStreamCalculationFrequencyUnit gets StreamCalculationFrequencyUnit, Tag 40083.
func (m NoStreams) GetStreamCalculationFrequencyUnit() (v string, err quickfix.MessageRejectError) {
	var f field.StreamCalculationFrequencyUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStreamCalculationRollConvention gets StreamCalculationRollConvention, Tag 40084.
func (m NoStreams) GetStreamCalculationRollConvention() (v string, err quickfix.MessageRejectError) {
	var f field.StreamCalculationRollConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStreamCalculationPeriodDatesXID gets StreamCalculationPeriodDatesXID, Tag 41244.
func (m NoStreams) GetStreamCalculationPeriodDatesXID() (v string, err quickfix.MessageRejectError) {
	var f field.StreamCalculationPeriodDatesXIDField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStreamCalculationPeriodDatesXIDRef gets StreamCalculationPeriodDatesXIDRef, Tag 41245.
func (m NoStreams) GetStreamCalculationPeriodDatesXIDRef() (v string, err quickfix.MessageRejectError) {
	var f field.StreamCalculationPeriodDatesXIDRefField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoStreamCalculationPeriodDates gets NoStreamCalculationPeriodDates, Tag 41241.
func (m NoStreams) GetNoStreamCalculationPeriodDates() (NoStreamCalculationPeriodDatesRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoStreamCalculationPeriodDatesRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetStreamCalculationBalanceOfFirstPeriod gets StreamCalculationBalanceOfFirstPeriod, Tag 41246.
func (m NoStreams) GetStreamCalculationBalanceOfFirstPeriod() (v bool, err quickfix.MessageRejectError) {
	var f field.StreamCalculationBalanceOfFirstPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStreamCalculationCorrectionPeriod gets StreamCalculationCorrectionPeriod, Tag 41247.
func (m NoStreams) GetStreamCalculationCorrectionPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.StreamCalculationCorrectionPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStreamCalculationCorrectionUnit gets StreamCalculationCorrectionUnit, Tag 41248.
func (m NoStreams) GetStreamCalculationCorrectionUnit() (v string, err quickfix.MessageRejectError) {
	var f field.StreamCalculationCorrectionUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamType gets PaymentStreamType, Tag 40738.
func (m NoStreams) GetPaymentStreamType() (v enum.PaymentStreamType, err quickfix.MessageRejectError) {
	var f field.PaymentStreamTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamMarketRate gets PaymentStreamMarketRate, Tag 40739.
func (m NoStreams) GetPaymentStreamMarketRate() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStreamMarketRateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamDelayIndicator gets PaymentStreamDelayIndicator, Tag 40740.
func (m NoStreams) GetPaymentStreamDelayIndicator() (v bool, err quickfix.MessageRejectError) {
	var f field.PaymentStreamDelayIndicatorField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamSettlCurrency gets PaymentStreamSettlCurrency, Tag 40741.
func (m NoStreams) GetPaymentStreamSettlCurrency() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStreamSettlCurrencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamDayCount gets PaymentStreamDayCount, Tag 40742.
func (m NoStreams) GetPaymentStreamDayCount() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStreamDayCountField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamAccrualDays gets PaymentStreamAccrualDays, Tag 40743.
func (m NoStreams) GetPaymentStreamAccrualDays() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStreamAccrualDaysField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamDiscountType gets PaymentStreamDiscountType, Tag 40744.
func (m NoStreams) GetPaymentStreamDiscountType() (v enum.PaymentStreamDiscountType, err quickfix.MessageRejectError) {
	var f field.PaymentStreamDiscountTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamDiscountRate gets PaymentStreamDiscountRate, Tag 40745.
func (m NoStreams) GetPaymentStreamDiscountRate() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.PaymentStreamDiscountRateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamDiscountRateDayCount gets PaymentStreamDiscountRateDayCount, Tag 40746.
func (m NoStreams) GetPaymentStreamDiscountRateDayCount() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStreamDiscountRateDayCountField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamCompoundingMethod gets PaymentStreamCompoundingMethod, Tag 40747.
func (m NoStreams) GetPaymentStreamCompoundingMethod() (v enum.PaymentStreamCompoundingMethod, err quickfix.MessageRejectError) {
	var f field.PaymentStreamCompoundingMethodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamInitialPrincipalExchangeIndicator gets PaymentStreamInitialPrincipalExchangeIndicator, Tag 40748.
func (m NoStreams) GetPaymentStreamInitialPrincipalExchangeIndicator() (v bool, err quickfix.MessageRejectError) {
	var f field.PaymentStreamInitialPrincipalExchangeIndicatorField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamInterimPrincipalExchangeIndicator gets PaymentStreamInterimPrincipalExchangeIndicator, Tag 40749.
func (m NoStreams) GetPaymentStreamInterimPrincipalExchangeIndicator() (v bool, err quickfix.MessageRejectError) {
	var f field.PaymentStreamInterimPrincipalExchangeIndicatorField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamFinalPrincipalExchangeIndicator gets PaymentStreamFinalPrincipalExchangeIndicator, Tag 40750.
func (m NoStreams) GetPaymentStreamFinalPrincipalExchangeIndicator() (v bool, err quickfix.MessageRejectError) {
	var f field.PaymentStreamFinalPrincipalExchangeIndicatorField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamPaymentDateBusinessDayConvention gets PaymentStreamPaymentDateBusinessDayConvention, Tag 40751.
func (m NoStreams) GetPaymentStreamPaymentDateBusinessDayConvention() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStreamPaymentDateBusinessDayConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoPaymentStreamPaymentDateBusinessCenters gets NoPaymentStreamPaymentDateBusinessCenters, Tag 40947.
func (m NoStreams) GetNoPaymentStreamPaymentDateBusinessCenters() (NoPaymentStreamPaymentDateBusinessCentersRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoPaymentStreamPaymentDateBusinessCentersRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetPaymentStreamPaymentFrequencyPeriod gets PaymentStreamPaymentFrequencyPeriod, Tag 40753.
func (m NoStreams) GetPaymentStreamPaymentFrequencyPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStreamPaymentFrequencyPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamPaymentFrequencyUnit gets PaymentStreamPaymentFrequencyUnit, Tag 40754.
func (m NoStreams) GetPaymentStreamPaymentFrequencyUnit() (v enum.PaymentStreamPaymentFrequencyUnit, err quickfix.MessageRejectError) {
	var f field.PaymentStreamPaymentFrequencyUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamPaymentRollConvention gets PaymentStreamPaymentRollConvention, Tag 40755.
func (m NoStreams) GetPaymentStreamPaymentRollConvention() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStreamPaymentRollConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamFirstPaymentDateUnadjusted gets PaymentStreamFirstPaymentDateUnadjusted, Tag 40756.
func (m NoStreams) GetPaymentStreamFirstPaymentDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStreamFirstPaymentDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamLastRegularPaymentDateUnadjusted gets PaymentStreamLastRegularPaymentDateUnadjusted, Tag 40757.
func (m NoStreams) GetPaymentStreamLastRegularPaymentDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStreamLastRegularPaymentDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamPaymentDateRelativeTo gets PaymentStreamPaymentDateRelativeTo, Tag 40758.
func (m NoStreams) GetPaymentStreamPaymentDateRelativeTo() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStreamPaymentDateRelativeToField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamPaymentDateOffsetPeriod gets PaymentStreamPaymentDateOffsetPeriod, Tag 40759.
func (m NoStreams) GetPaymentStreamPaymentDateOffsetPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStreamPaymentDateOffsetPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamPaymentDateOffsetUnit gets PaymentStreamPaymentDateOffsetUnit, Tag 40760.
func (m NoStreams) GetPaymentStreamPaymentDateOffsetUnit() (v enum.PaymentStreamPaymentDateOffsetUnit, err quickfix.MessageRejectError) {
	var f field.PaymentStreamPaymentDateOffsetUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamPaymentDateOffsetDayType gets PaymentStreamPaymentDateOffsetDayType, Tag 40920.
func (m NoStreams) GetPaymentStreamPaymentDateOffsetDayType() (v enum.PaymentStreamPaymentDateOffsetDayType, err quickfix.MessageRejectError) {
	var f field.PaymentStreamPaymentDateOffsetDayTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoPaymentStreamPaymentDates gets NoPaymentStreamPaymentDates, Tag 41220.
func (m NoStreams) GetNoPaymentStreamPaymentDates() (NoPaymentStreamPaymentDatesRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoPaymentStreamPaymentDatesRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetPaymentStreamMasterAgreementPaymentDatesIndicator gets PaymentStreamMasterAgreementPaymentDatesIndicator, Tag 41223.
func (m NoStreams) GetPaymentStreamMasterAgreementPaymentDatesIndicator() (v bool, err quickfix.MessageRejectError) {
	var f field.PaymentStreamMasterAgreementPaymentDatesIndicatorField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamFinalPricePaymentDateUnadjusted gets PaymentStreamFinalPricePaymentDateUnadjusted, Tag 42654.
func (m NoStreams) GetPaymentStreamFinalPricePaymentDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStreamFinalPricePaymentDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamFinalPricePaymentDateRelativeTo gets PaymentStreamFinalPricePaymentDateRelativeTo, Tag 42655.
func (m NoStreams) GetPaymentStreamFinalPricePaymentDateRelativeTo() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStreamFinalPricePaymentDateRelativeToField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamFinalPricePaymentDateOffsetfPeriod gets PaymentStreamFinalPricePaymentDateOffsetfPeriod, Tag 42656.
func (m NoStreams) GetPaymentStreamFinalPricePaymentDateOffsetfPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStreamFinalPricePaymentDateOffsetfPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamFinalPricePaymentDateOffsetUnit gets PaymentStreamFinalPricePaymentDateOffsetUnit, Tag 42657.
func (m NoStreams) GetPaymentStreamFinalPricePaymentDateOffsetUnit() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStreamFinalPricePaymentDateOffsetUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamFinalPricePaymentDateOffsetDayType gets PaymentStreamFinalPricePaymentDateOffsetDayType, Tag 42658.
func (m NoStreams) GetPaymentStreamFinalPricePaymentDateOffsetDayType() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStreamFinalPricePaymentDateOffsetDayTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamFinalPricePaymentDateAdjusted gets PaymentStreamFinalPricePaymentDateAdjusted, Tag 42659.
func (m NoStreams) GetPaymentStreamFinalPricePaymentDateAdjusted() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStreamFinalPricePaymentDateAdjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamResetDateRelativeTo gets PaymentStreamResetDateRelativeTo, Tag 40761.
func (m NoStreams) GetPaymentStreamResetDateRelativeTo() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStreamResetDateRelativeToField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamResetDateBusinessDayConvention gets PaymentStreamResetDateBusinessDayConvention, Tag 40762.
func (m NoStreams) GetPaymentStreamResetDateBusinessDayConvention() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStreamResetDateBusinessDayConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoPaymentStreamResetDateBusinessCenters gets NoPaymentStreamResetDateBusinessCenters, Tag 40948.
func (m NoStreams) GetNoPaymentStreamResetDateBusinessCenters() (NoPaymentStreamResetDateBusinessCentersRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoPaymentStreamResetDateBusinessCentersRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetPaymentStreamResetFrequencyPeriod gets PaymentStreamResetFrequencyPeriod, Tag 40764.
func (m NoStreams) GetPaymentStreamResetFrequencyPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStreamResetFrequencyPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamResetFrequencyUnit gets PaymentStreamResetFrequencyUnit, Tag 40765.
func (m NoStreams) GetPaymentStreamResetFrequencyUnit() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStreamResetFrequencyUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamResetWeeklyRollConvention gets PaymentStreamResetWeeklyRollConvention, Tag 40766.
func (m NoStreams) GetPaymentStreamResetWeeklyRollConvention() (v enum.PaymentStreamResetWeeklyRollConvention, err quickfix.MessageRejectError) {
	var f field.PaymentStreamResetWeeklyRollConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamInitialFixingDateRelativeTo gets PaymentStreamInitialFixingDateRelativeTo, Tag 40767.
func (m NoStreams) GetPaymentStreamInitialFixingDateRelativeTo() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStreamInitialFixingDateRelativeToField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamInitialFixingDateBusinessDayConvention gets PaymentStreamInitialFixingDateBusinessDayConvention, Tag 40768.
func (m NoStreams) GetPaymentStreamInitialFixingDateBusinessDayConvention() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStreamInitialFixingDateBusinessDayConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoPaymentStreamInitialFixingDateBusinessCenters gets NoPaymentStreamInitialFixingDateBusinessCenters, Tag 40949.
func (m NoStreams) GetNoPaymentStreamInitialFixingDateBusinessCenters() (NoPaymentStreamInitialFixingDateBusinessCentersRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoPaymentStreamInitialFixingDateBusinessCentersRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetPaymentStreamInitialFixingDateOffsetPeriod gets PaymentStreamInitialFixingDateOffsetPeriod, Tag 40770.
func (m NoStreams) GetPaymentStreamInitialFixingDateOffsetPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStreamInitialFixingDateOffsetPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamInitialFixingDateOffsetUnit gets PaymentStreamInitialFixingDateOffsetUnit, Tag 40771.
func (m NoStreams) GetPaymentStreamInitialFixingDateOffsetUnit() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStreamInitialFixingDateOffsetUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamInitialFixingDateOffsetDayType gets PaymentStreamInitialFixingDateOffsetDayType, Tag 40772.
func (m NoStreams) GetPaymentStreamInitialFixingDateOffsetDayType() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStreamInitialFixingDateOffsetDayTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamInitialFixingDateAdjusted gets PaymentStreamInitialFixingDateAdjusted, Tag 40773.
func (m NoStreams) GetPaymentStreamInitialFixingDateAdjusted() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStreamInitialFixingDateAdjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamFixingDateRelativeTo gets PaymentStreamFixingDateRelativeTo, Tag 40774.
func (m NoStreams) GetPaymentStreamFixingDateRelativeTo() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStreamFixingDateRelativeToField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamFixingDateBusinessDayConvention gets PaymentStreamFixingDateBusinessDayConvention, Tag 40775.
func (m NoStreams) GetPaymentStreamFixingDateBusinessDayConvention() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStreamFixingDateBusinessDayConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoPaymentStreamFixingDateBusinessCenters gets NoPaymentStreamFixingDateBusinessCenters, Tag 40950.
func (m NoStreams) GetNoPaymentStreamFixingDateBusinessCenters() (NoPaymentStreamFixingDateBusinessCentersRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoPaymentStreamFixingDateBusinessCentersRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetPaymentStreamFixingDateOffsetPeriod gets PaymentStreamFixingDateOffsetPeriod, Tag 40777.
func (m NoStreams) GetPaymentStreamFixingDateOffsetPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStreamFixingDateOffsetPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamFixingDateOffsetUnit gets PaymentStreamFixingDateOffsetUnit, Tag 40778.
func (m NoStreams) GetPaymentStreamFixingDateOffsetUnit() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStreamFixingDateOffsetUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamFixingDateOffsetDayType gets PaymentStreamFixingDateOffsetDayType, Tag 40779.
func (m NoStreams) GetPaymentStreamFixingDateOffsetDayType() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStreamFixingDateOffsetDayTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamFixingDateAdjusted gets PaymentStreamFixingDateAdjusted, Tag 40780.
func (m NoStreams) GetPaymentStreamFixingDateAdjusted() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStreamFixingDateAdjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamRateCutoffDateOffsetPeriod gets PaymentStreamRateCutoffDateOffsetPeriod, Tag 40781.
func (m NoStreams) GetPaymentStreamRateCutoffDateOffsetPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStreamRateCutoffDateOffsetPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamRateCutoffDateOffsetUnit gets PaymentStreamRateCutoffDateOffsetUnit, Tag 40782.
func (m NoStreams) GetPaymentStreamRateCutoffDateOffsetUnit() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStreamRateCutoffDateOffsetUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamRateCutoffDateOffsetDayType gets PaymentStreamRateCutoffDateOffsetDayType, Tag 40783.
func (m NoStreams) GetPaymentStreamRateCutoffDateOffsetDayType() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStreamRateCutoffDateOffsetDayTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoPaymentStreamFixingDates gets NoPaymentStreamFixingDates, Tag 42660.
func (m NoStreams) GetNoPaymentStreamFixingDates() (NoPaymentStreamFixingDatesRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoPaymentStreamFixingDatesRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetPaymentStreamRate gets PaymentStreamRate, Tag 40784.
func (m NoStreams) GetPaymentStreamRate() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.PaymentStreamRateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamFixedAmount gets PaymentStreamFixedAmount, Tag 40785.
func (m NoStreams) GetPaymentStreamFixedAmount() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.PaymentStreamFixedAmountField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamRateOrAmountCurrency gets PaymentStreamRateOrAmountCurrency, Tag 40786.
func (m NoStreams) GetPaymentStreamRateOrAmountCurrency() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStreamRateOrAmountCurrencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamFutureValueNotional gets PaymentStreamFutureValueNotional, Tag 40787.
func (m NoStreams) GetPaymentStreamFutureValueNotional() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.PaymentStreamFutureValueNotionalField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamFutureValueDateAdjusted gets PaymentStreamFutureValueDateAdjusted, Tag 40788.
func (m NoStreams) GetPaymentStreamFutureValueDateAdjusted() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStreamFutureValueDateAdjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamFixedAmountUnitOfMeasure gets PaymentStreamFixedAmountUnitOfMeasure, Tag 41187.
func (m NoStreams) GetPaymentStreamFixedAmountUnitOfMeasure() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStreamFixedAmountUnitOfMeasureField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamTotalFixedAmount gets PaymentStreamTotalFixedAmount, Tag 41188.
func (m NoStreams) GetPaymentStreamTotalFixedAmount() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.PaymentStreamTotalFixedAmountField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamWorldScaleRate gets PaymentStreamWorldScaleRate, Tag 41189.
func (m NoStreams) GetPaymentStreamWorldScaleRate() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.PaymentStreamWorldScaleRateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamContractPrice gets PaymentStreamContractPrice, Tag 41190.
func (m NoStreams) GetPaymentStreamContractPrice() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.PaymentStreamContractPriceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamContractPriceCurrency gets PaymentStreamContractPriceCurrency, Tag 41191.
func (m NoStreams) GetPaymentStreamContractPriceCurrency() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStreamContractPriceCurrencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamRateIndex gets PaymentStreamRateIndex, Tag 40789.
func (m NoStreams) GetPaymentStreamRateIndex() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStreamRateIndexField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamRateIndexSource gets PaymentStreamRateIndexSource, Tag 40790.
func (m NoStreams) GetPaymentStreamRateIndexSource() (v enum.PaymentStreamRateIndexSource, err quickfix.MessageRejectError) {
	var f field.PaymentStreamRateIndexSourceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamRateIndexCurveUnit gets PaymentStreamRateIndexCurveUnit, Tag 40791.
func (m NoStreams) GetPaymentStreamRateIndexCurveUnit() (v enum.PaymentStreamRateIndexCurveUnit, err quickfix.MessageRejectError) {
	var f field.PaymentStreamRateIndexCurveUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamRateIndexCurvePeriod gets PaymentStreamRateIndexCurvePeriod, Tag 40792.
func (m NoStreams) GetPaymentStreamRateIndexCurvePeriod() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStreamRateIndexCurvePeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamRateMultiplier gets PaymentStreamRateMultiplier, Tag 40793.
func (m NoStreams) GetPaymentStreamRateMultiplier() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.PaymentStreamRateMultiplierField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamRateSpread gets PaymentStreamRateSpread, Tag 40794.
func (m NoStreams) GetPaymentStreamRateSpread() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.PaymentStreamRateSpreadField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamRateSpreadPositionType gets PaymentStreamRateSpreadPositionType, Tag 40795.
func (m NoStreams) GetPaymentStreamRateSpreadPositionType() (v enum.PaymentStreamRateSpreadPositionType, err quickfix.MessageRejectError) {
	var f field.PaymentStreamRateSpreadPositionTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamRateTreatment gets PaymentStreamRateTreatment, Tag 40796.
func (m NoStreams) GetPaymentStreamRateTreatment() (v enum.PaymentStreamRateTreatment, err quickfix.MessageRejectError) {
	var f field.PaymentStreamRateTreatmentField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamCapRate gets PaymentStreamCapRate, Tag 40797.
func (m NoStreams) GetPaymentStreamCapRate() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.PaymentStreamCapRateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamCapRateBuySide gets PaymentStreamCapRateBuySide, Tag 40798.
func (m NoStreams) GetPaymentStreamCapRateBuySide() (v enum.PaymentStreamCapRateBuySide, err quickfix.MessageRejectError) {
	var f field.PaymentStreamCapRateBuySideField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamCapRateSellSide gets PaymentStreamCapRateSellSide, Tag 40799.
func (m NoStreams) GetPaymentStreamCapRateSellSide() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStreamCapRateSellSideField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamFloorRate gets PaymentStreamFloorRate, Tag 40800.
func (m NoStreams) GetPaymentStreamFloorRate() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.PaymentStreamFloorRateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamFloorRateBuySide gets PaymentStreamFloorRateBuySide, Tag 40801.
func (m NoStreams) GetPaymentStreamFloorRateBuySide() (v enum.PaymentStreamFloorRateBuySide, err quickfix.MessageRejectError) {
	var f field.PaymentStreamFloorRateBuySideField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamFloorRateSellSide gets PaymentStreamFloorRateSellSide, Tag 40802.
func (m NoStreams) GetPaymentStreamFloorRateSellSide() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStreamFloorRateSellSideField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamInitialRate gets PaymentStreamInitialRate, Tag 40803.
func (m NoStreams) GetPaymentStreamInitialRate() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.PaymentStreamInitialRateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamFinalRateRoundingDirection gets PaymentStreamFinalRateRoundingDirection, Tag 40804.
func (m NoStreams) GetPaymentStreamFinalRateRoundingDirection() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStreamFinalRateRoundingDirectionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamFinalRatePrecision gets PaymentStreamFinalRatePrecision, Tag 40805.
func (m NoStreams) GetPaymentStreamFinalRatePrecision() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStreamFinalRatePrecisionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamAveragingMethod gets PaymentStreamAveragingMethod, Tag 40806.
func (m NoStreams) GetPaymentStreamAveragingMethod() (v enum.PaymentStreamAveragingMethod, err quickfix.MessageRejectError) {
	var f field.PaymentStreamAveragingMethodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamNegativeRateTreatment gets PaymentStreamNegativeRateTreatment, Tag 40807.
func (m NoStreams) GetPaymentStreamNegativeRateTreatment() (v enum.PaymentStreamNegativeRateTreatment, err quickfix.MessageRejectError) {
	var f field.PaymentStreamNegativeRateTreatmentField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamInflationLagPeriod gets PaymentStreamInflationLagPeriod, Tag 40808.
func (m NoStreams) GetPaymentStreamInflationLagPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStreamInflationLagPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamInflationLagUnit gets PaymentStreamInflationLagUnit, Tag 40809.
func (m NoStreams) GetPaymentStreamInflationLagUnit() (v enum.PaymentStreamInflationLagUnit, err quickfix.MessageRejectError) {
	var f field.PaymentStreamInflationLagUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamInflationLagDayType gets PaymentStreamInflationLagDayType, Tag 40810.
func (m NoStreams) GetPaymentStreamInflationLagDayType() (v enum.PaymentStreamInflationLagDayType, err quickfix.MessageRejectError) {
	var f field.PaymentStreamInflationLagDayTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamInflationInterpolationMethod gets PaymentStreamInflationInterpolationMethod, Tag 40811.
func (m NoStreams) GetPaymentStreamInflationInterpolationMethod() (v enum.PaymentStreamInflationInterpolationMethod, err quickfix.MessageRejectError) {
	var f field.PaymentStreamInflationInterpolationMethodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamInflationIndexSource gets PaymentStreamInflationIndexSource, Tag 40812.
func (m NoStreams) GetPaymentStreamInflationIndexSource() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStreamInflationIndexSourceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamInflationPublicationSource gets PaymentStreamInflationPublicationSource, Tag 40813.
func (m NoStreams) GetPaymentStreamInflationPublicationSource() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStreamInflationPublicationSourceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamInflationInitialIndexLevel gets PaymentStreamInflationInitialIndexLevel, Tag 40814.
func (m NoStreams) GetPaymentStreamInflationInitialIndexLevel() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.PaymentStreamInflationInitialIndexLevelField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamInflationFallbackBondApplicable gets PaymentStreamInflationFallbackBondApplicable, Tag 40815.
func (m NoStreams) GetPaymentStreamInflationFallbackBondApplicable() (v bool, err quickfix.MessageRejectError) {
	var f field.PaymentStreamInflationFallbackBondApplicableField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamFRADiscounting gets PaymentStreamFRADiscounting, Tag 40816.
func (m NoStreams) GetPaymentStreamFRADiscounting() (v enum.PaymentStreamFRADiscounting, err quickfix.MessageRejectError) {
	var f field.PaymentStreamFRADiscountingField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamRateIndex2CurvePeriod gets PaymentStreamRateIndex2CurvePeriod, Tag 41194.
func (m NoStreams) GetPaymentStreamRateIndex2CurvePeriod() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStreamRateIndex2CurvePeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamRateIndex2CurveUnit gets PaymentStreamRateIndex2CurveUnit, Tag 41195.
func (m NoStreams) GetPaymentStreamRateIndex2CurveUnit() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStreamRateIndex2CurveUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamRateIndexLocation gets PaymentStreamRateIndexLocation, Tag 41196.
func (m NoStreams) GetPaymentStreamRateIndexLocation() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStreamRateIndexLocationField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamRateIndexLevel gets PaymentStreamRateIndexLevel, Tag 41197.
func (m NoStreams) GetPaymentStreamRateIndexLevel() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.PaymentStreamRateIndexLevelField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamRateIndexUnitOfMeasure gets PaymentStreamRateIndexUnitOfMeasure, Tag 41198.
func (m NoStreams) GetPaymentStreamRateIndexUnitOfMeasure() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStreamRateIndexUnitOfMeasureField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamSettlLevel gets PaymentStreamSettlLevel, Tag 41199.
func (m NoStreams) GetPaymentStreamSettlLevel() (v enum.PaymentStreamSettlLevel, err quickfix.MessageRejectError) {
	var f field.PaymentStreamSettlLevelField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamReferenceLevel gets PaymentStreamReferenceLevel, Tag 41200.
func (m NoStreams) GetPaymentStreamReferenceLevel() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.PaymentStreamReferenceLevelField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamReferenceLevelUnitOfMeasure gets PaymentStreamReferenceLevelUnitOfMeasure, Tag 41201.
func (m NoStreams) GetPaymentStreamReferenceLevelUnitOfMeasure() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStreamReferenceLevelUnitOfMeasureField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamReferenceLevelEqualsZeroIndicator gets PaymentStreamReferenceLevelEqualsZeroIndicator, Tag 41202.
func (m NoStreams) GetPaymentStreamReferenceLevelEqualsZeroIndicator() (v bool, err quickfix.MessageRejectError) {
	var f field.PaymentStreamReferenceLevelEqualsZeroIndicatorField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamRateSpreadCurrency gets PaymentStreamRateSpreadCurrency, Tag 41203.
func (m NoStreams) GetPaymentStreamRateSpreadCurrency() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStreamRateSpreadCurrencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamRateSpreadUnitOfMeasure gets PaymentStreamRateSpreadUnitOfMeasure, Tag 41204.
func (m NoStreams) GetPaymentStreamRateSpreadUnitOfMeasure() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStreamRateSpreadUnitOfMeasureField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamRateConversionFactor gets PaymentStreamRateConversionFactor, Tag 41205.
func (m NoStreams) GetPaymentStreamRateConversionFactor() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.PaymentStreamRateConversionFactorField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamRateSpreadType gets PaymentStreamRateSpreadType, Tag 41206.
func (m NoStreams) GetPaymentStreamRateSpreadType() (v enum.PaymentStreamRateSpreadType, err quickfix.MessageRejectError) {
	var f field.PaymentStreamRateSpreadTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamLastResetRate gets PaymentStreamLastResetRate, Tag 41207.
func (m NoStreams) GetPaymentStreamLastResetRate() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.PaymentStreamLastResetRateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamFinalRate gets PaymentStreamFinalRate, Tag 41208.
func (m NoStreams) GetPaymentStreamFinalRate() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.PaymentStreamFinalRateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamCalculationLagPeriod gets PaymentStreamCalculationLagPeriod, Tag 41209.
func (m NoStreams) GetPaymentStreamCalculationLagPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStreamCalculationLagPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamCalculationLagUnit gets PaymentStreamCalculationLagUnit, Tag 41210.
func (m NoStreams) GetPaymentStreamCalculationLagUnit() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStreamCalculationLagUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamFirstObservationDateOffsetPeriod gets PaymentStreamFirstObservationDateOffsetPeriod, Tag 41211.
func (m NoStreams) GetPaymentStreamFirstObservationDateOffsetPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStreamFirstObservationDateOffsetPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamFirstObservationDateOffsetUnit gets PaymentStreamFirstObservationDateOffsetUnit, Tag 41212.
func (m NoStreams) GetPaymentStreamFirstObservationDateOffsetUnit() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStreamFirstObservationDateOffsetUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamPricingDayType gets PaymentStreamPricingDayType, Tag 41213.
func (m NoStreams) GetPaymentStreamPricingDayType() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStreamPricingDayTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamPricingDayDistribution gets PaymentStreamPricingDayDistribution, Tag 41214.
func (m NoStreams) GetPaymentStreamPricingDayDistribution() (v enum.PaymentStreamPricingDayDistribution, err quickfix.MessageRejectError) {
	var f field.PaymentStreamPricingDayDistributionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamPricingDayCount gets PaymentStreamPricingDayCount, Tag 41215.
func (m NoStreams) GetPaymentStreamPricingDayCount() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStreamPricingDayCountField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamPricingBusinessCalendar gets PaymentStreamPricingBusinessCalendar, Tag 41216.
func (m NoStreams) GetPaymentStreamPricingBusinessCalendar() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStreamPricingBusinessCalendarField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamPricingBusinessDayConvention gets PaymentStreamPricingBusinessDayConvention, Tag 41217.
func (m NoStreams) GetPaymentStreamPricingBusinessDayConvention() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStreamPricingBusinessDayConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoPaymentStreamPricingBusinessCenters gets NoPaymentStreamPricingBusinessCenters, Tag 41192.
func (m NoStreams) GetNoPaymentStreamPricingBusinessCenters() (NoPaymentStreamPricingBusinessCentersRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoPaymentStreamPricingBusinessCentersRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetNoPaymentStreamPricingDays gets NoPaymentStreamPricingDays, Tag 41227.
func (m NoStreams) GetNoPaymentStreamPricingDays() (NoPaymentStreamPricingDaysRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoPaymentStreamPricingDaysRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetNoPaymentStreamPricingDates gets NoPaymentStreamPricingDates, Tag 41224.
func (m NoStreams) GetNoPaymentStreamPricingDates() (NoPaymentStreamPricingDatesRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoPaymentStreamPricingDatesRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetPaymentStreamFirstObservationDateUnadjusted gets PaymentStreamFirstObservationDateUnadjusted, Tag 42663.
func (m NoStreams) GetPaymentStreamFirstObservationDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStreamFirstObservationDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamFirstObservationDateRelativeTo gets PaymentStreamFirstObservationDateRelativeTo, Tag 42664.
func (m NoStreams) GetPaymentStreamFirstObservationDateRelativeTo() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStreamFirstObservationDateRelativeToField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamFirstObservationDateOffsetDayType gets PaymentStreamFirstObservationDateOffsetDayType, Tag 42665.
func (m NoStreams) GetPaymentStreamFirstObservationDateOffsetDayType() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStreamFirstObservationDateOffsetDayTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamFirstObservationDateAdjusted gets PaymentStreamFirstObservationDateAdjusted, Tag 42666.
func (m NoStreams) GetPaymentStreamFirstObservationDateAdjusted() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStreamFirstObservationDateAdjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamUnderlierRefID gets PaymentStreamUnderlierRefID, Tag 42667.
func (m NoStreams) GetPaymentStreamUnderlierRefID() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStreamUnderlierRefIDField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamFormulaCurrency gets PaymentStreamFormulaCurrency, Tag 42686.
func (m NoStreams) GetPaymentStreamFormulaCurrency() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStreamFormulaCurrencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamFormulaCurrencyDeterminationMethod gets PaymentStreamFormulaCurrencyDeterminationMethod, Tag 42687.
func (m NoStreams) GetPaymentStreamFormulaCurrencyDeterminationMethod() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStreamFormulaCurrencyDeterminationMethodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamFormulaReferenceAmount gets PaymentStreamFormulaReferenceAmount, Tag 42688.
func (m NoStreams) GetPaymentStreamFormulaReferenceAmount() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStreamFormulaReferenceAmountField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoPaymentStreamFormulas gets NoPaymentStreamFormulas, Tag 42683.
func (m NoStreams) GetNoPaymentStreamFormulas() (NoPaymentStreamFormulasRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoPaymentStreamFormulasRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetPaymentStreamFormulaImageLength gets PaymentStreamFormulaImageLength, Tag 42652.
func (m NoStreams) GetPaymentStreamFormulaImageLength() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStreamFormulaImageLengthField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamFormulaImage gets PaymentStreamFormulaImage, Tag 42653.
func (m NoStreams) GetPaymentStreamFormulaImage() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStreamFormulaImageField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDividendReinvestmentIndicator gets DividendReinvestmentIndicator, Tag 42245.
func (m NoStreams) GetDividendReinvestmentIndicator() (v bool, err quickfix.MessageRejectError) {
	var f field.DividendReinvestmentIndicatorField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDividendEntitlementEvent gets DividendEntitlementEvent, Tag 42246.
func (m NoStreams) GetDividendEntitlementEvent() (v enum.DividendEntitlementEvent, err quickfix.MessageRejectError) {
	var f field.DividendEntitlementEventField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDividendAmountType gets DividendAmountType, Tag 42247.
func (m NoStreams) GetDividendAmountType() (v enum.DividendAmountType, err quickfix.MessageRejectError) {
	var f field.DividendAmountTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDividendUnderlierRefID gets DividendUnderlierRefID, Tag 42248.
func (m NoStreams) GetDividendUnderlierRefID() (v string, err quickfix.MessageRejectError) {
	var f field.DividendUnderlierRefIDField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoDividendPeriods gets NoDividendPeriods, Tag 42274.
func (m NoStreams) GetNoDividendPeriods() (NoDividendPeriodsRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoDividendPeriodsRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetExtraordinaryDividendPartySide gets ExtraordinaryDividendPartySide, Tag 42249.
func (m NoStreams) GetExtraordinaryDividendPartySide() (v int, err quickfix.MessageRejectError) {
	var f field.ExtraordinaryDividendPartySideField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetExtraordinaryDividendAmountType gets ExtraordinaryDividendAmountType, Tag 42250.
func (m NoStreams) GetExtraordinaryDividendAmountType() (v int, err quickfix.MessageRejectError) {
	var f field.ExtraordinaryDividendAmountTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetExtraordinaryDividendCurrency gets ExtraordinaryDividendCurrency, Tag 42251.
func (m NoStreams) GetExtraordinaryDividendCurrency() (v string, err quickfix.MessageRejectError) {
	var f field.ExtraordinaryDividendCurrencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetExtraordinaryDividendDeterminationMethod gets ExtraordinaryDividendDeterminationMethod, Tag 42252.
func (m NoStreams) GetExtraordinaryDividendDeterminationMethod() (v string, err quickfix.MessageRejectError) {
	var f field.ExtraordinaryDividendDeterminationMethodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDividendFXTriggerDateRelativeTo gets DividendFXTriggerDateRelativeTo, Tag 42265.
func (m NoStreams) GetDividendFXTriggerDateRelativeTo() (v int, err quickfix.MessageRejectError) {
	var f field.DividendFXTriggerDateRelativeToField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDividendFXTriggerDateOffsetPeriod gets DividendFXTriggerDateOffsetPeriod, Tag 42266.
func (m NoStreams) GetDividendFXTriggerDateOffsetPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.DividendFXTriggerDateOffsetPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDividendFXTriggerDateOffsetUnit gets DividendFXTriggerDateOffsetUnit, Tag 42267.
func (m NoStreams) GetDividendFXTriggerDateOffsetUnit() (v string, err quickfix.MessageRejectError) {
	var f field.DividendFXTriggerDateOffsetUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDividendFXTriggerDateOffsetDayType gets DividendFXTriggerDateOffsetDayType, Tag 42268.
func (m NoStreams) GetDividendFXTriggerDateOffsetDayType() (v int, err quickfix.MessageRejectError) {
	var f field.DividendFXTriggerDateOffsetDayTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDividendFXTriggerDateUnadjusted gets DividendFXTriggerDateUnadjusted, Tag 42269.
func (m NoStreams) GetDividendFXTriggerDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.DividendFXTriggerDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDividendFXTriggerDateBusinessDayConvention gets DividendFXTriggerDateBusinessDayConvention, Tag 42270.
func (m NoStreams) GetDividendFXTriggerDateBusinessDayConvention() (v int, err quickfix.MessageRejectError) {
	var f field.DividendFXTriggerDateBusinessDayConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoDividendFXTriggerDateBusinessCenters gets NoDividendFXTriggerDateBusinessCenters, Tag 42272.
func (m NoStreams) GetNoDividendFXTriggerDateBusinessCenters() (NoDividendFXTriggerDateBusinessCentersRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoDividendFXTriggerDateBusinessCentersRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetDividendFXTriggerDateAdjusted gets DividendFXTriggerDateAdjusted, Tag 42271.
func (m NoStreams) GetDividendFXTriggerDateAdjusted() (v string, err quickfix.MessageRejectError) {
	var f field.DividendFXTriggerDateAdjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDividendFloatingRateIndex gets DividendFloatingRateIndex, Tag 42218.
func (m NoStreams) GetDividendFloatingRateIndex() (v string, err quickfix.MessageRejectError) {
	var f field.DividendFloatingRateIndexField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDividendFloatingRateIndexCurvePeriod gets DividendFloatingRateIndexCurvePeriod, Tag 42219.
func (m NoStreams) GetDividendFloatingRateIndexCurvePeriod() (v int, err quickfix.MessageRejectError) {
	var f field.DividendFloatingRateIndexCurvePeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDividendFloatingRateIndexCurveUnit gets DividendFloatingRateIndexCurveUnit, Tag 42220.
func (m NoStreams) GetDividendFloatingRateIndexCurveUnit() (v string, err quickfix.MessageRejectError) {
	var f field.DividendFloatingRateIndexCurveUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDividendFloatingRateMultiplier gets DividendFloatingRateMultiplier, Tag 42221.
func (m NoStreams) GetDividendFloatingRateMultiplier() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.DividendFloatingRateMultiplierField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDividendFloatingRateSpread gets DividendFloatingRateSpread, Tag 42222.
func (m NoStreams) GetDividendFloatingRateSpread() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.DividendFloatingRateSpreadField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDividendFloatingRateSpreadPositionType gets DividendFloatingRateSpreadPositionType, Tag 42223.
func (m NoStreams) GetDividendFloatingRateSpreadPositionType() (v int, err quickfix.MessageRejectError) {
	var f field.DividendFloatingRateSpreadPositionTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDividendFloatingRateTreatment gets DividendFloatingRateTreatment, Tag 42224.
func (m NoStreams) GetDividendFloatingRateTreatment() (v int, err quickfix.MessageRejectError) {
	var f field.DividendFloatingRateTreatmentField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDividendCapRate gets DividendCapRate, Tag 42225.
func (m NoStreams) GetDividendCapRate() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.DividendCapRateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDividendCapRateBuySide gets DividendCapRateBuySide, Tag 42226.
func (m NoStreams) GetDividendCapRateBuySide() (v int, err quickfix.MessageRejectError) {
	var f field.DividendCapRateBuySideField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDividendCapRateSellSide gets DividendCapRateSellSide, Tag 42227.
func (m NoStreams) GetDividendCapRateSellSide() (v int, err quickfix.MessageRejectError) {
	var f field.DividendCapRateSellSideField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDividendFloorRate gets DividendFloorRate, Tag 42228.
func (m NoStreams) GetDividendFloorRate() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.DividendFloorRateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDividendFloorRateBuySide gets DividendFloorRateBuySide, Tag 42229.
func (m NoStreams) GetDividendFloorRateBuySide() (v int, err quickfix.MessageRejectError) {
	var f field.DividendFloorRateBuySideField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDividendFloorRateSellSide gets DividendFloorRateSellSide, Tag 42230.
func (m NoStreams) GetDividendFloorRateSellSide() (v int, err quickfix.MessageRejectError) {
	var f field.DividendFloorRateSellSideField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDividendInitialRate gets DividendInitialRate, Tag 42231.
func (m NoStreams) GetDividendInitialRate() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.DividendInitialRateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDividendFinalRateRoundingDirection gets DividendFinalRateRoundingDirection, Tag 42232.
func (m NoStreams) GetDividendFinalRateRoundingDirection() (v string, err quickfix.MessageRejectError) {
	var f field.DividendFinalRateRoundingDirectionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDividendFinalRatePrecision gets DividendFinalRatePrecision, Tag 42233.
func (m NoStreams) GetDividendFinalRatePrecision() (v int, err quickfix.MessageRejectError) {
	var f field.DividendFinalRatePrecisionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDividendAveragingMethod gets DividendAveragingMethod, Tag 42234.
func (m NoStreams) GetDividendAveragingMethod() (v int, err quickfix.MessageRejectError) {
	var f field.DividendAveragingMethodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDividendNegativeRateTreatment gets DividendNegativeRateTreatment, Tag 42235.
func (m NoStreams) GetDividendNegativeRateTreatment() (v int, err quickfix.MessageRejectError) {
	var f field.DividendNegativeRateTreatmentField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDividendAccrualFixedRate gets DividendAccrualFixedRate, Tag 42253.
func (m NoStreams) GetDividendAccrualFixedRate() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.DividendAccrualFixedRateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDividendAccrualPaymentDateRelativeTo gets DividendAccrualPaymentDateRelativeTo, Tag 42238.
func (m NoStreams) GetDividendAccrualPaymentDateRelativeTo() (v int, err quickfix.MessageRejectError) {
	var f field.DividendAccrualPaymentDateRelativeToField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDividendAccrualPaymentDateOffsetPeriod gets DividendAccrualPaymentDateOffsetPeriod, Tag 42239.
func (m NoStreams) GetDividendAccrualPaymentDateOffsetPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.DividendAccrualPaymentDateOffsetPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDividendAccrualPaymentDateOffsetUnit gets DividendAccrualPaymentDateOffsetUnit, Tag 42240.
func (m NoStreams) GetDividendAccrualPaymentDateOffsetUnit() (v string, err quickfix.MessageRejectError) {
	var f field.DividendAccrualPaymentDateOffsetUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDividendAccrualPaymentDateOffsetDayType gets DividendAccrualPaymentDateOffsetDayType, Tag 42241.
func (m NoStreams) GetDividendAccrualPaymentDateOffsetDayType() (v int, err quickfix.MessageRejectError) {
	var f field.DividendAccrualPaymentDateOffsetDayTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDividendAccrualPaymentDateUnadjusted gets DividendAccrualPaymentDateUnadjusted, Tag 42242.
func (m NoStreams) GetDividendAccrualPaymentDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.DividendAccrualPaymentDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDividendAccrualPaymeentDateBusinessDayConvention gets DividendAccrualPaymeentDateBusinessDayConvention, Tag 42243.
func (m NoStreams) GetDividendAccrualPaymeentDateBusinessDayConvention() (v int, err quickfix.MessageRejectError) {
	var f field.DividendAccrualPaymeentDateBusinessDayConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoDividendAccrualPaymentDateBusinessCenters gets NoDividendAccrualPaymentDateBusinessCenters, Tag 42236.
func (m NoStreams) GetNoDividendAccrualPaymentDateBusinessCenters() (NoDividendAccrualPaymentDateBusinessCentersRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoDividendAccrualPaymentDateBusinessCentersRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetDividendAccrualPaymentDateAdjusted gets DividendAccrualPaymentDateAdjusted, Tag 42244.
func (m NoStreams) GetDividendAccrualPaymentDateAdjusted() (v string, err quickfix.MessageRejectError) {
	var f field.DividendAccrualPaymentDateAdjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDividendCompoundingMethod gets DividendCompoundingMethod, Tag 42254.
func (m NoStreams) GetDividendCompoundingMethod() (v int, err quickfix.MessageRejectError) {
	var f field.DividendCompoundingMethodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDividendNumOfIndexUnits gets DividendNumOfIndexUnits, Tag 42255.
func (m NoStreams) GetDividendNumOfIndexUnits() (v int, err quickfix.MessageRejectError) {
	var f field.DividendNumOfIndexUnitsField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDividendCashPercentage gets DividendCashPercentage, Tag 42256.
func (m NoStreams) GetDividendCashPercentage() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.DividendCashPercentageField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDividendCashEquivalentPercentage gets DividendCashEquivalentPercentage, Tag 42257.
func (m NoStreams) GetDividendCashEquivalentPercentage() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.DividendCashEquivalentPercentageField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNonCashDividendTreatment gets NonCashDividendTreatment, Tag 42258.
func (m NoStreams) GetNonCashDividendTreatment() (v enum.NonCashDividendTreatment, err quickfix.MessageRejectError) {
	var f field.NonCashDividendTreatmentField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDividendComposition gets DividendComposition, Tag 42259.
func (m NoStreams) GetDividendComposition() (v enum.DividendComposition, err quickfix.MessageRejectError) {
	var f field.DividendCompositionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetSpecialDividendsIndicator gets SpecialDividendsIndicator, Tag 42260.
func (m NoStreams) GetSpecialDividendsIndicator() (v bool, err quickfix.MessageRejectError) {
	var f field.SpecialDividendsIndicatorField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetMaterialDividendsIndicator gets MaterialDividendsIndicator, Tag 42261.
func (m NoStreams) GetMaterialDividendsIndicator() (v bool, err quickfix.MessageRejectError) {
	var f field.MaterialDividendsIndicatorField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetOptionsExchangeDividendsIndicator gets OptionsExchangeDividendsIndicator, Tag 42262.
func (m NoStreams) GetOptionsExchangeDividendsIndicator() (v bool, err quickfix.MessageRejectError) {
	var f field.OptionsExchangeDividendsIndicatorField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetAdditionalDividendsIndicator gets AdditionalDividendsIndicator, Tag 42263.
func (m NoStreams) GetAdditionalDividendsIndicator() (v bool, err quickfix.MessageRejectError) {
	var f field.AdditionalDividendsIndicatorField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetAllDividendsIndicator gets AllDividendsIndicator, Tag 42264.
func (m NoStreams) GetAllDividendsIndicator() (v bool, err quickfix.MessageRejectError) {
	var f field.AllDividendsIndicatorField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetReturnRateNotionalReset gets ReturnRateNotionalReset, Tag 42668.
func (m NoStreams) GetReturnRateNotionalReset() (v bool, err quickfix.MessageRejectError) {
	var f field.ReturnRateNotionalResetField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoReturnRates gets NoReturnRates, Tag 42735.
func (m NoStreams) GetNoReturnRates() (NoReturnRatesRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoReturnRatesRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetPaymentStreamLinkInitialLevel gets PaymentStreamLinkInitialLevel, Tag 42669.
func (m NoStreams) GetPaymentStreamLinkInitialLevel() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.PaymentStreamLinkInitialLevelField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamLinkClosingLevelIndicator gets PaymentStreamLinkClosingLevelIndicator, Tag 42670.
func (m NoStreams) GetPaymentStreamLinkClosingLevelIndicator() (v bool, err quickfix.MessageRejectError) {
	var f field.PaymentStreamLinkClosingLevelIndicatorField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamLinkExpiringLevelIndicator gets PaymentStreamLinkExpiringLevelIndicator, Tag 42671.
func (m NoStreams) GetPaymentStreamLinkExpiringLevelIndicator() (v bool, err quickfix.MessageRejectError) {
	var f field.PaymentStreamLinkExpiringLevelIndicatorField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamLinkEstimatedTradingDays gets PaymentStreamLinkEstimatedTradingDays, Tag 42672.
func (m NoStreams) GetPaymentStreamLinkEstimatedTradingDays() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStreamLinkEstimatedTradingDaysField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamLinkStrikePrice gets PaymentStreamLinkStrikePrice, Tag 42673.
func (m NoStreams) GetPaymentStreamLinkStrikePrice() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.PaymentStreamLinkStrikePriceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamLinkStrikePriceType gets PaymentStreamLinkStrikePriceType, Tag 42674.
func (m NoStreams) GetPaymentStreamLinkStrikePriceType() (v enum.PaymentStreamLinkStrikePriceType, err quickfix.MessageRejectError) {
	var f field.PaymentStreamLinkStrikePriceTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamLinkMaximumBoundary gets PaymentStreamLinkMaximumBoundary, Tag 42675.
func (m NoStreams) GetPaymentStreamLinkMaximumBoundary() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.PaymentStreamLinkMaximumBoundaryField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamLinkMinimumBoundary gets PaymentStreamLinkMinimumBoundary, Tag 42676.
func (m NoStreams) GetPaymentStreamLinkMinimumBoundary() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.PaymentStreamLinkMinimumBoundaryField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamLinkNumberOfDataSeries gets PaymentStreamLinkNumberOfDataSeries, Tag 42677.
func (m NoStreams) GetPaymentStreamLinkNumberOfDataSeries() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStreamLinkNumberOfDataSeriesField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamVarianceUnadjustedCap gets PaymentStreamVarianceUnadjustedCap, Tag 42678.
func (m NoStreams) GetPaymentStreamVarianceUnadjustedCap() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.PaymentStreamVarianceUnadjustedCapField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamRealizedVarianceMethod gets PaymentStreamRealizedVarianceMethod, Tag 42679.
func (m NoStreams) GetPaymentStreamRealizedVarianceMethod() (v enum.PaymentStreamRealizedVarianceMethod, err quickfix.MessageRejectError) {
	var f field.PaymentStreamRealizedVarianceMethodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamDaysAdjustmentIndicator gets PaymentStreamDaysAdjustmentIndicator, Tag 42680.
func (m NoStreams) GetPaymentStreamDaysAdjustmentIndicator() (v bool, err quickfix.MessageRejectError) {
	var f field.PaymentStreamDaysAdjustmentIndicatorField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamNearestExchangeContractRefID gets PaymentStreamNearestExchangeContractRefID, Tag 42681.
func (m NoStreams) GetPaymentStreamNearestExchangeContractRefID() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStreamNearestExchangeContractRefIDField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamVegaNotionalAmount gets PaymentStreamVegaNotionalAmount, Tag 42682.
func (m NoStreams) GetPaymentStreamVegaNotionalAmount() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.PaymentStreamVegaNotionalAmountField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamRateIndexID gets PaymentStreamRateIndexID, Tag 43090.
func (m NoStreams) GetPaymentStreamRateIndexID() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStreamRateIndexIDField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamRateIndexIDSource gets PaymentStreamRateIndexIDSource, Tag 43091.
func (m NoStreams) GetPaymentStreamRateIndexIDSource() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStreamRateIndexIDSourceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamNonDeliverableRefCurrency gets PaymentStreamNonDeliverableRefCurrency, Tag 40817.
func (m NoStreams) GetPaymentStreamNonDeliverableRefCurrency() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStreamNonDeliverableRefCurrencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamNonDeliverableFixingDatesBusinessDayConvention gets PaymentStreamNonDeliverableFixingDatesBusinessDayConvention, Tag 40818.
func (m NoStreams) GetPaymentStreamNonDeliverableFixingDatesBusinessDayConvention() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStreamNonDeliverableFixingDatesBusinessDayConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoPaymentStreamNonDeliverableFixingDatesBusinessCenters gets NoPaymentStreamNonDeliverableFixingDatesBusinessCenters, Tag 40946.
func (m NoStreams) GetNoPaymentStreamNonDeliverableFixingDatesBusinessCenters() (NoPaymentStreamNonDeliverableFixingDatesBusinessCentersRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoPaymentStreamNonDeliverableFixingDatesBusinessCentersRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetPaymentStreamNonDeliverableFixingDatesRelativeTo gets PaymentStreamNonDeliverableFixingDatesRelativeTo, Tag 40820.
func (m NoStreams) GetPaymentStreamNonDeliverableFixingDatesRelativeTo() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStreamNonDeliverableFixingDatesRelativeToField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamNonDeliverableFixingDatesOffsetPeriod gets PaymentStreamNonDeliverableFixingDatesOffsetPeriod, Tag 40821.
func (m NoStreams) GetPaymentStreamNonDeliverableFixingDatesOffsetPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStreamNonDeliverableFixingDatesOffsetPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamNonDeliverableFixingDatesOffsetUnit gets PaymentStreamNonDeliverableFixingDatesOffsetUnit, Tag 40822.
func (m NoStreams) GetPaymentStreamNonDeliverableFixingDatesOffsetUnit() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStreamNonDeliverableFixingDatesOffsetUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamNonDeliverableFixingDatesOffsetDayType gets PaymentStreamNonDeliverableFixingDatesOffsetDayType, Tag 40823.
func (m NoStreams) GetPaymentStreamNonDeliverableFixingDatesOffsetDayType() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStreamNonDeliverableFixingDatesOffsetDayTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamNonDeliverableSettlRateSource gets PaymentStreamNonDeliverableSettlRateSource, Tag 40371.
func (m NoStreams) GetPaymentStreamNonDeliverableSettlRateSource() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStreamNonDeliverableSettlRateSourceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamNonDeliverableSettlReferencePage gets PaymentStreamNonDeliverableSettlReferencePage, Tag 40372.
func (m NoStreams) GetPaymentStreamNonDeliverableSettlReferencePage() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStreamNonDeliverableSettlReferencePageField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoNonDeliverableFixingDates gets NoNonDeliverableFixingDates, Tag 40825.
func (m NoStreams) GetNoNonDeliverableFixingDates() (NoNonDeliverableFixingDatesRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoNonDeliverableFixingDatesRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetNoSettlRateFallbacks gets NoSettlRateFallbacks, Tag 40085.
func (m NoStreams) GetNoSettlRateFallbacks() (NoSettlRateFallbacksRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoSettlRateFallbacksRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetPaymentStreamFlatRateIndicator gets PaymentStreamFlatRateIndicator, Tag 41180.
func (m NoStreams) GetPaymentStreamFlatRateIndicator() (v bool, err quickfix.MessageRejectError) {
	var f field.PaymentStreamFlatRateIndicatorField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamFlatRateAmount gets PaymentStreamFlatRateAmount, Tag 41181.
func (m NoStreams) GetPaymentStreamFlatRateAmount() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.PaymentStreamFlatRateAmountField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamFlatRateCurrency gets PaymentStreamFlatRateCurrency, Tag 41182.
func (m NoStreams) GetPaymentStreamFlatRateCurrency() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStreamFlatRateCurrencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamMaximumPaymentAmount gets PaymentStreamMaximumPaymentAmount, Tag 41183.
func (m NoStreams) GetPaymentStreamMaximumPaymentAmount() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.PaymentStreamMaximumPaymentAmountField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamMaximumPaymentCurrency gets PaymentStreamMaximumPaymentCurrency, Tag 41184.
func (m NoStreams) GetPaymentStreamMaximumPaymentCurrency() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStreamMaximumPaymentCurrencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamMaximumTransactionAmount gets PaymentStreamMaximumTransactionAmount, Tag 41185.
func (m NoStreams) GetPaymentStreamMaximumTransactionAmount() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.PaymentStreamMaximumTransactionAmountField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamMaximumTransactionCurrency gets PaymentStreamMaximumTransactionCurrency, Tag 41186.
func (m NoStreams) GetPaymentStreamMaximumTransactionCurrency() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStreamMaximumTransactionCurrencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamCashSettlIndicator gets PaymentStreamCashSettlIndicator, Tag 42600.
func (m NoStreams) GetPaymentStreamCashSettlIndicator() (v bool, err quickfix.MessageRejectError) {
	var f field.PaymentStreamCashSettlIndicatorField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamCompoundingXIDRef gets PaymentStreamCompoundingXIDRef, Tag 42601.
func (m NoStreams) GetPaymentStreamCompoundingXIDRef() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStreamCompoundingXIDRefField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamCompoundingSpread gets PaymentStreamCompoundingSpread, Tag 42602.
func (m NoStreams) GetPaymentStreamCompoundingSpread() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.PaymentStreamCompoundingSpreadField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamInterpolationMethod gets PaymentStreamInterpolationMethod, Tag 42603.
func (m NoStreams) GetPaymentStreamInterpolationMethod() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStreamInterpolationMethodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamInterpolationPeriod gets PaymentStreamInterpolationPeriod, Tag 42604.
func (m NoStreams) GetPaymentStreamInterpolationPeriod() (v enum.PaymentStreamInterpolationPeriod, err quickfix.MessageRejectError) {
	var f field.PaymentStreamInterpolationPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamCompoundingFixedRate gets PaymentStreamCompoundingFixedRate, Tag 42605.
func (m NoStreams) GetPaymentStreamCompoundingFixedRate() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.PaymentStreamCompoundingFixedRateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamCompoundingRateIndex gets PaymentStreamCompoundingRateIndex, Tag 42628.
func (m NoStreams) GetPaymentStreamCompoundingRateIndex() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStreamCompoundingRateIndexField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamCompoundingRateIndexCurvePeriod gets PaymentStreamCompoundingRateIndexCurvePeriod, Tag 42629.
func (m NoStreams) GetPaymentStreamCompoundingRateIndexCurvePeriod() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStreamCompoundingRateIndexCurvePeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamCompoundingRateIndexCurveUnit gets PaymentStreamCompoundingRateIndexCurveUnit, Tag 42630.
func (m NoStreams) GetPaymentStreamCompoundingRateIndexCurveUnit() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStreamCompoundingRateIndexCurveUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamCompoundingRateMultiplier gets PaymentStreamCompoundingRateMultiplier, Tag 42631.
func (m NoStreams) GetPaymentStreamCompoundingRateMultiplier() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.PaymentStreamCompoundingRateMultiplierField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamCompoundingRateSpread gets PaymentStreamCompoundingRateSpread, Tag 42632.
func (m NoStreams) GetPaymentStreamCompoundingRateSpread() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.PaymentStreamCompoundingRateSpreadField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamCompoundingRateSpreadPositionType gets PaymentStreamCompoundingRateSpreadPositionType, Tag 42633.
func (m NoStreams) GetPaymentStreamCompoundingRateSpreadPositionType() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStreamCompoundingRateSpreadPositionTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamCompoundingRateTreatment gets PaymentStreamCompoundingRateTreatment, Tag 42634.
func (m NoStreams) GetPaymentStreamCompoundingRateTreatment() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStreamCompoundingRateTreatmentField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamCompoundingCapRate gets PaymentStreamCompoundingCapRate, Tag 42635.
func (m NoStreams) GetPaymentStreamCompoundingCapRate() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.PaymentStreamCompoundingCapRateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamCompoundingCapRateBuySide gets PaymentStreamCompoundingCapRateBuySide, Tag 42636.
func (m NoStreams) GetPaymentStreamCompoundingCapRateBuySide() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStreamCompoundingCapRateBuySideField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamCompoundingCapRateSellSide gets PaymentStreamCompoundingCapRateSellSide, Tag 42637.
func (m NoStreams) GetPaymentStreamCompoundingCapRateSellSide() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStreamCompoundingCapRateSellSideField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamCompoundingFloorRate gets PaymentStreamCompoundingFloorRate, Tag 42638.
func (m NoStreams) GetPaymentStreamCompoundingFloorRate() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.PaymentStreamCompoundingFloorRateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamCompoundingFloorRateBuySide gets PaymentStreamCompoundingFloorRateBuySide, Tag 42639.
func (m NoStreams) GetPaymentStreamCompoundingFloorRateBuySide() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStreamCompoundingFloorRateBuySideField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamCompoundingFloorRateSellSide gets PaymentStreamCompoundingFloorRateSellSide, Tag 42640.
func (m NoStreams) GetPaymentStreamCompoundingFloorRateSellSide() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStreamCompoundingFloorRateSellSideField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamCompoundingInitialRate gets PaymentStreamCompoundingInitialRate, Tag 42641.
func (m NoStreams) GetPaymentStreamCompoundingInitialRate() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.PaymentStreamCompoundingInitialRateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamCompoundingFinalRateRoundingDirection gets PaymentStreamCompoundingFinalRateRoundingDirection, Tag 42642.
func (m NoStreams) GetPaymentStreamCompoundingFinalRateRoundingDirection() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStreamCompoundingFinalRateRoundingDirectionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamCompoundingFinalRatePrecision gets PaymentStreamCompoundingFinalRatePrecision, Tag 42643.
func (m NoStreams) GetPaymentStreamCompoundingFinalRatePrecision() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStreamCompoundingFinalRatePrecisionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamCompoundingAveragingMethod gets PaymentStreamCompoundingAveragingMethod, Tag 42644.
func (m NoStreams) GetPaymentStreamCompoundingAveragingMethod() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStreamCompoundingAveragingMethodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamCompoundingNegativeRateTreatment gets PaymentStreamCompoundingNegativeRateTreatment, Tag 42645.
func (m NoStreams) GetPaymentStreamCompoundingNegativeRateTreatment() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStreamCompoundingNegativeRateTreatmentField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamCompoundingDatesBusinessDayConvention gets PaymentStreamCompoundingDatesBusinessDayConvention, Tag 42609.
func (m NoStreams) GetPaymentStreamCompoundingDatesBusinessDayConvention() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStreamCompoundingDatesBusinessDayConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoPaymentStreamCompoundingDatesBusinessCenters gets NoPaymentStreamCompoundingDatesBusinessCenters, Tag 42620.
func (m NoStreams) GetNoPaymentStreamCompoundingDatesBusinessCenters() (NoPaymentStreamCompoundingDatesBusinessCentersRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoPaymentStreamCompoundingDatesBusinessCentersRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetNoPaymentStreamCompoundingDates gets NoPaymentStreamCompoundingDates, Tag 42606.
func (m NoStreams) GetNoPaymentStreamCompoundingDates() (NoPaymentStreamCompoundingDatesRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoPaymentStreamCompoundingDatesRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetPaymentStreamCompoundingDatesRelativeTo gets PaymentStreamCompoundingDatesRelativeTo, Tag 42610.
func (m NoStreams) GetPaymentStreamCompoundingDatesRelativeTo() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStreamCompoundingDatesRelativeToField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamCompoundingDatesOffsetPeriod gets PaymentStreamCompoundingDatesOffsetPeriod, Tag 42611.
func (m NoStreams) GetPaymentStreamCompoundingDatesOffsetPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStreamCompoundingDatesOffsetPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamCompoundingDatesOffsetUnit gets PaymentStreamCompoundingDatesOffsetUnit, Tag 42612.
func (m NoStreams) GetPaymentStreamCompoundingDatesOffsetUnit() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStreamCompoundingDatesOffsetUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamCompoundingDatesOffsetDayType gets PaymentStreamCompoundingDatesOffsetDayType, Tag 42613.
func (m NoStreams) GetPaymentStreamCompoundingDatesOffsetDayType() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStreamCompoundingDatesOffsetDayTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamCompoundingPeriodSkip gets PaymentStreamCompoundingPeriodSkip, Tag 42614.
func (m NoStreams) GetPaymentStreamCompoundingPeriodSkip() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStreamCompoundingPeriodSkipField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamCompoundingStartDateUnadjusted gets PaymentStreamCompoundingStartDateUnadjusted, Tag 42646.
func (m NoStreams) GetPaymentStreamCompoundingStartDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStreamCompoundingStartDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamCompoundingStartDateRelativeTo gets PaymentStreamCompoundingStartDateRelativeTo, Tag 42647.
func (m NoStreams) GetPaymentStreamCompoundingStartDateRelativeTo() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStreamCompoundingStartDateRelativeToField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamCompoundingStartDateOffsetPeriod gets PaymentStreamCompoundingStartDateOffsetPeriod, Tag 42648.
func (m NoStreams) GetPaymentStreamCompoundingStartDateOffsetPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStreamCompoundingStartDateOffsetPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamCompoundingStartDateOffsetUnit gets PaymentStreamCompoundingStartDateOffsetUnit, Tag 42649.
func (m NoStreams) GetPaymentStreamCompoundingStartDateOffsetUnit() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStreamCompoundingStartDateOffsetUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamCompoundingStartDateOffsetDayType gets PaymentStreamCompoundingStartDateOffsetDayType, Tag 42650.
func (m NoStreams) GetPaymentStreamCompoundingStartDateOffsetDayType() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStreamCompoundingStartDateOffsetDayTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamCompoundingStartDateAdjusted gets PaymentStreamCompoundingStartDateAdjusted, Tag 42651.
func (m NoStreams) GetPaymentStreamCompoundingStartDateAdjusted() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStreamCompoundingStartDateAdjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamCompoundingEndDateUnadjusted gets PaymentStreamCompoundingEndDateUnadjusted, Tag 42622.
func (m NoStreams) GetPaymentStreamCompoundingEndDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStreamCompoundingEndDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamCompoundingEndDateRelativeTo gets PaymentStreamCompoundingEndDateRelativeTo, Tag 42623.
func (m NoStreams) GetPaymentStreamCompoundingEndDateRelativeTo() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStreamCompoundingEndDateRelativeToField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamCompoundingEndDateOffsetPeriod gets PaymentStreamCompoundingEndDateOffsetPeriod, Tag 42624.
func (m NoStreams) GetPaymentStreamCompoundingEndDateOffsetPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStreamCompoundingEndDateOffsetPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamCompoundingEndDateOffsetUnit gets PaymentStreamCompoundingEndDateOffsetUnit, Tag 42625.
func (m NoStreams) GetPaymentStreamCompoundingEndDateOffsetUnit() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStreamCompoundingEndDateOffsetUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamCompoundingEndDateOffsetDayType gets PaymentStreamCompoundingEndDateOffsetDayType, Tag 42626.
func (m NoStreams) GetPaymentStreamCompoundingEndDateOffsetDayType() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStreamCompoundingEndDateOffsetDayTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamCompoundingEndDateAdjusted gets PaymentStreamCompoundingEndDateAdjusted, Tag 42627.
func (m NoStreams) GetPaymentStreamCompoundingEndDateAdjusted() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStreamCompoundingEndDateAdjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamCompoundingFrequencyPeriod gets PaymentStreamCompoundingFrequencyPeriod, Tag 42615.
func (m NoStreams) GetPaymentStreamCompoundingFrequencyPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStreamCompoundingFrequencyPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamCompoundingFrequencyUnit gets PaymentStreamCompoundingFrequencyUnit, Tag 42616.
func (m NoStreams) GetPaymentStreamCompoundingFrequencyUnit() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStreamCompoundingFrequencyUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamCompoundingRollConvention gets PaymentStreamCompoundingRollConvention, Tag 42617.
func (m NoStreams) GetPaymentStreamCompoundingRollConvention() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStreamCompoundingRollConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamBoundsFirstDateUnadjusted gets PaymentStreamBoundsFirstDateUnadjusted, Tag 42618.
func (m NoStreams) GetPaymentStreamBoundsFirstDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStreamBoundsFirstDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamBoundsLastDateUnadjusted gets PaymentStreamBoundsLastDateUnadjusted, Tag 42619.
func (m NoStreams) GetPaymentStreamBoundsLastDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStreamBoundsLastDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamOtherDayCount gets PaymentStreamOtherDayCount, Tag 43106.
func (m NoStreams) GetPaymentStreamOtherDayCount() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStreamOtherDayCountField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoPaymentSchedules gets NoPaymentSchedules, Tag 40828.
func (m NoStreams) GetNoPaymentSchedules() (NoPaymentSchedulesRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoPaymentSchedulesRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetNoPaymentStubs gets NoPaymentStubs, Tag 40872.
func (m NoStreams) GetNoPaymentStubs() (NoPaymentStubsRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoPaymentStubsRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetStreamText gets StreamText, Tag 40056.
func (m NoStreams) GetStreamText() (v string, err quickfix.MessageRejectError) {
	var f field.StreamTextField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetEncodedStreamTextLen gets EncodedStreamTextLen, Tag 40982.
func (m NoStreams) GetEncodedStreamTextLen() (v int, err quickfix.MessageRejectError) {
	var f field.EncodedStreamTextLenField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetEncodedStreamText gets EncodedStreamText, Tag 40983.
func (m NoStreams) GetEncodedStreamText() (v string, err quickfix.MessageRejectError) {
	var f field.EncodedStreamTextField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStreamXID gets StreamXID, Tag 41303.
func (m NoStreams) GetStreamXID() (v string, err quickfix.MessageRejectError) {
	var f field.StreamXIDField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStreamNotionalXIDRef gets StreamNotionalXIDRef, Tag 41305.
func (m NoStreams) GetStreamNotionalXIDRef() (v string, err quickfix.MessageRejectError) {
	var f field.StreamNotionalXIDRefField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStreamNotionalFrequencyPeriod gets StreamNotionalFrequencyPeriod, Tag 41306.
func (m NoStreams) GetStreamNotionalFrequencyPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.StreamNotionalFrequencyPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStreamNotionalFrequencyUnit gets StreamNotionalFrequencyUnit, Tag 41307.
func (m NoStreams) GetStreamNotionalFrequencyUnit() (v string, err quickfix.MessageRejectError) {
	var f field.StreamNotionalFrequencyUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStreamNotionalCommodityFrequency gets StreamNotionalCommodityFrequency, Tag 41308.
func (m NoStreams) GetStreamNotionalCommodityFrequency() (v enum.StreamNotionalCommodityFrequency, err quickfix.MessageRejectError) {
	var f field.StreamNotionalCommodityFrequencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStreamNotionalUnitOfMeasure gets StreamNotionalUnitOfMeasure, Tag 41309.
func (m NoStreams) GetStreamNotionalUnitOfMeasure() (v string, err quickfix.MessageRejectError) {
	var f field.StreamNotionalUnitOfMeasureField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStreamTotalNotional gets StreamTotalNotional, Tag 41310.
func (m NoStreams) GetStreamTotalNotional() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.StreamTotalNotionalField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStreamTotalNotionalUnitOfMeasure gets StreamTotalNotionalUnitOfMeasure, Tag 41311.
func (m NoStreams) GetStreamTotalNotionalUnitOfMeasure() (v string, err quickfix.MessageRejectError) {
	var f field.StreamTotalNotionalUnitOfMeasureField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStreamCommodityBase gets StreamCommodityBase, Tag 41251.
func (m NoStreams) GetStreamCommodityBase() (v string, err quickfix.MessageRejectError) {
	var f field.StreamCommodityBaseField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStreamCommodityType gets StreamCommodityType, Tag 41252.
func (m NoStreams) GetStreamCommodityType() (v string, err quickfix.MessageRejectError) {
	var f field.StreamCommodityTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStreamCommoditySecurityID gets StreamCommoditySecurityID, Tag 41253.
func (m NoStreams) GetStreamCommoditySecurityID() (v string, err quickfix.MessageRejectError) {
	var f field.StreamCommoditySecurityIDField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStreamCommoditySecurityIDSource gets StreamCommoditySecurityIDSource, Tag 41254.
func (m NoStreams) GetStreamCommoditySecurityIDSource() (v string, err quickfix.MessageRejectError) {
	var f field.StreamCommoditySecurityIDSourceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoStreamCommodityAltIDs gets NoStreamCommodityAltIDs, Tag 41277.
func (m NoStreams) GetNoStreamCommodityAltIDs() (NoStreamCommodityAltIDsRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoStreamCommodityAltIDsRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetStreamCommodityDesc gets StreamCommodityDesc, Tag 41255.
func (m NoStreams) GetStreamCommodityDesc() (v string, err quickfix.MessageRejectError) {
	var f field.StreamCommodityDescField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetEncodedStreamCommodityDescLen gets EncodedStreamCommodityDescLen, Tag 41256.
func (m NoStreams) GetEncodedStreamCommodityDescLen() (v int, err quickfix.MessageRejectError) {
	var f field.EncodedStreamCommodityDescLenField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetEncodedStreamCommodityDesc gets EncodedStreamCommodityDesc, Tag 41257.
func (m NoStreams) GetEncodedStreamCommodityDesc() (v string, err quickfix.MessageRejectError) {
	var f field.EncodedStreamCommodityDescField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoStreamAssetAttributes gets NoStreamAssetAttributes, Tag 41237.
func (m NoStreams) GetNoStreamAssetAttributes() (NoStreamAssetAttributesRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoStreamAssetAttributesRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetStreamCommodityUnitOfMeasure gets StreamCommodityUnitOfMeasure, Tag 41258.
func (m NoStreams) GetStreamCommodityUnitOfMeasure() (v string, err quickfix.MessageRejectError) {
	var f field.StreamCommodityUnitOfMeasureField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStreamCommodityCurrency gets StreamCommodityCurrency, Tag 41259.
func (m NoStreams) GetStreamCommodityCurrency() (v string, err quickfix.MessageRejectError) {
	var f field.StreamCommodityCurrencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStreamCommodityExchange gets StreamCommodityExchange, Tag 41260.
func (m NoStreams) GetStreamCommodityExchange() (v string, err quickfix.MessageRejectError) {
	var f field.StreamCommodityExchangeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStreamCommodityRateSource gets StreamCommodityRateSource, Tag 41261.
func (m NoStreams) GetStreamCommodityRateSource() (v int, err quickfix.MessageRejectError) {
	var f field.StreamCommodityRateSourceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStreamCommodityRateReferencePage gets StreamCommodityRateReferencePage, Tag 41262.
func (m NoStreams) GetStreamCommodityRateReferencePage() (v string, err quickfix.MessageRejectError) {
	var f field.StreamCommodityRateReferencePageField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStreamCommodityRateReferencePageHeading gets StreamCommodityRateReferencePageHeading, Tag 41263.
func (m NoStreams) GetStreamCommodityRateReferencePageHeading() (v string, err quickfix.MessageRejectError) {
	var f field.StreamCommodityRateReferencePageHeadingField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStreamDataProvider gets StreamDataProvider, Tag 41264.
func (m NoStreams) GetStreamDataProvider() (v string, err quickfix.MessageRejectError) {
	var f field.StreamDataProviderField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoStreamCommodityDataSources gets NoStreamCommodityDataSources, Tag 41280.
func (m NoStreams) GetNoStreamCommodityDataSources() (NoStreamCommodityDataSourcesRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoStreamCommodityDataSourcesRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetStreamCommodityPricingType gets StreamCommodityPricingType, Tag 41265.
func (m NoStreams) GetStreamCommodityPricingType() (v string, err quickfix.MessageRejectError) {
	var f field.StreamCommodityPricingTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStreamCommodityNearbySettlDayPeriod gets StreamCommodityNearbySettlDayPeriod, Tag 41266.
func (m NoStreams) GetStreamCommodityNearbySettlDayPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.StreamCommodityNearbySettlDayPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStreamCommodityNearbySettlDayUnit gets StreamCommodityNearbySettlDayUnit, Tag 41267.
func (m NoStreams) GetStreamCommodityNearbySettlDayUnit() (v enum.StreamCommodityNearbySettlDayUnit, err quickfix.MessageRejectError) {
	var f field.StreamCommodityNearbySettlDayUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStreamCommoditySettlDateUnadjusted gets StreamCommoditySettlDateUnadjusted, Tag 41268.
func (m NoStreams) GetStreamCommoditySettlDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.StreamCommoditySettlDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStreamCommoditySettlDateBusinessDayConvention gets StreamCommoditySettlDateBusinessDayConvention, Tag 41269.
func (m NoStreams) GetStreamCommoditySettlDateBusinessDayConvention() (v int, err quickfix.MessageRejectError) {
	var f field.StreamCommoditySettlDateBusinessDayConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoStreamCommoditySettlBusinessCenters gets NoStreamCommoditySettlBusinessCenters, Tag 41249.
func (m NoStreams) GetNoStreamCommoditySettlBusinessCenters() (NoStreamCommoditySettlBusinessCentersRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoStreamCommoditySettlBusinessCentersRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetStreamCommoditySettlDateAdjusted gets StreamCommoditySettlDateAdjusted, Tag 41270.
func (m NoStreams) GetStreamCommoditySettlDateAdjusted() (v string, err quickfix.MessageRejectError) {
	var f field.StreamCommoditySettlDateAdjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStreamCommoditySettlMonth gets StreamCommoditySettlMonth, Tag 41271.
func (m NoStreams) GetStreamCommoditySettlMonth() (v int, err quickfix.MessageRejectError) {
	var f field.StreamCommoditySettlMonthField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStreamCommoditySettlDateRollPeriod gets StreamCommoditySettlDateRollPeriod, Tag 41272.
func (m NoStreams) GetStreamCommoditySettlDateRollPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.StreamCommoditySettlDateRollPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStreamCommoditySettlDateRollUnit gets StreamCommoditySettlDateRollUnit, Tag 41273.
func (m NoStreams) GetStreamCommoditySettlDateRollUnit() (v enum.StreamCommoditySettlDateRollUnit, err quickfix.MessageRejectError) {
	var f field.StreamCommoditySettlDateRollUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStreamCommoditySettlDayType gets StreamCommoditySettlDayType, Tag 41274.
func (m NoStreams) GetStreamCommoditySettlDayType() (v int, err quickfix.MessageRejectError) {
	var f field.StreamCommoditySettlDayTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoStreamCommoditySettlPeriods gets NoStreamCommoditySettlPeriods, Tag 41289.
func (m NoStreams) GetNoStreamCommoditySettlPeriods() (NoStreamCommoditySettlPeriodsRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoStreamCommoditySettlPeriodsRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetStreamCommodityXID gets StreamCommodityXID, Tag 41275.
func (m NoStreams) GetStreamCommodityXID() (v string, err quickfix.MessageRejectError) {
	var f field.StreamCommodityXIDField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStreamCommodityXIDRef gets StreamCommodityXIDRef, Tag 41276.
func (m NoStreams) GetStreamCommodityXIDRef() (v string, err quickfix.MessageRejectError) {
	var f field.StreamCommodityXIDRefField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStreamCommodityDeliveryPricingRegion gets StreamCommodityDeliveryPricingRegion, Tag 42587.
func (m NoStreams) GetStreamCommodityDeliveryPricingRegion() (v string, err quickfix.MessageRejectError) {
	var f field.StreamCommodityDeliveryPricingRegionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDeliveryStreamType gets DeliveryStreamType, Tag 41058.
func (m NoStreams) GetDeliveryStreamType() (v enum.DeliveryStreamType, err quickfix.MessageRejectError) {
	var f field.DeliveryStreamTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoDeliveryStreamCommoditySources gets NoDeliveryStreamCommoditySources, Tag 41085.
func (m NoStreams) GetNoDeliveryStreamCommoditySources() (NoDeliveryStreamCommoditySourcesRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoDeliveryStreamCommoditySourcesRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetDeliveryStreamPipeline gets DeliveryStreamPipeline, Tag 41059.
func (m NoStreams) GetDeliveryStreamPipeline() (v string, err quickfix.MessageRejectError) {
	var f field.DeliveryStreamPipelineField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDeliveryStreamEntryPoint gets DeliveryStreamEntryPoint, Tag 41060.
func (m NoStreams) GetDeliveryStreamEntryPoint() (v string, err quickfix.MessageRejectError) {
	var f field.DeliveryStreamEntryPointField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDeliveryStreamWithdrawalPoint gets DeliveryStreamWithdrawalPoint, Tag 41061.
func (m NoStreams) GetDeliveryStreamWithdrawalPoint() (v string, err quickfix.MessageRejectError) {
	var f field.DeliveryStreamWithdrawalPointField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDeliveryStreamDeliveryPoint gets DeliveryStreamDeliveryPoint, Tag 41062.
func (m NoStreams) GetDeliveryStreamDeliveryPoint() (v string, err quickfix.MessageRejectError) {
	var f field.DeliveryStreamDeliveryPointField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDeliveryStreamDeliveryRestriction gets DeliveryStreamDeliveryRestriction, Tag 41063.
func (m NoStreams) GetDeliveryStreamDeliveryRestriction() (v enum.DeliveryStreamDeliveryRestriction, err quickfix.MessageRejectError) {
	var f field.DeliveryStreamDeliveryRestrictionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDeliveryStreamDeliveryContingency gets DeliveryStreamDeliveryContingency, Tag 41064.
func (m NoStreams) GetDeliveryStreamDeliveryContingency() (v string, err quickfix.MessageRejectError) {
	var f field.DeliveryStreamDeliveryContingencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDeliveryStreamDeliveryContingentPartySide gets DeliveryStreamDeliveryContingentPartySide, Tag 41065.
func (m NoStreams) GetDeliveryStreamDeliveryContingentPartySide() (v int, err quickfix.MessageRejectError) {
	var f field.DeliveryStreamDeliveryContingentPartySideField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDeliveryStreamDeliverAtSourceIndicator gets DeliveryStreamDeliverAtSourceIndicator, Tag 41066.
func (m NoStreams) GetDeliveryStreamDeliverAtSourceIndicator() (v bool, err quickfix.MessageRejectError) {
	var f field.DeliveryStreamDeliverAtSourceIndicatorField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDeliveryStreamRiskApportionment gets DeliveryStreamRiskApportionment, Tag 41067.
func (m NoStreams) GetDeliveryStreamRiskApportionment() (v string, err quickfix.MessageRejectError) {
	var f field.DeliveryStreamRiskApportionmentField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDeliveryStreamRiskApportionmentSource gets DeliveryStreamRiskApportionmentSource, Tag 41218.
func (m NoStreams) GetDeliveryStreamRiskApportionmentSource() (v string, err quickfix.MessageRejectError) {
	var f field.DeliveryStreamRiskApportionmentSourceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoDeliveryStreamCycles gets NoDeliveryStreamCycles, Tag 41081.
func (m NoStreams) GetNoDeliveryStreamCycles() (NoDeliveryStreamCyclesRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoDeliveryStreamCyclesRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetDeliveryStreamTitleTransferLocation gets DeliveryStreamTitleTransferLocation, Tag 41068.
func (m NoStreams) GetDeliveryStreamTitleTransferLocation() (v string, err quickfix.MessageRejectError) {
	var f field.DeliveryStreamTitleTransferLocationField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDeliveryStreamTitleTransferCondition gets DeliveryStreamTitleTransferCondition, Tag 41069.
func (m NoStreams) GetDeliveryStreamTitleTransferCondition() (v enum.DeliveryStreamTitleTransferCondition, err quickfix.MessageRejectError) {
	var f field.DeliveryStreamTitleTransferConditionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDeliveryStreamImporterOfRecord gets DeliveryStreamImporterOfRecord, Tag 41070.
func (m NoStreams) GetDeliveryStreamImporterOfRecord() (v string, err quickfix.MessageRejectError) {
	var f field.DeliveryStreamImporterOfRecordField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDeliveryStreamNegativeTolerance gets DeliveryStreamNegativeTolerance, Tag 41071.
func (m NoStreams) GetDeliveryStreamNegativeTolerance() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.DeliveryStreamNegativeToleranceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDeliveryStreamPositiveTolerance gets DeliveryStreamPositiveTolerance, Tag 41072.
func (m NoStreams) GetDeliveryStreamPositiveTolerance() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.DeliveryStreamPositiveToleranceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDeliveryStreamToleranceUnitOfMeasure gets DeliveryStreamToleranceUnitOfMeasure, Tag 41073.
func (m NoStreams) GetDeliveryStreamToleranceUnitOfMeasure() (v string, err quickfix.MessageRejectError) {
	var f field.DeliveryStreamToleranceUnitOfMeasureField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDeliveryStreamToleranceType gets DeliveryStreamToleranceType, Tag 41074.
func (m NoStreams) GetDeliveryStreamToleranceType() (v int, err quickfix.MessageRejectError) {
	var f field.DeliveryStreamToleranceTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDeliveryStreamToleranceOptionSide gets DeliveryStreamToleranceOptionSide, Tag 41075.
func (m NoStreams) GetDeliveryStreamToleranceOptionSide() (v enum.DeliveryStreamToleranceOptionSide, err quickfix.MessageRejectError) {
	var f field.DeliveryStreamToleranceOptionSideField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDeliveryStreamTotalPositiveTolerance gets DeliveryStreamTotalPositiveTolerance, Tag 41076.
func (m NoStreams) GetDeliveryStreamTotalPositiveTolerance() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.DeliveryStreamTotalPositiveToleranceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDeliveryStreamTotalNegativeTolerance gets DeliveryStreamTotalNegativeTolerance, Tag 41077.
func (m NoStreams) GetDeliveryStreamTotalNegativeTolerance() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.DeliveryStreamTotalNegativeToleranceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDeliveryStreamNotionalConversionFactor gets DeliveryStreamNotionalConversionFactor, Tag 41078.
func (m NoStreams) GetDeliveryStreamNotionalConversionFactor() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.DeliveryStreamNotionalConversionFactorField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDeliveryStreamTransportEquipment gets DeliveryStreamTransportEquipment, Tag 41079.
func (m NoStreams) GetDeliveryStreamTransportEquipment() (v string, err quickfix.MessageRejectError) {
	var f field.DeliveryStreamTransportEquipmentField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDeliveryStreamElectingPartySide gets DeliveryStreamElectingPartySide, Tag 41080.
func (m NoStreams) GetDeliveryStreamElectingPartySide() (v enum.DeliveryStreamElectingPartySide, err quickfix.MessageRejectError) {
	var f field.DeliveryStreamElectingPartySideField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDeliveryStreamDeliveryPointSource gets DeliveryStreamDeliveryPointSource, Tag 42192.
func (m NoStreams) GetDeliveryStreamDeliveryPointSource() (v enum.DeliveryStreamDeliveryPointSource, err quickfix.MessageRejectError) {
	var f field.DeliveryStreamDeliveryPointSourceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDeliveryStreamDeliveryPointDesc gets DeliveryStreamDeliveryPointDesc, Tag 42193.
func (m NoStreams) GetDeliveryStreamDeliveryPointDesc() (v string, err quickfix.MessageRejectError) {
	var f field.DeliveryStreamDeliveryPointDescField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDeliveryStreamRouteOrCharter gets DeliveryStreamRouteOrCharter, Tag 43094.
func (m NoStreams) GetDeliveryStreamRouteOrCharter() (v string, err quickfix.MessageRejectError) {
	var f field.DeliveryStreamRouteOrCharterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoDeliverySchedules gets NoDeliverySchedules, Tag 41037.
func (m NoStreams) GetNoDeliverySchedules() (NoDeliverySchedulesRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoDeliverySchedulesRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetStreamVersion gets StreamVersion, Tag 42784.
func (m NoStreams) GetStreamVersion() (v string, err quickfix.MessageRejectError) {
	var f field.StreamVersionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStreamVersionEffectiveDate gets StreamVersionEffectiveDate, Tag 42785.
func (m NoStreams) GetStreamVersionEffectiveDate() (v string, err quickfix.MessageRejectError) {
	var f field.StreamVersionEffectiveDateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStreamNotionalDeterminationMethod gets StreamNotionalDeterminationMethod, Tag 42786.
func (m NoStreams) GetStreamNotionalDeterminationMethod() (v string, err quickfix.MessageRejectError) {
	var f field.StreamNotionalDeterminationMethodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStreamNotionalAdjustments gets StreamNotionalAdjustments, Tag 42787.
func (m NoStreams) GetStreamNotionalAdjustments() (v enum.StreamNotionalAdjustments, err quickfix.MessageRejectError) {
	var f field.StreamNotionalAdjustmentsField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasStreamType returns true if StreamType is present, Tag 40050.
func (m NoStreams) HasStreamType() bool {
	return m.Has(tag.StreamType)
}

// HasStreamDesc returns true if StreamDesc is present, Tag 40051.
func (m NoStreams) HasStreamDesc() bool {
	return m.Has(tag.StreamDesc)
}

// HasStreamPaySide returns true if StreamPaySide is present, Tag 40052.
func (m NoStreams) HasStreamPaySide() bool {
	return m.Has(tag.StreamPaySide)
}

// HasStreamReceiveSide returns true if StreamReceiveSide is present, Tag 40053.
func (m NoStreams) HasStreamReceiveSide() bool {
	return m.Has(tag.StreamReceiveSide)
}

// HasStreamNotional returns true if StreamNotional is present, Tag 40054.
func (m NoStreams) HasStreamNotional() bool {
	return m.Has(tag.StreamNotional)
}

// HasStreamCurrency returns true if StreamCurrency is present, Tag 40055.
func (m NoStreams) HasStreamCurrency() bool {
	return m.Has(tag.StreamCurrency)
}

// HasStreamEffectiveDateUnadjusted returns true if StreamEffectiveDateUnadjusted is present, Tag 40907.
func (m NoStreams) HasStreamEffectiveDateUnadjusted() bool {
	return m.Has(tag.StreamEffectiveDateUnadjusted)
}

// HasStreamEffectiveDateBusinessDayConvention returns true if StreamEffectiveDateBusinessDayConvention is present, Tag 40908.
func (m NoStreams) HasStreamEffectiveDateBusinessDayConvention() bool {
	return m.Has(tag.StreamEffectiveDateBusinessDayConvention)
}

// HasNoStreamEffectiveBusinessCenters returns true if NoStreamEffectiveBusinessCenters is present, Tag 40960.
func (m NoStreams) HasNoStreamEffectiveBusinessCenters() bool {
	return m.Has(tag.NoStreamEffectiveBusinessCenters)
}

// HasStreamEffectiveDateRelativeTo returns true if StreamEffectiveDateRelativeTo is present, Tag 40910.
func (m NoStreams) HasStreamEffectiveDateRelativeTo() bool {
	return m.Has(tag.StreamEffectiveDateRelativeTo)
}

// HasStreamEffectiveDateOffsetPeriod returns true if StreamEffectiveDateOffsetPeriod is present, Tag 40911.
func (m NoStreams) HasStreamEffectiveDateOffsetPeriod() bool {
	return m.Has(tag.StreamEffectiveDateOffsetPeriod)
}

// HasStreamEffectiveDateOffsetUnit returns true if StreamEffectiveDateOffsetUnit is present, Tag 40912.
func (m NoStreams) HasStreamEffectiveDateOffsetUnit() bool {
	return m.Has(tag.StreamEffectiveDateOffsetUnit)
}

// HasStreamEffectiveDateOffsetDayType returns true if StreamEffectiveDateOffsetDayType is present, Tag 40913.
func (m NoStreams) HasStreamEffectiveDateOffsetDayType() bool {
	return m.Has(tag.StreamEffectiveDateOffsetDayType)
}

// HasStreamEffectiveDateAdjusted returns true if StreamEffectiveDateAdjusted is present, Tag 40914.
func (m NoStreams) HasStreamEffectiveDateAdjusted() bool {
	return m.Has(tag.StreamEffectiveDateAdjusted)
}

// HasStreamTerminationDateUnadjusted returns true if StreamTerminationDateUnadjusted is present, Tag 40065.
func (m NoStreams) HasStreamTerminationDateUnadjusted() bool {
	return m.Has(tag.StreamTerminationDateUnadjusted)
}

// HasStreamTerminationDateBusinessDayConvention returns true if StreamTerminationDateBusinessDayConvention is present, Tag 40066.
func (m NoStreams) HasStreamTerminationDateBusinessDayConvention() bool {
	return m.Has(tag.StreamTerminationDateBusinessDayConvention)
}

// HasNoStreamTerminationDateBusinessCenters returns true if NoStreamTerminationDateBusinessCenters is present, Tag 40961.
func (m NoStreams) HasNoStreamTerminationDateBusinessCenters() bool {
	return m.Has(tag.NoStreamTerminationDateBusinessCenters)
}

// HasStreamTerminationDateRelativeTo returns true if StreamTerminationDateRelativeTo is present, Tag 40068.
func (m NoStreams) HasStreamTerminationDateRelativeTo() bool {
	return m.Has(tag.StreamTerminationDateRelativeTo)
}

// HasStreamTerminationDateOffsetPeriod returns true if StreamTerminationDateOffsetPeriod is present, Tag 40069.
func (m NoStreams) HasStreamTerminationDateOffsetPeriod() bool {
	return m.Has(tag.StreamTerminationDateOffsetPeriod)
}

// HasStreamTerminationDateOffsetUnit returns true if StreamTerminationDateOffsetUnit is present, Tag 40070.
func (m NoStreams) HasStreamTerminationDateOffsetUnit() bool {
	return m.Has(tag.StreamTerminationDateOffsetUnit)
}

// HasStreamTerminationDateOffsetDayType returns true if StreamTerminationDateOffsetDayType is present, Tag 40071.
func (m NoStreams) HasStreamTerminationDateOffsetDayType() bool {
	return m.Has(tag.StreamTerminationDateOffsetDayType)
}

// HasStreamTerminationDateAdjusted returns true if StreamTerminationDateAdjusted is present, Tag 40072.
func (m NoStreams) HasStreamTerminationDateAdjusted() bool {
	return m.Has(tag.StreamTerminationDateAdjusted)
}

// HasStreamCalculationPeriodBusinessDayConvention returns true if StreamCalculationPeriodBusinessDayConvention is present, Tag 40073.
func (m NoStreams) HasStreamCalculationPeriodBusinessDayConvention() bool {
	return m.Has(tag.StreamCalculationPeriodBusinessDayConvention)
}

// HasNoStreamCalculationPeriodBusinessCenters returns true if NoStreamCalculationPeriodBusinessCenters is present, Tag 40958.
func (m NoStreams) HasNoStreamCalculationPeriodBusinessCenters() bool {
	return m.Has(tag.NoStreamCalculationPeriodBusinessCenters)
}

// HasStreamFirstPeriodStartDateUnadjusted returns true if StreamFirstPeriodStartDateUnadjusted is present, Tag 40075.
func (m NoStreams) HasStreamFirstPeriodStartDateUnadjusted() bool {
	return m.Has(tag.StreamFirstPeriodStartDateUnadjusted)
}

// HasStreamFirstPeriodStartDateBusinessDayConvention returns true if StreamFirstPeriodStartDateBusinessDayConvention is present, Tag 40076.
func (m NoStreams) HasStreamFirstPeriodStartDateBusinessDayConvention() bool {
	return m.Has(tag.StreamFirstPeriodStartDateBusinessDayConvention)
}

// HasNoStreamFirstPeriodStartDateBusinessCenters returns true if NoStreamFirstPeriodStartDateBusinessCenters is present, Tag 40959.
func (m NoStreams) HasNoStreamFirstPeriodStartDateBusinessCenters() bool {
	return m.Has(tag.NoStreamFirstPeriodStartDateBusinessCenters)
}

// HasStreamFirstPeriodStartDateAdjusted returns true if StreamFirstPeriodStartDateAdjusted is present, Tag 40078.
func (m NoStreams) HasStreamFirstPeriodStartDateAdjusted() bool {
	return m.Has(tag.StreamFirstPeriodStartDateAdjusted)
}

// HasStreamFirstRegularPeriodStartDateUnadjusted returns true if StreamFirstRegularPeriodStartDateUnadjusted is present, Tag 40079.
func (m NoStreams) HasStreamFirstRegularPeriodStartDateUnadjusted() bool {
	return m.Has(tag.StreamFirstRegularPeriodStartDateUnadjusted)
}

// HasStreamFirstCompoundingPeriodEndDateUnadjusted returns true if StreamFirstCompoundingPeriodEndDateUnadjusted is present, Tag 40080.
func (m NoStreams) HasStreamFirstCompoundingPeriodEndDateUnadjusted() bool {
	return m.Has(tag.StreamFirstCompoundingPeriodEndDateUnadjusted)
}

// HasStreamLastRegularPeriodEndDateUnadjusted returns true if StreamLastRegularPeriodEndDateUnadjusted is present, Tag 40081.
func (m NoStreams) HasStreamLastRegularPeriodEndDateUnadjusted() bool {
	return m.Has(tag.StreamLastRegularPeriodEndDateUnadjusted)
}

// HasStreamCalculationFrequencyPeriod returns true if StreamCalculationFrequencyPeriod is present, Tag 40082.
func (m NoStreams) HasStreamCalculationFrequencyPeriod() bool {
	return m.Has(tag.StreamCalculationFrequencyPeriod)
}

// HasStreamCalculationFrequencyUnit returns true if StreamCalculationFrequencyUnit is present, Tag 40083.
func (m NoStreams) HasStreamCalculationFrequencyUnit() bool {
	return m.Has(tag.StreamCalculationFrequencyUnit)
}

// HasStreamCalculationRollConvention returns true if StreamCalculationRollConvention is present, Tag 40084.
func (m NoStreams) HasStreamCalculationRollConvention() bool {
	return m.Has(tag.StreamCalculationRollConvention)
}

// HasStreamCalculationPeriodDatesXID returns true if StreamCalculationPeriodDatesXID is present, Tag 41244.
func (m NoStreams) HasStreamCalculationPeriodDatesXID() bool {
	return m.Has(tag.StreamCalculationPeriodDatesXID)
}

// HasStreamCalculationPeriodDatesXIDRef returns true if StreamCalculationPeriodDatesXIDRef is present, Tag 41245.
func (m NoStreams) HasStreamCalculationPeriodDatesXIDRef() bool {
	return m.Has(tag.StreamCalculationPeriodDatesXIDRef)
}

// HasNoStreamCalculationPeriodDates returns true if NoStreamCalculationPeriodDates is present, Tag 41241.
func (m NoStreams) HasNoStreamCalculationPeriodDates() bool {
	return m.Has(tag.NoStreamCalculationPeriodDates)
}

// HasStreamCalculationBalanceOfFirstPeriod returns true if StreamCalculationBalanceOfFirstPeriod is present, Tag 41246.
func (m NoStreams) HasStreamCalculationBalanceOfFirstPeriod() bool {
	return m.Has(tag.StreamCalculationBalanceOfFirstPeriod)
}

// HasStreamCalculationCorrectionPeriod returns true if StreamCalculationCorrectionPeriod is present, Tag 41247.
func (m NoStreams) HasStreamCalculationCorrectionPeriod() bool {
	return m.Has(tag.StreamCalculationCorrectionPeriod)
}

// HasStreamCalculationCorrectionUnit returns true if StreamCalculationCorrectionUnit is present, Tag 41248.
func (m NoStreams) HasStreamCalculationCorrectionUnit() bool {
	return m.Has(tag.StreamCalculationCorrectionUnit)
}

// HasPaymentStreamType returns true if PaymentStreamType is present, Tag 40738.
func (m NoStreams) HasPaymentStreamType() bool {
	return m.Has(tag.PaymentStreamType)
}

// HasPaymentStreamMarketRate returns true if PaymentStreamMarketRate is present, Tag 40739.
func (m NoStreams) HasPaymentStreamMarketRate() bool {
	return m.Has(tag.PaymentStreamMarketRate)
}

// HasPaymentStreamDelayIndicator returns true if PaymentStreamDelayIndicator is present, Tag 40740.
func (m NoStreams) HasPaymentStreamDelayIndicator() bool {
	return m.Has(tag.PaymentStreamDelayIndicator)
}

// HasPaymentStreamSettlCurrency returns true if PaymentStreamSettlCurrency is present, Tag 40741.
func (m NoStreams) HasPaymentStreamSettlCurrency() bool {
	return m.Has(tag.PaymentStreamSettlCurrency)
}

// HasPaymentStreamDayCount returns true if PaymentStreamDayCount is present, Tag 40742.
func (m NoStreams) HasPaymentStreamDayCount() bool {
	return m.Has(tag.PaymentStreamDayCount)
}

// HasPaymentStreamAccrualDays returns true if PaymentStreamAccrualDays is present, Tag 40743.
func (m NoStreams) HasPaymentStreamAccrualDays() bool {
	return m.Has(tag.PaymentStreamAccrualDays)
}

// HasPaymentStreamDiscountType returns true if PaymentStreamDiscountType is present, Tag 40744.
func (m NoStreams) HasPaymentStreamDiscountType() bool {
	return m.Has(tag.PaymentStreamDiscountType)
}

// HasPaymentStreamDiscountRate returns true if PaymentStreamDiscountRate is present, Tag 40745.
func (m NoStreams) HasPaymentStreamDiscountRate() bool {
	return m.Has(tag.PaymentStreamDiscountRate)
}

// HasPaymentStreamDiscountRateDayCount returns true if PaymentStreamDiscountRateDayCount is present, Tag 40746.
func (m NoStreams) HasPaymentStreamDiscountRateDayCount() bool {
	return m.Has(tag.PaymentStreamDiscountRateDayCount)
}

// HasPaymentStreamCompoundingMethod returns true if PaymentStreamCompoundingMethod is present, Tag 40747.
func (m NoStreams) HasPaymentStreamCompoundingMethod() bool {
	return m.Has(tag.PaymentStreamCompoundingMethod)
}

// HasPaymentStreamInitialPrincipalExchangeIndicator returns true if PaymentStreamInitialPrincipalExchangeIndicator is present, Tag 40748.
func (m NoStreams) HasPaymentStreamInitialPrincipalExchangeIndicator() bool {
	return m.Has(tag.PaymentStreamInitialPrincipalExchangeIndicator)
}

// HasPaymentStreamInterimPrincipalExchangeIndicator returns true if PaymentStreamInterimPrincipalExchangeIndicator is present, Tag 40749.
func (m NoStreams) HasPaymentStreamInterimPrincipalExchangeIndicator() bool {
	return m.Has(tag.PaymentStreamInterimPrincipalExchangeIndicator)
}

// HasPaymentStreamFinalPrincipalExchangeIndicator returns true if PaymentStreamFinalPrincipalExchangeIndicator is present, Tag 40750.
func (m NoStreams) HasPaymentStreamFinalPrincipalExchangeIndicator() bool {
	return m.Has(tag.PaymentStreamFinalPrincipalExchangeIndicator)
}

// HasPaymentStreamPaymentDateBusinessDayConvention returns true if PaymentStreamPaymentDateBusinessDayConvention is present, Tag 40751.
func (m NoStreams) HasPaymentStreamPaymentDateBusinessDayConvention() bool {
	return m.Has(tag.PaymentStreamPaymentDateBusinessDayConvention)
}

// HasNoPaymentStreamPaymentDateBusinessCenters returns true if NoPaymentStreamPaymentDateBusinessCenters is present, Tag 40947.
func (m NoStreams) HasNoPaymentStreamPaymentDateBusinessCenters() bool {
	return m.Has(tag.NoPaymentStreamPaymentDateBusinessCenters)
}

// HasPaymentStreamPaymentFrequencyPeriod returns true if PaymentStreamPaymentFrequencyPeriod is present, Tag 40753.
func (m NoStreams) HasPaymentStreamPaymentFrequencyPeriod() bool {
	return m.Has(tag.PaymentStreamPaymentFrequencyPeriod)
}

// HasPaymentStreamPaymentFrequencyUnit returns true if PaymentStreamPaymentFrequencyUnit is present, Tag 40754.
func (m NoStreams) HasPaymentStreamPaymentFrequencyUnit() bool {
	return m.Has(tag.PaymentStreamPaymentFrequencyUnit)
}

// HasPaymentStreamPaymentRollConvention returns true if PaymentStreamPaymentRollConvention is present, Tag 40755.
func (m NoStreams) HasPaymentStreamPaymentRollConvention() bool {
	return m.Has(tag.PaymentStreamPaymentRollConvention)
}

// HasPaymentStreamFirstPaymentDateUnadjusted returns true if PaymentStreamFirstPaymentDateUnadjusted is present, Tag 40756.
func (m NoStreams) HasPaymentStreamFirstPaymentDateUnadjusted() bool {
	return m.Has(tag.PaymentStreamFirstPaymentDateUnadjusted)
}

// HasPaymentStreamLastRegularPaymentDateUnadjusted returns true if PaymentStreamLastRegularPaymentDateUnadjusted is present, Tag 40757.
func (m NoStreams) HasPaymentStreamLastRegularPaymentDateUnadjusted() bool {
	return m.Has(tag.PaymentStreamLastRegularPaymentDateUnadjusted)
}

// HasPaymentStreamPaymentDateRelativeTo returns true if PaymentStreamPaymentDateRelativeTo is present, Tag 40758.
func (m NoStreams) HasPaymentStreamPaymentDateRelativeTo() bool {
	return m.Has(tag.PaymentStreamPaymentDateRelativeTo)
}

// HasPaymentStreamPaymentDateOffsetPeriod returns true if PaymentStreamPaymentDateOffsetPeriod is present, Tag 40759.
func (m NoStreams) HasPaymentStreamPaymentDateOffsetPeriod() bool {
	return m.Has(tag.PaymentStreamPaymentDateOffsetPeriod)
}

// HasPaymentStreamPaymentDateOffsetUnit returns true if PaymentStreamPaymentDateOffsetUnit is present, Tag 40760.
func (m NoStreams) HasPaymentStreamPaymentDateOffsetUnit() bool {
	return m.Has(tag.PaymentStreamPaymentDateOffsetUnit)
}

// HasPaymentStreamPaymentDateOffsetDayType returns true if PaymentStreamPaymentDateOffsetDayType is present, Tag 40920.
func (m NoStreams) HasPaymentStreamPaymentDateOffsetDayType() bool {
	return m.Has(tag.PaymentStreamPaymentDateOffsetDayType)
}

// HasNoPaymentStreamPaymentDates returns true if NoPaymentStreamPaymentDates is present, Tag 41220.
func (m NoStreams) HasNoPaymentStreamPaymentDates() bool {
	return m.Has(tag.NoPaymentStreamPaymentDates)
}

// HasPaymentStreamMasterAgreementPaymentDatesIndicator returns true if PaymentStreamMasterAgreementPaymentDatesIndicator is present, Tag 41223.
func (m NoStreams) HasPaymentStreamMasterAgreementPaymentDatesIndicator() bool {
	return m.Has(tag.PaymentStreamMasterAgreementPaymentDatesIndicator)
}

// HasPaymentStreamFinalPricePaymentDateUnadjusted returns true if PaymentStreamFinalPricePaymentDateUnadjusted is present, Tag 42654.
func (m NoStreams) HasPaymentStreamFinalPricePaymentDateUnadjusted() bool {
	return m.Has(tag.PaymentStreamFinalPricePaymentDateUnadjusted)
}

// HasPaymentStreamFinalPricePaymentDateRelativeTo returns true if PaymentStreamFinalPricePaymentDateRelativeTo is present, Tag 42655.
func (m NoStreams) HasPaymentStreamFinalPricePaymentDateRelativeTo() bool {
	return m.Has(tag.PaymentStreamFinalPricePaymentDateRelativeTo)
}

// HasPaymentStreamFinalPricePaymentDateOffsetfPeriod returns true if PaymentStreamFinalPricePaymentDateOffsetfPeriod is present, Tag 42656.
func (m NoStreams) HasPaymentStreamFinalPricePaymentDateOffsetfPeriod() bool {
	return m.Has(tag.PaymentStreamFinalPricePaymentDateOffsetfPeriod)
}

// HasPaymentStreamFinalPricePaymentDateOffsetUnit returns true if PaymentStreamFinalPricePaymentDateOffsetUnit is present, Tag 42657.
func (m NoStreams) HasPaymentStreamFinalPricePaymentDateOffsetUnit() bool {
	return m.Has(tag.PaymentStreamFinalPricePaymentDateOffsetUnit)
}

// HasPaymentStreamFinalPricePaymentDateOffsetDayType returns true if PaymentStreamFinalPricePaymentDateOffsetDayType is present, Tag 42658.
func (m NoStreams) HasPaymentStreamFinalPricePaymentDateOffsetDayType() bool {
	return m.Has(tag.PaymentStreamFinalPricePaymentDateOffsetDayType)
}

// HasPaymentStreamFinalPricePaymentDateAdjusted returns true if PaymentStreamFinalPricePaymentDateAdjusted is present, Tag 42659.
func (m NoStreams) HasPaymentStreamFinalPricePaymentDateAdjusted() bool {
	return m.Has(tag.PaymentStreamFinalPricePaymentDateAdjusted)
}

// HasPaymentStreamResetDateRelativeTo returns true if PaymentStreamResetDateRelativeTo is present, Tag 40761.
func (m NoStreams) HasPaymentStreamResetDateRelativeTo() bool {
	return m.Has(tag.PaymentStreamResetDateRelativeTo)
}

// HasPaymentStreamResetDateBusinessDayConvention returns true if PaymentStreamResetDateBusinessDayConvention is present, Tag 40762.
func (m NoStreams) HasPaymentStreamResetDateBusinessDayConvention() bool {
	return m.Has(tag.PaymentStreamResetDateBusinessDayConvention)
}

// HasNoPaymentStreamResetDateBusinessCenters returns true if NoPaymentStreamResetDateBusinessCenters is present, Tag 40948.
func (m NoStreams) HasNoPaymentStreamResetDateBusinessCenters() bool {
	return m.Has(tag.NoPaymentStreamResetDateBusinessCenters)
}

// HasPaymentStreamResetFrequencyPeriod returns true if PaymentStreamResetFrequencyPeriod is present, Tag 40764.
func (m NoStreams) HasPaymentStreamResetFrequencyPeriod() bool {
	return m.Has(tag.PaymentStreamResetFrequencyPeriod)
}

// HasPaymentStreamResetFrequencyUnit returns true if PaymentStreamResetFrequencyUnit is present, Tag 40765.
func (m NoStreams) HasPaymentStreamResetFrequencyUnit() bool {
	return m.Has(tag.PaymentStreamResetFrequencyUnit)
}

// HasPaymentStreamResetWeeklyRollConvention returns true if PaymentStreamResetWeeklyRollConvention is present, Tag 40766.
func (m NoStreams) HasPaymentStreamResetWeeklyRollConvention() bool {
	return m.Has(tag.PaymentStreamResetWeeklyRollConvention)
}

// HasPaymentStreamInitialFixingDateRelativeTo returns true if PaymentStreamInitialFixingDateRelativeTo is present, Tag 40767.
func (m NoStreams) HasPaymentStreamInitialFixingDateRelativeTo() bool {
	return m.Has(tag.PaymentStreamInitialFixingDateRelativeTo)
}

// HasPaymentStreamInitialFixingDateBusinessDayConvention returns true if PaymentStreamInitialFixingDateBusinessDayConvention is present, Tag 40768.
func (m NoStreams) HasPaymentStreamInitialFixingDateBusinessDayConvention() bool {
	return m.Has(tag.PaymentStreamInitialFixingDateBusinessDayConvention)
}

// HasNoPaymentStreamInitialFixingDateBusinessCenters returns true if NoPaymentStreamInitialFixingDateBusinessCenters is present, Tag 40949.
func (m NoStreams) HasNoPaymentStreamInitialFixingDateBusinessCenters() bool {
	return m.Has(tag.NoPaymentStreamInitialFixingDateBusinessCenters)
}

// HasPaymentStreamInitialFixingDateOffsetPeriod returns true if PaymentStreamInitialFixingDateOffsetPeriod is present, Tag 40770.
func (m NoStreams) HasPaymentStreamInitialFixingDateOffsetPeriod() bool {
	return m.Has(tag.PaymentStreamInitialFixingDateOffsetPeriod)
}

// HasPaymentStreamInitialFixingDateOffsetUnit returns true if PaymentStreamInitialFixingDateOffsetUnit is present, Tag 40771.
func (m NoStreams) HasPaymentStreamInitialFixingDateOffsetUnit() bool {
	return m.Has(tag.PaymentStreamInitialFixingDateOffsetUnit)
}

// HasPaymentStreamInitialFixingDateOffsetDayType returns true if PaymentStreamInitialFixingDateOffsetDayType is present, Tag 40772.
func (m NoStreams) HasPaymentStreamInitialFixingDateOffsetDayType() bool {
	return m.Has(tag.PaymentStreamInitialFixingDateOffsetDayType)
}

// HasPaymentStreamInitialFixingDateAdjusted returns true if PaymentStreamInitialFixingDateAdjusted is present, Tag 40773.
func (m NoStreams) HasPaymentStreamInitialFixingDateAdjusted() bool {
	return m.Has(tag.PaymentStreamInitialFixingDateAdjusted)
}

// HasPaymentStreamFixingDateRelativeTo returns true if PaymentStreamFixingDateRelativeTo is present, Tag 40774.
func (m NoStreams) HasPaymentStreamFixingDateRelativeTo() bool {
	return m.Has(tag.PaymentStreamFixingDateRelativeTo)
}

// HasPaymentStreamFixingDateBusinessDayConvention returns true if PaymentStreamFixingDateBusinessDayConvention is present, Tag 40775.
func (m NoStreams) HasPaymentStreamFixingDateBusinessDayConvention() bool {
	return m.Has(tag.PaymentStreamFixingDateBusinessDayConvention)
}

// HasNoPaymentStreamFixingDateBusinessCenters returns true if NoPaymentStreamFixingDateBusinessCenters is present, Tag 40950.
func (m NoStreams) HasNoPaymentStreamFixingDateBusinessCenters() bool {
	return m.Has(tag.NoPaymentStreamFixingDateBusinessCenters)
}

// HasPaymentStreamFixingDateOffsetPeriod returns true if PaymentStreamFixingDateOffsetPeriod is present, Tag 40777.
func (m NoStreams) HasPaymentStreamFixingDateOffsetPeriod() bool {
	return m.Has(tag.PaymentStreamFixingDateOffsetPeriod)
}

// HasPaymentStreamFixingDateOffsetUnit returns true if PaymentStreamFixingDateOffsetUnit is present, Tag 40778.
func (m NoStreams) HasPaymentStreamFixingDateOffsetUnit() bool {
	return m.Has(tag.PaymentStreamFixingDateOffsetUnit)
}

// HasPaymentStreamFixingDateOffsetDayType returns true if PaymentStreamFixingDateOffsetDayType is present, Tag 40779.
func (m NoStreams) HasPaymentStreamFixingDateOffsetDayType() bool {
	return m.Has(tag.PaymentStreamFixingDateOffsetDayType)
}

// HasPaymentStreamFixingDateAdjusted returns true if PaymentStreamFixingDateAdjusted is present, Tag 40780.
func (m NoStreams) HasPaymentStreamFixingDateAdjusted() bool {
	return m.Has(tag.PaymentStreamFixingDateAdjusted)
}

// HasPaymentStreamRateCutoffDateOffsetPeriod returns true if PaymentStreamRateCutoffDateOffsetPeriod is present, Tag 40781.
func (m NoStreams) HasPaymentStreamRateCutoffDateOffsetPeriod() bool {
	return m.Has(tag.PaymentStreamRateCutoffDateOffsetPeriod)
}

// HasPaymentStreamRateCutoffDateOffsetUnit returns true if PaymentStreamRateCutoffDateOffsetUnit is present, Tag 40782.
func (m NoStreams) HasPaymentStreamRateCutoffDateOffsetUnit() bool {
	return m.Has(tag.PaymentStreamRateCutoffDateOffsetUnit)
}

// HasPaymentStreamRateCutoffDateOffsetDayType returns true if PaymentStreamRateCutoffDateOffsetDayType is present, Tag 40783.
func (m NoStreams) HasPaymentStreamRateCutoffDateOffsetDayType() bool {
	return m.Has(tag.PaymentStreamRateCutoffDateOffsetDayType)
}

// HasNoPaymentStreamFixingDates returns true if NoPaymentStreamFixingDates is present, Tag 42660.
func (m NoStreams) HasNoPaymentStreamFixingDates() bool {
	return m.Has(tag.NoPaymentStreamFixingDates)
}

// HasPaymentStreamRate returns true if PaymentStreamRate is present, Tag 40784.
func (m NoStreams) HasPaymentStreamRate() bool {
	return m.Has(tag.PaymentStreamRate)
}

// HasPaymentStreamFixedAmount returns true if PaymentStreamFixedAmount is present, Tag 40785.
func (m NoStreams) HasPaymentStreamFixedAmount() bool {
	return m.Has(tag.PaymentStreamFixedAmount)
}

// HasPaymentStreamRateOrAmountCurrency returns true if PaymentStreamRateOrAmountCurrency is present, Tag 40786.
func (m NoStreams) HasPaymentStreamRateOrAmountCurrency() bool {
	return m.Has(tag.PaymentStreamRateOrAmountCurrency)
}

// HasPaymentStreamFutureValueNotional returns true if PaymentStreamFutureValueNotional is present, Tag 40787.
func (m NoStreams) HasPaymentStreamFutureValueNotional() bool {
	return m.Has(tag.PaymentStreamFutureValueNotional)
}

// HasPaymentStreamFutureValueDateAdjusted returns true if PaymentStreamFutureValueDateAdjusted is present, Tag 40788.
func (m NoStreams) HasPaymentStreamFutureValueDateAdjusted() bool {
	return m.Has(tag.PaymentStreamFutureValueDateAdjusted)
}

// HasPaymentStreamFixedAmountUnitOfMeasure returns true if PaymentStreamFixedAmountUnitOfMeasure is present, Tag 41187.
func (m NoStreams) HasPaymentStreamFixedAmountUnitOfMeasure() bool {
	return m.Has(tag.PaymentStreamFixedAmountUnitOfMeasure)
}

// HasPaymentStreamTotalFixedAmount returns true if PaymentStreamTotalFixedAmount is present, Tag 41188.
func (m NoStreams) HasPaymentStreamTotalFixedAmount() bool {
	return m.Has(tag.PaymentStreamTotalFixedAmount)
}

// HasPaymentStreamWorldScaleRate returns true if PaymentStreamWorldScaleRate is present, Tag 41189.
func (m NoStreams) HasPaymentStreamWorldScaleRate() bool {
	return m.Has(tag.PaymentStreamWorldScaleRate)
}

// HasPaymentStreamContractPrice returns true if PaymentStreamContractPrice is present, Tag 41190.
func (m NoStreams) HasPaymentStreamContractPrice() bool {
	return m.Has(tag.PaymentStreamContractPrice)
}

// HasPaymentStreamContractPriceCurrency returns true if PaymentStreamContractPriceCurrency is present, Tag 41191.
func (m NoStreams) HasPaymentStreamContractPriceCurrency() bool {
	return m.Has(tag.PaymentStreamContractPriceCurrency)
}

// HasPaymentStreamRateIndex returns true if PaymentStreamRateIndex is present, Tag 40789.
func (m NoStreams) HasPaymentStreamRateIndex() bool {
	return m.Has(tag.PaymentStreamRateIndex)
}

// HasPaymentStreamRateIndexSource returns true if PaymentStreamRateIndexSource is present, Tag 40790.
func (m NoStreams) HasPaymentStreamRateIndexSource() bool {
	return m.Has(tag.PaymentStreamRateIndexSource)
}

// HasPaymentStreamRateIndexCurveUnit returns true if PaymentStreamRateIndexCurveUnit is present, Tag 40791.
func (m NoStreams) HasPaymentStreamRateIndexCurveUnit() bool {
	return m.Has(tag.PaymentStreamRateIndexCurveUnit)
}

// HasPaymentStreamRateIndexCurvePeriod returns true if PaymentStreamRateIndexCurvePeriod is present, Tag 40792.
func (m NoStreams) HasPaymentStreamRateIndexCurvePeriod() bool {
	return m.Has(tag.PaymentStreamRateIndexCurvePeriod)
}

// HasPaymentStreamRateMultiplier returns true if PaymentStreamRateMultiplier is present, Tag 40793.
func (m NoStreams) HasPaymentStreamRateMultiplier() bool {
	return m.Has(tag.PaymentStreamRateMultiplier)
}

// HasPaymentStreamRateSpread returns true if PaymentStreamRateSpread is present, Tag 40794.
func (m NoStreams) HasPaymentStreamRateSpread() bool {
	return m.Has(tag.PaymentStreamRateSpread)
}

// HasPaymentStreamRateSpreadPositionType returns true if PaymentStreamRateSpreadPositionType is present, Tag 40795.
func (m NoStreams) HasPaymentStreamRateSpreadPositionType() bool {
	return m.Has(tag.PaymentStreamRateSpreadPositionType)
}

// HasPaymentStreamRateTreatment returns true if PaymentStreamRateTreatment is present, Tag 40796.
func (m NoStreams) HasPaymentStreamRateTreatment() bool {
	return m.Has(tag.PaymentStreamRateTreatment)
}

// HasPaymentStreamCapRate returns true if PaymentStreamCapRate is present, Tag 40797.
func (m NoStreams) HasPaymentStreamCapRate() bool {
	return m.Has(tag.PaymentStreamCapRate)
}

// HasPaymentStreamCapRateBuySide returns true if PaymentStreamCapRateBuySide is present, Tag 40798.
func (m NoStreams) HasPaymentStreamCapRateBuySide() bool {
	return m.Has(tag.PaymentStreamCapRateBuySide)
}

// HasPaymentStreamCapRateSellSide returns true if PaymentStreamCapRateSellSide is present, Tag 40799.
func (m NoStreams) HasPaymentStreamCapRateSellSide() bool {
	return m.Has(tag.PaymentStreamCapRateSellSide)
}

// HasPaymentStreamFloorRate returns true if PaymentStreamFloorRate is present, Tag 40800.
func (m NoStreams) HasPaymentStreamFloorRate() bool {
	return m.Has(tag.PaymentStreamFloorRate)
}

// HasPaymentStreamFloorRateBuySide returns true if PaymentStreamFloorRateBuySide is present, Tag 40801.
func (m NoStreams) HasPaymentStreamFloorRateBuySide() bool {
	return m.Has(tag.PaymentStreamFloorRateBuySide)
}

// HasPaymentStreamFloorRateSellSide returns true if PaymentStreamFloorRateSellSide is present, Tag 40802.
func (m NoStreams) HasPaymentStreamFloorRateSellSide() bool {
	return m.Has(tag.PaymentStreamFloorRateSellSide)
}

// HasPaymentStreamInitialRate returns true if PaymentStreamInitialRate is present, Tag 40803.
func (m NoStreams) HasPaymentStreamInitialRate() bool {
	return m.Has(tag.PaymentStreamInitialRate)
}

// HasPaymentStreamFinalRateRoundingDirection returns true if PaymentStreamFinalRateRoundingDirection is present, Tag 40804.
func (m NoStreams) HasPaymentStreamFinalRateRoundingDirection() bool {
	return m.Has(tag.PaymentStreamFinalRateRoundingDirection)
}

// HasPaymentStreamFinalRatePrecision returns true if PaymentStreamFinalRatePrecision is present, Tag 40805.
func (m NoStreams) HasPaymentStreamFinalRatePrecision() bool {
	return m.Has(tag.PaymentStreamFinalRatePrecision)
}

// HasPaymentStreamAveragingMethod returns true if PaymentStreamAveragingMethod is present, Tag 40806.
func (m NoStreams) HasPaymentStreamAveragingMethod() bool {
	return m.Has(tag.PaymentStreamAveragingMethod)
}

// HasPaymentStreamNegativeRateTreatment returns true if PaymentStreamNegativeRateTreatment is present, Tag 40807.
func (m NoStreams) HasPaymentStreamNegativeRateTreatment() bool {
	return m.Has(tag.PaymentStreamNegativeRateTreatment)
}

// HasPaymentStreamInflationLagPeriod returns true if PaymentStreamInflationLagPeriod is present, Tag 40808.
func (m NoStreams) HasPaymentStreamInflationLagPeriod() bool {
	return m.Has(tag.PaymentStreamInflationLagPeriod)
}

// HasPaymentStreamInflationLagUnit returns true if PaymentStreamInflationLagUnit is present, Tag 40809.
func (m NoStreams) HasPaymentStreamInflationLagUnit() bool {
	return m.Has(tag.PaymentStreamInflationLagUnit)
}

// HasPaymentStreamInflationLagDayType returns true if PaymentStreamInflationLagDayType is present, Tag 40810.
func (m NoStreams) HasPaymentStreamInflationLagDayType() bool {
	return m.Has(tag.PaymentStreamInflationLagDayType)
}

// HasPaymentStreamInflationInterpolationMethod returns true if PaymentStreamInflationInterpolationMethod is present, Tag 40811.
func (m NoStreams) HasPaymentStreamInflationInterpolationMethod() bool {
	return m.Has(tag.PaymentStreamInflationInterpolationMethod)
}

// HasPaymentStreamInflationIndexSource returns true if PaymentStreamInflationIndexSource is present, Tag 40812.
func (m NoStreams) HasPaymentStreamInflationIndexSource() bool {
	return m.Has(tag.PaymentStreamInflationIndexSource)
}

// HasPaymentStreamInflationPublicationSource returns true if PaymentStreamInflationPublicationSource is present, Tag 40813.
func (m NoStreams) HasPaymentStreamInflationPublicationSource() bool {
	return m.Has(tag.PaymentStreamInflationPublicationSource)
}

// HasPaymentStreamInflationInitialIndexLevel returns true if PaymentStreamInflationInitialIndexLevel is present, Tag 40814.
func (m NoStreams) HasPaymentStreamInflationInitialIndexLevel() bool {
	return m.Has(tag.PaymentStreamInflationInitialIndexLevel)
}

// HasPaymentStreamInflationFallbackBondApplicable returns true if PaymentStreamInflationFallbackBondApplicable is present, Tag 40815.
func (m NoStreams) HasPaymentStreamInflationFallbackBondApplicable() bool {
	return m.Has(tag.PaymentStreamInflationFallbackBondApplicable)
}

// HasPaymentStreamFRADiscounting returns true if PaymentStreamFRADiscounting is present, Tag 40816.
func (m NoStreams) HasPaymentStreamFRADiscounting() bool {
	return m.Has(tag.PaymentStreamFRADiscounting)
}

// HasPaymentStreamRateIndex2CurvePeriod returns true if PaymentStreamRateIndex2CurvePeriod is present, Tag 41194.
func (m NoStreams) HasPaymentStreamRateIndex2CurvePeriod() bool {
	return m.Has(tag.PaymentStreamRateIndex2CurvePeriod)
}

// HasPaymentStreamRateIndex2CurveUnit returns true if PaymentStreamRateIndex2CurveUnit is present, Tag 41195.
func (m NoStreams) HasPaymentStreamRateIndex2CurveUnit() bool {
	return m.Has(tag.PaymentStreamRateIndex2CurveUnit)
}

// HasPaymentStreamRateIndexLocation returns true if PaymentStreamRateIndexLocation is present, Tag 41196.
func (m NoStreams) HasPaymentStreamRateIndexLocation() bool {
	return m.Has(tag.PaymentStreamRateIndexLocation)
}

// HasPaymentStreamRateIndexLevel returns true if PaymentStreamRateIndexLevel is present, Tag 41197.
func (m NoStreams) HasPaymentStreamRateIndexLevel() bool {
	return m.Has(tag.PaymentStreamRateIndexLevel)
}

// HasPaymentStreamRateIndexUnitOfMeasure returns true if PaymentStreamRateIndexUnitOfMeasure is present, Tag 41198.
func (m NoStreams) HasPaymentStreamRateIndexUnitOfMeasure() bool {
	return m.Has(tag.PaymentStreamRateIndexUnitOfMeasure)
}

// HasPaymentStreamSettlLevel returns true if PaymentStreamSettlLevel is present, Tag 41199.
func (m NoStreams) HasPaymentStreamSettlLevel() bool {
	return m.Has(tag.PaymentStreamSettlLevel)
}

// HasPaymentStreamReferenceLevel returns true if PaymentStreamReferenceLevel is present, Tag 41200.
func (m NoStreams) HasPaymentStreamReferenceLevel() bool {
	return m.Has(tag.PaymentStreamReferenceLevel)
}

// HasPaymentStreamReferenceLevelUnitOfMeasure returns true if PaymentStreamReferenceLevelUnitOfMeasure is present, Tag 41201.
func (m NoStreams) HasPaymentStreamReferenceLevelUnitOfMeasure() bool {
	return m.Has(tag.PaymentStreamReferenceLevelUnitOfMeasure)
}

// HasPaymentStreamReferenceLevelEqualsZeroIndicator returns true if PaymentStreamReferenceLevelEqualsZeroIndicator is present, Tag 41202.
func (m NoStreams) HasPaymentStreamReferenceLevelEqualsZeroIndicator() bool {
	return m.Has(tag.PaymentStreamReferenceLevelEqualsZeroIndicator)
}

// HasPaymentStreamRateSpreadCurrency returns true if PaymentStreamRateSpreadCurrency is present, Tag 41203.
func (m NoStreams) HasPaymentStreamRateSpreadCurrency() bool {
	return m.Has(tag.PaymentStreamRateSpreadCurrency)
}

// HasPaymentStreamRateSpreadUnitOfMeasure returns true if PaymentStreamRateSpreadUnitOfMeasure is present, Tag 41204.
func (m NoStreams) HasPaymentStreamRateSpreadUnitOfMeasure() bool {
	return m.Has(tag.PaymentStreamRateSpreadUnitOfMeasure)
}

// HasPaymentStreamRateConversionFactor returns true if PaymentStreamRateConversionFactor is present, Tag 41205.
func (m NoStreams) HasPaymentStreamRateConversionFactor() bool {
	return m.Has(tag.PaymentStreamRateConversionFactor)
}

// HasPaymentStreamRateSpreadType returns true if PaymentStreamRateSpreadType is present, Tag 41206.
func (m NoStreams) HasPaymentStreamRateSpreadType() bool {
	return m.Has(tag.PaymentStreamRateSpreadType)
}

// HasPaymentStreamLastResetRate returns true if PaymentStreamLastResetRate is present, Tag 41207.
func (m NoStreams) HasPaymentStreamLastResetRate() bool {
	return m.Has(tag.PaymentStreamLastResetRate)
}

// HasPaymentStreamFinalRate returns true if PaymentStreamFinalRate is present, Tag 41208.
func (m NoStreams) HasPaymentStreamFinalRate() bool {
	return m.Has(tag.PaymentStreamFinalRate)
}

// HasPaymentStreamCalculationLagPeriod returns true if PaymentStreamCalculationLagPeriod is present, Tag 41209.
func (m NoStreams) HasPaymentStreamCalculationLagPeriod() bool {
	return m.Has(tag.PaymentStreamCalculationLagPeriod)
}

// HasPaymentStreamCalculationLagUnit returns true if PaymentStreamCalculationLagUnit is present, Tag 41210.
func (m NoStreams) HasPaymentStreamCalculationLagUnit() bool {
	return m.Has(tag.PaymentStreamCalculationLagUnit)
}

// HasPaymentStreamFirstObservationDateOffsetPeriod returns true if PaymentStreamFirstObservationDateOffsetPeriod is present, Tag 41211.
func (m NoStreams) HasPaymentStreamFirstObservationDateOffsetPeriod() bool {
	return m.Has(tag.PaymentStreamFirstObservationDateOffsetPeriod)
}

// HasPaymentStreamFirstObservationDateOffsetUnit returns true if PaymentStreamFirstObservationDateOffsetUnit is present, Tag 41212.
func (m NoStreams) HasPaymentStreamFirstObservationDateOffsetUnit() bool {
	return m.Has(tag.PaymentStreamFirstObservationDateOffsetUnit)
}

// HasPaymentStreamPricingDayType returns true if PaymentStreamPricingDayType is present, Tag 41213.
func (m NoStreams) HasPaymentStreamPricingDayType() bool {
	return m.Has(tag.PaymentStreamPricingDayType)
}

// HasPaymentStreamPricingDayDistribution returns true if PaymentStreamPricingDayDistribution is present, Tag 41214.
func (m NoStreams) HasPaymentStreamPricingDayDistribution() bool {
	return m.Has(tag.PaymentStreamPricingDayDistribution)
}

// HasPaymentStreamPricingDayCount returns true if PaymentStreamPricingDayCount is present, Tag 41215.
func (m NoStreams) HasPaymentStreamPricingDayCount() bool {
	return m.Has(tag.PaymentStreamPricingDayCount)
}

// HasPaymentStreamPricingBusinessCalendar returns true if PaymentStreamPricingBusinessCalendar is present, Tag 41216.
func (m NoStreams) HasPaymentStreamPricingBusinessCalendar() bool {
	return m.Has(tag.PaymentStreamPricingBusinessCalendar)
}

// HasPaymentStreamPricingBusinessDayConvention returns true if PaymentStreamPricingBusinessDayConvention is present, Tag 41217.
func (m NoStreams) HasPaymentStreamPricingBusinessDayConvention() bool {
	return m.Has(tag.PaymentStreamPricingBusinessDayConvention)
}

// HasNoPaymentStreamPricingBusinessCenters returns true if NoPaymentStreamPricingBusinessCenters is present, Tag 41192.
func (m NoStreams) HasNoPaymentStreamPricingBusinessCenters() bool {
	return m.Has(tag.NoPaymentStreamPricingBusinessCenters)
}

// HasNoPaymentStreamPricingDays returns true if NoPaymentStreamPricingDays is present, Tag 41227.
func (m NoStreams) HasNoPaymentStreamPricingDays() bool {
	return m.Has(tag.NoPaymentStreamPricingDays)
}

// HasNoPaymentStreamPricingDates returns true if NoPaymentStreamPricingDates is present, Tag 41224.
func (m NoStreams) HasNoPaymentStreamPricingDates() bool {
	return m.Has(tag.NoPaymentStreamPricingDates)
}

// HasPaymentStreamFirstObservationDateUnadjusted returns true if PaymentStreamFirstObservationDateUnadjusted is present, Tag 42663.
func (m NoStreams) HasPaymentStreamFirstObservationDateUnadjusted() bool {
	return m.Has(tag.PaymentStreamFirstObservationDateUnadjusted)
}

// HasPaymentStreamFirstObservationDateRelativeTo returns true if PaymentStreamFirstObservationDateRelativeTo is present, Tag 42664.
func (m NoStreams) HasPaymentStreamFirstObservationDateRelativeTo() bool {
	return m.Has(tag.PaymentStreamFirstObservationDateRelativeTo)
}

// HasPaymentStreamFirstObservationDateOffsetDayType returns true if PaymentStreamFirstObservationDateOffsetDayType is present, Tag 42665.
func (m NoStreams) HasPaymentStreamFirstObservationDateOffsetDayType() bool {
	return m.Has(tag.PaymentStreamFirstObservationDateOffsetDayType)
}

// HasPaymentStreamFirstObservationDateAdjusted returns true if PaymentStreamFirstObservationDateAdjusted is present, Tag 42666.
func (m NoStreams) HasPaymentStreamFirstObservationDateAdjusted() bool {
	return m.Has(tag.PaymentStreamFirstObservationDateAdjusted)
}

// HasPaymentStreamUnderlierRefID returns true if PaymentStreamUnderlierRefID is present, Tag 42667.
func (m NoStreams) HasPaymentStreamUnderlierRefID() bool {
	return m.Has(tag.PaymentStreamUnderlierRefID)
}

// HasPaymentStreamFormulaCurrency returns true if PaymentStreamFormulaCurrency is present, Tag 42686.
func (m NoStreams) HasPaymentStreamFormulaCurrency() bool {
	return m.Has(tag.PaymentStreamFormulaCurrency)
}

// HasPaymentStreamFormulaCurrencyDeterminationMethod returns true if PaymentStreamFormulaCurrencyDeterminationMethod is present, Tag 42687.
func (m NoStreams) HasPaymentStreamFormulaCurrencyDeterminationMethod() bool {
	return m.Has(tag.PaymentStreamFormulaCurrencyDeterminationMethod)
}

// HasPaymentStreamFormulaReferenceAmount returns true if PaymentStreamFormulaReferenceAmount is present, Tag 42688.
func (m NoStreams) HasPaymentStreamFormulaReferenceAmount() bool {
	return m.Has(tag.PaymentStreamFormulaReferenceAmount)
}

// HasNoPaymentStreamFormulas returns true if NoPaymentStreamFormulas is present, Tag 42683.
func (m NoStreams) HasNoPaymentStreamFormulas() bool {
	return m.Has(tag.NoPaymentStreamFormulas)
}

// HasPaymentStreamFormulaImageLength returns true if PaymentStreamFormulaImageLength is present, Tag 42652.
func (m NoStreams) HasPaymentStreamFormulaImageLength() bool {
	return m.Has(tag.PaymentStreamFormulaImageLength)
}

// HasPaymentStreamFormulaImage returns true if PaymentStreamFormulaImage is present, Tag 42653.
func (m NoStreams) HasPaymentStreamFormulaImage() bool {
	return m.Has(tag.PaymentStreamFormulaImage)
}

// HasDividendReinvestmentIndicator returns true if DividendReinvestmentIndicator is present, Tag 42245.
func (m NoStreams) HasDividendReinvestmentIndicator() bool {
	return m.Has(tag.DividendReinvestmentIndicator)
}

// HasDividendEntitlementEvent returns true if DividendEntitlementEvent is present, Tag 42246.
func (m NoStreams) HasDividendEntitlementEvent() bool {
	return m.Has(tag.DividendEntitlementEvent)
}

// HasDividendAmountType returns true if DividendAmountType is present, Tag 42247.
func (m NoStreams) HasDividendAmountType() bool {
	return m.Has(tag.DividendAmountType)
}

// HasDividendUnderlierRefID returns true if DividendUnderlierRefID is present, Tag 42248.
func (m NoStreams) HasDividendUnderlierRefID() bool {
	return m.Has(tag.DividendUnderlierRefID)
}

// HasNoDividendPeriods returns true if NoDividendPeriods is present, Tag 42274.
func (m NoStreams) HasNoDividendPeriods() bool {
	return m.Has(tag.NoDividendPeriods)
}

// HasExtraordinaryDividendPartySide returns true if ExtraordinaryDividendPartySide is present, Tag 42249.
func (m NoStreams) HasExtraordinaryDividendPartySide() bool {
	return m.Has(tag.ExtraordinaryDividendPartySide)
}

// HasExtraordinaryDividendAmountType returns true if ExtraordinaryDividendAmountType is present, Tag 42250.
func (m NoStreams) HasExtraordinaryDividendAmountType() bool {
	return m.Has(tag.ExtraordinaryDividendAmountType)
}

// HasExtraordinaryDividendCurrency returns true if ExtraordinaryDividendCurrency is present, Tag 42251.
func (m NoStreams) HasExtraordinaryDividendCurrency() bool {
	return m.Has(tag.ExtraordinaryDividendCurrency)
}

// HasExtraordinaryDividendDeterminationMethod returns true if ExtraordinaryDividendDeterminationMethod is present, Tag 42252.
func (m NoStreams) HasExtraordinaryDividendDeterminationMethod() bool {
	return m.Has(tag.ExtraordinaryDividendDeterminationMethod)
}

// HasDividendFXTriggerDateRelativeTo returns true if DividendFXTriggerDateRelativeTo is present, Tag 42265.
func (m NoStreams) HasDividendFXTriggerDateRelativeTo() bool {
	return m.Has(tag.DividendFXTriggerDateRelativeTo)
}

// HasDividendFXTriggerDateOffsetPeriod returns true if DividendFXTriggerDateOffsetPeriod is present, Tag 42266.
func (m NoStreams) HasDividendFXTriggerDateOffsetPeriod() bool {
	return m.Has(tag.DividendFXTriggerDateOffsetPeriod)
}

// HasDividendFXTriggerDateOffsetUnit returns true if DividendFXTriggerDateOffsetUnit is present, Tag 42267.
func (m NoStreams) HasDividendFXTriggerDateOffsetUnit() bool {
	return m.Has(tag.DividendFXTriggerDateOffsetUnit)
}

// HasDividendFXTriggerDateOffsetDayType returns true if DividendFXTriggerDateOffsetDayType is present, Tag 42268.
func (m NoStreams) HasDividendFXTriggerDateOffsetDayType() bool {
	return m.Has(tag.DividendFXTriggerDateOffsetDayType)
}

// HasDividendFXTriggerDateUnadjusted returns true if DividendFXTriggerDateUnadjusted is present, Tag 42269.
func (m NoStreams) HasDividendFXTriggerDateUnadjusted() bool {
	return m.Has(tag.DividendFXTriggerDateUnadjusted)
}

// HasDividendFXTriggerDateBusinessDayConvention returns true if DividendFXTriggerDateBusinessDayConvention is present, Tag 42270.
func (m NoStreams) HasDividendFXTriggerDateBusinessDayConvention() bool {
	return m.Has(tag.DividendFXTriggerDateBusinessDayConvention)
}

// HasNoDividendFXTriggerDateBusinessCenters returns true if NoDividendFXTriggerDateBusinessCenters is present, Tag 42272.
func (m NoStreams) HasNoDividendFXTriggerDateBusinessCenters() bool {
	return m.Has(tag.NoDividendFXTriggerDateBusinessCenters)
}

// HasDividendFXTriggerDateAdjusted returns true if DividendFXTriggerDateAdjusted is present, Tag 42271.
func (m NoStreams) HasDividendFXTriggerDateAdjusted() bool {
	return m.Has(tag.DividendFXTriggerDateAdjusted)
}

// HasDividendFloatingRateIndex returns true if DividendFloatingRateIndex is present, Tag 42218.
func (m NoStreams) HasDividendFloatingRateIndex() bool {
	return m.Has(tag.DividendFloatingRateIndex)
}

// HasDividendFloatingRateIndexCurvePeriod returns true if DividendFloatingRateIndexCurvePeriod is present, Tag 42219.
func (m NoStreams) HasDividendFloatingRateIndexCurvePeriod() bool {
	return m.Has(tag.DividendFloatingRateIndexCurvePeriod)
}

// HasDividendFloatingRateIndexCurveUnit returns true if DividendFloatingRateIndexCurveUnit is present, Tag 42220.
func (m NoStreams) HasDividendFloatingRateIndexCurveUnit() bool {
	return m.Has(tag.DividendFloatingRateIndexCurveUnit)
}

// HasDividendFloatingRateMultiplier returns true if DividendFloatingRateMultiplier is present, Tag 42221.
func (m NoStreams) HasDividendFloatingRateMultiplier() bool {
	return m.Has(tag.DividendFloatingRateMultiplier)
}

// HasDividendFloatingRateSpread returns true if DividendFloatingRateSpread is present, Tag 42222.
func (m NoStreams) HasDividendFloatingRateSpread() bool {
	return m.Has(tag.DividendFloatingRateSpread)
}

// HasDividendFloatingRateSpreadPositionType returns true if DividendFloatingRateSpreadPositionType is present, Tag 42223.
func (m NoStreams) HasDividendFloatingRateSpreadPositionType() bool {
	return m.Has(tag.DividendFloatingRateSpreadPositionType)
}

// HasDividendFloatingRateTreatment returns true if DividendFloatingRateTreatment is present, Tag 42224.
func (m NoStreams) HasDividendFloatingRateTreatment() bool {
	return m.Has(tag.DividendFloatingRateTreatment)
}

// HasDividendCapRate returns true if DividendCapRate is present, Tag 42225.
func (m NoStreams) HasDividendCapRate() bool {
	return m.Has(tag.DividendCapRate)
}

// HasDividendCapRateBuySide returns true if DividendCapRateBuySide is present, Tag 42226.
func (m NoStreams) HasDividendCapRateBuySide() bool {
	return m.Has(tag.DividendCapRateBuySide)
}

// HasDividendCapRateSellSide returns true if DividendCapRateSellSide is present, Tag 42227.
func (m NoStreams) HasDividendCapRateSellSide() bool {
	return m.Has(tag.DividendCapRateSellSide)
}

// HasDividendFloorRate returns true if DividendFloorRate is present, Tag 42228.
func (m NoStreams) HasDividendFloorRate() bool {
	return m.Has(tag.DividendFloorRate)
}

// HasDividendFloorRateBuySide returns true if DividendFloorRateBuySide is present, Tag 42229.
func (m NoStreams) HasDividendFloorRateBuySide() bool {
	return m.Has(tag.DividendFloorRateBuySide)
}

// HasDividendFloorRateSellSide returns true if DividendFloorRateSellSide is present, Tag 42230.
func (m NoStreams) HasDividendFloorRateSellSide() bool {
	return m.Has(tag.DividendFloorRateSellSide)
}

// HasDividendInitialRate returns true if DividendInitialRate is present, Tag 42231.
func (m NoStreams) HasDividendInitialRate() bool {
	return m.Has(tag.DividendInitialRate)
}

// HasDividendFinalRateRoundingDirection returns true if DividendFinalRateRoundingDirection is present, Tag 42232.
func (m NoStreams) HasDividendFinalRateRoundingDirection() bool {
	return m.Has(tag.DividendFinalRateRoundingDirection)
}

// HasDividendFinalRatePrecision returns true if DividendFinalRatePrecision is present, Tag 42233.
func (m NoStreams) HasDividendFinalRatePrecision() bool {
	return m.Has(tag.DividendFinalRatePrecision)
}

// HasDividendAveragingMethod returns true if DividendAveragingMethod is present, Tag 42234.
func (m NoStreams) HasDividendAveragingMethod() bool {
	return m.Has(tag.DividendAveragingMethod)
}

// HasDividendNegativeRateTreatment returns true if DividendNegativeRateTreatment is present, Tag 42235.
func (m NoStreams) HasDividendNegativeRateTreatment() bool {
	return m.Has(tag.DividendNegativeRateTreatment)
}

// HasDividendAccrualFixedRate returns true if DividendAccrualFixedRate is present, Tag 42253.
func (m NoStreams) HasDividendAccrualFixedRate() bool {
	return m.Has(tag.DividendAccrualFixedRate)
}

// HasDividendAccrualPaymentDateRelativeTo returns true if DividendAccrualPaymentDateRelativeTo is present, Tag 42238.
func (m NoStreams) HasDividendAccrualPaymentDateRelativeTo() bool {
	return m.Has(tag.DividendAccrualPaymentDateRelativeTo)
}

// HasDividendAccrualPaymentDateOffsetPeriod returns true if DividendAccrualPaymentDateOffsetPeriod is present, Tag 42239.
func (m NoStreams) HasDividendAccrualPaymentDateOffsetPeriod() bool {
	return m.Has(tag.DividendAccrualPaymentDateOffsetPeriod)
}

// HasDividendAccrualPaymentDateOffsetUnit returns true if DividendAccrualPaymentDateOffsetUnit is present, Tag 42240.
func (m NoStreams) HasDividendAccrualPaymentDateOffsetUnit() bool {
	return m.Has(tag.DividendAccrualPaymentDateOffsetUnit)
}

// HasDividendAccrualPaymentDateOffsetDayType returns true if DividendAccrualPaymentDateOffsetDayType is present, Tag 42241.
func (m NoStreams) HasDividendAccrualPaymentDateOffsetDayType() bool {
	return m.Has(tag.DividendAccrualPaymentDateOffsetDayType)
}

// HasDividendAccrualPaymentDateUnadjusted returns true if DividendAccrualPaymentDateUnadjusted is present, Tag 42242.
func (m NoStreams) HasDividendAccrualPaymentDateUnadjusted() bool {
	return m.Has(tag.DividendAccrualPaymentDateUnadjusted)
}

// HasDividendAccrualPaymeentDateBusinessDayConvention returns true if DividendAccrualPaymeentDateBusinessDayConvention is present, Tag 42243.
func (m NoStreams) HasDividendAccrualPaymeentDateBusinessDayConvention() bool {
	return m.Has(tag.DividendAccrualPaymeentDateBusinessDayConvention)
}

// HasNoDividendAccrualPaymentDateBusinessCenters returns true if NoDividendAccrualPaymentDateBusinessCenters is present, Tag 42236.
func (m NoStreams) HasNoDividendAccrualPaymentDateBusinessCenters() bool {
	return m.Has(tag.NoDividendAccrualPaymentDateBusinessCenters)
}

// HasDividendAccrualPaymentDateAdjusted returns true if DividendAccrualPaymentDateAdjusted is present, Tag 42244.
func (m NoStreams) HasDividendAccrualPaymentDateAdjusted() bool {
	return m.Has(tag.DividendAccrualPaymentDateAdjusted)
}

// HasDividendCompoundingMethod returns true if DividendCompoundingMethod is present, Tag 42254.
func (m NoStreams) HasDividendCompoundingMethod() bool {
	return m.Has(tag.DividendCompoundingMethod)
}

// HasDividendNumOfIndexUnits returns true if DividendNumOfIndexUnits is present, Tag 42255.
func (m NoStreams) HasDividendNumOfIndexUnits() bool {
	return m.Has(tag.DividendNumOfIndexUnits)
}

// HasDividendCashPercentage returns true if DividendCashPercentage is present, Tag 42256.
func (m NoStreams) HasDividendCashPercentage() bool {
	return m.Has(tag.DividendCashPercentage)
}

// HasDividendCashEquivalentPercentage returns true if DividendCashEquivalentPercentage is present, Tag 42257.
func (m NoStreams) HasDividendCashEquivalentPercentage() bool {
	return m.Has(tag.DividendCashEquivalentPercentage)
}

// HasNonCashDividendTreatment returns true if NonCashDividendTreatment is present, Tag 42258.
func (m NoStreams) HasNonCashDividendTreatment() bool {
	return m.Has(tag.NonCashDividendTreatment)
}

// HasDividendComposition returns true if DividendComposition is present, Tag 42259.
func (m NoStreams) HasDividendComposition() bool {
	return m.Has(tag.DividendComposition)
}

// HasSpecialDividendsIndicator returns true if SpecialDividendsIndicator is present, Tag 42260.
func (m NoStreams) HasSpecialDividendsIndicator() bool {
	return m.Has(tag.SpecialDividendsIndicator)
}

// HasMaterialDividendsIndicator returns true if MaterialDividendsIndicator is present, Tag 42261.
func (m NoStreams) HasMaterialDividendsIndicator() bool {
	return m.Has(tag.MaterialDividendsIndicator)
}

// HasOptionsExchangeDividendsIndicator returns true if OptionsExchangeDividendsIndicator is present, Tag 42262.
func (m NoStreams) HasOptionsExchangeDividendsIndicator() bool {
	return m.Has(tag.OptionsExchangeDividendsIndicator)
}

// HasAdditionalDividendsIndicator returns true if AdditionalDividendsIndicator is present, Tag 42263.
func (m NoStreams) HasAdditionalDividendsIndicator() bool {
	return m.Has(tag.AdditionalDividendsIndicator)
}

// HasAllDividendsIndicator returns true if AllDividendsIndicator is present, Tag 42264.
func (m NoStreams) HasAllDividendsIndicator() bool {
	return m.Has(tag.AllDividendsIndicator)
}

// HasReturnRateNotionalReset returns true if ReturnRateNotionalReset is present, Tag 42668.
func (m NoStreams) HasReturnRateNotionalReset() bool {
	return m.Has(tag.ReturnRateNotionalReset)
}

// HasNoReturnRates returns true if NoReturnRates is present, Tag 42735.
func (m NoStreams) HasNoReturnRates() bool {
	return m.Has(tag.NoReturnRates)
}

// HasPaymentStreamLinkInitialLevel returns true if PaymentStreamLinkInitialLevel is present, Tag 42669.
func (m NoStreams) HasPaymentStreamLinkInitialLevel() bool {
	return m.Has(tag.PaymentStreamLinkInitialLevel)
}

// HasPaymentStreamLinkClosingLevelIndicator returns true if PaymentStreamLinkClosingLevelIndicator is present, Tag 42670.
func (m NoStreams) HasPaymentStreamLinkClosingLevelIndicator() bool {
	return m.Has(tag.PaymentStreamLinkClosingLevelIndicator)
}

// HasPaymentStreamLinkExpiringLevelIndicator returns true if PaymentStreamLinkExpiringLevelIndicator is present, Tag 42671.
func (m NoStreams) HasPaymentStreamLinkExpiringLevelIndicator() bool {
	return m.Has(tag.PaymentStreamLinkExpiringLevelIndicator)
}

// HasPaymentStreamLinkEstimatedTradingDays returns true if PaymentStreamLinkEstimatedTradingDays is present, Tag 42672.
func (m NoStreams) HasPaymentStreamLinkEstimatedTradingDays() bool {
	return m.Has(tag.PaymentStreamLinkEstimatedTradingDays)
}

// HasPaymentStreamLinkStrikePrice returns true if PaymentStreamLinkStrikePrice is present, Tag 42673.
func (m NoStreams) HasPaymentStreamLinkStrikePrice() bool {
	return m.Has(tag.PaymentStreamLinkStrikePrice)
}

// HasPaymentStreamLinkStrikePriceType returns true if PaymentStreamLinkStrikePriceType is present, Tag 42674.
func (m NoStreams) HasPaymentStreamLinkStrikePriceType() bool {
	return m.Has(tag.PaymentStreamLinkStrikePriceType)
}

// HasPaymentStreamLinkMaximumBoundary returns true if PaymentStreamLinkMaximumBoundary is present, Tag 42675.
func (m NoStreams) HasPaymentStreamLinkMaximumBoundary() bool {
	return m.Has(tag.PaymentStreamLinkMaximumBoundary)
}

// HasPaymentStreamLinkMinimumBoundary returns true if PaymentStreamLinkMinimumBoundary is present, Tag 42676.
func (m NoStreams) HasPaymentStreamLinkMinimumBoundary() bool {
	return m.Has(tag.PaymentStreamLinkMinimumBoundary)
}

// HasPaymentStreamLinkNumberOfDataSeries returns true if PaymentStreamLinkNumberOfDataSeries is present, Tag 42677.
func (m NoStreams) HasPaymentStreamLinkNumberOfDataSeries() bool {
	return m.Has(tag.PaymentStreamLinkNumberOfDataSeries)
}

// HasPaymentStreamVarianceUnadjustedCap returns true if PaymentStreamVarianceUnadjustedCap is present, Tag 42678.
func (m NoStreams) HasPaymentStreamVarianceUnadjustedCap() bool {
	return m.Has(tag.PaymentStreamVarianceUnadjustedCap)
}

// HasPaymentStreamRealizedVarianceMethod returns true if PaymentStreamRealizedVarianceMethod is present, Tag 42679.
func (m NoStreams) HasPaymentStreamRealizedVarianceMethod() bool {
	return m.Has(tag.PaymentStreamRealizedVarianceMethod)
}

// HasPaymentStreamDaysAdjustmentIndicator returns true if PaymentStreamDaysAdjustmentIndicator is present, Tag 42680.
func (m NoStreams) HasPaymentStreamDaysAdjustmentIndicator() bool {
	return m.Has(tag.PaymentStreamDaysAdjustmentIndicator)
}

// HasPaymentStreamNearestExchangeContractRefID returns true if PaymentStreamNearestExchangeContractRefID is present, Tag 42681.
func (m NoStreams) HasPaymentStreamNearestExchangeContractRefID() bool {
	return m.Has(tag.PaymentStreamNearestExchangeContractRefID)
}

// HasPaymentStreamVegaNotionalAmount returns true if PaymentStreamVegaNotionalAmount is present, Tag 42682.
func (m NoStreams) HasPaymentStreamVegaNotionalAmount() bool {
	return m.Has(tag.PaymentStreamVegaNotionalAmount)
}

// HasPaymentStreamRateIndexID returns true if PaymentStreamRateIndexID is present, Tag 43090.
func (m NoStreams) HasPaymentStreamRateIndexID() bool {
	return m.Has(tag.PaymentStreamRateIndexID)
}

// HasPaymentStreamRateIndexIDSource returns true if PaymentStreamRateIndexIDSource is present, Tag 43091.
func (m NoStreams) HasPaymentStreamRateIndexIDSource() bool {
	return m.Has(tag.PaymentStreamRateIndexIDSource)
}

// HasPaymentStreamNonDeliverableRefCurrency returns true if PaymentStreamNonDeliverableRefCurrency is present, Tag 40817.
func (m NoStreams) HasPaymentStreamNonDeliverableRefCurrency() bool {
	return m.Has(tag.PaymentStreamNonDeliverableRefCurrency)
}

// HasPaymentStreamNonDeliverableFixingDatesBusinessDayConvention returns true if PaymentStreamNonDeliverableFixingDatesBusinessDayConvention is present, Tag 40818.
func (m NoStreams) HasPaymentStreamNonDeliverableFixingDatesBusinessDayConvention() bool {
	return m.Has(tag.PaymentStreamNonDeliverableFixingDatesBusinessDayConvention)
}

// HasNoPaymentStreamNonDeliverableFixingDatesBusinessCenters returns true if NoPaymentStreamNonDeliverableFixingDatesBusinessCenters is present, Tag 40946.
func (m NoStreams) HasNoPaymentStreamNonDeliverableFixingDatesBusinessCenters() bool {
	return m.Has(tag.NoPaymentStreamNonDeliverableFixingDatesBusinessCenters)
}

// HasPaymentStreamNonDeliverableFixingDatesRelativeTo returns true if PaymentStreamNonDeliverableFixingDatesRelativeTo is present, Tag 40820.
func (m NoStreams) HasPaymentStreamNonDeliverableFixingDatesRelativeTo() bool {
	return m.Has(tag.PaymentStreamNonDeliverableFixingDatesRelativeTo)
}

// HasPaymentStreamNonDeliverableFixingDatesOffsetPeriod returns true if PaymentStreamNonDeliverableFixingDatesOffsetPeriod is present, Tag 40821.
func (m NoStreams) HasPaymentStreamNonDeliverableFixingDatesOffsetPeriod() bool {
	return m.Has(tag.PaymentStreamNonDeliverableFixingDatesOffsetPeriod)
}

// HasPaymentStreamNonDeliverableFixingDatesOffsetUnit returns true if PaymentStreamNonDeliverableFixingDatesOffsetUnit is present, Tag 40822.
func (m NoStreams) HasPaymentStreamNonDeliverableFixingDatesOffsetUnit() bool {
	return m.Has(tag.PaymentStreamNonDeliverableFixingDatesOffsetUnit)
}

// HasPaymentStreamNonDeliverableFixingDatesOffsetDayType returns true if PaymentStreamNonDeliverableFixingDatesOffsetDayType is present, Tag 40823.
func (m NoStreams) HasPaymentStreamNonDeliverableFixingDatesOffsetDayType() bool {
	return m.Has(tag.PaymentStreamNonDeliverableFixingDatesOffsetDayType)
}

// HasPaymentStreamNonDeliverableSettlRateSource returns true if PaymentStreamNonDeliverableSettlRateSource is present, Tag 40371.
func (m NoStreams) HasPaymentStreamNonDeliverableSettlRateSource() bool {
	return m.Has(tag.PaymentStreamNonDeliverableSettlRateSource)
}

// HasPaymentStreamNonDeliverableSettlReferencePage returns true if PaymentStreamNonDeliverableSettlReferencePage is present, Tag 40372.
func (m NoStreams) HasPaymentStreamNonDeliverableSettlReferencePage() bool {
	return m.Has(tag.PaymentStreamNonDeliverableSettlReferencePage)
}

// HasNoNonDeliverableFixingDates returns true if NoNonDeliverableFixingDates is present, Tag 40825.
func (m NoStreams) HasNoNonDeliverableFixingDates() bool {
	return m.Has(tag.NoNonDeliverableFixingDates)
}

// HasNoSettlRateFallbacks returns true if NoSettlRateFallbacks is present, Tag 40085.
func (m NoStreams) HasNoSettlRateFallbacks() bool {
	return m.Has(tag.NoSettlRateFallbacks)
}

// HasPaymentStreamFlatRateIndicator returns true if PaymentStreamFlatRateIndicator is present, Tag 41180.
func (m NoStreams) HasPaymentStreamFlatRateIndicator() bool {
	return m.Has(tag.PaymentStreamFlatRateIndicator)
}

// HasPaymentStreamFlatRateAmount returns true if PaymentStreamFlatRateAmount is present, Tag 41181.
func (m NoStreams) HasPaymentStreamFlatRateAmount() bool {
	return m.Has(tag.PaymentStreamFlatRateAmount)
}

// HasPaymentStreamFlatRateCurrency returns true if PaymentStreamFlatRateCurrency is present, Tag 41182.
func (m NoStreams) HasPaymentStreamFlatRateCurrency() bool {
	return m.Has(tag.PaymentStreamFlatRateCurrency)
}

// HasPaymentStreamMaximumPaymentAmount returns true if PaymentStreamMaximumPaymentAmount is present, Tag 41183.
func (m NoStreams) HasPaymentStreamMaximumPaymentAmount() bool {
	return m.Has(tag.PaymentStreamMaximumPaymentAmount)
}

// HasPaymentStreamMaximumPaymentCurrency returns true if PaymentStreamMaximumPaymentCurrency is present, Tag 41184.
func (m NoStreams) HasPaymentStreamMaximumPaymentCurrency() bool {
	return m.Has(tag.PaymentStreamMaximumPaymentCurrency)
}

// HasPaymentStreamMaximumTransactionAmount returns true if PaymentStreamMaximumTransactionAmount is present, Tag 41185.
func (m NoStreams) HasPaymentStreamMaximumTransactionAmount() bool {
	return m.Has(tag.PaymentStreamMaximumTransactionAmount)
}

// HasPaymentStreamMaximumTransactionCurrency returns true if PaymentStreamMaximumTransactionCurrency is present, Tag 41186.
func (m NoStreams) HasPaymentStreamMaximumTransactionCurrency() bool {
	return m.Has(tag.PaymentStreamMaximumTransactionCurrency)
}

// HasPaymentStreamCashSettlIndicator returns true if PaymentStreamCashSettlIndicator is present, Tag 42600.
func (m NoStreams) HasPaymentStreamCashSettlIndicator() bool {
	return m.Has(tag.PaymentStreamCashSettlIndicator)
}

// HasPaymentStreamCompoundingXIDRef returns true if PaymentStreamCompoundingXIDRef is present, Tag 42601.
func (m NoStreams) HasPaymentStreamCompoundingXIDRef() bool {
	return m.Has(tag.PaymentStreamCompoundingXIDRef)
}

// HasPaymentStreamCompoundingSpread returns true if PaymentStreamCompoundingSpread is present, Tag 42602.
func (m NoStreams) HasPaymentStreamCompoundingSpread() bool {
	return m.Has(tag.PaymentStreamCompoundingSpread)
}

// HasPaymentStreamInterpolationMethod returns true if PaymentStreamInterpolationMethod is present, Tag 42603.
func (m NoStreams) HasPaymentStreamInterpolationMethod() bool {
	return m.Has(tag.PaymentStreamInterpolationMethod)
}

// HasPaymentStreamInterpolationPeriod returns true if PaymentStreamInterpolationPeriod is present, Tag 42604.
func (m NoStreams) HasPaymentStreamInterpolationPeriod() bool {
	return m.Has(tag.PaymentStreamInterpolationPeriod)
}

// HasPaymentStreamCompoundingFixedRate returns true if PaymentStreamCompoundingFixedRate is present, Tag 42605.
func (m NoStreams) HasPaymentStreamCompoundingFixedRate() bool {
	return m.Has(tag.PaymentStreamCompoundingFixedRate)
}

// HasPaymentStreamCompoundingRateIndex returns true if PaymentStreamCompoundingRateIndex is present, Tag 42628.
func (m NoStreams) HasPaymentStreamCompoundingRateIndex() bool {
	return m.Has(tag.PaymentStreamCompoundingRateIndex)
}

// HasPaymentStreamCompoundingRateIndexCurvePeriod returns true if PaymentStreamCompoundingRateIndexCurvePeriod is present, Tag 42629.
func (m NoStreams) HasPaymentStreamCompoundingRateIndexCurvePeriod() bool {
	return m.Has(tag.PaymentStreamCompoundingRateIndexCurvePeriod)
}

// HasPaymentStreamCompoundingRateIndexCurveUnit returns true if PaymentStreamCompoundingRateIndexCurveUnit is present, Tag 42630.
func (m NoStreams) HasPaymentStreamCompoundingRateIndexCurveUnit() bool {
	return m.Has(tag.PaymentStreamCompoundingRateIndexCurveUnit)
}

// HasPaymentStreamCompoundingRateMultiplier returns true if PaymentStreamCompoundingRateMultiplier is present, Tag 42631.
func (m NoStreams) HasPaymentStreamCompoundingRateMultiplier() bool {
	return m.Has(tag.PaymentStreamCompoundingRateMultiplier)
}

// HasPaymentStreamCompoundingRateSpread returns true if PaymentStreamCompoundingRateSpread is present, Tag 42632.
func (m NoStreams) HasPaymentStreamCompoundingRateSpread() bool {
	return m.Has(tag.PaymentStreamCompoundingRateSpread)
}

// HasPaymentStreamCompoundingRateSpreadPositionType returns true if PaymentStreamCompoundingRateSpreadPositionType is present, Tag 42633.
func (m NoStreams) HasPaymentStreamCompoundingRateSpreadPositionType() bool {
	return m.Has(tag.PaymentStreamCompoundingRateSpreadPositionType)
}

// HasPaymentStreamCompoundingRateTreatment returns true if PaymentStreamCompoundingRateTreatment is present, Tag 42634.
func (m NoStreams) HasPaymentStreamCompoundingRateTreatment() bool {
	return m.Has(tag.PaymentStreamCompoundingRateTreatment)
}

// HasPaymentStreamCompoundingCapRate returns true if PaymentStreamCompoundingCapRate is present, Tag 42635.
func (m NoStreams) HasPaymentStreamCompoundingCapRate() bool {
	return m.Has(tag.PaymentStreamCompoundingCapRate)
}

// HasPaymentStreamCompoundingCapRateBuySide returns true if PaymentStreamCompoundingCapRateBuySide is present, Tag 42636.
func (m NoStreams) HasPaymentStreamCompoundingCapRateBuySide() bool {
	return m.Has(tag.PaymentStreamCompoundingCapRateBuySide)
}

// HasPaymentStreamCompoundingCapRateSellSide returns true if PaymentStreamCompoundingCapRateSellSide is present, Tag 42637.
func (m NoStreams) HasPaymentStreamCompoundingCapRateSellSide() bool {
	return m.Has(tag.PaymentStreamCompoundingCapRateSellSide)
}

// HasPaymentStreamCompoundingFloorRate returns true if PaymentStreamCompoundingFloorRate is present, Tag 42638.
func (m NoStreams) HasPaymentStreamCompoundingFloorRate() bool {
	return m.Has(tag.PaymentStreamCompoundingFloorRate)
}

// HasPaymentStreamCompoundingFloorRateBuySide returns true if PaymentStreamCompoundingFloorRateBuySide is present, Tag 42639.
func (m NoStreams) HasPaymentStreamCompoundingFloorRateBuySide() bool {
	return m.Has(tag.PaymentStreamCompoundingFloorRateBuySide)
}

// HasPaymentStreamCompoundingFloorRateSellSide returns true if PaymentStreamCompoundingFloorRateSellSide is present, Tag 42640.
func (m NoStreams) HasPaymentStreamCompoundingFloorRateSellSide() bool {
	return m.Has(tag.PaymentStreamCompoundingFloorRateSellSide)
}

// HasPaymentStreamCompoundingInitialRate returns true if PaymentStreamCompoundingInitialRate is present, Tag 42641.
func (m NoStreams) HasPaymentStreamCompoundingInitialRate() bool {
	return m.Has(tag.PaymentStreamCompoundingInitialRate)
}

// HasPaymentStreamCompoundingFinalRateRoundingDirection returns true if PaymentStreamCompoundingFinalRateRoundingDirection is present, Tag 42642.
func (m NoStreams) HasPaymentStreamCompoundingFinalRateRoundingDirection() bool {
	return m.Has(tag.PaymentStreamCompoundingFinalRateRoundingDirection)
}

// HasPaymentStreamCompoundingFinalRatePrecision returns true if PaymentStreamCompoundingFinalRatePrecision is present, Tag 42643.
func (m NoStreams) HasPaymentStreamCompoundingFinalRatePrecision() bool {
	return m.Has(tag.PaymentStreamCompoundingFinalRatePrecision)
}

// HasPaymentStreamCompoundingAveragingMethod returns true if PaymentStreamCompoundingAveragingMethod is present, Tag 42644.
func (m NoStreams) HasPaymentStreamCompoundingAveragingMethod() bool {
	return m.Has(tag.PaymentStreamCompoundingAveragingMethod)
}

// HasPaymentStreamCompoundingNegativeRateTreatment returns true if PaymentStreamCompoundingNegativeRateTreatment is present, Tag 42645.
func (m NoStreams) HasPaymentStreamCompoundingNegativeRateTreatment() bool {
	return m.Has(tag.PaymentStreamCompoundingNegativeRateTreatment)
}

// HasPaymentStreamCompoundingDatesBusinessDayConvention returns true if PaymentStreamCompoundingDatesBusinessDayConvention is present, Tag 42609.
func (m NoStreams) HasPaymentStreamCompoundingDatesBusinessDayConvention() bool {
	return m.Has(tag.PaymentStreamCompoundingDatesBusinessDayConvention)
}

// HasNoPaymentStreamCompoundingDatesBusinessCenters returns true if NoPaymentStreamCompoundingDatesBusinessCenters is present, Tag 42620.
func (m NoStreams) HasNoPaymentStreamCompoundingDatesBusinessCenters() bool {
	return m.Has(tag.NoPaymentStreamCompoundingDatesBusinessCenters)
}

// HasNoPaymentStreamCompoundingDates returns true if NoPaymentStreamCompoundingDates is present, Tag 42606.
func (m NoStreams) HasNoPaymentStreamCompoundingDates() bool {
	return m.Has(tag.NoPaymentStreamCompoundingDates)
}

// HasPaymentStreamCompoundingDatesRelativeTo returns true if PaymentStreamCompoundingDatesRelativeTo is present, Tag 42610.
func (m NoStreams) HasPaymentStreamCompoundingDatesRelativeTo() bool {
	return m.Has(tag.PaymentStreamCompoundingDatesRelativeTo)
}

// HasPaymentStreamCompoundingDatesOffsetPeriod returns true if PaymentStreamCompoundingDatesOffsetPeriod is present, Tag 42611.
func (m NoStreams) HasPaymentStreamCompoundingDatesOffsetPeriod() bool {
	return m.Has(tag.PaymentStreamCompoundingDatesOffsetPeriod)
}

// HasPaymentStreamCompoundingDatesOffsetUnit returns true if PaymentStreamCompoundingDatesOffsetUnit is present, Tag 42612.
func (m NoStreams) HasPaymentStreamCompoundingDatesOffsetUnit() bool {
	return m.Has(tag.PaymentStreamCompoundingDatesOffsetUnit)
}

// HasPaymentStreamCompoundingDatesOffsetDayType returns true if PaymentStreamCompoundingDatesOffsetDayType is present, Tag 42613.
func (m NoStreams) HasPaymentStreamCompoundingDatesOffsetDayType() bool {
	return m.Has(tag.PaymentStreamCompoundingDatesOffsetDayType)
}

// HasPaymentStreamCompoundingPeriodSkip returns true if PaymentStreamCompoundingPeriodSkip is present, Tag 42614.
func (m NoStreams) HasPaymentStreamCompoundingPeriodSkip() bool {
	return m.Has(tag.PaymentStreamCompoundingPeriodSkip)
}

// HasPaymentStreamCompoundingStartDateUnadjusted returns true if PaymentStreamCompoundingStartDateUnadjusted is present, Tag 42646.
func (m NoStreams) HasPaymentStreamCompoundingStartDateUnadjusted() bool {
	return m.Has(tag.PaymentStreamCompoundingStartDateUnadjusted)
}

// HasPaymentStreamCompoundingStartDateRelativeTo returns true if PaymentStreamCompoundingStartDateRelativeTo is present, Tag 42647.
func (m NoStreams) HasPaymentStreamCompoundingStartDateRelativeTo() bool {
	return m.Has(tag.PaymentStreamCompoundingStartDateRelativeTo)
}

// HasPaymentStreamCompoundingStartDateOffsetPeriod returns true if PaymentStreamCompoundingStartDateOffsetPeriod is present, Tag 42648.
func (m NoStreams) HasPaymentStreamCompoundingStartDateOffsetPeriod() bool {
	return m.Has(tag.PaymentStreamCompoundingStartDateOffsetPeriod)
}

// HasPaymentStreamCompoundingStartDateOffsetUnit returns true if PaymentStreamCompoundingStartDateOffsetUnit is present, Tag 42649.
func (m NoStreams) HasPaymentStreamCompoundingStartDateOffsetUnit() bool {
	return m.Has(tag.PaymentStreamCompoundingStartDateOffsetUnit)
}

// HasPaymentStreamCompoundingStartDateOffsetDayType returns true if PaymentStreamCompoundingStartDateOffsetDayType is present, Tag 42650.
func (m NoStreams) HasPaymentStreamCompoundingStartDateOffsetDayType() bool {
	return m.Has(tag.PaymentStreamCompoundingStartDateOffsetDayType)
}

// HasPaymentStreamCompoundingStartDateAdjusted returns true if PaymentStreamCompoundingStartDateAdjusted is present, Tag 42651.
func (m NoStreams) HasPaymentStreamCompoundingStartDateAdjusted() bool {
	return m.Has(tag.PaymentStreamCompoundingStartDateAdjusted)
}

// HasPaymentStreamCompoundingEndDateUnadjusted returns true if PaymentStreamCompoundingEndDateUnadjusted is present, Tag 42622.
func (m NoStreams) HasPaymentStreamCompoundingEndDateUnadjusted() bool {
	return m.Has(tag.PaymentStreamCompoundingEndDateUnadjusted)
}

// HasPaymentStreamCompoundingEndDateRelativeTo returns true if PaymentStreamCompoundingEndDateRelativeTo is present, Tag 42623.
func (m NoStreams) HasPaymentStreamCompoundingEndDateRelativeTo() bool {
	return m.Has(tag.PaymentStreamCompoundingEndDateRelativeTo)
}

// HasPaymentStreamCompoundingEndDateOffsetPeriod returns true if PaymentStreamCompoundingEndDateOffsetPeriod is present, Tag 42624.
func (m NoStreams) HasPaymentStreamCompoundingEndDateOffsetPeriod() bool {
	return m.Has(tag.PaymentStreamCompoundingEndDateOffsetPeriod)
}

// HasPaymentStreamCompoundingEndDateOffsetUnit returns true if PaymentStreamCompoundingEndDateOffsetUnit is present, Tag 42625.
func (m NoStreams) HasPaymentStreamCompoundingEndDateOffsetUnit() bool {
	return m.Has(tag.PaymentStreamCompoundingEndDateOffsetUnit)
}

// HasPaymentStreamCompoundingEndDateOffsetDayType returns true if PaymentStreamCompoundingEndDateOffsetDayType is present, Tag 42626.
func (m NoStreams) HasPaymentStreamCompoundingEndDateOffsetDayType() bool {
	return m.Has(tag.PaymentStreamCompoundingEndDateOffsetDayType)
}

// HasPaymentStreamCompoundingEndDateAdjusted returns true if PaymentStreamCompoundingEndDateAdjusted is present, Tag 42627.
func (m NoStreams) HasPaymentStreamCompoundingEndDateAdjusted() bool {
	return m.Has(tag.PaymentStreamCompoundingEndDateAdjusted)
}

// HasPaymentStreamCompoundingFrequencyPeriod returns true if PaymentStreamCompoundingFrequencyPeriod is present, Tag 42615.
func (m NoStreams) HasPaymentStreamCompoundingFrequencyPeriod() bool {
	return m.Has(tag.PaymentStreamCompoundingFrequencyPeriod)
}

// HasPaymentStreamCompoundingFrequencyUnit returns true if PaymentStreamCompoundingFrequencyUnit is present, Tag 42616.
func (m NoStreams) HasPaymentStreamCompoundingFrequencyUnit() bool {
	return m.Has(tag.PaymentStreamCompoundingFrequencyUnit)
}

// HasPaymentStreamCompoundingRollConvention returns true if PaymentStreamCompoundingRollConvention is present, Tag 42617.
func (m NoStreams) HasPaymentStreamCompoundingRollConvention() bool {
	return m.Has(tag.PaymentStreamCompoundingRollConvention)
}

// HasPaymentStreamBoundsFirstDateUnadjusted returns true if PaymentStreamBoundsFirstDateUnadjusted is present, Tag 42618.
func (m NoStreams) HasPaymentStreamBoundsFirstDateUnadjusted() bool {
	return m.Has(tag.PaymentStreamBoundsFirstDateUnadjusted)
}

// HasPaymentStreamBoundsLastDateUnadjusted returns true if PaymentStreamBoundsLastDateUnadjusted is present, Tag 42619.
func (m NoStreams) HasPaymentStreamBoundsLastDateUnadjusted() bool {
	return m.Has(tag.PaymentStreamBoundsLastDateUnadjusted)
}

// HasPaymentStreamOtherDayCount returns true if PaymentStreamOtherDayCount is present, Tag 43106.
func (m NoStreams) HasPaymentStreamOtherDayCount() bool {
	return m.Has(tag.PaymentStreamOtherDayCount)
}

// HasNoPaymentSchedules returns true if NoPaymentSchedules is present, Tag 40828.
func (m NoStreams) HasNoPaymentSchedules() bool {
	return m.Has(tag.NoPaymentSchedules)
}

// HasNoPaymentStubs returns true if NoPaymentStubs is present, Tag 40872.
func (m NoStreams) HasNoPaymentStubs() bool {
	return m.Has(tag.NoPaymentStubs)
}

// HasStreamText returns true if StreamText is present, Tag 40056.
func (m NoStreams) HasStreamText() bool {
	return m.Has(tag.StreamText)
}

// HasEncodedStreamTextLen returns true if EncodedStreamTextLen is present, Tag 40982.
func (m NoStreams) HasEncodedStreamTextLen() bool {
	return m.Has(tag.EncodedStreamTextLen)
}

// HasEncodedStreamText returns true if EncodedStreamText is present, Tag 40983.
func (m NoStreams) HasEncodedStreamText() bool {
	return m.Has(tag.EncodedStreamText)
}

// HasStreamXID returns true if StreamXID is present, Tag 41303.
func (m NoStreams) HasStreamXID() bool {
	return m.Has(tag.StreamXID)
}

// HasStreamNotionalXIDRef returns true if StreamNotionalXIDRef is present, Tag 41305.
func (m NoStreams) HasStreamNotionalXIDRef() bool {
	return m.Has(tag.StreamNotionalXIDRef)
}

// HasStreamNotionalFrequencyPeriod returns true if StreamNotionalFrequencyPeriod is present, Tag 41306.
func (m NoStreams) HasStreamNotionalFrequencyPeriod() bool {
	return m.Has(tag.StreamNotionalFrequencyPeriod)
}

// HasStreamNotionalFrequencyUnit returns true if StreamNotionalFrequencyUnit is present, Tag 41307.
func (m NoStreams) HasStreamNotionalFrequencyUnit() bool {
	return m.Has(tag.StreamNotionalFrequencyUnit)
}

// HasStreamNotionalCommodityFrequency returns true if StreamNotionalCommodityFrequency is present, Tag 41308.
func (m NoStreams) HasStreamNotionalCommodityFrequency() bool {
	return m.Has(tag.StreamNotionalCommodityFrequency)
}

// HasStreamNotionalUnitOfMeasure returns true if StreamNotionalUnitOfMeasure is present, Tag 41309.
func (m NoStreams) HasStreamNotionalUnitOfMeasure() bool {
	return m.Has(tag.StreamNotionalUnitOfMeasure)
}

// HasStreamTotalNotional returns true if StreamTotalNotional is present, Tag 41310.
func (m NoStreams) HasStreamTotalNotional() bool {
	return m.Has(tag.StreamTotalNotional)
}

// HasStreamTotalNotionalUnitOfMeasure returns true if StreamTotalNotionalUnitOfMeasure is present, Tag 41311.
func (m NoStreams) HasStreamTotalNotionalUnitOfMeasure() bool {
	return m.Has(tag.StreamTotalNotionalUnitOfMeasure)
}

// HasStreamCommodityBase returns true if StreamCommodityBase is present, Tag 41251.
func (m NoStreams) HasStreamCommodityBase() bool {
	return m.Has(tag.StreamCommodityBase)
}

// HasStreamCommodityType returns true if StreamCommodityType is present, Tag 41252.
func (m NoStreams) HasStreamCommodityType() bool {
	return m.Has(tag.StreamCommodityType)
}

// HasStreamCommoditySecurityID returns true if StreamCommoditySecurityID is present, Tag 41253.
func (m NoStreams) HasStreamCommoditySecurityID() bool {
	return m.Has(tag.StreamCommoditySecurityID)
}

// HasStreamCommoditySecurityIDSource returns true if StreamCommoditySecurityIDSource is present, Tag 41254.
func (m NoStreams) HasStreamCommoditySecurityIDSource() bool {
	return m.Has(tag.StreamCommoditySecurityIDSource)
}

// HasNoStreamCommodityAltIDs returns true if NoStreamCommodityAltIDs is present, Tag 41277.
func (m NoStreams) HasNoStreamCommodityAltIDs() bool {
	return m.Has(tag.NoStreamCommodityAltIDs)
}

// HasStreamCommodityDesc returns true if StreamCommodityDesc is present, Tag 41255.
func (m NoStreams) HasStreamCommodityDesc() bool {
	return m.Has(tag.StreamCommodityDesc)
}

// HasEncodedStreamCommodityDescLen returns true if EncodedStreamCommodityDescLen is present, Tag 41256.
func (m NoStreams) HasEncodedStreamCommodityDescLen() bool {
	return m.Has(tag.EncodedStreamCommodityDescLen)
}

// HasEncodedStreamCommodityDesc returns true if EncodedStreamCommodityDesc is present, Tag 41257.
func (m NoStreams) HasEncodedStreamCommodityDesc() bool {
	return m.Has(tag.EncodedStreamCommodityDesc)
}

// HasNoStreamAssetAttributes returns true if NoStreamAssetAttributes is present, Tag 41237.
func (m NoStreams) HasNoStreamAssetAttributes() bool {
	return m.Has(tag.NoStreamAssetAttributes)
}

// HasStreamCommodityUnitOfMeasure returns true if StreamCommodityUnitOfMeasure is present, Tag 41258.
func (m NoStreams) HasStreamCommodityUnitOfMeasure() bool {
	return m.Has(tag.StreamCommodityUnitOfMeasure)
}

// HasStreamCommodityCurrency returns true if StreamCommodityCurrency is present, Tag 41259.
func (m NoStreams) HasStreamCommodityCurrency() bool {
	return m.Has(tag.StreamCommodityCurrency)
}

// HasStreamCommodityExchange returns true if StreamCommodityExchange is present, Tag 41260.
func (m NoStreams) HasStreamCommodityExchange() bool {
	return m.Has(tag.StreamCommodityExchange)
}

// HasStreamCommodityRateSource returns true if StreamCommodityRateSource is present, Tag 41261.
func (m NoStreams) HasStreamCommodityRateSource() bool {
	return m.Has(tag.StreamCommodityRateSource)
}

// HasStreamCommodityRateReferencePage returns true if StreamCommodityRateReferencePage is present, Tag 41262.
func (m NoStreams) HasStreamCommodityRateReferencePage() bool {
	return m.Has(tag.StreamCommodityRateReferencePage)
}

// HasStreamCommodityRateReferencePageHeading returns true if StreamCommodityRateReferencePageHeading is present, Tag 41263.
func (m NoStreams) HasStreamCommodityRateReferencePageHeading() bool {
	return m.Has(tag.StreamCommodityRateReferencePageHeading)
}

// HasStreamDataProvider returns true if StreamDataProvider is present, Tag 41264.
func (m NoStreams) HasStreamDataProvider() bool {
	return m.Has(tag.StreamDataProvider)
}

// HasNoStreamCommodityDataSources returns true if NoStreamCommodityDataSources is present, Tag 41280.
func (m NoStreams) HasNoStreamCommodityDataSources() bool {
	return m.Has(tag.NoStreamCommodityDataSources)
}

// HasStreamCommodityPricingType returns true if StreamCommodityPricingType is present, Tag 41265.
func (m NoStreams) HasStreamCommodityPricingType() bool {
	return m.Has(tag.StreamCommodityPricingType)
}

// HasStreamCommodityNearbySettlDayPeriod returns true if StreamCommodityNearbySettlDayPeriod is present, Tag 41266.
func (m NoStreams) HasStreamCommodityNearbySettlDayPeriod() bool {
	return m.Has(tag.StreamCommodityNearbySettlDayPeriod)
}

// HasStreamCommodityNearbySettlDayUnit returns true if StreamCommodityNearbySettlDayUnit is present, Tag 41267.
func (m NoStreams) HasStreamCommodityNearbySettlDayUnit() bool {
	return m.Has(tag.StreamCommodityNearbySettlDayUnit)
}

// HasStreamCommoditySettlDateUnadjusted returns true if StreamCommoditySettlDateUnadjusted is present, Tag 41268.
func (m NoStreams) HasStreamCommoditySettlDateUnadjusted() bool {
	return m.Has(tag.StreamCommoditySettlDateUnadjusted)
}

// HasStreamCommoditySettlDateBusinessDayConvention returns true if StreamCommoditySettlDateBusinessDayConvention is present, Tag 41269.
func (m NoStreams) HasStreamCommoditySettlDateBusinessDayConvention() bool {
	return m.Has(tag.StreamCommoditySettlDateBusinessDayConvention)
}

// HasNoStreamCommoditySettlBusinessCenters returns true if NoStreamCommoditySettlBusinessCenters is present, Tag 41249.
func (m NoStreams) HasNoStreamCommoditySettlBusinessCenters() bool {
	return m.Has(tag.NoStreamCommoditySettlBusinessCenters)
}

// HasStreamCommoditySettlDateAdjusted returns true if StreamCommoditySettlDateAdjusted is present, Tag 41270.
func (m NoStreams) HasStreamCommoditySettlDateAdjusted() bool {
	return m.Has(tag.StreamCommoditySettlDateAdjusted)
}

// HasStreamCommoditySettlMonth returns true if StreamCommoditySettlMonth is present, Tag 41271.
func (m NoStreams) HasStreamCommoditySettlMonth() bool {
	return m.Has(tag.StreamCommoditySettlMonth)
}

// HasStreamCommoditySettlDateRollPeriod returns true if StreamCommoditySettlDateRollPeriod is present, Tag 41272.
func (m NoStreams) HasStreamCommoditySettlDateRollPeriod() bool {
	return m.Has(tag.StreamCommoditySettlDateRollPeriod)
}

// HasStreamCommoditySettlDateRollUnit returns true if StreamCommoditySettlDateRollUnit is present, Tag 41273.
func (m NoStreams) HasStreamCommoditySettlDateRollUnit() bool {
	return m.Has(tag.StreamCommoditySettlDateRollUnit)
}

// HasStreamCommoditySettlDayType returns true if StreamCommoditySettlDayType is present, Tag 41274.
func (m NoStreams) HasStreamCommoditySettlDayType() bool {
	return m.Has(tag.StreamCommoditySettlDayType)
}

// HasNoStreamCommoditySettlPeriods returns true if NoStreamCommoditySettlPeriods is present, Tag 41289.
func (m NoStreams) HasNoStreamCommoditySettlPeriods() bool {
	return m.Has(tag.NoStreamCommoditySettlPeriods)
}

// HasStreamCommodityXID returns true if StreamCommodityXID is present, Tag 41275.
func (m NoStreams) HasStreamCommodityXID() bool {
	return m.Has(tag.StreamCommodityXID)
}

// HasStreamCommodityXIDRef returns true if StreamCommodityXIDRef is present, Tag 41276.
func (m NoStreams) HasStreamCommodityXIDRef() bool {
	return m.Has(tag.StreamCommodityXIDRef)
}

// HasStreamCommodityDeliveryPricingRegion returns true if StreamCommodityDeliveryPricingRegion is present, Tag 42587.
func (m NoStreams) HasStreamCommodityDeliveryPricingRegion() bool {
	return m.Has(tag.StreamCommodityDeliveryPricingRegion)
}

// HasDeliveryStreamType returns true if DeliveryStreamType is present, Tag 41058.
func (m NoStreams) HasDeliveryStreamType() bool {
	return m.Has(tag.DeliveryStreamType)
}

// HasNoDeliveryStreamCommoditySources returns true if NoDeliveryStreamCommoditySources is present, Tag 41085.
func (m NoStreams) HasNoDeliveryStreamCommoditySources() bool {
	return m.Has(tag.NoDeliveryStreamCommoditySources)
}

// HasDeliveryStreamPipeline returns true if DeliveryStreamPipeline is present, Tag 41059.
func (m NoStreams) HasDeliveryStreamPipeline() bool {
	return m.Has(tag.DeliveryStreamPipeline)
}

// HasDeliveryStreamEntryPoint returns true if DeliveryStreamEntryPoint is present, Tag 41060.
func (m NoStreams) HasDeliveryStreamEntryPoint() bool {
	return m.Has(tag.DeliveryStreamEntryPoint)
}

// HasDeliveryStreamWithdrawalPoint returns true if DeliveryStreamWithdrawalPoint is present, Tag 41061.
func (m NoStreams) HasDeliveryStreamWithdrawalPoint() bool {
	return m.Has(tag.DeliveryStreamWithdrawalPoint)
}

// HasDeliveryStreamDeliveryPoint returns true if DeliveryStreamDeliveryPoint is present, Tag 41062.
func (m NoStreams) HasDeliveryStreamDeliveryPoint() bool {
	return m.Has(tag.DeliveryStreamDeliveryPoint)
}

// HasDeliveryStreamDeliveryRestriction returns true if DeliveryStreamDeliveryRestriction is present, Tag 41063.
func (m NoStreams) HasDeliveryStreamDeliveryRestriction() bool {
	return m.Has(tag.DeliveryStreamDeliveryRestriction)
}

// HasDeliveryStreamDeliveryContingency returns true if DeliveryStreamDeliveryContingency is present, Tag 41064.
func (m NoStreams) HasDeliveryStreamDeliveryContingency() bool {
	return m.Has(tag.DeliveryStreamDeliveryContingency)
}

// HasDeliveryStreamDeliveryContingentPartySide returns true if DeliveryStreamDeliveryContingentPartySide is present, Tag 41065.
func (m NoStreams) HasDeliveryStreamDeliveryContingentPartySide() bool {
	return m.Has(tag.DeliveryStreamDeliveryContingentPartySide)
}

// HasDeliveryStreamDeliverAtSourceIndicator returns true if DeliveryStreamDeliverAtSourceIndicator is present, Tag 41066.
func (m NoStreams) HasDeliveryStreamDeliverAtSourceIndicator() bool {
	return m.Has(tag.DeliveryStreamDeliverAtSourceIndicator)
}

// HasDeliveryStreamRiskApportionment returns true if DeliveryStreamRiskApportionment is present, Tag 41067.
func (m NoStreams) HasDeliveryStreamRiskApportionment() bool {
	return m.Has(tag.DeliveryStreamRiskApportionment)
}

// HasDeliveryStreamRiskApportionmentSource returns true if DeliveryStreamRiskApportionmentSource is present, Tag 41218.
func (m NoStreams) HasDeliveryStreamRiskApportionmentSource() bool {
	return m.Has(tag.DeliveryStreamRiskApportionmentSource)
}

// HasNoDeliveryStreamCycles returns true if NoDeliveryStreamCycles is present, Tag 41081.
func (m NoStreams) HasNoDeliveryStreamCycles() bool {
	return m.Has(tag.NoDeliveryStreamCycles)
}

// HasDeliveryStreamTitleTransferLocation returns true if DeliveryStreamTitleTransferLocation is present, Tag 41068.
func (m NoStreams) HasDeliveryStreamTitleTransferLocation() bool {
	return m.Has(tag.DeliveryStreamTitleTransferLocation)
}

// HasDeliveryStreamTitleTransferCondition returns true if DeliveryStreamTitleTransferCondition is present, Tag 41069.
func (m NoStreams) HasDeliveryStreamTitleTransferCondition() bool {
	return m.Has(tag.DeliveryStreamTitleTransferCondition)
}

// HasDeliveryStreamImporterOfRecord returns true if DeliveryStreamImporterOfRecord is present, Tag 41070.
func (m NoStreams) HasDeliveryStreamImporterOfRecord() bool {
	return m.Has(tag.DeliveryStreamImporterOfRecord)
}

// HasDeliveryStreamNegativeTolerance returns true if DeliveryStreamNegativeTolerance is present, Tag 41071.
func (m NoStreams) HasDeliveryStreamNegativeTolerance() bool {
	return m.Has(tag.DeliveryStreamNegativeTolerance)
}

// HasDeliveryStreamPositiveTolerance returns true if DeliveryStreamPositiveTolerance is present, Tag 41072.
func (m NoStreams) HasDeliveryStreamPositiveTolerance() bool {
	return m.Has(tag.DeliveryStreamPositiveTolerance)
}

// HasDeliveryStreamToleranceUnitOfMeasure returns true if DeliveryStreamToleranceUnitOfMeasure is present, Tag 41073.
func (m NoStreams) HasDeliveryStreamToleranceUnitOfMeasure() bool {
	return m.Has(tag.DeliveryStreamToleranceUnitOfMeasure)
}

// HasDeliveryStreamToleranceType returns true if DeliveryStreamToleranceType is present, Tag 41074.
func (m NoStreams) HasDeliveryStreamToleranceType() bool {
	return m.Has(tag.DeliveryStreamToleranceType)
}

// HasDeliveryStreamToleranceOptionSide returns true if DeliveryStreamToleranceOptionSide is present, Tag 41075.
func (m NoStreams) HasDeliveryStreamToleranceOptionSide() bool {
	return m.Has(tag.DeliveryStreamToleranceOptionSide)
}

// HasDeliveryStreamTotalPositiveTolerance returns true if DeliveryStreamTotalPositiveTolerance is present, Tag 41076.
func (m NoStreams) HasDeliveryStreamTotalPositiveTolerance() bool {
	return m.Has(tag.DeliveryStreamTotalPositiveTolerance)
}

// HasDeliveryStreamTotalNegativeTolerance returns true if DeliveryStreamTotalNegativeTolerance is present, Tag 41077.
func (m NoStreams) HasDeliveryStreamTotalNegativeTolerance() bool {
	return m.Has(tag.DeliveryStreamTotalNegativeTolerance)
}

// HasDeliveryStreamNotionalConversionFactor returns true if DeliveryStreamNotionalConversionFactor is present, Tag 41078.
func (m NoStreams) HasDeliveryStreamNotionalConversionFactor() bool {
	return m.Has(tag.DeliveryStreamNotionalConversionFactor)
}

// HasDeliveryStreamTransportEquipment returns true if DeliveryStreamTransportEquipment is present, Tag 41079.
func (m NoStreams) HasDeliveryStreamTransportEquipment() bool {
	return m.Has(tag.DeliveryStreamTransportEquipment)
}

// HasDeliveryStreamElectingPartySide returns true if DeliveryStreamElectingPartySide is present, Tag 41080.
func (m NoStreams) HasDeliveryStreamElectingPartySide() bool {
	return m.Has(tag.DeliveryStreamElectingPartySide)
}

// HasDeliveryStreamDeliveryPointSource returns true if DeliveryStreamDeliveryPointSource is present, Tag 42192.
func (m NoStreams) HasDeliveryStreamDeliveryPointSource() bool {
	return m.Has(tag.DeliveryStreamDeliveryPointSource)
}

// HasDeliveryStreamDeliveryPointDesc returns true if DeliveryStreamDeliveryPointDesc is present, Tag 42193.
func (m NoStreams) HasDeliveryStreamDeliveryPointDesc() bool {
	return m.Has(tag.DeliveryStreamDeliveryPointDesc)
}

// HasDeliveryStreamRouteOrCharter returns true if DeliveryStreamRouteOrCharter is present, Tag 43094.
func (m NoStreams) HasDeliveryStreamRouteOrCharter() bool {
	return m.Has(tag.DeliveryStreamRouteOrCharter)
}

// HasNoDeliverySchedules returns true if NoDeliverySchedules is present, Tag 41037.
func (m NoStreams) HasNoDeliverySchedules() bool {
	return m.Has(tag.NoDeliverySchedules)
}

// HasStreamVersion returns true if StreamVersion is present, Tag 42784.
func (m NoStreams) HasStreamVersion() bool {
	return m.Has(tag.StreamVersion)
}

// HasStreamVersionEffectiveDate returns true if StreamVersionEffectiveDate is present, Tag 42785.
func (m NoStreams) HasStreamVersionEffectiveDate() bool {
	return m.Has(tag.StreamVersionEffectiveDate)
}

// HasStreamNotionalDeterminationMethod returns true if StreamNotionalDeterminationMethod is present, Tag 42786.
func (m NoStreams) HasStreamNotionalDeterminationMethod() bool {
	return m.Has(tag.StreamNotionalDeterminationMethod)
}

// HasStreamNotionalAdjustments returns true if StreamNotionalAdjustments is present, Tag 42787.
func (m NoStreams) HasStreamNotionalAdjustments() bool {
	return m.Has(tag.StreamNotionalAdjustments)
}

// NoStreamEffectiveBusinessCenters is a repeating group element, Tag 40960.
type NoStreamEffectiveBusinessCenters struct {
	*quickfix.Group
}

// SetStreamEffectiveDateBusinessCenter sets StreamEffectiveDateBusinessCenter, Tag 40909.
func (m NoStreamEffectiveBusinessCenters) SetStreamEffectiveDateBusinessCenter(v string) {
	m.Set(field.NewStreamEffectiveDateBusinessCenter(v))
}

// GetStreamEffectiveDateBusinessCenter gets StreamEffectiveDateBusinessCenter, Tag 40909.
func (m NoStreamEffectiveBusinessCenters) GetStreamEffectiveDateBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.StreamEffectiveDateBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasStreamEffectiveDateBusinessCenter returns true if StreamEffectiveDateBusinessCenter is present, Tag 40909.
func (m NoStreamEffectiveBusinessCenters) HasStreamEffectiveDateBusinessCenter() bool {
	return m.Has(tag.StreamEffectiveDateBusinessCenter)
}

// NoStreamEffectiveBusinessCentersRepeatingGroup is a repeating group, Tag 40960.
type NoStreamEffectiveBusinessCentersRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoStreamEffectiveBusinessCentersRepeatingGroup returns an initialized, NoStreamEffectiveBusinessCentersRepeatingGroup.
func NewNoStreamEffectiveBusinessCentersRepeatingGroup() NoStreamEffectiveBusinessCentersRepeatingGroup {
	return NoStreamEffectiveBusinessCentersRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoStreamEffectiveBusinessCenters,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.StreamEffectiveDateBusinessCenter),
			},
		),
	}
}

// Add create and append a new NoStreamEffectiveBusinessCenters to this group.
func (m NoStreamEffectiveBusinessCentersRepeatingGroup) Add() NoStreamEffectiveBusinessCenters {
	g := m.RepeatingGroup.Add()
	return NoStreamEffectiveBusinessCenters{g}
}

// Get returns the ith NoStreamEffectiveBusinessCenters in the NoStreamEffectiveBusinessCentersRepeatinGroup.
func (m NoStreamEffectiveBusinessCentersRepeatingGroup) Get(i int) NoStreamEffectiveBusinessCenters {
	return NoStreamEffectiveBusinessCenters{m.RepeatingGroup.Get(i)}
}

// NoStreamTerminationDateBusinessCenters is a repeating group element, Tag 40961.
type NoStreamTerminationDateBusinessCenters struct {
	*quickfix.Group
}

// SetStreamTerminationDateBusinessCenter sets StreamTerminationDateBusinessCenter, Tag 40067.
func (m NoStreamTerminationDateBusinessCenters) SetStreamTerminationDateBusinessCenter(v string) {
	m.Set(field.NewStreamTerminationDateBusinessCenter(v))
}

// GetStreamTerminationDateBusinessCenter gets StreamTerminationDateBusinessCenter, Tag 40067.
func (m NoStreamTerminationDateBusinessCenters) GetStreamTerminationDateBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.StreamTerminationDateBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasStreamTerminationDateBusinessCenter returns true if StreamTerminationDateBusinessCenter is present, Tag 40067.
func (m NoStreamTerminationDateBusinessCenters) HasStreamTerminationDateBusinessCenter() bool {
	return m.Has(tag.StreamTerminationDateBusinessCenter)
}

// NoStreamTerminationDateBusinessCentersRepeatingGroup is a repeating group, Tag 40961.
type NoStreamTerminationDateBusinessCentersRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoStreamTerminationDateBusinessCentersRepeatingGroup returns an initialized, NoStreamTerminationDateBusinessCentersRepeatingGroup.
func NewNoStreamTerminationDateBusinessCentersRepeatingGroup() NoStreamTerminationDateBusinessCentersRepeatingGroup {
	return NoStreamTerminationDateBusinessCentersRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoStreamTerminationDateBusinessCenters,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.StreamTerminationDateBusinessCenter),
			},
		),
	}
}

// Add create and append a new NoStreamTerminationDateBusinessCenters to this group.
func (m NoStreamTerminationDateBusinessCentersRepeatingGroup) Add() NoStreamTerminationDateBusinessCenters {
	g := m.RepeatingGroup.Add()
	return NoStreamTerminationDateBusinessCenters{g}
}

// Get returns the ith NoStreamTerminationDateBusinessCenters in the NoStreamTerminationDateBusinessCentersRepeatinGroup.
func (m NoStreamTerminationDateBusinessCentersRepeatingGroup) Get(i int) NoStreamTerminationDateBusinessCenters {
	return NoStreamTerminationDateBusinessCenters{m.RepeatingGroup.Get(i)}
}

// NoStreamCalculationPeriodBusinessCenters is a repeating group element, Tag 40958.
type NoStreamCalculationPeriodBusinessCenters struct {
	*quickfix.Group
}

// SetStreamCalculationPeriodBusinessCenter sets StreamCalculationPeriodBusinessCenter, Tag 40074.
func (m NoStreamCalculationPeriodBusinessCenters) SetStreamCalculationPeriodBusinessCenter(v string) {
	m.Set(field.NewStreamCalculationPeriodBusinessCenter(v))
}

// GetStreamCalculationPeriodBusinessCenter gets StreamCalculationPeriodBusinessCenter, Tag 40074.
func (m NoStreamCalculationPeriodBusinessCenters) GetStreamCalculationPeriodBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.StreamCalculationPeriodBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasStreamCalculationPeriodBusinessCenter returns true if StreamCalculationPeriodBusinessCenter is present, Tag 40074.
func (m NoStreamCalculationPeriodBusinessCenters) HasStreamCalculationPeriodBusinessCenter() bool {
	return m.Has(tag.StreamCalculationPeriodBusinessCenter)
}

// NoStreamCalculationPeriodBusinessCentersRepeatingGroup is a repeating group, Tag 40958.
type NoStreamCalculationPeriodBusinessCentersRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoStreamCalculationPeriodBusinessCentersRepeatingGroup returns an initialized, NoStreamCalculationPeriodBusinessCentersRepeatingGroup.
func NewNoStreamCalculationPeriodBusinessCentersRepeatingGroup() NoStreamCalculationPeriodBusinessCentersRepeatingGroup {
	return NoStreamCalculationPeriodBusinessCentersRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoStreamCalculationPeriodBusinessCenters,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.StreamCalculationPeriodBusinessCenter),
			},
		),
	}
}

// Add create and append a new NoStreamCalculationPeriodBusinessCenters to this group.
func (m NoStreamCalculationPeriodBusinessCentersRepeatingGroup) Add() NoStreamCalculationPeriodBusinessCenters {
	g := m.RepeatingGroup.Add()
	return NoStreamCalculationPeriodBusinessCenters{g}
}

// Get returns the ith NoStreamCalculationPeriodBusinessCenters in the NoStreamCalculationPeriodBusinessCentersRepeatinGroup.
func (m NoStreamCalculationPeriodBusinessCentersRepeatingGroup) Get(i int) NoStreamCalculationPeriodBusinessCenters {
	return NoStreamCalculationPeriodBusinessCenters{m.RepeatingGroup.Get(i)}
}

// NoStreamFirstPeriodStartDateBusinessCenters is a repeating group element, Tag 40959.
type NoStreamFirstPeriodStartDateBusinessCenters struct {
	*quickfix.Group
}

// SetStreamFirstPeriodStartDateBusinessCenter sets StreamFirstPeriodStartDateBusinessCenter, Tag 40077.
func (m NoStreamFirstPeriodStartDateBusinessCenters) SetStreamFirstPeriodStartDateBusinessCenter(v string) {
	m.Set(field.NewStreamFirstPeriodStartDateBusinessCenter(v))
}

// GetStreamFirstPeriodStartDateBusinessCenter gets StreamFirstPeriodStartDateBusinessCenter, Tag 40077.
func (m NoStreamFirstPeriodStartDateBusinessCenters) GetStreamFirstPeriodStartDateBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.StreamFirstPeriodStartDateBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasStreamFirstPeriodStartDateBusinessCenter returns true if StreamFirstPeriodStartDateBusinessCenter is present, Tag 40077.
func (m NoStreamFirstPeriodStartDateBusinessCenters) HasStreamFirstPeriodStartDateBusinessCenter() bool {
	return m.Has(tag.StreamFirstPeriodStartDateBusinessCenter)
}

// NoStreamFirstPeriodStartDateBusinessCentersRepeatingGroup is a repeating group, Tag 40959.
type NoStreamFirstPeriodStartDateBusinessCentersRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoStreamFirstPeriodStartDateBusinessCentersRepeatingGroup returns an initialized, NoStreamFirstPeriodStartDateBusinessCentersRepeatingGroup.
func NewNoStreamFirstPeriodStartDateBusinessCentersRepeatingGroup() NoStreamFirstPeriodStartDateBusinessCentersRepeatingGroup {
	return NoStreamFirstPeriodStartDateBusinessCentersRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoStreamFirstPeriodStartDateBusinessCenters,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.StreamFirstPeriodStartDateBusinessCenter),
			},
		),
	}
}

// Add create and append a new NoStreamFirstPeriodStartDateBusinessCenters to this group.
func (m NoStreamFirstPeriodStartDateBusinessCentersRepeatingGroup) Add() NoStreamFirstPeriodStartDateBusinessCenters {
	g := m.RepeatingGroup.Add()
	return NoStreamFirstPeriodStartDateBusinessCenters{g}
}

// Get returns the ith NoStreamFirstPeriodStartDateBusinessCenters in the NoStreamFirstPeriodStartDateBusinessCentersRepeatinGroup.
func (m NoStreamFirstPeriodStartDateBusinessCentersRepeatingGroup) Get(i int) NoStreamFirstPeriodStartDateBusinessCenters {
	return NoStreamFirstPeriodStartDateBusinessCenters{m.RepeatingGroup.Get(i)}
}

// NoStreamCalculationPeriodDates is a repeating group element, Tag 41241.
type NoStreamCalculationPeriodDates struct {
	*quickfix.Group
}

// SetStreamCalculationPeriodDate sets StreamCalculationPeriodDate, Tag 41242.
func (m NoStreamCalculationPeriodDates) SetStreamCalculationPeriodDate(v string) {
	m.Set(field.NewStreamCalculationPeriodDate(v))
}

// SetStreamCalculationPeriodDateType sets StreamCalculationPeriodDateType, Tag 41243.
func (m NoStreamCalculationPeriodDates) SetStreamCalculationPeriodDateType(v int) {
	m.Set(field.NewStreamCalculationPeriodDateType(v))
}

// GetStreamCalculationPeriodDate gets StreamCalculationPeriodDate, Tag 41242.
func (m NoStreamCalculationPeriodDates) GetStreamCalculationPeriodDate() (v string, err quickfix.MessageRejectError) {
	var f field.StreamCalculationPeriodDateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStreamCalculationPeriodDateType gets StreamCalculationPeriodDateType, Tag 41243.
func (m NoStreamCalculationPeriodDates) GetStreamCalculationPeriodDateType() (v int, err quickfix.MessageRejectError) {
	var f field.StreamCalculationPeriodDateTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasStreamCalculationPeriodDate returns true if StreamCalculationPeriodDate is present, Tag 41242.
func (m NoStreamCalculationPeriodDates) HasStreamCalculationPeriodDate() bool {
	return m.Has(tag.StreamCalculationPeriodDate)
}

// HasStreamCalculationPeriodDateType returns true if StreamCalculationPeriodDateType is present, Tag 41243.
func (m NoStreamCalculationPeriodDates) HasStreamCalculationPeriodDateType() bool {
	return m.Has(tag.StreamCalculationPeriodDateType)
}

// NoStreamCalculationPeriodDatesRepeatingGroup is a repeating group, Tag 41241.
type NoStreamCalculationPeriodDatesRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoStreamCalculationPeriodDatesRepeatingGroup returns an initialized, NoStreamCalculationPeriodDatesRepeatingGroup.
func NewNoStreamCalculationPeriodDatesRepeatingGroup() NoStreamCalculationPeriodDatesRepeatingGroup {
	return NoStreamCalculationPeriodDatesRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoStreamCalculationPeriodDates,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.StreamCalculationPeriodDate),
				quickfix.GroupElement(tag.StreamCalculationPeriodDateType),
			},
		),
	}
}

// Add create and append a new NoStreamCalculationPeriodDates to this group.
func (m NoStreamCalculationPeriodDatesRepeatingGroup) Add() NoStreamCalculationPeriodDates {
	g := m.RepeatingGroup.Add()
	return NoStreamCalculationPeriodDates{g}
}

// Get returns the ith NoStreamCalculationPeriodDates in the NoStreamCalculationPeriodDatesRepeatinGroup.
func (m NoStreamCalculationPeriodDatesRepeatingGroup) Get(i int) NoStreamCalculationPeriodDates {
	return NoStreamCalculationPeriodDates{m.RepeatingGroup.Get(i)}
}

// NoPaymentStreamPaymentDateBusinessCenters is a repeating group element, Tag 40947.
type NoPaymentStreamPaymentDateBusinessCenters struct {
	*quickfix.Group
}

// SetPaymentStreamPaymentDateBusinessCenter sets PaymentStreamPaymentDateBusinessCenter, Tag 40752.
func (m NoPaymentStreamPaymentDateBusinessCenters) SetPaymentStreamPaymentDateBusinessCenter(v string) {
	m.Set(field.NewPaymentStreamPaymentDateBusinessCenter(v))
}

// GetPaymentStreamPaymentDateBusinessCenter gets PaymentStreamPaymentDateBusinessCenter, Tag 40752.
func (m NoPaymentStreamPaymentDateBusinessCenters) GetPaymentStreamPaymentDateBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStreamPaymentDateBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasPaymentStreamPaymentDateBusinessCenter returns true if PaymentStreamPaymentDateBusinessCenter is present, Tag 40752.
func (m NoPaymentStreamPaymentDateBusinessCenters) HasPaymentStreamPaymentDateBusinessCenter() bool {
	return m.Has(tag.PaymentStreamPaymentDateBusinessCenter)
}

// NoPaymentStreamPaymentDateBusinessCentersRepeatingGroup is a repeating group, Tag 40947.
type NoPaymentStreamPaymentDateBusinessCentersRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoPaymentStreamPaymentDateBusinessCentersRepeatingGroup returns an initialized, NoPaymentStreamPaymentDateBusinessCentersRepeatingGroup.
func NewNoPaymentStreamPaymentDateBusinessCentersRepeatingGroup() NoPaymentStreamPaymentDateBusinessCentersRepeatingGroup {
	return NoPaymentStreamPaymentDateBusinessCentersRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoPaymentStreamPaymentDateBusinessCenters,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.PaymentStreamPaymentDateBusinessCenter),
			},
		),
	}
}

// Add create and append a new NoPaymentStreamPaymentDateBusinessCenters to this group.
func (m NoPaymentStreamPaymentDateBusinessCentersRepeatingGroup) Add() NoPaymentStreamPaymentDateBusinessCenters {
	g := m.RepeatingGroup.Add()
	return NoPaymentStreamPaymentDateBusinessCenters{g}
}

// Get returns the ith NoPaymentStreamPaymentDateBusinessCenters in the NoPaymentStreamPaymentDateBusinessCentersRepeatinGroup.
func (m NoPaymentStreamPaymentDateBusinessCentersRepeatingGroup) Get(i int) NoPaymentStreamPaymentDateBusinessCenters {
	return NoPaymentStreamPaymentDateBusinessCenters{m.RepeatingGroup.Get(i)}
}

// NoPaymentStreamPaymentDates is a repeating group element, Tag 41220.
type NoPaymentStreamPaymentDates struct {
	*quickfix.Group
}

// SetPaymentStreamPaymentDate sets PaymentStreamPaymentDate, Tag 41221.
func (m NoPaymentStreamPaymentDates) SetPaymentStreamPaymentDate(v string) {
	m.Set(field.NewPaymentStreamPaymentDate(v))
}

// SetPaymentStreamPaymentDateType sets PaymentStreamPaymentDateType, Tag 41222.
func (m NoPaymentStreamPaymentDates) SetPaymentStreamPaymentDateType(v int) {
	m.Set(field.NewPaymentStreamPaymentDateType(v))
}

// GetPaymentStreamPaymentDate gets PaymentStreamPaymentDate, Tag 41221.
func (m NoPaymentStreamPaymentDates) GetPaymentStreamPaymentDate() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStreamPaymentDateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamPaymentDateType gets PaymentStreamPaymentDateType, Tag 41222.
func (m NoPaymentStreamPaymentDates) GetPaymentStreamPaymentDateType() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStreamPaymentDateTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasPaymentStreamPaymentDate returns true if PaymentStreamPaymentDate is present, Tag 41221.
func (m NoPaymentStreamPaymentDates) HasPaymentStreamPaymentDate() bool {
	return m.Has(tag.PaymentStreamPaymentDate)
}

// HasPaymentStreamPaymentDateType returns true if PaymentStreamPaymentDateType is present, Tag 41222.
func (m NoPaymentStreamPaymentDates) HasPaymentStreamPaymentDateType() bool {
	return m.Has(tag.PaymentStreamPaymentDateType)
}

// NoPaymentStreamPaymentDatesRepeatingGroup is a repeating group, Tag 41220.
type NoPaymentStreamPaymentDatesRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoPaymentStreamPaymentDatesRepeatingGroup returns an initialized, NoPaymentStreamPaymentDatesRepeatingGroup.
func NewNoPaymentStreamPaymentDatesRepeatingGroup() NoPaymentStreamPaymentDatesRepeatingGroup {
	return NoPaymentStreamPaymentDatesRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoPaymentStreamPaymentDates,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.PaymentStreamPaymentDate),
				quickfix.GroupElement(tag.PaymentStreamPaymentDateType),
			},
		),
	}
}

// Add create and append a new NoPaymentStreamPaymentDates to this group.
func (m NoPaymentStreamPaymentDatesRepeatingGroup) Add() NoPaymentStreamPaymentDates {
	g := m.RepeatingGroup.Add()
	return NoPaymentStreamPaymentDates{g}
}

// Get returns the ith NoPaymentStreamPaymentDates in the NoPaymentStreamPaymentDatesRepeatinGroup.
func (m NoPaymentStreamPaymentDatesRepeatingGroup) Get(i int) NoPaymentStreamPaymentDates {
	return NoPaymentStreamPaymentDates{m.RepeatingGroup.Get(i)}
}

// NoPaymentStreamResetDateBusinessCenters is a repeating group element, Tag 40948.
type NoPaymentStreamResetDateBusinessCenters struct {
	*quickfix.Group
}

// SetPaymentStreamResetDateBusinessCenter sets PaymentStreamResetDateBusinessCenter, Tag 40763.
func (m NoPaymentStreamResetDateBusinessCenters) SetPaymentStreamResetDateBusinessCenter(v string) {
	m.Set(field.NewPaymentStreamResetDateBusinessCenter(v))
}

// GetPaymentStreamResetDateBusinessCenter gets PaymentStreamResetDateBusinessCenter, Tag 40763.
func (m NoPaymentStreamResetDateBusinessCenters) GetPaymentStreamResetDateBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStreamResetDateBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasPaymentStreamResetDateBusinessCenter returns true if PaymentStreamResetDateBusinessCenter is present, Tag 40763.
func (m NoPaymentStreamResetDateBusinessCenters) HasPaymentStreamResetDateBusinessCenter() bool {
	return m.Has(tag.PaymentStreamResetDateBusinessCenter)
}

// NoPaymentStreamResetDateBusinessCentersRepeatingGroup is a repeating group, Tag 40948.
type NoPaymentStreamResetDateBusinessCentersRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoPaymentStreamResetDateBusinessCentersRepeatingGroup returns an initialized, NoPaymentStreamResetDateBusinessCentersRepeatingGroup.
func NewNoPaymentStreamResetDateBusinessCentersRepeatingGroup() NoPaymentStreamResetDateBusinessCentersRepeatingGroup {
	return NoPaymentStreamResetDateBusinessCentersRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoPaymentStreamResetDateBusinessCenters,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.PaymentStreamResetDateBusinessCenter),
			},
		),
	}
}

// Add create and append a new NoPaymentStreamResetDateBusinessCenters to this group.
func (m NoPaymentStreamResetDateBusinessCentersRepeatingGroup) Add() NoPaymentStreamResetDateBusinessCenters {
	g := m.RepeatingGroup.Add()
	return NoPaymentStreamResetDateBusinessCenters{g}
}

// Get returns the ith NoPaymentStreamResetDateBusinessCenters in the NoPaymentStreamResetDateBusinessCentersRepeatinGroup.
func (m NoPaymentStreamResetDateBusinessCentersRepeatingGroup) Get(i int) NoPaymentStreamResetDateBusinessCenters {
	return NoPaymentStreamResetDateBusinessCenters{m.RepeatingGroup.Get(i)}
}

// NoPaymentStreamInitialFixingDateBusinessCenters is a repeating group element, Tag 40949.
type NoPaymentStreamInitialFixingDateBusinessCenters struct {
	*quickfix.Group
}

// SetPaymentStreamInitialFixingDateBusinessCenter sets PaymentStreamInitialFixingDateBusinessCenter, Tag 40769.
func (m NoPaymentStreamInitialFixingDateBusinessCenters) SetPaymentStreamInitialFixingDateBusinessCenter(v string) {
	m.Set(field.NewPaymentStreamInitialFixingDateBusinessCenter(v))
}

// GetPaymentStreamInitialFixingDateBusinessCenter gets PaymentStreamInitialFixingDateBusinessCenter, Tag 40769.
func (m NoPaymentStreamInitialFixingDateBusinessCenters) GetPaymentStreamInitialFixingDateBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStreamInitialFixingDateBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasPaymentStreamInitialFixingDateBusinessCenter returns true if PaymentStreamInitialFixingDateBusinessCenter is present, Tag 40769.
func (m NoPaymentStreamInitialFixingDateBusinessCenters) HasPaymentStreamInitialFixingDateBusinessCenter() bool {
	return m.Has(tag.PaymentStreamInitialFixingDateBusinessCenter)
}

// NoPaymentStreamInitialFixingDateBusinessCentersRepeatingGroup is a repeating group, Tag 40949.
type NoPaymentStreamInitialFixingDateBusinessCentersRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoPaymentStreamInitialFixingDateBusinessCentersRepeatingGroup returns an initialized, NoPaymentStreamInitialFixingDateBusinessCentersRepeatingGroup.
func NewNoPaymentStreamInitialFixingDateBusinessCentersRepeatingGroup() NoPaymentStreamInitialFixingDateBusinessCentersRepeatingGroup {
	return NoPaymentStreamInitialFixingDateBusinessCentersRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoPaymentStreamInitialFixingDateBusinessCenters,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.PaymentStreamInitialFixingDateBusinessCenter),
			},
		),
	}
}

// Add create and append a new NoPaymentStreamInitialFixingDateBusinessCenters to this group.
func (m NoPaymentStreamInitialFixingDateBusinessCentersRepeatingGroup) Add() NoPaymentStreamInitialFixingDateBusinessCenters {
	g := m.RepeatingGroup.Add()
	return NoPaymentStreamInitialFixingDateBusinessCenters{g}
}

// Get returns the ith NoPaymentStreamInitialFixingDateBusinessCenters in the NoPaymentStreamInitialFixingDateBusinessCentersRepeatinGroup.
func (m NoPaymentStreamInitialFixingDateBusinessCentersRepeatingGroup) Get(i int) NoPaymentStreamInitialFixingDateBusinessCenters {
	return NoPaymentStreamInitialFixingDateBusinessCenters{m.RepeatingGroup.Get(i)}
}

// NoPaymentStreamFixingDateBusinessCenters is a repeating group element, Tag 40950.
type NoPaymentStreamFixingDateBusinessCenters struct {
	*quickfix.Group
}

// SetPaymentStreamFixingDateBusinessCenter sets PaymentStreamFixingDateBusinessCenter, Tag 40776.
func (m NoPaymentStreamFixingDateBusinessCenters) SetPaymentStreamFixingDateBusinessCenter(v string) {
	m.Set(field.NewPaymentStreamFixingDateBusinessCenter(v))
}

// GetPaymentStreamFixingDateBusinessCenter gets PaymentStreamFixingDateBusinessCenter, Tag 40776.
func (m NoPaymentStreamFixingDateBusinessCenters) GetPaymentStreamFixingDateBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStreamFixingDateBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasPaymentStreamFixingDateBusinessCenter returns true if PaymentStreamFixingDateBusinessCenter is present, Tag 40776.
func (m NoPaymentStreamFixingDateBusinessCenters) HasPaymentStreamFixingDateBusinessCenter() bool {
	return m.Has(tag.PaymentStreamFixingDateBusinessCenter)
}

// NoPaymentStreamFixingDateBusinessCentersRepeatingGroup is a repeating group, Tag 40950.
type NoPaymentStreamFixingDateBusinessCentersRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoPaymentStreamFixingDateBusinessCentersRepeatingGroup returns an initialized, NoPaymentStreamFixingDateBusinessCentersRepeatingGroup.
func NewNoPaymentStreamFixingDateBusinessCentersRepeatingGroup() NoPaymentStreamFixingDateBusinessCentersRepeatingGroup {
	return NoPaymentStreamFixingDateBusinessCentersRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoPaymentStreamFixingDateBusinessCenters,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.PaymentStreamFixingDateBusinessCenter),
			},
		),
	}
}

// Add create and append a new NoPaymentStreamFixingDateBusinessCenters to this group.
func (m NoPaymentStreamFixingDateBusinessCentersRepeatingGroup) Add() NoPaymentStreamFixingDateBusinessCenters {
	g := m.RepeatingGroup.Add()
	return NoPaymentStreamFixingDateBusinessCenters{g}
}

// Get returns the ith NoPaymentStreamFixingDateBusinessCenters in the NoPaymentStreamFixingDateBusinessCentersRepeatinGroup.
func (m NoPaymentStreamFixingDateBusinessCentersRepeatingGroup) Get(i int) NoPaymentStreamFixingDateBusinessCenters {
	return NoPaymentStreamFixingDateBusinessCenters{m.RepeatingGroup.Get(i)}
}

// NoPaymentStreamFixingDates is a repeating group element, Tag 42660.
type NoPaymentStreamFixingDates struct {
	*quickfix.Group
}

// SetPaymentStreamFixingDate sets PaymentStreamFixingDate, Tag 42661.
func (m NoPaymentStreamFixingDates) SetPaymentStreamFixingDate(v string) {
	m.Set(field.NewPaymentStreamFixingDate(v))
}

// SetPaymentStreamFixingDateType sets PaymentStreamFixingDateType, Tag 42662.
func (m NoPaymentStreamFixingDates) SetPaymentStreamFixingDateType(v int) {
	m.Set(field.NewPaymentStreamFixingDateType(v))
}

// GetPaymentStreamFixingDate gets PaymentStreamFixingDate, Tag 42661.
func (m NoPaymentStreamFixingDates) GetPaymentStreamFixingDate() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStreamFixingDateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamFixingDateType gets PaymentStreamFixingDateType, Tag 42662.
func (m NoPaymentStreamFixingDates) GetPaymentStreamFixingDateType() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStreamFixingDateTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasPaymentStreamFixingDate returns true if PaymentStreamFixingDate is present, Tag 42661.
func (m NoPaymentStreamFixingDates) HasPaymentStreamFixingDate() bool {
	return m.Has(tag.PaymentStreamFixingDate)
}

// HasPaymentStreamFixingDateType returns true if PaymentStreamFixingDateType is present, Tag 42662.
func (m NoPaymentStreamFixingDates) HasPaymentStreamFixingDateType() bool {
	return m.Has(tag.PaymentStreamFixingDateType)
}

// NoPaymentStreamFixingDatesRepeatingGroup is a repeating group, Tag 42660.
type NoPaymentStreamFixingDatesRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoPaymentStreamFixingDatesRepeatingGroup returns an initialized, NoPaymentStreamFixingDatesRepeatingGroup.
func NewNoPaymentStreamFixingDatesRepeatingGroup() NoPaymentStreamFixingDatesRepeatingGroup {
	return NoPaymentStreamFixingDatesRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoPaymentStreamFixingDates,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.PaymentStreamFixingDate),
				quickfix.GroupElement(tag.PaymentStreamFixingDateType),
			},
		),
	}
}

// Add create and append a new NoPaymentStreamFixingDates to this group.
func (m NoPaymentStreamFixingDatesRepeatingGroup) Add() NoPaymentStreamFixingDates {
	g := m.RepeatingGroup.Add()
	return NoPaymentStreamFixingDates{g}
}

// Get returns the ith NoPaymentStreamFixingDates in the NoPaymentStreamFixingDatesRepeatinGroup.
func (m NoPaymentStreamFixingDatesRepeatingGroup) Get(i int) NoPaymentStreamFixingDates {
	return NoPaymentStreamFixingDates{m.RepeatingGroup.Get(i)}
}

// NoPaymentStreamPricingBusinessCenters is a repeating group element, Tag 41192.
type NoPaymentStreamPricingBusinessCenters struct {
	*quickfix.Group
}

// SetPaymentStreamPricingBusinessCenter sets PaymentStreamPricingBusinessCenter, Tag 41193.
func (m NoPaymentStreamPricingBusinessCenters) SetPaymentStreamPricingBusinessCenter(v string) {
	m.Set(field.NewPaymentStreamPricingBusinessCenter(v))
}

// GetPaymentStreamPricingBusinessCenter gets PaymentStreamPricingBusinessCenter, Tag 41193.
func (m NoPaymentStreamPricingBusinessCenters) GetPaymentStreamPricingBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStreamPricingBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasPaymentStreamPricingBusinessCenter returns true if PaymentStreamPricingBusinessCenter is present, Tag 41193.
func (m NoPaymentStreamPricingBusinessCenters) HasPaymentStreamPricingBusinessCenter() bool {
	return m.Has(tag.PaymentStreamPricingBusinessCenter)
}

// NoPaymentStreamPricingBusinessCentersRepeatingGroup is a repeating group, Tag 41192.
type NoPaymentStreamPricingBusinessCentersRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoPaymentStreamPricingBusinessCentersRepeatingGroup returns an initialized, NoPaymentStreamPricingBusinessCentersRepeatingGroup.
func NewNoPaymentStreamPricingBusinessCentersRepeatingGroup() NoPaymentStreamPricingBusinessCentersRepeatingGroup {
	return NoPaymentStreamPricingBusinessCentersRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoPaymentStreamPricingBusinessCenters,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.PaymentStreamPricingBusinessCenter),
			},
		),
	}
}

// Add create and append a new NoPaymentStreamPricingBusinessCenters to this group.
func (m NoPaymentStreamPricingBusinessCentersRepeatingGroup) Add() NoPaymentStreamPricingBusinessCenters {
	g := m.RepeatingGroup.Add()
	return NoPaymentStreamPricingBusinessCenters{g}
}

// Get returns the ith NoPaymentStreamPricingBusinessCenters in the NoPaymentStreamPricingBusinessCentersRepeatinGroup.
func (m NoPaymentStreamPricingBusinessCentersRepeatingGroup) Get(i int) NoPaymentStreamPricingBusinessCenters {
	return NoPaymentStreamPricingBusinessCenters{m.RepeatingGroup.Get(i)}
}

// NoPaymentStreamPricingDays is a repeating group element, Tag 41227.
type NoPaymentStreamPricingDays struct {
	*quickfix.Group
}

// SetPaymentStreamPricingDayOfWeek sets PaymentStreamPricingDayOfWeek, Tag 41228.
func (m NoPaymentStreamPricingDays) SetPaymentStreamPricingDayOfWeek(v enum.PaymentStreamPricingDayOfWeek) {
	m.Set(field.NewPaymentStreamPricingDayOfWeek(v))
}

// SetPaymentStreamPricingDayNumber sets PaymentStreamPricingDayNumber, Tag 41229.
func (m NoPaymentStreamPricingDays) SetPaymentStreamPricingDayNumber(v int) {
	m.Set(field.NewPaymentStreamPricingDayNumber(v))
}

// GetPaymentStreamPricingDayOfWeek gets PaymentStreamPricingDayOfWeek, Tag 41228.
func (m NoPaymentStreamPricingDays) GetPaymentStreamPricingDayOfWeek() (v enum.PaymentStreamPricingDayOfWeek, err quickfix.MessageRejectError) {
	var f field.PaymentStreamPricingDayOfWeekField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamPricingDayNumber gets PaymentStreamPricingDayNumber, Tag 41229.
func (m NoPaymentStreamPricingDays) GetPaymentStreamPricingDayNumber() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStreamPricingDayNumberField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasPaymentStreamPricingDayOfWeek returns true if PaymentStreamPricingDayOfWeek is present, Tag 41228.
func (m NoPaymentStreamPricingDays) HasPaymentStreamPricingDayOfWeek() bool {
	return m.Has(tag.PaymentStreamPricingDayOfWeek)
}

// HasPaymentStreamPricingDayNumber returns true if PaymentStreamPricingDayNumber is present, Tag 41229.
func (m NoPaymentStreamPricingDays) HasPaymentStreamPricingDayNumber() bool {
	return m.Has(tag.PaymentStreamPricingDayNumber)
}

// NoPaymentStreamPricingDaysRepeatingGroup is a repeating group, Tag 41227.
type NoPaymentStreamPricingDaysRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoPaymentStreamPricingDaysRepeatingGroup returns an initialized, NoPaymentStreamPricingDaysRepeatingGroup.
func NewNoPaymentStreamPricingDaysRepeatingGroup() NoPaymentStreamPricingDaysRepeatingGroup {
	return NoPaymentStreamPricingDaysRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoPaymentStreamPricingDays,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.PaymentStreamPricingDayOfWeek),
				quickfix.GroupElement(tag.PaymentStreamPricingDayNumber),
			},
		),
	}
}

// Add create and append a new NoPaymentStreamPricingDays to this group.
func (m NoPaymentStreamPricingDaysRepeatingGroup) Add() NoPaymentStreamPricingDays {
	g := m.RepeatingGroup.Add()
	return NoPaymentStreamPricingDays{g}
}

// Get returns the ith NoPaymentStreamPricingDays in the NoPaymentStreamPricingDaysRepeatinGroup.
func (m NoPaymentStreamPricingDaysRepeatingGroup) Get(i int) NoPaymentStreamPricingDays {
	return NoPaymentStreamPricingDays{m.RepeatingGroup.Get(i)}
}

// NoPaymentStreamPricingDates is a repeating group element, Tag 41224.
type NoPaymentStreamPricingDates struct {
	*quickfix.Group
}

// SetPaymentStreamPricingDate sets PaymentStreamPricingDate, Tag 41225.
func (m NoPaymentStreamPricingDates) SetPaymentStreamPricingDate(v string) {
	m.Set(field.NewPaymentStreamPricingDate(v))
}

// SetPaymentStreamPricingDateType sets PaymentStreamPricingDateType, Tag 41226.
func (m NoPaymentStreamPricingDates) SetPaymentStreamPricingDateType(v int) {
	m.Set(field.NewPaymentStreamPricingDateType(v))
}

// GetPaymentStreamPricingDate gets PaymentStreamPricingDate, Tag 41225.
func (m NoPaymentStreamPricingDates) GetPaymentStreamPricingDate() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStreamPricingDateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamPricingDateType gets PaymentStreamPricingDateType, Tag 41226.
func (m NoPaymentStreamPricingDates) GetPaymentStreamPricingDateType() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStreamPricingDateTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasPaymentStreamPricingDate returns true if PaymentStreamPricingDate is present, Tag 41225.
func (m NoPaymentStreamPricingDates) HasPaymentStreamPricingDate() bool {
	return m.Has(tag.PaymentStreamPricingDate)
}

// HasPaymentStreamPricingDateType returns true if PaymentStreamPricingDateType is present, Tag 41226.
func (m NoPaymentStreamPricingDates) HasPaymentStreamPricingDateType() bool {
	return m.Has(tag.PaymentStreamPricingDateType)
}

// NoPaymentStreamPricingDatesRepeatingGroup is a repeating group, Tag 41224.
type NoPaymentStreamPricingDatesRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoPaymentStreamPricingDatesRepeatingGroup returns an initialized, NoPaymentStreamPricingDatesRepeatingGroup.
func NewNoPaymentStreamPricingDatesRepeatingGroup() NoPaymentStreamPricingDatesRepeatingGroup {
	return NoPaymentStreamPricingDatesRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoPaymentStreamPricingDates,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.PaymentStreamPricingDate),
				quickfix.GroupElement(tag.PaymentStreamPricingDateType),
			},
		),
	}
}

// Add create and append a new NoPaymentStreamPricingDates to this group.
func (m NoPaymentStreamPricingDatesRepeatingGroup) Add() NoPaymentStreamPricingDates {
	g := m.RepeatingGroup.Add()
	return NoPaymentStreamPricingDates{g}
}

// Get returns the ith NoPaymentStreamPricingDates in the NoPaymentStreamPricingDatesRepeatinGroup.
func (m NoPaymentStreamPricingDatesRepeatingGroup) Get(i int) NoPaymentStreamPricingDates {
	return NoPaymentStreamPricingDates{m.RepeatingGroup.Get(i)}
}

// NoPaymentStreamFormulas is a repeating group element, Tag 42683.
type NoPaymentStreamFormulas struct {
	*quickfix.Group
}

// SetPaymentStreamFormula sets PaymentStreamFormula, Tag 42684.
func (m NoPaymentStreamFormulas) SetPaymentStreamFormula(v string) {
	m.Set(field.NewPaymentStreamFormula(v))
}

// SetPaymentStreamFormulaDesc sets PaymentStreamFormulaDesc, Tag 42685.
func (m NoPaymentStreamFormulas) SetPaymentStreamFormulaDesc(v string) {
	m.Set(field.NewPaymentStreamFormulaDesc(v))
}

// SetPaymentStreamFormulaLength sets PaymentStreamFormulaLength, Tag 43109.
func (m NoPaymentStreamFormulas) SetPaymentStreamFormulaLength(v int) {
	m.Set(field.NewPaymentStreamFormulaLength(v))
}

// GetPaymentStreamFormula gets PaymentStreamFormula, Tag 42684.
func (m NoPaymentStreamFormulas) GetPaymentStreamFormula() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStreamFormulaField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamFormulaDesc gets PaymentStreamFormulaDesc, Tag 42685.
func (m NoPaymentStreamFormulas) GetPaymentStreamFormulaDesc() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStreamFormulaDescField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamFormulaLength gets PaymentStreamFormulaLength, Tag 43109.
func (m NoPaymentStreamFormulas) GetPaymentStreamFormulaLength() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStreamFormulaLengthField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasPaymentStreamFormula returns true if PaymentStreamFormula is present, Tag 42684.
func (m NoPaymentStreamFormulas) HasPaymentStreamFormula() bool {
	return m.Has(tag.PaymentStreamFormula)
}

// HasPaymentStreamFormulaDesc returns true if PaymentStreamFormulaDesc is present, Tag 42685.
func (m NoPaymentStreamFormulas) HasPaymentStreamFormulaDesc() bool {
	return m.Has(tag.PaymentStreamFormulaDesc)
}

// HasPaymentStreamFormulaLength returns true if PaymentStreamFormulaLength is present, Tag 43109.
func (m NoPaymentStreamFormulas) HasPaymentStreamFormulaLength() bool {
	return m.Has(tag.PaymentStreamFormulaLength)
}

// NoPaymentStreamFormulasRepeatingGroup is a repeating group, Tag 42683.
type NoPaymentStreamFormulasRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoPaymentStreamFormulasRepeatingGroup returns an initialized, NoPaymentStreamFormulasRepeatingGroup.
func NewNoPaymentStreamFormulasRepeatingGroup() NoPaymentStreamFormulasRepeatingGroup {
	return NoPaymentStreamFormulasRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoPaymentStreamFormulas,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.PaymentStreamFormula),
				quickfix.GroupElement(tag.PaymentStreamFormulaDesc),
				quickfix.GroupElement(tag.PaymentStreamFormulaLength),
			},
		),
	}
}

// Add create and append a new NoPaymentStreamFormulas to this group.
func (m NoPaymentStreamFormulasRepeatingGroup) Add() NoPaymentStreamFormulas {
	g := m.RepeatingGroup.Add()
	return NoPaymentStreamFormulas{g}
}

// Get returns the ith NoPaymentStreamFormulas in the NoPaymentStreamFormulasRepeatinGroup.
func (m NoPaymentStreamFormulasRepeatingGroup) Get(i int) NoPaymentStreamFormulas {
	return NoPaymentStreamFormulas{m.RepeatingGroup.Get(i)}
}

// NoDividendPeriods is a repeating group element, Tag 42274.
type NoDividendPeriods struct {
	*quickfix.Group
}

// SetDividendPeriodSequence sets DividendPeriodSequence, Tag 42275.
func (m NoDividendPeriods) SetDividendPeriodSequence(v int) {
	m.Set(field.NewDividendPeriodSequence(v))
}

// SetDividendPeriodStartDateUnadjusted sets DividendPeriodStartDateUnadjusted, Tag 42276.
func (m NoDividendPeriods) SetDividendPeriodStartDateUnadjusted(v string) {
	m.Set(field.NewDividendPeriodStartDateUnadjusted(v))
}

// SetDividendPeriodEndDateUnadjusted sets DividendPeriodEndDateUnadjusted, Tag 42277.
func (m NoDividendPeriods) SetDividendPeriodEndDateUnadjusted(v string) {
	m.Set(field.NewDividendPeriodEndDateUnadjusted(v))
}

// SetDividendPeriodUnderlierRefID sets DividendPeriodUnderlierRefID, Tag 42278.
func (m NoDividendPeriods) SetDividendPeriodUnderlierRefID(v string) {
	m.Set(field.NewDividendPeriodUnderlierRefID(v))
}

// SetDividendPeriodStrikePrice sets DividendPeriodStrikePrice, Tag 42279.
func (m NoDividendPeriods) SetDividendPeriodStrikePrice(value decimal.Decimal, scale int32) {
	m.Set(field.NewDividendPeriodStrikePrice(value, scale))
}

// SetDividendPeriodBusinessDayConvention sets DividendPeriodBusinessDayConvention, Tag 42280.
func (m NoDividendPeriods) SetDividendPeriodBusinessDayConvention(v int) {
	m.Set(field.NewDividendPeriodBusinessDayConvention(v))
}

// SetNoDividendPeriodBusinessCenters sets NoDividendPeriodBusinessCenters, Tag 42294.
func (m NoDividendPeriods) SetNoDividendPeriodBusinessCenters(f NoDividendPeriodBusinessCentersRepeatingGroup) {
	m.SetGroup(f)
}

// SetDividendPeriodValuationDateUnadjusted sets DividendPeriodValuationDateUnadjusted, Tag 42281.
func (m NoDividendPeriods) SetDividendPeriodValuationDateUnadjusted(v string) {
	m.Set(field.NewDividendPeriodValuationDateUnadjusted(v))
}

// SetDividendPeriodValuationDateRelativeTo sets DividendPeriodValuationDateRelativeTo, Tag 42282.
func (m NoDividendPeriods) SetDividendPeriodValuationDateRelativeTo(v int) {
	m.Set(field.NewDividendPeriodValuationDateRelativeTo(v))
}

// SetDividendPeriodValuationDateOffsetPeriod sets DividendPeriodValuationDateOffsetPeriod, Tag 42283.
func (m NoDividendPeriods) SetDividendPeriodValuationDateOffsetPeriod(v int) {
	m.Set(field.NewDividendPeriodValuationDateOffsetPeriod(v))
}

// SetDividendPeriodValuationDateOffsetUnit sets DividendPeriodValuationDateOffsetUnit, Tag 42284.
func (m NoDividendPeriods) SetDividendPeriodValuationDateOffsetUnit(v string) {
	m.Set(field.NewDividendPeriodValuationDateOffsetUnit(v))
}

// SetDividendPeriodValuationDateOffsetDayType sets DividendPeriodValuationDateOffsetDayType, Tag 42285.
func (m NoDividendPeriods) SetDividendPeriodValuationDateOffsetDayType(v int) {
	m.Set(field.NewDividendPeriodValuationDateOffsetDayType(v))
}

// SetDividendPeriodValuationDateAdjusted sets DividendPeriodValuationDateAdjusted, Tag 42286.
func (m NoDividendPeriods) SetDividendPeriodValuationDateAdjusted(v string) {
	m.Set(field.NewDividendPeriodValuationDateAdjusted(v))
}

// SetDividendPeriodPaymentDateUnadjusted sets DividendPeriodPaymentDateUnadjusted, Tag 42287.
func (m NoDividendPeriods) SetDividendPeriodPaymentDateUnadjusted(v string) {
	m.Set(field.NewDividendPeriodPaymentDateUnadjusted(v))
}

// SetDividendPeriodPaymentDateRelativeTo sets DividendPeriodPaymentDateRelativeTo, Tag 42288.
func (m NoDividendPeriods) SetDividendPeriodPaymentDateRelativeTo(v int) {
	m.Set(field.NewDividendPeriodPaymentDateRelativeTo(v))
}

// SetDividendPeriodPaymentDateOffsetPeriod sets DividendPeriodPaymentDateOffsetPeriod, Tag 42289.
func (m NoDividendPeriods) SetDividendPeriodPaymentDateOffsetPeriod(v int) {
	m.Set(field.NewDividendPeriodPaymentDateOffsetPeriod(v))
}

// SetDividendPeriodPaymentDateOffsetUnit sets DividendPeriodPaymentDateOffsetUnit, Tag 42290.
func (m NoDividendPeriods) SetDividendPeriodPaymentDateOffsetUnit(v string) {
	m.Set(field.NewDividendPeriodPaymentDateOffsetUnit(v))
}

// SetDividendPeriodPaymentDateOffsetDayType sets DividendPeriodPaymentDateOffsetDayType, Tag 42291.
func (m NoDividendPeriods) SetDividendPeriodPaymentDateOffsetDayType(v int) {
	m.Set(field.NewDividendPeriodPaymentDateOffsetDayType(v))
}

// SetDividendPeriodPaymentDateAdjusted sets DividendPeriodPaymentDateAdjusted, Tag 42292.
func (m NoDividendPeriods) SetDividendPeriodPaymentDateAdjusted(v string) {
	m.Set(field.NewDividendPeriodPaymentDateAdjusted(v))
}

// SetDividendPeriodXID sets DividendPeriodXID, Tag 42293.
func (m NoDividendPeriods) SetDividendPeriodXID(v string) {
	m.Set(field.NewDividendPeriodXID(v))
}

// GetDividendPeriodSequence gets DividendPeriodSequence, Tag 42275.
func (m NoDividendPeriods) GetDividendPeriodSequence() (v int, err quickfix.MessageRejectError) {
	var f field.DividendPeriodSequenceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDividendPeriodStartDateUnadjusted gets DividendPeriodStartDateUnadjusted, Tag 42276.
func (m NoDividendPeriods) GetDividendPeriodStartDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.DividendPeriodStartDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDividendPeriodEndDateUnadjusted gets DividendPeriodEndDateUnadjusted, Tag 42277.
func (m NoDividendPeriods) GetDividendPeriodEndDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.DividendPeriodEndDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDividendPeriodUnderlierRefID gets DividendPeriodUnderlierRefID, Tag 42278.
func (m NoDividendPeriods) GetDividendPeriodUnderlierRefID() (v string, err quickfix.MessageRejectError) {
	var f field.DividendPeriodUnderlierRefIDField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDividendPeriodStrikePrice gets DividendPeriodStrikePrice, Tag 42279.
func (m NoDividendPeriods) GetDividendPeriodStrikePrice() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.DividendPeriodStrikePriceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDividendPeriodBusinessDayConvention gets DividendPeriodBusinessDayConvention, Tag 42280.
func (m NoDividendPeriods) GetDividendPeriodBusinessDayConvention() (v int, err quickfix.MessageRejectError) {
	var f field.DividendPeriodBusinessDayConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoDividendPeriodBusinessCenters gets NoDividendPeriodBusinessCenters, Tag 42294.
func (m NoDividendPeriods) GetNoDividendPeriodBusinessCenters() (NoDividendPeriodBusinessCentersRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoDividendPeriodBusinessCentersRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetDividendPeriodValuationDateUnadjusted gets DividendPeriodValuationDateUnadjusted, Tag 42281.
func (m NoDividendPeriods) GetDividendPeriodValuationDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.DividendPeriodValuationDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDividendPeriodValuationDateRelativeTo gets DividendPeriodValuationDateRelativeTo, Tag 42282.
func (m NoDividendPeriods) GetDividendPeriodValuationDateRelativeTo() (v int, err quickfix.MessageRejectError) {
	var f field.DividendPeriodValuationDateRelativeToField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDividendPeriodValuationDateOffsetPeriod gets DividendPeriodValuationDateOffsetPeriod, Tag 42283.
func (m NoDividendPeriods) GetDividendPeriodValuationDateOffsetPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.DividendPeriodValuationDateOffsetPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDividendPeriodValuationDateOffsetUnit gets DividendPeriodValuationDateOffsetUnit, Tag 42284.
func (m NoDividendPeriods) GetDividendPeriodValuationDateOffsetUnit() (v string, err quickfix.MessageRejectError) {
	var f field.DividendPeriodValuationDateOffsetUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDividendPeriodValuationDateOffsetDayType gets DividendPeriodValuationDateOffsetDayType, Tag 42285.
func (m NoDividendPeriods) GetDividendPeriodValuationDateOffsetDayType() (v int, err quickfix.MessageRejectError) {
	var f field.DividendPeriodValuationDateOffsetDayTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDividendPeriodValuationDateAdjusted gets DividendPeriodValuationDateAdjusted, Tag 42286.
func (m NoDividendPeriods) GetDividendPeriodValuationDateAdjusted() (v string, err quickfix.MessageRejectError) {
	var f field.DividendPeriodValuationDateAdjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDividendPeriodPaymentDateUnadjusted gets DividendPeriodPaymentDateUnadjusted, Tag 42287.
func (m NoDividendPeriods) GetDividendPeriodPaymentDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.DividendPeriodPaymentDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDividendPeriodPaymentDateRelativeTo gets DividendPeriodPaymentDateRelativeTo, Tag 42288.
func (m NoDividendPeriods) GetDividendPeriodPaymentDateRelativeTo() (v int, err quickfix.MessageRejectError) {
	var f field.DividendPeriodPaymentDateRelativeToField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDividendPeriodPaymentDateOffsetPeriod gets DividendPeriodPaymentDateOffsetPeriod, Tag 42289.
func (m NoDividendPeriods) GetDividendPeriodPaymentDateOffsetPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.DividendPeriodPaymentDateOffsetPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDividendPeriodPaymentDateOffsetUnit gets DividendPeriodPaymentDateOffsetUnit, Tag 42290.
func (m NoDividendPeriods) GetDividendPeriodPaymentDateOffsetUnit() (v string, err quickfix.MessageRejectError) {
	var f field.DividendPeriodPaymentDateOffsetUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDividendPeriodPaymentDateOffsetDayType gets DividendPeriodPaymentDateOffsetDayType, Tag 42291.
func (m NoDividendPeriods) GetDividendPeriodPaymentDateOffsetDayType() (v int, err quickfix.MessageRejectError) {
	var f field.DividendPeriodPaymentDateOffsetDayTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDividendPeriodPaymentDateAdjusted gets DividendPeriodPaymentDateAdjusted, Tag 42292.
func (m NoDividendPeriods) GetDividendPeriodPaymentDateAdjusted() (v string, err quickfix.MessageRejectError) {
	var f field.DividendPeriodPaymentDateAdjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDividendPeriodXID gets DividendPeriodXID, Tag 42293.
func (m NoDividendPeriods) GetDividendPeriodXID() (v string, err quickfix.MessageRejectError) {
	var f field.DividendPeriodXIDField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasDividendPeriodSequence returns true if DividendPeriodSequence is present, Tag 42275.
func (m NoDividendPeriods) HasDividendPeriodSequence() bool {
	return m.Has(tag.DividendPeriodSequence)
}

// HasDividendPeriodStartDateUnadjusted returns true if DividendPeriodStartDateUnadjusted is present, Tag 42276.
func (m NoDividendPeriods) HasDividendPeriodStartDateUnadjusted() bool {
	return m.Has(tag.DividendPeriodStartDateUnadjusted)
}

// HasDividendPeriodEndDateUnadjusted returns true if DividendPeriodEndDateUnadjusted is present, Tag 42277.
func (m NoDividendPeriods) HasDividendPeriodEndDateUnadjusted() bool {
	return m.Has(tag.DividendPeriodEndDateUnadjusted)
}

// HasDividendPeriodUnderlierRefID returns true if DividendPeriodUnderlierRefID is present, Tag 42278.
func (m NoDividendPeriods) HasDividendPeriodUnderlierRefID() bool {
	return m.Has(tag.DividendPeriodUnderlierRefID)
}

// HasDividendPeriodStrikePrice returns true if DividendPeriodStrikePrice is present, Tag 42279.
func (m NoDividendPeriods) HasDividendPeriodStrikePrice() bool {
	return m.Has(tag.DividendPeriodStrikePrice)
}

// HasDividendPeriodBusinessDayConvention returns true if DividendPeriodBusinessDayConvention is present, Tag 42280.
func (m NoDividendPeriods) HasDividendPeriodBusinessDayConvention() bool {
	return m.Has(tag.DividendPeriodBusinessDayConvention)
}

// HasNoDividendPeriodBusinessCenters returns true if NoDividendPeriodBusinessCenters is present, Tag 42294.
func (m NoDividendPeriods) HasNoDividendPeriodBusinessCenters() bool {
	return m.Has(tag.NoDividendPeriodBusinessCenters)
}

// HasDividendPeriodValuationDateUnadjusted returns true if DividendPeriodValuationDateUnadjusted is present, Tag 42281.
func (m NoDividendPeriods) HasDividendPeriodValuationDateUnadjusted() bool {
	return m.Has(tag.DividendPeriodValuationDateUnadjusted)
}

// HasDividendPeriodValuationDateRelativeTo returns true if DividendPeriodValuationDateRelativeTo is present, Tag 42282.
func (m NoDividendPeriods) HasDividendPeriodValuationDateRelativeTo() bool {
	return m.Has(tag.DividendPeriodValuationDateRelativeTo)
}

// HasDividendPeriodValuationDateOffsetPeriod returns true if DividendPeriodValuationDateOffsetPeriod is present, Tag 42283.
func (m NoDividendPeriods) HasDividendPeriodValuationDateOffsetPeriod() bool {
	return m.Has(tag.DividendPeriodValuationDateOffsetPeriod)
}

// HasDividendPeriodValuationDateOffsetUnit returns true if DividendPeriodValuationDateOffsetUnit is present, Tag 42284.
func (m NoDividendPeriods) HasDividendPeriodValuationDateOffsetUnit() bool {
	return m.Has(tag.DividendPeriodValuationDateOffsetUnit)
}

// HasDividendPeriodValuationDateOffsetDayType returns true if DividendPeriodValuationDateOffsetDayType is present, Tag 42285.
func (m NoDividendPeriods) HasDividendPeriodValuationDateOffsetDayType() bool {
	return m.Has(tag.DividendPeriodValuationDateOffsetDayType)
}

// HasDividendPeriodValuationDateAdjusted returns true if DividendPeriodValuationDateAdjusted is present, Tag 42286.
func (m NoDividendPeriods) HasDividendPeriodValuationDateAdjusted() bool {
	return m.Has(tag.DividendPeriodValuationDateAdjusted)
}

// HasDividendPeriodPaymentDateUnadjusted returns true if DividendPeriodPaymentDateUnadjusted is present, Tag 42287.
func (m NoDividendPeriods) HasDividendPeriodPaymentDateUnadjusted() bool {
	return m.Has(tag.DividendPeriodPaymentDateUnadjusted)
}

// HasDividendPeriodPaymentDateRelativeTo returns true if DividendPeriodPaymentDateRelativeTo is present, Tag 42288.
func (m NoDividendPeriods) HasDividendPeriodPaymentDateRelativeTo() bool {
	return m.Has(tag.DividendPeriodPaymentDateRelativeTo)
}

// HasDividendPeriodPaymentDateOffsetPeriod returns true if DividendPeriodPaymentDateOffsetPeriod is present, Tag 42289.
func (m NoDividendPeriods) HasDividendPeriodPaymentDateOffsetPeriod() bool {
	return m.Has(tag.DividendPeriodPaymentDateOffsetPeriod)
}

// HasDividendPeriodPaymentDateOffsetUnit returns true if DividendPeriodPaymentDateOffsetUnit is present, Tag 42290.
func (m NoDividendPeriods) HasDividendPeriodPaymentDateOffsetUnit() bool {
	return m.Has(tag.DividendPeriodPaymentDateOffsetUnit)
}

// HasDividendPeriodPaymentDateOffsetDayType returns true if DividendPeriodPaymentDateOffsetDayType is present, Tag 42291.
func (m NoDividendPeriods) HasDividendPeriodPaymentDateOffsetDayType() bool {
	return m.Has(tag.DividendPeriodPaymentDateOffsetDayType)
}

// HasDividendPeriodPaymentDateAdjusted returns true if DividendPeriodPaymentDateAdjusted is present, Tag 42292.
func (m NoDividendPeriods) HasDividendPeriodPaymentDateAdjusted() bool {
	return m.Has(tag.DividendPeriodPaymentDateAdjusted)
}

// HasDividendPeriodXID returns true if DividendPeriodXID is present, Tag 42293.
func (m NoDividendPeriods) HasDividendPeriodXID() bool {
	return m.Has(tag.DividendPeriodXID)
}

// NoDividendPeriodBusinessCenters is a repeating group element, Tag 42294.
type NoDividendPeriodBusinessCenters struct {
	*quickfix.Group
}

// SetDividendPeriodBusinessCenter sets DividendPeriodBusinessCenter, Tag 42295.
func (m NoDividendPeriodBusinessCenters) SetDividendPeriodBusinessCenter(v string) {
	m.Set(field.NewDividendPeriodBusinessCenter(v))
}

// GetDividendPeriodBusinessCenter gets DividendPeriodBusinessCenter, Tag 42295.
func (m NoDividendPeriodBusinessCenters) GetDividendPeriodBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.DividendPeriodBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasDividendPeriodBusinessCenter returns true if DividendPeriodBusinessCenter is present, Tag 42295.
func (m NoDividendPeriodBusinessCenters) HasDividendPeriodBusinessCenter() bool {
	return m.Has(tag.DividendPeriodBusinessCenter)
}

// NoDividendPeriodBusinessCentersRepeatingGroup is a repeating group, Tag 42294.
type NoDividendPeriodBusinessCentersRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoDividendPeriodBusinessCentersRepeatingGroup returns an initialized, NoDividendPeriodBusinessCentersRepeatingGroup.
func NewNoDividendPeriodBusinessCentersRepeatingGroup() NoDividendPeriodBusinessCentersRepeatingGroup {
	return NoDividendPeriodBusinessCentersRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoDividendPeriodBusinessCenters,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.DividendPeriodBusinessCenter),
			},
		),
	}
}

// Add create and append a new NoDividendPeriodBusinessCenters to this group.
func (m NoDividendPeriodBusinessCentersRepeatingGroup) Add() NoDividendPeriodBusinessCenters {
	g := m.RepeatingGroup.Add()
	return NoDividendPeriodBusinessCenters{g}
}

// Get returns the ith NoDividendPeriodBusinessCenters in the NoDividendPeriodBusinessCentersRepeatinGroup.
func (m NoDividendPeriodBusinessCentersRepeatingGroup) Get(i int) NoDividendPeriodBusinessCenters {
	return NoDividendPeriodBusinessCenters{m.RepeatingGroup.Get(i)}
}

// NoDividendPeriodsRepeatingGroup is a repeating group, Tag 42274.
type NoDividendPeriodsRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoDividendPeriodsRepeatingGroup returns an initialized, NoDividendPeriodsRepeatingGroup.
func NewNoDividendPeriodsRepeatingGroup() NoDividendPeriodsRepeatingGroup {
	return NoDividendPeriodsRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoDividendPeriods,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.DividendPeriodSequence),
				quickfix.GroupElement(tag.DividendPeriodStartDateUnadjusted),
				quickfix.GroupElement(tag.DividendPeriodEndDateUnadjusted),
				quickfix.GroupElement(tag.DividendPeriodUnderlierRefID),
				quickfix.GroupElement(tag.DividendPeriodStrikePrice),
				quickfix.GroupElement(tag.DividendPeriodBusinessDayConvention),
				NewNoDividendPeriodBusinessCentersRepeatingGroup(),
				quickfix.GroupElement(tag.DividendPeriodValuationDateUnadjusted),
				quickfix.GroupElement(tag.DividendPeriodValuationDateRelativeTo),
				quickfix.GroupElement(tag.DividendPeriodValuationDateOffsetPeriod),
				quickfix.GroupElement(tag.DividendPeriodValuationDateOffsetUnit),
				quickfix.GroupElement(tag.DividendPeriodValuationDateOffsetDayType),
				quickfix.GroupElement(tag.DividendPeriodValuationDateAdjusted),
				quickfix.GroupElement(tag.DividendPeriodPaymentDateUnadjusted),
				quickfix.GroupElement(tag.DividendPeriodPaymentDateRelativeTo),
				quickfix.GroupElement(tag.DividendPeriodPaymentDateOffsetPeriod),
				quickfix.GroupElement(tag.DividendPeriodPaymentDateOffsetUnit),
				quickfix.GroupElement(tag.DividendPeriodPaymentDateOffsetDayType),
				quickfix.GroupElement(tag.DividendPeriodPaymentDateAdjusted),
				quickfix.GroupElement(tag.DividendPeriodXID),
			},
		),
	}
}

// Add create and append a new NoDividendPeriods to this group.
func (m NoDividendPeriodsRepeatingGroup) Add() NoDividendPeriods {
	g := m.RepeatingGroup.Add()
	return NoDividendPeriods{g}
}

// Get returns the ith NoDividendPeriods in the NoDividendPeriodsRepeatinGroup.
func (m NoDividendPeriodsRepeatingGroup) Get(i int) NoDividendPeriods {
	return NoDividendPeriods{m.RepeatingGroup.Get(i)}
}

// NoDividendFXTriggerDateBusinessCenters is a repeating group element, Tag 42272.
type NoDividendFXTriggerDateBusinessCenters struct {
	*quickfix.Group
}

// SetDividendFXTriggerDateBusinessCenter sets DividendFXTriggerDateBusinessCenter, Tag 42273.
func (m NoDividendFXTriggerDateBusinessCenters) SetDividendFXTriggerDateBusinessCenter(v string) {
	m.Set(field.NewDividendFXTriggerDateBusinessCenter(v))
}

// GetDividendFXTriggerDateBusinessCenter gets DividendFXTriggerDateBusinessCenter, Tag 42273.
func (m NoDividendFXTriggerDateBusinessCenters) GetDividendFXTriggerDateBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.DividendFXTriggerDateBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasDividendFXTriggerDateBusinessCenter returns true if DividendFXTriggerDateBusinessCenter is present, Tag 42273.
func (m NoDividendFXTriggerDateBusinessCenters) HasDividendFXTriggerDateBusinessCenter() bool {
	return m.Has(tag.DividendFXTriggerDateBusinessCenter)
}

// NoDividendFXTriggerDateBusinessCentersRepeatingGroup is a repeating group, Tag 42272.
type NoDividendFXTriggerDateBusinessCentersRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoDividendFXTriggerDateBusinessCentersRepeatingGroup returns an initialized, NoDividendFXTriggerDateBusinessCentersRepeatingGroup.
func NewNoDividendFXTriggerDateBusinessCentersRepeatingGroup() NoDividendFXTriggerDateBusinessCentersRepeatingGroup {
	return NoDividendFXTriggerDateBusinessCentersRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoDividendFXTriggerDateBusinessCenters,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.DividendFXTriggerDateBusinessCenter),
			},
		),
	}
}

// Add create and append a new NoDividendFXTriggerDateBusinessCenters to this group.
func (m NoDividendFXTriggerDateBusinessCentersRepeatingGroup) Add() NoDividendFXTriggerDateBusinessCenters {
	g := m.RepeatingGroup.Add()
	return NoDividendFXTriggerDateBusinessCenters{g}
}

// Get returns the ith NoDividendFXTriggerDateBusinessCenters in the NoDividendFXTriggerDateBusinessCentersRepeatinGroup.
func (m NoDividendFXTriggerDateBusinessCentersRepeatingGroup) Get(i int) NoDividendFXTriggerDateBusinessCenters {
	return NoDividendFXTriggerDateBusinessCenters{m.RepeatingGroup.Get(i)}
}

// NoDividendAccrualPaymentDateBusinessCenters is a repeating group element, Tag 42236.
type NoDividendAccrualPaymentDateBusinessCenters struct {
	*quickfix.Group
}

// SetDividendAccrualPaymentDateBusinessCenter sets DividendAccrualPaymentDateBusinessCenter, Tag 42237.
func (m NoDividendAccrualPaymentDateBusinessCenters) SetDividendAccrualPaymentDateBusinessCenter(v string) {
	m.Set(field.NewDividendAccrualPaymentDateBusinessCenter(v))
}

// GetDividendAccrualPaymentDateBusinessCenter gets DividendAccrualPaymentDateBusinessCenter, Tag 42237.
func (m NoDividendAccrualPaymentDateBusinessCenters) GetDividendAccrualPaymentDateBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.DividendAccrualPaymentDateBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasDividendAccrualPaymentDateBusinessCenter returns true if DividendAccrualPaymentDateBusinessCenter is present, Tag 42237.
func (m NoDividendAccrualPaymentDateBusinessCenters) HasDividendAccrualPaymentDateBusinessCenter() bool {
	return m.Has(tag.DividendAccrualPaymentDateBusinessCenter)
}

// NoDividendAccrualPaymentDateBusinessCentersRepeatingGroup is a repeating group, Tag 42236.
type NoDividendAccrualPaymentDateBusinessCentersRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoDividendAccrualPaymentDateBusinessCentersRepeatingGroup returns an initialized, NoDividendAccrualPaymentDateBusinessCentersRepeatingGroup.
func NewNoDividendAccrualPaymentDateBusinessCentersRepeatingGroup() NoDividendAccrualPaymentDateBusinessCentersRepeatingGroup {
	return NoDividendAccrualPaymentDateBusinessCentersRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoDividendAccrualPaymentDateBusinessCenters,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.DividendAccrualPaymentDateBusinessCenter),
			},
		),
	}
}

// Add create and append a new NoDividendAccrualPaymentDateBusinessCenters to this group.
func (m NoDividendAccrualPaymentDateBusinessCentersRepeatingGroup) Add() NoDividendAccrualPaymentDateBusinessCenters {
	g := m.RepeatingGroup.Add()
	return NoDividendAccrualPaymentDateBusinessCenters{g}
}

// Get returns the ith NoDividendAccrualPaymentDateBusinessCenters in the NoDividendAccrualPaymentDateBusinessCentersRepeatinGroup.
func (m NoDividendAccrualPaymentDateBusinessCentersRepeatingGroup) Get(i int) NoDividendAccrualPaymentDateBusinessCenters {
	return NoDividendAccrualPaymentDateBusinessCenters{m.RepeatingGroup.Get(i)}
}

// NoReturnRates is a repeating group element, Tag 42735.
type NoReturnRates struct {
	*quickfix.Group
}

// SetReturnRatePriceSequence sets ReturnRatePriceSequence, Tag 42736.
func (m NoReturnRates) SetReturnRatePriceSequence(v enum.ReturnRatePriceSequence) {
	m.Set(field.NewReturnRatePriceSequence(v))
}

// SetReturnRateCommissionBasis sets ReturnRateCommissionBasis, Tag 42737.
func (m NoReturnRates) SetReturnRateCommissionBasis(v string) {
	m.Set(field.NewReturnRateCommissionBasis(v))
}

// SetReturnRateCommissionAmount sets ReturnRateCommissionAmount, Tag 42738.
func (m NoReturnRates) SetReturnRateCommissionAmount(value decimal.Decimal, scale int32) {
	m.Set(field.NewReturnRateCommissionAmount(value, scale))
}

// SetReturnRateCommissionCurrency sets ReturnRateCommissionCurrency, Tag 42739.
func (m NoReturnRates) SetReturnRateCommissionCurrency(v string) {
	m.Set(field.NewReturnRateCommissionCurrency(v))
}

// SetReturnRateTotalCommissionPerTrade sets ReturnRateTotalCommissionPerTrade, Tag 42740.
func (m NoReturnRates) SetReturnRateTotalCommissionPerTrade(value decimal.Decimal, scale int32) {
	m.Set(field.NewReturnRateTotalCommissionPerTrade(value, scale))
}

// SetReturnRateDeterminationMethod sets ReturnRateDeterminationMethod, Tag 42741.
func (m NoReturnRates) SetReturnRateDeterminationMethod(v string) {
	m.Set(field.NewReturnRateDeterminationMethod(v))
}

// SetNoReturnRatePrices sets NoReturnRatePrices, Tag 42765.
func (m NoReturnRates) SetNoReturnRatePrices(f NoReturnRatePricesRepeatingGroup) {
	m.SetGroup(f)
}

// SetNoReturnRateFXConversions sets NoReturnRateFXConversions, Tag 42731.
func (m NoReturnRates) SetNoReturnRateFXConversions(f NoReturnRateFXConversionsRepeatingGroup) {
	m.SetGroup(f)
}

// SetReturnRateAmountRelativeTo sets ReturnRateAmountRelativeTo, Tag 42742.
func (m NoReturnRates) SetReturnRateAmountRelativeTo(v int) {
	m.Set(field.NewReturnRateAmountRelativeTo(v))
}

// SetReturnRateQuoteMeasureType sets ReturnRateQuoteMeasureType, Tag 42743.
func (m NoReturnRates) SetReturnRateQuoteMeasureType(v string) {
	m.Set(field.NewReturnRateQuoteMeasureType(v))
}

// SetReturnRateQuoteUnits sets ReturnRateQuoteUnits, Tag 42744.
func (m NoReturnRates) SetReturnRateQuoteUnits(v string) {
	m.Set(field.NewReturnRateQuoteUnits(v))
}

// SetReturnRateQuoteMethod sets ReturnRateQuoteMethod, Tag 42745.
func (m NoReturnRates) SetReturnRateQuoteMethod(v int) {
	m.Set(field.NewReturnRateQuoteMethod(v))
}

// SetReturnRateQuoteCurrency sets ReturnRateQuoteCurrency, Tag 42746.
func (m NoReturnRates) SetReturnRateQuoteCurrency(v string) {
	m.Set(field.NewReturnRateQuoteCurrency(v))
}

// SetReturnRateQuoteCurrencyType sets ReturnRateQuoteCurrencyType, Tag 42747.
func (m NoReturnRates) SetReturnRateQuoteCurrencyType(v string) {
	m.Set(field.NewReturnRateQuoteCurrencyType(v))
}

// SetReturnRateQuoteTimeType sets ReturnRateQuoteTimeType, Tag 42748.
func (m NoReturnRates) SetReturnRateQuoteTimeType(v enum.ReturnRateQuoteTimeType) {
	m.Set(field.NewReturnRateQuoteTimeType(v))
}

// SetReturnRateQuoteTime sets ReturnRateQuoteTime, Tag 42749.
func (m NoReturnRates) SetReturnRateQuoteTime(v string) {
	m.Set(field.NewReturnRateQuoteTime(v))
}

// SetReturnRateQuoteDate sets ReturnRateQuoteDate, Tag 42750.
func (m NoReturnRates) SetReturnRateQuoteDate(v string) {
	m.Set(field.NewReturnRateQuoteDate(v))
}

// SetReturnRateQuoteExpirationTime sets ReturnRateQuoteExpirationTime, Tag 42751.
func (m NoReturnRates) SetReturnRateQuoteExpirationTime(v string) {
	m.Set(field.NewReturnRateQuoteExpirationTime(v))
}

// SetReturnRateQuoteBusinessCenter sets ReturnRateQuoteBusinessCenter, Tag 42752.
func (m NoReturnRates) SetReturnRateQuoteBusinessCenter(v string) {
	m.Set(field.NewReturnRateQuoteBusinessCenter(v))
}

// SetReturnRateQuoteExchange sets ReturnRateQuoteExchange, Tag 42753.
func (m NoReturnRates) SetReturnRateQuoteExchange(v string) {
	m.Set(field.NewReturnRateQuoteExchange(v))
}

// SetNoReturnRateInformationSources sets NoReturnRateInformationSources, Tag 42761.
func (m NoReturnRates) SetNoReturnRateInformationSources(f NoReturnRateInformationSourcesRepeatingGroup) {
	m.SetGroup(f)
}

// SetReturnRateQuotePricingModel sets ReturnRateQuotePricingModel, Tag 42754.
func (m NoReturnRates) SetReturnRateQuotePricingModel(v string) {
	m.Set(field.NewReturnRateQuotePricingModel(v))
}

// SetReturnRateCashFlowType sets ReturnRateCashFlowType, Tag 42755.
func (m NoReturnRates) SetReturnRateCashFlowType(v string) {
	m.Set(field.NewReturnRateCashFlowType(v))
}

// SetNoReturnRateDates sets NoReturnRateDates, Tag 42709.
func (m NoReturnRates) SetNoReturnRateDates(f NoReturnRateDatesRepeatingGroup) {
	m.SetGroup(f)
}

// SetReturnRateValuationTimeType sets ReturnRateValuationTimeType, Tag 42756.
func (m NoReturnRates) SetReturnRateValuationTimeType(v int) {
	m.Set(field.NewReturnRateValuationTimeType(v))
}

// SetReturnRateValuationTime sets ReturnRateValuationTime, Tag 42757.
func (m NoReturnRates) SetReturnRateValuationTime(v string) {
	m.Set(field.NewReturnRateValuationTime(v))
}

// SetReturnRateValuationTimeBusinessCenter sets ReturnRateValuationTimeBusinessCenter, Tag 42758.
func (m NoReturnRates) SetReturnRateValuationTimeBusinessCenter(v string) {
	m.Set(field.NewReturnRateValuationTimeBusinessCenter(v))
}

// SetReturnRateValuationPriceOption sets ReturnRateValuationPriceOption, Tag 42759.
func (m NoReturnRates) SetReturnRateValuationPriceOption(v enum.ReturnRateValuationPriceOption) {
	m.Set(field.NewReturnRateValuationPriceOption(v))
}

// SetReturnRateFinalPriceFallback sets ReturnRateFinalPriceFallback, Tag 42760.
func (m NoReturnRates) SetReturnRateFinalPriceFallback(v int) {
	m.Set(field.NewReturnRateFinalPriceFallback(v))
}

// GetReturnRatePriceSequence gets ReturnRatePriceSequence, Tag 42736.
func (m NoReturnRates) GetReturnRatePriceSequence() (v enum.ReturnRatePriceSequence, err quickfix.MessageRejectError) {
	var f field.ReturnRatePriceSequenceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetReturnRateCommissionBasis gets ReturnRateCommissionBasis, Tag 42737.
func (m NoReturnRates) GetReturnRateCommissionBasis() (v string, err quickfix.MessageRejectError) {
	var f field.ReturnRateCommissionBasisField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetReturnRateCommissionAmount gets ReturnRateCommissionAmount, Tag 42738.
func (m NoReturnRates) GetReturnRateCommissionAmount() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.ReturnRateCommissionAmountField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetReturnRateCommissionCurrency gets ReturnRateCommissionCurrency, Tag 42739.
func (m NoReturnRates) GetReturnRateCommissionCurrency() (v string, err quickfix.MessageRejectError) {
	var f field.ReturnRateCommissionCurrencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetReturnRateTotalCommissionPerTrade gets ReturnRateTotalCommissionPerTrade, Tag 42740.
func (m NoReturnRates) GetReturnRateTotalCommissionPerTrade() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.ReturnRateTotalCommissionPerTradeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetReturnRateDeterminationMethod gets ReturnRateDeterminationMethod, Tag 42741.
func (m NoReturnRates) GetReturnRateDeterminationMethod() (v string, err quickfix.MessageRejectError) {
	var f field.ReturnRateDeterminationMethodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoReturnRatePrices gets NoReturnRatePrices, Tag 42765.
func (m NoReturnRates) GetNoReturnRatePrices() (NoReturnRatePricesRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoReturnRatePricesRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetNoReturnRateFXConversions gets NoReturnRateFXConversions, Tag 42731.
func (m NoReturnRates) GetNoReturnRateFXConversions() (NoReturnRateFXConversionsRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoReturnRateFXConversionsRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetReturnRateAmountRelativeTo gets ReturnRateAmountRelativeTo, Tag 42742.
func (m NoReturnRates) GetReturnRateAmountRelativeTo() (v int, err quickfix.MessageRejectError) {
	var f field.ReturnRateAmountRelativeToField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetReturnRateQuoteMeasureType gets ReturnRateQuoteMeasureType, Tag 42743.
func (m NoReturnRates) GetReturnRateQuoteMeasureType() (v string, err quickfix.MessageRejectError) {
	var f field.ReturnRateQuoteMeasureTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetReturnRateQuoteUnits gets ReturnRateQuoteUnits, Tag 42744.
func (m NoReturnRates) GetReturnRateQuoteUnits() (v string, err quickfix.MessageRejectError) {
	var f field.ReturnRateQuoteUnitsField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetReturnRateQuoteMethod gets ReturnRateQuoteMethod, Tag 42745.
func (m NoReturnRates) GetReturnRateQuoteMethod() (v int, err quickfix.MessageRejectError) {
	var f field.ReturnRateQuoteMethodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetReturnRateQuoteCurrency gets ReturnRateQuoteCurrency, Tag 42746.
func (m NoReturnRates) GetReturnRateQuoteCurrency() (v string, err quickfix.MessageRejectError) {
	var f field.ReturnRateQuoteCurrencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetReturnRateQuoteCurrencyType gets ReturnRateQuoteCurrencyType, Tag 42747.
func (m NoReturnRates) GetReturnRateQuoteCurrencyType() (v string, err quickfix.MessageRejectError) {
	var f field.ReturnRateQuoteCurrencyTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetReturnRateQuoteTimeType gets ReturnRateQuoteTimeType, Tag 42748.
func (m NoReturnRates) GetReturnRateQuoteTimeType() (v enum.ReturnRateQuoteTimeType, err quickfix.MessageRejectError) {
	var f field.ReturnRateQuoteTimeTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetReturnRateQuoteTime gets ReturnRateQuoteTime, Tag 42749.
func (m NoReturnRates) GetReturnRateQuoteTime() (v string, err quickfix.MessageRejectError) {
	var f field.ReturnRateQuoteTimeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetReturnRateQuoteDate gets ReturnRateQuoteDate, Tag 42750.
func (m NoReturnRates) GetReturnRateQuoteDate() (v string, err quickfix.MessageRejectError) {
	var f field.ReturnRateQuoteDateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetReturnRateQuoteExpirationTime gets ReturnRateQuoteExpirationTime, Tag 42751.
func (m NoReturnRates) GetReturnRateQuoteExpirationTime() (v string, err quickfix.MessageRejectError) {
	var f field.ReturnRateQuoteExpirationTimeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetReturnRateQuoteBusinessCenter gets ReturnRateQuoteBusinessCenter, Tag 42752.
func (m NoReturnRates) GetReturnRateQuoteBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.ReturnRateQuoteBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetReturnRateQuoteExchange gets ReturnRateQuoteExchange, Tag 42753.
func (m NoReturnRates) GetReturnRateQuoteExchange() (v string, err quickfix.MessageRejectError) {
	var f field.ReturnRateQuoteExchangeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoReturnRateInformationSources gets NoReturnRateInformationSources, Tag 42761.
func (m NoReturnRates) GetNoReturnRateInformationSources() (NoReturnRateInformationSourcesRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoReturnRateInformationSourcesRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetReturnRateQuotePricingModel gets ReturnRateQuotePricingModel, Tag 42754.
func (m NoReturnRates) GetReturnRateQuotePricingModel() (v string, err quickfix.MessageRejectError) {
	var f field.ReturnRateQuotePricingModelField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetReturnRateCashFlowType gets ReturnRateCashFlowType, Tag 42755.
func (m NoReturnRates) GetReturnRateCashFlowType() (v string, err quickfix.MessageRejectError) {
	var f field.ReturnRateCashFlowTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoReturnRateDates gets NoReturnRateDates, Tag 42709.
func (m NoReturnRates) GetNoReturnRateDates() (NoReturnRateDatesRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoReturnRateDatesRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetReturnRateValuationTimeType gets ReturnRateValuationTimeType, Tag 42756.
func (m NoReturnRates) GetReturnRateValuationTimeType() (v int, err quickfix.MessageRejectError) {
	var f field.ReturnRateValuationTimeTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetReturnRateValuationTime gets ReturnRateValuationTime, Tag 42757.
func (m NoReturnRates) GetReturnRateValuationTime() (v string, err quickfix.MessageRejectError) {
	var f field.ReturnRateValuationTimeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetReturnRateValuationTimeBusinessCenter gets ReturnRateValuationTimeBusinessCenter, Tag 42758.
func (m NoReturnRates) GetReturnRateValuationTimeBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.ReturnRateValuationTimeBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetReturnRateValuationPriceOption gets ReturnRateValuationPriceOption, Tag 42759.
func (m NoReturnRates) GetReturnRateValuationPriceOption() (v enum.ReturnRateValuationPriceOption, err quickfix.MessageRejectError) {
	var f field.ReturnRateValuationPriceOptionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetReturnRateFinalPriceFallback gets ReturnRateFinalPriceFallback, Tag 42760.
func (m NoReturnRates) GetReturnRateFinalPriceFallback() (v int, err quickfix.MessageRejectError) {
	var f field.ReturnRateFinalPriceFallbackField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasReturnRatePriceSequence returns true if ReturnRatePriceSequence is present, Tag 42736.
func (m NoReturnRates) HasReturnRatePriceSequence() bool {
	return m.Has(tag.ReturnRatePriceSequence)
}

// HasReturnRateCommissionBasis returns true if ReturnRateCommissionBasis is present, Tag 42737.
func (m NoReturnRates) HasReturnRateCommissionBasis() bool {
	return m.Has(tag.ReturnRateCommissionBasis)
}

// HasReturnRateCommissionAmount returns true if ReturnRateCommissionAmount is present, Tag 42738.
func (m NoReturnRates) HasReturnRateCommissionAmount() bool {
	return m.Has(tag.ReturnRateCommissionAmount)
}

// HasReturnRateCommissionCurrency returns true if ReturnRateCommissionCurrency is present, Tag 42739.
func (m NoReturnRates) HasReturnRateCommissionCurrency() bool {
	return m.Has(tag.ReturnRateCommissionCurrency)
}

// HasReturnRateTotalCommissionPerTrade returns true if ReturnRateTotalCommissionPerTrade is present, Tag 42740.
func (m NoReturnRates) HasReturnRateTotalCommissionPerTrade() bool {
	return m.Has(tag.ReturnRateTotalCommissionPerTrade)
}

// HasReturnRateDeterminationMethod returns true if ReturnRateDeterminationMethod is present, Tag 42741.
func (m NoReturnRates) HasReturnRateDeterminationMethod() bool {
	return m.Has(tag.ReturnRateDeterminationMethod)
}

// HasNoReturnRatePrices returns true if NoReturnRatePrices is present, Tag 42765.
func (m NoReturnRates) HasNoReturnRatePrices() bool {
	return m.Has(tag.NoReturnRatePrices)
}

// HasNoReturnRateFXConversions returns true if NoReturnRateFXConversions is present, Tag 42731.
func (m NoReturnRates) HasNoReturnRateFXConversions() bool {
	return m.Has(tag.NoReturnRateFXConversions)
}

// HasReturnRateAmountRelativeTo returns true if ReturnRateAmountRelativeTo is present, Tag 42742.
func (m NoReturnRates) HasReturnRateAmountRelativeTo() bool {
	return m.Has(tag.ReturnRateAmountRelativeTo)
}

// HasReturnRateQuoteMeasureType returns true if ReturnRateQuoteMeasureType is present, Tag 42743.
func (m NoReturnRates) HasReturnRateQuoteMeasureType() bool {
	return m.Has(tag.ReturnRateQuoteMeasureType)
}

// HasReturnRateQuoteUnits returns true if ReturnRateQuoteUnits is present, Tag 42744.
func (m NoReturnRates) HasReturnRateQuoteUnits() bool {
	return m.Has(tag.ReturnRateQuoteUnits)
}

// HasReturnRateQuoteMethod returns true if ReturnRateQuoteMethod is present, Tag 42745.
func (m NoReturnRates) HasReturnRateQuoteMethod() bool {
	return m.Has(tag.ReturnRateQuoteMethod)
}

// HasReturnRateQuoteCurrency returns true if ReturnRateQuoteCurrency is present, Tag 42746.
func (m NoReturnRates) HasReturnRateQuoteCurrency() bool {
	return m.Has(tag.ReturnRateQuoteCurrency)
}

// HasReturnRateQuoteCurrencyType returns true if ReturnRateQuoteCurrencyType is present, Tag 42747.
func (m NoReturnRates) HasReturnRateQuoteCurrencyType() bool {
	return m.Has(tag.ReturnRateQuoteCurrencyType)
}

// HasReturnRateQuoteTimeType returns true if ReturnRateQuoteTimeType is present, Tag 42748.
func (m NoReturnRates) HasReturnRateQuoteTimeType() bool {
	return m.Has(tag.ReturnRateQuoteTimeType)
}

// HasReturnRateQuoteTime returns true if ReturnRateQuoteTime is present, Tag 42749.
func (m NoReturnRates) HasReturnRateQuoteTime() bool {
	return m.Has(tag.ReturnRateQuoteTime)
}

// HasReturnRateQuoteDate returns true if ReturnRateQuoteDate is present, Tag 42750.
func (m NoReturnRates) HasReturnRateQuoteDate() bool {
	return m.Has(tag.ReturnRateQuoteDate)
}

// HasReturnRateQuoteExpirationTime returns true if ReturnRateQuoteExpirationTime is present, Tag 42751.
func (m NoReturnRates) HasReturnRateQuoteExpirationTime() bool {
	return m.Has(tag.ReturnRateQuoteExpirationTime)
}

// HasReturnRateQuoteBusinessCenter returns true if ReturnRateQuoteBusinessCenter is present, Tag 42752.
func (m NoReturnRates) HasReturnRateQuoteBusinessCenter() bool {
	return m.Has(tag.ReturnRateQuoteBusinessCenter)
}

// HasReturnRateQuoteExchange returns true if ReturnRateQuoteExchange is present, Tag 42753.
func (m NoReturnRates) HasReturnRateQuoteExchange() bool {
	return m.Has(tag.ReturnRateQuoteExchange)
}

// HasNoReturnRateInformationSources returns true if NoReturnRateInformationSources is present, Tag 42761.
func (m NoReturnRates) HasNoReturnRateInformationSources() bool {
	return m.Has(tag.NoReturnRateInformationSources)
}

// HasReturnRateQuotePricingModel returns true if ReturnRateQuotePricingModel is present, Tag 42754.
func (m NoReturnRates) HasReturnRateQuotePricingModel() bool {
	return m.Has(tag.ReturnRateQuotePricingModel)
}

// HasReturnRateCashFlowType returns true if ReturnRateCashFlowType is present, Tag 42755.
func (m NoReturnRates) HasReturnRateCashFlowType() bool {
	return m.Has(tag.ReturnRateCashFlowType)
}

// HasNoReturnRateDates returns true if NoReturnRateDates is present, Tag 42709.
func (m NoReturnRates) HasNoReturnRateDates() bool {
	return m.Has(tag.NoReturnRateDates)
}

// HasReturnRateValuationTimeType returns true if ReturnRateValuationTimeType is present, Tag 42756.
func (m NoReturnRates) HasReturnRateValuationTimeType() bool {
	return m.Has(tag.ReturnRateValuationTimeType)
}

// HasReturnRateValuationTime returns true if ReturnRateValuationTime is present, Tag 42757.
func (m NoReturnRates) HasReturnRateValuationTime() bool {
	return m.Has(tag.ReturnRateValuationTime)
}

// HasReturnRateValuationTimeBusinessCenter returns true if ReturnRateValuationTimeBusinessCenter is present, Tag 42758.
func (m NoReturnRates) HasReturnRateValuationTimeBusinessCenter() bool {
	return m.Has(tag.ReturnRateValuationTimeBusinessCenter)
}

// HasReturnRateValuationPriceOption returns true if ReturnRateValuationPriceOption is present, Tag 42759.
func (m NoReturnRates) HasReturnRateValuationPriceOption() bool {
	return m.Has(tag.ReturnRateValuationPriceOption)
}

// HasReturnRateFinalPriceFallback returns true if ReturnRateFinalPriceFallback is present, Tag 42760.
func (m NoReturnRates) HasReturnRateFinalPriceFallback() bool {
	return m.Has(tag.ReturnRateFinalPriceFallback)
}

// NoReturnRatePrices is a repeating group element, Tag 42765.
type NoReturnRatePrices struct {
	*quickfix.Group
}

// SetReturnRatePriceBasis sets ReturnRatePriceBasis, Tag 42766.
func (m NoReturnRatePrices) SetReturnRatePriceBasis(v enum.ReturnRatePriceBasis) {
	m.Set(field.NewReturnRatePriceBasis(v))
}

// SetReturnRatePrice sets ReturnRatePrice, Tag 42767.
func (m NoReturnRatePrices) SetReturnRatePrice(value decimal.Decimal, scale int32) {
	m.Set(field.NewReturnRatePrice(value, scale))
}

// SetReturnRatePriceCurrency sets ReturnRatePriceCurrency, Tag 42768.
func (m NoReturnRatePrices) SetReturnRatePriceCurrency(v string) {
	m.Set(field.NewReturnRatePriceCurrency(v))
}

// SetReturnRatePriceType sets ReturnRatePriceType, Tag 42769.
func (m NoReturnRatePrices) SetReturnRatePriceType(v enum.ReturnRatePriceType) {
	m.Set(field.NewReturnRatePriceType(v))
}

// GetReturnRatePriceBasis gets ReturnRatePriceBasis, Tag 42766.
func (m NoReturnRatePrices) GetReturnRatePriceBasis() (v enum.ReturnRatePriceBasis, err quickfix.MessageRejectError) {
	var f field.ReturnRatePriceBasisField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetReturnRatePrice gets ReturnRatePrice, Tag 42767.
func (m NoReturnRatePrices) GetReturnRatePrice() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.ReturnRatePriceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetReturnRatePriceCurrency gets ReturnRatePriceCurrency, Tag 42768.
func (m NoReturnRatePrices) GetReturnRatePriceCurrency() (v string, err quickfix.MessageRejectError) {
	var f field.ReturnRatePriceCurrencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetReturnRatePriceType gets ReturnRatePriceType, Tag 42769.
func (m NoReturnRatePrices) GetReturnRatePriceType() (v enum.ReturnRatePriceType, err quickfix.MessageRejectError) {
	var f field.ReturnRatePriceTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasReturnRatePriceBasis returns true if ReturnRatePriceBasis is present, Tag 42766.
func (m NoReturnRatePrices) HasReturnRatePriceBasis() bool {
	return m.Has(tag.ReturnRatePriceBasis)
}

// HasReturnRatePrice returns true if ReturnRatePrice is present, Tag 42767.
func (m NoReturnRatePrices) HasReturnRatePrice() bool {
	return m.Has(tag.ReturnRatePrice)
}

// HasReturnRatePriceCurrency returns true if ReturnRatePriceCurrency is present, Tag 42768.
func (m NoReturnRatePrices) HasReturnRatePriceCurrency() bool {
	return m.Has(tag.ReturnRatePriceCurrency)
}

// HasReturnRatePriceType returns true if ReturnRatePriceType is present, Tag 42769.
func (m NoReturnRatePrices) HasReturnRatePriceType() bool {
	return m.Has(tag.ReturnRatePriceType)
}

// NoReturnRatePricesRepeatingGroup is a repeating group, Tag 42765.
type NoReturnRatePricesRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoReturnRatePricesRepeatingGroup returns an initialized, NoReturnRatePricesRepeatingGroup.
func NewNoReturnRatePricesRepeatingGroup() NoReturnRatePricesRepeatingGroup {
	return NoReturnRatePricesRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoReturnRatePrices,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.ReturnRatePriceBasis),
				quickfix.GroupElement(tag.ReturnRatePrice),
				quickfix.GroupElement(tag.ReturnRatePriceCurrency),
				quickfix.GroupElement(tag.ReturnRatePriceType),
			},
		),
	}
}

// Add create and append a new NoReturnRatePrices to this group.
func (m NoReturnRatePricesRepeatingGroup) Add() NoReturnRatePrices {
	g := m.RepeatingGroup.Add()
	return NoReturnRatePrices{g}
}

// Get returns the ith NoReturnRatePrices in the NoReturnRatePricesRepeatinGroup.
func (m NoReturnRatePricesRepeatingGroup) Get(i int) NoReturnRatePrices {
	return NoReturnRatePrices{m.RepeatingGroup.Get(i)}
}

// NoReturnRateFXConversions is a repeating group element, Tag 42731.
type NoReturnRateFXConversions struct {
	*quickfix.Group
}

// SetReturnRateFXCurrencySymbol sets ReturnRateFXCurrencySymbol, Tag 42732.
func (m NoReturnRateFXConversions) SetReturnRateFXCurrencySymbol(v string) {
	m.Set(field.NewReturnRateFXCurrencySymbol(v))
}

// SetReturnRateFXRate sets ReturnRateFXRate, Tag 42733.
func (m NoReturnRateFXConversions) SetReturnRateFXRate(value decimal.Decimal, scale int32) {
	m.Set(field.NewReturnRateFXRate(value, scale))
}

// SetReturnRateFXRateCalc sets ReturnRateFXRateCalc, Tag 42734.
func (m NoReturnRateFXConversions) SetReturnRateFXRateCalc(v string) {
	m.Set(field.NewReturnRateFXRateCalc(v))
}

// GetReturnRateFXCurrencySymbol gets ReturnRateFXCurrencySymbol, Tag 42732.
func (m NoReturnRateFXConversions) GetReturnRateFXCurrencySymbol() (v string, err quickfix.MessageRejectError) {
	var f field.ReturnRateFXCurrencySymbolField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetReturnRateFXRate gets ReturnRateFXRate, Tag 42733.
func (m NoReturnRateFXConversions) GetReturnRateFXRate() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.ReturnRateFXRateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetReturnRateFXRateCalc gets ReturnRateFXRateCalc, Tag 42734.
func (m NoReturnRateFXConversions) GetReturnRateFXRateCalc() (v string, err quickfix.MessageRejectError) {
	var f field.ReturnRateFXRateCalcField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasReturnRateFXCurrencySymbol returns true if ReturnRateFXCurrencySymbol is present, Tag 42732.
func (m NoReturnRateFXConversions) HasReturnRateFXCurrencySymbol() bool {
	return m.Has(tag.ReturnRateFXCurrencySymbol)
}

// HasReturnRateFXRate returns true if ReturnRateFXRate is present, Tag 42733.
func (m NoReturnRateFXConversions) HasReturnRateFXRate() bool {
	return m.Has(tag.ReturnRateFXRate)
}

// HasReturnRateFXRateCalc returns true if ReturnRateFXRateCalc is present, Tag 42734.
func (m NoReturnRateFXConversions) HasReturnRateFXRateCalc() bool {
	return m.Has(tag.ReturnRateFXRateCalc)
}

// NoReturnRateFXConversionsRepeatingGroup is a repeating group, Tag 42731.
type NoReturnRateFXConversionsRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoReturnRateFXConversionsRepeatingGroup returns an initialized, NoReturnRateFXConversionsRepeatingGroup.
func NewNoReturnRateFXConversionsRepeatingGroup() NoReturnRateFXConversionsRepeatingGroup {
	return NoReturnRateFXConversionsRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoReturnRateFXConversions,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.ReturnRateFXCurrencySymbol),
				quickfix.GroupElement(tag.ReturnRateFXRate),
				quickfix.GroupElement(tag.ReturnRateFXRateCalc),
			},
		),
	}
}

// Add create and append a new NoReturnRateFXConversions to this group.
func (m NoReturnRateFXConversionsRepeatingGroup) Add() NoReturnRateFXConversions {
	g := m.RepeatingGroup.Add()
	return NoReturnRateFXConversions{g}
}

// Get returns the ith NoReturnRateFXConversions in the NoReturnRateFXConversionsRepeatinGroup.
func (m NoReturnRateFXConversionsRepeatingGroup) Get(i int) NoReturnRateFXConversions {
	return NoReturnRateFXConversions{m.RepeatingGroup.Get(i)}
}

// NoReturnRateInformationSources is a repeating group element, Tag 42761.
type NoReturnRateInformationSources struct {
	*quickfix.Group
}

// SetReturnRateInformationSource sets ReturnRateInformationSource, Tag 42762.
func (m NoReturnRateInformationSources) SetReturnRateInformationSource(v int) {
	m.Set(field.NewReturnRateInformationSource(v))
}

// SetReturnRateReferencePage sets ReturnRateReferencePage, Tag 42763.
func (m NoReturnRateInformationSources) SetReturnRateReferencePage(v string) {
	m.Set(field.NewReturnRateReferencePage(v))
}

// SetReturnRateReferencePageHeading sets ReturnRateReferencePageHeading, Tag 42764.
func (m NoReturnRateInformationSources) SetReturnRateReferencePageHeading(v string) {
	m.Set(field.NewReturnRateReferencePageHeading(v))
}

// GetReturnRateInformationSource gets ReturnRateInformationSource, Tag 42762.
func (m NoReturnRateInformationSources) GetReturnRateInformationSource() (v int, err quickfix.MessageRejectError) {
	var f field.ReturnRateInformationSourceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetReturnRateReferencePage gets ReturnRateReferencePage, Tag 42763.
func (m NoReturnRateInformationSources) GetReturnRateReferencePage() (v string, err quickfix.MessageRejectError) {
	var f field.ReturnRateReferencePageField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetReturnRateReferencePageHeading gets ReturnRateReferencePageHeading, Tag 42764.
func (m NoReturnRateInformationSources) GetReturnRateReferencePageHeading() (v string, err quickfix.MessageRejectError) {
	var f field.ReturnRateReferencePageHeadingField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasReturnRateInformationSource returns true if ReturnRateInformationSource is present, Tag 42762.
func (m NoReturnRateInformationSources) HasReturnRateInformationSource() bool {
	return m.Has(tag.ReturnRateInformationSource)
}

// HasReturnRateReferencePage returns true if ReturnRateReferencePage is present, Tag 42763.
func (m NoReturnRateInformationSources) HasReturnRateReferencePage() bool {
	return m.Has(tag.ReturnRateReferencePage)
}

// HasReturnRateReferencePageHeading returns true if ReturnRateReferencePageHeading is present, Tag 42764.
func (m NoReturnRateInformationSources) HasReturnRateReferencePageHeading() bool {
	return m.Has(tag.ReturnRateReferencePageHeading)
}

// NoReturnRateInformationSourcesRepeatingGroup is a repeating group, Tag 42761.
type NoReturnRateInformationSourcesRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoReturnRateInformationSourcesRepeatingGroup returns an initialized, NoReturnRateInformationSourcesRepeatingGroup.
func NewNoReturnRateInformationSourcesRepeatingGroup() NoReturnRateInformationSourcesRepeatingGroup {
	return NoReturnRateInformationSourcesRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoReturnRateInformationSources,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.ReturnRateInformationSource),
				quickfix.GroupElement(tag.ReturnRateReferencePage),
				quickfix.GroupElement(tag.ReturnRateReferencePageHeading),
			},
		),
	}
}

// Add create and append a new NoReturnRateInformationSources to this group.
func (m NoReturnRateInformationSourcesRepeatingGroup) Add() NoReturnRateInformationSources {
	g := m.RepeatingGroup.Add()
	return NoReturnRateInformationSources{g}
}

// Get returns the ith NoReturnRateInformationSources in the NoReturnRateInformationSourcesRepeatinGroup.
func (m NoReturnRateInformationSourcesRepeatingGroup) Get(i int) NoReturnRateInformationSources {
	return NoReturnRateInformationSources{m.RepeatingGroup.Get(i)}
}

// NoReturnRateDates is a repeating group element, Tag 42709.
type NoReturnRateDates struct {
	*quickfix.Group
}

// SetReturnRateDateMode sets ReturnRateDateMode, Tag 42710.
func (m NoReturnRateDates) SetReturnRateDateMode(v enum.ReturnRateDateMode) {
	m.Set(field.NewReturnRateDateMode(v))
}

// SetNoReturnRateValuationDates sets NoReturnRateValuationDates, Tag 42772.
func (m NoReturnRateDates) SetNoReturnRateValuationDates(f NoReturnRateValuationDatesRepeatingGroup) {
	m.SetGroup(f)
}

// SetReturnRateValuationDateRelativeTo sets ReturnRateValuationDateRelativeTo, Tag 42711.
func (m NoReturnRateDates) SetReturnRateValuationDateRelativeTo(v int) {
	m.Set(field.NewReturnRateValuationDateRelativeTo(v))
}

// SetReturnRateValuationDateOffsetPeriod sets ReturnRateValuationDateOffsetPeriod, Tag 42712.
func (m NoReturnRateDates) SetReturnRateValuationDateOffsetPeriod(v int) {
	m.Set(field.NewReturnRateValuationDateOffsetPeriod(v))
}

// SetReturnRateValuationDateOffsetUnit sets ReturnRateValuationDateOffsetUnit, Tag 42713.
func (m NoReturnRateDates) SetReturnRateValuationDateOffsetUnit(v string) {
	m.Set(field.NewReturnRateValuationDateOffsetUnit(v))
}

// SetReturnRateValuationDateOffsetDayType sets ReturnRateValuationDateOffsetDayType, Tag 42714.
func (m NoReturnRateDates) SetReturnRateValuationDateOffsetDayType(v int) {
	m.Set(field.NewReturnRateValuationDateOffsetDayType(v))
}

// SetReturnRateValuationStartDateUnadjusted sets ReturnRateValuationStartDateUnadjusted, Tag 42715.
func (m NoReturnRateDates) SetReturnRateValuationStartDateUnadjusted(v string) {
	m.Set(field.NewReturnRateValuationStartDateUnadjusted(v))
}

// SetReturnRateValuationStartDateRelativeTo sets ReturnRateValuationStartDateRelativeTo, Tag 42716.
func (m NoReturnRateDates) SetReturnRateValuationStartDateRelativeTo(v int) {
	m.Set(field.NewReturnRateValuationStartDateRelativeTo(v))
}

// SetReturnRateValuationStartDateOffsetPeriod sets ReturnRateValuationStartDateOffsetPeriod, Tag 42717.
func (m NoReturnRateDates) SetReturnRateValuationStartDateOffsetPeriod(v int) {
	m.Set(field.NewReturnRateValuationStartDateOffsetPeriod(v))
}

// SetReturnRateValuationStartDateOffsetUnit sets ReturnRateValuationStartDateOffsetUnit, Tag 42718.
func (m NoReturnRateDates) SetReturnRateValuationStartDateOffsetUnit(v string) {
	m.Set(field.NewReturnRateValuationStartDateOffsetUnit(v))
}

// SetReturnRateValuationStartDateOffsetDayType sets ReturnRateValuationStartDateOffsetDayType, Tag 42719.
func (m NoReturnRateDates) SetReturnRateValuationStartDateOffsetDayType(v int) {
	m.Set(field.NewReturnRateValuationStartDateOffsetDayType(v))
}

// SetReturnRateValuationStartDateAdjusted sets ReturnRateValuationStartDateAdjusted, Tag 42720.
func (m NoReturnRateDates) SetReturnRateValuationStartDateAdjusted(v string) {
	m.Set(field.NewReturnRateValuationStartDateAdjusted(v))
}

// SetReturnRateValuationEndDateUnadjusted sets ReturnRateValuationEndDateUnadjusted, Tag 42721.
func (m NoReturnRateDates) SetReturnRateValuationEndDateUnadjusted(v string) {
	m.Set(field.NewReturnRateValuationEndDateUnadjusted(v))
}

// SetReturnRateValuationEndDateRelativeTo sets ReturnRateValuationEndDateRelativeTo, Tag 42722.
func (m NoReturnRateDates) SetReturnRateValuationEndDateRelativeTo(v int) {
	m.Set(field.NewReturnRateValuationEndDateRelativeTo(v))
}

// SetReturnRateValuationEndDateOffsetPeriod sets ReturnRateValuationEndDateOffsetPeriod, Tag 42723.
func (m NoReturnRateDates) SetReturnRateValuationEndDateOffsetPeriod(v int) {
	m.Set(field.NewReturnRateValuationEndDateOffsetPeriod(v))
}

// SetReturnRateValuationEndDateOffsetUnit sets ReturnRateValuationEndDateOffsetUnit, Tag 42724.
func (m NoReturnRateDates) SetReturnRateValuationEndDateOffsetUnit(v string) {
	m.Set(field.NewReturnRateValuationEndDateOffsetUnit(v))
}

// SetReturnRateValuationEndDateOffsetDayType sets ReturnRateValuationEndDateOffsetDayType, Tag 42725.
func (m NoReturnRateDates) SetReturnRateValuationEndDateOffsetDayType(v int) {
	m.Set(field.NewReturnRateValuationEndDateOffsetDayType(v))
}

// SetReturnRateValuationEndDateAdjusted sets ReturnRateValuationEndDateAdjusted, Tag 42726.
func (m NoReturnRateDates) SetReturnRateValuationEndDateAdjusted(v string) {
	m.Set(field.NewReturnRateValuationEndDateAdjusted(v))
}

// SetReturnRateValuationFrequencyPeriod sets ReturnRateValuationFrequencyPeriod, Tag 42727.
func (m NoReturnRateDates) SetReturnRateValuationFrequencyPeriod(v int) {
	m.Set(field.NewReturnRateValuationFrequencyPeriod(v))
}

// SetReturnRateValuationFrequencyUnit sets ReturnRateValuationFrequencyUnit, Tag 42728.
func (m NoReturnRateDates) SetReturnRateValuationFrequencyUnit(v string) {
	m.Set(field.NewReturnRateValuationFrequencyUnit(v))
}

// SetReturnRateValuationFrequencyRollConvention sets ReturnRateValuationFrequencyRollConvention, Tag 42729.
func (m NoReturnRateDates) SetReturnRateValuationFrequencyRollConvention(v string) {
	m.Set(field.NewReturnRateValuationFrequencyRollConvention(v))
}

// SetReturnRateValuationDateBusinessDayConvention sets ReturnRateValuationDateBusinessDayConvention, Tag 42730.
func (m NoReturnRateDates) SetReturnRateValuationDateBusinessDayConvention(v int) {
	m.Set(field.NewReturnRateValuationDateBusinessDayConvention(v))
}

// SetNoReturnRateValuationDateBusinessCenters sets NoReturnRateValuationDateBusinessCenters, Tag 42770.
func (m NoReturnRateDates) SetNoReturnRateValuationDateBusinessCenters(f NoReturnRateValuationDateBusinessCentersRepeatingGroup) {
	m.SetGroup(f)
}

// GetReturnRateDateMode gets ReturnRateDateMode, Tag 42710.
func (m NoReturnRateDates) GetReturnRateDateMode() (v enum.ReturnRateDateMode, err quickfix.MessageRejectError) {
	var f field.ReturnRateDateModeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoReturnRateValuationDates gets NoReturnRateValuationDates, Tag 42772.
func (m NoReturnRateDates) GetNoReturnRateValuationDates() (NoReturnRateValuationDatesRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoReturnRateValuationDatesRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetReturnRateValuationDateRelativeTo gets ReturnRateValuationDateRelativeTo, Tag 42711.
func (m NoReturnRateDates) GetReturnRateValuationDateRelativeTo() (v int, err quickfix.MessageRejectError) {
	var f field.ReturnRateValuationDateRelativeToField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetReturnRateValuationDateOffsetPeriod gets ReturnRateValuationDateOffsetPeriod, Tag 42712.
func (m NoReturnRateDates) GetReturnRateValuationDateOffsetPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.ReturnRateValuationDateOffsetPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetReturnRateValuationDateOffsetUnit gets ReturnRateValuationDateOffsetUnit, Tag 42713.
func (m NoReturnRateDates) GetReturnRateValuationDateOffsetUnit() (v string, err quickfix.MessageRejectError) {
	var f field.ReturnRateValuationDateOffsetUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetReturnRateValuationDateOffsetDayType gets ReturnRateValuationDateOffsetDayType, Tag 42714.
func (m NoReturnRateDates) GetReturnRateValuationDateOffsetDayType() (v int, err quickfix.MessageRejectError) {
	var f field.ReturnRateValuationDateOffsetDayTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetReturnRateValuationStartDateUnadjusted gets ReturnRateValuationStartDateUnadjusted, Tag 42715.
func (m NoReturnRateDates) GetReturnRateValuationStartDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.ReturnRateValuationStartDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetReturnRateValuationStartDateRelativeTo gets ReturnRateValuationStartDateRelativeTo, Tag 42716.
func (m NoReturnRateDates) GetReturnRateValuationStartDateRelativeTo() (v int, err quickfix.MessageRejectError) {
	var f field.ReturnRateValuationStartDateRelativeToField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetReturnRateValuationStartDateOffsetPeriod gets ReturnRateValuationStartDateOffsetPeriod, Tag 42717.
func (m NoReturnRateDates) GetReturnRateValuationStartDateOffsetPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.ReturnRateValuationStartDateOffsetPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetReturnRateValuationStartDateOffsetUnit gets ReturnRateValuationStartDateOffsetUnit, Tag 42718.
func (m NoReturnRateDates) GetReturnRateValuationStartDateOffsetUnit() (v string, err quickfix.MessageRejectError) {
	var f field.ReturnRateValuationStartDateOffsetUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetReturnRateValuationStartDateOffsetDayType gets ReturnRateValuationStartDateOffsetDayType, Tag 42719.
func (m NoReturnRateDates) GetReturnRateValuationStartDateOffsetDayType() (v int, err quickfix.MessageRejectError) {
	var f field.ReturnRateValuationStartDateOffsetDayTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetReturnRateValuationStartDateAdjusted gets ReturnRateValuationStartDateAdjusted, Tag 42720.
func (m NoReturnRateDates) GetReturnRateValuationStartDateAdjusted() (v string, err quickfix.MessageRejectError) {
	var f field.ReturnRateValuationStartDateAdjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetReturnRateValuationEndDateUnadjusted gets ReturnRateValuationEndDateUnadjusted, Tag 42721.
func (m NoReturnRateDates) GetReturnRateValuationEndDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.ReturnRateValuationEndDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetReturnRateValuationEndDateRelativeTo gets ReturnRateValuationEndDateRelativeTo, Tag 42722.
func (m NoReturnRateDates) GetReturnRateValuationEndDateRelativeTo() (v int, err quickfix.MessageRejectError) {
	var f field.ReturnRateValuationEndDateRelativeToField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetReturnRateValuationEndDateOffsetPeriod gets ReturnRateValuationEndDateOffsetPeriod, Tag 42723.
func (m NoReturnRateDates) GetReturnRateValuationEndDateOffsetPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.ReturnRateValuationEndDateOffsetPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetReturnRateValuationEndDateOffsetUnit gets ReturnRateValuationEndDateOffsetUnit, Tag 42724.
func (m NoReturnRateDates) GetReturnRateValuationEndDateOffsetUnit() (v string, err quickfix.MessageRejectError) {
	var f field.ReturnRateValuationEndDateOffsetUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetReturnRateValuationEndDateOffsetDayType gets ReturnRateValuationEndDateOffsetDayType, Tag 42725.
func (m NoReturnRateDates) GetReturnRateValuationEndDateOffsetDayType() (v int, err quickfix.MessageRejectError) {
	var f field.ReturnRateValuationEndDateOffsetDayTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetReturnRateValuationEndDateAdjusted gets ReturnRateValuationEndDateAdjusted, Tag 42726.
func (m NoReturnRateDates) GetReturnRateValuationEndDateAdjusted() (v string, err quickfix.MessageRejectError) {
	var f field.ReturnRateValuationEndDateAdjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetReturnRateValuationFrequencyPeriod gets ReturnRateValuationFrequencyPeriod, Tag 42727.
func (m NoReturnRateDates) GetReturnRateValuationFrequencyPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.ReturnRateValuationFrequencyPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetReturnRateValuationFrequencyUnit gets ReturnRateValuationFrequencyUnit, Tag 42728.
func (m NoReturnRateDates) GetReturnRateValuationFrequencyUnit() (v string, err quickfix.MessageRejectError) {
	var f field.ReturnRateValuationFrequencyUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetReturnRateValuationFrequencyRollConvention gets ReturnRateValuationFrequencyRollConvention, Tag 42729.
func (m NoReturnRateDates) GetReturnRateValuationFrequencyRollConvention() (v string, err quickfix.MessageRejectError) {
	var f field.ReturnRateValuationFrequencyRollConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetReturnRateValuationDateBusinessDayConvention gets ReturnRateValuationDateBusinessDayConvention, Tag 42730.
func (m NoReturnRateDates) GetReturnRateValuationDateBusinessDayConvention() (v int, err quickfix.MessageRejectError) {
	var f field.ReturnRateValuationDateBusinessDayConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoReturnRateValuationDateBusinessCenters gets NoReturnRateValuationDateBusinessCenters, Tag 42770.
func (m NoReturnRateDates) GetNoReturnRateValuationDateBusinessCenters() (NoReturnRateValuationDateBusinessCentersRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoReturnRateValuationDateBusinessCentersRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// HasReturnRateDateMode returns true if ReturnRateDateMode is present, Tag 42710.
func (m NoReturnRateDates) HasReturnRateDateMode() bool {
	return m.Has(tag.ReturnRateDateMode)
}

// HasNoReturnRateValuationDates returns true if NoReturnRateValuationDates is present, Tag 42772.
func (m NoReturnRateDates) HasNoReturnRateValuationDates() bool {
	return m.Has(tag.NoReturnRateValuationDates)
}

// HasReturnRateValuationDateRelativeTo returns true if ReturnRateValuationDateRelativeTo is present, Tag 42711.
func (m NoReturnRateDates) HasReturnRateValuationDateRelativeTo() bool {
	return m.Has(tag.ReturnRateValuationDateRelativeTo)
}

// HasReturnRateValuationDateOffsetPeriod returns true if ReturnRateValuationDateOffsetPeriod is present, Tag 42712.
func (m NoReturnRateDates) HasReturnRateValuationDateOffsetPeriod() bool {
	return m.Has(tag.ReturnRateValuationDateOffsetPeriod)
}

// HasReturnRateValuationDateOffsetUnit returns true if ReturnRateValuationDateOffsetUnit is present, Tag 42713.
func (m NoReturnRateDates) HasReturnRateValuationDateOffsetUnit() bool {
	return m.Has(tag.ReturnRateValuationDateOffsetUnit)
}

// HasReturnRateValuationDateOffsetDayType returns true if ReturnRateValuationDateOffsetDayType is present, Tag 42714.
func (m NoReturnRateDates) HasReturnRateValuationDateOffsetDayType() bool {
	return m.Has(tag.ReturnRateValuationDateOffsetDayType)
}

// HasReturnRateValuationStartDateUnadjusted returns true if ReturnRateValuationStartDateUnadjusted is present, Tag 42715.
func (m NoReturnRateDates) HasReturnRateValuationStartDateUnadjusted() bool {
	return m.Has(tag.ReturnRateValuationStartDateUnadjusted)
}

// HasReturnRateValuationStartDateRelativeTo returns true if ReturnRateValuationStartDateRelativeTo is present, Tag 42716.
func (m NoReturnRateDates) HasReturnRateValuationStartDateRelativeTo() bool {
	return m.Has(tag.ReturnRateValuationStartDateRelativeTo)
}

// HasReturnRateValuationStartDateOffsetPeriod returns true if ReturnRateValuationStartDateOffsetPeriod is present, Tag 42717.
func (m NoReturnRateDates) HasReturnRateValuationStartDateOffsetPeriod() bool {
	return m.Has(tag.ReturnRateValuationStartDateOffsetPeriod)
}

// HasReturnRateValuationStartDateOffsetUnit returns true if ReturnRateValuationStartDateOffsetUnit is present, Tag 42718.
func (m NoReturnRateDates) HasReturnRateValuationStartDateOffsetUnit() bool {
	return m.Has(tag.ReturnRateValuationStartDateOffsetUnit)
}

// HasReturnRateValuationStartDateOffsetDayType returns true if ReturnRateValuationStartDateOffsetDayType is present, Tag 42719.
func (m NoReturnRateDates) HasReturnRateValuationStartDateOffsetDayType() bool {
	return m.Has(tag.ReturnRateValuationStartDateOffsetDayType)
}

// HasReturnRateValuationStartDateAdjusted returns true if ReturnRateValuationStartDateAdjusted is present, Tag 42720.
func (m NoReturnRateDates) HasReturnRateValuationStartDateAdjusted() bool {
	return m.Has(tag.ReturnRateValuationStartDateAdjusted)
}

// HasReturnRateValuationEndDateUnadjusted returns true if ReturnRateValuationEndDateUnadjusted is present, Tag 42721.
func (m NoReturnRateDates) HasReturnRateValuationEndDateUnadjusted() bool {
	return m.Has(tag.ReturnRateValuationEndDateUnadjusted)
}

// HasReturnRateValuationEndDateRelativeTo returns true if ReturnRateValuationEndDateRelativeTo is present, Tag 42722.
func (m NoReturnRateDates) HasReturnRateValuationEndDateRelativeTo() bool {
	return m.Has(tag.ReturnRateValuationEndDateRelativeTo)
}

// HasReturnRateValuationEndDateOffsetPeriod returns true if ReturnRateValuationEndDateOffsetPeriod is present, Tag 42723.
func (m NoReturnRateDates) HasReturnRateValuationEndDateOffsetPeriod() bool {
	return m.Has(tag.ReturnRateValuationEndDateOffsetPeriod)
}

// HasReturnRateValuationEndDateOffsetUnit returns true if ReturnRateValuationEndDateOffsetUnit is present, Tag 42724.
func (m NoReturnRateDates) HasReturnRateValuationEndDateOffsetUnit() bool {
	return m.Has(tag.ReturnRateValuationEndDateOffsetUnit)
}

// HasReturnRateValuationEndDateOffsetDayType returns true if ReturnRateValuationEndDateOffsetDayType is present, Tag 42725.
func (m NoReturnRateDates) HasReturnRateValuationEndDateOffsetDayType() bool {
	return m.Has(tag.ReturnRateValuationEndDateOffsetDayType)
}

// HasReturnRateValuationEndDateAdjusted returns true if ReturnRateValuationEndDateAdjusted is present, Tag 42726.
func (m NoReturnRateDates) HasReturnRateValuationEndDateAdjusted() bool {
	return m.Has(tag.ReturnRateValuationEndDateAdjusted)
}

// HasReturnRateValuationFrequencyPeriod returns true if ReturnRateValuationFrequencyPeriod is present, Tag 42727.
func (m NoReturnRateDates) HasReturnRateValuationFrequencyPeriod() bool {
	return m.Has(tag.ReturnRateValuationFrequencyPeriod)
}

// HasReturnRateValuationFrequencyUnit returns true if ReturnRateValuationFrequencyUnit is present, Tag 42728.
func (m NoReturnRateDates) HasReturnRateValuationFrequencyUnit() bool {
	return m.Has(tag.ReturnRateValuationFrequencyUnit)
}

// HasReturnRateValuationFrequencyRollConvention returns true if ReturnRateValuationFrequencyRollConvention is present, Tag 42729.
func (m NoReturnRateDates) HasReturnRateValuationFrequencyRollConvention() bool {
	return m.Has(tag.ReturnRateValuationFrequencyRollConvention)
}

// HasReturnRateValuationDateBusinessDayConvention returns true if ReturnRateValuationDateBusinessDayConvention is present, Tag 42730.
func (m NoReturnRateDates) HasReturnRateValuationDateBusinessDayConvention() bool {
	return m.Has(tag.ReturnRateValuationDateBusinessDayConvention)
}

// HasNoReturnRateValuationDateBusinessCenters returns true if NoReturnRateValuationDateBusinessCenters is present, Tag 42770.
func (m NoReturnRateDates) HasNoReturnRateValuationDateBusinessCenters() bool {
	return m.Has(tag.NoReturnRateValuationDateBusinessCenters)
}

// NoReturnRateValuationDates is a repeating group element, Tag 42772.
type NoReturnRateValuationDates struct {
	*quickfix.Group
}

// SetReturnRateValuationDate sets ReturnRateValuationDate, Tag 42773.
func (m NoReturnRateValuationDates) SetReturnRateValuationDate(v string) {
	m.Set(field.NewReturnRateValuationDate(v))
}

// SetReturnRateValuationDateType sets ReturnRateValuationDateType, Tag 42774.
func (m NoReturnRateValuationDates) SetReturnRateValuationDateType(v int) {
	m.Set(field.NewReturnRateValuationDateType(v))
}

// GetReturnRateValuationDate gets ReturnRateValuationDate, Tag 42773.
func (m NoReturnRateValuationDates) GetReturnRateValuationDate() (v string, err quickfix.MessageRejectError) {
	var f field.ReturnRateValuationDateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetReturnRateValuationDateType gets ReturnRateValuationDateType, Tag 42774.
func (m NoReturnRateValuationDates) GetReturnRateValuationDateType() (v int, err quickfix.MessageRejectError) {
	var f field.ReturnRateValuationDateTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasReturnRateValuationDate returns true if ReturnRateValuationDate is present, Tag 42773.
func (m NoReturnRateValuationDates) HasReturnRateValuationDate() bool {
	return m.Has(tag.ReturnRateValuationDate)
}

// HasReturnRateValuationDateType returns true if ReturnRateValuationDateType is present, Tag 42774.
func (m NoReturnRateValuationDates) HasReturnRateValuationDateType() bool {
	return m.Has(tag.ReturnRateValuationDateType)
}

// NoReturnRateValuationDatesRepeatingGroup is a repeating group, Tag 42772.
type NoReturnRateValuationDatesRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoReturnRateValuationDatesRepeatingGroup returns an initialized, NoReturnRateValuationDatesRepeatingGroup.
func NewNoReturnRateValuationDatesRepeatingGroup() NoReturnRateValuationDatesRepeatingGroup {
	return NoReturnRateValuationDatesRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoReturnRateValuationDates,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.ReturnRateValuationDate),
				quickfix.GroupElement(tag.ReturnRateValuationDateType),
			},
		),
	}
}

// Add create and append a new NoReturnRateValuationDates to this group.
func (m NoReturnRateValuationDatesRepeatingGroup) Add() NoReturnRateValuationDates {
	g := m.RepeatingGroup.Add()
	return NoReturnRateValuationDates{g}
}

// Get returns the ith NoReturnRateValuationDates in the NoReturnRateValuationDatesRepeatinGroup.
func (m NoReturnRateValuationDatesRepeatingGroup) Get(i int) NoReturnRateValuationDates {
	return NoReturnRateValuationDates{m.RepeatingGroup.Get(i)}
}

// NoReturnRateValuationDateBusinessCenters is a repeating group element, Tag 42770.
type NoReturnRateValuationDateBusinessCenters struct {
	*quickfix.Group
}

// SetReturnRateValuationDateBusinessCenter sets ReturnRateValuationDateBusinessCenter, Tag 42771.
func (m NoReturnRateValuationDateBusinessCenters) SetReturnRateValuationDateBusinessCenter(v string) {
	m.Set(field.NewReturnRateValuationDateBusinessCenter(v))
}

// GetReturnRateValuationDateBusinessCenter gets ReturnRateValuationDateBusinessCenter, Tag 42771.
func (m NoReturnRateValuationDateBusinessCenters) GetReturnRateValuationDateBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.ReturnRateValuationDateBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasReturnRateValuationDateBusinessCenter returns true if ReturnRateValuationDateBusinessCenter is present, Tag 42771.
func (m NoReturnRateValuationDateBusinessCenters) HasReturnRateValuationDateBusinessCenter() bool {
	return m.Has(tag.ReturnRateValuationDateBusinessCenter)
}

// NoReturnRateValuationDateBusinessCentersRepeatingGroup is a repeating group, Tag 42770.
type NoReturnRateValuationDateBusinessCentersRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoReturnRateValuationDateBusinessCentersRepeatingGroup returns an initialized, NoReturnRateValuationDateBusinessCentersRepeatingGroup.
func NewNoReturnRateValuationDateBusinessCentersRepeatingGroup() NoReturnRateValuationDateBusinessCentersRepeatingGroup {
	return NoReturnRateValuationDateBusinessCentersRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoReturnRateValuationDateBusinessCenters,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.ReturnRateValuationDateBusinessCenter),
			},
		),
	}
}

// Add create and append a new NoReturnRateValuationDateBusinessCenters to this group.
func (m NoReturnRateValuationDateBusinessCentersRepeatingGroup) Add() NoReturnRateValuationDateBusinessCenters {
	g := m.RepeatingGroup.Add()
	return NoReturnRateValuationDateBusinessCenters{g}
}

// Get returns the ith NoReturnRateValuationDateBusinessCenters in the NoReturnRateValuationDateBusinessCentersRepeatinGroup.
func (m NoReturnRateValuationDateBusinessCentersRepeatingGroup) Get(i int) NoReturnRateValuationDateBusinessCenters {
	return NoReturnRateValuationDateBusinessCenters{m.RepeatingGroup.Get(i)}
}

// NoReturnRateDatesRepeatingGroup is a repeating group, Tag 42709.
type NoReturnRateDatesRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoReturnRateDatesRepeatingGroup returns an initialized, NoReturnRateDatesRepeatingGroup.
func NewNoReturnRateDatesRepeatingGroup() NoReturnRateDatesRepeatingGroup {
	return NoReturnRateDatesRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoReturnRateDates,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.ReturnRateDateMode),
				NewNoReturnRateValuationDatesRepeatingGroup(),
				quickfix.GroupElement(tag.ReturnRateValuationDateRelativeTo),
				quickfix.GroupElement(tag.ReturnRateValuationDateOffsetPeriod),
				quickfix.GroupElement(tag.ReturnRateValuationDateOffsetUnit),
				quickfix.GroupElement(tag.ReturnRateValuationDateOffsetDayType),
				quickfix.GroupElement(tag.ReturnRateValuationStartDateUnadjusted),
				quickfix.GroupElement(tag.ReturnRateValuationStartDateRelativeTo),
				quickfix.GroupElement(tag.ReturnRateValuationStartDateOffsetPeriod),
				quickfix.GroupElement(tag.ReturnRateValuationStartDateOffsetUnit),
				quickfix.GroupElement(tag.ReturnRateValuationStartDateOffsetDayType),
				quickfix.GroupElement(tag.ReturnRateValuationStartDateAdjusted),
				quickfix.GroupElement(tag.ReturnRateValuationEndDateUnadjusted),
				quickfix.GroupElement(tag.ReturnRateValuationEndDateRelativeTo),
				quickfix.GroupElement(tag.ReturnRateValuationEndDateOffsetPeriod),
				quickfix.GroupElement(tag.ReturnRateValuationEndDateOffsetUnit),
				quickfix.GroupElement(tag.ReturnRateValuationEndDateOffsetDayType),
				quickfix.GroupElement(tag.ReturnRateValuationEndDateAdjusted),
				quickfix.GroupElement(tag.ReturnRateValuationFrequencyPeriod),
				quickfix.GroupElement(tag.ReturnRateValuationFrequencyUnit),
				quickfix.GroupElement(tag.ReturnRateValuationFrequencyRollConvention),
				quickfix.GroupElement(tag.ReturnRateValuationDateBusinessDayConvention),
				NewNoReturnRateValuationDateBusinessCentersRepeatingGroup(),
			},
		),
	}
}

// Add create and append a new NoReturnRateDates to this group.
func (m NoReturnRateDatesRepeatingGroup) Add() NoReturnRateDates {
	g := m.RepeatingGroup.Add()
	return NoReturnRateDates{g}
}

// Get returns the ith NoReturnRateDates in the NoReturnRateDatesRepeatinGroup.
func (m NoReturnRateDatesRepeatingGroup) Get(i int) NoReturnRateDates {
	return NoReturnRateDates{m.RepeatingGroup.Get(i)}
}

// NoReturnRatesRepeatingGroup is a repeating group, Tag 42735.
type NoReturnRatesRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoReturnRatesRepeatingGroup returns an initialized, NoReturnRatesRepeatingGroup.
func NewNoReturnRatesRepeatingGroup() NoReturnRatesRepeatingGroup {
	return NoReturnRatesRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoReturnRates,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.ReturnRatePriceSequence),
				quickfix.GroupElement(tag.ReturnRateCommissionBasis),
				quickfix.GroupElement(tag.ReturnRateCommissionAmount),
				quickfix.GroupElement(tag.ReturnRateCommissionCurrency),
				quickfix.GroupElement(tag.ReturnRateTotalCommissionPerTrade),
				quickfix.GroupElement(tag.ReturnRateDeterminationMethod),
				NewNoReturnRatePricesRepeatingGroup(),
				NewNoReturnRateFXConversionsRepeatingGroup(),
				quickfix.GroupElement(tag.ReturnRateAmountRelativeTo),
				quickfix.GroupElement(tag.ReturnRateQuoteMeasureType),
				quickfix.GroupElement(tag.ReturnRateQuoteUnits),
				quickfix.GroupElement(tag.ReturnRateQuoteMethod),
				quickfix.GroupElement(tag.ReturnRateQuoteCurrency),
				quickfix.GroupElement(tag.ReturnRateQuoteCurrencyType),
				quickfix.GroupElement(tag.ReturnRateQuoteTimeType),
				quickfix.GroupElement(tag.ReturnRateQuoteTime),
				quickfix.GroupElement(tag.ReturnRateQuoteDate),
				quickfix.GroupElement(tag.ReturnRateQuoteExpirationTime),
				quickfix.GroupElement(tag.ReturnRateQuoteBusinessCenter),
				quickfix.GroupElement(tag.ReturnRateQuoteExchange),
				NewNoReturnRateInformationSourcesRepeatingGroup(),
				quickfix.GroupElement(tag.ReturnRateQuotePricingModel),
				quickfix.GroupElement(tag.ReturnRateCashFlowType),
				NewNoReturnRateDatesRepeatingGroup(),
				quickfix.GroupElement(tag.ReturnRateValuationTimeType),
				quickfix.GroupElement(tag.ReturnRateValuationTime),
				quickfix.GroupElement(tag.ReturnRateValuationTimeBusinessCenter),
				quickfix.GroupElement(tag.ReturnRateValuationPriceOption),
				quickfix.GroupElement(tag.ReturnRateFinalPriceFallback),
			},
		),
	}
}

// Add create and append a new NoReturnRates to this group.
func (m NoReturnRatesRepeatingGroup) Add() NoReturnRates {
	g := m.RepeatingGroup.Add()
	return NoReturnRates{g}
}

// Get returns the ith NoReturnRates in the NoReturnRatesRepeatinGroup.
func (m NoReturnRatesRepeatingGroup) Get(i int) NoReturnRates {
	return NoReturnRates{m.RepeatingGroup.Get(i)}
}

// NoPaymentStreamNonDeliverableFixingDatesBusinessCenters is a repeating group element, Tag 40946.
type NoPaymentStreamNonDeliverableFixingDatesBusinessCenters struct {
	*quickfix.Group
}

// SetPaymentStreamNonDeliverableFixingDatesBusinessCenter sets PaymentStreamNonDeliverableFixingDatesBusinessCenter, Tag 40819.
func (m NoPaymentStreamNonDeliverableFixingDatesBusinessCenters) SetPaymentStreamNonDeliverableFixingDatesBusinessCenter(v string) {
	m.Set(field.NewPaymentStreamNonDeliverableFixingDatesBusinessCenter(v))
}

// GetPaymentStreamNonDeliverableFixingDatesBusinessCenter gets PaymentStreamNonDeliverableFixingDatesBusinessCenter, Tag 40819.
func (m NoPaymentStreamNonDeliverableFixingDatesBusinessCenters) GetPaymentStreamNonDeliverableFixingDatesBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStreamNonDeliverableFixingDatesBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasPaymentStreamNonDeliverableFixingDatesBusinessCenter returns true if PaymentStreamNonDeliverableFixingDatesBusinessCenter is present, Tag 40819.
func (m NoPaymentStreamNonDeliverableFixingDatesBusinessCenters) HasPaymentStreamNonDeliverableFixingDatesBusinessCenter() bool {
	return m.Has(tag.PaymentStreamNonDeliverableFixingDatesBusinessCenter)
}

// NoPaymentStreamNonDeliverableFixingDatesBusinessCentersRepeatingGroup is a repeating group, Tag 40946.
type NoPaymentStreamNonDeliverableFixingDatesBusinessCentersRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoPaymentStreamNonDeliverableFixingDatesBusinessCentersRepeatingGroup returns an initialized, NoPaymentStreamNonDeliverableFixingDatesBusinessCentersRepeatingGroup.
func NewNoPaymentStreamNonDeliverableFixingDatesBusinessCentersRepeatingGroup() NoPaymentStreamNonDeliverableFixingDatesBusinessCentersRepeatingGroup {
	return NoPaymentStreamNonDeliverableFixingDatesBusinessCentersRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoPaymentStreamNonDeliverableFixingDatesBusinessCenters,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.PaymentStreamNonDeliverableFixingDatesBusinessCenter),
			},
		),
	}
}

// Add create and append a new NoPaymentStreamNonDeliverableFixingDatesBusinessCenters to this group.
func (m NoPaymentStreamNonDeliverableFixingDatesBusinessCentersRepeatingGroup) Add() NoPaymentStreamNonDeliverableFixingDatesBusinessCenters {
	g := m.RepeatingGroup.Add()
	return NoPaymentStreamNonDeliverableFixingDatesBusinessCenters{g}
}

// Get returns the ith NoPaymentStreamNonDeliverableFixingDatesBusinessCenters in the NoPaymentStreamNonDeliverableFixingDatesBusinessCentersRepeatinGroup.
func (m NoPaymentStreamNonDeliverableFixingDatesBusinessCentersRepeatingGroup) Get(i int) NoPaymentStreamNonDeliverableFixingDatesBusinessCenters {
	return NoPaymentStreamNonDeliverableFixingDatesBusinessCenters{m.RepeatingGroup.Get(i)}
}

// NoNonDeliverableFixingDates is a repeating group element, Tag 40825.
type NoNonDeliverableFixingDates struct {
	*quickfix.Group
}

// SetNonDeliverableFixingDate sets NonDeliverableFixingDate, Tag 40826.
func (m NoNonDeliverableFixingDates) SetNonDeliverableFixingDate(v string) {
	m.Set(field.NewNonDeliverableFixingDate(v))
}

// SetNonDeliverableFixingDateType sets NonDeliverableFixingDateType, Tag 40827.
func (m NoNonDeliverableFixingDates) SetNonDeliverableFixingDateType(v enum.NonDeliverableFixingDateType) {
	m.Set(field.NewNonDeliverableFixingDateType(v))
}

// GetNonDeliverableFixingDate gets NonDeliverableFixingDate, Tag 40826.
func (m NoNonDeliverableFixingDates) GetNonDeliverableFixingDate() (v string, err quickfix.MessageRejectError) {
	var f field.NonDeliverableFixingDateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNonDeliverableFixingDateType gets NonDeliverableFixingDateType, Tag 40827.
func (m NoNonDeliverableFixingDates) GetNonDeliverableFixingDateType() (v enum.NonDeliverableFixingDateType, err quickfix.MessageRejectError) {
	var f field.NonDeliverableFixingDateTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasNonDeliverableFixingDate returns true if NonDeliverableFixingDate is present, Tag 40826.
func (m NoNonDeliverableFixingDates) HasNonDeliverableFixingDate() bool {
	return m.Has(tag.NonDeliverableFixingDate)
}

// HasNonDeliverableFixingDateType returns true if NonDeliverableFixingDateType is present, Tag 40827.
func (m NoNonDeliverableFixingDates) HasNonDeliverableFixingDateType() bool {
	return m.Has(tag.NonDeliverableFixingDateType)
}

// NoNonDeliverableFixingDatesRepeatingGroup is a repeating group, Tag 40825.
type NoNonDeliverableFixingDatesRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoNonDeliverableFixingDatesRepeatingGroup returns an initialized, NoNonDeliverableFixingDatesRepeatingGroup.
func NewNoNonDeliverableFixingDatesRepeatingGroup() NoNonDeliverableFixingDatesRepeatingGroup {
	return NoNonDeliverableFixingDatesRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoNonDeliverableFixingDates,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.NonDeliverableFixingDate),
				quickfix.GroupElement(tag.NonDeliverableFixingDateType),
			},
		),
	}
}

// Add create and append a new NoNonDeliverableFixingDates to this group.
func (m NoNonDeliverableFixingDatesRepeatingGroup) Add() NoNonDeliverableFixingDates {
	g := m.RepeatingGroup.Add()
	return NoNonDeliverableFixingDates{g}
}

// Get returns the ith NoNonDeliverableFixingDates in the NoNonDeliverableFixingDatesRepeatinGroup.
func (m NoNonDeliverableFixingDatesRepeatingGroup) Get(i int) NoNonDeliverableFixingDates {
	return NoNonDeliverableFixingDates{m.RepeatingGroup.Get(i)}
}

// NoSettlRateFallbacks is a repeating group element, Tag 40085.
type NoSettlRateFallbacks struct {
	*quickfix.Group
}

// SetSettlRatePostponementMaximumDays sets SettlRatePostponementMaximumDays, Tag 40086.
func (m NoSettlRateFallbacks) SetSettlRatePostponementMaximumDays(v int) {
	m.Set(field.NewSettlRatePostponementMaximumDays(v))
}

// SetSettlRateFallbackRateSource sets SettlRateFallbackRateSource, Tag 40373.
func (m NoSettlRateFallbacks) SetSettlRateFallbackRateSource(v int) {
	m.Set(field.NewSettlRateFallbackRateSource(v))
}

// SetSettlRateFallbackReferencePage sets SettlRateFallbackReferencePage, Tag 40655.
func (m NoSettlRateFallbacks) SetSettlRateFallbackReferencePage(v string) {
	m.Set(field.NewSettlRateFallbackReferencePage(v))
}

// SetSettlRatePostponementSurvey sets SettlRatePostponementSurvey, Tag 40088.
func (m NoSettlRateFallbacks) SetSettlRatePostponementSurvey(v bool) {
	m.Set(field.NewSettlRatePostponementSurvey(v))
}

// SetSettlRatePostponementCalculationAgent sets SettlRatePostponementCalculationAgent, Tag 40089.
func (m NoSettlRateFallbacks) SetSettlRatePostponementCalculationAgent(v int) {
	m.Set(field.NewSettlRatePostponementCalculationAgent(v))
}

// GetSettlRatePostponementMaximumDays gets SettlRatePostponementMaximumDays, Tag 40086.
func (m NoSettlRateFallbacks) GetSettlRatePostponementMaximumDays() (v int, err quickfix.MessageRejectError) {
	var f field.SettlRatePostponementMaximumDaysField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetSettlRateFallbackRateSource gets SettlRateFallbackRateSource, Tag 40373.
func (m NoSettlRateFallbacks) GetSettlRateFallbackRateSource() (v int, err quickfix.MessageRejectError) {
	var f field.SettlRateFallbackRateSourceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetSettlRateFallbackReferencePage gets SettlRateFallbackReferencePage, Tag 40655.
func (m NoSettlRateFallbacks) GetSettlRateFallbackReferencePage() (v string, err quickfix.MessageRejectError) {
	var f field.SettlRateFallbackReferencePageField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetSettlRatePostponementSurvey gets SettlRatePostponementSurvey, Tag 40088.
func (m NoSettlRateFallbacks) GetSettlRatePostponementSurvey() (v bool, err quickfix.MessageRejectError) {
	var f field.SettlRatePostponementSurveyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetSettlRatePostponementCalculationAgent gets SettlRatePostponementCalculationAgent, Tag 40089.
func (m NoSettlRateFallbacks) GetSettlRatePostponementCalculationAgent() (v int, err quickfix.MessageRejectError) {
	var f field.SettlRatePostponementCalculationAgentField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasSettlRatePostponementMaximumDays returns true if SettlRatePostponementMaximumDays is present, Tag 40086.
func (m NoSettlRateFallbacks) HasSettlRatePostponementMaximumDays() bool {
	return m.Has(tag.SettlRatePostponementMaximumDays)
}

// HasSettlRateFallbackRateSource returns true if SettlRateFallbackRateSource is present, Tag 40373.
func (m NoSettlRateFallbacks) HasSettlRateFallbackRateSource() bool {
	return m.Has(tag.SettlRateFallbackRateSource)
}

// HasSettlRateFallbackReferencePage returns true if SettlRateFallbackReferencePage is present, Tag 40655.
func (m NoSettlRateFallbacks) HasSettlRateFallbackReferencePage() bool {
	return m.Has(tag.SettlRateFallbackReferencePage)
}

// HasSettlRatePostponementSurvey returns true if SettlRatePostponementSurvey is present, Tag 40088.
func (m NoSettlRateFallbacks) HasSettlRatePostponementSurvey() bool {
	return m.Has(tag.SettlRatePostponementSurvey)
}

// HasSettlRatePostponementCalculationAgent returns true if SettlRatePostponementCalculationAgent is present, Tag 40089.
func (m NoSettlRateFallbacks) HasSettlRatePostponementCalculationAgent() bool {
	return m.Has(tag.SettlRatePostponementCalculationAgent)
}

// NoSettlRateFallbacksRepeatingGroup is a repeating group, Tag 40085.
type NoSettlRateFallbacksRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoSettlRateFallbacksRepeatingGroup returns an initialized, NoSettlRateFallbacksRepeatingGroup.
func NewNoSettlRateFallbacksRepeatingGroup() NoSettlRateFallbacksRepeatingGroup {
	return NoSettlRateFallbacksRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoSettlRateFallbacks,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.SettlRatePostponementMaximumDays),
				quickfix.GroupElement(tag.SettlRateFallbackRateSource),
				quickfix.GroupElement(tag.SettlRateFallbackReferencePage),
				quickfix.GroupElement(tag.SettlRatePostponementSurvey),
				quickfix.GroupElement(tag.SettlRatePostponementCalculationAgent),
			},
		),
	}
}

// Add create and append a new NoSettlRateFallbacks to this group.
func (m NoSettlRateFallbacksRepeatingGroup) Add() NoSettlRateFallbacks {
	g := m.RepeatingGroup.Add()
	return NoSettlRateFallbacks{g}
}

// Get returns the ith NoSettlRateFallbacks in the NoSettlRateFallbacksRepeatinGroup.
func (m NoSettlRateFallbacksRepeatingGroup) Get(i int) NoSettlRateFallbacks {
	return NoSettlRateFallbacks{m.RepeatingGroup.Get(i)}
}

// NoPaymentStreamCompoundingDatesBusinessCenters is a repeating group element, Tag 42620.
type NoPaymentStreamCompoundingDatesBusinessCenters struct {
	*quickfix.Group
}

// SetPaymentStreamCompoundingDatesBusinessCenter sets PaymentStreamCompoundingDatesBusinessCenter, Tag 42621.
func (m NoPaymentStreamCompoundingDatesBusinessCenters) SetPaymentStreamCompoundingDatesBusinessCenter(v string) {
	m.Set(field.NewPaymentStreamCompoundingDatesBusinessCenter(v))
}

// GetPaymentStreamCompoundingDatesBusinessCenter gets PaymentStreamCompoundingDatesBusinessCenter, Tag 42621.
func (m NoPaymentStreamCompoundingDatesBusinessCenters) GetPaymentStreamCompoundingDatesBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStreamCompoundingDatesBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasPaymentStreamCompoundingDatesBusinessCenter returns true if PaymentStreamCompoundingDatesBusinessCenter is present, Tag 42621.
func (m NoPaymentStreamCompoundingDatesBusinessCenters) HasPaymentStreamCompoundingDatesBusinessCenter() bool {
	return m.Has(tag.PaymentStreamCompoundingDatesBusinessCenter)
}

// NoPaymentStreamCompoundingDatesBusinessCentersRepeatingGroup is a repeating group, Tag 42620.
type NoPaymentStreamCompoundingDatesBusinessCentersRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoPaymentStreamCompoundingDatesBusinessCentersRepeatingGroup returns an initialized, NoPaymentStreamCompoundingDatesBusinessCentersRepeatingGroup.
func NewNoPaymentStreamCompoundingDatesBusinessCentersRepeatingGroup() NoPaymentStreamCompoundingDatesBusinessCentersRepeatingGroup {
	return NoPaymentStreamCompoundingDatesBusinessCentersRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoPaymentStreamCompoundingDatesBusinessCenters,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.PaymentStreamCompoundingDatesBusinessCenter),
			},
		),
	}
}

// Add create and append a new NoPaymentStreamCompoundingDatesBusinessCenters to this group.
func (m NoPaymentStreamCompoundingDatesBusinessCentersRepeatingGroup) Add() NoPaymentStreamCompoundingDatesBusinessCenters {
	g := m.RepeatingGroup.Add()
	return NoPaymentStreamCompoundingDatesBusinessCenters{g}
}

// Get returns the ith NoPaymentStreamCompoundingDatesBusinessCenters in the NoPaymentStreamCompoundingDatesBusinessCentersRepeatinGroup.
func (m NoPaymentStreamCompoundingDatesBusinessCentersRepeatingGroup) Get(i int) NoPaymentStreamCompoundingDatesBusinessCenters {
	return NoPaymentStreamCompoundingDatesBusinessCenters{m.RepeatingGroup.Get(i)}
}

// NoPaymentStreamCompoundingDates is a repeating group element, Tag 42606.
type NoPaymentStreamCompoundingDates struct {
	*quickfix.Group
}

// SetPaymentStreamCompoundingDate sets PaymentStreamCompoundingDate, Tag 42607.
func (m NoPaymentStreamCompoundingDates) SetPaymentStreamCompoundingDate(v string) {
	m.Set(field.NewPaymentStreamCompoundingDate(v))
}

// SetPaymentStreamCompoundingDateType sets PaymentStreamCompoundingDateType, Tag 42608.
func (m NoPaymentStreamCompoundingDates) SetPaymentStreamCompoundingDateType(v int) {
	m.Set(field.NewPaymentStreamCompoundingDateType(v))
}

// GetPaymentStreamCompoundingDate gets PaymentStreamCompoundingDate, Tag 42607.
func (m NoPaymentStreamCompoundingDates) GetPaymentStreamCompoundingDate() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStreamCompoundingDateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStreamCompoundingDateType gets PaymentStreamCompoundingDateType, Tag 42608.
func (m NoPaymentStreamCompoundingDates) GetPaymentStreamCompoundingDateType() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStreamCompoundingDateTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasPaymentStreamCompoundingDate returns true if PaymentStreamCompoundingDate is present, Tag 42607.
func (m NoPaymentStreamCompoundingDates) HasPaymentStreamCompoundingDate() bool {
	return m.Has(tag.PaymentStreamCompoundingDate)
}

// HasPaymentStreamCompoundingDateType returns true if PaymentStreamCompoundingDateType is present, Tag 42608.
func (m NoPaymentStreamCompoundingDates) HasPaymentStreamCompoundingDateType() bool {
	return m.Has(tag.PaymentStreamCompoundingDateType)
}

// NoPaymentStreamCompoundingDatesRepeatingGroup is a repeating group, Tag 42606.
type NoPaymentStreamCompoundingDatesRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoPaymentStreamCompoundingDatesRepeatingGroup returns an initialized, NoPaymentStreamCompoundingDatesRepeatingGroup.
func NewNoPaymentStreamCompoundingDatesRepeatingGroup() NoPaymentStreamCompoundingDatesRepeatingGroup {
	return NoPaymentStreamCompoundingDatesRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoPaymentStreamCompoundingDates,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.PaymentStreamCompoundingDate),
				quickfix.GroupElement(tag.PaymentStreamCompoundingDateType),
			},
		),
	}
}

// Add create and append a new NoPaymentStreamCompoundingDates to this group.
func (m NoPaymentStreamCompoundingDatesRepeatingGroup) Add() NoPaymentStreamCompoundingDates {
	g := m.RepeatingGroup.Add()
	return NoPaymentStreamCompoundingDates{g}
}

// Get returns the ith NoPaymentStreamCompoundingDates in the NoPaymentStreamCompoundingDatesRepeatinGroup.
func (m NoPaymentStreamCompoundingDatesRepeatingGroup) Get(i int) NoPaymentStreamCompoundingDates {
	return NoPaymentStreamCompoundingDates{m.RepeatingGroup.Get(i)}
}

// NoPaymentSchedules is a repeating group element, Tag 40828.
type NoPaymentSchedules struct {
	*quickfix.Group
}

// SetPaymentScheduleType sets PaymentScheduleType, Tag 40829.
func (m NoPaymentSchedules) SetPaymentScheduleType(v enum.PaymentScheduleType) {
	m.Set(field.NewPaymentScheduleType(v))
}

// SetPaymentScheduleStubType sets PaymentScheduleStubType, Tag 40830.
func (m NoPaymentSchedules) SetPaymentScheduleStubType(v int) {
	m.Set(field.NewPaymentScheduleStubType(v))
}

// SetPaymentScheduleStartDateUnadjusted sets PaymentScheduleStartDateUnadjusted, Tag 40831.
func (m NoPaymentSchedules) SetPaymentScheduleStartDateUnadjusted(v string) {
	m.Set(field.NewPaymentScheduleStartDateUnadjusted(v))
}

// SetPaymentScheduleEndDateUnadjusted sets PaymentScheduleEndDateUnadjusted, Tag 40832.
func (m NoPaymentSchedules) SetPaymentScheduleEndDateUnadjusted(v string) {
	m.Set(field.NewPaymentScheduleEndDateUnadjusted(v))
}

// SetPaymentSchedulePaySide sets PaymentSchedulePaySide, Tag 40833.
func (m NoPaymentSchedules) SetPaymentSchedulePaySide(v int) {
	m.Set(field.NewPaymentSchedulePaySide(v))
}

// SetPaymentScheduleReceiveSide sets PaymentScheduleReceiveSide, Tag 40834.
func (m NoPaymentSchedules) SetPaymentScheduleReceiveSide(v int) {
	m.Set(field.NewPaymentScheduleReceiveSide(v))
}

// SetPaymentScheduleNotional sets PaymentScheduleNotional, Tag 40835.
func (m NoPaymentSchedules) SetPaymentScheduleNotional(value decimal.Decimal, scale int32) {
	m.Set(field.NewPaymentScheduleNotional(value, scale))
}

// SetPaymentScheduleCurrency sets PaymentScheduleCurrency, Tag 40836.
func (m NoPaymentSchedules) SetPaymentScheduleCurrency(v string) {
	m.Set(field.NewPaymentScheduleCurrency(v))
}

// SetPaymentScheduleRate sets PaymentScheduleRate, Tag 40837.
func (m NoPaymentSchedules) SetPaymentScheduleRate(value decimal.Decimal, scale int32) {
	m.Set(field.NewPaymentScheduleRate(value, scale))
}

// SetPaymentScheduleRateMultiplier sets PaymentScheduleRateMultiplier, Tag 40838.
func (m NoPaymentSchedules) SetPaymentScheduleRateMultiplier(value decimal.Decimal, scale int32) {
	m.Set(field.NewPaymentScheduleRateMultiplier(value, scale))
}

// SetPaymentScheduleRateSpread sets PaymentScheduleRateSpread, Tag 40839.
func (m NoPaymentSchedules) SetPaymentScheduleRateSpread(value decimal.Decimal, scale int32) {
	m.Set(field.NewPaymentScheduleRateSpread(value, scale))
}

// SetPaymentScheduleRateSpreadPositionType sets PaymentScheduleRateSpreadPositionType, Tag 40840.
func (m NoPaymentSchedules) SetPaymentScheduleRateSpreadPositionType(v int) {
	m.Set(field.NewPaymentScheduleRateSpreadPositionType(v))
}

// SetPaymentScheduleRateTreatment sets PaymentScheduleRateTreatment, Tag 40841.
func (m NoPaymentSchedules) SetPaymentScheduleRateTreatment(v int) {
	m.Set(field.NewPaymentScheduleRateTreatment(v))
}

// SetPaymentScheduleFixedAmount sets PaymentScheduleFixedAmount, Tag 40842.
func (m NoPaymentSchedules) SetPaymentScheduleFixedAmount(value decimal.Decimal, scale int32) {
	m.Set(field.NewPaymentScheduleFixedAmount(value, scale))
}

// SetPaymentScheduleFixedCurrency sets PaymentScheduleFixedCurrency, Tag 40843.
func (m NoPaymentSchedules) SetPaymentScheduleFixedCurrency(v string) {
	m.Set(field.NewPaymentScheduleFixedCurrency(v))
}

// SetPaymentScheduleStepFrequencyPeriod sets PaymentScheduleStepFrequencyPeriod, Tag 40844.
func (m NoPaymentSchedules) SetPaymentScheduleStepFrequencyPeriod(v int) {
	m.Set(field.NewPaymentScheduleStepFrequencyPeriod(v))
}

// SetPaymentScheduleStepFrequencyUnit sets PaymentScheduleStepFrequencyUnit, Tag 40845.
func (m NoPaymentSchedules) SetPaymentScheduleStepFrequencyUnit(v string) {
	m.Set(field.NewPaymentScheduleStepFrequencyUnit(v))
}

// SetPaymentScheduleStepOffsetValue sets PaymentScheduleStepOffsetValue, Tag 40846.
func (m NoPaymentSchedules) SetPaymentScheduleStepOffsetValue(value decimal.Decimal, scale int32) {
	m.Set(field.NewPaymentScheduleStepOffsetValue(value, scale))
}

// SetPaymentScheduleStepRate sets PaymentScheduleStepRate, Tag 40847.
func (m NoPaymentSchedules) SetPaymentScheduleStepRate(value decimal.Decimal, scale int32) {
	m.Set(field.NewPaymentScheduleStepRate(value, scale))
}

// SetPaymentScheduleStepOffsetRate sets PaymentScheduleStepOffsetRate, Tag 40848.
func (m NoPaymentSchedules) SetPaymentScheduleStepOffsetRate(value decimal.Decimal, scale int32) {
	m.Set(field.NewPaymentScheduleStepOffsetRate(value, scale))
}

// SetPaymentScheduleStepRelativeTo sets PaymentScheduleStepRelativeTo, Tag 40849.
func (m NoPaymentSchedules) SetPaymentScheduleStepRelativeTo(v enum.PaymentScheduleStepRelativeTo) {
	m.Set(field.NewPaymentScheduleStepRelativeTo(v))
}

// SetNoPaymentScheduleRateSources sets NoPaymentScheduleRateSources, Tag 40868.
func (m NoPaymentSchedules) SetNoPaymentScheduleRateSources(f NoPaymentScheduleRateSourcesRepeatingGroup) {
	m.SetGroup(f)
}

// SetPaymentScheduleFixingDateUnadjusted sets PaymentScheduleFixingDateUnadjusted, Tag 40850.
func (m NoPaymentSchedules) SetPaymentScheduleFixingDateUnadjusted(v string) {
	m.Set(field.NewPaymentScheduleFixingDateUnadjusted(v))
}

// SetPaymentScheduleWeight sets PaymentScheduleWeight, Tag 40851.
func (m NoPaymentSchedules) SetPaymentScheduleWeight(value decimal.Decimal, scale int32) {
	m.Set(field.NewPaymentScheduleWeight(value, scale))
}

// SetPaymentScheduleFixingDateRelativeTo sets PaymentScheduleFixingDateRelativeTo, Tag 40852.
func (m NoPaymentSchedules) SetPaymentScheduleFixingDateRelativeTo(v int) {
	m.Set(field.NewPaymentScheduleFixingDateRelativeTo(v))
}

// SetPaymentScheduleFixingDateBusinessDayConvention sets PaymentScheduleFixingDateBusinessDayConvention, Tag 40853.
func (m NoPaymentSchedules) SetPaymentScheduleFixingDateBusinessDayConvention(v int) {
	m.Set(field.NewPaymentScheduleFixingDateBusinessDayConvention(v))
}

// SetNoPaymentScheduleFixingDateBusinessCenters sets NoPaymentScheduleFixingDateBusinessCenters, Tag 40977.
func (m NoPaymentSchedules) SetNoPaymentScheduleFixingDateBusinessCenters(f NoPaymentScheduleFixingDateBusinessCentersRepeatingGroup) {
	m.SetGroup(f)
}

// SetPaymentScheduleFixingDateOffsetPeriod sets PaymentScheduleFixingDateOffsetPeriod, Tag 40855.
func (m NoPaymentSchedules) SetPaymentScheduleFixingDateOffsetPeriod(v int) {
	m.Set(field.NewPaymentScheduleFixingDateOffsetPeriod(v))
}

// SetPaymentScheduleFixingDateOffsetUnit sets PaymentScheduleFixingDateOffsetUnit, Tag 40856.
func (m NoPaymentSchedules) SetPaymentScheduleFixingDateOffsetUnit(v string) {
	m.Set(field.NewPaymentScheduleFixingDateOffsetUnit(v))
}

// SetPaymentScheduleFixingDateOffsetDayType sets PaymentScheduleFixingDateOffsetDayType, Tag 40857.
func (m NoPaymentSchedules) SetPaymentScheduleFixingDateOffsetDayType(v int) {
	m.Set(field.NewPaymentScheduleFixingDateOffsetDayType(v))
}

// SetPaymentScheduleFixingDateAdjusted sets PaymentScheduleFixingDateAdjusted, Tag 40858.
func (m NoPaymentSchedules) SetPaymentScheduleFixingDateAdjusted(v string) {
	m.Set(field.NewPaymentScheduleFixingDateAdjusted(v))
}

// SetPaymentScheduleFixingTime sets PaymentScheduleFixingTime, Tag 40859.
func (m NoPaymentSchedules) SetPaymentScheduleFixingTime(v string) {
	m.Set(field.NewPaymentScheduleFixingTime(v))
}

// SetPaymentScheduleFixingTimeBusinessCenter sets PaymentScheduleFixingTimeBusinessCenter, Tag 40860.
func (m NoPaymentSchedules) SetPaymentScheduleFixingTimeBusinessCenter(v string) {
	m.Set(field.NewPaymentScheduleFixingTimeBusinessCenter(v))
}

// SetPaymentScheduleInterimExchangePaymentDateRelativeTo sets PaymentScheduleInterimExchangePaymentDateRelativeTo, Tag 40861.
func (m NoPaymentSchedules) SetPaymentScheduleInterimExchangePaymentDateRelativeTo(v int) {
	m.Set(field.NewPaymentScheduleInterimExchangePaymentDateRelativeTo(v))
}

// SetPaymentScheduleInterimExchangeDatesBusinessDayConvention sets PaymentScheduleInterimExchangeDatesBusinessDayConvention, Tag 40862.
func (m NoPaymentSchedules) SetPaymentScheduleInterimExchangeDatesBusinessDayConvention(v int) {
	m.Set(field.NewPaymentScheduleInterimExchangeDatesBusinessDayConvention(v))
}

// SetNoPaymentScheduleInterimExchangeDateBusinessCenters sets NoPaymentScheduleInterimExchangeDateBusinessCenters, Tag 40945.
func (m NoPaymentSchedules) SetNoPaymentScheduleInterimExchangeDateBusinessCenters(f NoPaymentScheduleInterimExchangeDateBusinessCentersRepeatingGroup) {
	m.SetGroup(f)
}

// SetPaymentScheduleInterimExchangeDatesOffsetPeriod sets PaymentScheduleInterimExchangeDatesOffsetPeriod, Tag 40864.
func (m NoPaymentSchedules) SetPaymentScheduleInterimExchangeDatesOffsetPeriod(v int) {
	m.Set(field.NewPaymentScheduleInterimExchangeDatesOffsetPeriod(v))
}

// SetPaymentScheduleInterimExchangeDatesOffsetUnit sets PaymentScheduleInterimExchangeDatesOffsetUnit, Tag 40865.
func (m NoPaymentSchedules) SetPaymentScheduleInterimExchangeDatesOffsetUnit(v string) {
	m.Set(field.NewPaymentScheduleInterimExchangeDatesOffsetUnit(v))
}

// SetPaymentScheduleInterimExchangeDatesOffsetDayType sets PaymentScheduleInterimExchangeDatesOffsetDayType, Tag 40866.
func (m NoPaymentSchedules) SetPaymentScheduleInterimExchangeDatesOffsetDayType(v int) {
	m.Set(field.NewPaymentScheduleInterimExchangeDatesOffsetDayType(v))
}

// SetPaymentScheduleInterimExchangeDateAdjusted sets PaymentScheduleInterimExchangeDateAdjusted, Tag 40867.
func (m NoPaymentSchedules) SetPaymentScheduleInterimExchangeDateAdjusted(v string) {
	m.Set(field.NewPaymentScheduleInterimExchangeDateAdjusted(v))
}

// SetPaymentScheduleXID sets PaymentScheduleXID, Tag 41164.
func (m NoPaymentSchedules) SetPaymentScheduleXID(v string) {
	m.Set(field.NewPaymentScheduleXID(v))
}

// SetPaymentScheduleXIDRef sets PaymentScheduleXIDRef, Tag 41165.
func (m NoPaymentSchedules) SetPaymentScheduleXIDRef(v string) {
	m.Set(field.NewPaymentScheduleXIDRef(v))
}

// SetPaymentScheduleRateCurrency sets PaymentScheduleRateCurrency, Tag 41166.
func (m NoPaymentSchedules) SetPaymentScheduleRateCurrency(v string) {
	m.Set(field.NewPaymentScheduleRateCurrency(v))
}

// SetPaymentScheduleRateUnitOfMeasure sets PaymentScheduleRateUnitOfMeasure, Tag 41167.
func (m NoPaymentSchedules) SetPaymentScheduleRateUnitOfMeasure(v string) {
	m.Set(field.NewPaymentScheduleRateUnitOfMeasure(v))
}

// SetPaymentScheduleRateConversionFactor sets PaymentScheduleRateConversionFactor, Tag 41168.
func (m NoPaymentSchedules) SetPaymentScheduleRateConversionFactor(value decimal.Decimal, scale int32) {
	m.Set(field.NewPaymentScheduleRateConversionFactor(value, scale))
}

// SetPaymentScheduleRateSpreadType sets PaymentScheduleRateSpreadType, Tag 41169.
func (m NoPaymentSchedules) SetPaymentScheduleRateSpreadType(v int) {
	m.Set(field.NewPaymentScheduleRateSpreadType(v))
}

// SetPaymentScheduleSettlPeriodPrice sets PaymentScheduleSettlPeriodPrice, Tag 41170.
func (m NoPaymentSchedules) SetPaymentScheduleSettlPeriodPrice(value decimal.Decimal, scale int32) {
	m.Set(field.NewPaymentScheduleSettlPeriodPrice(value, scale))
}

// SetPaymentScheduleSettlPeriodPriceCurrency sets PaymentScheduleSettlPeriodPriceCurrency, Tag 41171.
func (m NoPaymentSchedules) SetPaymentScheduleSettlPeriodPriceCurrency(v string) {
	m.Set(field.NewPaymentScheduleSettlPeriodPriceCurrency(v))
}

// SetPaymentScheduleSettlPeriodPriceUnitOfMeasure sets PaymentScheduleSettlPeriodPriceUnitOfMeasure, Tag 41172.
func (m NoPaymentSchedules) SetPaymentScheduleSettlPeriodPriceUnitOfMeasure(v string) {
	m.Set(field.NewPaymentScheduleSettlPeriodPriceUnitOfMeasure(v))
}

// SetPaymentScheduleStepUnitOfMeasure sets PaymentScheduleStepUnitOfMeasure, Tag 41173.
func (m NoPaymentSchedules) SetPaymentScheduleStepUnitOfMeasure(v string) {
	m.Set(field.NewPaymentScheduleStepUnitOfMeasure(v))
}

// SetPaymentScheduleFixingDayDistribution sets PaymentScheduleFixingDayDistribution, Tag 41174.
func (m NoPaymentSchedules) SetPaymentScheduleFixingDayDistribution(v int) {
	m.Set(field.NewPaymentScheduleFixingDayDistribution(v))
}

// SetPaymentScheduleFixingDayCount sets PaymentScheduleFixingDayCount, Tag 41175.
func (m NoPaymentSchedules) SetPaymentScheduleFixingDayCount(v int) {
	m.Set(field.NewPaymentScheduleFixingDayCount(v))
}

// SetNoPaymentScheduleFixingDays sets NoPaymentScheduleFixingDays, Tag 41161.
func (m NoPaymentSchedules) SetNoPaymentScheduleFixingDays(f NoPaymentScheduleFixingDaysRepeatingGroup) {
	m.SetGroup(f)
}

// SetPaymentScheduleFixingLagPeriod sets PaymentScheduleFixingLagPeriod, Tag 41176.
func (m NoPaymentSchedules) SetPaymentScheduleFixingLagPeriod(v int) {
	m.Set(field.NewPaymentScheduleFixingLagPeriod(v))
}

// SetPaymentScheduleFixingLagUnit sets PaymentScheduleFixingLagUnit, Tag 41177.
func (m NoPaymentSchedules) SetPaymentScheduleFixingLagUnit(v string) {
	m.Set(field.NewPaymentScheduleFixingLagUnit(v))
}

// SetPaymentScheduleFixingFirstObservationDateOffsetPeriod sets PaymentScheduleFixingFirstObservationDateOffsetPeriod, Tag 41178.
func (m NoPaymentSchedules) SetPaymentScheduleFixingFirstObservationDateOffsetPeriod(v int) {
	m.Set(field.NewPaymentScheduleFixingFirstObservationDateOffsetPeriod(v))
}

// SetPaymentScheduleFixingFirstObservationDateOffsetUnit sets PaymentScheduleFixingFirstObservationDateOffsetUnit, Tag 41179.
func (m NoPaymentSchedules) SetPaymentScheduleFixingFirstObservationDateOffsetUnit(v string) {
	m.Set(field.NewPaymentScheduleFixingFirstObservationDateOffsetUnit(v))
}

// GetPaymentScheduleType gets PaymentScheduleType, Tag 40829.
func (m NoPaymentSchedules) GetPaymentScheduleType() (v enum.PaymentScheduleType, err quickfix.MessageRejectError) {
	var f field.PaymentScheduleTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentScheduleStubType gets PaymentScheduleStubType, Tag 40830.
func (m NoPaymentSchedules) GetPaymentScheduleStubType() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentScheduleStubTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentScheduleStartDateUnadjusted gets PaymentScheduleStartDateUnadjusted, Tag 40831.
func (m NoPaymentSchedules) GetPaymentScheduleStartDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentScheduleStartDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentScheduleEndDateUnadjusted gets PaymentScheduleEndDateUnadjusted, Tag 40832.
func (m NoPaymentSchedules) GetPaymentScheduleEndDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentScheduleEndDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentSchedulePaySide gets PaymentSchedulePaySide, Tag 40833.
func (m NoPaymentSchedules) GetPaymentSchedulePaySide() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentSchedulePaySideField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentScheduleReceiveSide gets PaymentScheduleReceiveSide, Tag 40834.
func (m NoPaymentSchedules) GetPaymentScheduleReceiveSide() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentScheduleReceiveSideField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentScheduleNotional gets PaymentScheduleNotional, Tag 40835.
func (m NoPaymentSchedules) GetPaymentScheduleNotional() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.PaymentScheduleNotionalField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentScheduleCurrency gets PaymentScheduleCurrency, Tag 40836.
func (m NoPaymentSchedules) GetPaymentScheduleCurrency() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentScheduleCurrencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentScheduleRate gets PaymentScheduleRate, Tag 40837.
func (m NoPaymentSchedules) GetPaymentScheduleRate() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.PaymentScheduleRateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentScheduleRateMultiplier gets PaymentScheduleRateMultiplier, Tag 40838.
func (m NoPaymentSchedules) GetPaymentScheduleRateMultiplier() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.PaymentScheduleRateMultiplierField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentScheduleRateSpread gets PaymentScheduleRateSpread, Tag 40839.
func (m NoPaymentSchedules) GetPaymentScheduleRateSpread() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.PaymentScheduleRateSpreadField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentScheduleRateSpreadPositionType gets PaymentScheduleRateSpreadPositionType, Tag 40840.
func (m NoPaymentSchedules) GetPaymentScheduleRateSpreadPositionType() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentScheduleRateSpreadPositionTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentScheduleRateTreatment gets PaymentScheduleRateTreatment, Tag 40841.
func (m NoPaymentSchedules) GetPaymentScheduleRateTreatment() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentScheduleRateTreatmentField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentScheduleFixedAmount gets PaymentScheduleFixedAmount, Tag 40842.
func (m NoPaymentSchedules) GetPaymentScheduleFixedAmount() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.PaymentScheduleFixedAmountField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentScheduleFixedCurrency gets PaymentScheduleFixedCurrency, Tag 40843.
func (m NoPaymentSchedules) GetPaymentScheduleFixedCurrency() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentScheduleFixedCurrencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentScheduleStepFrequencyPeriod gets PaymentScheduleStepFrequencyPeriod, Tag 40844.
func (m NoPaymentSchedules) GetPaymentScheduleStepFrequencyPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentScheduleStepFrequencyPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentScheduleStepFrequencyUnit gets PaymentScheduleStepFrequencyUnit, Tag 40845.
func (m NoPaymentSchedules) GetPaymentScheduleStepFrequencyUnit() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentScheduleStepFrequencyUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentScheduleStepOffsetValue gets PaymentScheduleStepOffsetValue, Tag 40846.
func (m NoPaymentSchedules) GetPaymentScheduleStepOffsetValue() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.PaymentScheduleStepOffsetValueField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentScheduleStepRate gets PaymentScheduleStepRate, Tag 40847.
func (m NoPaymentSchedules) GetPaymentScheduleStepRate() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.PaymentScheduleStepRateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentScheduleStepOffsetRate gets PaymentScheduleStepOffsetRate, Tag 40848.
func (m NoPaymentSchedules) GetPaymentScheduleStepOffsetRate() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.PaymentScheduleStepOffsetRateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentScheduleStepRelativeTo gets PaymentScheduleStepRelativeTo, Tag 40849.
func (m NoPaymentSchedules) GetPaymentScheduleStepRelativeTo() (v enum.PaymentScheduleStepRelativeTo, err quickfix.MessageRejectError) {
	var f field.PaymentScheduleStepRelativeToField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoPaymentScheduleRateSources gets NoPaymentScheduleRateSources, Tag 40868.
func (m NoPaymentSchedules) GetNoPaymentScheduleRateSources() (NoPaymentScheduleRateSourcesRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoPaymentScheduleRateSourcesRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetPaymentScheduleFixingDateUnadjusted gets PaymentScheduleFixingDateUnadjusted, Tag 40850.
func (m NoPaymentSchedules) GetPaymentScheduleFixingDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentScheduleFixingDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentScheduleWeight gets PaymentScheduleWeight, Tag 40851.
func (m NoPaymentSchedules) GetPaymentScheduleWeight() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.PaymentScheduleWeightField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentScheduleFixingDateRelativeTo gets PaymentScheduleFixingDateRelativeTo, Tag 40852.
func (m NoPaymentSchedules) GetPaymentScheduleFixingDateRelativeTo() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentScheduleFixingDateRelativeToField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentScheduleFixingDateBusinessDayConvention gets PaymentScheduleFixingDateBusinessDayConvention, Tag 40853.
func (m NoPaymentSchedules) GetPaymentScheduleFixingDateBusinessDayConvention() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentScheduleFixingDateBusinessDayConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoPaymentScheduleFixingDateBusinessCenters gets NoPaymentScheduleFixingDateBusinessCenters, Tag 40977.
func (m NoPaymentSchedules) GetNoPaymentScheduleFixingDateBusinessCenters() (NoPaymentScheduleFixingDateBusinessCentersRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoPaymentScheduleFixingDateBusinessCentersRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetPaymentScheduleFixingDateOffsetPeriod gets PaymentScheduleFixingDateOffsetPeriod, Tag 40855.
func (m NoPaymentSchedules) GetPaymentScheduleFixingDateOffsetPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentScheduleFixingDateOffsetPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentScheduleFixingDateOffsetUnit gets PaymentScheduleFixingDateOffsetUnit, Tag 40856.
func (m NoPaymentSchedules) GetPaymentScheduleFixingDateOffsetUnit() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentScheduleFixingDateOffsetUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentScheduleFixingDateOffsetDayType gets PaymentScheduleFixingDateOffsetDayType, Tag 40857.
func (m NoPaymentSchedules) GetPaymentScheduleFixingDateOffsetDayType() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentScheduleFixingDateOffsetDayTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentScheduleFixingDateAdjusted gets PaymentScheduleFixingDateAdjusted, Tag 40858.
func (m NoPaymentSchedules) GetPaymentScheduleFixingDateAdjusted() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentScheduleFixingDateAdjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentScheduleFixingTime gets PaymentScheduleFixingTime, Tag 40859.
func (m NoPaymentSchedules) GetPaymentScheduleFixingTime() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentScheduleFixingTimeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentScheduleFixingTimeBusinessCenter gets PaymentScheduleFixingTimeBusinessCenter, Tag 40860.
func (m NoPaymentSchedules) GetPaymentScheduleFixingTimeBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentScheduleFixingTimeBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentScheduleInterimExchangePaymentDateRelativeTo gets PaymentScheduleInterimExchangePaymentDateRelativeTo, Tag 40861.
func (m NoPaymentSchedules) GetPaymentScheduleInterimExchangePaymentDateRelativeTo() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentScheduleInterimExchangePaymentDateRelativeToField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentScheduleInterimExchangeDatesBusinessDayConvention gets PaymentScheduleInterimExchangeDatesBusinessDayConvention, Tag 40862.
func (m NoPaymentSchedules) GetPaymentScheduleInterimExchangeDatesBusinessDayConvention() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentScheduleInterimExchangeDatesBusinessDayConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoPaymentScheduleInterimExchangeDateBusinessCenters gets NoPaymentScheduleInterimExchangeDateBusinessCenters, Tag 40945.
func (m NoPaymentSchedules) GetNoPaymentScheduleInterimExchangeDateBusinessCenters() (NoPaymentScheduleInterimExchangeDateBusinessCentersRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoPaymentScheduleInterimExchangeDateBusinessCentersRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetPaymentScheduleInterimExchangeDatesOffsetPeriod gets PaymentScheduleInterimExchangeDatesOffsetPeriod, Tag 40864.
func (m NoPaymentSchedules) GetPaymentScheduleInterimExchangeDatesOffsetPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentScheduleInterimExchangeDatesOffsetPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentScheduleInterimExchangeDatesOffsetUnit gets PaymentScheduleInterimExchangeDatesOffsetUnit, Tag 40865.
func (m NoPaymentSchedules) GetPaymentScheduleInterimExchangeDatesOffsetUnit() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentScheduleInterimExchangeDatesOffsetUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentScheduleInterimExchangeDatesOffsetDayType gets PaymentScheduleInterimExchangeDatesOffsetDayType, Tag 40866.
func (m NoPaymentSchedules) GetPaymentScheduleInterimExchangeDatesOffsetDayType() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentScheduleInterimExchangeDatesOffsetDayTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentScheduleInterimExchangeDateAdjusted gets PaymentScheduleInterimExchangeDateAdjusted, Tag 40867.
func (m NoPaymentSchedules) GetPaymentScheduleInterimExchangeDateAdjusted() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentScheduleInterimExchangeDateAdjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentScheduleXID gets PaymentScheduleXID, Tag 41164.
func (m NoPaymentSchedules) GetPaymentScheduleXID() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentScheduleXIDField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentScheduleXIDRef gets PaymentScheduleXIDRef, Tag 41165.
func (m NoPaymentSchedules) GetPaymentScheduleXIDRef() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentScheduleXIDRefField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentScheduleRateCurrency gets PaymentScheduleRateCurrency, Tag 41166.
func (m NoPaymentSchedules) GetPaymentScheduleRateCurrency() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentScheduleRateCurrencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentScheduleRateUnitOfMeasure gets PaymentScheduleRateUnitOfMeasure, Tag 41167.
func (m NoPaymentSchedules) GetPaymentScheduleRateUnitOfMeasure() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentScheduleRateUnitOfMeasureField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentScheduleRateConversionFactor gets PaymentScheduleRateConversionFactor, Tag 41168.
func (m NoPaymentSchedules) GetPaymentScheduleRateConversionFactor() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.PaymentScheduleRateConversionFactorField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentScheduleRateSpreadType gets PaymentScheduleRateSpreadType, Tag 41169.
func (m NoPaymentSchedules) GetPaymentScheduleRateSpreadType() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentScheduleRateSpreadTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentScheduleSettlPeriodPrice gets PaymentScheduleSettlPeriodPrice, Tag 41170.
func (m NoPaymentSchedules) GetPaymentScheduleSettlPeriodPrice() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.PaymentScheduleSettlPeriodPriceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentScheduleSettlPeriodPriceCurrency gets PaymentScheduleSettlPeriodPriceCurrency, Tag 41171.
func (m NoPaymentSchedules) GetPaymentScheduleSettlPeriodPriceCurrency() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentScheduleSettlPeriodPriceCurrencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentScheduleSettlPeriodPriceUnitOfMeasure gets PaymentScheduleSettlPeriodPriceUnitOfMeasure, Tag 41172.
func (m NoPaymentSchedules) GetPaymentScheduleSettlPeriodPriceUnitOfMeasure() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentScheduleSettlPeriodPriceUnitOfMeasureField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentScheduleStepUnitOfMeasure gets PaymentScheduleStepUnitOfMeasure, Tag 41173.
func (m NoPaymentSchedules) GetPaymentScheduleStepUnitOfMeasure() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentScheduleStepUnitOfMeasureField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentScheduleFixingDayDistribution gets PaymentScheduleFixingDayDistribution, Tag 41174.
func (m NoPaymentSchedules) GetPaymentScheduleFixingDayDistribution() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentScheduleFixingDayDistributionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentScheduleFixingDayCount gets PaymentScheduleFixingDayCount, Tag 41175.
func (m NoPaymentSchedules) GetPaymentScheduleFixingDayCount() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentScheduleFixingDayCountField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoPaymentScheduleFixingDays gets NoPaymentScheduleFixingDays, Tag 41161.
func (m NoPaymentSchedules) GetNoPaymentScheduleFixingDays() (NoPaymentScheduleFixingDaysRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoPaymentScheduleFixingDaysRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetPaymentScheduleFixingLagPeriod gets PaymentScheduleFixingLagPeriod, Tag 41176.
func (m NoPaymentSchedules) GetPaymentScheduleFixingLagPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentScheduleFixingLagPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentScheduleFixingLagUnit gets PaymentScheduleFixingLagUnit, Tag 41177.
func (m NoPaymentSchedules) GetPaymentScheduleFixingLagUnit() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentScheduleFixingLagUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentScheduleFixingFirstObservationDateOffsetPeriod gets PaymentScheduleFixingFirstObservationDateOffsetPeriod, Tag 41178.
func (m NoPaymentSchedules) GetPaymentScheduleFixingFirstObservationDateOffsetPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentScheduleFixingFirstObservationDateOffsetPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentScheduleFixingFirstObservationDateOffsetUnit gets PaymentScheduleFixingFirstObservationDateOffsetUnit, Tag 41179.
func (m NoPaymentSchedules) GetPaymentScheduleFixingFirstObservationDateOffsetUnit() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentScheduleFixingFirstObservationDateOffsetUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasPaymentScheduleType returns true if PaymentScheduleType is present, Tag 40829.
func (m NoPaymentSchedules) HasPaymentScheduleType() bool {
	return m.Has(tag.PaymentScheduleType)
}

// HasPaymentScheduleStubType returns true if PaymentScheduleStubType is present, Tag 40830.
func (m NoPaymentSchedules) HasPaymentScheduleStubType() bool {
	return m.Has(tag.PaymentScheduleStubType)
}

// HasPaymentScheduleStartDateUnadjusted returns true if PaymentScheduleStartDateUnadjusted is present, Tag 40831.
func (m NoPaymentSchedules) HasPaymentScheduleStartDateUnadjusted() bool {
	return m.Has(tag.PaymentScheduleStartDateUnadjusted)
}

// HasPaymentScheduleEndDateUnadjusted returns true if PaymentScheduleEndDateUnadjusted is present, Tag 40832.
func (m NoPaymentSchedules) HasPaymentScheduleEndDateUnadjusted() bool {
	return m.Has(tag.PaymentScheduleEndDateUnadjusted)
}

// HasPaymentSchedulePaySide returns true if PaymentSchedulePaySide is present, Tag 40833.
func (m NoPaymentSchedules) HasPaymentSchedulePaySide() bool {
	return m.Has(tag.PaymentSchedulePaySide)
}

// HasPaymentScheduleReceiveSide returns true if PaymentScheduleReceiveSide is present, Tag 40834.
func (m NoPaymentSchedules) HasPaymentScheduleReceiveSide() bool {
	return m.Has(tag.PaymentScheduleReceiveSide)
}

// HasPaymentScheduleNotional returns true if PaymentScheduleNotional is present, Tag 40835.
func (m NoPaymentSchedules) HasPaymentScheduleNotional() bool {
	return m.Has(tag.PaymentScheduleNotional)
}

// HasPaymentScheduleCurrency returns true if PaymentScheduleCurrency is present, Tag 40836.
func (m NoPaymentSchedules) HasPaymentScheduleCurrency() bool {
	return m.Has(tag.PaymentScheduleCurrency)
}

// HasPaymentScheduleRate returns true if PaymentScheduleRate is present, Tag 40837.
func (m NoPaymentSchedules) HasPaymentScheduleRate() bool {
	return m.Has(tag.PaymentScheduleRate)
}

// HasPaymentScheduleRateMultiplier returns true if PaymentScheduleRateMultiplier is present, Tag 40838.
func (m NoPaymentSchedules) HasPaymentScheduleRateMultiplier() bool {
	return m.Has(tag.PaymentScheduleRateMultiplier)
}

// HasPaymentScheduleRateSpread returns true if PaymentScheduleRateSpread is present, Tag 40839.
func (m NoPaymentSchedules) HasPaymentScheduleRateSpread() bool {
	return m.Has(tag.PaymentScheduleRateSpread)
}

// HasPaymentScheduleRateSpreadPositionType returns true if PaymentScheduleRateSpreadPositionType is present, Tag 40840.
func (m NoPaymentSchedules) HasPaymentScheduleRateSpreadPositionType() bool {
	return m.Has(tag.PaymentScheduleRateSpreadPositionType)
}

// HasPaymentScheduleRateTreatment returns true if PaymentScheduleRateTreatment is present, Tag 40841.
func (m NoPaymentSchedules) HasPaymentScheduleRateTreatment() bool {
	return m.Has(tag.PaymentScheduleRateTreatment)
}

// HasPaymentScheduleFixedAmount returns true if PaymentScheduleFixedAmount is present, Tag 40842.
func (m NoPaymentSchedules) HasPaymentScheduleFixedAmount() bool {
	return m.Has(tag.PaymentScheduleFixedAmount)
}

// HasPaymentScheduleFixedCurrency returns true if PaymentScheduleFixedCurrency is present, Tag 40843.
func (m NoPaymentSchedules) HasPaymentScheduleFixedCurrency() bool {
	return m.Has(tag.PaymentScheduleFixedCurrency)
}

// HasPaymentScheduleStepFrequencyPeriod returns true if PaymentScheduleStepFrequencyPeriod is present, Tag 40844.
func (m NoPaymentSchedules) HasPaymentScheduleStepFrequencyPeriod() bool {
	return m.Has(tag.PaymentScheduleStepFrequencyPeriod)
}

// HasPaymentScheduleStepFrequencyUnit returns true if PaymentScheduleStepFrequencyUnit is present, Tag 40845.
func (m NoPaymentSchedules) HasPaymentScheduleStepFrequencyUnit() bool {
	return m.Has(tag.PaymentScheduleStepFrequencyUnit)
}

// HasPaymentScheduleStepOffsetValue returns true if PaymentScheduleStepOffsetValue is present, Tag 40846.
func (m NoPaymentSchedules) HasPaymentScheduleStepOffsetValue() bool {
	return m.Has(tag.PaymentScheduleStepOffsetValue)
}

// HasPaymentScheduleStepRate returns true if PaymentScheduleStepRate is present, Tag 40847.
func (m NoPaymentSchedules) HasPaymentScheduleStepRate() bool {
	return m.Has(tag.PaymentScheduleStepRate)
}

// HasPaymentScheduleStepOffsetRate returns true if PaymentScheduleStepOffsetRate is present, Tag 40848.
func (m NoPaymentSchedules) HasPaymentScheduleStepOffsetRate() bool {
	return m.Has(tag.PaymentScheduleStepOffsetRate)
}

// HasPaymentScheduleStepRelativeTo returns true if PaymentScheduleStepRelativeTo is present, Tag 40849.
func (m NoPaymentSchedules) HasPaymentScheduleStepRelativeTo() bool {
	return m.Has(tag.PaymentScheduleStepRelativeTo)
}

// HasNoPaymentScheduleRateSources returns true if NoPaymentScheduleRateSources is present, Tag 40868.
func (m NoPaymentSchedules) HasNoPaymentScheduleRateSources() bool {
	return m.Has(tag.NoPaymentScheduleRateSources)
}

// HasPaymentScheduleFixingDateUnadjusted returns true if PaymentScheduleFixingDateUnadjusted is present, Tag 40850.
func (m NoPaymentSchedules) HasPaymentScheduleFixingDateUnadjusted() bool {
	return m.Has(tag.PaymentScheduleFixingDateUnadjusted)
}

// HasPaymentScheduleWeight returns true if PaymentScheduleWeight is present, Tag 40851.
func (m NoPaymentSchedules) HasPaymentScheduleWeight() bool {
	return m.Has(tag.PaymentScheduleWeight)
}

// HasPaymentScheduleFixingDateRelativeTo returns true if PaymentScheduleFixingDateRelativeTo is present, Tag 40852.
func (m NoPaymentSchedules) HasPaymentScheduleFixingDateRelativeTo() bool {
	return m.Has(tag.PaymentScheduleFixingDateRelativeTo)
}

// HasPaymentScheduleFixingDateBusinessDayConvention returns true if PaymentScheduleFixingDateBusinessDayConvention is present, Tag 40853.
func (m NoPaymentSchedules) HasPaymentScheduleFixingDateBusinessDayConvention() bool {
	return m.Has(tag.PaymentScheduleFixingDateBusinessDayConvention)
}

// HasNoPaymentScheduleFixingDateBusinessCenters returns true if NoPaymentScheduleFixingDateBusinessCenters is present, Tag 40977.
func (m NoPaymentSchedules) HasNoPaymentScheduleFixingDateBusinessCenters() bool {
	return m.Has(tag.NoPaymentScheduleFixingDateBusinessCenters)
}

// HasPaymentScheduleFixingDateOffsetPeriod returns true if PaymentScheduleFixingDateOffsetPeriod is present, Tag 40855.
func (m NoPaymentSchedules) HasPaymentScheduleFixingDateOffsetPeriod() bool {
	return m.Has(tag.PaymentScheduleFixingDateOffsetPeriod)
}

// HasPaymentScheduleFixingDateOffsetUnit returns true if PaymentScheduleFixingDateOffsetUnit is present, Tag 40856.
func (m NoPaymentSchedules) HasPaymentScheduleFixingDateOffsetUnit() bool {
	return m.Has(tag.PaymentScheduleFixingDateOffsetUnit)
}

// HasPaymentScheduleFixingDateOffsetDayType returns true if PaymentScheduleFixingDateOffsetDayType is present, Tag 40857.
func (m NoPaymentSchedules) HasPaymentScheduleFixingDateOffsetDayType() bool {
	return m.Has(tag.PaymentScheduleFixingDateOffsetDayType)
}

// HasPaymentScheduleFixingDateAdjusted returns true if PaymentScheduleFixingDateAdjusted is present, Tag 40858.
func (m NoPaymentSchedules) HasPaymentScheduleFixingDateAdjusted() bool {
	return m.Has(tag.PaymentScheduleFixingDateAdjusted)
}

// HasPaymentScheduleFixingTime returns true if PaymentScheduleFixingTime is present, Tag 40859.
func (m NoPaymentSchedules) HasPaymentScheduleFixingTime() bool {
	return m.Has(tag.PaymentScheduleFixingTime)
}

// HasPaymentScheduleFixingTimeBusinessCenter returns true if PaymentScheduleFixingTimeBusinessCenter is present, Tag 40860.
func (m NoPaymentSchedules) HasPaymentScheduleFixingTimeBusinessCenter() bool {
	return m.Has(tag.PaymentScheduleFixingTimeBusinessCenter)
}

// HasPaymentScheduleInterimExchangePaymentDateRelativeTo returns true if PaymentScheduleInterimExchangePaymentDateRelativeTo is present, Tag 40861.
func (m NoPaymentSchedules) HasPaymentScheduleInterimExchangePaymentDateRelativeTo() bool {
	return m.Has(tag.PaymentScheduleInterimExchangePaymentDateRelativeTo)
}

// HasPaymentScheduleInterimExchangeDatesBusinessDayConvention returns true if PaymentScheduleInterimExchangeDatesBusinessDayConvention is present, Tag 40862.
func (m NoPaymentSchedules) HasPaymentScheduleInterimExchangeDatesBusinessDayConvention() bool {
	return m.Has(tag.PaymentScheduleInterimExchangeDatesBusinessDayConvention)
}

// HasNoPaymentScheduleInterimExchangeDateBusinessCenters returns true if NoPaymentScheduleInterimExchangeDateBusinessCenters is present, Tag 40945.
func (m NoPaymentSchedules) HasNoPaymentScheduleInterimExchangeDateBusinessCenters() bool {
	return m.Has(tag.NoPaymentScheduleInterimExchangeDateBusinessCenters)
}

// HasPaymentScheduleInterimExchangeDatesOffsetPeriod returns true if PaymentScheduleInterimExchangeDatesOffsetPeriod is present, Tag 40864.
func (m NoPaymentSchedules) HasPaymentScheduleInterimExchangeDatesOffsetPeriod() bool {
	return m.Has(tag.PaymentScheduleInterimExchangeDatesOffsetPeriod)
}

// HasPaymentScheduleInterimExchangeDatesOffsetUnit returns true if PaymentScheduleInterimExchangeDatesOffsetUnit is present, Tag 40865.
func (m NoPaymentSchedules) HasPaymentScheduleInterimExchangeDatesOffsetUnit() bool {
	return m.Has(tag.PaymentScheduleInterimExchangeDatesOffsetUnit)
}

// HasPaymentScheduleInterimExchangeDatesOffsetDayType returns true if PaymentScheduleInterimExchangeDatesOffsetDayType is present, Tag 40866.
func (m NoPaymentSchedules) HasPaymentScheduleInterimExchangeDatesOffsetDayType() bool {
	return m.Has(tag.PaymentScheduleInterimExchangeDatesOffsetDayType)
}

// HasPaymentScheduleInterimExchangeDateAdjusted returns true if PaymentScheduleInterimExchangeDateAdjusted is present, Tag 40867.
func (m NoPaymentSchedules) HasPaymentScheduleInterimExchangeDateAdjusted() bool {
	return m.Has(tag.PaymentScheduleInterimExchangeDateAdjusted)
}

// HasPaymentScheduleXID returns true if PaymentScheduleXID is present, Tag 41164.
func (m NoPaymentSchedules) HasPaymentScheduleXID() bool {
	return m.Has(tag.PaymentScheduleXID)
}

// HasPaymentScheduleXIDRef returns true if PaymentScheduleXIDRef is present, Tag 41165.
func (m NoPaymentSchedules) HasPaymentScheduleXIDRef() bool {
	return m.Has(tag.PaymentScheduleXIDRef)
}

// HasPaymentScheduleRateCurrency returns true if PaymentScheduleRateCurrency is present, Tag 41166.
func (m NoPaymentSchedules) HasPaymentScheduleRateCurrency() bool {
	return m.Has(tag.PaymentScheduleRateCurrency)
}

// HasPaymentScheduleRateUnitOfMeasure returns true if PaymentScheduleRateUnitOfMeasure is present, Tag 41167.
func (m NoPaymentSchedules) HasPaymentScheduleRateUnitOfMeasure() bool {
	return m.Has(tag.PaymentScheduleRateUnitOfMeasure)
}

// HasPaymentScheduleRateConversionFactor returns true if PaymentScheduleRateConversionFactor is present, Tag 41168.
func (m NoPaymentSchedules) HasPaymentScheduleRateConversionFactor() bool {
	return m.Has(tag.PaymentScheduleRateConversionFactor)
}

// HasPaymentScheduleRateSpreadType returns true if PaymentScheduleRateSpreadType is present, Tag 41169.
func (m NoPaymentSchedules) HasPaymentScheduleRateSpreadType() bool {
	return m.Has(tag.PaymentScheduleRateSpreadType)
}

// HasPaymentScheduleSettlPeriodPrice returns true if PaymentScheduleSettlPeriodPrice is present, Tag 41170.
func (m NoPaymentSchedules) HasPaymentScheduleSettlPeriodPrice() bool {
	return m.Has(tag.PaymentScheduleSettlPeriodPrice)
}

// HasPaymentScheduleSettlPeriodPriceCurrency returns true if PaymentScheduleSettlPeriodPriceCurrency is present, Tag 41171.
func (m NoPaymentSchedules) HasPaymentScheduleSettlPeriodPriceCurrency() bool {
	return m.Has(tag.PaymentScheduleSettlPeriodPriceCurrency)
}

// HasPaymentScheduleSettlPeriodPriceUnitOfMeasure returns true if PaymentScheduleSettlPeriodPriceUnitOfMeasure is present, Tag 41172.
func (m NoPaymentSchedules) HasPaymentScheduleSettlPeriodPriceUnitOfMeasure() bool {
	return m.Has(tag.PaymentScheduleSettlPeriodPriceUnitOfMeasure)
}

// HasPaymentScheduleStepUnitOfMeasure returns true if PaymentScheduleStepUnitOfMeasure is present, Tag 41173.
func (m NoPaymentSchedules) HasPaymentScheduleStepUnitOfMeasure() bool {
	return m.Has(tag.PaymentScheduleStepUnitOfMeasure)
}

// HasPaymentScheduleFixingDayDistribution returns true if PaymentScheduleFixingDayDistribution is present, Tag 41174.
func (m NoPaymentSchedules) HasPaymentScheduleFixingDayDistribution() bool {
	return m.Has(tag.PaymentScheduleFixingDayDistribution)
}

// HasPaymentScheduleFixingDayCount returns true if PaymentScheduleFixingDayCount is present, Tag 41175.
func (m NoPaymentSchedules) HasPaymentScheduleFixingDayCount() bool {
	return m.Has(tag.PaymentScheduleFixingDayCount)
}

// HasNoPaymentScheduleFixingDays returns true if NoPaymentScheduleFixingDays is present, Tag 41161.
func (m NoPaymentSchedules) HasNoPaymentScheduleFixingDays() bool {
	return m.Has(tag.NoPaymentScheduleFixingDays)
}

// HasPaymentScheduleFixingLagPeriod returns true if PaymentScheduleFixingLagPeriod is present, Tag 41176.
func (m NoPaymentSchedules) HasPaymentScheduleFixingLagPeriod() bool {
	return m.Has(tag.PaymentScheduleFixingLagPeriod)
}

// HasPaymentScheduleFixingLagUnit returns true if PaymentScheduleFixingLagUnit is present, Tag 41177.
func (m NoPaymentSchedules) HasPaymentScheduleFixingLagUnit() bool {
	return m.Has(tag.PaymentScheduleFixingLagUnit)
}

// HasPaymentScheduleFixingFirstObservationDateOffsetPeriod returns true if PaymentScheduleFixingFirstObservationDateOffsetPeriod is present, Tag 41178.
func (m NoPaymentSchedules) HasPaymentScheduleFixingFirstObservationDateOffsetPeriod() bool {
	return m.Has(tag.PaymentScheduleFixingFirstObservationDateOffsetPeriod)
}

// HasPaymentScheduleFixingFirstObservationDateOffsetUnit returns true if PaymentScheduleFixingFirstObservationDateOffsetUnit is present, Tag 41179.
func (m NoPaymentSchedules) HasPaymentScheduleFixingFirstObservationDateOffsetUnit() bool {
	return m.Has(tag.PaymentScheduleFixingFirstObservationDateOffsetUnit)
}

// NoPaymentScheduleRateSources is a repeating group element, Tag 40868.
type NoPaymentScheduleRateSources struct {
	*quickfix.Group
}

// SetPaymentScheduleRateSource sets PaymentScheduleRateSource, Tag 40869.
func (m NoPaymentScheduleRateSources) SetPaymentScheduleRateSource(v int) {
	m.Set(field.NewPaymentScheduleRateSource(v))
}

// SetPaymentScheduleRateSourceType sets PaymentScheduleRateSourceType, Tag 40870.
func (m NoPaymentScheduleRateSources) SetPaymentScheduleRateSourceType(v int) {
	m.Set(field.NewPaymentScheduleRateSourceType(v))
}

// SetPaymentScheduleReferencePage sets PaymentScheduleReferencePage, Tag 40871.
func (m NoPaymentScheduleRateSources) SetPaymentScheduleReferencePage(v string) {
	m.Set(field.NewPaymentScheduleReferencePage(v))
}

// GetPaymentScheduleRateSource gets PaymentScheduleRateSource, Tag 40869.
func (m NoPaymentScheduleRateSources) GetPaymentScheduleRateSource() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentScheduleRateSourceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentScheduleRateSourceType gets PaymentScheduleRateSourceType, Tag 40870.
func (m NoPaymentScheduleRateSources) GetPaymentScheduleRateSourceType() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentScheduleRateSourceTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentScheduleReferencePage gets PaymentScheduleReferencePage, Tag 40871.
func (m NoPaymentScheduleRateSources) GetPaymentScheduleReferencePage() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentScheduleReferencePageField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasPaymentScheduleRateSource returns true if PaymentScheduleRateSource is present, Tag 40869.
func (m NoPaymentScheduleRateSources) HasPaymentScheduleRateSource() bool {
	return m.Has(tag.PaymentScheduleRateSource)
}

// HasPaymentScheduleRateSourceType returns true if PaymentScheduleRateSourceType is present, Tag 40870.
func (m NoPaymentScheduleRateSources) HasPaymentScheduleRateSourceType() bool {
	return m.Has(tag.PaymentScheduleRateSourceType)
}

// HasPaymentScheduleReferencePage returns true if PaymentScheduleReferencePage is present, Tag 40871.
func (m NoPaymentScheduleRateSources) HasPaymentScheduleReferencePage() bool {
	return m.Has(tag.PaymentScheduleReferencePage)
}

// NoPaymentScheduleRateSourcesRepeatingGroup is a repeating group, Tag 40868.
type NoPaymentScheduleRateSourcesRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoPaymentScheduleRateSourcesRepeatingGroup returns an initialized, NoPaymentScheduleRateSourcesRepeatingGroup.
func NewNoPaymentScheduleRateSourcesRepeatingGroup() NoPaymentScheduleRateSourcesRepeatingGroup {
	return NoPaymentScheduleRateSourcesRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoPaymentScheduleRateSources,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.PaymentScheduleRateSource),
				quickfix.GroupElement(tag.PaymentScheduleRateSourceType),
				quickfix.GroupElement(tag.PaymentScheduleReferencePage),
			},
		),
	}
}

// Add create and append a new NoPaymentScheduleRateSources to this group.
func (m NoPaymentScheduleRateSourcesRepeatingGroup) Add() NoPaymentScheduleRateSources {
	g := m.RepeatingGroup.Add()
	return NoPaymentScheduleRateSources{g}
}

// Get returns the ith NoPaymentScheduleRateSources in the NoPaymentScheduleRateSourcesRepeatinGroup.
func (m NoPaymentScheduleRateSourcesRepeatingGroup) Get(i int) NoPaymentScheduleRateSources {
	return NoPaymentScheduleRateSources{m.RepeatingGroup.Get(i)}
}

// NoPaymentScheduleFixingDateBusinessCenters is a repeating group element, Tag 40977.
type NoPaymentScheduleFixingDateBusinessCenters struct {
	*quickfix.Group
}

// SetPaymentScheduleFixingDateBusinessCenter sets PaymentScheduleFixingDateBusinessCenter, Tag 40854.
func (m NoPaymentScheduleFixingDateBusinessCenters) SetPaymentScheduleFixingDateBusinessCenter(v string) {
	m.Set(field.NewPaymentScheduleFixingDateBusinessCenter(v))
}

// GetPaymentScheduleFixingDateBusinessCenter gets PaymentScheduleFixingDateBusinessCenter, Tag 40854.
func (m NoPaymentScheduleFixingDateBusinessCenters) GetPaymentScheduleFixingDateBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentScheduleFixingDateBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasPaymentScheduleFixingDateBusinessCenter returns true if PaymentScheduleFixingDateBusinessCenter is present, Tag 40854.
func (m NoPaymentScheduleFixingDateBusinessCenters) HasPaymentScheduleFixingDateBusinessCenter() bool {
	return m.Has(tag.PaymentScheduleFixingDateBusinessCenter)
}

// NoPaymentScheduleFixingDateBusinessCentersRepeatingGroup is a repeating group, Tag 40977.
type NoPaymentScheduleFixingDateBusinessCentersRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoPaymentScheduleFixingDateBusinessCentersRepeatingGroup returns an initialized, NoPaymentScheduleFixingDateBusinessCentersRepeatingGroup.
func NewNoPaymentScheduleFixingDateBusinessCentersRepeatingGroup() NoPaymentScheduleFixingDateBusinessCentersRepeatingGroup {
	return NoPaymentScheduleFixingDateBusinessCentersRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoPaymentScheduleFixingDateBusinessCenters,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.PaymentScheduleFixingDateBusinessCenter),
			},
		),
	}
}

// Add create and append a new NoPaymentScheduleFixingDateBusinessCenters to this group.
func (m NoPaymentScheduleFixingDateBusinessCentersRepeatingGroup) Add() NoPaymentScheduleFixingDateBusinessCenters {
	g := m.RepeatingGroup.Add()
	return NoPaymentScheduleFixingDateBusinessCenters{g}
}

// Get returns the ith NoPaymentScheduleFixingDateBusinessCenters in the NoPaymentScheduleFixingDateBusinessCentersRepeatinGroup.
func (m NoPaymentScheduleFixingDateBusinessCentersRepeatingGroup) Get(i int) NoPaymentScheduleFixingDateBusinessCenters {
	return NoPaymentScheduleFixingDateBusinessCenters{m.RepeatingGroup.Get(i)}
}

// NoPaymentScheduleInterimExchangeDateBusinessCenters is a repeating group element, Tag 40945.
type NoPaymentScheduleInterimExchangeDateBusinessCenters struct {
	*quickfix.Group
}

// SetPaymentScheduleInterimExchangeDatesBusinessCenter sets PaymentScheduleInterimExchangeDatesBusinessCenter, Tag 40863.
func (m NoPaymentScheduleInterimExchangeDateBusinessCenters) SetPaymentScheduleInterimExchangeDatesBusinessCenter(v string) {
	m.Set(field.NewPaymentScheduleInterimExchangeDatesBusinessCenter(v))
}

// GetPaymentScheduleInterimExchangeDatesBusinessCenter gets PaymentScheduleInterimExchangeDatesBusinessCenter, Tag 40863.
func (m NoPaymentScheduleInterimExchangeDateBusinessCenters) GetPaymentScheduleInterimExchangeDatesBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentScheduleInterimExchangeDatesBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasPaymentScheduleInterimExchangeDatesBusinessCenter returns true if PaymentScheduleInterimExchangeDatesBusinessCenter is present, Tag 40863.
func (m NoPaymentScheduleInterimExchangeDateBusinessCenters) HasPaymentScheduleInterimExchangeDatesBusinessCenter() bool {
	return m.Has(tag.PaymentScheduleInterimExchangeDatesBusinessCenter)
}

// NoPaymentScheduleInterimExchangeDateBusinessCentersRepeatingGroup is a repeating group, Tag 40945.
type NoPaymentScheduleInterimExchangeDateBusinessCentersRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoPaymentScheduleInterimExchangeDateBusinessCentersRepeatingGroup returns an initialized, NoPaymentScheduleInterimExchangeDateBusinessCentersRepeatingGroup.
func NewNoPaymentScheduleInterimExchangeDateBusinessCentersRepeatingGroup() NoPaymentScheduleInterimExchangeDateBusinessCentersRepeatingGroup {
	return NoPaymentScheduleInterimExchangeDateBusinessCentersRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoPaymentScheduleInterimExchangeDateBusinessCenters,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.PaymentScheduleInterimExchangeDatesBusinessCenter),
			},
		),
	}
}

// Add create and append a new NoPaymentScheduleInterimExchangeDateBusinessCenters to this group.
func (m NoPaymentScheduleInterimExchangeDateBusinessCentersRepeatingGroup) Add() NoPaymentScheduleInterimExchangeDateBusinessCenters {
	g := m.RepeatingGroup.Add()
	return NoPaymentScheduleInterimExchangeDateBusinessCenters{g}
}

// Get returns the ith NoPaymentScheduleInterimExchangeDateBusinessCenters in the NoPaymentScheduleInterimExchangeDateBusinessCentersRepeatinGroup.
func (m NoPaymentScheduleInterimExchangeDateBusinessCentersRepeatingGroup) Get(i int) NoPaymentScheduleInterimExchangeDateBusinessCenters {
	return NoPaymentScheduleInterimExchangeDateBusinessCenters{m.RepeatingGroup.Get(i)}
}

// NoPaymentScheduleFixingDays is a repeating group element, Tag 41161.
type NoPaymentScheduleFixingDays struct {
	*quickfix.Group
}

// SetPaymentScheduleFixingDayOfWeek sets PaymentScheduleFixingDayOfWeek, Tag 41162.
func (m NoPaymentScheduleFixingDays) SetPaymentScheduleFixingDayOfWeek(v int) {
	m.Set(field.NewPaymentScheduleFixingDayOfWeek(v))
}

// SetPaymentScheduleFixingDayNumber sets PaymentScheduleFixingDayNumber, Tag 41163.
func (m NoPaymentScheduleFixingDays) SetPaymentScheduleFixingDayNumber(v int) {
	m.Set(field.NewPaymentScheduleFixingDayNumber(v))
}

// GetPaymentScheduleFixingDayOfWeek gets PaymentScheduleFixingDayOfWeek, Tag 41162.
func (m NoPaymentScheduleFixingDays) GetPaymentScheduleFixingDayOfWeek() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentScheduleFixingDayOfWeekField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentScheduleFixingDayNumber gets PaymentScheduleFixingDayNumber, Tag 41163.
func (m NoPaymentScheduleFixingDays) GetPaymentScheduleFixingDayNumber() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentScheduleFixingDayNumberField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasPaymentScheduleFixingDayOfWeek returns true if PaymentScheduleFixingDayOfWeek is present, Tag 41162.
func (m NoPaymentScheduleFixingDays) HasPaymentScheduleFixingDayOfWeek() bool {
	return m.Has(tag.PaymentScheduleFixingDayOfWeek)
}

// HasPaymentScheduleFixingDayNumber returns true if PaymentScheduleFixingDayNumber is present, Tag 41163.
func (m NoPaymentScheduleFixingDays) HasPaymentScheduleFixingDayNumber() bool {
	return m.Has(tag.PaymentScheduleFixingDayNumber)
}

// NoPaymentScheduleFixingDaysRepeatingGroup is a repeating group, Tag 41161.
type NoPaymentScheduleFixingDaysRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoPaymentScheduleFixingDaysRepeatingGroup returns an initialized, NoPaymentScheduleFixingDaysRepeatingGroup.
func NewNoPaymentScheduleFixingDaysRepeatingGroup() NoPaymentScheduleFixingDaysRepeatingGroup {
	return NoPaymentScheduleFixingDaysRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoPaymentScheduleFixingDays,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.PaymentScheduleFixingDayOfWeek),
				quickfix.GroupElement(tag.PaymentScheduleFixingDayNumber),
			},
		),
	}
}

// Add create and append a new NoPaymentScheduleFixingDays to this group.
func (m NoPaymentScheduleFixingDaysRepeatingGroup) Add() NoPaymentScheduleFixingDays {
	g := m.RepeatingGroup.Add()
	return NoPaymentScheduleFixingDays{g}
}

// Get returns the ith NoPaymentScheduleFixingDays in the NoPaymentScheduleFixingDaysRepeatinGroup.
func (m NoPaymentScheduleFixingDaysRepeatingGroup) Get(i int) NoPaymentScheduleFixingDays {
	return NoPaymentScheduleFixingDays{m.RepeatingGroup.Get(i)}
}

// NoPaymentSchedulesRepeatingGroup is a repeating group, Tag 40828.
type NoPaymentSchedulesRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoPaymentSchedulesRepeatingGroup returns an initialized, NoPaymentSchedulesRepeatingGroup.
func NewNoPaymentSchedulesRepeatingGroup() NoPaymentSchedulesRepeatingGroup {
	return NoPaymentSchedulesRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoPaymentSchedules,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.PaymentScheduleType),
				quickfix.GroupElement(tag.PaymentScheduleStubType),
				quickfix.GroupElement(tag.PaymentScheduleStartDateUnadjusted),
				quickfix.GroupElement(tag.PaymentScheduleEndDateUnadjusted),
				quickfix.GroupElement(tag.PaymentSchedulePaySide),
				quickfix.GroupElement(tag.PaymentScheduleReceiveSide),
				quickfix.GroupElement(tag.PaymentScheduleNotional),
				quickfix.GroupElement(tag.PaymentScheduleCurrency),
				quickfix.GroupElement(tag.PaymentScheduleRate),
				quickfix.GroupElement(tag.PaymentScheduleRateMultiplier),
				quickfix.GroupElement(tag.PaymentScheduleRateSpread),
				quickfix.GroupElement(tag.PaymentScheduleRateSpreadPositionType),
				quickfix.GroupElement(tag.PaymentScheduleRateTreatment),
				quickfix.GroupElement(tag.PaymentScheduleFixedAmount),
				quickfix.GroupElement(tag.PaymentScheduleFixedCurrency),
				quickfix.GroupElement(tag.PaymentScheduleStepFrequencyPeriod),
				quickfix.GroupElement(tag.PaymentScheduleStepFrequencyUnit),
				quickfix.GroupElement(tag.PaymentScheduleStepOffsetValue),
				quickfix.GroupElement(tag.PaymentScheduleStepRate),
				quickfix.GroupElement(tag.PaymentScheduleStepOffsetRate),
				quickfix.GroupElement(tag.PaymentScheduleStepRelativeTo),
				NewNoPaymentScheduleRateSourcesRepeatingGroup(),
				quickfix.GroupElement(tag.PaymentScheduleFixingDateUnadjusted),
				quickfix.GroupElement(tag.PaymentScheduleWeight),
				quickfix.GroupElement(tag.PaymentScheduleFixingDateRelativeTo),
				quickfix.GroupElement(tag.PaymentScheduleFixingDateBusinessDayConvention),
				NewNoPaymentScheduleFixingDateBusinessCentersRepeatingGroup(),
				quickfix.GroupElement(tag.PaymentScheduleFixingDateOffsetPeriod),
				quickfix.GroupElement(tag.PaymentScheduleFixingDateOffsetUnit),
				quickfix.GroupElement(tag.PaymentScheduleFixingDateOffsetDayType),
				quickfix.GroupElement(tag.PaymentScheduleFixingDateAdjusted),
				quickfix.GroupElement(tag.PaymentScheduleFixingTime),
				quickfix.GroupElement(tag.PaymentScheduleFixingTimeBusinessCenter),
				quickfix.GroupElement(tag.PaymentScheduleInterimExchangePaymentDateRelativeTo),
				quickfix.GroupElement(tag.PaymentScheduleInterimExchangeDatesBusinessDayConvention),
				NewNoPaymentScheduleInterimExchangeDateBusinessCentersRepeatingGroup(),
				quickfix.GroupElement(tag.PaymentScheduleInterimExchangeDatesOffsetPeriod),
				quickfix.GroupElement(tag.PaymentScheduleInterimExchangeDatesOffsetUnit),
				quickfix.GroupElement(tag.PaymentScheduleInterimExchangeDatesOffsetDayType),
				quickfix.GroupElement(tag.PaymentScheduleInterimExchangeDateAdjusted),
				quickfix.GroupElement(tag.PaymentScheduleXID),
				quickfix.GroupElement(tag.PaymentScheduleXIDRef),
				quickfix.GroupElement(tag.PaymentScheduleRateCurrency),
				quickfix.GroupElement(tag.PaymentScheduleRateUnitOfMeasure),
				quickfix.GroupElement(tag.PaymentScheduleRateConversionFactor),
				quickfix.GroupElement(tag.PaymentScheduleRateSpreadType),
				quickfix.GroupElement(tag.PaymentScheduleSettlPeriodPrice),
				quickfix.GroupElement(tag.PaymentScheduleSettlPeriodPriceCurrency),
				quickfix.GroupElement(tag.PaymentScheduleSettlPeriodPriceUnitOfMeasure),
				quickfix.GroupElement(tag.PaymentScheduleStepUnitOfMeasure),
				quickfix.GroupElement(tag.PaymentScheduleFixingDayDistribution),
				quickfix.GroupElement(tag.PaymentScheduleFixingDayCount),
				NewNoPaymentScheduleFixingDaysRepeatingGroup(),
				quickfix.GroupElement(tag.PaymentScheduleFixingLagPeriod),
				quickfix.GroupElement(tag.PaymentScheduleFixingLagUnit),
				quickfix.GroupElement(tag.PaymentScheduleFixingFirstObservationDateOffsetPeriod),
				quickfix.GroupElement(tag.PaymentScheduleFixingFirstObservationDateOffsetUnit),
			},
		),
	}
}

// Add create and append a new NoPaymentSchedules to this group.
func (m NoPaymentSchedulesRepeatingGroup) Add() NoPaymentSchedules {
	g := m.RepeatingGroup.Add()
	return NoPaymentSchedules{g}
}

// Get returns the ith NoPaymentSchedules in the NoPaymentSchedulesRepeatinGroup.
func (m NoPaymentSchedulesRepeatingGroup) Get(i int) NoPaymentSchedules {
	return NoPaymentSchedules{m.RepeatingGroup.Get(i)}
}

// NoPaymentStubs is a repeating group element, Tag 40872.
type NoPaymentStubs struct {
	*quickfix.Group
}

// SetPaymentStubType sets PaymentStubType, Tag 40873.
func (m NoPaymentStubs) SetPaymentStubType(v enum.PaymentStubType) {
	m.Set(field.NewPaymentStubType(v))
}

// SetPaymentStubLength sets PaymentStubLength, Tag 40874.
func (m NoPaymentStubs) SetPaymentStubLength(v enum.PaymentStubLength) {
	m.Set(field.NewPaymentStubLength(v))
}

// SetPaymentStubRate sets PaymentStubRate, Tag 40875.
func (m NoPaymentStubs) SetPaymentStubRate(value decimal.Decimal, scale int32) {
	m.Set(field.NewPaymentStubRate(value, scale))
}

// SetPaymentStubFixedAmount sets PaymentStubFixedAmount, Tag 40876.
func (m NoPaymentStubs) SetPaymentStubFixedAmount(value decimal.Decimal, scale int32) {
	m.Set(field.NewPaymentStubFixedAmount(value, scale))
}

// SetPaymentStubFixedCurrency sets PaymentStubFixedCurrency, Tag 40877.
func (m NoPaymentStubs) SetPaymentStubFixedCurrency(v string) {
	m.Set(field.NewPaymentStubFixedCurrency(v))
}

// SetPaymentStubIndex sets PaymentStubIndex, Tag 40878.
func (m NoPaymentStubs) SetPaymentStubIndex(v string) {
	m.Set(field.NewPaymentStubIndex(v))
}

// SetPaymentStubIndexSource sets PaymentStubIndexSource, Tag 40879.
func (m NoPaymentStubs) SetPaymentStubIndexSource(v int) {
	m.Set(field.NewPaymentStubIndexSource(v))
}

// SetPaymentStubIndexCurvePeriod sets PaymentStubIndexCurvePeriod, Tag 40880.
func (m NoPaymentStubs) SetPaymentStubIndexCurvePeriod(v int) {
	m.Set(field.NewPaymentStubIndexCurvePeriod(v))
}

// SetPaymentStubIndexCurveUnit sets PaymentStubIndexCurveUnit, Tag 40881.
func (m NoPaymentStubs) SetPaymentStubIndexCurveUnit(v string) {
	m.Set(field.NewPaymentStubIndexCurveUnit(v))
}

// SetPaymentStubIndexRateMultiplier sets PaymentStubIndexRateMultiplier, Tag 40882.
func (m NoPaymentStubs) SetPaymentStubIndexRateMultiplier(value decimal.Decimal, scale int32) {
	m.Set(field.NewPaymentStubIndexRateMultiplier(value, scale))
}

// SetPaymentStubIndexRateSpread sets PaymentStubIndexRateSpread, Tag 40883.
func (m NoPaymentStubs) SetPaymentStubIndexRateSpread(value decimal.Decimal, scale int32) {
	m.Set(field.NewPaymentStubIndexRateSpread(value, scale))
}

// SetPaymentStubIndexRateSpreadPositionType sets PaymentStubIndexRateSpreadPositionType, Tag 40884.
func (m NoPaymentStubs) SetPaymentStubIndexRateSpreadPositionType(v int) {
	m.Set(field.NewPaymentStubIndexRateSpreadPositionType(v))
}

// SetPaymentStubIndexRateTreatment sets PaymentStubIndexRateTreatment, Tag 40885.
func (m NoPaymentStubs) SetPaymentStubIndexRateTreatment(v int) {
	m.Set(field.NewPaymentStubIndexRateTreatment(v))
}

// SetPaymentStubIndexCapRate sets PaymentStubIndexCapRate, Tag 40886.
func (m NoPaymentStubs) SetPaymentStubIndexCapRate(value decimal.Decimal, scale int32) {
	m.Set(field.NewPaymentStubIndexCapRate(value, scale))
}

// SetPaymentStubIndexCapRateBuySide sets PaymentStubIndexCapRateBuySide, Tag 40887.
func (m NoPaymentStubs) SetPaymentStubIndexCapRateBuySide(v int) {
	m.Set(field.NewPaymentStubIndexCapRateBuySide(v))
}

// SetPaymentStubIndexCapRateSellSide sets PaymentStubIndexCapRateSellSide, Tag 40888.
func (m NoPaymentStubs) SetPaymentStubIndexCapRateSellSide(v int) {
	m.Set(field.NewPaymentStubIndexCapRateSellSide(v))
}

// SetPaymentStubIndexFloorRate sets PaymentStubIndexFloorRate, Tag 40889.
func (m NoPaymentStubs) SetPaymentStubIndexFloorRate(value decimal.Decimal, scale int32) {
	m.Set(field.NewPaymentStubIndexFloorRate(value, scale))
}

// SetPaymentStubIndexFloorRateBuySide sets PaymentStubIndexFloorRateBuySide, Tag 40890.
func (m NoPaymentStubs) SetPaymentStubIndexFloorRateBuySide(v int) {
	m.Set(field.NewPaymentStubIndexFloorRateBuySide(v))
}

// SetPaymentStubIndexFloorRateSellSide sets PaymentStubIndexFloorRateSellSide, Tag 40891.
func (m NoPaymentStubs) SetPaymentStubIndexFloorRateSellSide(v int) {
	m.Set(field.NewPaymentStubIndexFloorRateSellSide(v))
}

// SetPaymentStubIndex2 sets PaymentStubIndex2, Tag 40892.
func (m NoPaymentStubs) SetPaymentStubIndex2(v string) {
	m.Set(field.NewPaymentStubIndex2(v))
}

// SetPaymentStubIndex2Source sets PaymentStubIndex2Source, Tag 40893.
func (m NoPaymentStubs) SetPaymentStubIndex2Source(v int) {
	m.Set(field.NewPaymentStubIndex2Source(v))
}

// SetPaymentStubIndex2CurvePeriod sets PaymentStubIndex2CurvePeriod, Tag 40894.
func (m NoPaymentStubs) SetPaymentStubIndex2CurvePeriod(v int) {
	m.Set(field.NewPaymentStubIndex2CurvePeriod(v))
}

// SetPaymentStubIndex2CurveUnit sets PaymentStubIndex2CurveUnit, Tag 40895.
func (m NoPaymentStubs) SetPaymentStubIndex2CurveUnit(v string) {
	m.Set(field.NewPaymentStubIndex2CurveUnit(v))
}

// SetPaymentStubIndex2RateMultiplier sets PaymentStubIndex2RateMultiplier, Tag 40896.
func (m NoPaymentStubs) SetPaymentStubIndex2RateMultiplier(value decimal.Decimal, scale int32) {
	m.Set(field.NewPaymentStubIndex2RateMultiplier(value, scale))
}

// SetPaymentStubIndex2RateSpread sets PaymentStubIndex2RateSpread, Tag 40897.
func (m NoPaymentStubs) SetPaymentStubIndex2RateSpread(value decimal.Decimal, scale int32) {
	m.Set(field.NewPaymentStubIndex2RateSpread(value, scale))
}

// SetPaymentStubIndex2RateSpreadPositionType sets PaymentStubIndex2RateSpreadPositionType, Tag 40898.
func (m NoPaymentStubs) SetPaymentStubIndex2RateSpreadPositionType(v int) {
	m.Set(field.NewPaymentStubIndex2RateSpreadPositionType(v))
}

// SetPaymentStubIndex2RateTreatment sets PaymentStubIndex2RateTreatment, Tag 40899.
func (m NoPaymentStubs) SetPaymentStubIndex2RateTreatment(v int) {
	m.Set(field.NewPaymentStubIndex2RateTreatment(v))
}

// SetPaymentStubIndex2CapRate sets PaymentStubIndex2CapRate, Tag 40900.
func (m NoPaymentStubs) SetPaymentStubIndex2CapRate(value decimal.Decimal, scale int32) {
	m.Set(field.NewPaymentStubIndex2CapRate(value, scale))
}

// SetPaymentStubIndex2FloorRate sets PaymentStubIndex2FloorRate, Tag 40901.
func (m NoPaymentStubs) SetPaymentStubIndex2FloorRate(value decimal.Decimal, scale int32) {
	m.Set(field.NewPaymentStubIndex2FloorRate(value, scale))
}

// SetPaymentStubStartDateUnadjusted sets PaymentStubStartDateUnadjusted, Tag 42698.
func (m NoPaymentStubs) SetPaymentStubStartDateUnadjusted(v string) {
	m.Set(field.NewPaymentStubStartDateUnadjusted(v))
}

// SetPaymentStubStartDateBusinessDayConvention sets PaymentStubStartDateBusinessDayConvention, Tag 42699.
func (m NoPaymentStubs) SetPaymentStubStartDateBusinessDayConvention(v int) {
	m.Set(field.NewPaymentStubStartDateBusinessDayConvention(v))
}

// SetNoPaymentStubStartDateBusinessCenters sets NoPaymentStubStartDateBusinessCenters, Tag 42705.
func (m NoPaymentStubs) SetNoPaymentStubStartDateBusinessCenters(f NoPaymentStubStartDateBusinessCentersRepeatingGroup) {
	m.SetGroup(f)
}

// SetPaymentStubStartDateRelativeTo sets PaymentStubStartDateRelativeTo, Tag 42700.
func (m NoPaymentStubs) SetPaymentStubStartDateRelativeTo(v int) {
	m.Set(field.NewPaymentStubStartDateRelativeTo(v))
}

// SetPaymentStubStartDateOffsetPeriod sets PaymentStubStartDateOffsetPeriod, Tag 42701.
func (m NoPaymentStubs) SetPaymentStubStartDateOffsetPeriod(v int) {
	m.Set(field.NewPaymentStubStartDateOffsetPeriod(v))
}

// SetPaymentStubStartDateOffsetUnit sets PaymentStubStartDateOffsetUnit, Tag 42702.
func (m NoPaymentStubs) SetPaymentStubStartDateOffsetUnit(v string) {
	m.Set(field.NewPaymentStubStartDateOffsetUnit(v))
}

// SetPaymentStubStartDateOffsetDayType sets PaymentStubStartDateOffsetDayType, Tag 42703.
func (m NoPaymentStubs) SetPaymentStubStartDateOffsetDayType(v int) {
	m.Set(field.NewPaymentStubStartDateOffsetDayType(v))
}

// SetPaymentStubStartDateAdjusted sets PaymentStubStartDateAdjusted, Tag 42704.
func (m NoPaymentStubs) SetPaymentStubStartDateAdjusted(v string) {
	m.Set(field.NewPaymentStubStartDateAdjusted(v))
}

// SetPaymentStubEndDateUnadjusted sets PaymentStubEndDateUnadjusted, Tag 42689.
func (m NoPaymentStubs) SetPaymentStubEndDateUnadjusted(v string) {
	m.Set(field.NewPaymentStubEndDateUnadjusted(v))
}

// SetPaymentStubEndDateBusinessDayConvention sets PaymentStubEndDateBusinessDayConvention, Tag 42690.
func (m NoPaymentStubs) SetPaymentStubEndDateBusinessDayConvention(v int) {
	m.Set(field.NewPaymentStubEndDateBusinessDayConvention(v))
}

// SetNoPaymentStubEndDateBusinessCenters sets NoPaymentStubEndDateBusinessCenters, Tag 42696.
func (m NoPaymentStubs) SetNoPaymentStubEndDateBusinessCenters(f NoPaymentStubEndDateBusinessCentersRepeatingGroup) {
	m.SetGroup(f)
}

// SetPaymentStubEndDateRelativeTo sets PaymentStubEndDateRelativeTo, Tag 42691.
func (m NoPaymentStubs) SetPaymentStubEndDateRelativeTo(v int) {
	m.Set(field.NewPaymentStubEndDateRelativeTo(v))
}

// SetPaymentStubEndDateOffsetPeriod sets PaymentStubEndDateOffsetPeriod, Tag 42692.
func (m NoPaymentStubs) SetPaymentStubEndDateOffsetPeriod(v int) {
	m.Set(field.NewPaymentStubEndDateOffsetPeriod(v))
}

// SetPaymentStubEndDateOffsetUnit sets PaymentStubEndDateOffsetUnit, Tag 42693.
func (m NoPaymentStubs) SetPaymentStubEndDateOffsetUnit(v string) {
	m.Set(field.NewPaymentStubEndDateOffsetUnit(v))
}

// SetPaymentStubEndDateOffsetDayType sets PaymentStubEndDateOffsetDayType, Tag 42694.
func (m NoPaymentStubs) SetPaymentStubEndDateOffsetDayType(v int) {
	m.Set(field.NewPaymentStubEndDateOffsetDayType(v))
}

// SetPaymentStubEndDateAdjusted sets PaymentStubEndDateAdjusted, Tag 42695.
func (m NoPaymentStubs) SetPaymentStubEndDateAdjusted(v string) {
	m.Set(field.NewPaymentStubEndDateAdjusted(v))
}

// GetPaymentStubType gets PaymentStubType, Tag 40873.
func (m NoPaymentStubs) GetPaymentStubType() (v enum.PaymentStubType, err quickfix.MessageRejectError) {
	var f field.PaymentStubTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStubLength gets PaymentStubLength, Tag 40874.
func (m NoPaymentStubs) GetPaymentStubLength() (v enum.PaymentStubLength, err quickfix.MessageRejectError) {
	var f field.PaymentStubLengthField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStubRate gets PaymentStubRate, Tag 40875.
func (m NoPaymentStubs) GetPaymentStubRate() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.PaymentStubRateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStubFixedAmount gets PaymentStubFixedAmount, Tag 40876.
func (m NoPaymentStubs) GetPaymentStubFixedAmount() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.PaymentStubFixedAmountField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStubFixedCurrency gets PaymentStubFixedCurrency, Tag 40877.
func (m NoPaymentStubs) GetPaymentStubFixedCurrency() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStubFixedCurrencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStubIndex gets PaymentStubIndex, Tag 40878.
func (m NoPaymentStubs) GetPaymentStubIndex() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStubIndexField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStubIndexSource gets PaymentStubIndexSource, Tag 40879.
func (m NoPaymentStubs) GetPaymentStubIndexSource() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStubIndexSourceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStubIndexCurvePeriod gets PaymentStubIndexCurvePeriod, Tag 40880.
func (m NoPaymentStubs) GetPaymentStubIndexCurvePeriod() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStubIndexCurvePeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStubIndexCurveUnit gets PaymentStubIndexCurveUnit, Tag 40881.
func (m NoPaymentStubs) GetPaymentStubIndexCurveUnit() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStubIndexCurveUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStubIndexRateMultiplier gets PaymentStubIndexRateMultiplier, Tag 40882.
func (m NoPaymentStubs) GetPaymentStubIndexRateMultiplier() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.PaymentStubIndexRateMultiplierField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStubIndexRateSpread gets PaymentStubIndexRateSpread, Tag 40883.
func (m NoPaymentStubs) GetPaymentStubIndexRateSpread() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.PaymentStubIndexRateSpreadField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStubIndexRateSpreadPositionType gets PaymentStubIndexRateSpreadPositionType, Tag 40884.
func (m NoPaymentStubs) GetPaymentStubIndexRateSpreadPositionType() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStubIndexRateSpreadPositionTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStubIndexRateTreatment gets PaymentStubIndexRateTreatment, Tag 40885.
func (m NoPaymentStubs) GetPaymentStubIndexRateTreatment() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStubIndexRateTreatmentField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStubIndexCapRate gets PaymentStubIndexCapRate, Tag 40886.
func (m NoPaymentStubs) GetPaymentStubIndexCapRate() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.PaymentStubIndexCapRateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStubIndexCapRateBuySide gets PaymentStubIndexCapRateBuySide, Tag 40887.
func (m NoPaymentStubs) GetPaymentStubIndexCapRateBuySide() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStubIndexCapRateBuySideField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStubIndexCapRateSellSide gets PaymentStubIndexCapRateSellSide, Tag 40888.
func (m NoPaymentStubs) GetPaymentStubIndexCapRateSellSide() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStubIndexCapRateSellSideField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStubIndexFloorRate gets PaymentStubIndexFloorRate, Tag 40889.
func (m NoPaymentStubs) GetPaymentStubIndexFloorRate() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.PaymentStubIndexFloorRateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStubIndexFloorRateBuySide gets PaymentStubIndexFloorRateBuySide, Tag 40890.
func (m NoPaymentStubs) GetPaymentStubIndexFloorRateBuySide() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStubIndexFloorRateBuySideField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStubIndexFloorRateSellSide gets PaymentStubIndexFloorRateSellSide, Tag 40891.
func (m NoPaymentStubs) GetPaymentStubIndexFloorRateSellSide() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStubIndexFloorRateSellSideField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStubIndex2 gets PaymentStubIndex2, Tag 40892.
func (m NoPaymentStubs) GetPaymentStubIndex2() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStubIndex2Field
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStubIndex2Source gets PaymentStubIndex2Source, Tag 40893.
func (m NoPaymentStubs) GetPaymentStubIndex2Source() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStubIndex2SourceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStubIndex2CurvePeriod gets PaymentStubIndex2CurvePeriod, Tag 40894.
func (m NoPaymentStubs) GetPaymentStubIndex2CurvePeriod() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStubIndex2CurvePeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStubIndex2CurveUnit gets PaymentStubIndex2CurveUnit, Tag 40895.
func (m NoPaymentStubs) GetPaymentStubIndex2CurveUnit() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStubIndex2CurveUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStubIndex2RateMultiplier gets PaymentStubIndex2RateMultiplier, Tag 40896.
func (m NoPaymentStubs) GetPaymentStubIndex2RateMultiplier() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.PaymentStubIndex2RateMultiplierField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStubIndex2RateSpread gets PaymentStubIndex2RateSpread, Tag 40897.
func (m NoPaymentStubs) GetPaymentStubIndex2RateSpread() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.PaymentStubIndex2RateSpreadField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStubIndex2RateSpreadPositionType gets PaymentStubIndex2RateSpreadPositionType, Tag 40898.
func (m NoPaymentStubs) GetPaymentStubIndex2RateSpreadPositionType() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStubIndex2RateSpreadPositionTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStubIndex2RateTreatment gets PaymentStubIndex2RateTreatment, Tag 40899.
func (m NoPaymentStubs) GetPaymentStubIndex2RateTreatment() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStubIndex2RateTreatmentField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStubIndex2CapRate gets PaymentStubIndex2CapRate, Tag 40900.
func (m NoPaymentStubs) GetPaymentStubIndex2CapRate() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.PaymentStubIndex2CapRateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStubIndex2FloorRate gets PaymentStubIndex2FloorRate, Tag 40901.
func (m NoPaymentStubs) GetPaymentStubIndex2FloorRate() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.PaymentStubIndex2FloorRateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStubStartDateUnadjusted gets PaymentStubStartDateUnadjusted, Tag 42698.
func (m NoPaymentStubs) GetPaymentStubStartDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStubStartDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStubStartDateBusinessDayConvention gets PaymentStubStartDateBusinessDayConvention, Tag 42699.
func (m NoPaymentStubs) GetPaymentStubStartDateBusinessDayConvention() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStubStartDateBusinessDayConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoPaymentStubStartDateBusinessCenters gets NoPaymentStubStartDateBusinessCenters, Tag 42705.
func (m NoPaymentStubs) GetNoPaymentStubStartDateBusinessCenters() (NoPaymentStubStartDateBusinessCentersRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoPaymentStubStartDateBusinessCentersRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetPaymentStubStartDateRelativeTo gets PaymentStubStartDateRelativeTo, Tag 42700.
func (m NoPaymentStubs) GetPaymentStubStartDateRelativeTo() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStubStartDateRelativeToField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStubStartDateOffsetPeriod gets PaymentStubStartDateOffsetPeriod, Tag 42701.
func (m NoPaymentStubs) GetPaymentStubStartDateOffsetPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStubStartDateOffsetPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStubStartDateOffsetUnit gets PaymentStubStartDateOffsetUnit, Tag 42702.
func (m NoPaymentStubs) GetPaymentStubStartDateOffsetUnit() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStubStartDateOffsetUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStubStartDateOffsetDayType gets PaymentStubStartDateOffsetDayType, Tag 42703.
func (m NoPaymentStubs) GetPaymentStubStartDateOffsetDayType() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStubStartDateOffsetDayTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStubStartDateAdjusted gets PaymentStubStartDateAdjusted, Tag 42704.
func (m NoPaymentStubs) GetPaymentStubStartDateAdjusted() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStubStartDateAdjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStubEndDateUnadjusted gets PaymentStubEndDateUnadjusted, Tag 42689.
func (m NoPaymentStubs) GetPaymentStubEndDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStubEndDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStubEndDateBusinessDayConvention gets PaymentStubEndDateBusinessDayConvention, Tag 42690.
func (m NoPaymentStubs) GetPaymentStubEndDateBusinessDayConvention() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStubEndDateBusinessDayConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoPaymentStubEndDateBusinessCenters gets NoPaymentStubEndDateBusinessCenters, Tag 42696.
func (m NoPaymentStubs) GetNoPaymentStubEndDateBusinessCenters() (NoPaymentStubEndDateBusinessCentersRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoPaymentStubEndDateBusinessCentersRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetPaymentStubEndDateRelativeTo gets PaymentStubEndDateRelativeTo, Tag 42691.
func (m NoPaymentStubs) GetPaymentStubEndDateRelativeTo() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStubEndDateRelativeToField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStubEndDateOffsetPeriod gets PaymentStubEndDateOffsetPeriod, Tag 42692.
func (m NoPaymentStubs) GetPaymentStubEndDateOffsetPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStubEndDateOffsetPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStubEndDateOffsetUnit gets PaymentStubEndDateOffsetUnit, Tag 42693.
func (m NoPaymentStubs) GetPaymentStubEndDateOffsetUnit() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStubEndDateOffsetUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStubEndDateOffsetDayType gets PaymentStubEndDateOffsetDayType, Tag 42694.
func (m NoPaymentStubs) GetPaymentStubEndDateOffsetDayType() (v int, err quickfix.MessageRejectError) {
	var f field.PaymentStubEndDateOffsetDayTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPaymentStubEndDateAdjusted gets PaymentStubEndDateAdjusted, Tag 42695.
func (m NoPaymentStubs) GetPaymentStubEndDateAdjusted() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStubEndDateAdjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasPaymentStubType returns true if PaymentStubType is present, Tag 40873.
func (m NoPaymentStubs) HasPaymentStubType() bool {
	return m.Has(tag.PaymentStubType)
}

// HasPaymentStubLength returns true if PaymentStubLength is present, Tag 40874.
func (m NoPaymentStubs) HasPaymentStubLength() bool {
	return m.Has(tag.PaymentStubLength)
}

// HasPaymentStubRate returns true if PaymentStubRate is present, Tag 40875.
func (m NoPaymentStubs) HasPaymentStubRate() bool {
	return m.Has(tag.PaymentStubRate)
}

// HasPaymentStubFixedAmount returns true if PaymentStubFixedAmount is present, Tag 40876.
func (m NoPaymentStubs) HasPaymentStubFixedAmount() bool {
	return m.Has(tag.PaymentStubFixedAmount)
}

// HasPaymentStubFixedCurrency returns true if PaymentStubFixedCurrency is present, Tag 40877.
func (m NoPaymentStubs) HasPaymentStubFixedCurrency() bool {
	return m.Has(tag.PaymentStubFixedCurrency)
}

// HasPaymentStubIndex returns true if PaymentStubIndex is present, Tag 40878.
func (m NoPaymentStubs) HasPaymentStubIndex() bool {
	return m.Has(tag.PaymentStubIndex)
}

// HasPaymentStubIndexSource returns true if PaymentStubIndexSource is present, Tag 40879.
func (m NoPaymentStubs) HasPaymentStubIndexSource() bool {
	return m.Has(tag.PaymentStubIndexSource)
}

// HasPaymentStubIndexCurvePeriod returns true if PaymentStubIndexCurvePeriod is present, Tag 40880.
func (m NoPaymentStubs) HasPaymentStubIndexCurvePeriod() bool {
	return m.Has(tag.PaymentStubIndexCurvePeriod)
}

// HasPaymentStubIndexCurveUnit returns true if PaymentStubIndexCurveUnit is present, Tag 40881.
func (m NoPaymentStubs) HasPaymentStubIndexCurveUnit() bool {
	return m.Has(tag.PaymentStubIndexCurveUnit)
}

// HasPaymentStubIndexRateMultiplier returns true if PaymentStubIndexRateMultiplier is present, Tag 40882.
func (m NoPaymentStubs) HasPaymentStubIndexRateMultiplier() bool {
	return m.Has(tag.PaymentStubIndexRateMultiplier)
}

// HasPaymentStubIndexRateSpread returns true if PaymentStubIndexRateSpread is present, Tag 40883.
func (m NoPaymentStubs) HasPaymentStubIndexRateSpread() bool {
	return m.Has(tag.PaymentStubIndexRateSpread)
}

// HasPaymentStubIndexRateSpreadPositionType returns true if PaymentStubIndexRateSpreadPositionType is present, Tag 40884.
func (m NoPaymentStubs) HasPaymentStubIndexRateSpreadPositionType() bool {
	return m.Has(tag.PaymentStubIndexRateSpreadPositionType)
}

// HasPaymentStubIndexRateTreatment returns true if PaymentStubIndexRateTreatment is present, Tag 40885.
func (m NoPaymentStubs) HasPaymentStubIndexRateTreatment() bool {
	return m.Has(tag.PaymentStubIndexRateTreatment)
}

// HasPaymentStubIndexCapRate returns true if PaymentStubIndexCapRate is present, Tag 40886.
func (m NoPaymentStubs) HasPaymentStubIndexCapRate() bool {
	return m.Has(tag.PaymentStubIndexCapRate)
}

// HasPaymentStubIndexCapRateBuySide returns true if PaymentStubIndexCapRateBuySide is present, Tag 40887.
func (m NoPaymentStubs) HasPaymentStubIndexCapRateBuySide() bool {
	return m.Has(tag.PaymentStubIndexCapRateBuySide)
}

// HasPaymentStubIndexCapRateSellSide returns true if PaymentStubIndexCapRateSellSide is present, Tag 40888.
func (m NoPaymentStubs) HasPaymentStubIndexCapRateSellSide() bool {
	return m.Has(tag.PaymentStubIndexCapRateSellSide)
}

// HasPaymentStubIndexFloorRate returns true if PaymentStubIndexFloorRate is present, Tag 40889.
func (m NoPaymentStubs) HasPaymentStubIndexFloorRate() bool {
	return m.Has(tag.PaymentStubIndexFloorRate)
}

// HasPaymentStubIndexFloorRateBuySide returns true if PaymentStubIndexFloorRateBuySide is present, Tag 40890.
func (m NoPaymentStubs) HasPaymentStubIndexFloorRateBuySide() bool {
	return m.Has(tag.PaymentStubIndexFloorRateBuySide)
}

// HasPaymentStubIndexFloorRateSellSide returns true if PaymentStubIndexFloorRateSellSide is present, Tag 40891.
func (m NoPaymentStubs) HasPaymentStubIndexFloorRateSellSide() bool {
	return m.Has(tag.PaymentStubIndexFloorRateSellSide)
}

// HasPaymentStubIndex2 returns true if PaymentStubIndex2 is present, Tag 40892.
func (m NoPaymentStubs) HasPaymentStubIndex2() bool {
	return m.Has(tag.PaymentStubIndex2)
}

// HasPaymentStubIndex2Source returns true if PaymentStubIndex2Source is present, Tag 40893.
func (m NoPaymentStubs) HasPaymentStubIndex2Source() bool {
	return m.Has(tag.PaymentStubIndex2Source)
}

// HasPaymentStubIndex2CurvePeriod returns true if PaymentStubIndex2CurvePeriod is present, Tag 40894.
func (m NoPaymentStubs) HasPaymentStubIndex2CurvePeriod() bool {
	return m.Has(tag.PaymentStubIndex2CurvePeriod)
}

// HasPaymentStubIndex2CurveUnit returns true if PaymentStubIndex2CurveUnit is present, Tag 40895.
func (m NoPaymentStubs) HasPaymentStubIndex2CurveUnit() bool {
	return m.Has(tag.PaymentStubIndex2CurveUnit)
}

// HasPaymentStubIndex2RateMultiplier returns true if PaymentStubIndex2RateMultiplier is present, Tag 40896.
func (m NoPaymentStubs) HasPaymentStubIndex2RateMultiplier() bool {
	return m.Has(tag.PaymentStubIndex2RateMultiplier)
}

// HasPaymentStubIndex2RateSpread returns true if PaymentStubIndex2RateSpread is present, Tag 40897.
func (m NoPaymentStubs) HasPaymentStubIndex2RateSpread() bool {
	return m.Has(tag.PaymentStubIndex2RateSpread)
}

// HasPaymentStubIndex2RateSpreadPositionType returns true if PaymentStubIndex2RateSpreadPositionType is present, Tag 40898.
func (m NoPaymentStubs) HasPaymentStubIndex2RateSpreadPositionType() bool {
	return m.Has(tag.PaymentStubIndex2RateSpreadPositionType)
}

// HasPaymentStubIndex2RateTreatment returns true if PaymentStubIndex2RateTreatment is present, Tag 40899.
func (m NoPaymentStubs) HasPaymentStubIndex2RateTreatment() bool {
	return m.Has(tag.PaymentStubIndex2RateTreatment)
}

// HasPaymentStubIndex2CapRate returns true if PaymentStubIndex2CapRate is present, Tag 40900.
func (m NoPaymentStubs) HasPaymentStubIndex2CapRate() bool {
	return m.Has(tag.PaymentStubIndex2CapRate)
}

// HasPaymentStubIndex2FloorRate returns true if PaymentStubIndex2FloorRate is present, Tag 40901.
func (m NoPaymentStubs) HasPaymentStubIndex2FloorRate() bool {
	return m.Has(tag.PaymentStubIndex2FloorRate)
}

// HasPaymentStubStartDateUnadjusted returns true if PaymentStubStartDateUnadjusted is present, Tag 42698.
func (m NoPaymentStubs) HasPaymentStubStartDateUnadjusted() bool {
	return m.Has(tag.PaymentStubStartDateUnadjusted)
}

// HasPaymentStubStartDateBusinessDayConvention returns true if PaymentStubStartDateBusinessDayConvention is present, Tag 42699.
func (m NoPaymentStubs) HasPaymentStubStartDateBusinessDayConvention() bool {
	return m.Has(tag.PaymentStubStartDateBusinessDayConvention)
}

// HasNoPaymentStubStartDateBusinessCenters returns true if NoPaymentStubStartDateBusinessCenters is present, Tag 42705.
func (m NoPaymentStubs) HasNoPaymentStubStartDateBusinessCenters() bool {
	return m.Has(tag.NoPaymentStubStartDateBusinessCenters)
}

// HasPaymentStubStartDateRelativeTo returns true if PaymentStubStartDateRelativeTo is present, Tag 42700.
func (m NoPaymentStubs) HasPaymentStubStartDateRelativeTo() bool {
	return m.Has(tag.PaymentStubStartDateRelativeTo)
}

// HasPaymentStubStartDateOffsetPeriod returns true if PaymentStubStartDateOffsetPeriod is present, Tag 42701.
func (m NoPaymentStubs) HasPaymentStubStartDateOffsetPeriod() bool {
	return m.Has(tag.PaymentStubStartDateOffsetPeriod)
}

// HasPaymentStubStartDateOffsetUnit returns true if PaymentStubStartDateOffsetUnit is present, Tag 42702.
func (m NoPaymentStubs) HasPaymentStubStartDateOffsetUnit() bool {
	return m.Has(tag.PaymentStubStartDateOffsetUnit)
}

// HasPaymentStubStartDateOffsetDayType returns true if PaymentStubStartDateOffsetDayType is present, Tag 42703.
func (m NoPaymentStubs) HasPaymentStubStartDateOffsetDayType() bool {
	return m.Has(tag.PaymentStubStartDateOffsetDayType)
}

// HasPaymentStubStartDateAdjusted returns true if PaymentStubStartDateAdjusted is present, Tag 42704.
func (m NoPaymentStubs) HasPaymentStubStartDateAdjusted() bool {
	return m.Has(tag.PaymentStubStartDateAdjusted)
}

// HasPaymentStubEndDateUnadjusted returns true if PaymentStubEndDateUnadjusted is present, Tag 42689.
func (m NoPaymentStubs) HasPaymentStubEndDateUnadjusted() bool {
	return m.Has(tag.PaymentStubEndDateUnadjusted)
}

// HasPaymentStubEndDateBusinessDayConvention returns true if PaymentStubEndDateBusinessDayConvention is present, Tag 42690.
func (m NoPaymentStubs) HasPaymentStubEndDateBusinessDayConvention() bool {
	return m.Has(tag.PaymentStubEndDateBusinessDayConvention)
}

// HasNoPaymentStubEndDateBusinessCenters returns true if NoPaymentStubEndDateBusinessCenters is present, Tag 42696.
func (m NoPaymentStubs) HasNoPaymentStubEndDateBusinessCenters() bool {
	return m.Has(tag.NoPaymentStubEndDateBusinessCenters)
}

// HasPaymentStubEndDateRelativeTo returns true if PaymentStubEndDateRelativeTo is present, Tag 42691.
func (m NoPaymentStubs) HasPaymentStubEndDateRelativeTo() bool {
	return m.Has(tag.PaymentStubEndDateRelativeTo)
}

// HasPaymentStubEndDateOffsetPeriod returns true if PaymentStubEndDateOffsetPeriod is present, Tag 42692.
func (m NoPaymentStubs) HasPaymentStubEndDateOffsetPeriod() bool {
	return m.Has(tag.PaymentStubEndDateOffsetPeriod)
}

// HasPaymentStubEndDateOffsetUnit returns true if PaymentStubEndDateOffsetUnit is present, Tag 42693.
func (m NoPaymentStubs) HasPaymentStubEndDateOffsetUnit() bool {
	return m.Has(tag.PaymentStubEndDateOffsetUnit)
}

// HasPaymentStubEndDateOffsetDayType returns true if PaymentStubEndDateOffsetDayType is present, Tag 42694.
func (m NoPaymentStubs) HasPaymentStubEndDateOffsetDayType() bool {
	return m.Has(tag.PaymentStubEndDateOffsetDayType)
}

// HasPaymentStubEndDateAdjusted returns true if PaymentStubEndDateAdjusted is present, Tag 42695.
func (m NoPaymentStubs) HasPaymentStubEndDateAdjusted() bool {
	return m.Has(tag.PaymentStubEndDateAdjusted)
}

// NoPaymentStubStartDateBusinessCenters is a repeating group element, Tag 42705.
type NoPaymentStubStartDateBusinessCenters struct {
	*quickfix.Group
}

// SetPaymentStubStartDateBusinessCenter sets PaymentStubStartDateBusinessCenter, Tag 42706.
func (m NoPaymentStubStartDateBusinessCenters) SetPaymentStubStartDateBusinessCenter(v string) {
	m.Set(field.NewPaymentStubStartDateBusinessCenter(v))
}

// GetPaymentStubStartDateBusinessCenter gets PaymentStubStartDateBusinessCenter, Tag 42706.
func (m NoPaymentStubStartDateBusinessCenters) GetPaymentStubStartDateBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStubStartDateBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasPaymentStubStartDateBusinessCenter returns true if PaymentStubStartDateBusinessCenter is present, Tag 42706.
func (m NoPaymentStubStartDateBusinessCenters) HasPaymentStubStartDateBusinessCenter() bool {
	return m.Has(tag.PaymentStubStartDateBusinessCenter)
}

// NoPaymentStubStartDateBusinessCentersRepeatingGroup is a repeating group, Tag 42705.
type NoPaymentStubStartDateBusinessCentersRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoPaymentStubStartDateBusinessCentersRepeatingGroup returns an initialized, NoPaymentStubStartDateBusinessCentersRepeatingGroup.
func NewNoPaymentStubStartDateBusinessCentersRepeatingGroup() NoPaymentStubStartDateBusinessCentersRepeatingGroup {
	return NoPaymentStubStartDateBusinessCentersRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoPaymentStubStartDateBusinessCenters,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.PaymentStubStartDateBusinessCenter),
			},
		),
	}
}

// Add create and append a new NoPaymentStubStartDateBusinessCenters to this group.
func (m NoPaymentStubStartDateBusinessCentersRepeatingGroup) Add() NoPaymentStubStartDateBusinessCenters {
	g := m.RepeatingGroup.Add()
	return NoPaymentStubStartDateBusinessCenters{g}
}

// Get returns the ith NoPaymentStubStartDateBusinessCenters in the NoPaymentStubStartDateBusinessCentersRepeatinGroup.
func (m NoPaymentStubStartDateBusinessCentersRepeatingGroup) Get(i int) NoPaymentStubStartDateBusinessCenters {
	return NoPaymentStubStartDateBusinessCenters{m.RepeatingGroup.Get(i)}
}

// NoPaymentStubEndDateBusinessCenters is a repeating group element, Tag 42696.
type NoPaymentStubEndDateBusinessCenters struct {
	*quickfix.Group
}

// SetPaymentStubEndDateBusinessCenter sets PaymentStubEndDateBusinessCenter, Tag 42697.
func (m NoPaymentStubEndDateBusinessCenters) SetPaymentStubEndDateBusinessCenter(v string) {
	m.Set(field.NewPaymentStubEndDateBusinessCenter(v))
}

// GetPaymentStubEndDateBusinessCenter gets PaymentStubEndDateBusinessCenter, Tag 42697.
func (m NoPaymentStubEndDateBusinessCenters) GetPaymentStubEndDateBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.PaymentStubEndDateBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasPaymentStubEndDateBusinessCenter returns true if PaymentStubEndDateBusinessCenter is present, Tag 42697.
func (m NoPaymentStubEndDateBusinessCenters) HasPaymentStubEndDateBusinessCenter() bool {
	return m.Has(tag.PaymentStubEndDateBusinessCenter)
}

// NoPaymentStubEndDateBusinessCentersRepeatingGroup is a repeating group, Tag 42696.
type NoPaymentStubEndDateBusinessCentersRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoPaymentStubEndDateBusinessCentersRepeatingGroup returns an initialized, NoPaymentStubEndDateBusinessCentersRepeatingGroup.
func NewNoPaymentStubEndDateBusinessCentersRepeatingGroup() NoPaymentStubEndDateBusinessCentersRepeatingGroup {
	return NoPaymentStubEndDateBusinessCentersRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoPaymentStubEndDateBusinessCenters,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.PaymentStubEndDateBusinessCenter),
			},
		),
	}
}

// Add create and append a new NoPaymentStubEndDateBusinessCenters to this group.
func (m NoPaymentStubEndDateBusinessCentersRepeatingGroup) Add() NoPaymentStubEndDateBusinessCenters {
	g := m.RepeatingGroup.Add()
	return NoPaymentStubEndDateBusinessCenters{g}
}

// Get returns the ith NoPaymentStubEndDateBusinessCenters in the NoPaymentStubEndDateBusinessCentersRepeatinGroup.
func (m NoPaymentStubEndDateBusinessCentersRepeatingGroup) Get(i int) NoPaymentStubEndDateBusinessCenters {
	return NoPaymentStubEndDateBusinessCenters{m.RepeatingGroup.Get(i)}
}

// NoPaymentStubsRepeatingGroup is a repeating group, Tag 40872.
type NoPaymentStubsRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoPaymentStubsRepeatingGroup returns an initialized, NoPaymentStubsRepeatingGroup.
func NewNoPaymentStubsRepeatingGroup() NoPaymentStubsRepeatingGroup {
	return NoPaymentStubsRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoPaymentStubs,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.PaymentStubType),
				quickfix.GroupElement(tag.PaymentStubLength),
				quickfix.GroupElement(tag.PaymentStubRate),
				quickfix.GroupElement(tag.PaymentStubFixedAmount),
				quickfix.GroupElement(tag.PaymentStubFixedCurrency),
				quickfix.GroupElement(tag.PaymentStubIndex),
				quickfix.GroupElement(tag.PaymentStubIndexSource),
				quickfix.GroupElement(tag.PaymentStubIndexCurvePeriod),
				quickfix.GroupElement(tag.PaymentStubIndexCurveUnit),
				quickfix.GroupElement(tag.PaymentStubIndexRateMultiplier),
				quickfix.GroupElement(tag.PaymentStubIndexRateSpread),
				quickfix.GroupElement(tag.PaymentStubIndexRateSpreadPositionType),
				quickfix.GroupElement(tag.PaymentStubIndexRateTreatment),
				quickfix.GroupElement(tag.PaymentStubIndexCapRate),
				quickfix.GroupElement(tag.PaymentStubIndexCapRateBuySide),
				quickfix.GroupElement(tag.PaymentStubIndexCapRateSellSide),
				quickfix.GroupElement(tag.PaymentStubIndexFloorRate),
				quickfix.GroupElement(tag.PaymentStubIndexFloorRateBuySide),
				quickfix.GroupElement(tag.PaymentStubIndexFloorRateSellSide),
				quickfix.GroupElement(tag.PaymentStubIndex2),
				quickfix.GroupElement(tag.PaymentStubIndex2Source),
				quickfix.GroupElement(tag.PaymentStubIndex2CurvePeriod),
				quickfix.GroupElement(tag.PaymentStubIndex2CurveUnit),
				quickfix.GroupElement(tag.PaymentStubIndex2RateMultiplier),
				quickfix.GroupElement(tag.PaymentStubIndex2RateSpread),
				quickfix.GroupElement(tag.PaymentStubIndex2RateSpreadPositionType),
				quickfix.GroupElement(tag.PaymentStubIndex2RateTreatment),
				quickfix.GroupElement(tag.PaymentStubIndex2CapRate),
				quickfix.GroupElement(tag.PaymentStubIndex2FloorRate),
				quickfix.GroupElement(tag.PaymentStubStartDateUnadjusted),
				quickfix.GroupElement(tag.PaymentStubStartDateBusinessDayConvention),
				NewNoPaymentStubStartDateBusinessCentersRepeatingGroup(),
				quickfix.GroupElement(tag.PaymentStubStartDateRelativeTo),
				quickfix.GroupElement(tag.PaymentStubStartDateOffsetPeriod),
				quickfix.GroupElement(tag.PaymentStubStartDateOffsetUnit),
				quickfix.GroupElement(tag.PaymentStubStartDateOffsetDayType),
				quickfix.GroupElement(tag.PaymentStubStartDateAdjusted),
				quickfix.GroupElement(tag.PaymentStubEndDateUnadjusted),
				quickfix.GroupElement(tag.PaymentStubEndDateBusinessDayConvention),
				NewNoPaymentStubEndDateBusinessCentersRepeatingGroup(),
				quickfix.GroupElement(tag.PaymentStubEndDateRelativeTo),
				quickfix.GroupElement(tag.PaymentStubEndDateOffsetPeriod),
				quickfix.GroupElement(tag.PaymentStubEndDateOffsetUnit),
				quickfix.GroupElement(tag.PaymentStubEndDateOffsetDayType),
				quickfix.GroupElement(tag.PaymentStubEndDateAdjusted),
			},
		),
	}
}

// Add create and append a new NoPaymentStubs to this group.
func (m NoPaymentStubsRepeatingGroup) Add() NoPaymentStubs {
	g := m.RepeatingGroup.Add()
	return NoPaymentStubs{g}
}

// Get returns the ith NoPaymentStubs in the NoPaymentStubsRepeatinGroup.
func (m NoPaymentStubsRepeatingGroup) Get(i int) NoPaymentStubs {
	return NoPaymentStubs{m.RepeatingGroup.Get(i)}
}

// NoStreamCommodityAltIDs is a repeating group element, Tag 41277.
type NoStreamCommodityAltIDs struct {
	*quickfix.Group
}

// SetStreamCommodityAltID sets StreamCommodityAltID, Tag 41278.
func (m NoStreamCommodityAltIDs) SetStreamCommodityAltID(v string) {
	m.Set(field.NewStreamCommodityAltID(v))
}

// SetStreamCommodityAltIDSource sets StreamCommodityAltIDSource, Tag 41279.
func (m NoStreamCommodityAltIDs) SetStreamCommodityAltIDSource(v string) {
	m.Set(field.NewStreamCommodityAltIDSource(v))
}

// GetStreamCommodityAltID gets StreamCommodityAltID, Tag 41278.
func (m NoStreamCommodityAltIDs) GetStreamCommodityAltID() (v string, err quickfix.MessageRejectError) {
	var f field.StreamCommodityAltIDField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStreamCommodityAltIDSource gets StreamCommodityAltIDSource, Tag 41279.
func (m NoStreamCommodityAltIDs) GetStreamCommodityAltIDSource() (v string, err quickfix.MessageRejectError) {
	var f field.StreamCommodityAltIDSourceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasStreamCommodityAltID returns true if StreamCommodityAltID is present, Tag 41278.
func (m NoStreamCommodityAltIDs) HasStreamCommodityAltID() bool {
	return m.Has(tag.StreamCommodityAltID)
}

// HasStreamCommodityAltIDSource returns true if StreamCommodityAltIDSource is present, Tag 41279.
func (m NoStreamCommodityAltIDs) HasStreamCommodityAltIDSource() bool {
	return m.Has(tag.StreamCommodityAltIDSource)
}

// NoStreamCommodityAltIDsRepeatingGroup is a repeating group, Tag 41277.
type NoStreamCommodityAltIDsRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoStreamCommodityAltIDsRepeatingGroup returns an initialized, NoStreamCommodityAltIDsRepeatingGroup.
func NewNoStreamCommodityAltIDsRepeatingGroup() NoStreamCommodityAltIDsRepeatingGroup {
	return NoStreamCommodityAltIDsRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoStreamCommodityAltIDs,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.StreamCommodityAltID),
				quickfix.GroupElement(tag.StreamCommodityAltIDSource),
			},
		),
	}
}

// Add create and append a new NoStreamCommodityAltIDs to this group.
func (m NoStreamCommodityAltIDsRepeatingGroup) Add() NoStreamCommodityAltIDs {
	g := m.RepeatingGroup.Add()
	return NoStreamCommodityAltIDs{g}
}

// Get returns the ith NoStreamCommodityAltIDs in the NoStreamCommodityAltIDsRepeatinGroup.
func (m NoStreamCommodityAltIDsRepeatingGroup) Get(i int) NoStreamCommodityAltIDs {
	return NoStreamCommodityAltIDs{m.RepeatingGroup.Get(i)}
}

// NoStreamAssetAttributes is a repeating group element, Tag 41237.
type NoStreamAssetAttributes struct {
	*quickfix.Group
}

// SetStreamAssetAttributeType sets StreamAssetAttributeType, Tag 41238.
func (m NoStreamAssetAttributes) SetStreamAssetAttributeType(v string) {
	m.Set(field.NewStreamAssetAttributeType(v))
}

// SetStreamAssetAttributeValue sets StreamAssetAttributeValue, Tag 41239.
func (m NoStreamAssetAttributes) SetStreamAssetAttributeValue(v string) {
	m.Set(field.NewStreamAssetAttributeValue(v))
}

// SetStreamAssetAttributeLimit sets StreamAssetAttributeLimit, Tag 41240.
func (m NoStreamAssetAttributes) SetStreamAssetAttributeLimit(v string) {
	m.Set(field.NewStreamAssetAttributeLimit(v))
}

// GetStreamAssetAttributeType gets StreamAssetAttributeType, Tag 41238.
func (m NoStreamAssetAttributes) GetStreamAssetAttributeType() (v string, err quickfix.MessageRejectError) {
	var f field.StreamAssetAttributeTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStreamAssetAttributeValue gets StreamAssetAttributeValue, Tag 41239.
func (m NoStreamAssetAttributes) GetStreamAssetAttributeValue() (v string, err quickfix.MessageRejectError) {
	var f field.StreamAssetAttributeValueField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStreamAssetAttributeLimit gets StreamAssetAttributeLimit, Tag 41240.
func (m NoStreamAssetAttributes) GetStreamAssetAttributeLimit() (v string, err quickfix.MessageRejectError) {
	var f field.StreamAssetAttributeLimitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasStreamAssetAttributeType returns true if StreamAssetAttributeType is present, Tag 41238.
func (m NoStreamAssetAttributes) HasStreamAssetAttributeType() bool {
	return m.Has(tag.StreamAssetAttributeType)
}

// HasStreamAssetAttributeValue returns true if StreamAssetAttributeValue is present, Tag 41239.
func (m NoStreamAssetAttributes) HasStreamAssetAttributeValue() bool {
	return m.Has(tag.StreamAssetAttributeValue)
}

// HasStreamAssetAttributeLimit returns true if StreamAssetAttributeLimit is present, Tag 41240.
func (m NoStreamAssetAttributes) HasStreamAssetAttributeLimit() bool {
	return m.Has(tag.StreamAssetAttributeLimit)
}

// NoStreamAssetAttributesRepeatingGroup is a repeating group, Tag 41237.
type NoStreamAssetAttributesRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoStreamAssetAttributesRepeatingGroup returns an initialized, NoStreamAssetAttributesRepeatingGroup.
func NewNoStreamAssetAttributesRepeatingGroup() NoStreamAssetAttributesRepeatingGroup {
	return NoStreamAssetAttributesRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoStreamAssetAttributes,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.StreamAssetAttributeType),
				quickfix.GroupElement(tag.StreamAssetAttributeValue),
				quickfix.GroupElement(tag.StreamAssetAttributeLimit),
			},
		),
	}
}

// Add create and append a new NoStreamAssetAttributes to this group.
func (m NoStreamAssetAttributesRepeatingGroup) Add() NoStreamAssetAttributes {
	g := m.RepeatingGroup.Add()
	return NoStreamAssetAttributes{g}
}

// Get returns the ith NoStreamAssetAttributes in the NoStreamAssetAttributesRepeatinGroup.
func (m NoStreamAssetAttributesRepeatingGroup) Get(i int) NoStreamAssetAttributes {
	return NoStreamAssetAttributes{m.RepeatingGroup.Get(i)}
}

// NoStreamCommodityDataSources is a repeating group element, Tag 41280.
type NoStreamCommodityDataSources struct {
	*quickfix.Group
}

// SetStreamCommodityDataSourceID sets StreamCommodityDataSourceID, Tag 41281.
func (m NoStreamCommodityDataSources) SetStreamCommodityDataSourceID(v string) {
	m.Set(field.NewStreamCommodityDataSourceID(v))
}

// SetStreamCommodityDataSourceIDType sets StreamCommodityDataSourceIDType, Tag 41282.
func (m NoStreamCommodityDataSources) SetStreamCommodityDataSourceIDType(v enum.StreamCommodityDataSourceIDType) {
	m.Set(field.NewStreamCommodityDataSourceIDType(v))
}

// GetStreamCommodityDataSourceID gets StreamCommodityDataSourceID, Tag 41281.
func (m NoStreamCommodityDataSources) GetStreamCommodityDataSourceID() (v string, err quickfix.MessageRejectError) {
	var f field.StreamCommodityDataSourceIDField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStreamCommodityDataSourceIDType gets StreamCommodityDataSourceIDType, Tag 41282.
func (m NoStreamCommodityDataSources) GetStreamCommodityDataSourceIDType() (v enum.StreamCommodityDataSourceIDType, err quickfix.MessageRejectError) {
	var f field.StreamCommodityDataSourceIDTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasStreamCommodityDataSourceID returns true if StreamCommodityDataSourceID is present, Tag 41281.
func (m NoStreamCommodityDataSources) HasStreamCommodityDataSourceID() bool {
	return m.Has(tag.StreamCommodityDataSourceID)
}

// HasStreamCommodityDataSourceIDType returns true if StreamCommodityDataSourceIDType is present, Tag 41282.
func (m NoStreamCommodityDataSources) HasStreamCommodityDataSourceIDType() bool {
	return m.Has(tag.StreamCommodityDataSourceIDType)
}

// NoStreamCommodityDataSourcesRepeatingGroup is a repeating group, Tag 41280.
type NoStreamCommodityDataSourcesRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoStreamCommodityDataSourcesRepeatingGroup returns an initialized, NoStreamCommodityDataSourcesRepeatingGroup.
func NewNoStreamCommodityDataSourcesRepeatingGroup() NoStreamCommodityDataSourcesRepeatingGroup {
	return NoStreamCommodityDataSourcesRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoStreamCommodityDataSources,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.StreamCommodityDataSourceID),
				quickfix.GroupElement(tag.StreamCommodityDataSourceIDType),
			},
		),
	}
}

// Add create and append a new NoStreamCommodityDataSources to this group.
func (m NoStreamCommodityDataSourcesRepeatingGroup) Add() NoStreamCommodityDataSources {
	g := m.RepeatingGroup.Add()
	return NoStreamCommodityDataSources{g}
}

// Get returns the ith NoStreamCommodityDataSources in the NoStreamCommodityDataSourcesRepeatinGroup.
func (m NoStreamCommodityDataSourcesRepeatingGroup) Get(i int) NoStreamCommodityDataSources {
	return NoStreamCommodityDataSources{m.RepeatingGroup.Get(i)}
}

// NoStreamCommoditySettlBusinessCenters is a repeating group element, Tag 41249.
type NoStreamCommoditySettlBusinessCenters struct {
	*quickfix.Group
}

// SetStreamCommoditySettlBusinessCenter sets StreamCommoditySettlBusinessCenter, Tag 41250.
func (m NoStreamCommoditySettlBusinessCenters) SetStreamCommoditySettlBusinessCenter(v string) {
	m.Set(field.NewStreamCommoditySettlBusinessCenter(v))
}

// GetStreamCommoditySettlBusinessCenter gets StreamCommoditySettlBusinessCenter, Tag 41250.
func (m NoStreamCommoditySettlBusinessCenters) GetStreamCommoditySettlBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.StreamCommoditySettlBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasStreamCommoditySettlBusinessCenter returns true if StreamCommoditySettlBusinessCenter is present, Tag 41250.
func (m NoStreamCommoditySettlBusinessCenters) HasStreamCommoditySettlBusinessCenter() bool {
	return m.Has(tag.StreamCommoditySettlBusinessCenter)
}

// NoStreamCommoditySettlBusinessCentersRepeatingGroup is a repeating group, Tag 41249.
type NoStreamCommoditySettlBusinessCentersRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoStreamCommoditySettlBusinessCentersRepeatingGroup returns an initialized, NoStreamCommoditySettlBusinessCentersRepeatingGroup.
func NewNoStreamCommoditySettlBusinessCentersRepeatingGroup() NoStreamCommoditySettlBusinessCentersRepeatingGroup {
	return NoStreamCommoditySettlBusinessCentersRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoStreamCommoditySettlBusinessCenters,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.StreamCommoditySettlBusinessCenter),
			},
		),
	}
}

// Add create and append a new NoStreamCommoditySettlBusinessCenters to this group.
func (m NoStreamCommoditySettlBusinessCentersRepeatingGroup) Add() NoStreamCommoditySettlBusinessCenters {
	g := m.RepeatingGroup.Add()
	return NoStreamCommoditySettlBusinessCenters{g}
}

// Get returns the ith NoStreamCommoditySettlBusinessCenters in the NoStreamCommoditySettlBusinessCentersRepeatinGroup.
func (m NoStreamCommoditySettlBusinessCentersRepeatingGroup) Get(i int) NoStreamCommoditySettlBusinessCenters {
	return NoStreamCommoditySettlBusinessCenters{m.RepeatingGroup.Get(i)}
}

// NoStreamCommoditySettlPeriods is a repeating group element, Tag 41289.
type NoStreamCommoditySettlPeriods struct {
	*quickfix.Group
}

// SetStreamCommoditySettlCountry sets StreamCommoditySettlCountry, Tag 41290.
func (m NoStreamCommoditySettlPeriods) SetStreamCommoditySettlCountry(v string) {
	m.Set(field.NewStreamCommoditySettlCountry(v))
}

// SetStreamCommoditySettlTimeZone sets StreamCommoditySettlTimeZone, Tag 41291.
func (m NoStreamCommoditySettlPeriods) SetStreamCommoditySettlTimeZone(v string) {
	m.Set(field.NewStreamCommoditySettlTimeZone(v))
}

// SetStreamCommoditySettlFlowType sets StreamCommoditySettlFlowType, Tag 41292.
func (m NoStreamCommoditySettlPeriods) SetStreamCommoditySettlFlowType(v int) {
	m.Set(field.NewStreamCommoditySettlFlowType(v))
}

// SetStreamCommoditySettlPeriodNotional sets StreamCommoditySettlPeriodNotional, Tag 41293.
func (m NoStreamCommoditySettlPeriods) SetStreamCommoditySettlPeriodNotional(value decimal.Decimal, scale int32) {
	m.Set(field.NewStreamCommoditySettlPeriodNotional(value, scale))
}

// SetStreamCommoditySettlPeriodNotionalUnitOfMeasure sets StreamCommoditySettlPeriodNotionalUnitOfMeasure, Tag 41294.
func (m NoStreamCommoditySettlPeriods) SetStreamCommoditySettlPeriodNotionalUnitOfMeasure(v string) {
	m.Set(field.NewStreamCommoditySettlPeriodNotionalUnitOfMeasure(v))
}

// SetStreamCommoditySettlPeriodFrequencyPeriod sets StreamCommoditySettlPeriodFrequencyPeriod, Tag 41295.
func (m NoStreamCommoditySettlPeriods) SetStreamCommoditySettlPeriodFrequencyPeriod(v int) {
	m.Set(field.NewStreamCommoditySettlPeriodFrequencyPeriod(v))
}

// SetStreamCommoditySettlPeriodFrequencyUnit sets StreamCommoditySettlPeriodFrequencyUnit, Tag 41296.
func (m NoStreamCommoditySettlPeriods) SetStreamCommoditySettlPeriodFrequencyUnit(v string) {
	m.Set(field.NewStreamCommoditySettlPeriodFrequencyUnit(v))
}

// SetStreamCommoditySettlPeriodPrice sets StreamCommoditySettlPeriodPrice, Tag 41297.
func (m NoStreamCommoditySettlPeriods) SetStreamCommoditySettlPeriodPrice(value decimal.Decimal, scale int32) {
	m.Set(field.NewStreamCommoditySettlPeriodPrice(value, scale))
}

// SetStreamCommoditySettlPeriodPriceUnitOfMeasure sets StreamCommoditySettlPeriodPriceUnitOfMeasure, Tag 41298.
func (m NoStreamCommoditySettlPeriods) SetStreamCommoditySettlPeriodPriceUnitOfMeasure(v string) {
	m.Set(field.NewStreamCommoditySettlPeriodPriceUnitOfMeasure(v))
}

// SetStreamCommoditySettlPeriodPriceCurrency sets StreamCommoditySettlPeriodPriceCurrency, Tag 41299.
func (m NoStreamCommoditySettlPeriods) SetStreamCommoditySettlPeriodPriceCurrency(v string) {
	m.Set(field.NewStreamCommoditySettlPeriodPriceCurrency(v))
}

// SetStreamCommoditySettlHolidaysProcessingInstruction sets StreamCommoditySettlHolidaysProcessingInstruction, Tag 41300.
func (m NoStreamCommoditySettlPeriods) SetStreamCommoditySettlHolidaysProcessingInstruction(v int) {
	m.Set(field.NewStreamCommoditySettlHolidaysProcessingInstruction(v))
}

// SetNoStreamCommoditySettlDays sets NoStreamCommoditySettlDays, Tag 41283.
func (m NoStreamCommoditySettlPeriods) SetNoStreamCommoditySettlDays(f NoStreamCommoditySettlDaysRepeatingGroup) {
	m.SetGroup(f)
}

// SetStreamCommoditySettlPeriodXID sets StreamCommoditySettlPeriodXID, Tag 41301.
func (m NoStreamCommoditySettlPeriods) SetStreamCommoditySettlPeriodXID(v string) {
	m.Set(field.NewStreamCommoditySettlPeriodXID(v))
}

// SetStreamCommoditySettlPeriodXIDRef sets StreamCommoditySettlPeriodXIDRef, Tag 41302.
func (m NoStreamCommoditySettlPeriods) SetStreamCommoditySettlPeriodXIDRef(v string) {
	m.Set(field.NewStreamCommoditySettlPeriodXIDRef(v))
}

// GetStreamCommoditySettlCountry gets StreamCommoditySettlCountry, Tag 41290.
func (m NoStreamCommoditySettlPeriods) GetStreamCommoditySettlCountry() (v string, err quickfix.MessageRejectError) {
	var f field.StreamCommoditySettlCountryField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStreamCommoditySettlTimeZone gets StreamCommoditySettlTimeZone, Tag 41291.
func (m NoStreamCommoditySettlPeriods) GetStreamCommoditySettlTimeZone() (v string, err quickfix.MessageRejectError) {
	var f field.StreamCommoditySettlTimeZoneField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStreamCommoditySettlFlowType gets StreamCommoditySettlFlowType, Tag 41292.
func (m NoStreamCommoditySettlPeriods) GetStreamCommoditySettlFlowType() (v int, err quickfix.MessageRejectError) {
	var f field.StreamCommoditySettlFlowTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStreamCommoditySettlPeriodNotional gets StreamCommoditySettlPeriodNotional, Tag 41293.
func (m NoStreamCommoditySettlPeriods) GetStreamCommoditySettlPeriodNotional() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.StreamCommoditySettlPeriodNotionalField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStreamCommoditySettlPeriodNotionalUnitOfMeasure gets StreamCommoditySettlPeriodNotionalUnitOfMeasure, Tag 41294.
func (m NoStreamCommoditySettlPeriods) GetStreamCommoditySettlPeriodNotionalUnitOfMeasure() (v string, err quickfix.MessageRejectError) {
	var f field.StreamCommoditySettlPeriodNotionalUnitOfMeasureField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStreamCommoditySettlPeriodFrequencyPeriod gets StreamCommoditySettlPeriodFrequencyPeriod, Tag 41295.
func (m NoStreamCommoditySettlPeriods) GetStreamCommoditySettlPeriodFrequencyPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.StreamCommoditySettlPeriodFrequencyPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStreamCommoditySettlPeriodFrequencyUnit gets StreamCommoditySettlPeriodFrequencyUnit, Tag 41296.
func (m NoStreamCommoditySettlPeriods) GetStreamCommoditySettlPeriodFrequencyUnit() (v string, err quickfix.MessageRejectError) {
	var f field.StreamCommoditySettlPeriodFrequencyUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStreamCommoditySettlPeriodPrice gets StreamCommoditySettlPeriodPrice, Tag 41297.
func (m NoStreamCommoditySettlPeriods) GetStreamCommoditySettlPeriodPrice() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.StreamCommoditySettlPeriodPriceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStreamCommoditySettlPeriodPriceUnitOfMeasure gets StreamCommoditySettlPeriodPriceUnitOfMeasure, Tag 41298.
func (m NoStreamCommoditySettlPeriods) GetStreamCommoditySettlPeriodPriceUnitOfMeasure() (v string, err quickfix.MessageRejectError) {
	var f field.StreamCommoditySettlPeriodPriceUnitOfMeasureField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStreamCommoditySettlPeriodPriceCurrency gets StreamCommoditySettlPeriodPriceCurrency, Tag 41299.
func (m NoStreamCommoditySettlPeriods) GetStreamCommoditySettlPeriodPriceCurrency() (v string, err quickfix.MessageRejectError) {
	var f field.StreamCommoditySettlPeriodPriceCurrencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStreamCommoditySettlHolidaysProcessingInstruction gets StreamCommoditySettlHolidaysProcessingInstruction, Tag 41300.
func (m NoStreamCommoditySettlPeriods) GetStreamCommoditySettlHolidaysProcessingInstruction() (v int, err quickfix.MessageRejectError) {
	var f field.StreamCommoditySettlHolidaysProcessingInstructionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoStreamCommoditySettlDays gets NoStreamCommoditySettlDays, Tag 41283.
func (m NoStreamCommoditySettlPeriods) GetNoStreamCommoditySettlDays() (NoStreamCommoditySettlDaysRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoStreamCommoditySettlDaysRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetStreamCommoditySettlPeriodXID gets StreamCommoditySettlPeriodXID, Tag 41301.
func (m NoStreamCommoditySettlPeriods) GetStreamCommoditySettlPeriodXID() (v string, err quickfix.MessageRejectError) {
	var f field.StreamCommoditySettlPeriodXIDField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStreamCommoditySettlPeriodXIDRef gets StreamCommoditySettlPeriodXIDRef, Tag 41302.
func (m NoStreamCommoditySettlPeriods) GetStreamCommoditySettlPeriodXIDRef() (v string, err quickfix.MessageRejectError) {
	var f field.StreamCommoditySettlPeriodXIDRefField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasStreamCommoditySettlCountry returns true if StreamCommoditySettlCountry is present, Tag 41290.
func (m NoStreamCommoditySettlPeriods) HasStreamCommoditySettlCountry() bool {
	return m.Has(tag.StreamCommoditySettlCountry)
}

// HasStreamCommoditySettlTimeZone returns true if StreamCommoditySettlTimeZone is present, Tag 41291.
func (m NoStreamCommoditySettlPeriods) HasStreamCommoditySettlTimeZone() bool {
	return m.Has(tag.StreamCommoditySettlTimeZone)
}

// HasStreamCommoditySettlFlowType returns true if StreamCommoditySettlFlowType is present, Tag 41292.
func (m NoStreamCommoditySettlPeriods) HasStreamCommoditySettlFlowType() bool {
	return m.Has(tag.StreamCommoditySettlFlowType)
}

// HasStreamCommoditySettlPeriodNotional returns true if StreamCommoditySettlPeriodNotional is present, Tag 41293.
func (m NoStreamCommoditySettlPeriods) HasStreamCommoditySettlPeriodNotional() bool {
	return m.Has(tag.StreamCommoditySettlPeriodNotional)
}

// HasStreamCommoditySettlPeriodNotionalUnitOfMeasure returns true if StreamCommoditySettlPeriodNotionalUnitOfMeasure is present, Tag 41294.
func (m NoStreamCommoditySettlPeriods) HasStreamCommoditySettlPeriodNotionalUnitOfMeasure() bool {
	return m.Has(tag.StreamCommoditySettlPeriodNotionalUnitOfMeasure)
}

// HasStreamCommoditySettlPeriodFrequencyPeriod returns true if StreamCommoditySettlPeriodFrequencyPeriod is present, Tag 41295.
func (m NoStreamCommoditySettlPeriods) HasStreamCommoditySettlPeriodFrequencyPeriod() bool {
	return m.Has(tag.StreamCommoditySettlPeriodFrequencyPeriod)
}

// HasStreamCommoditySettlPeriodFrequencyUnit returns true if StreamCommoditySettlPeriodFrequencyUnit is present, Tag 41296.
func (m NoStreamCommoditySettlPeriods) HasStreamCommoditySettlPeriodFrequencyUnit() bool {
	return m.Has(tag.StreamCommoditySettlPeriodFrequencyUnit)
}

// HasStreamCommoditySettlPeriodPrice returns true if StreamCommoditySettlPeriodPrice is present, Tag 41297.
func (m NoStreamCommoditySettlPeriods) HasStreamCommoditySettlPeriodPrice() bool {
	return m.Has(tag.StreamCommoditySettlPeriodPrice)
}

// HasStreamCommoditySettlPeriodPriceUnitOfMeasure returns true if StreamCommoditySettlPeriodPriceUnitOfMeasure is present, Tag 41298.
func (m NoStreamCommoditySettlPeriods) HasStreamCommoditySettlPeriodPriceUnitOfMeasure() bool {
	return m.Has(tag.StreamCommoditySettlPeriodPriceUnitOfMeasure)
}

// HasStreamCommoditySettlPeriodPriceCurrency returns true if StreamCommoditySettlPeriodPriceCurrency is present, Tag 41299.
func (m NoStreamCommoditySettlPeriods) HasStreamCommoditySettlPeriodPriceCurrency() bool {
	return m.Has(tag.StreamCommoditySettlPeriodPriceCurrency)
}

// HasStreamCommoditySettlHolidaysProcessingInstruction returns true if StreamCommoditySettlHolidaysProcessingInstruction is present, Tag 41300.
func (m NoStreamCommoditySettlPeriods) HasStreamCommoditySettlHolidaysProcessingInstruction() bool {
	return m.Has(tag.StreamCommoditySettlHolidaysProcessingInstruction)
}

// HasNoStreamCommoditySettlDays returns true if NoStreamCommoditySettlDays is present, Tag 41283.
func (m NoStreamCommoditySettlPeriods) HasNoStreamCommoditySettlDays() bool {
	return m.Has(tag.NoStreamCommoditySettlDays)
}

// HasStreamCommoditySettlPeriodXID returns true if StreamCommoditySettlPeriodXID is present, Tag 41301.
func (m NoStreamCommoditySettlPeriods) HasStreamCommoditySettlPeriodXID() bool {
	return m.Has(tag.StreamCommoditySettlPeriodXID)
}

// HasStreamCommoditySettlPeriodXIDRef returns true if StreamCommoditySettlPeriodXIDRef is present, Tag 41302.
func (m NoStreamCommoditySettlPeriods) HasStreamCommoditySettlPeriodXIDRef() bool {
	return m.Has(tag.StreamCommoditySettlPeriodXIDRef)
}

// NoStreamCommoditySettlDays is a repeating group element, Tag 41283.
type NoStreamCommoditySettlDays struct {
	*quickfix.Group
}

// SetStreamCommoditySettlDay sets StreamCommoditySettlDay, Tag 41284.
func (m NoStreamCommoditySettlDays) SetStreamCommoditySettlDay(v int) {
	m.Set(field.NewStreamCommoditySettlDay(v))
}

// SetStreamCommoditySettlTotalHours sets StreamCommoditySettlTotalHours, Tag 41285.
func (m NoStreamCommoditySettlDays) SetStreamCommoditySettlTotalHours(v int) {
	m.Set(field.NewStreamCommoditySettlTotalHours(v))
}

// SetNoStreamCommoditySettlTimes sets NoStreamCommoditySettlTimes, Tag 41286.
func (m NoStreamCommoditySettlDays) SetNoStreamCommoditySettlTimes(f NoStreamCommoditySettlTimesRepeatingGroup) {
	m.SetGroup(f)
}

// GetStreamCommoditySettlDay gets StreamCommoditySettlDay, Tag 41284.
func (m NoStreamCommoditySettlDays) GetStreamCommoditySettlDay() (v int, err quickfix.MessageRejectError) {
	var f field.StreamCommoditySettlDayField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStreamCommoditySettlTotalHours gets StreamCommoditySettlTotalHours, Tag 41285.
func (m NoStreamCommoditySettlDays) GetStreamCommoditySettlTotalHours() (v int, err quickfix.MessageRejectError) {
	var f field.StreamCommoditySettlTotalHoursField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoStreamCommoditySettlTimes gets NoStreamCommoditySettlTimes, Tag 41286.
func (m NoStreamCommoditySettlDays) GetNoStreamCommoditySettlTimes() (NoStreamCommoditySettlTimesRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoStreamCommoditySettlTimesRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// HasStreamCommoditySettlDay returns true if StreamCommoditySettlDay is present, Tag 41284.
func (m NoStreamCommoditySettlDays) HasStreamCommoditySettlDay() bool {
	return m.Has(tag.StreamCommoditySettlDay)
}

// HasStreamCommoditySettlTotalHours returns true if StreamCommoditySettlTotalHours is present, Tag 41285.
func (m NoStreamCommoditySettlDays) HasStreamCommoditySettlTotalHours() bool {
	return m.Has(tag.StreamCommoditySettlTotalHours)
}

// HasNoStreamCommoditySettlTimes returns true if NoStreamCommoditySettlTimes is present, Tag 41286.
func (m NoStreamCommoditySettlDays) HasNoStreamCommoditySettlTimes() bool {
	return m.Has(tag.NoStreamCommoditySettlTimes)
}

// NoStreamCommoditySettlTimes is a repeating group element, Tag 41286.
type NoStreamCommoditySettlTimes struct {
	*quickfix.Group
}

// SetStreamCommoditySettlStart sets StreamCommoditySettlStart, Tag 41287.
func (m NoStreamCommoditySettlTimes) SetStreamCommoditySettlStart(v string) {
	m.Set(field.NewStreamCommoditySettlStart(v))
}

// SetStreamCommoditySettlEnd sets StreamCommoditySettlEnd, Tag 41288.
func (m NoStreamCommoditySettlTimes) SetStreamCommoditySettlEnd(v string) {
	m.Set(field.NewStreamCommoditySettlEnd(v))
}

// SetStreamCommoditySettlTimeType sets StreamCommoditySettlTimeType, Tag 41588.
func (m NoStreamCommoditySettlTimes) SetStreamCommoditySettlTimeType(v int) {
	m.Set(field.NewStreamCommoditySettlTimeType(v))
}

// GetStreamCommoditySettlStart gets StreamCommoditySettlStart, Tag 41287.
func (m NoStreamCommoditySettlTimes) GetStreamCommoditySettlStart() (v string, err quickfix.MessageRejectError) {
	var f field.StreamCommoditySettlStartField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStreamCommoditySettlEnd gets StreamCommoditySettlEnd, Tag 41288.
func (m NoStreamCommoditySettlTimes) GetStreamCommoditySettlEnd() (v string, err quickfix.MessageRejectError) {
	var f field.StreamCommoditySettlEndField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetStreamCommoditySettlTimeType gets StreamCommoditySettlTimeType, Tag 41588.
func (m NoStreamCommoditySettlTimes) GetStreamCommoditySettlTimeType() (v int, err quickfix.MessageRejectError) {
	var f field.StreamCommoditySettlTimeTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasStreamCommoditySettlStart returns true if StreamCommoditySettlStart is present, Tag 41287.
func (m NoStreamCommoditySettlTimes) HasStreamCommoditySettlStart() bool {
	return m.Has(tag.StreamCommoditySettlStart)
}

// HasStreamCommoditySettlEnd returns true if StreamCommoditySettlEnd is present, Tag 41288.
func (m NoStreamCommoditySettlTimes) HasStreamCommoditySettlEnd() bool {
	return m.Has(tag.StreamCommoditySettlEnd)
}

// HasStreamCommoditySettlTimeType returns true if StreamCommoditySettlTimeType is present, Tag 41588.
func (m NoStreamCommoditySettlTimes) HasStreamCommoditySettlTimeType() bool {
	return m.Has(tag.StreamCommoditySettlTimeType)
}

// NoStreamCommoditySettlTimesRepeatingGroup is a repeating group, Tag 41286.
type NoStreamCommoditySettlTimesRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoStreamCommoditySettlTimesRepeatingGroup returns an initialized, NoStreamCommoditySettlTimesRepeatingGroup.
func NewNoStreamCommoditySettlTimesRepeatingGroup() NoStreamCommoditySettlTimesRepeatingGroup {
	return NoStreamCommoditySettlTimesRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoStreamCommoditySettlTimes,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.StreamCommoditySettlStart),
				quickfix.GroupElement(tag.StreamCommoditySettlEnd),
				quickfix.GroupElement(tag.StreamCommoditySettlTimeType),
			},
		),
	}
}

// Add create and append a new NoStreamCommoditySettlTimes to this group.
func (m NoStreamCommoditySettlTimesRepeatingGroup) Add() NoStreamCommoditySettlTimes {
	g := m.RepeatingGroup.Add()
	return NoStreamCommoditySettlTimes{g}
}

// Get returns the ith NoStreamCommoditySettlTimes in the NoStreamCommoditySettlTimesRepeatinGroup.
func (m NoStreamCommoditySettlTimesRepeatingGroup) Get(i int) NoStreamCommoditySettlTimes {
	return NoStreamCommoditySettlTimes{m.RepeatingGroup.Get(i)}
}

// NoStreamCommoditySettlDaysRepeatingGroup is a repeating group, Tag 41283.
type NoStreamCommoditySettlDaysRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoStreamCommoditySettlDaysRepeatingGroup returns an initialized, NoStreamCommoditySettlDaysRepeatingGroup.
func NewNoStreamCommoditySettlDaysRepeatingGroup() NoStreamCommoditySettlDaysRepeatingGroup {
	return NoStreamCommoditySettlDaysRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoStreamCommoditySettlDays,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.StreamCommoditySettlDay),
				quickfix.GroupElement(tag.StreamCommoditySettlTotalHours),
				NewNoStreamCommoditySettlTimesRepeatingGroup(),
			},
		),
	}
}

// Add create and append a new NoStreamCommoditySettlDays to this group.
func (m NoStreamCommoditySettlDaysRepeatingGroup) Add() NoStreamCommoditySettlDays {
	g := m.RepeatingGroup.Add()
	return NoStreamCommoditySettlDays{g}
}

// Get returns the ith NoStreamCommoditySettlDays in the NoStreamCommoditySettlDaysRepeatinGroup.
func (m NoStreamCommoditySettlDaysRepeatingGroup) Get(i int) NoStreamCommoditySettlDays {
	return NoStreamCommoditySettlDays{m.RepeatingGroup.Get(i)}
}

// NoStreamCommoditySettlPeriodsRepeatingGroup is a repeating group, Tag 41289.
type NoStreamCommoditySettlPeriodsRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoStreamCommoditySettlPeriodsRepeatingGroup returns an initialized, NoStreamCommoditySettlPeriodsRepeatingGroup.
func NewNoStreamCommoditySettlPeriodsRepeatingGroup() NoStreamCommoditySettlPeriodsRepeatingGroup {
	return NoStreamCommoditySettlPeriodsRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoStreamCommoditySettlPeriods,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.StreamCommoditySettlCountry),
				quickfix.GroupElement(tag.StreamCommoditySettlTimeZone),
				quickfix.GroupElement(tag.StreamCommoditySettlFlowType),
				quickfix.GroupElement(tag.StreamCommoditySettlPeriodNotional),
				quickfix.GroupElement(tag.StreamCommoditySettlPeriodNotionalUnitOfMeasure),
				quickfix.GroupElement(tag.StreamCommoditySettlPeriodFrequencyPeriod),
				quickfix.GroupElement(tag.StreamCommoditySettlPeriodFrequencyUnit),
				quickfix.GroupElement(tag.StreamCommoditySettlPeriodPrice),
				quickfix.GroupElement(tag.StreamCommoditySettlPeriodPriceUnitOfMeasure),
				quickfix.GroupElement(tag.StreamCommoditySettlPeriodPriceCurrency),
				quickfix.GroupElement(tag.StreamCommoditySettlHolidaysProcessingInstruction),
				NewNoStreamCommoditySettlDaysRepeatingGroup(),
				quickfix.GroupElement(tag.StreamCommoditySettlPeriodXID),
				quickfix.GroupElement(tag.StreamCommoditySettlPeriodXIDRef),
			},
		),
	}
}

// Add create and append a new NoStreamCommoditySettlPeriods to this group.
func (m NoStreamCommoditySettlPeriodsRepeatingGroup) Add() NoStreamCommoditySettlPeriods {
	g := m.RepeatingGroup.Add()
	return NoStreamCommoditySettlPeriods{g}
}

// Get returns the ith NoStreamCommoditySettlPeriods in the NoStreamCommoditySettlPeriodsRepeatinGroup.
func (m NoStreamCommoditySettlPeriodsRepeatingGroup) Get(i int) NoStreamCommoditySettlPeriods {
	return NoStreamCommoditySettlPeriods{m.RepeatingGroup.Get(i)}
}

// NoDeliveryStreamCommoditySources is a repeating group element, Tag 41085.
type NoDeliveryStreamCommoditySources struct {
	*quickfix.Group
}

// SetDeliveryStreamCommoditySource sets DeliveryStreamCommoditySource, Tag 41086.
func (m NoDeliveryStreamCommoditySources) SetDeliveryStreamCommoditySource(v string) {
	m.Set(field.NewDeliveryStreamCommoditySource(v))
}

// GetDeliveryStreamCommoditySource gets DeliveryStreamCommoditySource, Tag 41086.
func (m NoDeliveryStreamCommoditySources) GetDeliveryStreamCommoditySource() (v string, err quickfix.MessageRejectError) {
	var f field.DeliveryStreamCommoditySourceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasDeliveryStreamCommoditySource returns true if DeliveryStreamCommoditySource is present, Tag 41086.
func (m NoDeliveryStreamCommoditySources) HasDeliveryStreamCommoditySource() bool {
	return m.Has(tag.DeliveryStreamCommoditySource)
}

// NoDeliveryStreamCommoditySourcesRepeatingGroup is a repeating group, Tag 41085.
type NoDeliveryStreamCommoditySourcesRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoDeliveryStreamCommoditySourcesRepeatingGroup returns an initialized, NoDeliveryStreamCommoditySourcesRepeatingGroup.
func NewNoDeliveryStreamCommoditySourcesRepeatingGroup() NoDeliveryStreamCommoditySourcesRepeatingGroup {
	return NoDeliveryStreamCommoditySourcesRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoDeliveryStreamCommoditySources,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.DeliveryStreamCommoditySource),
			},
		),
	}
}

// Add create and append a new NoDeliveryStreamCommoditySources to this group.
func (m NoDeliveryStreamCommoditySourcesRepeatingGroup) Add() NoDeliveryStreamCommoditySources {
	g := m.RepeatingGroup.Add()
	return NoDeliveryStreamCommoditySources{g}
}

// Get returns the ith NoDeliveryStreamCommoditySources in the NoDeliveryStreamCommoditySourcesRepeatinGroup.
func (m NoDeliveryStreamCommoditySourcesRepeatingGroup) Get(i int) NoDeliveryStreamCommoditySources {
	return NoDeliveryStreamCommoditySources{m.RepeatingGroup.Get(i)}
}

// NoDeliveryStreamCycles is a repeating group element, Tag 41081.
type NoDeliveryStreamCycles struct {
	*quickfix.Group
}

// SetDeliveryStreamCycleDesc sets DeliveryStreamCycleDesc, Tag 41082.
func (m NoDeliveryStreamCycles) SetDeliveryStreamCycleDesc(v string) {
	m.Set(field.NewDeliveryStreamCycleDesc(v))
}

// SetEncodedDeliveryStreamCycleDescLen sets EncodedDeliveryStreamCycleDescLen, Tag 41083.
func (m NoDeliveryStreamCycles) SetEncodedDeliveryStreamCycleDescLen(v int) {
	m.Set(field.NewEncodedDeliveryStreamCycleDescLen(v))
}

// SetEncodedDeliveryStreamCycleDesc sets EncodedDeliveryStreamCycleDesc, Tag 41084.
func (m NoDeliveryStreamCycles) SetEncodedDeliveryStreamCycleDesc(v string) {
	m.Set(field.NewEncodedDeliveryStreamCycleDesc(v))
}

// GetDeliveryStreamCycleDesc gets DeliveryStreamCycleDesc, Tag 41082.
func (m NoDeliveryStreamCycles) GetDeliveryStreamCycleDesc() (v string, err quickfix.MessageRejectError) {
	var f field.DeliveryStreamCycleDescField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetEncodedDeliveryStreamCycleDescLen gets EncodedDeliveryStreamCycleDescLen, Tag 41083.
func (m NoDeliveryStreamCycles) GetEncodedDeliveryStreamCycleDescLen() (v int, err quickfix.MessageRejectError) {
	var f field.EncodedDeliveryStreamCycleDescLenField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetEncodedDeliveryStreamCycleDesc gets EncodedDeliveryStreamCycleDesc, Tag 41084.
func (m NoDeliveryStreamCycles) GetEncodedDeliveryStreamCycleDesc() (v string, err quickfix.MessageRejectError) {
	var f field.EncodedDeliveryStreamCycleDescField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasDeliveryStreamCycleDesc returns true if DeliveryStreamCycleDesc is present, Tag 41082.
func (m NoDeliveryStreamCycles) HasDeliveryStreamCycleDesc() bool {
	return m.Has(tag.DeliveryStreamCycleDesc)
}

// HasEncodedDeliveryStreamCycleDescLen returns true if EncodedDeliveryStreamCycleDescLen is present, Tag 41083.
func (m NoDeliveryStreamCycles) HasEncodedDeliveryStreamCycleDescLen() bool {
	return m.Has(tag.EncodedDeliveryStreamCycleDescLen)
}

// HasEncodedDeliveryStreamCycleDesc returns true if EncodedDeliveryStreamCycleDesc is present, Tag 41084.
func (m NoDeliveryStreamCycles) HasEncodedDeliveryStreamCycleDesc() bool {
	return m.Has(tag.EncodedDeliveryStreamCycleDesc)
}

// NoDeliveryStreamCyclesRepeatingGroup is a repeating group, Tag 41081.
type NoDeliveryStreamCyclesRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoDeliveryStreamCyclesRepeatingGroup returns an initialized, NoDeliveryStreamCyclesRepeatingGroup.
func NewNoDeliveryStreamCyclesRepeatingGroup() NoDeliveryStreamCyclesRepeatingGroup {
	return NoDeliveryStreamCyclesRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoDeliveryStreamCycles,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.DeliveryStreamCycleDesc),
				quickfix.GroupElement(tag.EncodedDeliveryStreamCycleDescLen),
				quickfix.GroupElement(tag.EncodedDeliveryStreamCycleDesc),
			},
		),
	}
}

// Add create and append a new NoDeliveryStreamCycles to this group.
func (m NoDeliveryStreamCyclesRepeatingGroup) Add() NoDeliveryStreamCycles {
	g := m.RepeatingGroup.Add()
	return NoDeliveryStreamCycles{g}
}

// Get returns the ith NoDeliveryStreamCycles in the NoDeliveryStreamCyclesRepeatinGroup.
func (m NoDeliveryStreamCyclesRepeatingGroup) Get(i int) NoDeliveryStreamCycles {
	return NoDeliveryStreamCycles{m.RepeatingGroup.Get(i)}
}

// NoDeliverySchedules is a repeating group element, Tag 41037.
type NoDeliverySchedules struct {
	*quickfix.Group
}

// SetDeliveryScheduleType sets DeliveryScheduleType, Tag 41038.
func (m NoDeliverySchedules) SetDeliveryScheduleType(v enum.DeliveryScheduleType) {
	m.Set(field.NewDeliveryScheduleType(v))
}

// SetDeliveryScheduleXID sets DeliveryScheduleXID, Tag 41039.
func (m NoDeliverySchedules) SetDeliveryScheduleXID(v string) {
	m.Set(field.NewDeliveryScheduleXID(v))
}

// SetDeliveryScheduleNotional sets DeliveryScheduleNotional, Tag 41040.
func (m NoDeliverySchedules) SetDeliveryScheduleNotional(value decimal.Decimal, scale int32) {
	m.Set(field.NewDeliveryScheduleNotional(value, scale))
}

// SetDeliveryScheduleNotionalUnitOfMeasure sets DeliveryScheduleNotionalUnitOfMeasure, Tag 41041.
func (m NoDeliverySchedules) SetDeliveryScheduleNotionalUnitOfMeasure(v string) {
	m.Set(field.NewDeliveryScheduleNotionalUnitOfMeasure(v))
}

// SetDeliveryScheduleNotionalCommodityFrequency sets DeliveryScheduleNotionalCommodityFrequency, Tag 41042.
func (m NoDeliverySchedules) SetDeliveryScheduleNotionalCommodityFrequency(v int) {
	m.Set(field.NewDeliveryScheduleNotionalCommodityFrequency(v))
}

// SetDeliveryScheduleNegativeTolerance sets DeliveryScheduleNegativeTolerance, Tag 41043.
func (m NoDeliverySchedules) SetDeliveryScheduleNegativeTolerance(value decimal.Decimal, scale int32) {
	m.Set(field.NewDeliveryScheduleNegativeTolerance(value, scale))
}

// SetDeliverySchedulePositiveTolerance sets DeliverySchedulePositiveTolerance, Tag 41044.
func (m NoDeliverySchedules) SetDeliverySchedulePositiveTolerance(value decimal.Decimal, scale int32) {
	m.Set(field.NewDeliverySchedulePositiveTolerance(value, scale))
}

// SetDeliveryScheduleToleranceUnitOfMeasure sets DeliveryScheduleToleranceUnitOfMeasure, Tag 41045.
func (m NoDeliverySchedules) SetDeliveryScheduleToleranceUnitOfMeasure(v string) {
	m.Set(field.NewDeliveryScheduleToleranceUnitOfMeasure(v))
}

// SetDeliveryScheduleToleranceType sets DeliveryScheduleToleranceType, Tag 41046.
func (m NoDeliverySchedules) SetDeliveryScheduleToleranceType(v enum.DeliveryScheduleToleranceType) {
	m.Set(field.NewDeliveryScheduleToleranceType(v))
}

// SetDeliveryScheduleSettlCountry sets DeliveryScheduleSettlCountry, Tag 41047.
func (m NoDeliverySchedules) SetDeliveryScheduleSettlCountry(v string) {
	m.Set(field.NewDeliveryScheduleSettlCountry(v))
}

// SetDeliveryScheduleSettlTimeZone sets DeliveryScheduleSettlTimeZone, Tag 41048.
func (m NoDeliverySchedules) SetDeliveryScheduleSettlTimeZone(v string) {
	m.Set(field.NewDeliveryScheduleSettlTimeZone(v))
}

// SetDeliveryScheduleSettlFlowType sets DeliveryScheduleSettlFlowType, Tag 41049.
func (m NoDeliverySchedules) SetDeliveryScheduleSettlFlowType(v enum.DeliveryScheduleSettlFlowType) {
	m.Set(field.NewDeliveryScheduleSettlFlowType(v))
}

// SetDeliveryScheduleSettlHolidaysProcessingInstruction sets DeliveryScheduleSettlHolidaysProcessingInstruction, Tag 41050.
func (m NoDeliverySchedules) SetDeliveryScheduleSettlHolidaysProcessingInstruction(v enum.DeliveryScheduleSettlHolidaysProcessingInstruction) {
	m.Set(field.NewDeliveryScheduleSettlHolidaysProcessingInstruction(v))
}

// SetNoDeliveryScheduleSettlDays sets NoDeliveryScheduleSettlDays, Tag 41051.
func (m NoDeliverySchedules) SetNoDeliveryScheduleSettlDays(f NoDeliveryScheduleSettlDaysRepeatingGroup) {
	m.SetGroup(f)
}

// GetDeliveryScheduleType gets DeliveryScheduleType, Tag 41038.
func (m NoDeliverySchedules) GetDeliveryScheduleType() (v enum.DeliveryScheduleType, err quickfix.MessageRejectError) {
	var f field.DeliveryScheduleTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDeliveryScheduleXID gets DeliveryScheduleXID, Tag 41039.
func (m NoDeliverySchedules) GetDeliveryScheduleXID() (v string, err quickfix.MessageRejectError) {
	var f field.DeliveryScheduleXIDField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDeliveryScheduleNotional gets DeliveryScheduleNotional, Tag 41040.
func (m NoDeliverySchedules) GetDeliveryScheduleNotional() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.DeliveryScheduleNotionalField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDeliveryScheduleNotionalUnitOfMeasure gets DeliveryScheduleNotionalUnitOfMeasure, Tag 41041.
func (m NoDeliverySchedules) GetDeliveryScheduleNotionalUnitOfMeasure() (v string, err quickfix.MessageRejectError) {
	var f field.DeliveryScheduleNotionalUnitOfMeasureField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDeliveryScheduleNotionalCommodityFrequency gets DeliveryScheduleNotionalCommodityFrequency, Tag 41042.
func (m NoDeliverySchedules) GetDeliveryScheduleNotionalCommodityFrequency() (v int, err quickfix.MessageRejectError) {
	var f field.DeliveryScheduleNotionalCommodityFrequencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDeliveryScheduleNegativeTolerance gets DeliveryScheduleNegativeTolerance, Tag 41043.
func (m NoDeliverySchedules) GetDeliveryScheduleNegativeTolerance() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.DeliveryScheduleNegativeToleranceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDeliverySchedulePositiveTolerance gets DeliverySchedulePositiveTolerance, Tag 41044.
func (m NoDeliverySchedules) GetDeliverySchedulePositiveTolerance() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.DeliverySchedulePositiveToleranceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDeliveryScheduleToleranceUnitOfMeasure gets DeliveryScheduleToleranceUnitOfMeasure, Tag 41045.
func (m NoDeliverySchedules) GetDeliveryScheduleToleranceUnitOfMeasure() (v string, err quickfix.MessageRejectError) {
	var f field.DeliveryScheduleToleranceUnitOfMeasureField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDeliveryScheduleToleranceType gets DeliveryScheduleToleranceType, Tag 41046.
func (m NoDeliverySchedules) GetDeliveryScheduleToleranceType() (v enum.DeliveryScheduleToleranceType, err quickfix.MessageRejectError) {
	var f field.DeliveryScheduleToleranceTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDeliveryScheduleSettlCountry gets DeliveryScheduleSettlCountry, Tag 41047.
func (m NoDeliverySchedules) GetDeliveryScheduleSettlCountry() (v string, err quickfix.MessageRejectError) {
	var f field.DeliveryScheduleSettlCountryField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDeliveryScheduleSettlTimeZone gets DeliveryScheduleSettlTimeZone, Tag 41048.
func (m NoDeliverySchedules) GetDeliveryScheduleSettlTimeZone() (v string, err quickfix.MessageRejectError) {
	var f field.DeliveryScheduleSettlTimeZoneField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDeliveryScheduleSettlFlowType gets DeliveryScheduleSettlFlowType, Tag 41049.
func (m NoDeliverySchedules) GetDeliveryScheduleSettlFlowType() (v enum.DeliveryScheduleSettlFlowType, err quickfix.MessageRejectError) {
	var f field.DeliveryScheduleSettlFlowTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDeliveryScheduleSettlHolidaysProcessingInstruction gets DeliveryScheduleSettlHolidaysProcessingInstruction, Tag 41050.
func (m NoDeliverySchedules) GetDeliveryScheduleSettlHolidaysProcessingInstruction() (v enum.DeliveryScheduleSettlHolidaysProcessingInstruction, err quickfix.MessageRejectError) {
	var f field.DeliveryScheduleSettlHolidaysProcessingInstructionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoDeliveryScheduleSettlDays gets NoDeliveryScheduleSettlDays, Tag 41051.
func (m NoDeliverySchedules) GetNoDeliveryScheduleSettlDays() (NoDeliveryScheduleSettlDaysRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoDeliveryScheduleSettlDaysRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// HasDeliveryScheduleType returns true if DeliveryScheduleType is present, Tag 41038.
func (m NoDeliverySchedules) HasDeliveryScheduleType() bool {
	return m.Has(tag.DeliveryScheduleType)
}

// HasDeliveryScheduleXID returns true if DeliveryScheduleXID is present, Tag 41039.
func (m NoDeliverySchedules) HasDeliveryScheduleXID() bool {
	return m.Has(tag.DeliveryScheduleXID)
}

// HasDeliveryScheduleNotional returns true if DeliveryScheduleNotional is present, Tag 41040.
func (m NoDeliverySchedules) HasDeliveryScheduleNotional() bool {
	return m.Has(tag.DeliveryScheduleNotional)
}

// HasDeliveryScheduleNotionalUnitOfMeasure returns true if DeliveryScheduleNotionalUnitOfMeasure is present, Tag 41041.
func (m NoDeliverySchedules) HasDeliveryScheduleNotionalUnitOfMeasure() bool {
	return m.Has(tag.DeliveryScheduleNotionalUnitOfMeasure)
}

// HasDeliveryScheduleNotionalCommodityFrequency returns true if DeliveryScheduleNotionalCommodityFrequency is present, Tag 41042.
func (m NoDeliverySchedules) HasDeliveryScheduleNotionalCommodityFrequency() bool {
	return m.Has(tag.DeliveryScheduleNotionalCommodityFrequency)
}

// HasDeliveryScheduleNegativeTolerance returns true if DeliveryScheduleNegativeTolerance is present, Tag 41043.
func (m NoDeliverySchedules) HasDeliveryScheduleNegativeTolerance() bool {
	return m.Has(tag.DeliveryScheduleNegativeTolerance)
}

// HasDeliverySchedulePositiveTolerance returns true if DeliverySchedulePositiveTolerance is present, Tag 41044.
func (m NoDeliverySchedules) HasDeliverySchedulePositiveTolerance() bool {
	return m.Has(tag.DeliverySchedulePositiveTolerance)
}

// HasDeliveryScheduleToleranceUnitOfMeasure returns true if DeliveryScheduleToleranceUnitOfMeasure is present, Tag 41045.
func (m NoDeliverySchedules) HasDeliveryScheduleToleranceUnitOfMeasure() bool {
	return m.Has(tag.DeliveryScheduleToleranceUnitOfMeasure)
}

// HasDeliveryScheduleToleranceType returns true if DeliveryScheduleToleranceType is present, Tag 41046.
func (m NoDeliverySchedules) HasDeliveryScheduleToleranceType() bool {
	return m.Has(tag.DeliveryScheduleToleranceType)
}

// HasDeliveryScheduleSettlCountry returns true if DeliveryScheduleSettlCountry is present, Tag 41047.
func (m NoDeliverySchedules) HasDeliveryScheduleSettlCountry() bool {
	return m.Has(tag.DeliveryScheduleSettlCountry)
}

// HasDeliveryScheduleSettlTimeZone returns true if DeliveryScheduleSettlTimeZone is present, Tag 41048.
func (m NoDeliverySchedules) HasDeliveryScheduleSettlTimeZone() bool {
	return m.Has(tag.DeliveryScheduleSettlTimeZone)
}

// HasDeliveryScheduleSettlFlowType returns true if DeliveryScheduleSettlFlowType is present, Tag 41049.
func (m NoDeliverySchedules) HasDeliveryScheduleSettlFlowType() bool {
	return m.Has(tag.DeliveryScheduleSettlFlowType)
}

// HasDeliveryScheduleSettlHolidaysProcessingInstruction returns true if DeliveryScheduleSettlHolidaysProcessingInstruction is present, Tag 41050.
func (m NoDeliverySchedules) HasDeliveryScheduleSettlHolidaysProcessingInstruction() bool {
	return m.Has(tag.DeliveryScheduleSettlHolidaysProcessingInstruction)
}

// HasNoDeliveryScheduleSettlDays returns true if NoDeliveryScheduleSettlDays is present, Tag 41051.
func (m NoDeliverySchedules) HasNoDeliveryScheduleSettlDays() bool {
	return m.Has(tag.NoDeliveryScheduleSettlDays)
}

// NoDeliveryScheduleSettlDays is a repeating group element, Tag 41051.
type NoDeliveryScheduleSettlDays struct {
	*quickfix.Group
}

// SetDeliveryScheduleSettlDay sets DeliveryScheduleSettlDay, Tag 41052.
func (m NoDeliveryScheduleSettlDays) SetDeliveryScheduleSettlDay(v enum.DeliveryScheduleSettlDay) {
	m.Set(field.NewDeliveryScheduleSettlDay(v))
}

// SetDeliveryScheduleSettlTotalHours sets DeliveryScheduleSettlTotalHours, Tag 41053.
func (m NoDeliveryScheduleSettlDays) SetDeliveryScheduleSettlTotalHours(v int) {
	m.Set(field.NewDeliveryScheduleSettlTotalHours(v))
}

// SetNoDeliveryScheduleSettlTimes sets NoDeliveryScheduleSettlTimes, Tag 41054.
func (m NoDeliveryScheduleSettlDays) SetNoDeliveryScheduleSettlTimes(f NoDeliveryScheduleSettlTimesRepeatingGroup) {
	m.SetGroup(f)
}

// GetDeliveryScheduleSettlDay gets DeliveryScheduleSettlDay, Tag 41052.
func (m NoDeliveryScheduleSettlDays) GetDeliveryScheduleSettlDay() (v enum.DeliveryScheduleSettlDay, err quickfix.MessageRejectError) {
	var f field.DeliveryScheduleSettlDayField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDeliveryScheduleSettlTotalHours gets DeliveryScheduleSettlTotalHours, Tag 41053.
func (m NoDeliveryScheduleSettlDays) GetDeliveryScheduleSettlTotalHours() (v int, err quickfix.MessageRejectError) {
	var f field.DeliveryScheduleSettlTotalHoursField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoDeliveryScheduleSettlTimes gets NoDeliveryScheduleSettlTimes, Tag 41054.
func (m NoDeliveryScheduleSettlDays) GetNoDeliveryScheduleSettlTimes() (NoDeliveryScheduleSettlTimesRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoDeliveryScheduleSettlTimesRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// HasDeliveryScheduleSettlDay returns true if DeliveryScheduleSettlDay is present, Tag 41052.
func (m NoDeliveryScheduleSettlDays) HasDeliveryScheduleSettlDay() bool {
	return m.Has(tag.DeliveryScheduleSettlDay)
}

// HasDeliveryScheduleSettlTotalHours returns true if DeliveryScheduleSettlTotalHours is present, Tag 41053.
func (m NoDeliveryScheduleSettlDays) HasDeliveryScheduleSettlTotalHours() bool {
	return m.Has(tag.DeliveryScheduleSettlTotalHours)
}

// HasNoDeliveryScheduleSettlTimes returns true if NoDeliveryScheduleSettlTimes is present, Tag 41054.
func (m NoDeliveryScheduleSettlDays) HasNoDeliveryScheduleSettlTimes() bool {
	return m.Has(tag.NoDeliveryScheduleSettlTimes)
}

// NoDeliveryScheduleSettlTimes is a repeating group element, Tag 41054.
type NoDeliveryScheduleSettlTimes struct {
	*quickfix.Group
}

// SetDeliveryScheduleSettlStart sets DeliveryScheduleSettlStart, Tag 41055.
func (m NoDeliveryScheduleSettlTimes) SetDeliveryScheduleSettlStart(v string) {
	m.Set(field.NewDeliveryScheduleSettlStart(v))
}

// SetDeliveryScheduleSettlEnd sets DeliveryScheduleSettlEnd, Tag 41056.
func (m NoDeliveryScheduleSettlTimes) SetDeliveryScheduleSettlEnd(v string) {
	m.Set(field.NewDeliveryScheduleSettlEnd(v))
}

// SetDeliveryScheduleSettlTimeType sets DeliveryScheduleSettlTimeType, Tag 41057.
func (m NoDeliveryScheduleSettlTimes) SetDeliveryScheduleSettlTimeType(v enum.DeliveryScheduleSettlTimeType) {
	m.Set(field.NewDeliveryScheduleSettlTimeType(v))
}

// GetDeliveryScheduleSettlStart gets DeliveryScheduleSettlStart, Tag 41055.
func (m NoDeliveryScheduleSettlTimes) GetDeliveryScheduleSettlStart() (v string, err quickfix.MessageRejectError) {
	var f field.DeliveryScheduleSettlStartField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDeliveryScheduleSettlEnd gets DeliveryScheduleSettlEnd, Tag 41056.
func (m NoDeliveryScheduleSettlTimes) GetDeliveryScheduleSettlEnd() (v string, err quickfix.MessageRejectError) {
	var f field.DeliveryScheduleSettlEndField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetDeliveryScheduleSettlTimeType gets DeliveryScheduleSettlTimeType, Tag 41057.
func (m NoDeliveryScheduleSettlTimes) GetDeliveryScheduleSettlTimeType() (v enum.DeliveryScheduleSettlTimeType, err quickfix.MessageRejectError) {
	var f field.DeliveryScheduleSettlTimeTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasDeliveryScheduleSettlStart returns true if DeliveryScheduleSettlStart is present, Tag 41055.
func (m NoDeliveryScheduleSettlTimes) HasDeliveryScheduleSettlStart() bool {
	return m.Has(tag.DeliveryScheduleSettlStart)
}

// HasDeliveryScheduleSettlEnd returns true if DeliveryScheduleSettlEnd is present, Tag 41056.
func (m NoDeliveryScheduleSettlTimes) HasDeliveryScheduleSettlEnd() bool {
	return m.Has(tag.DeliveryScheduleSettlEnd)
}

// HasDeliveryScheduleSettlTimeType returns true if DeliveryScheduleSettlTimeType is present, Tag 41057.
func (m NoDeliveryScheduleSettlTimes) HasDeliveryScheduleSettlTimeType() bool {
	return m.Has(tag.DeliveryScheduleSettlTimeType)
}

// NoDeliveryScheduleSettlTimesRepeatingGroup is a repeating group, Tag 41054.
type NoDeliveryScheduleSettlTimesRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoDeliveryScheduleSettlTimesRepeatingGroup returns an initialized, NoDeliveryScheduleSettlTimesRepeatingGroup.
func NewNoDeliveryScheduleSettlTimesRepeatingGroup() NoDeliveryScheduleSettlTimesRepeatingGroup {
	return NoDeliveryScheduleSettlTimesRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoDeliveryScheduleSettlTimes,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.DeliveryScheduleSettlStart),
				quickfix.GroupElement(tag.DeliveryScheduleSettlEnd),
				quickfix.GroupElement(tag.DeliveryScheduleSettlTimeType),
			},
		),
	}
}

// Add create and append a new NoDeliveryScheduleSettlTimes to this group.
func (m NoDeliveryScheduleSettlTimesRepeatingGroup) Add() NoDeliveryScheduleSettlTimes {
	g := m.RepeatingGroup.Add()
	return NoDeliveryScheduleSettlTimes{g}
}

// Get returns the ith NoDeliveryScheduleSettlTimes in the NoDeliveryScheduleSettlTimesRepeatinGroup.
func (m NoDeliveryScheduleSettlTimesRepeatingGroup) Get(i int) NoDeliveryScheduleSettlTimes {
	return NoDeliveryScheduleSettlTimes{m.RepeatingGroup.Get(i)}
}

// NoDeliveryScheduleSettlDaysRepeatingGroup is a repeating group, Tag 41051.
type NoDeliveryScheduleSettlDaysRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoDeliveryScheduleSettlDaysRepeatingGroup returns an initialized, NoDeliveryScheduleSettlDaysRepeatingGroup.
func NewNoDeliveryScheduleSettlDaysRepeatingGroup() NoDeliveryScheduleSettlDaysRepeatingGroup {
	return NoDeliveryScheduleSettlDaysRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoDeliveryScheduleSettlDays,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.DeliveryScheduleSettlDay),
				quickfix.GroupElement(tag.DeliveryScheduleSettlTotalHours),
				NewNoDeliveryScheduleSettlTimesRepeatingGroup(),
			},
		),
	}
}

// Add create and append a new NoDeliveryScheduleSettlDays to this group.
func (m NoDeliveryScheduleSettlDaysRepeatingGroup) Add() NoDeliveryScheduleSettlDays {
	g := m.RepeatingGroup.Add()
	return NoDeliveryScheduleSettlDays{g}
}

// Get returns the ith NoDeliveryScheduleSettlDays in the NoDeliveryScheduleSettlDaysRepeatinGroup.
func (m NoDeliveryScheduleSettlDaysRepeatingGroup) Get(i int) NoDeliveryScheduleSettlDays {
	return NoDeliveryScheduleSettlDays{m.RepeatingGroup.Get(i)}
}

// NoDeliverySchedulesRepeatingGroup is a repeating group, Tag 41037.
type NoDeliverySchedulesRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoDeliverySchedulesRepeatingGroup returns an initialized, NoDeliverySchedulesRepeatingGroup.
func NewNoDeliverySchedulesRepeatingGroup() NoDeliverySchedulesRepeatingGroup {
	return NoDeliverySchedulesRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoDeliverySchedules,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.DeliveryScheduleType),
				quickfix.GroupElement(tag.DeliveryScheduleXID),
				quickfix.GroupElement(tag.DeliveryScheduleNotional),
				quickfix.GroupElement(tag.DeliveryScheduleNotionalUnitOfMeasure),
				quickfix.GroupElement(tag.DeliveryScheduleNotionalCommodityFrequency),
				quickfix.GroupElement(tag.DeliveryScheduleNegativeTolerance),
				quickfix.GroupElement(tag.DeliverySchedulePositiveTolerance),
				quickfix.GroupElement(tag.DeliveryScheduleToleranceUnitOfMeasure),
				quickfix.GroupElement(tag.DeliveryScheduleToleranceType),
				quickfix.GroupElement(tag.DeliveryScheduleSettlCountry),
				quickfix.GroupElement(tag.DeliveryScheduleSettlTimeZone),
				quickfix.GroupElement(tag.DeliveryScheduleSettlFlowType),
				quickfix.GroupElement(tag.DeliveryScheduleSettlHolidaysProcessingInstruction),
				NewNoDeliveryScheduleSettlDaysRepeatingGroup(),
			},
		),
	}
}

// Add create and append a new NoDeliverySchedules to this group.
func (m NoDeliverySchedulesRepeatingGroup) Add() NoDeliverySchedules {
	g := m.RepeatingGroup.Add()
	return NoDeliverySchedules{g}
}

// Get returns the ith NoDeliverySchedules in the NoDeliverySchedulesRepeatinGroup.
func (m NoDeliverySchedulesRepeatingGroup) Get(i int) NoDeliverySchedules {
	return NoDeliverySchedules{m.RepeatingGroup.Get(i)}
}

// NoStreamsRepeatingGroup is a repeating group, Tag 40049.
type NoStreamsRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoStreamsRepeatingGroup returns an initialized, NoStreamsRepeatingGroup.
func NewNoStreamsRepeatingGroup() NoStreamsRepeatingGroup {
	return NoStreamsRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoStreams,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.StreamType),
				quickfix.GroupElement(tag.StreamDesc),
				quickfix.GroupElement(tag.StreamPaySide),
				quickfix.GroupElement(tag.StreamReceiveSide),
				quickfix.GroupElement(tag.StreamNotional),
				quickfix.GroupElement(tag.StreamCurrency),
				quickfix.GroupElement(tag.StreamEffectiveDateUnadjusted),
				quickfix.GroupElement(tag.StreamEffectiveDateBusinessDayConvention),
				NewNoStreamEffectiveBusinessCentersRepeatingGroup(),
				quickfix.GroupElement(tag.StreamEffectiveDateRelativeTo),
				quickfix.GroupElement(tag.StreamEffectiveDateOffsetPeriod),
				quickfix.GroupElement(tag.StreamEffectiveDateOffsetUnit),
				quickfix.GroupElement(tag.StreamEffectiveDateOffsetDayType),
				quickfix.GroupElement(tag.StreamEffectiveDateAdjusted),
				quickfix.GroupElement(tag.StreamTerminationDateUnadjusted),
				quickfix.GroupElement(tag.StreamTerminationDateBusinessDayConvention),
				NewNoStreamTerminationDateBusinessCentersRepeatingGroup(),
				quickfix.GroupElement(tag.StreamTerminationDateRelativeTo),
				quickfix.GroupElement(tag.StreamTerminationDateOffsetPeriod),
				quickfix.GroupElement(tag.StreamTerminationDateOffsetUnit),
				quickfix.GroupElement(tag.StreamTerminationDateOffsetDayType),
				quickfix.GroupElement(tag.StreamTerminationDateAdjusted),
				quickfix.GroupElement(tag.StreamCalculationPeriodBusinessDayConvention),
				NewNoStreamCalculationPeriodBusinessCentersRepeatingGroup(),
				quickfix.GroupElement(tag.StreamFirstPeriodStartDateUnadjusted),
				quickfix.GroupElement(tag.StreamFirstPeriodStartDateBusinessDayConvention),
				NewNoStreamFirstPeriodStartDateBusinessCentersRepeatingGroup(),
				quickfix.GroupElement(tag.StreamFirstPeriodStartDateAdjusted),
				quickfix.GroupElement(tag.StreamFirstRegularPeriodStartDateUnadjusted),
				quickfix.GroupElement(tag.StreamFirstCompoundingPeriodEndDateUnadjusted),
				quickfix.GroupElement(tag.StreamLastRegularPeriodEndDateUnadjusted),
				quickfix.GroupElement(tag.StreamCalculationFrequencyPeriod),
				quickfix.GroupElement(tag.StreamCalculationFrequencyUnit),
				quickfix.GroupElement(tag.StreamCalculationRollConvention),
				quickfix.GroupElement(tag.StreamCalculationPeriodDatesXID),
				quickfix.GroupElement(tag.StreamCalculationPeriodDatesXIDRef),
				NewNoStreamCalculationPeriodDatesRepeatingGroup(),
				quickfix.GroupElement(tag.StreamCalculationBalanceOfFirstPeriod),
				quickfix.GroupElement(tag.StreamCalculationCorrectionPeriod),
				quickfix.GroupElement(tag.StreamCalculationCorrectionUnit),
				quickfix.GroupElement(tag.PaymentStreamType),
				quickfix.GroupElement(tag.PaymentStreamMarketRate),
				quickfix.GroupElement(tag.PaymentStreamDelayIndicator),
				quickfix.GroupElement(tag.PaymentStreamSettlCurrency),
				quickfix.GroupElement(tag.PaymentStreamDayCount),
				quickfix.GroupElement(tag.PaymentStreamAccrualDays),
				quickfix.GroupElement(tag.PaymentStreamDiscountType),
				quickfix.GroupElement(tag.PaymentStreamDiscountRate),
				quickfix.GroupElement(tag.PaymentStreamDiscountRateDayCount),
				quickfix.GroupElement(tag.PaymentStreamCompoundingMethod),
				quickfix.GroupElement(tag.PaymentStreamInitialPrincipalExchangeIndicator),
				quickfix.GroupElement(tag.PaymentStreamInterimPrincipalExchangeIndicator),
				quickfix.GroupElement(tag.PaymentStreamFinalPrincipalExchangeIndicator),
				quickfix.GroupElement(tag.PaymentStreamPaymentDateBusinessDayConvention),
				NewNoPaymentStreamPaymentDateBusinessCentersRepeatingGroup(),
				quickfix.GroupElement(tag.PaymentStreamPaymentFrequencyPeriod),
				quickfix.GroupElement(tag.PaymentStreamPaymentFrequencyUnit),
				quickfix.GroupElement(tag.PaymentStreamPaymentRollConvention),
				quickfix.GroupElement(tag.PaymentStreamFirstPaymentDateUnadjusted),
				quickfix.GroupElement(tag.PaymentStreamLastRegularPaymentDateUnadjusted),
				quickfix.GroupElement(tag.PaymentStreamPaymentDateRelativeTo),
				quickfix.GroupElement(tag.PaymentStreamPaymentDateOffsetPeriod),
				quickfix.GroupElement(tag.PaymentStreamPaymentDateOffsetUnit),
				quickfix.GroupElement(tag.PaymentStreamPaymentDateOffsetDayType),
				NewNoPaymentStreamPaymentDatesRepeatingGroup(),
				quickfix.GroupElement(tag.PaymentStreamMasterAgreementPaymentDatesIndicator),
				quickfix.GroupElement(tag.PaymentStreamFinalPricePaymentDateUnadjusted),
				quickfix.GroupElement(tag.PaymentStreamFinalPricePaymentDateRelativeTo),
				quickfix.GroupElement(tag.PaymentStreamFinalPricePaymentDateOffsetfPeriod),
				quickfix.GroupElement(tag.PaymentStreamFinalPricePaymentDateOffsetUnit),
				quickfix.GroupElement(tag.PaymentStreamFinalPricePaymentDateOffsetDayType),
				quickfix.GroupElement(tag.PaymentStreamFinalPricePaymentDateAdjusted),
				quickfix.GroupElement(tag.PaymentStreamResetDateRelativeTo),
				quickfix.GroupElement(tag.PaymentStreamResetDateBusinessDayConvention),
				NewNoPaymentStreamResetDateBusinessCentersRepeatingGroup(),
				quickfix.GroupElement(tag.PaymentStreamResetFrequencyPeriod),
				quickfix.GroupElement(tag.PaymentStreamResetFrequencyUnit),
				quickfix.GroupElement(tag.PaymentStreamResetWeeklyRollConvention),
				quickfix.GroupElement(tag.PaymentStreamInitialFixingDateRelativeTo),
				quickfix.GroupElement(tag.PaymentStreamInitialFixingDateBusinessDayConvention),
				NewNoPaymentStreamInitialFixingDateBusinessCentersRepeatingGroup(),
				quickfix.GroupElement(tag.PaymentStreamInitialFixingDateOffsetPeriod),
				quickfix.GroupElement(tag.PaymentStreamInitialFixingDateOffsetUnit),
				quickfix.GroupElement(tag.PaymentStreamInitialFixingDateOffsetDayType),
				quickfix.GroupElement(tag.PaymentStreamInitialFixingDateAdjusted),
				quickfix.GroupElement(tag.PaymentStreamFixingDateRelativeTo),
				quickfix.GroupElement(tag.PaymentStreamFixingDateBusinessDayConvention),
				NewNoPaymentStreamFixingDateBusinessCentersRepeatingGroup(),
				quickfix.GroupElement(tag.PaymentStreamFixingDateOffsetPeriod),
				quickfix.GroupElement(tag.PaymentStreamFixingDateOffsetUnit),
				quickfix.GroupElement(tag.PaymentStreamFixingDateOffsetDayType),
				quickfix.GroupElement(tag.PaymentStreamFixingDateAdjusted),
				quickfix.GroupElement(tag.PaymentStreamRateCutoffDateOffsetPeriod),
				quickfix.GroupElement(tag.PaymentStreamRateCutoffDateOffsetUnit),
				quickfix.GroupElement(tag.PaymentStreamRateCutoffDateOffsetDayType),
				NewNoPaymentStreamFixingDatesRepeatingGroup(),
				quickfix.GroupElement(tag.PaymentStreamRate),
				quickfix.GroupElement(tag.PaymentStreamFixedAmount),
				quickfix.GroupElement(tag.PaymentStreamRateOrAmountCurrency),
				quickfix.GroupElement(tag.PaymentStreamFutureValueNotional),
				quickfix.GroupElement(tag.PaymentStreamFutureValueDateAdjusted),
				quickfix.GroupElement(tag.PaymentStreamFixedAmountUnitOfMeasure),
				quickfix.GroupElement(tag.PaymentStreamTotalFixedAmount),
				quickfix.GroupElement(tag.PaymentStreamWorldScaleRate),
				quickfix.GroupElement(tag.PaymentStreamContractPrice),
				quickfix.GroupElement(tag.PaymentStreamContractPriceCurrency),
				quickfix.GroupElement(tag.PaymentStreamRateIndex),
				quickfix.GroupElement(tag.PaymentStreamRateIndexSource),
				quickfix.GroupElement(tag.PaymentStreamRateIndexCurveUnit),
				quickfix.GroupElement(tag.PaymentStreamRateIndexCurvePeriod),
				quickfix.GroupElement(tag.PaymentStreamRateMultiplier),
				quickfix.GroupElement(tag.PaymentStreamRateSpread),
				quickfix.GroupElement(tag.PaymentStreamRateSpreadPositionType),
				quickfix.GroupElement(tag.PaymentStreamRateTreatment),
				quickfix.GroupElement(tag.PaymentStreamCapRate),
				quickfix.GroupElement(tag.PaymentStreamCapRateBuySide),
				quickfix.GroupElement(tag.PaymentStreamCapRateSellSide),
				quickfix.GroupElement(tag.PaymentStreamFloorRate),
				quickfix.GroupElement(tag.PaymentStreamFloorRateBuySide),
				quickfix.GroupElement(tag.PaymentStreamFloorRateSellSide),
				quickfix.GroupElement(tag.PaymentStreamInitialRate),
				quickfix.GroupElement(tag.PaymentStreamFinalRateRoundingDirection),
				quickfix.GroupElement(tag.PaymentStreamFinalRatePrecision),
				quickfix.GroupElement(tag.PaymentStreamAveragingMethod),
				quickfix.GroupElement(tag.PaymentStreamNegativeRateTreatment),
				quickfix.GroupElement(tag.PaymentStreamInflationLagPeriod),
				quickfix.GroupElement(tag.PaymentStreamInflationLagUnit),
				quickfix.GroupElement(tag.PaymentStreamInflationLagDayType),
				quickfix.GroupElement(tag.PaymentStreamInflationInterpolationMethod),
				quickfix.GroupElement(tag.PaymentStreamInflationIndexSource),
				quickfix.GroupElement(tag.PaymentStreamInflationPublicationSource),
				quickfix.GroupElement(tag.PaymentStreamInflationInitialIndexLevel),
				quickfix.GroupElement(tag.PaymentStreamInflationFallbackBondApplicable),
				quickfix.GroupElement(tag.PaymentStreamFRADiscounting),
				quickfix.GroupElement(tag.PaymentStreamRateIndex2CurvePeriod),
				quickfix.GroupElement(tag.PaymentStreamRateIndex2CurveUnit),
				quickfix.GroupElement(tag.PaymentStreamRateIndexLocation),
				quickfix.GroupElement(tag.PaymentStreamRateIndexLevel),
				quickfix.GroupElement(tag.PaymentStreamRateIndexUnitOfMeasure),
				quickfix.GroupElement(tag.PaymentStreamSettlLevel),
				quickfix.GroupElement(tag.PaymentStreamReferenceLevel),
				quickfix.GroupElement(tag.PaymentStreamReferenceLevelUnitOfMeasure),
				quickfix.GroupElement(tag.PaymentStreamReferenceLevelEqualsZeroIndicator),
				quickfix.GroupElement(tag.PaymentStreamRateSpreadCurrency),
				quickfix.GroupElement(tag.PaymentStreamRateSpreadUnitOfMeasure),
				quickfix.GroupElement(tag.PaymentStreamRateConversionFactor),
				quickfix.GroupElement(tag.PaymentStreamRateSpreadType),
				quickfix.GroupElement(tag.PaymentStreamLastResetRate),
				quickfix.GroupElement(tag.PaymentStreamFinalRate),
				quickfix.GroupElement(tag.PaymentStreamCalculationLagPeriod),
				quickfix.GroupElement(tag.PaymentStreamCalculationLagUnit),
				quickfix.GroupElement(tag.PaymentStreamFirstObservationDateOffsetPeriod),
				quickfix.GroupElement(tag.PaymentStreamFirstObservationDateOffsetUnit),
				quickfix.GroupElement(tag.PaymentStreamPricingDayType),
				quickfix.GroupElement(tag.PaymentStreamPricingDayDistribution),
				quickfix.GroupElement(tag.PaymentStreamPricingDayCount),
				quickfix.GroupElement(tag.PaymentStreamPricingBusinessCalendar),
				quickfix.GroupElement(tag.PaymentStreamPricingBusinessDayConvention),
				NewNoPaymentStreamPricingBusinessCentersRepeatingGroup(),
				NewNoPaymentStreamPricingDaysRepeatingGroup(),
				NewNoPaymentStreamPricingDatesRepeatingGroup(),
				quickfix.GroupElement(tag.PaymentStreamFirstObservationDateUnadjusted),
				quickfix.GroupElement(tag.PaymentStreamFirstObservationDateRelativeTo),
				quickfix.GroupElement(tag.PaymentStreamFirstObservationDateOffsetDayType),
				quickfix.GroupElement(tag.PaymentStreamFirstObservationDateAdjusted),
				quickfix.GroupElement(tag.PaymentStreamUnderlierRefID),
				quickfix.GroupElement(tag.PaymentStreamFormulaCurrency),
				quickfix.GroupElement(tag.PaymentStreamFormulaCurrencyDeterminationMethod),
				quickfix.GroupElement(tag.PaymentStreamFormulaReferenceAmount),
				NewNoPaymentStreamFormulasRepeatingGroup(),
				quickfix.GroupElement(tag.PaymentStreamFormulaImageLength),
				quickfix.GroupElement(tag.PaymentStreamFormulaImage),
				quickfix.GroupElement(tag.DividendReinvestmentIndicator),
				quickfix.GroupElement(tag.DividendEntitlementEvent),
				quickfix.GroupElement(tag.DividendAmountType),
				quickfix.GroupElement(tag.DividendUnderlierRefID),
				NewNoDividendPeriodsRepeatingGroup(),
				quickfix.GroupElement(tag.ExtraordinaryDividendPartySide),
				quickfix.GroupElement(tag.ExtraordinaryDividendAmountType),
				quickfix.GroupElement(tag.ExtraordinaryDividendCurrency),
				quickfix.GroupElement(tag.ExtraordinaryDividendDeterminationMethod),
				quickfix.GroupElement(tag.DividendFXTriggerDateRelativeTo),
				quickfix.GroupElement(tag.DividendFXTriggerDateOffsetPeriod),
				quickfix.GroupElement(tag.DividendFXTriggerDateOffsetUnit),
				quickfix.GroupElement(tag.DividendFXTriggerDateOffsetDayType),
				quickfix.GroupElement(tag.DividendFXTriggerDateUnadjusted),
				quickfix.GroupElement(tag.DividendFXTriggerDateBusinessDayConvention),
				NewNoDividendFXTriggerDateBusinessCentersRepeatingGroup(),
				quickfix.GroupElement(tag.DividendFXTriggerDateAdjusted),
				quickfix.GroupElement(tag.DividendFloatingRateIndex),
				quickfix.GroupElement(tag.DividendFloatingRateIndexCurvePeriod),
				quickfix.GroupElement(tag.DividendFloatingRateIndexCurveUnit),
				quickfix.GroupElement(tag.DividendFloatingRateMultiplier),
				quickfix.GroupElement(tag.DividendFloatingRateSpread),
				quickfix.GroupElement(tag.DividendFloatingRateSpreadPositionType),
				quickfix.GroupElement(tag.DividendFloatingRateTreatment),
				quickfix.GroupElement(tag.DividendCapRate),
				quickfix.GroupElement(tag.DividendCapRateBuySide),
				quickfix.GroupElement(tag.DividendCapRateSellSide),
				quickfix.GroupElement(tag.DividendFloorRate),
				quickfix.GroupElement(tag.DividendFloorRateBuySide),
				quickfix.GroupElement(tag.DividendFloorRateSellSide),
				quickfix.GroupElement(tag.DividendInitialRate),
				quickfix.GroupElement(tag.DividendFinalRateRoundingDirection),
				quickfix.GroupElement(tag.DividendFinalRatePrecision),
				quickfix.GroupElement(tag.DividendAveragingMethod),
				quickfix.GroupElement(tag.DividendNegativeRateTreatment),
				quickfix.GroupElement(tag.DividendAccrualFixedRate),
				quickfix.GroupElement(tag.DividendAccrualPaymentDateRelativeTo),
				quickfix.GroupElement(tag.DividendAccrualPaymentDateOffsetPeriod),
				quickfix.GroupElement(tag.DividendAccrualPaymentDateOffsetUnit),
				quickfix.GroupElement(tag.DividendAccrualPaymentDateOffsetDayType),
				quickfix.GroupElement(tag.DividendAccrualPaymentDateUnadjusted),
				quickfix.GroupElement(tag.DividendAccrualPaymeentDateBusinessDayConvention),
				NewNoDividendAccrualPaymentDateBusinessCentersRepeatingGroup(),
				quickfix.GroupElement(tag.DividendAccrualPaymentDateAdjusted),
				quickfix.GroupElement(tag.DividendCompoundingMethod),
				quickfix.GroupElement(tag.DividendNumOfIndexUnits),
				quickfix.GroupElement(tag.DividendCashPercentage),
				quickfix.GroupElement(tag.DividendCashEquivalentPercentage),
				quickfix.GroupElement(tag.NonCashDividendTreatment),
				quickfix.GroupElement(tag.DividendComposition),
				quickfix.GroupElement(tag.SpecialDividendsIndicator),
				quickfix.GroupElement(tag.MaterialDividendsIndicator),
				quickfix.GroupElement(tag.OptionsExchangeDividendsIndicator),
				quickfix.GroupElement(tag.AdditionalDividendsIndicator),
				quickfix.GroupElement(tag.AllDividendsIndicator),
				quickfix.GroupElement(tag.ReturnRateNotionalReset),
				NewNoReturnRatesRepeatingGroup(),
				quickfix.GroupElement(tag.PaymentStreamLinkInitialLevel),
				quickfix.GroupElement(tag.PaymentStreamLinkClosingLevelIndicator),
				quickfix.GroupElement(tag.PaymentStreamLinkExpiringLevelIndicator),
				quickfix.GroupElement(tag.PaymentStreamLinkEstimatedTradingDays),
				quickfix.GroupElement(tag.PaymentStreamLinkStrikePrice),
				quickfix.GroupElement(tag.PaymentStreamLinkStrikePriceType),
				quickfix.GroupElement(tag.PaymentStreamLinkMaximumBoundary),
				quickfix.GroupElement(tag.PaymentStreamLinkMinimumBoundary),
				quickfix.GroupElement(tag.PaymentStreamLinkNumberOfDataSeries),
				quickfix.GroupElement(tag.PaymentStreamVarianceUnadjustedCap),
				quickfix.GroupElement(tag.PaymentStreamRealizedVarianceMethod),
				quickfix.GroupElement(tag.PaymentStreamDaysAdjustmentIndicator),
				quickfix.GroupElement(tag.PaymentStreamNearestExchangeContractRefID),
				quickfix.GroupElement(tag.PaymentStreamVegaNotionalAmount),
				quickfix.GroupElement(tag.PaymentStreamRateIndexID),
				quickfix.GroupElement(tag.PaymentStreamRateIndexIDSource),
				quickfix.GroupElement(tag.PaymentStreamNonDeliverableRefCurrency),
				quickfix.GroupElement(tag.PaymentStreamNonDeliverableFixingDatesBusinessDayConvention),
				NewNoPaymentStreamNonDeliverableFixingDatesBusinessCentersRepeatingGroup(),
				quickfix.GroupElement(tag.PaymentStreamNonDeliverableFixingDatesRelativeTo),
				quickfix.GroupElement(tag.PaymentStreamNonDeliverableFixingDatesOffsetPeriod),
				quickfix.GroupElement(tag.PaymentStreamNonDeliverableFixingDatesOffsetUnit),
				quickfix.GroupElement(tag.PaymentStreamNonDeliverableFixingDatesOffsetDayType),
				quickfix.GroupElement(tag.PaymentStreamNonDeliverableSettlRateSource),
				quickfix.GroupElement(tag.PaymentStreamNonDeliverableSettlReferencePage),
				NewNoNonDeliverableFixingDatesRepeatingGroup(),
				NewNoSettlRateFallbacksRepeatingGroup(),
				quickfix.GroupElement(tag.PaymentStreamFlatRateIndicator),
				quickfix.GroupElement(tag.PaymentStreamFlatRateAmount),
				quickfix.GroupElement(tag.PaymentStreamFlatRateCurrency),
				quickfix.GroupElement(tag.PaymentStreamMaximumPaymentAmount),
				quickfix.GroupElement(tag.PaymentStreamMaximumPaymentCurrency),
				quickfix.GroupElement(tag.PaymentStreamMaximumTransactionAmount),
				quickfix.GroupElement(tag.PaymentStreamMaximumTransactionCurrency),
				quickfix.GroupElement(tag.PaymentStreamCashSettlIndicator),
				quickfix.GroupElement(tag.PaymentStreamCompoundingXIDRef),
				quickfix.GroupElement(tag.PaymentStreamCompoundingSpread),
				quickfix.GroupElement(tag.PaymentStreamInterpolationMethod),
				quickfix.GroupElement(tag.PaymentStreamInterpolationPeriod),
				quickfix.GroupElement(tag.PaymentStreamCompoundingFixedRate),
				quickfix.GroupElement(tag.PaymentStreamCompoundingRateIndex),
				quickfix.GroupElement(tag.PaymentStreamCompoundingRateIndexCurvePeriod),
				quickfix.GroupElement(tag.PaymentStreamCompoundingRateIndexCurveUnit),
				quickfix.GroupElement(tag.PaymentStreamCompoundingRateMultiplier),
				quickfix.GroupElement(tag.PaymentStreamCompoundingRateSpread),
				quickfix.GroupElement(tag.PaymentStreamCompoundingRateSpreadPositionType),
				quickfix.GroupElement(tag.PaymentStreamCompoundingRateTreatment),
				quickfix.GroupElement(tag.PaymentStreamCompoundingCapRate),
				quickfix.GroupElement(tag.PaymentStreamCompoundingCapRateBuySide),
				quickfix.GroupElement(tag.PaymentStreamCompoundingCapRateSellSide),
				quickfix.GroupElement(tag.PaymentStreamCompoundingFloorRate),
				quickfix.GroupElement(tag.PaymentStreamCompoundingFloorRateBuySide),
				quickfix.GroupElement(tag.PaymentStreamCompoundingFloorRateSellSide),
				quickfix.GroupElement(tag.PaymentStreamCompoundingInitialRate),
				quickfix.GroupElement(tag.PaymentStreamCompoundingFinalRateRoundingDirection),
				quickfix.GroupElement(tag.PaymentStreamCompoundingFinalRatePrecision),
				quickfix.GroupElement(tag.PaymentStreamCompoundingAveragingMethod),
				quickfix.GroupElement(tag.PaymentStreamCompoundingNegativeRateTreatment),
				quickfix.GroupElement(tag.PaymentStreamCompoundingDatesBusinessDayConvention),
				NewNoPaymentStreamCompoundingDatesBusinessCentersRepeatingGroup(),
				NewNoPaymentStreamCompoundingDatesRepeatingGroup(),
				quickfix.GroupElement(tag.PaymentStreamCompoundingDatesRelativeTo),
				quickfix.GroupElement(tag.PaymentStreamCompoundingDatesOffsetPeriod),
				quickfix.GroupElement(tag.PaymentStreamCompoundingDatesOffsetUnit),
				quickfix.GroupElement(tag.PaymentStreamCompoundingDatesOffsetDayType),
				quickfix.GroupElement(tag.PaymentStreamCompoundingPeriodSkip),
				quickfix.GroupElement(tag.PaymentStreamCompoundingStartDateUnadjusted),
				quickfix.GroupElement(tag.PaymentStreamCompoundingStartDateRelativeTo),
				quickfix.GroupElement(tag.PaymentStreamCompoundingStartDateOffsetPeriod),
				quickfix.GroupElement(tag.PaymentStreamCompoundingStartDateOffsetUnit),
				quickfix.GroupElement(tag.PaymentStreamCompoundingStartDateOffsetDayType),
				quickfix.GroupElement(tag.PaymentStreamCompoundingStartDateAdjusted),
				quickfix.GroupElement(tag.PaymentStreamCompoundingEndDateUnadjusted),
				quickfix.GroupElement(tag.PaymentStreamCompoundingEndDateRelativeTo),
				quickfix.GroupElement(tag.PaymentStreamCompoundingEndDateOffsetPeriod),
				quickfix.GroupElement(tag.PaymentStreamCompoundingEndDateOffsetUnit),
				quickfix.GroupElement(tag.PaymentStreamCompoundingEndDateOffsetDayType),
				quickfix.GroupElement(tag.PaymentStreamCompoundingEndDateAdjusted),
				quickfix.GroupElement(tag.PaymentStreamCompoundingFrequencyPeriod),
				quickfix.GroupElement(tag.PaymentStreamCompoundingFrequencyUnit),
				quickfix.GroupElement(tag.PaymentStreamCompoundingRollConvention),
				quickfix.GroupElement(tag.PaymentStreamBoundsFirstDateUnadjusted),
				quickfix.GroupElement(tag.PaymentStreamBoundsLastDateUnadjusted),
				quickfix.GroupElement(tag.PaymentStreamOtherDayCount),
				NewNoPaymentSchedulesRepeatingGroup(),
				NewNoPaymentStubsRepeatingGroup(),
				quickfix.GroupElement(tag.StreamText),
				quickfix.GroupElement(tag.EncodedStreamTextLen),
				quickfix.GroupElement(tag.EncodedStreamText),
				quickfix.GroupElement(tag.StreamXID),
				quickfix.GroupElement(tag.StreamNotionalXIDRef),
				quickfix.GroupElement(tag.StreamNotionalFrequencyPeriod),
				quickfix.GroupElement(tag.StreamNotionalFrequencyUnit),
				quickfix.GroupElement(tag.StreamNotionalCommodityFrequency),
				quickfix.GroupElement(tag.StreamNotionalUnitOfMeasure),
				quickfix.GroupElement(tag.StreamTotalNotional),
				quickfix.GroupElement(tag.StreamTotalNotionalUnitOfMeasure),
				quickfix.GroupElement(tag.StreamCommodityBase),
				quickfix.GroupElement(tag.StreamCommodityType),
				quickfix.GroupElement(tag.StreamCommoditySecurityID),
				quickfix.GroupElement(tag.StreamCommoditySecurityIDSource),
				NewNoStreamCommodityAltIDsRepeatingGroup(),
				quickfix.GroupElement(tag.StreamCommodityDesc),
				quickfix.GroupElement(tag.EncodedStreamCommodityDescLen),
				quickfix.GroupElement(tag.EncodedStreamCommodityDesc),
				NewNoStreamAssetAttributesRepeatingGroup(),
				quickfix.GroupElement(tag.StreamCommodityUnitOfMeasure),
				quickfix.GroupElement(tag.StreamCommodityCurrency),
				quickfix.GroupElement(tag.StreamCommodityExchange),
				quickfix.GroupElement(tag.StreamCommodityRateSource),
				quickfix.GroupElement(tag.StreamCommodityRateReferencePage),
				quickfix.GroupElement(tag.StreamCommodityRateReferencePageHeading),
				quickfix.GroupElement(tag.StreamDataProvider),
				NewNoStreamCommodityDataSourcesRepeatingGroup(),
				quickfix.GroupElement(tag.StreamCommodityPricingType),
				quickfix.GroupElement(tag.StreamCommodityNearbySettlDayPeriod),
				quickfix.GroupElement(tag.StreamCommodityNearbySettlDayUnit),
				quickfix.GroupElement(tag.StreamCommoditySettlDateUnadjusted),
				quickfix.GroupElement(tag.StreamCommoditySettlDateBusinessDayConvention),
				NewNoStreamCommoditySettlBusinessCentersRepeatingGroup(),
				quickfix.GroupElement(tag.StreamCommoditySettlDateAdjusted),
				quickfix.GroupElement(tag.StreamCommoditySettlMonth),
				quickfix.GroupElement(tag.StreamCommoditySettlDateRollPeriod),
				quickfix.GroupElement(tag.StreamCommoditySettlDateRollUnit),
				quickfix.GroupElement(tag.StreamCommoditySettlDayType),
				NewNoStreamCommoditySettlPeriodsRepeatingGroup(),
				quickfix.GroupElement(tag.StreamCommodityXID),
				quickfix.GroupElement(tag.StreamCommodityXIDRef),
				quickfix.GroupElement(tag.StreamCommodityDeliveryPricingRegion),
				quickfix.GroupElement(tag.DeliveryStreamType),
				NewNoDeliveryStreamCommoditySourcesRepeatingGroup(),
				quickfix.GroupElement(tag.DeliveryStreamPipeline),
				quickfix.GroupElement(tag.DeliveryStreamEntryPoint),
				quickfix.GroupElement(tag.DeliveryStreamWithdrawalPoint),
				quickfix.GroupElement(tag.DeliveryStreamDeliveryPoint),
				quickfix.GroupElement(tag.DeliveryStreamDeliveryRestriction),
				quickfix.GroupElement(tag.DeliveryStreamDeliveryContingency),
				quickfix.GroupElement(tag.DeliveryStreamDeliveryContingentPartySide),
				quickfix.GroupElement(tag.DeliveryStreamDeliverAtSourceIndicator),
				quickfix.GroupElement(tag.DeliveryStreamRiskApportionment),
				quickfix.GroupElement(tag.DeliveryStreamRiskApportionmentSource),
				NewNoDeliveryStreamCyclesRepeatingGroup(),
				quickfix.GroupElement(tag.DeliveryStreamTitleTransferLocation),
				quickfix.GroupElement(tag.DeliveryStreamTitleTransferCondition),
				quickfix.GroupElement(tag.DeliveryStreamImporterOfRecord),
				quickfix.GroupElement(tag.DeliveryStreamNegativeTolerance),
				quickfix.GroupElement(tag.DeliveryStreamPositiveTolerance),
				quickfix.GroupElement(tag.DeliveryStreamToleranceUnitOfMeasure),
				quickfix.GroupElement(tag.DeliveryStreamToleranceType),
				quickfix.GroupElement(tag.DeliveryStreamToleranceOptionSide),
				quickfix.GroupElement(tag.DeliveryStreamTotalPositiveTolerance),
				quickfix.GroupElement(tag.DeliveryStreamTotalNegativeTolerance),
				quickfix.GroupElement(tag.DeliveryStreamNotionalConversionFactor),
				quickfix.GroupElement(tag.DeliveryStreamTransportEquipment),
				quickfix.GroupElement(tag.DeliveryStreamElectingPartySide),
				quickfix.GroupElement(tag.DeliveryStreamDeliveryPointSource),
				quickfix.GroupElement(tag.DeliveryStreamDeliveryPointDesc),
				quickfix.GroupElement(tag.DeliveryStreamRouteOrCharter),
				NewNoDeliverySchedulesRepeatingGroup(),
				quickfix.GroupElement(tag.StreamVersion),
				quickfix.GroupElement(tag.StreamVersionEffectiveDate),
				quickfix.GroupElement(tag.StreamNotionalDeterminationMethod),
				quickfix.GroupElement(tag.StreamNotionalAdjustments),
			},
		),
	}
}

// Add create and append a new NoStreams to this group.
func (m NoStreamsRepeatingGroup) Add() NoStreams {
	g := m.RepeatingGroup.Add()
	return NoStreams{g}
}

// Get returns the ith NoStreams in the NoStreamsRepeatinGroup.
func (m NoStreamsRepeatingGroup) Get(i int) NoStreams {
	return NoStreams{m.RepeatingGroup.Get(i)}
}

// NoProvisions is a repeating group element, Tag 40090.
type NoProvisions struct {
	*quickfix.Group
}

// SetProvisionType sets ProvisionType, Tag 40091.
func (m NoProvisions) SetProvisionType(v enum.ProvisionType) {
	m.Set(field.NewProvisionType(v))
}

// SetProvisionDateUnadjusted sets ProvisionDateUnadjusted, Tag 40092.
func (m NoProvisions) SetProvisionDateUnadjusted(v string) {
	m.Set(field.NewProvisionDateUnadjusted(v))
}

// SetProvisionDateBusinessDayConvention sets ProvisionDateBusinessDayConvention, Tag 40093.
func (m NoProvisions) SetProvisionDateBusinessDayConvention(v int) {
	m.Set(field.NewProvisionDateBusinessDayConvention(v))
}

// SetNoProvisionDateBusinessCenters sets NoProvisionDateBusinessCenters, Tag 40957.
func (m NoProvisions) SetNoProvisionDateBusinessCenters(f NoProvisionDateBusinessCentersRepeatingGroup) {
	m.SetGroup(f)
}

// SetProvisionDateAdjusted sets ProvisionDateAdjusted, Tag 40095.
func (m NoProvisions) SetProvisionDateAdjusted(v string) {
	m.Set(field.NewProvisionDateAdjusted(v))
}

// SetProvisionDateTenorPeriod sets ProvisionDateTenorPeriod, Tag 40096.
func (m NoProvisions) SetProvisionDateTenorPeriod(v int) {
	m.Set(field.NewProvisionDateTenorPeriod(v))
}

// SetProvisionDateTenorUnit sets ProvisionDateTenorUnit, Tag 40097.
func (m NoProvisions) SetProvisionDateTenorUnit(v enum.ProvisionDateTenorUnit) {
	m.Set(field.NewProvisionDateTenorUnit(v))
}

// SetProvisionCalculationAgent sets ProvisionCalculationAgent, Tag 40098.
func (m NoProvisions) SetProvisionCalculationAgent(v enum.ProvisionCalculationAgent) {
	m.Set(field.NewProvisionCalculationAgent(v))
}

// SetProvisionOptionSinglePartyBuyerSide sets ProvisionOptionSinglePartyBuyerSide, Tag 40099.
func (m NoProvisions) SetProvisionOptionSinglePartyBuyerSide(v enum.ProvisionOptionSinglePartyBuyerSide) {
	m.Set(field.NewProvisionOptionSinglePartyBuyerSide(v))
}

// SetProvisionOptionSinglePartySellerSide sets ProvisionOptionSinglePartySellerSide, Tag 40100.
func (m NoProvisions) SetProvisionOptionSinglePartySellerSide(v int) {
	m.Set(field.NewProvisionOptionSinglePartySellerSide(v))
}

// SetProvisionCashSettlValueTime sets ProvisionCashSettlValueTime, Tag 40114.
func (m NoProvisions) SetProvisionCashSettlValueTime(v string) {
	m.Set(field.NewProvisionCashSettlValueTime(v))
}

// SetProvisionCashSettlValueTimeBusinessCenter sets ProvisionCashSettlValueTimeBusinessCenter, Tag 40115.
func (m NoProvisions) SetProvisionCashSettlValueTimeBusinessCenter(v string) {
	m.Set(field.NewProvisionCashSettlValueTimeBusinessCenter(v))
}

// SetProvisionCashSettlValueDateBusinessDayConvention sets ProvisionCashSettlValueDateBusinessDayConvention, Tag 40116.
func (m NoProvisions) SetProvisionCashSettlValueDateBusinessDayConvention(v int) {
	m.Set(field.NewProvisionCashSettlValueDateBusinessDayConvention(v))
}

// SetNoProvisionCashSettlValueDateBusinessCenters sets NoProvisionCashSettlValueDateBusinessCenters, Tag 40953.
func (m NoProvisions) SetNoProvisionCashSettlValueDateBusinessCenters(f NoProvisionCashSettlValueDateBusinessCentersRepeatingGroup) {
	m.SetGroup(f)
}

// SetProvisionCashSettlValueDateRelativeTo sets ProvisionCashSettlValueDateRelativeTo, Tag 40118.
func (m NoProvisions) SetProvisionCashSettlValueDateRelativeTo(v int) {
	m.Set(field.NewProvisionCashSettlValueDateRelativeTo(v))
}

// SetProvisionCashSettlValueDateOffsetPeriod sets ProvisionCashSettlValueDateOffsetPeriod, Tag 40119.
func (m NoProvisions) SetProvisionCashSettlValueDateOffsetPeriod(v int) {
	m.Set(field.NewProvisionCashSettlValueDateOffsetPeriod(v))
}

// SetProvisionCashSettlValueDateOffsetUnit sets ProvisionCashSettlValueDateOffsetUnit, Tag 40120.
func (m NoProvisions) SetProvisionCashSettlValueDateOffsetUnit(v string) {
	m.Set(field.NewProvisionCashSettlValueDateOffsetUnit(v))
}

// SetProvisionCashSettlValueDateOffsetDayType sets ProvisionCashSettlValueDateOffsetDayType, Tag 40121.
func (m NoProvisions) SetProvisionCashSettlValueDateOffsetDayType(v int) {
	m.Set(field.NewProvisionCashSettlValueDateOffsetDayType(v))
}

// SetProvisionCashSettlValueDateAdjusted sets ProvisionCashSettlValueDateAdjusted, Tag 40122.
func (m NoProvisions) SetProvisionCashSettlValueDateAdjusted(v string) {
	m.Set(field.NewProvisionCashSettlValueDateAdjusted(v))
}

// SetProvisionOptionExerciseBusinessDayConvention sets ProvisionOptionExerciseBusinessDayConvention, Tag 40123.
func (m NoProvisions) SetProvisionOptionExerciseBusinessDayConvention(v int) {
	m.Set(field.NewProvisionOptionExerciseBusinessDayConvention(v))
}

// SetNoProvisionOptionExerciseBusinessCenters sets NoProvisionOptionExerciseBusinessCenters, Tag 40954.
func (m NoProvisions) SetNoProvisionOptionExerciseBusinessCenters(f NoProvisionOptionExerciseBusinessCentersRepeatingGroup) {
	m.SetGroup(f)
}

// SetNoProvisionOptionExerciseFixedDates sets NoProvisionOptionExerciseFixedDates, Tag 40142.
func (m NoProvisions) SetNoProvisionOptionExerciseFixedDates(f NoProvisionOptionExerciseFixedDatesRepeatingGroup) {
	m.SetGroup(f)
}

// SetProvisionOptionExerciseEarliestDateOffsetPeriod sets ProvisionOptionExerciseEarliestDateOffsetPeriod, Tag 40125.
func (m NoProvisions) SetProvisionOptionExerciseEarliestDateOffsetPeriod(v int) {
	m.Set(field.NewProvisionOptionExerciseEarliestDateOffsetPeriod(v))
}

// SetProvisionOptionExerciseEarliestDateOffsetUnit sets ProvisionOptionExerciseEarliestDateOffsetUnit, Tag 40126.
func (m NoProvisions) SetProvisionOptionExerciseEarliestDateOffsetUnit(v enum.ProvisionOptionExerciseEarliestDateOffsetUnit) {
	m.Set(field.NewProvisionOptionExerciseEarliestDateOffsetUnit(v))
}

// SetProvisionOptionExerciseFrequencyPeriod sets ProvisionOptionExerciseFrequencyPeriod, Tag 40127.
func (m NoProvisions) SetProvisionOptionExerciseFrequencyPeriod(v int) {
	m.Set(field.NewProvisionOptionExerciseFrequencyPeriod(v))
}

// SetProvisionOptionExerciseFrequencyUnit sets ProvisionOptionExerciseFrequencyUnit, Tag 40128.
func (m NoProvisions) SetProvisionOptionExerciseFrequencyUnit(v string) {
	m.Set(field.NewProvisionOptionExerciseFrequencyUnit(v))
}

// SetProvisionOptionExerciseStartDateUnadjusted sets ProvisionOptionExerciseStartDateUnadjusted, Tag 40129.
func (m NoProvisions) SetProvisionOptionExerciseStartDateUnadjusted(v string) {
	m.Set(field.NewProvisionOptionExerciseStartDateUnadjusted(v))
}

// SetProvisionOptionExerciseStartDateRelativeTo sets ProvisionOptionExerciseStartDateRelativeTo, Tag 40130.
func (m NoProvisions) SetProvisionOptionExerciseStartDateRelativeTo(v int) {
	m.Set(field.NewProvisionOptionExerciseStartDateRelativeTo(v))
}

// SetProvisionOptionExerciseStartDateOffsetPeriod sets ProvisionOptionExerciseStartDateOffsetPeriod, Tag 40131.
func (m NoProvisions) SetProvisionOptionExerciseStartDateOffsetPeriod(v int) {
	m.Set(field.NewProvisionOptionExerciseStartDateOffsetPeriod(v))
}

// SetProvisionOptionExerciseStartDateOffsetUnit sets ProvisionOptionExerciseStartDateOffsetUnit, Tag 40132.
func (m NoProvisions) SetProvisionOptionExerciseStartDateOffsetUnit(v string) {
	m.Set(field.NewProvisionOptionExerciseStartDateOffsetUnit(v))
}

// SetProvisionOptionExerciseStartDateOffsetDayType sets ProvisionOptionExerciseStartDateOffsetDayType, Tag 40133.
func (m NoProvisions) SetProvisionOptionExerciseStartDateOffsetDayType(v int) {
	m.Set(field.NewProvisionOptionExerciseStartDateOffsetDayType(v))
}

// SetProvisionOptionExerciseStartDateAdjusted sets ProvisionOptionExerciseStartDateAdjusted, Tag 40134.
func (m NoProvisions) SetProvisionOptionExerciseStartDateAdjusted(v string) {
	m.Set(field.NewProvisionOptionExerciseStartDateAdjusted(v))
}

// SetProvisionOptionExercisePeriodSkip sets ProvisionOptionExercisePeriodSkip, Tag 40135.
func (m NoProvisions) SetProvisionOptionExercisePeriodSkip(v int) {
	m.Set(field.NewProvisionOptionExercisePeriodSkip(v))
}

// SetProvisionOptionExerciseBoundsFirstDateUnadjusted sets ProvisionOptionExerciseBoundsFirstDateUnadjusted, Tag 40136.
func (m NoProvisions) SetProvisionOptionExerciseBoundsFirstDateUnadjusted(v string) {
	m.Set(field.NewProvisionOptionExerciseBoundsFirstDateUnadjusted(v))
}

// SetProvisionOptionExerciseBoundsLastDateUnadjusted sets ProvisionOptionExerciseBoundsLastDateUnadjusted, Tag 40137.
func (m NoProvisions) SetProvisionOptionExerciseBoundsLastDateUnadjusted(v string) {
	m.Set(field.NewProvisionOptionExerciseBoundsLastDateUnadjusted(v))
}

// SetProvisionOptionExerciseEarliestTime sets ProvisionOptionExerciseEarliestTime, Tag 40138.
func (m NoProvisions) SetProvisionOptionExerciseEarliestTime(v string) {
	m.Set(field.NewProvisionOptionExerciseEarliestTime(v))
}

// SetProvisionOptionExerciseEarliestTimeBusinessCenter sets ProvisionOptionExerciseEarliestTimeBusinessCenter, Tag 40139.
func (m NoProvisions) SetProvisionOptionExerciseEarliestTimeBusinessCenter(v string) {
	m.Set(field.NewProvisionOptionExerciseEarliestTimeBusinessCenter(v))
}

// SetProvisionOptionExerciseLatestTime sets ProvisionOptionExerciseLatestTime, Tag 40140.
func (m NoProvisions) SetProvisionOptionExerciseLatestTime(v string) {
	m.Set(field.NewProvisionOptionExerciseLatestTime(v))
}

// SetProvisionOptionExerciseLatestTimeBusinessCenter sets ProvisionOptionExerciseLatestTimeBusinessCenter, Tag 40141.
func (m NoProvisions) SetProvisionOptionExerciseLatestTimeBusinessCenter(v string) {
	m.Set(field.NewProvisionOptionExerciseLatestTimeBusinessCenter(v))
}

// SetProvisionOptionExpirationDateUnadjusted sets ProvisionOptionExpirationDateUnadjusted, Tag 40145.
func (m NoProvisions) SetProvisionOptionExpirationDateUnadjusted(v string) {
	m.Set(field.NewProvisionOptionExpirationDateUnadjusted(v))
}

// SetProvisionOptionExpirationDateBusinessDayConvention sets ProvisionOptionExpirationDateBusinessDayConvention, Tag 40146.
func (m NoProvisions) SetProvisionOptionExpirationDateBusinessDayConvention(v int) {
	m.Set(field.NewProvisionOptionExpirationDateBusinessDayConvention(v))
}

// SetNoProvisionOptionExpirationDateBusinessCenters sets NoProvisionOptionExpirationDateBusinessCenters, Tag 40955.
func (m NoProvisions) SetNoProvisionOptionExpirationDateBusinessCenters(f NoProvisionOptionExpirationDateBusinessCentersRepeatingGroup) {
	m.SetGroup(f)
}

// SetProvisionOptionExpirationDateRelativeTo sets ProvisionOptionExpirationDateRelativeTo, Tag 40148.
func (m NoProvisions) SetProvisionOptionExpirationDateRelativeTo(v int) {
	m.Set(field.NewProvisionOptionExpirationDateRelativeTo(v))
}

// SetProvisionOptionExpirationDateOffsetPeriod sets ProvisionOptionExpirationDateOffsetPeriod, Tag 40149.
func (m NoProvisions) SetProvisionOptionExpirationDateOffsetPeriod(v int) {
	m.Set(field.NewProvisionOptionExpirationDateOffsetPeriod(v))
}

// SetProvisionOptionExpirationDateOffsetUnit sets ProvisionOptionExpirationDateOffsetUnit, Tag 40150.
func (m NoProvisions) SetProvisionOptionExpirationDateOffsetUnit(v string) {
	m.Set(field.NewProvisionOptionExpirationDateOffsetUnit(v))
}

// SetProvisionOptionExpirationDateOffsetDayType sets ProvisionOptionExpirationDateOffsetDayType, Tag 40151.
func (m NoProvisions) SetProvisionOptionExpirationDateOffsetDayType(v int) {
	m.Set(field.NewProvisionOptionExpirationDateOffsetDayType(v))
}

// SetProvisionOptionExpirationDateAdjusted sets ProvisionOptionExpirationDateAdjusted, Tag 40152.
func (m NoProvisions) SetProvisionOptionExpirationDateAdjusted(v string) {
	m.Set(field.NewProvisionOptionExpirationDateAdjusted(v))
}

// SetProvisionOptionExpirationTime sets ProvisionOptionExpirationTime, Tag 40153.
func (m NoProvisions) SetProvisionOptionExpirationTime(v string) {
	m.Set(field.NewProvisionOptionExpirationTime(v))
}

// SetProvisionOptionExpirationTimeBusinessCenter sets ProvisionOptionExpirationTimeBusinessCenter, Tag 40154.
func (m NoProvisions) SetProvisionOptionExpirationTimeBusinessCenter(v string) {
	m.Set(field.NewProvisionOptionExpirationTimeBusinessCenter(v))
}

// SetProvisionOptionRelevantUnderlyingDateUnadjusted sets ProvisionOptionRelevantUnderlyingDateUnadjusted, Tag 40155.
func (m NoProvisions) SetProvisionOptionRelevantUnderlyingDateUnadjusted(v string) {
	m.Set(field.NewProvisionOptionRelevantUnderlyingDateUnadjusted(v))
}

// SetProvisionOptionRelevantUnderlyingDateBusinessDayConvention sets ProvisionOptionRelevantUnderlyingDateBusinessDayConvention, Tag 40156.
func (m NoProvisions) SetProvisionOptionRelevantUnderlyingDateBusinessDayConvention(v int) {
	m.Set(field.NewProvisionOptionRelevantUnderlyingDateBusinessDayConvention(v))
}

// SetNoProvisionOptionRelevantUnderlyingDateBusinessCenters sets NoProvisionOptionRelevantUnderlyingDateBusinessCenters, Tag 40956.
func (m NoProvisions) SetNoProvisionOptionRelevantUnderlyingDateBusinessCenters(f NoProvisionOptionRelevantUnderlyingDateBusinessCentersRepeatingGroup) {
	m.SetGroup(f)
}

// SetProvisionOptionRelevantUnderlyingDateRelativeTo sets ProvisionOptionRelevantUnderlyingDateRelativeTo, Tag 40158.
func (m NoProvisions) SetProvisionOptionRelevantUnderlyingDateRelativeTo(v int) {
	m.Set(field.NewProvisionOptionRelevantUnderlyingDateRelativeTo(v))
}

// SetProvisionOptionRelevantUnderlyingDateOffsetPeriod sets ProvisionOptionRelevantUnderlyingDateOffsetPeriod, Tag 40159.
func (m NoProvisions) SetProvisionOptionRelevantUnderlyingDateOffsetPeriod(v int) {
	m.Set(field.NewProvisionOptionRelevantUnderlyingDateOffsetPeriod(v))
}

// SetProvisionOptionRelevantUnderlyingDateOffsetUnit sets ProvisionOptionRelevantUnderlyingDateOffsetUnit, Tag 40160.
func (m NoProvisions) SetProvisionOptionRelevantUnderlyingDateOffsetUnit(v string) {
	m.Set(field.NewProvisionOptionRelevantUnderlyingDateOffsetUnit(v))
}

// SetProvisionOptionRelevantUnderlyingDateOffsetDayType sets ProvisionOptionRelevantUnderlyingDateOffsetDayType, Tag 40161.
func (m NoProvisions) SetProvisionOptionRelevantUnderlyingDateOffsetDayType(v int) {
	m.Set(field.NewProvisionOptionRelevantUnderlyingDateOffsetDayType(v))
}

// SetProvisionOptionRelevantUnderlyingDateAdjusted sets ProvisionOptionRelevantUnderlyingDateAdjusted, Tag 40162.
func (m NoProvisions) SetProvisionOptionRelevantUnderlyingDateAdjusted(v string) {
	m.Set(field.NewProvisionOptionRelevantUnderlyingDateAdjusted(v))
}

// SetProvisionOptionExerciseStyle sets ProvisionOptionExerciseStyle, Tag 40101.
func (m NoProvisions) SetProvisionOptionExerciseStyle(v int) {
	m.Set(field.NewProvisionOptionExerciseStyle(v))
}

// SetProvisionOptionExerciseMultipleNotional sets ProvisionOptionExerciseMultipleNotional, Tag 40102.
func (m NoProvisions) SetProvisionOptionExerciseMultipleNotional(value decimal.Decimal, scale int32) {
	m.Set(field.NewProvisionOptionExerciseMultipleNotional(value, scale))
}

// SetProvisionOptionExerciseMinimumNotional sets ProvisionOptionExerciseMinimumNotional, Tag 40103.
func (m NoProvisions) SetProvisionOptionExerciseMinimumNotional(value decimal.Decimal, scale int32) {
	m.Set(field.NewProvisionOptionExerciseMinimumNotional(value, scale))
}

// SetProvisionOptionExerciseMaximumNotional sets ProvisionOptionExerciseMaximumNotional, Tag 40104.
func (m NoProvisions) SetProvisionOptionExerciseMaximumNotional(value decimal.Decimal, scale int32) {
	m.Set(field.NewProvisionOptionExerciseMaximumNotional(value, scale))
}

// SetProvisionOptionMinimumNumber sets ProvisionOptionMinimumNumber, Tag 40105.
func (m NoProvisions) SetProvisionOptionMinimumNumber(v int) {
	m.Set(field.NewProvisionOptionMinimumNumber(v))
}

// SetProvisionOptionMaximumNumber sets ProvisionOptionMaximumNumber, Tag 40106.
func (m NoProvisions) SetProvisionOptionMaximumNumber(v int) {
	m.Set(field.NewProvisionOptionMaximumNumber(v))
}

// SetProvisionOptionExerciseConfirmation sets ProvisionOptionExerciseConfirmation, Tag 40107.
func (m NoProvisions) SetProvisionOptionExerciseConfirmation(v bool) {
	m.Set(field.NewProvisionOptionExerciseConfirmation(v))
}

// SetProvisionCashSettlPaymentDateBusinessDayConvention sets ProvisionCashSettlPaymentDateBusinessDayConvention, Tag 40163.
func (m NoProvisions) SetProvisionCashSettlPaymentDateBusinessDayConvention(v int) {
	m.Set(field.NewProvisionCashSettlPaymentDateBusinessDayConvention(v))
}

// SetNoProvisionCashSettlPaymentDateBusinessCenters sets NoProvisionCashSettlPaymentDateBusinessCenters, Tag 40952.
func (m NoProvisions) SetNoProvisionCashSettlPaymentDateBusinessCenters(f NoProvisionCashSettlPaymentDateBusinessCentersRepeatingGroup) {
	m.SetGroup(f)
}

// SetProvisionCashSettlPaymentDateRelativeTo sets ProvisionCashSettlPaymentDateRelativeTo, Tag 40165.
func (m NoProvisions) SetProvisionCashSettlPaymentDateRelativeTo(v int) {
	m.Set(field.NewProvisionCashSettlPaymentDateRelativeTo(v))
}

// SetProvisionCashSettlPaymentDateOffsetPeriod sets ProvisionCashSettlPaymentDateOffsetPeriod, Tag 40166.
func (m NoProvisions) SetProvisionCashSettlPaymentDateOffsetPeriod(v int) {
	m.Set(field.NewProvisionCashSettlPaymentDateOffsetPeriod(v))
}

// SetProvisionCashSettlPaymentDateOffsetUnit sets ProvisionCashSettlPaymentDateOffsetUnit, Tag 40167.
func (m NoProvisions) SetProvisionCashSettlPaymentDateOffsetUnit(v string) {
	m.Set(field.NewProvisionCashSettlPaymentDateOffsetUnit(v))
}

// SetProvisionCashSettlPaymentDateOffsetDayType sets ProvisionCashSettlPaymentDateOffsetDayType, Tag 40168.
func (m NoProvisions) SetProvisionCashSettlPaymentDateOffsetDayType(v int) {
	m.Set(field.NewProvisionCashSettlPaymentDateOffsetDayType(v))
}

// SetProvisionCashSettlPaymentDateRangeFirst sets ProvisionCashSettlPaymentDateRangeFirst, Tag 40169.
func (m NoProvisions) SetProvisionCashSettlPaymentDateRangeFirst(v string) {
	m.Set(field.NewProvisionCashSettlPaymentDateRangeFirst(v))
}

// SetProvisionCashSettlPaymentDateRangeLast sets ProvisionCashSettlPaymentDateRangeLast, Tag 40170.
func (m NoProvisions) SetProvisionCashSettlPaymentDateRangeLast(v string) {
	m.Set(field.NewProvisionCashSettlPaymentDateRangeLast(v))
}

// SetNoProvisionCashSettlPaymentDates sets NoProvisionCashSettlPaymentDates, Tag 40171.
func (m NoProvisions) SetNoProvisionCashSettlPaymentDates(f NoProvisionCashSettlPaymentDatesRepeatingGroup) {
	m.SetGroup(f)
}

// SetProvisionCashSettlMethod sets ProvisionCashSettlMethod, Tag 40108.
func (m NoProvisions) SetProvisionCashSettlMethod(v enum.ProvisionCashSettlMethod) {
	m.Set(field.NewProvisionCashSettlMethod(v))
}

// SetProvisionCashSettlCurrency sets ProvisionCashSettlCurrency, Tag 40109.
func (m NoProvisions) SetProvisionCashSettlCurrency(v string) {
	m.Set(field.NewProvisionCashSettlCurrency(v))
}

// SetProvisionCashSettlCurrency2 sets ProvisionCashSettlCurrency2, Tag 40110.
func (m NoProvisions) SetProvisionCashSettlCurrency2(v string) {
	m.Set(field.NewProvisionCashSettlCurrency2(v))
}

// SetProvisionCashSettlQuoteType sets ProvisionCashSettlQuoteType, Tag 40111.
func (m NoProvisions) SetProvisionCashSettlQuoteType(v enum.ProvisionCashSettlQuoteType) {
	m.Set(field.NewProvisionCashSettlQuoteType(v))
}

// SetProvisionCashSettlQuoteSource sets ProvisionCashSettlQuoteSource, Tag 40112.
func (m NoProvisions) SetProvisionCashSettlQuoteSource(v int) {
	m.Set(field.NewProvisionCashSettlQuoteSource(v))
}

// SetProvisionCashSettlQuoteReferencePage sets ProvisionCashSettlQuoteReferencePage, Tag 41406.
func (m NoProvisions) SetProvisionCashSettlQuoteReferencePage(v string) {
	m.Set(field.NewProvisionCashSettlQuoteReferencePage(v))
}

// SetProvisionText sets ProvisionText, Tag 40113.
func (m NoProvisions) SetProvisionText(v string) {
	m.Set(field.NewProvisionText(v))
}

// SetEncodedProvisionTextLen sets EncodedProvisionTextLen, Tag 40986.
func (m NoProvisions) SetEncodedProvisionTextLen(v int) {
	m.Set(field.NewEncodedProvisionTextLen(v))
}

// SetEncodedProvisionText sets EncodedProvisionText, Tag 40987.
func (m NoProvisions) SetEncodedProvisionText(v string) {
	m.Set(field.NewEncodedProvisionText(v))
}

// SetNoProvisionPartyIDs sets NoProvisionPartyIDs, Tag 40174.
func (m NoProvisions) SetNoProvisionPartyIDs(f NoProvisionPartyIDsRepeatingGroup) {
	m.SetGroup(f)
}

// SetProvisionBreakFeeElection sets ProvisionBreakFeeElection, Tag 42707.
func (m NoProvisions) SetProvisionBreakFeeElection(v enum.ProvisionBreakFeeElection) {
	m.Set(field.NewProvisionBreakFeeElection(v))
}

// SetProvisionBreakFeeRate sets ProvisionBreakFeeRate, Tag 42708.
func (m NoProvisions) SetProvisionBreakFeeRate(value decimal.Decimal, scale int32) {
	m.Set(field.NewProvisionBreakFeeRate(value, scale))
}

// GetProvisionType gets ProvisionType, Tag 40091.
func (m NoProvisions) GetProvisionType() (v enum.ProvisionType, err quickfix.MessageRejectError) {
	var f field.ProvisionTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProvisionDateUnadjusted gets ProvisionDateUnadjusted, Tag 40092.
func (m NoProvisions) GetProvisionDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.ProvisionDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProvisionDateBusinessDayConvention gets ProvisionDateBusinessDayConvention, Tag 40093.
func (m NoProvisions) GetProvisionDateBusinessDayConvention() (v int, err quickfix.MessageRejectError) {
	var f field.ProvisionDateBusinessDayConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoProvisionDateBusinessCenters gets NoProvisionDateBusinessCenters, Tag 40957.
func (m NoProvisions) GetNoProvisionDateBusinessCenters() (NoProvisionDateBusinessCentersRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoProvisionDateBusinessCentersRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetProvisionDateAdjusted gets ProvisionDateAdjusted, Tag 40095.
func (m NoProvisions) GetProvisionDateAdjusted() (v string, err quickfix.MessageRejectError) {
	var f field.ProvisionDateAdjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProvisionDateTenorPeriod gets ProvisionDateTenorPeriod, Tag 40096.
func (m NoProvisions) GetProvisionDateTenorPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.ProvisionDateTenorPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProvisionDateTenorUnit gets ProvisionDateTenorUnit, Tag 40097.
func (m NoProvisions) GetProvisionDateTenorUnit() (v enum.ProvisionDateTenorUnit, err quickfix.MessageRejectError) {
	var f field.ProvisionDateTenorUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProvisionCalculationAgent gets ProvisionCalculationAgent, Tag 40098.
func (m NoProvisions) GetProvisionCalculationAgent() (v enum.ProvisionCalculationAgent, err quickfix.MessageRejectError) {
	var f field.ProvisionCalculationAgentField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProvisionOptionSinglePartyBuyerSide gets ProvisionOptionSinglePartyBuyerSide, Tag 40099.
func (m NoProvisions) GetProvisionOptionSinglePartyBuyerSide() (v enum.ProvisionOptionSinglePartyBuyerSide, err quickfix.MessageRejectError) {
	var f field.ProvisionOptionSinglePartyBuyerSideField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProvisionOptionSinglePartySellerSide gets ProvisionOptionSinglePartySellerSide, Tag 40100.
func (m NoProvisions) GetProvisionOptionSinglePartySellerSide() (v int, err quickfix.MessageRejectError) {
	var f field.ProvisionOptionSinglePartySellerSideField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProvisionCashSettlValueTime gets ProvisionCashSettlValueTime, Tag 40114.
func (m NoProvisions) GetProvisionCashSettlValueTime() (v string, err quickfix.MessageRejectError) {
	var f field.ProvisionCashSettlValueTimeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProvisionCashSettlValueTimeBusinessCenter gets ProvisionCashSettlValueTimeBusinessCenter, Tag 40115.
func (m NoProvisions) GetProvisionCashSettlValueTimeBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.ProvisionCashSettlValueTimeBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProvisionCashSettlValueDateBusinessDayConvention gets ProvisionCashSettlValueDateBusinessDayConvention, Tag 40116.
func (m NoProvisions) GetProvisionCashSettlValueDateBusinessDayConvention() (v int, err quickfix.MessageRejectError) {
	var f field.ProvisionCashSettlValueDateBusinessDayConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoProvisionCashSettlValueDateBusinessCenters gets NoProvisionCashSettlValueDateBusinessCenters, Tag 40953.
func (m NoProvisions) GetNoProvisionCashSettlValueDateBusinessCenters() (NoProvisionCashSettlValueDateBusinessCentersRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoProvisionCashSettlValueDateBusinessCentersRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetProvisionCashSettlValueDateRelativeTo gets ProvisionCashSettlValueDateRelativeTo, Tag 40118.
func (m NoProvisions) GetProvisionCashSettlValueDateRelativeTo() (v int, err quickfix.MessageRejectError) {
	var f field.ProvisionCashSettlValueDateRelativeToField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProvisionCashSettlValueDateOffsetPeriod gets ProvisionCashSettlValueDateOffsetPeriod, Tag 40119.
func (m NoProvisions) GetProvisionCashSettlValueDateOffsetPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.ProvisionCashSettlValueDateOffsetPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProvisionCashSettlValueDateOffsetUnit gets ProvisionCashSettlValueDateOffsetUnit, Tag 40120.
func (m NoProvisions) GetProvisionCashSettlValueDateOffsetUnit() (v string, err quickfix.MessageRejectError) {
	var f field.ProvisionCashSettlValueDateOffsetUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProvisionCashSettlValueDateOffsetDayType gets ProvisionCashSettlValueDateOffsetDayType, Tag 40121.
func (m NoProvisions) GetProvisionCashSettlValueDateOffsetDayType() (v int, err quickfix.MessageRejectError) {
	var f field.ProvisionCashSettlValueDateOffsetDayTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProvisionCashSettlValueDateAdjusted gets ProvisionCashSettlValueDateAdjusted, Tag 40122.
func (m NoProvisions) GetProvisionCashSettlValueDateAdjusted() (v string, err quickfix.MessageRejectError) {
	var f field.ProvisionCashSettlValueDateAdjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProvisionOptionExerciseBusinessDayConvention gets ProvisionOptionExerciseBusinessDayConvention, Tag 40123.
func (m NoProvisions) GetProvisionOptionExerciseBusinessDayConvention() (v int, err quickfix.MessageRejectError) {
	var f field.ProvisionOptionExerciseBusinessDayConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoProvisionOptionExerciseBusinessCenters gets NoProvisionOptionExerciseBusinessCenters, Tag 40954.
func (m NoProvisions) GetNoProvisionOptionExerciseBusinessCenters() (NoProvisionOptionExerciseBusinessCentersRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoProvisionOptionExerciseBusinessCentersRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetNoProvisionOptionExerciseFixedDates gets NoProvisionOptionExerciseFixedDates, Tag 40142.
func (m NoProvisions) GetNoProvisionOptionExerciseFixedDates() (NoProvisionOptionExerciseFixedDatesRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoProvisionOptionExerciseFixedDatesRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetProvisionOptionExerciseEarliestDateOffsetPeriod gets ProvisionOptionExerciseEarliestDateOffsetPeriod, Tag 40125.
func (m NoProvisions) GetProvisionOptionExerciseEarliestDateOffsetPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.ProvisionOptionExerciseEarliestDateOffsetPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProvisionOptionExerciseEarliestDateOffsetUnit gets ProvisionOptionExerciseEarliestDateOffsetUnit, Tag 40126.
func (m NoProvisions) GetProvisionOptionExerciseEarliestDateOffsetUnit() (v enum.ProvisionOptionExerciseEarliestDateOffsetUnit, err quickfix.MessageRejectError) {
	var f field.ProvisionOptionExerciseEarliestDateOffsetUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProvisionOptionExerciseFrequencyPeriod gets ProvisionOptionExerciseFrequencyPeriod, Tag 40127.
func (m NoProvisions) GetProvisionOptionExerciseFrequencyPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.ProvisionOptionExerciseFrequencyPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProvisionOptionExerciseFrequencyUnit gets ProvisionOptionExerciseFrequencyUnit, Tag 40128.
func (m NoProvisions) GetProvisionOptionExerciseFrequencyUnit() (v string, err quickfix.MessageRejectError) {
	var f field.ProvisionOptionExerciseFrequencyUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProvisionOptionExerciseStartDateUnadjusted gets ProvisionOptionExerciseStartDateUnadjusted, Tag 40129.
func (m NoProvisions) GetProvisionOptionExerciseStartDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.ProvisionOptionExerciseStartDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProvisionOptionExerciseStartDateRelativeTo gets ProvisionOptionExerciseStartDateRelativeTo, Tag 40130.
func (m NoProvisions) GetProvisionOptionExerciseStartDateRelativeTo() (v int, err quickfix.MessageRejectError) {
	var f field.ProvisionOptionExerciseStartDateRelativeToField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProvisionOptionExerciseStartDateOffsetPeriod gets ProvisionOptionExerciseStartDateOffsetPeriod, Tag 40131.
func (m NoProvisions) GetProvisionOptionExerciseStartDateOffsetPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.ProvisionOptionExerciseStartDateOffsetPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProvisionOptionExerciseStartDateOffsetUnit gets ProvisionOptionExerciseStartDateOffsetUnit, Tag 40132.
func (m NoProvisions) GetProvisionOptionExerciseStartDateOffsetUnit() (v string, err quickfix.MessageRejectError) {
	var f field.ProvisionOptionExerciseStartDateOffsetUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProvisionOptionExerciseStartDateOffsetDayType gets ProvisionOptionExerciseStartDateOffsetDayType, Tag 40133.
func (m NoProvisions) GetProvisionOptionExerciseStartDateOffsetDayType() (v int, err quickfix.MessageRejectError) {
	var f field.ProvisionOptionExerciseStartDateOffsetDayTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProvisionOptionExerciseStartDateAdjusted gets ProvisionOptionExerciseStartDateAdjusted, Tag 40134.
func (m NoProvisions) GetProvisionOptionExerciseStartDateAdjusted() (v string, err quickfix.MessageRejectError) {
	var f field.ProvisionOptionExerciseStartDateAdjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProvisionOptionExercisePeriodSkip gets ProvisionOptionExercisePeriodSkip, Tag 40135.
func (m NoProvisions) GetProvisionOptionExercisePeriodSkip() (v int, err quickfix.MessageRejectError) {
	var f field.ProvisionOptionExercisePeriodSkipField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProvisionOptionExerciseBoundsFirstDateUnadjusted gets ProvisionOptionExerciseBoundsFirstDateUnadjusted, Tag 40136.
func (m NoProvisions) GetProvisionOptionExerciseBoundsFirstDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.ProvisionOptionExerciseBoundsFirstDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProvisionOptionExerciseBoundsLastDateUnadjusted gets ProvisionOptionExerciseBoundsLastDateUnadjusted, Tag 40137.
func (m NoProvisions) GetProvisionOptionExerciseBoundsLastDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.ProvisionOptionExerciseBoundsLastDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProvisionOptionExerciseEarliestTime gets ProvisionOptionExerciseEarliestTime, Tag 40138.
func (m NoProvisions) GetProvisionOptionExerciseEarliestTime() (v string, err quickfix.MessageRejectError) {
	var f field.ProvisionOptionExerciseEarliestTimeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProvisionOptionExerciseEarliestTimeBusinessCenter gets ProvisionOptionExerciseEarliestTimeBusinessCenter, Tag 40139.
func (m NoProvisions) GetProvisionOptionExerciseEarliestTimeBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.ProvisionOptionExerciseEarliestTimeBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProvisionOptionExerciseLatestTime gets ProvisionOptionExerciseLatestTime, Tag 40140.
func (m NoProvisions) GetProvisionOptionExerciseLatestTime() (v string, err quickfix.MessageRejectError) {
	var f field.ProvisionOptionExerciseLatestTimeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProvisionOptionExerciseLatestTimeBusinessCenter gets ProvisionOptionExerciseLatestTimeBusinessCenter, Tag 40141.
func (m NoProvisions) GetProvisionOptionExerciseLatestTimeBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.ProvisionOptionExerciseLatestTimeBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProvisionOptionExpirationDateUnadjusted gets ProvisionOptionExpirationDateUnadjusted, Tag 40145.
func (m NoProvisions) GetProvisionOptionExpirationDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.ProvisionOptionExpirationDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProvisionOptionExpirationDateBusinessDayConvention gets ProvisionOptionExpirationDateBusinessDayConvention, Tag 40146.
func (m NoProvisions) GetProvisionOptionExpirationDateBusinessDayConvention() (v int, err quickfix.MessageRejectError) {
	var f field.ProvisionOptionExpirationDateBusinessDayConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoProvisionOptionExpirationDateBusinessCenters gets NoProvisionOptionExpirationDateBusinessCenters, Tag 40955.
func (m NoProvisions) GetNoProvisionOptionExpirationDateBusinessCenters() (NoProvisionOptionExpirationDateBusinessCentersRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoProvisionOptionExpirationDateBusinessCentersRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetProvisionOptionExpirationDateRelativeTo gets ProvisionOptionExpirationDateRelativeTo, Tag 40148.
func (m NoProvisions) GetProvisionOptionExpirationDateRelativeTo() (v int, err quickfix.MessageRejectError) {
	var f field.ProvisionOptionExpirationDateRelativeToField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProvisionOptionExpirationDateOffsetPeriod gets ProvisionOptionExpirationDateOffsetPeriod, Tag 40149.
func (m NoProvisions) GetProvisionOptionExpirationDateOffsetPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.ProvisionOptionExpirationDateOffsetPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProvisionOptionExpirationDateOffsetUnit gets ProvisionOptionExpirationDateOffsetUnit, Tag 40150.
func (m NoProvisions) GetProvisionOptionExpirationDateOffsetUnit() (v string, err quickfix.MessageRejectError) {
	var f field.ProvisionOptionExpirationDateOffsetUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProvisionOptionExpirationDateOffsetDayType gets ProvisionOptionExpirationDateOffsetDayType, Tag 40151.
func (m NoProvisions) GetProvisionOptionExpirationDateOffsetDayType() (v int, err quickfix.MessageRejectError) {
	var f field.ProvisionOptionExpirationDateOffsetDayTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProvisionOptionExpirationDateAdjusted gets ProvisionOptionExpirationDateAdjusted, Tag 40152.
func (m NoProvisions) GetProvisionOptionExpirationDateAdjusted() (v string, err quickfix.MessageRejectError) {
	var f field.ProvisionOptionExpirationDateAdjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProvisionOptionExpirationTime gets ProvisionOptionExpirationTime, Tag 40153.
func (m NoProvisions) GetProvisionOptionExpirationTime() (v string, err quickfix.MessageRejectError) {
	var f field.ProvisionOptionExpirationTimeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProvisionOptionExpirationTimeBusinessCenter gets ProvisionOptionExpirationTimeBusinessCenter, Tag 40154.
func (m NoProvisions) GetProvisionOptionExpirationTimeBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.ProvisionOptionExpirationTimeBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProvisionOptionRelevantUnderlyingDateUnadjusted gets ProvisionOptionRelevantUnderlyingDateUnadjusted, Tag 40155.
func (m NoProvisions) GetProvisionOptionRelevantUnderlyingDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.ProvisionOptionRelevantUnderlyingDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProvisionOptionRelevantUnderlyingDateBusinessDayConvention gets ProvisionOptionRelevantUnderlyingDateBusinessDayConvention, Tag 40156.
func (m NoProvisions) GetProvisionOptionRelevantUnderlyingDateBusinessDayConvention() (v int, err quickfix.MessageRejectError) {
	var f field.ProvisionOptionRelevantUnderlyingDateBusinessDayConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoProvisionOptionRelevantUnderlyingDateBusinessCenters gets NoProvisionOptionRelevantUnderlyingDateBusinessCenters, Tag 40956.
func (m NoProvisions) GetNoProvisionOptionRelevantUnderlyingDateBusinessCenters() (NoProvisionOptionRelevantUnderlyingDateBusinessCentersRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoProvisionOptionRelevantUnderlyingDateBusinessCentersRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetProvisionOptionRelevantUnderlyingDateRelativeTo gets ProvisionOptionRelevantUnderlyingDateRelativeTo, Tag 40158.
func (m NoProvisions) GetProvisionOptionRelevantUnderlyingDateRelativeTo() (v int, err quickfix.MessageRejectError) {
	var f field.ProvisionOptionRelevantUnderlyingDateRelativeToField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProvisionOptionRelevantUnderlyingDateOffsetPeriod gets ProvisionOptionRelevantUnderlyingDateOffsetPeriod, Tag 40159.
func (m NoProvisions) GetProvisionOptionRelevantUnderlyingDateOffsetPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.ProvisionOptionRelevantUnderlyingDateOffsetPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProvisionOptionRelevantUnderlyingDateOffsetUnit gets ProvisionOptionRelevantUnderlyingDateOffsetUnit, Tag 40160.
func (m NoProvisions) GetProvisionOptionRelevantUnderlyingDateOffsetUnit() (v string, err quickfix.MessageRejectError) {
	var f field.ProvisionOptionRelevantUnderlyingDateOffsetUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProvisionOptionRelevantUnderlyingDateOffsetDayType gets ProvisionOptionRelevantUnderlyingDateOffsetDayType, Tag 40161.
func (m NoProvisions) GetProvisionOptionRelevantUnderlyingDateOffsetDayType() (v int, err quickfix.MessageRejectError) {
	var f field.ProvisionOptionRelevantUnderlyingDateOffsetDayTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProvisionOptionRelevantUnderlyingDateAdjusted gets ProvisionOptionRelevantUnderlyingDateAdjusted, Tag 40162.
func (m NoProvisions) GetProvisionOptionRelevantUnderlyingDateAdjusted() (v string, err quickfix.MessageRejectError) {
	var f field.ProvisionOptionRelevantUnderlyingDateAdjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProvisionOptionExerciseStyle gets ProvisionOptionExerciseStyle, Tag 40101.
func (m NoProvisions) GetProvisionOptionExerciseStyle() (v int, err quickfix.MessageRejectError) {
	var f field.ProvisionOptionExerciseStyleField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProvisionOptionExerciseMultipleNotional gets ProvisionOptionExerciseMultipleNotional, Tag 40102.
func (m NoProvisions) GetProvisionOptionExerciseMultipleNotional() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.ProvisionOptionExerciseMultipleNotionalField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProvisionOptionExerciseMinimumNotional gets ProvisionOptionExerciseMinimumNotional, Tag 40103.
func (m NoProvisions) GetProvisionOptionExerciseMinimumNotional() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.ProvisionOptionExerciseMinimumNotionalField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProvisionOptionExerciseMaximumNotional gets ProvisionOptionExerciseMaximumNotional, Tag 40104.
func (m NoProvisions) GetProvisionOptionExerciseMaximumNotional() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.ProvisionOptionExerciseMaximumNotionalField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProvisionOptionMinimumNumber gets ProvisionOptionMinimumNumber, Tag 40105.
func (m NoProvisions) GetProvisionOptionMinimumNumber() (v int, err quickfix.MessageRejectError) {
	var f field.ProvisionOptionMinimumNumberField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProvisionOptionMaximumNumber gets ProvisionOptionMaximumNumber, Tag 40106.
func (m NoProvisions) GetProvisionOptionMaximumNumber() (v int, err quickfix.MessageRejectError) {
	var f field.ProvisionOptionMaximumNumberField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProvisionOptionExerciseConfirmation gets ProvisionOptionExerciseConfirmation, Tag 40107.
func (m NoProvisions) GetProvisionOptionExerciseConfirmation() (v bool, err quickfix.MessageRejectError) {
	var f field.ProvisionOptionExerciseConfirmationField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProvisionCashSettlPaymentDateBusinessDayConvention gets ProvisionCashSettlPaymentDateBusinessDayConvention, Tag 40163.
func (m NoProvisions) GetProvisionCashSettlPaymentDateBusinessDayConvention() (v int, err quickfix.MessageRejectError) {
	var f field.ProvisionCashSettlPaymentDateBusinessDayConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoProvisionCashSettlPaymentDateBusinessCenters gets NoProvisionCashSettlPaymentDateBusinessCenters, Tag 40952.
func (m NoProvisions) GetNoProvisionCashSettlPaymentDateBusinessCenters() (NoProvisionCashSettlPaymentDateBusinessCentersRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoProvisionCashSettlPaymentDateBusinessCentersRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetProvisionCashSettlPaymentDateRelativeTo gets ProvisionCashSettlPaymentDateRelativeTo, Tag 40165.
func (m NoProvisions) GetProvisionCashSettlPaymentDateRelativeTo() (v int, err quickfix.MessageRejectError) {
	var f field.ProvisionCashSettlPaymentDateRelativeToField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProvisionCashSettlPaymentDateOffsetPeriod gets ProvisionCashSettlPaymentDateOffsetPeriod, Tag 40166.
func (m NoProvisions) GetProvisionCashSettlPaymentDateOffsetPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.ProvisionCashSettlPaymentDateOffsetPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProvisionCashSettlPaymentDateOffsetUnit gets ProvisionCashSettlPaymentDateOffsetUnit, Tag 40167.
func (m NoProvisions) GetProvisionCashSettlPaymentDateOffsetUnit() (v string, err quickfix.MessageRejectError) {
	var f field.ProvisionCashSettlPaymentDateOffsetUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProvisionCashSettlPaymentDateOffsetDayType gets ProvisionCashSettlPaymentDateOffsetDayType, Tag 40168.
func (m NoProvisions) GetProvisionCashSettlPaymentDateOffsetDayType() (v int, err quickfix.MessageRejectError) {
	var f field.ProvisionCashSettlPaymentDateOffsetDayTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProvisionCashSettlPaymentDateRangeFirst gets ProvisionCashSettlPaymentDateRangeFirst, Tag 40169.
func (m NoProvisions) GetProvisionCashSettlPaymentDateRangeFirst() (v string, err quickfix.MessageRejectError) {
	var f field.ProvisionCashSettlPaymentDateRangeFirstField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProvisionCashSettlPaymentDateRangeLast gets ProvisionCashSettlPaymentDateRangeLast, Tag 40170.
func (m NoProvisions) GetProvisionCashSettlPaymentDateRangeLast() (v string, err quickfix.MessageRejectError) {
	var f field.ProvisionCashSettlPaymentDateRangeLastField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoProvisionCashSettlPaymentDates gets NoProvisionCashSettlPaymentDates, Tag 40171.
func (m NoProvisions) GetNoProvisionCashSettlPaymentDates() (NoProvisionCashSettlPaymentDatesRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoProvisionCashSettlPaymentDatesRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetProvisionCashSettlMethod gets ProvisionCashSettlMethod, Tag 40108.
func (m NoProvisions) GetProvisionCashSettlMethod() (v enum.ProvisionCashSettlMethod, err quickfix.MessageRejectError) {
	var f field.ProvisionCashSettlMethodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProvisionCashSettlCurrency gets ProvisionCashSettlCurrency, Tag 40109.
func (m NoProvisions) GetProvisionCashSettlCurrency() (v string, err quickfix.MessageRejectError) {
	var f field.ProvisionCashSettlCurrencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProvisionCashSettlCurrency2 gets ProvisionCashSettlCurrency2, Tag 40110.
func (m NoProvisions) GetProvisionCashSettlCurrency2() (v string, err quickfix.MessageRejectError) {
	var f field.ProvisionCashSettlCurrency2Field
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProvisionCashSettlQuoteType gets ProvisionCashSettlQuoteType, Tag 40111.
func (m NoProvisions) GetProvisionCashSettlQuoteType() (v enum.ProvisionCashSettlQuoteType, err quickfix.MessageRejectError) {
	var f field.ProvisionCashSettlQuoteTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProvisionCashSettlQuoteSource gets ProvisionCashSettlQuoteSource, Tag 40112.
func (m NoProvisions) GetProvisionCashSettlQuoteSource() (v int, err quickfix.MessageRejectError) {
	var f field.ProvisionCashSettlQuoteSourceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProvisionCashSettlQuoteReferencePage gets ProvisionCashSettlQuoteReferencePage, Tag 41406.
func (m NoProvisions) GetProvisionCashSettlQuoteReferencePage() (v string, err quickfix.MessageRejectError) {
	var f field.ProvisionCashSettlQuoteReferencePageField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProvisionText gets ProvisionText, Tag 40113.
func (m NoProvisions) GetProvisionText() (v string, err quickfix.MessageRejectError) {
	var f field.ProvisionTextField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetEncodedProvisionTextLen gets EncodedProvisionTextLen, Tag 40986.
func (m NoProvisions) GetEncodedProvisionTextLen() (v int, err quickfix.MessageRejectError) {
	var f field.EncodedProvisionTextLenField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetEncodedProvisionText gets EncodedProvisionText, Tag 40987.
func (m NoProvisions) GetEncodedProvisionText() (v string, err quickfix.MessageRejectError) {
	var f field.EncodedProvisionTextField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoProvisionPartyIDs gets NoProvisionPartyIDs, Tag 40174.
func (m NoProvisions) GetNoProvisionPartyIDs() (NoProvisionPartyIDsRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoProvisionPartyIDsRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetProvisionBreakFeeElection gets ProvisionBreakFeeElection, Tag 42707.
func (m NoProvisions) GetProvisionBreakFeeElection() (v enum.ProvisionBreakFeeElection, err quickfix.MessageRejectError) {
	var f field.ProvisionBreakFeeElectionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProvisionBreakFeeRate gets ProvisionBreakFeeRate, Tag 42708.
func (m NoProvisions) GetProvisionBreakFeeRate() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.ProvisionBreakFeeRateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasProvisionType returns true if ProvisionType is present, Tag 40091.
func (m NoProvisions) HasProvisionType() bool {
	return m.Has(tag.ProvisionType)
}

// HasProvisionDateUnadjusted returns true if ProvisionDateUnadjusted is present, Tag 40092.
func (m NoProvisions) HasProvisionDateUnadjusted() bool {
	return m.Has(tag.ProvisionDateUnadjusted)
}

// HasProvisionDateBusinessDayConvention returns true if ProvisionDateBusinessDayConvention is present, Tag 40093.
func (m NoProvisions) HasProvisionDateBusinessDayConvention() bool {
	return m.Has(tag.ProvisionDateBusinessDayConvention)
}

// HasNoProvisionDateBusinessCenters returns true if NoProvisionDateBusinessCenters is present, Tag 40957.
func (m NoProvisions) HasNoProvisionDateBusinessCenters() bool {
	return m.Has(tag.NoProvisionDateBusinessCenters)
}

// HasProvisionDateAdjusted returns true if ProvisionDateAdjusted is present, Tag 40095.
func (m NoProvisions) HasProvisionDateAdjusted() bool {
	return m.Has(tag.ProvisionDateAdjusted)
}

// HasProvisionDateTenorPeriod returns true if ProvisionDateTenorPeriod is present, Tag 40096.
func (m NoProvisions) HasProvisionDateTenorPeriod() bool {
	return m.Has(tag.ProvisionDateTenorPeriod)
}

// HasProvisionDateTenorUnit returns true if ProvisionDateTenorUnit is present, Tag 40097.
func (m NoProvisions) HasProvisionDateTenorUnit() bool {
	return m.Has(tag.ProvisionDateTenorUnit)
}

// HasProvisionCalculationAgent returns true if ProvisionCalculationAgent is present, Tag 40098.
func (m NoProvisions) HasProvisionCalculationAgent() bool {
	return m.Has(tag.ProvisionCalculationAgent)
}

// HasProvisionOptionSinglePartyBuyerSide returns true if ProvisionOptionSinglePartyBuyerSide is present, Tag 40099.
func (m NoProvisions) HasProvisionOptionSinglePartyBuyerSide() bool {
	return m.Has(tag.ProvisionOptionSinglePartyBuyerSide)
}

// HasProvisionOptionSinglePartySellerSide returns true if ProvisionOptionSinglePartySellerSide is present, Tag 40100.
func (m NoProvisions) HasProvisionOptionSinglePartySellerSide() bool {
	return m.Has(tag.ProvisionOptionSinglePartySellerSide)
}

// HasProvisionCashSettlValueTime returns true if ProvisionCashSettlValueTime is present, Tag 40114.
func (m NoProvisions) HasProvisionCashSettlValueTime() bool {
	return m.Has(tag.ProvisionCashSettlValueTime)
}

// HasProvisionCashSettlValueTimeBusinessCenter returns true if ProvisionCashSettlValueTimeBusinessCenter is present, Tag 40115.
func (m NoProvisions) HasProvisionCashSettlValueTimeBusinessCenter() bool {
	return m.Has(tag.ProvisionCashSettlValueTimeBusinessCenter)
}

// HasProvisionCashSettlValueDateBusinessDayConvention returns true if ProvisionCashSettlValueDateBusinessDayConvention is present, Tag 40116.
func (m NoProvisions) HasProvisionCashSettlValueDateBusinessDayConvention() bool {
	return m.Has(tag.ProvisionCashSettlValueDateBusinessDayConvention)
}

// HasNoProvisionCashSettlValueDateBusinessCenters returns true if NoProvisionCashSettlValueDateBusinessCenters is present, Tag 40953.
func (m NoProvisions) HasNoProvisionCashSettlValueDateBusinessCenters() bool {
	return m.Has(tag.NoProvisionCashSettlValueDateBusinessCenters)
}

// HasProvisionCashSettlValueDateRelativeTo returns true if ProvisionCashSettlValueDateRelativeTo is present, Tag 40118.
func (m NoProvisions) HasProvisionCashSettlValueDateRelativeTo() bool {
	return m.Has(tag.ProvisionCashSettlValueDateRelativeTo)
}

// HasProvisionCashSettlValueDateOffsetPeriod returns true if ProvisionCashSettlValueDateOffsetPeriod is present, Tag 40119.
func (m NoProvisions) HasProvisionCashSettlValueDateOffsetPeriod() bool {
	return m.Has(tag.ProvisionCashSettlValueDateOffsetPeriod)
}

// HasProvisionCashSettlValueDateOffsetUnit returns true if ProvisionCashSettlValueDateOffsetUnit is present, Tag 40120.
func (m NoProvisions) HasProvisionCashSettlValueDateOffsetUnit() bool {
	return m.Has(tag.ProvisionCashSettlValueDateOffsetUnit)
}

// HasProvisionCashSettlValueDateOffsetDayType returns true if ProvisionCashSettlValueDateOffsetDayType is present, Tag 40121.
func (m NoProvisions) HasProvisionCashSettlValueDateOffsetDayType() bool {
	return m.Has(tag.ProvisionCashSettlValueDateOffsetDayType)
}

// HasProvisionCashSettlValueDateAdjusted returns true if ProvisionCashSettlValueDateAdjusted is present, Tag 40122.
func (m NoProvisions) HasProvisionCashSettlValueDateAdjusted() bool {
	return m.Has(tag.ProvisionCashSettlValueDateAdjusted)
}

// HasProvisionOptionExerciseBusinessDayConvention returns true if ProvisionOptionExerciseBusinessDayConvention is present, Tag 40123.
func (m NoProvisions) HasProvisionOptionExerciseBusinessDayConvention() bool {
	return m.Has(tag.ProvisionOptionExerciseBusinessDayConvention)
}

// HasNoProvisionOptionExerciseBusinessCenters returns true if NoProvisionOptionExerciseBusinessCenters is present, Tag 40954.
func (m NoProvisions) HasNoProvisionOptionExerciseBusinessCenters() bool {
	return m.Has(tag.NoProvisionOptionExerciseBusinessCenters)
}

// HasNoProvisionOptionExerciseFixedDates returns true if NoProvisionOptionExerciseFixedDates is present, Tag 40142.
func (m NoProvisions) HasNoProvisionOptionExerciseFixedDates() bool {
	return m.Has(tag.NoProvisionOptionExerciseFixedDates)
}

// HasProvisionOptionExerciseEarliestDateOffsetPeriod returns true if ProvisionOptionExerciseEarliestDateOffsetPeriod is present, Tag 40125.
func (m NoProvisions) HasProvisionOptionExerciseEarliestDateOffsetPeriod() bool {
	return m.Has(tag.ProvisionOptionExerciseEarliestDateOffsetPeriod)
}

// HasProvisionOptionExerciseEarliestDateOffsetUnit returns true if ProvisionOptionExerciseEarliestDateOffsetUnit is present, Tag 40126.
func (m NoProvisions) HasProvisionOptionExerciseEarliestDateOffsetUnit() bool {
	return m.Has(tag.ProvisionOptionExerciseEarliestDateOffsetUnit)
}

// HasProvisionOptionExerciseFrequencyPeriod returns true if ProvisionOptionExerciseFrequencyPeriod is present, Tag 40127.
func (m NoProvisions) HasProvisionOptionExerciseFrequencyPeriod() bool {
	return m.Has(tag.ProvisionOptionExerciseFrequencyPeriod)
}

// HasProvisionOptionExerciseFrequencyUnit returns true if ProvisionOptionExerciseFrequencyUnit is present, Tag 40128.
func (m NoProvisions) HasProvisionOptionExerciseFrequencyUnit() bool {
	return m.Has(tag.ProvisionOptionExerciseFrequencyUnit)
}

// HasProvisionOptionExerciseStartDateUnadjusted returns true if ProvisionOptionExerciseStartDateUnadjusted is present, Tag 40129.
func (m NoProvisions) HasProvisionOptionExerciseStartDateUnadjusted() bool {
	return m.Has(tag.ProvisionOptionExerciseStartDateUnadjusted)
}

// HasProvisionOptionExerciseStartDateRelativeTo returns true if ProvisionOptionExerciseStartDateRelativeTo is present, Tag 40130.
func (m NoProvisions) HasProvisionOptionExerciseStartDateRelativeTo() bool {
	return m.Has(tag.ProvisionOptionExerciseStartDateRelativeTo)
}

// HasProvisionOptionExerciseStartDateOffsetPeriod returns true if ProvisionOptionExerciseStartDateOffsetPeriod is present, Tag 40131.
func (m NoProvisions) HasProvisionOptionExerciseStartDateOffsetPeriod() bool {
	return m.Has(tag.ProvisionOptionExerciseStartDateOffsetPeriod)
}

// HasProvisionOptionExerciseStartDateOffsetUnit returns true if ProvisionOptionExerciseStartDateOffsetUnit is present, Tag 40132.
func (m NoProvisions) HasProvisionOptionExerciseStartDateOffsetUnit() bool {
	return m.Has(tag.ProvisionOptionExerciseStartDateOffsetUnit)
}

// HasProvisionOptionExerciseStartDateOffsetDayType returns true if ProvisionOptionExerciseStartDateOffsetDayType is present, Tag 40133.
func (m NoProvisions) HasProvisionOptionExerciseStartDateOffsetDayType() bool {
	return m.Has(tag.ProvisionOptionExerciseStartDateOffsetDayType)
}

// HasProvisionOptionExerciseStartDateAdjusted returns true if ProvisionOptionExerciseStartDateAdjusted is present, Tag 40134.
func (m NoProvisions) HasProvisionOptionExerciseStartDateAdjusted() bool {
	return m.Has(tag.ProvisionOptionExerciseStartDateAdjusted)
}

// HasProvisionOptionExercisePeriodSkip returns true if ProvisionOptionExercisePeriodSkip is present, Tag 40135.
func (m NoProvisions) HasProvisionOptionExercisePeriodSkip() bool {
	return m.Has(tag.ProvisionOptionExercisePeriodSkip)
}

// HasProvisionOptionExerciseBoundsFirstDateUnadjusted returns true if ProvisionOptionExerciseBoundsFirstDateUnadjusted is present, Tag 40136.
func (m NoProvisions) HasProvisionOptionExerciseBoundsFirstDateUnadjusted() bool {
	return m.Has(tag.ProvisionOptionExerciseBoundsFirstDateUnadjusted)
}

// HasProvisionOptionExerciseBoundsLastDateUnadjusted returns true if ProvisionOptionExerciseBoundsLastDateUnadjusted is present, Tag 40137.
func (m NoProvisions) HasProvisionOptionExerciseBoundsLastDateUnadjusted() bool {
	return m.Has(tag.ProvisionOptionExerciseBoundsLastDateUnadjusted)
}

// HasProvisionOptionExerciseEarliestTime returns true if ProvisionOptionExerciseEarliestTime is present, Tag 40138.
func (m NoProvisions) HasProvisionOptionExerciseEarliestTime() bool {
	return m.Has(tag.ProvisionOptionExerciseEarliestTime)
}

// HasProvisionOptionExerciseEarliestTimeBusinessCenter returns true if ProvisionOptionExerciseEarliestTimeBusinessCenter is present, Tag 40139.
func (m NoProvisions) HasProvisionOptionExerciseEarliestTimeBusinessCenter() bool {
	return m.Has(tag.ProvisionOptionExerciseEarliestTimeBusinessCenter)
}

// HasProvisionOptionExerciseLatestTime returns true if ProvisionOptionExerciseLatestTime is present, Tag 40140.
func (m NoProvisions) HasProvisionOptionExerciseLatestTime() bool {
	return m.Has(tag.ProvisionOptionExerciseLatestTime)
}

// HasProvisionOptionExerciseLatestTimeBusinessCenter returns true if ProvisionOptionExerciseLatestTimeBusinessCenter is present, Tag 40141.
func (m NoProvisions) HasProvisionOptionExerciseLatestTimeBusinessCenter() bool {
	return m.Has(tag.ProvisionOptionExerciseLatestTimeBusinessCenter)
}

// HasProvisionOptionExpirationDateUnadjusted returns true if ProvisionOptionExpirationDateUnadjusted is present, Tag 40145.
func (m NoProvisions) HasProvisionOptionExpirationDateUnadjusted() bool {
	return m.Has(tag.ProvisionOptionExpirationDateUnadjusted)
}

// HasProvisionOptionExpirationDateBusinessDayConvention returns true if ProvisionOptionExpirationDateBusinessDayConvention is present, Tag 40146.
func (m NoProvisions) HasProvisionOptionExpirationDateBusinessDayConvention() bool {
	return m.Has(tag.ProvisionOptionExpirationDateBusinessDayConvention)
}

// HasNoProvisionOptionExpirationDateBusinessCenters returns true if NoProvisionOptionExpirationDateBusinessCenters is present, Tag 40955.
func (m NoProvisions) HasNoProvisionOptionExpirationDateBusinessCenters() bool {
	return m.Has(tag.NoProvisionOptionExpirationDateBusinessCenters)
}

// HasProvisionOptionExpirationDateRelativeTo returns true if ProvisionOptionExpirationDateRelativeTo is present, Tag 40148.
func (m NoProvisions) HasProvisionOptionExpirationDateRelativeTo() bool {
	return m.Has(tag.ProvisionOptionExpirationDateRelativeTo)
}

// HasProvisionOptionExpirationDateOffsetPeriod returns true if ProvisionOptionExpirationDateOffsetPeriod is present, Tag 40149.
func (m NoProvisions) HasProvisionOptionExpirationDateOffsetPeriod() bool {
	return m.Has(tag.ProvisionOptionExpirationDateOffsetPeriod)
}

// HasProvisionOptionExpirationDateOffsetUnit returns true if ProvisionOptionExpirationDateOffsetUnit is present, Tag 40150.
func (m NoProvisions) HasProvisionOptionExpirationDateOffsetUnit() bool {
	return m.Has(tag.ProvisionOptionExpirationDateOffsetUnit)
}

// HasProvisionOptionExpirationDateOffsetDayType returns true if ProvisionOptionExpirationDateOffsetDayType is present, Tag 40151.
func (m NoProvisions) HasProvisionOptionExpirationDateOffsetDayType() bool {
	return m.Has(tag.ProvisionOptionExpirationDateOffsetDayType)
}

// HasProvisionOptionExpirationDateAdjusted returns true if ProvisionOptionExpirationDateAdjusted is present, Tag 40152.
func (m NoProvisions) HasProvisionOptionExpirationDateAdjusted() bool {
	return m.Has(tag.ProvisionOptionExpirationDateAdjusted)
}

// HasProvisionOptionExpirationTime returns true if ProvisionOptionExpirationTime is present, Tag 40153.
func (m NoProvisions) HasProvisionOptionExpirationTime() bool {
	return m.Has(tag.ProvisionOptionExpirationTime)
}

// HasProvisionOptionExpirationTimeBusinessCenter returns true if ProvisionOptionExpirationTimeBusinessCenter is present, Tag 40154.
func (m NoProvisions) HasProvisionOptionExpirationTimeBusinessCenter() bool {
	return m.Has(tag.ProvisionOptionExpirationTimeBusinessCenter)
}

// HasProvisionOptionRelevantUnderlyingDateUnadjusted returns true if ProvisionOptionRelevantUnderlyingDateUnadjusted is present, Tag 40155.
func (m NoProvisions) HasProvisionOptionRelevantUnderlyingDateUnadjusted() bool {
	return m.Has(tag.ProvisionOptionRelevantUnderlyingDateUnadjusted)
}

// HasProvisionOptionRelevantUnderlyingDateBusinessDayConvention returns true if ProvisionOptionRelevantUnderlyingDateBusinessDayConvention is present, Tag 40156.
func (m NoProvisions) HasProvisionOptionRelevantUnderlyingDateBusinessDayConvention() bool {
	return m.Has(tag.ProvisionOptionRelevantUnderlyingDateBusinessDayConvention)
}

// HasNoProvisionOptionRelevantUnderlyingDateBusinessCenters returns true if NoProvisionOptionRelevantUnderlyingDateBusinessCenters is present, Tag 40956.
func (m NoProvisions) HasNoProvisionOptionRelevantUnderlyingDateBusinessCenters() bool {
	return m.Has(tag.NoProvisionOptionRelevantUnderlyingDateBusinessCenters)
}

// HasProvisionOptionRelevantUnderlyingDateRelativeTo returns true if ProvisionOptionRelevantUnderlyingDateRelativeTo is present, Tag 40158.
func (m NoProvisions) HasProvisionOptionRelevantUnderlyingDateRelativeTo() bool {
	return m.Has(tag.ProvisionOptionRelevantUnderlyingDateRelativeTo)
}

// HasProvisionOptionRelevantUnderlyingDateOffsetPeriod returns true if ProvisionOptionRelevantUnderlyingDateOffsetPeriod is present, Tag 40159.
func (m NoProvisions) HasProvisionOptionRelevantUnderlyingDateOffsetPeriod() bool {
	return m.Has(tag.ProvisionOptionRelevantUnderlyingDateOffsetPeriod)
}

// HasProvisionOptionRelevantUnderlyingDateOffsetUnit returns true if ProvisionOptionRelevantUnderlyingDateOffsetUnit is present, Tag 40160.
func (m NoProvisions) HasProvisionOptionRelevantUnderlyingDateOffsetUnit() bool {
	return m.Has(tag.ProvisionOptionRelevantUnderlyingDateOffsetUnit)
}

// HasProvisionOptionRelevantUnderlyingDateOffsetDayType returns true if ProvisionOptionRelevantUnderlyingDateOffsetDayType is present, Tag 40161.
func (m NoProvisions) HasProvisionOptionRelevantUnderlyingDateOffsetDayType() bool {
	return m.Has(tag.ProvisionOptionRelevantUnderlyingDateOffsetDayType)
}

// HasProvisionOptionRelevantUnderlyingDateAdjusted returns true if ProvisionOptionRelevantUnderlyingDateAdjusted is present, Tag 40162.
func (m NoProvisions) HasProvisionOptionRelevantUnderlyingDateAdjusted() bool {
	return m.Has(tag.ProvisionOptionRelevantUnderlyingDateAdjusted)
}

// HasProvisionOptionExerciseStyle returns true if ProvisionOptionExerciseStyle is present, Tag 40101.
func (m NoProvisions) HasProvisionOptionExerciseStyle() bool {
	return m.Has(tag.ProvisionOptionExerciseStyle)
}

// HasProvisionOptionExerciseMultipleNotional returns true if ProvisionOptionExerciseMultipleNotional is present, Tag 40102.
func (m NoProvisions) HasProvisionOptionExerciseMultipleNotional() bool {
	return m.Has(tag.ProvisionOptionExerciseMultipleNotional)
}

// HasProvisionOptionExerciseMinimumNotional returns true if ProvisionOptionExerciseMinimumNotional is present, Tag 40103.
func (m NoProvisions) HasProvisionOptionExerciseMinimumNotional() bool {
	return m.Has(tag.ProvisionOptionExerciseMinimumNotional)
}

// HasProvisionOptionExerciseMaximumNotional returns true if ProvisionOptionExerciseMaximumNotional is present, Tag 40104.
func (m NoProvisions) HasProvisionOptionExerciseMaximumNotional() bool {
	return m.Has(tag.ProvisionOptionExerciseMaximumNotional)
}

// HasProvisionOptionMinimumNumber returns true if ProvisionOptionMinimumNumber is present, Tag 40105.
func (m NoProvisions) HasProvisionOptionMinimumNumber() bool {
	return m.Has(tag.ProvisionOptionMinimumNumber)
}

// HasProvisionOptionMaximumNumber returns true if ProvisionOptionMaximumNumber is present, Tag 40106.
func (m NoProvisions) HasProvisionOptionMaximumNumber() bool {
	return m.Has(tag.ProvisionOptionMaximumNumber)
}

// HasProvisionOptionExerciseConfirmation returns true if ProvisionOptionExerciseConfirmation is present, Tag 40107.
func (m NoProvisions) HasProvisionOptionExerciseConfirmation() bool {
	return m.Has(tag.ProvisionOptionExerciseConfirmation)
}

// HasProvisionCashSettlPaymentDateBusinessDayConvention returns true if ProvisionCashSettlPaymentDateBusinessDayConvention is present, Tag 40163.
func (m NoProvisions) HasProvisionCashSettlPaymentDateBusinessDayConvention() bool {
	return m.Has(tag.ProvisionCashSettlPaymentDateBusinessDayConvention)
}

// HasNoProvisionCashSettlPaymentDateBusinessCenters returns true if NoProvisionCashSettlPaymentDateBusinessCenters is present, Tag 40952.
func (m NoProvisions) HasNoProvisionCashSettlPaymentDateBusinessCenters() bool {
	return m.Has(tag.NoProvisionCashSettlPaymentDateBusinessCenters)
}

// HasProvisionCashSettlPaymentDateRelativeTo returns true if ProvisionCashSettlPaymentDateRelativeTo is present, Tag 40165.
func (m NoProvisions) HasProvisionCashSettlPaymentDateRelativeTo() bool {
	return m.Has(tag.ProvisionCashSettlPaymentDateRelativeTo)
}

// HasProvisionCashSettlPaymentDateOffsetPeriod returns true if ProvisionCashSettlPaymentDateOffsetPeriod is present, Tag 40166.
func (m NoProvisions) HasProvisionCashSettlPaymentDateOffsetPeriod() bool {
	return m.Has(tag.ProvisionCashSettlPaymentDateOffsetPeriod)
}

// HasProvisionCashSettlPaymentDateOffsetUnit returns true if ProvisionCashSettlPaymentDateOffsetUnit is present, Tag 40167.
func (m NoProvisions) HasProvisionCashSettlPaymentDateOffsetUnit() bool {
	return m.Has(tag.ProvisionCashSettlPaymentDateOffsetUnit)
}

// HasProvisionCashSettlPaymentDateOffsetDayType returns true if ProvisionCashSettlPaymentDateOffsetDayType is present, Tag 40168.
func (m NoProvisions) HasProvisionCashSettlPaymentDateOffsetDayType() bool {
	return m.Has(tag.ProvisionCashSettlPaymentDateOffsetDayType)
}

// HasProvisionCashSettlPaymentDateRangeFirst returns true if ProvisionCashSettlPaymentDateRangeFirst is present, Tag 40169.
func (m NoProvisions) HasProvisionCashSettlPaymentDateRangeFirst() bool {
	return m.Has(tag.ProvisionCashSettlPaymentDateRangeFirst)
}

// HasProvisionCashSettlPaymentDateRangeLast returns true if ProvisionCashSettlPaymentDateRangeLast is present, Tag 40170.
func (m NoProvisions) HasProvisionCashSettlPaymentDateRangeLast() bool {
	return m.Has(tag.ProvisionCashSettlPaymentDateRangeLast)
}

// HasNoProvisionCashSettlPaymentDates returns true if NoProvisionCashSettlPaymentDates is present, Tag 40171.
func (m NoProvisions) HasNoProvisionCashSettlPaymentDates() bool {
	return m.Has(tag.NoProvisionCashSettlPaymentDates)
}

// HasProvisionCashSettlMethod returns true if ProvisionCashSettlMethod is present, Tag 40108.
func (m NoProvisions) HasProvisionCashSettlMethod() bool {
	return m.Has(tag.ProvisionCashSettlMethod)
}

// HasProvisionCashSettlCurrency returns true if ProvisionCashSettlCurrency is present, Tag 40109.
func (m NoProvisions) HasProvisionCashSettlCurrency() bool {
	return m.Has(tag.ProvisionCashSettlCurrency)
}

// HasProvisionCashSettlCurrency2 returns true if ProvisionCashSettlCurrency2 is present, Tag 40110.
func (m NoProvisions) HasProvisionCashSettlCurrency2() bool {
	return m.Has(tag.ProvisionCashSettlCurrency2)
}

// HasProvisionCashSettlQuoteType returns true if ProvisionCashSettlQuoteType is present, Tag 40111.
func (m NoProvisions) HasProvisionCashSettlQuoteType() bool {
	return m.Has(tag.ProvisionCashSettlQuoteType)
}

// HasProvisionCashSettlQuoteSource returns true if ProvisionCashSettlQuoteSource is present, Tag 40112.
func (m NoProvisions) HasProvisionCashSettlQuoteSource() bool {
	return m.Has(tag.ProvisionCashSettlQuoteSource)
}

// HasProvisionCashSettlQuoteReferencePage returns true if ProvisionCashSettlQuoteReferencePage is present, Tag 41406.
func (m NoProvisions) HasProvisionCashSettlQuoteReferencePage() bool {
	return m.Has(tag.ProvisionCashSettlQuoteReferencePage)
}

// HasProvisionText returns true if ProvisionText is present, Tag 40113.
func (m NoProvisions) HasProvisionText() bool {
	return m.Has(tag.ProvisionText)
}

// HasEncodedProvisionTextLen returns true if EncodedProvisionTextLen is present, Tag 40986.
func (m NoProvisions) HasEncodedProvisionTextLen() bool {
	return m.Has(tag.EncodedProvisionTextLen)
}

// HasEncodedProvisionText returns true if EncodedProvisionText is present, Tag 40987.
func (m NoProvisions) HasEncodedProvisionText() bool {
	return m.Has(tag.EncodedProvisionText)
}

// HasNoProvisionPartyIDs returns true if NoProvisionPartyIDs is present, Tag 40174.
func (m NoProvisions) HasNoProvisionPartyIDs() bool {
	return m.Has(tag.NoProvisionPartyIDs)
}

// HasProvisionBreakFeeElection returns true if ProvisionBreakFeeElection is present, Tag 42707.
func (m NoProvisions) HasProvisionBreakFeeElection() bool {
	return m.Has(tag.ProvisionBreakFeeElection)
}

// HasProvisionBreakFeeRate returns true if ProvisionBreakFeeRate is present, Tag 42708.
func (m NoProvisions) HasProvisionBreakFeeRate() bool {
	return m.Has(tag.ProvisionBreakFeeRate)
}

// NoProvisionDateBusinessCenters is a repeating group element, Tag 40957.
type NoProvisionDateBusinessCenters struct {
	*quickfix.Group
}

// SetProvisionDateBusinessCenter sets ProvisionDateBusinessCenter, Tag 40094.
func (m NoProvisionDateBusinessCenters) SetProvisionDateBusinessCenter(v string) {
	m.Set(field.NewProvisionDateBusinessCenter(v))
}

// GetProvisionDateBusinessCenter gets ProvisionDateBusinessCenter, Tag 40094.
func (m NoProvisionDateBusinessCenters) GetProvisionDateBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.ProvisionDateBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasProvisionDateBusinessCenter returns true if ProvisionDateBusinessCenter is present, Tag 40094.
func (m NoProvisionDateBusinessCenters) HasProvisionDateBusinessCenter() bool {
	return m.Has(tag.ProvisionDateBusinessCenter)
}

// NoProvisionDateBusinessCentersRepeatingGroup is a repeating group, Tag 40957.
type NoProvisionDateBusinessCentersRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoProvisionDateBusinessCentersRepeatingGroup returns an initialized, NoProvisionDateBusinessCentersRepeatingGroup.
func NewNoProvisionDateBusinessCentersRepeatingGroup() NoProvisionDateBusinessCentersRepeatingGroup {
	return NoProvisionDateBusinessCentersRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoProvisionDateBusinessCenters,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.ProvisionDateBusinessCenter),
			},
		),
	}
}

// Add create and append a new NoProvisionDateBusinessCenters to this group.
func (m NoProvisionDateBusinessCentersRepeatingGroup) Add() NoProvisionDateBusinessCenters {
	g := m.RepeatingGroup.Add()
	return NoProvisionDateBusinessCenters{g}
}

// Get returns the ith NoProvisionDateBusinessCenters in the NoProvisionDateBusinessCentersRepeatinGroup.
func (m NoProvisionDateBusinessCentersRepeatingGroup) Get(i int) NoProvisionDateBusinessCenters {
	return NoProvisionDateBusinessCenters{m.RepeatingGroup.Get(i)}
}

// NoProvisionCashSettlValueDateBusinessCenters is a repeating group element, Tag 40953.
type NoProvisionCashSettlValueDateBusinessCenters struct {
	*quickfix.Group
}

// SetProvisionCashSettlValueDateBusinessCenter sets ProvisionCashSettlValueDateBusinessCenter, Tag 40117.
func (m NoProvisionCashSettlValueDateBusinessCenters) SetProvisionCashSettlValueDateBusinessCenter(v string) {
	m.Set(field.NewProvisionCashSettlValueDateBusinessCenter(v))
}

// GetProvisionCashSettlValueDateBusinessCenter gets ProvisionCashSettlValueDateBusinessCenter, Tag 40117.
func (m NoProvisionCashSettlValueDateBusinessCenters) GetProvisionCashSettlValueDateBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.ProvisionCashSettlValueDateBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasProvisionCashSettlValueDateBusinessCenter returns true if ProvisionCashSettlValueDateBusinessCenter is present, Tag 40117.
func (m NoProvisionCashSettlValueDateBusinessCenters) HasProvisionCashSettlValueDateBusinessCenter() bool {
	return m.Has(tag.ProvisionCashSettlValueDateBusinessCenter)
}

// NoProvisionCashSettlValueDateBusinessCentersRepeatingGroup is a repeating group, Tag 40953.
type NoProvisionCashSettlValueDateBusinessCentersRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoProvisionCashSettlValueDateBusinessCentersRepeatingGroup returns an initialized, NoProvisionCashSettlValueDateBusinessCentersRepeatingGroup.
func NewNoProvisionCashSettlValueDateBusinessCentersRepeatingGroup() NoProvisionCashSettlValueDateBusinessCentersRepeatingGroup {
	return NoProvisionCashSettlValueDateBusinessCentersRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoProvisionCashSettlValueDateBusinessCenters,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.ProvisionCashSettlValueDateBusinessCenter),
			},
		),
	}
}

// Add create and append a new NoProvisionCashSettlValueDateBusinessCenters to this group.
func (m NoProvisionCashSettlValueDateBusinessCentersRepeatingGroup) Add() NoProvisionCashSettlValueDateBusinessCenters {
	g := m.RepeatingGroup.Add()
	return NoProvisionCashSettlValueDateBusinessCenters{g}
}

// Get returns the ith NoProvisionCashSettlValueDateBusinessCenters in the NoProvisionCashSettlValueDateBusinessCentersRepeatinGroup.
func (m NoProvisionCashSettlValueDateBusinessCentersRepeatingGroup) Get(i int) NoProvisionCashSettlValueDateBusinessCenters {
	return NoProvisionCashSettlValueDateBusinessCenters{m.RepeatingGroup.Get(i)}
}

// NoProvisionOptionExerciseBusinessCenters is a repeating group element, Tag 40954.
type NoProvisionOptionExerciseBusinessCenters struct {
	*quickfix.Group
}

// SetProvisionOptionExerciseBusinessCenter sets ProvisionOptionExerciseBusinessCenter, Tag 40124.
func (m NoProvisionOptionExerciseBusinessCenters) SetProvisionOptionExerciseBusinessCenter(v string) {
	m.Set(field.NewProvisionOptionExerciseBusinessCenter(v))
}

// GetProvisionOptionExerciseBusinessCenter gets ProvisionOptionExerciseBusinessCenter, Tag 40124.
func (m NoProvisionOptionExerciseBusinessCenters) GetProvisionOptionExerciseBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.ProvisionOptionExerciseBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasProvisionOptionExerciseBusinessCenter returns true if ProvisionOptionExerciseBusinessCenter is present, Tag 40124.
func (m NoProvisionOptionExerciseBusinessCenters) HasProvisionOptionExerciseBusinessCenter() bool {
	return m.Has(tag.ProvisionOptionExerciseBusinessCenter)
}

// NoProvisionOptionExerciseBusinessCentersRepeatingGroup is a repeating group, Tag 40954.
type NoProvisionOptionExerciseBusinessCentersRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoProvisionOptionExerciseBusinessCentersRepeatingGroup returns an initialized, NoProvisionOptionExerciseBusinessCentersRepeatingGroup.
func NewNoProvisionOptionExerciseBusinessCentersRepeatingGroup() NoProvisionOptionExerciseBusinessCentersRepeatingGroup {
	return NoProvisionOptionExerciseBusinessCentersRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoProvisionOptionExerciseBusinessCenters,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.ProvisionOptionExerciseBusinessCenter),
			},
		),
	}
}

// Add create and append a new NoProvisionOptionExerciseBusinessCenters to this group.
func (m NoProvisionOptionExerciseBusinessCentersRepeatingGroup) Add() NoProvisionOptionExerciseBusinessCenters {
	g := m.RepeatingGroup.Add()
	return NoProvisionOptionExerciseBusinessCenters{g}
}

// Get returns the ith NoProvisionOptionExerciseBusinessCenters in the NoProvisionOptionExerciseBusinessCentersRepeatinGroup.
func (m NoProvisionOptionExerciseBusinessCentersRepeatingGroup) Get(i int) NoProvisionOptionExerciseBusinessCenters {
	return NoProvisionOptionExerciseBusinessCenters{m.RepeatingGroup.Get(i)}
}

// NoProvisionOptionExerciseFixedDates is a repeating group element, Tag 40142.
type NoProvisionOptionExerciseFixedDates struct {
	*quickfix.Group
}

// SetProvisionOptionExerciseFixedDate sets ProvisionOptionExerciseFixedDate, Tag 40143.
func (m NoProvisionOptionExerciseFixedDates) SetProvisionOptionExerciseFixedDate(v string) {
	m.Set(field.NewProvisionOptionExerciseFixedDate(v))
}

// SetProvisionOptionExerciseFixedDateType sets ProvisionOptionExerciseFixedDateType, Tag 40144.
func (m NoProvisionOptionExerciseFixedDates) SetProvisionOptionExerciseFixedDateType(v enum.ProvisionOptionExerciseFixedDateType) {
	m.Set(field.NewProvisionOptionExerciseFixedDateType(v))
}

// GetProvisionOptionExerciseFixedDate gets ProvisionOptionExerciseFixedDate, Tag 40143.
func (m NoProvisionOptionExerciseFixedDates) GetProvisionOptionExerciseFixedDate() (v string, err quickfix.MessageRejectError) {
	var f field.ProvisionOptionExerciseFixedDateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProvisionOptionExerciseFixedDateType gets ProvisionOptionExerciseFixedDateType, Tag 40144.
func (m NoProvisionOptionExerciseFixedDates) GetProvisionOptionExerciseFixedDateType() (v enum.ProvisionOptionExerciseFixedDateType, err quickfix.MessageRejectError) {
	var f field.ProvisionOptionExerciseFixedDateTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasProvisionOptionExerciseFixedDate returns true if ProvisionOptionExerciseFixedDate is present, Tag 40143.
func (m NoProvisionOptionExerciseFixedDates) HasProvisionOptionExerciseFixedDate() bool {
	return m.Has(tag.ProvisionOptionExerciseFixedDate)
}

// HasProvisionOptionExerciseFixedDateType returns true if ProvisionOptionExerciseFixedDateType is present, Tag 40144.
func (m NoProvisionOptionExerciseFixedDates) HasProvisionOptionExerciseFixedDateType() bool {
	return m.Has(tag.ProvisionOptionExerciseFixedDateType)
}

// NoProvisionOptionExerciseFixedDatesRepeatingGroup is a repeating group, Tag 40142.
type NoProvisionOptionExerciseFixedDatesRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoProvisionOptionExerciseFixedDatesRepeatingGroup returns an initialized, NoProvisionOptionExerciseFixedDatesRepeatingGroup.
func NewNoProvisionOptionExerciseFixedDatesRepeatingGroup() NoProvisionOptionExerciseFixedDatesRepeatingGroup {
	return NoProvisionOptionExerciseFixedDatesRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoProvisionOptionExerciseFixedDates,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.ProvisionOptionExerciseFixedDate),
				quickfix.GroupElement(tag.ProvisionOptionExerciseFixedDateType),
			},
		),
	}
}

// Add create and append a new NoProvisionOptionExerciseFixedDates to this group.
func (m NoProvisionOptionExerciseFixedDatesRepeatingGroup) Add() NoProvisionOptionExerciseFixedDates {
	g := m.RepeatingGroup.Add()
	return NoProvisionOptionExerciseFixedDates{g}
}

// Get returns the ith NoProvisionOptionExerciseFixedDates in the NoProvisionOptionExerciseFixedDatesRepeatinGroup.
func (m NoProvisionOptionExerciseFixedDatesRepeatingGroup) Get(i int) NoProvisionOptionExerciseFixedDates {
	return NoProvisionOptionExerciseFixedDates{m.RepeatingGroup.Get(i)}
}

// NoProvisionOptionExpirationDateBusinessCenters is a repeating group element, Tag 40955.
type NoProvisionOptionExpirationDateBusinessCenters struct {
	*quickfix.Group
}

// SetProvisionOptionExpirationDateBusinessCenter sets ProvisionOptionExpirationDateBusinessCenter, Tag 40147.
func (m NoProvisionOptionExpirationDateBusinessCenters) SetProvisionOptionExpirationDateBusinessCenter(v string) {
	m.Set(field.NewProvisionOptionExpirationDateBusinessCenter(v))
}

// GetProvisionOptionExpirationDateBusinessCenter gets ProvisionOptionExpirationDateBusinessCenter, Tag 40147.
func (m NoProvisionOptionExpirationDateBusinessCenters) GetProvisionOptionExpirationDateBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.ProvisionOptionExpirationDateBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasProvisionOptionExpirationDateBusinessCenter returns true if ProvisionOptionExpirationDateBusinessCenter is present, Tag 40147.
func (m NoProvisionOptionExpirationDateBusinessCenters) HasProvisionOptionExpirationDateBusinessCenter() bool {
	return m.Has(tag.ProvisionOptionExpirationDateBusinessCenter)
}

// NoProvisionOptionExpirationDateBusinessCentersRepeatingGroup is a repeating group, Tag 40955.
type NoProvisionOptionExpirationDateBusinessCentersRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoProvisionOptionExpirationDateBusinessCentersRepeatingGroup returns an initialized, NoProvisionOptionExpirationDateBusinessCentersRepeatingGroup.
func NewNoProvisionOptionExpirationDateBusinessCentersRepeatingGroup() NoProvisionOptionExpirationDateBusinessCentersRepeatingGroup {
	return NoProvisionOptionExpirationDateBusinessCentersRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoProvisionOptionExpirationDateBusinessCenters,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.ProvisionOptionExpirationDateBusinessCenter),
			},
		),
	}
}

// Add create and append a new NoProvisionOptionExpirationDateBusinessCenters to this group.
func (m NoProvisionOptionExpirationDateBusinessCentersRepeatingGroup) Add() NoProvisionOptionExpirationDateBusinessCenters {
	g := m.RepeatingGroup.Add()
	return NoProvisionOptionExpirationDateBusinessCenters{g}
}

// Get returns the ith NoProvisionOptionExpirationDateBusinessCenters in the NoProvisionOptionExpirationDateBusinessCentersRepeatinGroup.
func (m NoProvisionOptionExpirationDateBusinessCentersRepeatingGroup) Get(i int) NoProvisionOptionExpirationDateBusinessCenters {
	return NoProvisionOptionExpirationDateBusinessCenters{m.RepeatingGroup.Get(i)}
}

// NoProvisionOptionRelevantUnderlyingDateBusinessCenters is a repeating group element, Tag 40956.
type NoProvisionOptionRelevantUnderlyingDateBusinessCenters struct {
	*quickfix.Group
}

// SetProvisionOptionRelevantUnderlyingDateBusinessCenter sets ProvisionOptionRelevantUnderlyingDateBusinessCenter, Tag 40157.
func (m NoProvisionOptionRelevantUnderlyingDateBusinessCenters) SetProvisionOptionRelevantUnderlyingDateBusinessCenter(v string) {
	m.Set(field.NewProvisionOptionRelevantUnderlyingDateBusinessCenter(v))
}

// GetProvisionOptionRelevantUnderlyingDateBusinessCenter gets ProvisionOptionRelevantUnderlyingDateBusinessCenter, Tag 40157.
func (m NoProvisionOptionRelevantUnderlyingDateBusinessCenters) GetProvisionOptionRelevantUnderlyingDateBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.ProvisionOptionRelevantUnderlyingDateBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasProvisionOptionRelevantUnderlyingDateBusinessCenter returns true if ProvisionOptionRelevantUnderlyingDateBusinessCenter is present, Tag 40157.
func (m NoProvisionOptionRelevantUnderlyingDateBusinessCenters) HasProvisionOptionRelevantUnderlyingDateBusinessCenter() bool {
	return m.Has(tag.ProvisionOptionRelevantUnderlyingDateBusinessCenter)
}

// NoProvisionOptionRelevantUnderlyingDateBusinessCentersRepeatingGroup is a repeating group, Tag 40956.
type NoProvisionOptionRelevantUnderlyingDateBusinessCentersRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoProvisionOptionRelevantUnderlyingDateBusinessCentersRepeatingGroup returns an initialized, NoProvisionOptionRelevantUnderlyingDateBusinessCentersRepeatingGroup.
func NewNoProvisionOptionRelevantUnderlyingDateBusinessCentersRepeatingGroup() NoProvisionOptionRelevantUnderlyingDateBusinessCentersRepeatingGroup {
	return NoProvisionOptionRelevantUnderlyingDateBusinessCentersRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoProvisionOptionRelevantUnderlyingDateBusinessCenters,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.ProvisionOptionRelevantUnderlyingDateBusinessCenter),
			},
		),
	}
}

// Add create and append a new NoProvisionOptionRelevantUnderlyingDateBusinessCenters to this group.
func (m NoProvisionOptionRelevantUnderlyingDateBusinessCentersRepeatingGroup) Add() NoProvisionOptionRelevantUnderlyingDateBusinessCenters {
	g := m.RepeatingGroup.Add()
	return NoProvisionOptionRelevantUnderlyingDateBusinessCenters{g}
}

// Get returns the ith NoProvisionOptionRelevantUnderlyingDateBusinessCenters in the NoProvisionOptionRelevantUnderlyingDateBusinessCentersRepeatinGroup.
func (m NoProvisionOptionRelevantUnderlyingDateBusinessCentersRepeatingGroup) Get(i int) NoProvisionOptionRelevantUnderlyingDateBusinessCenters {
	return NoProvisionOptionRelevantUnderlyingDateBusinessCenters{m.RepeatingGroup.Get(i)}
}

// NoProvisionCashSettlPaymentDateBusinessCenters is a repeating group element, Tag 40952.
type NoProvisionCashSettlPaymentDateBusinessCenters struct {
	*quickfix.Group
}

// SetProvisionCashSettlPaymentDateBusinessCenter sets ProvisionCashSettlPaymentDateBusinessCenter, Tag 40164.
func (m NoProvisionCashSettlPaymentDateBusinessCenters) SetProvisionCashSettlPaymentDateBusinessCenter(v string) {
	m.Set(field.NewProvisionCashSettlPaymentDateBusinessCenter(v))
}

// GetProvisionCashSettlPaymentDateBusinessCenter gets ProvisionCashSettlPaymentDateBusinessCenter, Tag 40164.
func (m NoProvisionCashSettlPaymentDateBusinessCenters) GetProvisionCashSettlPaymentDateBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.ProvisionCashSettlPaymentDateBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasProvisionCashSettlPaymentDateBusinessCenter returns true if ProvisionCashSettlPaymentDateBusinessCenter is present, Tag 40164.
func (m NoProvisionCashSettlPaymentDateBusinessCenters) HasProvisionCashSettlPaymentDateBusinessCenter() bool {
	return m.Has(tag.ProvisionCashSettlPaymentDateBusinessCenter)
}

// NoProvisionCashSettlPaymentDateBusinessCentersRepeatingGroup is a repeating group, Tag 40952.
type NoProvisionCashSettlPaymentDateBusinessCentersRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoProvisionCashSettlPaymentDateBusinessCentersRepeatingGroup returns an initialized, NoProvisionCashSettlPaymentDateBusinessCentersRepeatingGroup.
func NewNoProvisionCashSettlPaymentDateBusinessCentersRepeatingGroup() NoProvisionCashSettlPaymentDateBusinessCentersRepeatingGroup {
	return NoProvisionCashSettlPaymentDateBusinessCentersRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoProvisionCashSettlPaymentDateBusinessCenters,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.ProvisionCashSettlPaymentDateBusinessCenter),
			},
		),
	}
}

// Add create and append a new NoProvisionCashSettlPaymentDateBusinessCenters to this group.
func (m NoProvisionCashSettlPaymentDateBusinessCentersRepeatingGroup) Add() NoProvisionCashSettlPaymentDateBusinessCenters {
	g := m.RepeatingGroup.Add()
	return NoProvisionCashSettlPaymentDateBusinessCenters{g}
}

// Get returns the ith NoProvisionCashSettlPaymentDateBusinessCenters in the NoProvisionCashSettlPaymentDateBusinessCentersRepeatinGroup.
func (m NoProvisionCashSettlPaymentDateBusinessCentersRepeatingGroup) Get(i int) NoProvisionCashSettlPaymentDateBusinessCenters {
	return NoProvisionCashSettlPaymentDateBusinessCenters{m.RepeatingGroup.Get(i)}
}

// NoProvisionCashSettlPaymentDates is a repeating group element, Tag 40171.
type NoProvisionCashSettlPaymentDates struct {
	*quickfix.Group
}

// SetProvisionCashSettlPaymentDate sets ProvisionCashSettlPaymentDate, Tag 40172.
func (m NoProvisionCashSettlPaymentDates) SetProvisionCashSettlPaymentDate(v string) {
	m.Set(field.NewProvisionCashSettlPaymentDate(v))
}

// SetProvisionCashSettlPaymentDateType sets ProvisionCashSettlPaymentDateType, Tag 40173.
func (m NoProvisionCashSettlPaymentDates) SetProvisionCashSettlPaymentDateType(v enum.ProvisionCashSettlPaymentDateType) {
	m.Set(field.NewProvisionCashSettlPaymentDateType(v))
}

// GetProvisionCashSettlPaymentDate gets ProvisionCashSettlPaymentDate, Tag 40172.
func (m NoProvisionCashSettlPaymentDates) GetProvisionCashSettlPaymentDate() (v string, err quickfix.MessageRejectError) {
	var f field.ProvisionCashSettlPaymentDateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProvisionCashSettlPaymentDateType gets ProvisionCashSettlPaymentDateType, Tag 40173.
func (m NoProvisionCashSettlPaymentDates) GetProvisionCashSettlPaymentDateType() (v enum.ProvisionCashSettlPaymentDateType, err quickfix.MessageRejectError) {
	var f field.ProvisionCashSettlPaymentDateTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasProvisionCashSettlPaymentDate returns true if ProvisionCashSettlPaymentDate is present, Tag 40172.
func (m NoProvisionCashSettlPaymentDates) HasProvisionCashSettlPaymentDate() bool {
	return m.Has(tag.ProvisionCashSettlPaymentDate)
}

// HasProvisionCashSettlPaymentDateType returns true if ProvisionCashSettlPaymentDateType is present, Tag 40173.
func (m NoProvisionCashSettlPaymentDates) HasProvisionCashSettlPaymentDateType() bool {
	return m.Has(tag.ProvisionCashSettlPaymentDateType)
}

// NoProvisionCashSettlPaymentDatesRepeatingGroup is a repeating group, Tag 40171.
type NoProvisionCashSettlPaymentDatesRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoProvisionCashSettlPaymentDatesRepeatingGroup returns an initialized, NoProvisionCashSettlPaymentDatesRepeatingGroup.
func NewNoProvisionCashSettlPaymentDatesRepeatingGroup() NoProvisionCashSettlPaymentDatesRepeatingGroup {
	return NoProvisionCashSettlPaymentDatesRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoProvisionCashSettlPaymentDates,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.ProvisionCashSettlPaymentDate),
				quickfix.GroupElement(tag.ProvisionCashSettlPaymentDateType),
			},
		),
	}
}

// Add create and append a new NoProvisionCashSettlPaymentDates to this group.
func (m NoProvisionCashSettlPaymentDatesRepeatingGroup) Add() NoProvisionCashSettlPaymentDates {
	g := m.RepeatingGroup.Add()
	return NoProvisionCashSettlPaymentDates{g}
}

// Get returns the ith NoProvisionCashSettlPaymentDates in the NoProvisionCashSettlPaymentDatesRepeatinGroup.
func (m NoProvisionCashSettlPaymentDatesRepeatingGroup) Get(i int) NoProvisionCashSettlPaymentDates {
	return NoProvisionCashSettlPaymentDates{m.RepeatingGroup.Get(i)}
}

// NoProvisionPartyIDs is a repeating group element, Tag 40174.
type NoProvisionPartyIDs struct {
	*quickfix.Group
}

// SetProvisionPartyID sets ProvisionPartyID, Tag 40175.
func (m NoProvisionPartyIDs) SetProvisionPartyID(v string) {
	m.Set(field.NewProvisionPartyID(v))
}

// SetProvisionPartyIDSource sets ProvisionPartyIDSource, Tag 40176.
func (m NoProvisionPartyIDs) SetProvisionPartyIDSource(v string) {
	m.Set(field.NewProvisionPartyIDSource(v))
}

// SetProvisionPartyRole sets ProvisionPartyRole, Tag 40177.
func (m NoProvisionPartyIDs) SetProvisionPartyRole(v int) {
	m.Set(field.NewProvisionPartyRole(v))
}

// SetNoProvisionPartySubIDs sets NoProvisionPartySubIDs, Tag 40178.
func (m NoProvisionPartyIDs) SetNoProvisionPartySubIDs(f NoProvisionPartySubIDsRepeatingGroup) {
	m.SetGroup(f)
}

// SetProvisionPartyRoleQualifier sets ProvisionPartyRoleQualifier, Tag 2385.
func (m NoProvisionPartyIDs) SetProvisionPartyRoleQualifier(v int) {
	m.Set(field.NewProvisionPartyRoleQualifier(v))
}

// GetProvisionPartyID gets ProvisionPartyID, Tag 40175.
func (m NoProvisionPartyIDs) GetProvisionPartyID() (v string, err quickfix.MessageRejectError) {
	var f field.ProvisionPartyIDField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProvisionPartyIDSource gets ProvisionPartyIDSource, Tag 40176.
func (m NoProvisionPartyIDs) GetProvisionPartyIDSource() (v string, err quickfix.MessageRejectError) {
	var f field.ProvisionPartyIDSourceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProvisionPartyRole gets ProvisionPartyRole, Tag 40177.
func (m NoProvisionPartyIDs) GetProvisionPartyRole() (v int, err quickfix.MessageRejectError) {
	var f field.ProvisionPartyRoleField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoProvisionPartySubIDs gets NoProvisionPartySubIDs, Tag 40178.
func (m NoProvisionPartyIDs) GetNoProvisionPartySubIDs() (NoProvisionPartySubIDsRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoProvisionPartySubIDsRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetProvisionPartyRoleQualifier gets ProvisionPartyRoleQualifier, Tag 2385.
func (m NoProvisionPartyIDs) GetProvisionPartyRoleQualifier() (v int, err quickfix.MessageRejectError) {
	var f field.ProvisionPartyRoleQualifierField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasProvisionPartyID returns true if ProvisionPartyID is present, Tag 40175.
func (m NoProvisionPartyIDs) HasProvisionPartyID() bool {
	return m.Has(tag.ProvisionPartyID)
}

// HasProvisionPartyIDSource returns true if ProvisionPartyIDSource is present, Tag 40176.
func (m NoProvisionPartyIDs) HasProvisionPartyIDSource() bool {
	return m.Has(tag.ProvisionPartyIDSource)
}

// HasProvisionPartyRole returns true if ProvisionPartyRole is present, Tag 40177.
func (m NoProvisionPartyIDs) HasProvisionPartyRole() bool {
	return m.Has(tag.ProvisionPartyRole)
}

// HasNoProvisionPartySubIDs returns true if NoProvisionPartySubIDs is present, Tag 40178.
func (m NoProvisionPartyIDs) HasNoProvisionPartySubIDs() bool {
	return m.Has(tag.NoProvisionPartySubIDs)
}

// HasProvisionPartyRoleQualifier returns true if ProvisionPartyRoleQualifier is present, Tag 2385.
func (m NoProvisionPartyIDs) HasProvisionPartyRoleQualifier() bool {
	return m.Has(tag.ProvisionPartyRoleQualifier)
}

// NoProvisionPartySubIDs is a repeating group element, Tag 40178.
type NoProvisionPartySubIDs struct {
	*quickfix.Group
}

// SetProvisionPartySubID sets ProvisionPartySubID, Tag 40179.
func (m NoProvisionPartySubIDs) SetProvisionPartySubID(v string) {
	m.Set(field.NewProvisionPartySubID(v))
}

// SetProvisionPartySubIDType sets ProvisionPartySubIDType, Tag 40180.
func (m NoProvisionPartySubIDs) SetProvisionPartySubIDType(v int) {
	m.Set(field.NewProvisionPartySubIDType(v))
}

// GetProvisionPartySubID gets ProvisionPartySubID, Tag 40179.
func (m NoProvisionPartySubIDs) GetProvisionPartySubID() (v string, err quickfix.MessageRejectError) {
	var f field.ProvisionPartySubIDField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProvisionPartySubIDType gets ProvisionPartySubIDType, Tag 40180.
func (m NoProvisionPartySubIDs) GetProvisionPartySubIDType() (v int, err quickfix.MessageRejectError) {
	var f field.ProvisionPartySubIDTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasProvisionPartySubID returns true if ProvisionPartySubID is present, Tag 40179.
func (m NoProvisionPartySubIDs) HasProvisionPartySubID() bool {
	return m.Has(tag.ProvisionPartySubID)
}

// HasProvisionPartySubIDType returns true if ProvisionPartySubIDType is present, Tag 40180.
func (m NoProvisionPartySubIDs) HasProvisionPartySubIDType() bool {
	return m.Has(tag.ProvisionPartySubIDType)
}

// NoProvisionPartySubIDsRepeatingGroup is a repeating group, Tag 40178.
type NoProvisionPartySubIDsRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoProvisionPartySubIDsRepeatingGroup returns an initialized, NoProvisionPartySubIDsRepeatingGroup.
func NewNoProvisionPartySubIDsRepeatingGroup() NoProvisionPartySubIDsRepeatingGroup {
	return NoProvisionPartySubIDsRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoProvisionPartySubIDs,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.ProvisionPartySubID),
				quickfix.GroupElement(tag.ProvisionPartySubIDType),
			},
		),
	}
}

// Add create and append a new NoProvisionPartySubIDs to this group.
func (m NoProvisionPartySubIDsRepeatingGroup) Add() NoProvisionPartySubIDs {
	g := m.RepeatingGroup.Add()
	return NoProvisionPartySubIDs{g}
}

// Get returns the ith NoProvisionPartySubIDs in the NoProvisionPartySubIDsRepeatinGroup.
func (m NoProvisionPartySubIDsRepeatingGroup) Get(i int) NoProvisionPartySubIDs {
	return NoProvisionPartySubIDs{m.RepeatingGroup.Get(i)}
}

// NoProvisionPartyIDsRepeatingGroup is a repeating group, Tag 40174.
type NoProvisionPartyIDsRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoProvisionPartyIDsRepeatingGroup returns an initialized, NoProvisionPartyIDsRepeatingGroup.
func NewNoProvisionPartyIDsRepeatingGroup() NoProvisionPartyIDsRepeatingGroup {
	return NoProvisionPartyIDsRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoProvisionPartyIDs,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.ProvisionPartyID),
				quickfix.GroupElement(tag.ProvisionPartyIDSource),
				quickfix.GroupElement(tag.ProvisionPartyRole),
				NewNoProvisionPartySubIDsRepeatingGroup(),
				quickfix.GroupElement(tag.ProvisionPartyRoleQualifier),
			},
		),
	}
}

// Add create and append a new NoProvisionPartyIDs to this group.
func (m NoProvisionPartyIDsRepeatingGroup) Add() NoProvisionPartyIDs {
	g := m.RepeatingGroup.Add()
	return NoProvisionPartyIDs{g}
}

// Get returns the ith NoProvisionPartyIDs in the NoProvisionPartyIDsRepeatinGroup.
func (m NoProvisionPartyIDsRepeatingGroup) Get(i int) NoProvisionPartyIDs {
	return NoProvisionPartyIDs{m.RepeatingGroup.Get(i)}
}

// NoProvisionsRepeatingGroup is a repeating group, Tag 40090.
type NoProvisionsRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoProvisionsRepeatingGroup returns an initialized, NoProvisionsRepeatingGroup.
func NewNoProvisionsRepeatingGroup() NoProvisionsRepeatingGroup {
	return NoProvisionsRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoProvisions,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.ProvisionType),
				quickfix.GroupElement(tag.ProvisionDateUnadjusted),
				quickfix.GroupElement(tag.ProvisionDateBusinessDayConvention),
				NewNoProvisionDateBusinessCentersRepeatingGroup(),
				quickfix.GroupElement(tag.ProvisionDateAdjusted),
				quickfix.GroupElement(tag.ProvisionDateTenorPeriod),
				quickfix.GroupElement(tag.ProvisionDateTenorUnit),
				quickfix.GroupElement(tag.ProvisionCalculationAgent),
				quickfix.GroupElement(tag.ProvisionOptionSinglePartyBuyerSide),
				quickfix.GroupElement(tag.ProvisionOptionSinglePartySellerSide),
				quickfix.GroupElement(tag.ProvisionCashSettlValueTime),
				quickfix.GroupElement(tag.ProvisionCashSettlValueTimeBusinessCenter),
				quickfix.GroupElement(tag.ProvisionCashSettlValueDateBusinessDayConvention),
				NewNoProvisionCashSettlValueDateBusinessCentersRepeatingGroup(),
				quickfix.GroupElement(tag.ProvisionCashSettlValueDateRelativeTo),
				quickfix.GroupElement(tag.ProvisionCashSettlValueDateOffsetPeriod),
				quickfix.GroupElement(tag.ProvisionCashSettlValueDateOffsetUnit),
				quickfix.GroupElement(tag.ProvisionCashSettlValueDateOffsetDayType),
				quickfix.GroupElement(tag.ProvisionCashSettlValueDateAdjusted),
				quickfix.GroupElement(tag.ProvisionOptionExerciseBusinessDayConvention),
				NewNoProvisionOptionExerciseBusinessCentersRepeatingGroup(),
				NewNoProvisionOptionExerciseFixedDatesRepeatingGroup(),
				quickfix.GroupElement(tag.ProvisionOptionExerciseEarliestDateOffsetPeriod),
				quickfix.GroupElement(tag.ProvisionOptionExerciseEarliestDateOffsetUnit),
				quickfix.GroupElement(tag.ProvisionOptionExerciseFrequencyPeriod),
				quickfix.GroupElement(tag.ProvisionOptionExerciseFrequencyUnit),
				quickfix.GroupElement(tag.ProvisionOptionExerciseStartDateUnadjusted),
				quickfix.GroupElement(tag.ProvisionOptionExerciseStartDateRelativeTo),
				quickfix.GroupElement(tag.ProvisionOptionExerciseStartDateOffsetPeriod),
				quickfix.GroupElement(tag.ProvisionOptionExerciseStartDateOffsetUnit),
				quickfix.GroupElement(tag.ProvisionOptionExerciseStartDateOffsetDayType),
				quickfix.GroupElement(tag.ProvisionOptionExerciseStartDateAdjusted),
				quickfix.GroupElement(tag.ProvisionOptionExercisePeriodSkip),
				quickfix.GroupElement(tag.ProvisionOptionExerciseBoundsFirstDateUnadjusted),
				quickfix.GroupElement(tag.ProvisionOptionExerciseBoundsLastDateUnadjusted),
				quickfix.GroupElement(tag.ProvisionOptionExerciseEarliestTime),
				quickfix.GroupElement(tag.ProvisionOptionExerciseEarliestTimeBusinessCenter),
				quickfix.GroupElement(tag.ProvisionOptionExerciseLatestTime),
				quickfix.GroupElement(tag.ProvisionOptionExerciseLatestTimeBusinessCenter),
				quickfix.GroupElement(tag.ProvisionOptionExpirationDateUnadjusted),
				quickfix.GroupElement(tag.ProvisionOptionExpirationDateBusinessDayConvention),
				NewNoProvisionOptionExpirationDateBusinessCentersRepeatingGroup(),
				quickfix.GroupElement(tag.ProvisionOptionExpirationDateRelativeTo),
				quickfix.GroupElement(tag.ProvisionOptionExpirationDateOffsetPeriod),
				quickfix.GroupElement(tag.ProvisionOptionExpirationDateOffsetUnit),
				quickfix.GroupElement(tag.ProvisionOptionExpirationDateOffsetDayType),
				quickfix.GroupElement(tag.ProvisionOptionExpirationDateAdjusted),
				quickfix.GroupElement(tag.ProvisionOptionExpirationTime),
				quickfix.GroupElement(tag.ProvisionOptionExpirationTimeBusinessCenter),
				quickfix.GroupElement(tag.ProvisionOptionRelevantUnderlyingDateUnadjusted),
				quickfix.GroupElement(tag.ProvisionOptionRelevantUnderlyingDateBusinessDayConvention),
				NewNoProvisionOptionRelevantUnderlyingDateBusinessCentersRepeatingGroup(),
				quickfix.GroupElement(tag.ProvisionOptionRelevantUnderlyingDateRelativeTo),
				quickfix.GroupElement(tag.ProvisionOptionRelevantUnderlyingDateOffsetPeriod),
				quickfix.GroupElement(tag.ProvisionOptionRelevantUnderlyingDateOffsetUnit),
				quickfix.GroupElement(tag.ProvisionOptionRelevantUnderlyingDateOffsetDayType),
				quickfix.GroupElement(tag.ProvisionOptionRelevantUnderlyingDateAdjusted),
				quickfix.GroupElement(tag.ProvisionOptionExerciseStyle),
				quickfix.GroupElement(tag.ProvisionOptionExerciseMultipleNotional),
				quickfix.GroupElement(tag.ProvisionOptionExerciseMinimumNotional),
				quickfix.GroupElement(tag.ProvisionOptionExerciseMaximumNotional),
				quickfix.GroupElement(tag.ProvisionOptionMinimumNumber),
				quickfix.GroupElement(tag.ProvisionOptionMaximumNumber),
				quickfix.GroupElement(tag.ProvisionOptionExerciseConfirmation),
				quickfix.GroupElement(tag.ProvisionCashSettlPaymentDateBusinessDayConvention),
				NewNoProvisionCashSettlPaymentDateBusinessCentersRepeatingGroup(),
				quickfix.GroupElement(tag.ProvisionCashSettlPaymentDateRelativeTo),
				quickfix.GroupElement(tag.ProvisionCashSettlPaymentDateOffsetPeriod),
				quickfix.GroupElement(tag.ProvisionCashSettlPaymentDateOffsetUnit),
				quickfix.GroupElement(tag.ProvisionCashSettlPaymentDateOffsetDayType),
				quickfix.GroupElement(tag.ProvisionCashSettlPaymentDateRangeFirst),
				quickfix.GroupElement(tag.ProvisionCashSettlPaymentDateRangeLast),
				NewNoProvisionCashSettlPaymentDatesRepeatingGroup(),
				quickfix.GroupElement(tag.ProvisionCashSettlMethod),
				quickfix.GroupElement(tag.ProvisionCashSettlCurrency),
				quickfix.GroupElement(tag.ProvisionCashSettlCurrency2),
				quickfix.GroupElement(tag.ProvisionCashSettlQuoteType),
				quickfix.GroupElement(tag.ProvisionCashSettlQuoteSource),
				quickfix.GroupElement(tag.ProvisionCashSettlQuoteReferencePage),
				quickfix.GroupElement(tag.ProvisionText),
				quickfix.GroupElement(tag.EncodedProvisionTextLen),
				quickfix.GroupElement(tag.EncodedProvisionText),
				NewNoProvisionPartyIDsRepeatingGroup(),
				quickfix.GroupElement(tag.ProvisionBreakFeeElection),
				quickfix.GroupElement(tag.ProvisionBreakFeeRate),
			},
		),
	}
}

// Add create and append a new NoProvisions to this group.
func (m NoProvisionsRepeatingGroup) Add() NoProvisions {
	g := m.RepeatingGroup.Add()
	return NoProvisions{g}
}

// Get returns the ith NoProvisions in the NoProvisionsRepeatinGroup.
func (m NoProvisionsRepeatingGroup) Get(i int) NoProvisions {
	return NoProvisions{m.RepeatingGroup.Get(i)}
}

// NoAdditionalTerms is a repeating group element, Tag 40019.
type NoAdditionalTerms struct {
	*quickfix.Group
}

// SetAdditionalTermConditionPrecedentBondIndicator sets AdditionalTermConditionPrecedentBondIndicator, Tag 40020.
func (m NoAdditionalTerms) SetAdditionalTermConditionPrecedentBondIndicator(v bool) {
	m.Set(field.NewAdditionalTermConditionPrecedentBondIndicator(v))
}

// SetAdditionalTermDiscrepancyClauseIndicator sets AdditionalTermDiscrepancyClauseIndicator, Tag 40021.
func (m NoAdditionalTerms) SetAdditionalTermDiscrepancyClauseIndicator(v bool) {
	m.Set(field.NewAdditionalTermDiscrepancyClauseIndicator(v))
}

// SetNoAdditionalTermBondRefs sets NoAdditionalTermBondRefs, Tag 40000.
func (m NoAdditionalTerms) SetNoAdditionalTermBondRefs(f NoAdditionalTermBondRefsRepeatingGroup) {
	m.SetGroup(f)
}

// GetAdditionalTermConditionPrecedentBondIndicator gets AdditionalTermConditionPrecedentBondIndicator, Tag 40020.
func (m NoAdditionalTerms) GetAdditionalTermConditionPrecedentBondIndicator() (v bool, err quickfix.MessageRejectError) {
	var f field.AdditionalTermConditionPrecedentBondIndicatorField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetAdditionalTermDiscrepancyClauseIndicator gets AdditionalTermDiscrepancyClauseIndicator, Tag 40021.
func (m NoAdditionalTerms) GetAdditionalTermDiscrepancyClauseIndicator() (v bool, err quickfix.MessageRejectError) {
	var f field.AdditionalTermDiscrepancyClauseIndicatorField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoAdditionalTermBondRefs gets NoAdditionalTermBondRefs, Tag 40000.
func (m NoAdditionalTerms) GetNoAdditionalTermBondRefs() (NoAdditionalTermBondRefsRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoAdditionalTermBondRefsRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// HasAdditionalTermConditionPrecedentBondIndicator returns true if AdditionalTermConditionPrecedentBondIndicator is present, Tag 40020.
func (m NoAdditionalTerms) HasAdditionalTermConditionPrecedentBondIndicator() bool {
	return m.Has(tag.AdditionalTermConditionPrecedentBondIndicator)
}

// HasAdditionalTermDiscrepancyClauseIndicator returns true if AdditionalTermDiscrepancyClauseIndicator is present, Tag 40021.
func (m NoAdditionalTerms) HasAdditionalTermDiscrepancyClauseIndicator() bool {
	return m.Has(tag.AdditionalTermDiscrepancyClauseIndicator)
}

// HasNoAdditionalTermBondRefs returns true if NoAdditionalTermBondRefs is present, Tag 40000.
func (m NoAdditionalTerms) HasNoAdditionalTermBondRefs() bool {
	return m.Has(tag.NoAdditionalTermBondRefs)
}

// NoAdditionalTermBondRefs is a repeating group element, Tag 40000.
type NoAdditionalTermBondRefs struct {
	*quickfix.Group
}

// SetAdditionalTermBondSecurityID sets AdditionalTermBondSecurityID, Tag 40001.
func (m NoAdditionalTermBondRefs) SetAdditionalTermBondSecurityID(v string) {
	m.Set(field.NewAdditionalTermBondSecurityID(v))
}

// SetAdditionalTermBondSecurityIDSource sets AdditionalTermBondSecurityIDSource, Tag 40002.
func (m NoAdditionalTermBondRefs) SetAdditionalTermBondSecurityIDSource(v string) {
	m.Set(field.NewAdditionalTermBondSecurityIDSource(v))
}

// SetAdditionalTermBondDesc sets AdditionalTermBondDesc, Tag 40003.
func (m NoAdditionalTermBondRefs) SetAdditionalTermBondDesc(v string) {
	m.Set(field.NewAdditionalTermBondDesc(v))
}

// SetEncodedAdditionalTermBondDescLen sets EncodedAdditionalTermBondDescLen, Tag 40004.
func (m NoAdditionalTermBondRefs) SetEncodedAdditionalTermBondDescLen(v int) {
	m.Set(field.NewEncodedAdditionalTermBondDescLen(v))
}

// SetEncodedAdditionalTermBondDesc sets EncodedAdditionalTermBondDesc, Tag 40005.
func (m NoAdditionalTermBondRefs) SetEncodedAdditionalTermBondDesc(v string) {
	m.Set(field.NewEncodedAdditionalTermBondDesc(v))
}

// SetAdditionalTermBondCurrency sets AdditionalTermBondCurrency, Tag 40006.
func (m NoAdditionalTermBondRefs) SetAdditionalTermBondCurrency(v string) {
	m.Set(field.NewAdditionalTermBondCurrency(v))
}

// SetAdditionalTermBondIssuer sets AdditionalTermBondIssuer, Tag 40007.
func (m NoAdditionalTermBondRefs) SetAdditionalTermBondIssuer(v string) {
	m.Set(field.NewAdditionalTermBondIssuer(v))
}

// SetEncodedAdditionalTermBondIssuerLen sets EncodedAdditionalTermBondIssuerLen, Tag 40008.
func (m NoAdditionalTermBondRefs) SetEncodedAdditionalTermBondIssuerLen(v int) {
	m.Set(field.NewEncodedAdditionalTermBondIssuerLen(v))
}

// SetEncodedAdditionalTermBondIssuer sets EncodedAdditionalTermBondIssuer, Tag 40009.
func (m NoAdditionalTermBondRefs) SetEncodedAdditionalTermBondIssuer(v string) {
	m.Set(field.NewEncodedAdditionalTermBondIssuer(v))
}

// SetAdditionalTermBondSeniority sets AdditionalTermBondSeniority, Tag 40010.
func (m NoAdditionalTermBondRefs) SetAdditionalTermBondSeniority(v string) {
	m.Set(field.NewAdditionalTermBondSeniority(v))
}

// SetAdditionalTermBondCouponType sets AdditionalTermBondCouponType, Tag 40011.
func (m NoAdditionalTermBondRefs) SetAdditionalTermBondCouponType(v int) {
	m.Set(field.NewAdditionalTermBondCouponType(v))
}

// SetAdditionalTermBondCouponRate sets AdditionalTermBondCouponRate, Tag 40012.
func (m NoAdditionalTermBondRefs) SetAdditionalTermBondCouponRate(value decimal.Decimal, scale int32) {
	m.Set(field.NewAdditionalTermBondCouponRate(value, scale))
}

// SetAdditionalTermBondMaturityDate sets AdditionalTermBondMaturityDate, Tag 40013.
func (m NoAdditionalTermBondRefs) SetAdditionalTermBondMaturityDate(v string) {
	m.Set(field.NewAdditionalTermBondMaturityDate(v))
}

// SetAdditionalTermBondParValue sets AdditionalTermBondParValue, Tag 40014.
func (m NoAdditionalTermBondRefs) SetAdditionalTermBondParValue(value decimal.Decimal, scale int32) {
	m.Set(field.NewAdditionalTermBondParValue(value, scale))
}

// SetAdditionalTermBondCurrentTotalIssuedAmount sets AdditionalTermBondCurrentTotalIssuedAmount, Tag 40015.
func (m NoAdditionalTermBondRefs) SetAdditionalTermBondCurrentTotalIssuedAmount(value decimal.Decimal, scale int32) {
	m.Set(field.NewAdditionalTermBondCurrentTotalIssuedAmount(value, scale))
}

// SetAdditionalTermBondCouponFrequencyPeriod sets AdditionalTermBondCouponFrequencyPeriod, Tag 40016.
func (m NoAdditionalTermBondRefs) SetAdditionalTermBondCouponFrequencyPeriod(v int) {
	m.Set(field.NewAdditionalTermBondCouponFrequencyPeriod(v))
}

// SetAdditionalTermBondCouponFrequencyUnit sets AdditionalTermBondCouponFrequencyUnit, Tag 40017.
func (m NoAdditionalTermBondRefs) SetAdditionalTermBondCouponFrequencyUnit(v string) {
	m.Set(field.NewAdditionalTermBondCouponFrequencyUnit(v))
}

// SetAdditionalTermBondDayCount sets AdditionalTermBondDayCount, Tag 40018.
func (m NoAdditionalTermBondRefs) SetAdditionalTermBondDayCount(v int) {
	m.Set(field.NewAdditionalTermBondDayCount(v))
}

// GetAdditionalTermBondSecurityID gets AdditionalTermBondSecurityID, Tag 40001.
func (m NoAdditionalTermBondRefs) GetAdditionalTermBondSecurityID() (v string, err quickfix.MessageRejectError) {
	var f field.AdditionalTermBondSecurityIDField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetAdditionalTermBondSecurityIDSource gets AdditionalTermBondSecurityIDSource, Tag 40002.
func (m NoAdditionalTermBondRefs) GetAdditionalTermBondSecurityIDSource() (v string, err quickfix.MessageRejectError) {
	var f field.AdditionalTermBondSecurityIDSourceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetAdditionalTermBondDesc gets AdditionalTermBondDesc, Tag 40003.
func (m NoAdditionalTermBondRefs) GetAdditionalTermBondDesc() (v string, err quickfix.MessageRejectError) {
	var f field.AdditionalTermBondDescField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetEncodedAdditionalTermBondDescLen gets EncodedAdditionalTermBondDescLen, Tag 40004.
func (m NoAdditionalTermBondRefs) GetEncodedAdditionalTermBondDescLen() (v int, err quickfix.MessageRejectError) {
	var f field.EncodedAdditionalTermBondDescLenField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetEncodedAdditionalTermBondDesc gets EncodedAdditionalTermBondDesc, Tag 40005.
func (m NoAdditionalTermBondRefs) GetEncodedAdditionalTermBondDesc() (v string, err quickfix.MessageRejectError) {
	var f field.EncodedAdditionalTermBondDescField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetAdditionalTermBondCurrency gets AdditionalTermBondCurrency, Tag 40006.
func (m NoAdditionalTermBondRefs) GetAdditionalTermBondCurrency() (v string, err quickfix.MessageRejectError) {
	var f field.AdditionalTermBondCurrencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetAdditionalTermBondIssuer gets AdditionalTermBondIssuer, Tag 40007.
func (m NoAdditionalTermBondRefs) GetAdditionalTermBondIssuer() (v string, err quickfix.MessageRejectError) {
	var f field.AdditionalTermBondIssuerField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetEncodedAdditionalTermBondIssuerLen gets EncodedAdditionalTermBondIssuerLen, Tag 40008.
func (m NoAdditionalTermBondRefs) GetEncodedAdditionalTermBondIssuerLen() (v int, err quickfix.MessageRejectError) {
	var f field.EncodedAdditionalTermBondIssuerLenField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetEncodedAdditionalTermBondIssuer gets EncodedAdditionalTermBondIssuer, Tag 40009.
func (m NoAdditionalTermBondRefs) GetEncodedAdditionalTermBondIssuer() (v string, err quickfix.MessageRejectError) {
	var f field.EncodedAdditionalTermBondIssuerField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetAdditionalTermBondSeniority gets AdditionalTermBondSeniority, Tag 40010.
func (m NoAdditionalTermBondRefs) GetAdditionalTermBondSeniority() (v string, err quickfix.MessageRejectError) {
	var f field.AdditionalTermBondSeniorityField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetAdditionalTermBondCouponType gets AdditionalTermBondCouponType, Tag 40011.
func (m NoAdditionalTermBondRefs) GetAdditionalTermBondCouponType() (v int, err quickfix.MessageRejectError) {
	var f field.AdditionalTermBondCouponTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetAdditionalTermBondCouponRate gets AdditionalTermBondCouponRate, Tag 40012.
func (m NoAdditionalTermBondRefs) GetAdditionalTermBondCouponRate() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.AdditionalTermBondCouponRateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetAdditionalTermBondMaturityDate gets AdditionalTermBondMaturityDate, Tag 40013.
func (m NoAdditionalTermBondRefs) GetAdditionalTermBondMaturityDate() (v string, err quickfix.MessageRejectError) {
	var f field.AdditionalTermBondMaturityDateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetAdditionalTermBondParValue gets AdditionalTermBondParValue, Tag 40014.
func (m NoAdditionalTermBondRefs) GetAdditionalTermBondParValue() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.AdditionalTermBondParValueField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetAdditionalTermBondCurrentTotalIssuedAmount gets AdditionalTermBondCurrentTotalIssuedAmount, Tag 40015.
func (m NoAdditionalTermBondRefs) GetAdditionalTermBondCurrentTotalIssuedAmount() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.AdditionalTermBondCurrentTotalIssuedAmountField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetAdditionalTermBondCouponFrequencyPeriod gets AdditionalTermBondCouponFrequencyPeriod, Tag 40016.
func (m NoAdditionalTermBondRefs) GetAdditionalTermBondCouponFrequencyPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.AdditionalTermBondCouponFrequencyPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetAdditionalTermBondCouponFrequencyUnit gets AdditionalTermBondCouponFrequencyUnit, Tag 40017.
func (m NoAdditionalTermBondRefs) GetAdditionalTermBondCouponFrequencyUnit() (v string, err quickfix.MessageRejectError) {
	var f field.AdditionalTermBondCouponFrequencyUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetAdditionalTermBondDayCount gets AdditionalTermBondDayCount, Tag 40018.
func (m NoAdditionalTermBondRefs) GetAdditionalTermBondDayCount() (v int, err quickfix.MessageRejectError) {
	var f field.AdditionalTermBondDayCountField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasAdditionalTermBondSecurityID returns true if AdditionalTermBondSecurityID is present, Tag 40001.
func (m NoAdditionalTermBondRefs) HasAdditionalTermBondSecurityID() bool {
	return m.Has(tag.AdditionalTermBondSecurityID)
}

// HasAdditionalTermBondSecurityIDSource returns true if AdditionalTermBondSecurityIDSource is present, Tag 40002.
func (m NoAdditionalTermBondRefs) HasAdditionalTermBondSecurityIDSource() bool {
	return m.Has(tag.AdditionalTermBondSecurityIDSource)
}

// HasAdditionalTermBondDesc returns true if AdditionalTermBondDesc is present, Tag 40003.
func (m NoAdditionalTermBondRefs) HasAdditionalTermBondDesc() bool {
	return m.Has(tag.AdditionalTermBondDesc)
}

// HasEncodedAdditionalTermBondDescLen returns true if EncodedAdditionalTermBondDescLen is present, Tag 40004.
func (m NoAdditionalTermBondRefs) HasEncodedAdditionalTermBondDescLen() bool {
	return m.Has(tag.EncodedAdditionalTermBondDescLen)
}

// HasEncodedAdditionalTermBondDesc returns true if EncodedAdditionalTermBondDesc is present, Tag 40005.
func (m NoAdditionalTermBondRefs) HasEncodedAdditionalTermBondDesc() bool {
	return m.Has(tag.EncodedAdditionalTermBondDesc)
}

// HasAdditionalTermBondCurrency returns true if AdditionalTermBondCurrency is present, Tag 40006.
func (m NoAdditionalTermBondRefs) HasAdditionalTermBondCurrency() bool {
	return m.Has(tag.AdditionalTermBondCurrency)
}

// HasAdditionalTermBondIssuer returns true if AdditionalTermBondIssuer is present, Tag 40007.
func (m NoAdditionalTermBondRefs) HasAdditionalTermBondIssuer() bool {
	return m.Has(tag.AdditionalTermBondIssuer)
}

// HasEncodedAdditionalTermBondIssuerLen returns true if EncodedAdditionalTermBondIssuerLen is present, Tag 40008.
func (m NoAdditionalTermBondRefs) HasEncodedAdditionalTermBondIssuerLen() bool {
	return m.Has(tag.EncodedAdditionalTermBondIssuerLen)
}

// HasEncodedAdditionalTermBondIssuer returns true if EncodedAdditionalTermBondIssuer is present, Tag 40009.
func (m NoAdditionalTermBondRefs) HasEncodedAdditionalTermBondIssuer() bool {
	return m.Has(tag.EncodedAdditionalTermBondIssuer)
}

// HasAdditionalTermBondSeniority returns true if AdditionalTermBondSeniority is present, Tag 40010.
func (m NoAdditionalTermBondRefs) HasAdditionalTermBondSeniority() bool {
	return m.Has(tag.AdditionalTermBondSeniority)
}

// HasAdditionalTermBondCouponType returns true if AdditionalTermBondCouponType is present, Tag 40011.
func (m NoAdditionalTermBondRefs) HasAdditionalTermBondCouponType() bool {
	return m.Has(tag.AdditionalTermBondCouponType)
}

// HasAdditionalTermBondCouponRate returns true if AdditionalTermBondCouponRate is present, Tag 40012.
func (m NoAdditionalTermBondRefs) HasAdditionalTermBondCouponRate() bool {
	return m.Has(tag.AdditionalTermBondCouponRate)
}

// HasAdditionalTermBondMaturityDate returns true if AdditionalTermBondMaturityDate is present, Tag 40013.
func (m NoAdditionalTermBondRefs) HasAdditionalTermBondMaturityDate() bool {
	return m.Has(tag.AdditionalTermBondMaturityDate)
}

// HasAdditionalTermBondParValue returns true if AdditionalTermBondParValue is present, Tag 40014.
func (m NoAdditionalTermBondRefs) HasAdditionalTermBondParValue() bool {
	return m.Has(tag.AdditionalTermBondParValue)
}

// HasAdditionalTermBondCurrentTotalIssuedAmount returns true if AdditionalTermBondCurrentTotalIssuedAmount is present, Tag 40015.
func (m NoAdditionalTermBondRefs) HasAdditionalTermBondCurrentTotalIssuedAmount() bool {
	return m.Has(tag.AdditionalTermBondCurrentTotalIssuedAmount)
}

// HasAdditionalTermBondCouponFrequencyPeriod returns true if AdditionalTermBondCouponFrequencyPeriod is present, Tag 40016.
func (m NoAdditionalTermBondRefs) HasAdditionalTermBondCouponFrequencyPeriod() bool {
	return m.Has(tag.AdditionalTermBondCouponFrequencyPeriod)
}

// HasAdditionalTermBondCouponFrequencyUnit returns true if AdditionalTermBondCouponFrequencyUnit is present, Tag 40017.
func (m NoAdditionalTermBondRefs) HasAdditionalTermBondCouponFrequencyUnit() bool {
	return m.Has(tag.AdditionalTermBondCouponFrequencyUnit)
}

// HasAdditionalTermBondDayCount returns true if AdditionalTermBondDayCount is present, Tag 40018.
func (m NoAdditionalTermBondRefs) HasAdditionalTermBondDayCount() bool {
	return m.Has(tag.AdditionalTermBondDayCount)
}

// NoAdditionalTermBondRefsRepeatingGroup is a repeating group, Tag 40000.
type NoAdditionalTermBondRefsRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoAdditionalTermBondRefsRepeatingGroup returns an initialized, NoAdditionalTermBondRefsRepeatingGroup.
func NewNoAdditionalTermBondRefsRepeatingGroup() NoAdditionalTermBondRefsRepeatingGroup {
	return NoAdditionalTermBondRefsRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoAdditionalTermBondRefs,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.AdditionalTermBondSecurityID),
				quickfix.GroupElement(tag.AdditionalTermBondSecurityIDSource),
				quickfix.GroupElement(tag.AdditionalTermBondDesc),
				quickfix.GroupElement(tag.EncodedAdditionalTermBondDescLen),
				quickfix.GroupElement(tag.EncodedAdditionalTermBondDesc),
				quickfix.GroupElement(tag.AdditionalTermBondCurrency),
				quickfix.GroupElement(tag.AdditionalTermBondIssuer),
				quickfix.GroupElement(tag.EncodedAdditionalTermBondIssuerLen),
				quickfix.GroupElement(tag.EncodedAdditionalTermBondIssuer),
				quickfix.GroupElement(tag.AdditionalTermBondSeniority),
				quickfix.GroupElement(tag.AdditionalTermBondCouponType),
				quickfix.GroupElement(tag.AdditionalTermBondCouponRate),
				quickfix.GroupElement(tag.AdditionalTermBondMaturityDate),
				quickfix.GroupElement(tag.AdditionalTermBondParValue),
				quickfix.GroupElement(tag.AdditionalTermBondCurrentTotalIssuedAmount),
				quickfix.GroupElement(tag.AdditionalTermBondCouponFrequencyPeriod),
				quickfix.GroupElement(tag.AdditionalTermBondCouponFrequencyUnit),
				quickfix.GroupElement(tag.AdditionalTermBondDayCount),
			},
		),
	}
}

// Add create and append a new NoAdditionalTermBondRefs to this group.
func (m NoAdditionalTermBondRefsRepeatingGroup) Add() NoAdditionalTermBondRefs {
	g := m.RepeatingGroup.Add()
	return NoAdditionalTermBondRefs{g}
}

// Get returns the ith NoAdditionalTermBondRefs in the NoAdditionalTermBondRefsRepeatinGroup.
func (m NoAdditionalTermBondRefsRepeatingGroup) Get(i int) NoAdditionalTermBondRefs {
	return NoAdditionalTermBondRefs{m.RepeatingGroup.Get(i)}
}

// NoAdditionalTermsRepeatingGroup is a repeating group, Tag 40019.
type NoAdditionalTermsRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoAdditionalTermsRepeatingGroup returns an initialized, NoAdditionalTermsRepeatingGroup.
func NewNoAdditionalTermsRepeatingGroup() NoAdditionalTermsRepeatingGroup {
	return NoAdditionalTermsRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoAdditionalTerms,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.AdditionalTermConditionPrecedentBondIndicator),
				quickfix.GroupElement(tag.AdditionalTermDiscrepancyClauseIndicator),
				NewNoAdditionalTermBondRefsRepeatingGroup(),
			},
		),
	}
}

// Add create and append a new NoAdditionalTerms to this group.
func (m NoAdditionalTermsRepeatingGroup) Add() NoAdditionalTerms {
	g := m.RepeatingGroup.Add()
	return NoAdditionalTerms{g}
}

// Get returns the ith NoAdditionalTerms in the NoAdditionalTermsRepeatinGroup.
func (m NoAdditionalTermsRepeatingGroup) Get(i int) NoAdditionalTerms {
	return NoAdditionalTerms{m.RepeatingGroup.Get(i)}
}

// NoProtectionTerms is a repeating group element, Tag 40181.
type NoProtectionTerms struct {
	*quickfix.Group
}

// SetProtectionTermNotional sets ProtectionTermNotional, Tag 40182.
func (m NoProtectionTerms) SetProtectionTermNotional(value decimal.Decimal, scale int32) {
	m.Set(field.NewProtectionTermNotional(value, scale))
}

// SetProtectionTermCurrency sets ProtectionTermCurrency, Tag 40183.
func (m NoProtectionTerms) SetProtectionTermCurrency(v string) {
	m.Set(field.NewProtectionTermCurrency(v))
}

// SetProtectionTermSellerNotifies sets ProtectionTermSellerNotifies, Tag 40184.
func (m NoProtectionTerms) SetProtectionTermSellerNotifies(v bool) {
	m.Set(field.NewProtectionTermSellerNotifies(v))
}

// SetProtectionTermBuyerNotifies sets ProtectionTermBuyerNotifies, Tag 40185.
func (m NoProtectionTerms) SetProtectionTermBuyerNotifies(v bool) {
	m.Set(field.NewProtectionTermBuyerNotifies(v))
}

// SetProtectionTermEventBusinessCenter sets ProtectionTermEventBusinessCenter, Tag 40186.
func (m NoProtectionTerms) SetProtectionTermEventBusinessCenter(v string) {
	m.Set(field.NewProtectionTermEventBusinessCenter(v))
}

// SetProtectionTermStandardSources sets ProtectionTermStandardSources, Tag 40187.
func (m NoProtectionTerms) SetProtectionTermStandardSources(v bool) {
	m.Set(field.NewProtectionTermStandardSources(v))
}

// SetProtectionTermEventMinimumSources sets ProtectionTermEventMinimumSources, Tag 40188.
func (m NoProtectionTerms) SetProtectionTermEventMinimumSources(v int) {
	m.Set(field.NewProtectionTermEventMinimumSources(v))
}

// SetNoProtectionTermEventNewsSources sets NoProtectionTermEventNewsSources, Tag 40951.
func (m NoProtectionTerms) SetNoProtectionTermEventNewsSources(f NoProtectionTermEventNewsSourcesRepeatingGroup) {
	m.SetGroup(f)
}

// SetNoProtectionTermEvents sets NoProtectionTermEvents, Tag 40191.
func (m NoProtectionTerms) SetNoProtectionTermEvents(f NoProtectionTermEventsRepeatingGroup) {
	m.SetGroup(f)
}

// SetNoProtectionTermObligations sets NoProtectionTermObligations, Tag 40201.
func (m NoProtectionTerms) SetNoProtectionTermObligations(f NoProtectionTermObligationsRepeatingGroup) {
	m.SetGroup(f)
}

// SetProtectionTermXID sets ProtectionTermXID, Tag 40190.
func (m NoProtectionTerms) SetProtectionTermXID(v string) {
	m.Set(field.NewProtectionTermXID(v))
}

// GetProtectionTermNotional gets ProtectionTermNotional, Tag 40182.
func (m NoProtectionTerms) GetProtectionTermNotional() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.ProtectionTermNotionalField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProtectionTermCurrency gets ProtectionTermCurrency, Tag 40183.
func (m NoProtectionTerms) GetProtectionTermCurrency() (v string, err quickfix.MessageRejectError) {
	var f field.ProtectionTermCurrencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProtectionTermSellerNotifies gets ProtectionTermSellerNotifies, Tag 40184.
func (m NoProtectionTerms) GetProtectionTermSellerNotifies() (v bool, err quickfix.MessageRejectError) {
	var f field.ProtectionTermSellerNotifiesField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProtectionTermBuyerNotifies gets ProtectionTermBuyerNotifies, Tag 40185.
func (m NoProtectionTerms) GetProtectionTermBuyerNotifies() (v bool, err quickfix.MessageRejectError) {
	var f field.ProtectionTermBuyerNotifiesField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProtectionTermEventBusinessCenter gets ProtectionTermEventBusinessCenter, Tag 40186.
func (m NoProtectionTerms) GetProtectionTermEventBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.ProtectionTermEventBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProtectionTermStandardSources gets ProtectionTermStandardSources, Tag 40187.
func (m NoProtectionTerms) GetProtectionTermStandardSources() (v bool, err quickfix.MessageRejectError) {
	var f field.ProtectionTermStandardSourcesField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProtectionTermEventMinimumSources gets ProtectionTermEventMinimumSources, Tag 40188.
func (m NoProtectionTerms) GetProtectionTermEventMinimumSources() (v int, err quickfix.MessageRejectError) {
	var f field.ProtectionTermEventMinimumSourcesField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoProtectionTermEventNewsSources gets NoProtectionTermEventNewsSources, Tag 40951.
func (m NoProtectionTerms) GetNoProtectionTermEventNewsSources() (NoProtectionTermEventNewsSourcesRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoProtectionTermEventNewsSourcesRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetNoProtectionTermEvents gets NoProtectionTermEvents, Tag 40191.
func (m NoProtectionTerms) GetNoProtectionTermEvents() (NoProtectionTermEventsRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoProtectionTermEventsRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetNoProtectionTermObligations gets NoProtectionTermObligations, Tag 40201.
func (m NoProtectionTerms) GetNoProtectionTermObligations() (NoProtectionTermObligationsRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoProtectionTermObligationsRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetProtectionTermXID gets ProtectionTermXID, Tag 40190.
func (m NoProtectionTerms) GetProtectionTermXID() (v string, err quickfix.MessageRejectError) {
	var f field.ProtectionTermXIDField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasProtectionTermNotional returns true if ProtectionTermNotional is present, Tag 40182.
func (m NoProtectionTerms) HasProtectionTermNotional() bool {
	return m.Has(tag.ProtectionTermNotional)
}

// HasProtectionTermCurrency returns true if ProtectionTermCurrency is present, Tag 40183.
func (m NoProtectionTerms) HasProtectionTermCurrency() bool {
	return m.Has(tag.ProtectionTermCurrency)
}

// HasProtectionTermSellerNotifies returns true if ProtectionTermSellerNotifies is present, Tag 40184.
func (m NoProtectionTerms) HasProtectionTermSellerNotifies() bool {
	return m.Has(tag.ProtectionTermSellerNotifies)
}

// HasProtectionTermBuyerNotifies returns true if ProtectionTermBuyerNotifies is present, Tag 40185.
func (m NoProtectionTerms) HasProtectionTermBuyerNotifies() bool {
	return m.Has(tag.ProtectionTermBuyerNotifies)
}

// HasProtectionTermEventBusinessCenter returns true if ProtectionTermEventBusinessCenter is present, Tag 40186.
func (m NoProtectionTerms) HasProtectionTermEventBusinessCenter() bool {
	return m.Has(tag.ProtectionTermEventBusinessCenter)
}

// HasProtectionTermStandardSources returns true if ProtectionTermStandardSources is present, Tag 40187.
func (m NoProtectionTerms) HasProtectionTermStandardSources() bool {
	return m.Has(tag.ProtectionTermStandardSources)
}

// HasProtectionTermEventMinimumSources returns true if ProtectionTermEventMinimumSources is present, Tag 40188.
func (m NoProtectionTerms) HasProtectionTermEventMinimumSources() bool {
	return m.Has(tag.ProtectionTermEventMinimumSources)
}

// HasNoProtectionTermEventNewsSources returns true if NoProtectionTermEventNewsSources is present, Tag 40951.
func (m NoProtectionTerms) HasNoProtectionTermEventNewsSources() bool {
	return m.Has(tag.NoProtectionTermEventNewsSources)
}

// HasNoProtectionTermEvents returns true if NoProtectionTermEvents is present, Tag 40191.
func (m NoProtectionTerms) HasNoProtectionTermEvents() bool {
	return m.Has(tag.NoProtectionTermEvents)
}

// HasNoProtectionTermObligations returns true if NoProtectionTermObligations is present, Tag 40201.
func (m NoProtectionTerms) HasNoProtectionTermObligations() bool {
	return m.Has(tag.NoProtectionTermObligations)
}

// HasProtectionTermXID returns true if ProtectionTermXID is present, Tag 40190.
func (m NoProtectionTerms) HasProtectionTermXID() bool {
	return m.Has(tag.ProtectionTermXID)
}

// NoProtectionTermEventNewsSources is a repeating group element, Tag 40951.
type NoProtectionTermEventNewsSources struct {
	*quickfix.Group
}

// SetProtectionTermEventNewsSource sets ProtectionTermEventNewsSource, Tag 40189.
func (m NoProtectionTermEventNewsSources) SetProtectionTermEventNewsSource(v string) {
	m.Set(field.NewProtectionTermEventNewsSource(v))
}

// GetProtectionTermEventNewsSource gets ProtectionTermEventNewsSource, Tag 40189.
func (m NoProtectionTermEventNewsSources) GetProtectionTermEventNewsSource() (v string, err quickfix.MessageRejectError) {
	var f field.ProtectionTermEventNewsSourceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasProtectionTermEventNewsSource returns true if ProtectionTermEventNewsSource is present, Tag 40189.
func (m NoProtectionTermEventNewsSources) HasProtectionTermEventNewsSource() bool {
	return m.Has(tag.ProtectionTermEventNewsSource)
}

// NoProtectionTermEventNewsSourcesRepeatingGroup is a repeating group, Tag 40951.
type NoProtectionTermEventNewsSourcesRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoProtectionTermEventNewsSourcesRepeatingGroup returns an initialized, NoProtectionTermEventNewsSourcesRepeatingGroup.
func NewNoProtectionTermEventNewsSourcesRepeatingGroup() NoProtectionTermEventNewsSourcesRepeatingGroup {
	return NoProtectionTermEventNewsSourcesRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoProtectionTermEventNewsSources,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.ProtectionTermEventNewsSource),
			},
		),
	}
}

// Add create and append a new NoProtectionTermEventNewsSources to this group.
func (m NoProtectionTermEventNewsSourcesRepeatingGroup) Add() NoProtectionTermEventNewsSources {
	g := m.RepeatingGroup.Add()
	return NoProtectionTermEventNewsSources{g}
}

// Get returns the ith NoProtectionTermEventNewsSources in the NoProtectionTermEventNewsSourcesRepeatinGroup.
func (m NoProtectionTermEventNewsSourcesRepeatingGroup) Get(i int) NoProtectionTermEventNewsSources {
	return NoProtectionTermEventNewsSources{m.RepeatingGroup.Get(i)}
}

// NoProtectionTermEvents is a repeating group element, Tag 40191.
type NoProtectionTermEvents struct {
	*quickfix.Group
}

// SetProtectionTermEventType sets ProtectionTermEventType, Tag 40192.
func (m NoProtectionTermEvents) SetProtectionTermEventType(v string) {
	m.Set(field.NewProtectionTermEventType(v))
}

// SetProtectionTermEventValue sets ProtectionTermEventValue, Tag 40193.
func (m NoProtectionTermEvents) SetProtectionTermEventValue(v string) {
	m.Set(field.NewProtectionTermEventValue(v))
}

// SetProtectionTermEventCurrency sets ProtectionTermEventCurrency, Tag 40194.
func (m NoProtectionTermEvents) SetProtectionTermEventCurrency(v string) {
	m.Set(field.NewProtectionTermEventCurrency(v))
}

// SetProtectionTermEventPeriod sets ProtectionTermEventPeriod, Tag 40195.
func (m NoProtectionTermEvents) SetProtectionTermEventPeriod(v int) {
	m.Set(field.NewProtectionTermEventPeriod(v))
}

// SetProtectionTermEventUnit sets ProtectionTermEventUnit, Tag 40196.
func (m NoProtectionTermEvents) SetProtectionTermEventUnit(v enum.ProtectionTermEventUnit) {
	m.Set(field.NewProtectionTermEventUnit(v))
}

// SetProtectionTermEventDayType sets ProtectionTermEventDayType, Tag 40197.
func (m NoProtectionTermEvents) SetProtectionTermEventDayType(v enum.ProtectionTermEventDayType) {
	m.Set(field.NewProtectionTermEventDayType(v))
}

// SetProtectionTermEventRateSource sets ProtectionTermEventRateSource, Tag 40198.
func (m NoProtectionTermEvents) SetProtectionTermEventRateSource(v string) {
	m.Set(field.NewProtectionTermEventRateSource(v))
}

// SetNoProtectionTermEventQualifiers sets NoProtectionTermEventQualifiers, Tag 40199.
func (m NoProtectionTermEvents) SetNoProtectionTermEventQualifiers(f NoProtectionTermEventQualifiersRepeatingGroup) {
	m.SetGroup(f)
}

// GetProtectionTermEventType gets ProtectionTermEventType, Tag 40192.
func (m NoProtectionTermEvents) GetProtectionTermEventType() (v string, err quickfix.MessageRejectError) {
	var f field.ProtectionTermEventTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProtectionTermEventValue gets ProtectionTermEventValue, Tag 40193.
func (m NoProtectionTermEvents) GetProtectionTermEventValue() (v string, err quickfix.MessageRejectError) {
	var f field.ProtectionTermEventValueField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProtectionTermEventCurrency gets ProtectionTermEventCurrency, Tag 40194.
func (m NoProtectionTermEvents) GetProtectionTermEventCurrency() (v string, err quickfix.MessageRejectError) {
	var f field.ProtectionTermEventCurrencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProtectionTermEventPeriod gets ProtectionTermEventPeriod, Tag 40195.
func (m NoProtectionTermEvents) GetProtectionTermEventPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.ProtectionTermEventPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProtectionTermEventUnit gets ProtectionTermEventUnit, Tag 40196.
func (m NoProtectionTermEvents) GetProtectionTermEventUnit() (v enum.ProtectionTermEventUnit, err quickfix.MessageRejectError) {
	var f field.ProtectionTermEventUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProtectionTermEventDayType gets ProtectionTermEventDayType, Tag 40197.
func (m NoProtectionTermEvents) GetProtectionTermEventDayType() (v enum.ProtectionTermEventDayType, err quickfix.MessageRejectError) {
	var f field.ProtectionTermEventDayTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProtectionTermEventRateSource gets ProtectionTermEventRateSource, Tag 40198.
func (m NoProtectionTermEvents) GetProtectionTermEventRateSource() (v string, err quickfix.MessageRejectError) {
	var f field.ProtectionTermEventRateSourceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoProtectionTermEventQualifiers gets NoProtectionTermEventQualifiers, Tag 40199.
func (m NoProtectionTermEvents) GetNoProtectionTermEventQualifiers() (NoProtectionTermEventQualifiersRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoProtectionTermEventQualifiersRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// HasProtectionTermEventType returns true if ProtectionTermEventType is present, Tag 40192.
func (m NoProtectionTermEvents) HasProtectionTermEventType() bool {
	return m.Has(tag.ProtectionTermEventType)
}

// HasProtectionTermEventValue returns true if ProtectionTermEventValue is present, Tag 40193.
func (m NoProtectionTermEvents) HasProtectionTermEventValue() bool {
	return m.Has(tag.ProtectionTermEventValue)
}

// HasProtectionTermEventCurrency returns true if ProtectionTermEventCurrency is present, Tag 40194.
func (m NoProtectionTermEvents) HasProtectionTermEventCurrency() bool {
	return m.Has(tag.ProtectionTermEventCurrency)
}

// HasProtectionTermEventPeriod returns true if ProtectionTermEventPeriod is present, Tag 40195.
func (m NoProtectionTermEvents) HasProtectionTermEventPeriod() bool {
	return m.Has(tag.ProtectionTermEventPeriod)
}

// HasProtectionTermEventUnit returns true if ProtectionTermEventUnit is present, Tag 40196.
func (m NoProtectionTermEvents) HasProtectionTermEventUnit() bool {
	return m.Has(tag.ProtectionTermEventUnit)
}

// HasProtectionTermEventDayType returns true if ProtectionTermEventDayType is present, Tag 40197.
func (m NoProtectionTermEvents) HasProtectionTermEventDayType() bool {
	return m.Has(tag.ProtectionTermEventDayType)
}

// HasProtectionTermEventRateSource returns true if ProtectionTermEventRateSource is present, Tag 40198.
func (m NoProtectionTermEvents) HasProtectionTermEventRateSource() bool {
	return m.Has(tag.ProtectionTermEventRateSource)
}

// HasNoProtectionTermEventQualifiers returns true if NoProtectionTermEventQualifiers is present, Tag 40199.
func (m NoProtectionTermEvents) HasNoProtectionTermEventQualifiers() bool {
	return m.Has(tag.NoProtectionTermEventQualifiers)
}

// NoProtectionTermEventQualifiers is a repeating group element, Tag 40199.
type NoProtectionTermEventQualifiers struct {
	*quickfix.Group
}

// SetProtectionTermEventQualifier sets ProtectionTermEventQualifier, Tag 40200.
func (m NoProtectionTermEventQualifiers) SetProtectionTermEventQualifier(v enum.ProtectionTermEventQualifier) {
	m.Set(field.NewProtectionTermEventQualifier(v))
}

// GetProtectionTermEventQualifier gets ProtectionTermEventQualifier, Tag 40200.
func (m NoProtectionTermEventQualifiers) GetProtectionTermEventQualifier() (v enum.ProtectionTermEventQualifier, err quickfix.MessageRejectError) {
	var f field.ProtectionTermEventQualifierField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasProtectionTermEventQualifier returns true if ProtectionTermEventQualifier is present, Tag 40200.
func (m NoProtectionTermEventQualifiers) HasProtectionTermEventQualifier() bool {
	return m.Has(tag.ProtectionTermEventQualifier)
}

// NoProtectionTermEventQualifiersRepeatingGroup is a repeating group, Tag 40199.
type NoProtectionTermEventQualifiersRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoProtectionTermEventQualifiersRepeatingGroup returns an initialized, NoProtectionTermEventQualifiersRepeatingGroup.
func NewNoProtectionTermEventQualifiersRepeatingGroup() NoProtectionTermEventQualifiersRepeatingGroup {
	return NoProtectionTermEventQualifiersRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoProtectionTermEventQualifiers,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.ProtectionTermEventQualifier),
			},
		),
	}
}

// Add create and append a new NoProtectionTermEventQualifiers to this group.
func (m NoProtectionTermEventQualifiersRepeatingGroup) Add() NoProtectionTermEventQualifiers {
	g := m.RepeatingGroup.Add()
	return NoProtectionTermEventQualifiers{g}
}

// Get returns the ith NoProtectionTermEventQualifiers in the NoProtectionTermEventQualifiersRepeatinGroup.
func (m NoProtectionTermEventQualifiersRepeatingGroup) Get(i int) NoProtectionTermEventQualifiers {
	return NoProtectionTermEventQualifiers{m.RepeatingGroup.Get(i)}
}

// NoProtectionTermEventsRepeatingGroup is a repeating group, Tag 40191.
type NoProtectionTermEventsRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoProtectionTermEventsRepeatingGroup returns an initialized, NoProtectionTermEventsRepeatingGroup.
func NewNoProtectionTermEventsRepeatingGroup() NoProtectionTermEventsRepeatingGroup {
	return NoProtectionTermEventsRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoProtectionTermEvents,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.ProtectionTermEventType),
				quickfix.GroupElement(tag.ProtectionTermEventValue),
				quickfix.GroupElement(tag.ProtectionTermEventCurrency),
				quickfix.GroupElement(tag.ProtectionTermEventPeriod),
				quickfix.GroupElement(tag.ProtectionTermEventUnit),
				quickfix.GroupElement(tag.ProtectionTermEventDayType),
				quickfix.GroupElement(tag.ProtectionTermEventRateSource),
				NewNoProtectionTermEventQualifiersRepeatingGroup(),
			},
		),
	}
}

// Add create and append a new NoProtectionTermEvents to this group.
func (m NoProtectionTermEventsRepeatingGroup) Add() NoProtectionTermEvents {
	g := m.RepeatingGroup.Add()
	return NoProtectionTermEvents{g}
}

// Get returns the ith NoProtectionTermEvents in the NoProtectionTermEventsRepeatinGroup.
func (m NoProtectionTermEventsRepeatingGroup) Get(i int) NoProtectionTermEvents {
	return NoProtectionTermEvents{m.RepeatingGroup.Get(i)}
}

// NoProtectionTermObligations is a repeating group element, Tag 40201.
type NoProtectionTermObligations struct {
	*quickfix.Group
}

// SetProtectionTermObligationType sets ProtectionTermObligationType, Tag 40202.
func (m NoProtectionTermObligations) SetProtectionTermObligationType(v string) {
	m.Set(field.NewProtectionTermObligationType(v))
}

// SetProtectionTermObligationValue sets ProtectionTermObligationValue, Tag 40203.
func (m NoProtectionTermObligations) SetProtectionTermObligationValue(v string) {
	m.Set(field.NewProtectionTermObligationValue(v))
}

// GetProtectionTermObligationType gets ProtectionTermObligationType, Tag 40202.
func (m NoProtectionTermObligations) GetProtectionTermObligationType() (v string, err quickfix.MessageRejectError) {
	var f field.ProtectionTermObligationTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetProtectionTermObligationValue gets ProtectionTermObligationValue, Tag 40203.
func (m NoProtectionTermObligations) GetProtectionTermObligationValue() (v string, err quickfix.MessageRejectError) {
	var f field.ProtectionTermObligationValueField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasProtectionTermObligationType returns true if ProtectionTermObligationType is present, Tag 40202.
func (m NoProtectionTermObligations) HasProtectionTermObligationType() bool {
	return m.Has(tag.ProtectionTermObligationType)
}

// HasProtectionTermObligationValue returns true if ProtectionTermObligationValue is present, Tag 40203.
func (m NoProtectionTermObligations) HasProtectionTermObligationValue() bool {
	return m.Has(tag.ProtectionTermObligationValue)
}

// NoProtectionTermObligationsRepeatingGroup is a repeating group, Tag 40201.
type NoProtectionTermObligationsRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoProtectionTermObligationsRepeatingGroup returns an initialized, NoProtectionTermObligationsRepeatingGroup.
func NewNoProtectionTermObligationsRepeatingGroup() NoProtectionTermObligationsRepeatingGroup {
	return NoProtectionTermObligationsRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoProtectionTermObligations,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.ProtectionTermObligationType),
				quickfix.GroupElement(tag.ProtectionTermObligationValue),
			},
		),
	}
}

// Add create and append a new NoProtectionTermObligations to this group.
func (m NoProtectionTermObligationsRepeatingGroup) Add() NoProtectionTermObligations {
	g := m.RepeatingGroup.Add()
	return NoProtectionTermObligations{g}
}

// Get returns the ith NoProtectionTermObligations in the NoProtectionTermObligationsRepeatinGroup.
func (m NoProtectionTermObligationsRepeatingGroup) Get(i int) NoProtectionTermObligations {
	return NoProtectionTermObligations{m.RepeatingGroup.Get(i)}
}

// NoProtectionTermsRepeatingGroup is a repeating group, Tag 40181.
type NoProtectionTermsRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoProtectionTermsRepeatingGroup returns an initialized, NoProtectionTermsRepeatingGroup.
func NewNoProtectionTermsRepeatingGroup() NoProtectionTermsRepeatingGroup {
	return NoProtectionTermsRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoProtectionTerms,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.ProtectionTermNotional),
				quickfix.GroupElement(tag.ProtectionTermCurrency),
				quickfix.GroupElement(tag.ProtectionTermSellerNotifies),
				quickfix.GroupElement(tag.ProtectionTermBuyerNotifies),
				quickfix.GroupElement(tag.ProtectionTermEventBusinessCenter),
				quickfix.GroupElement(tag.ProtectionTermStandardSources),
				quickfix.GroupElement(tag.ProtectionTermEventMinimumSources),
				NewNoProtectionTermEventNewsSourcesRepeatingGroup(),
				NewNoProtectionTermEventsRepeatingGroup(),
				NewNoProtectionTermObligationsRepeatingGroup(),
				quickfix.GroupElement(tag.ProtectionTermXID),
			},
		),
	}
}

// Add create and append a new NoProtectionTerms to this group.
func (m NoProtectionTermsRepeatingGroup) Add() NoProtectionTerms {
	g := m.RepeatingGroup.Add()
	return NoProtectionTerms{g}
}

// Get returns the ith NoProtectionTerms in the NoProtectionTermsRepeatinGroup.
func (m NoProtectionTermsRepeatingGroup) Get(i int) NoProtectionTerms {
	return NoProtectionTerms{m.RepeatingGroup.Get(i)}
}

// NoCashSettlTerms is a repeating group element, Tag 40022.
type NoCashSettlTerms struct {
	*quickfix.Group
}

// SetCashSettlCurrency sets CashSettlCurrency, Tag 40023.
func (m NoCashSettlTerms) SetCashSettlCurrency(v string) {
	m.Set(field.NewCashSettlCurrency(v))
}

// SetCashSettlValuationFirstBusinessDayOffset sets CashSettlValuationFirstBusinessDayOffset, Tag 40024.
func (m NoCashSettlTerms) SetCashSettlValuationFirstBusinessDayOffset(v int) {
	m.Set(field.NewCashSettlValuationFirstBusinessDayOffset(v))
}

// SetCashSettlValuationSubsequentBusinessDaysOffset sets CashSettlValuationSubsequentBusinessDaysOffset, Tag 40916.
func (m NoCashSettlTerms) SetCashSettlValuationSubsequentBusinessDaysOffset(v int) {
	m.Set(field.NewCashSettlValuationSubsequentBusinessDaysOffset(v))
}

// SetCashSettlNumOfValuationDates sets CashSettlNumOfValuationDates, Tag 40917.
func (m NoCashSettlTerms) SetCashSettlNumOfValuationDates(v int) {
	m.Set(field.NewCashSettlNumOfValuationDates(v))
}

// SetCashSettlValuationTime sets CashSettlValuationTime, Tag 40025.
func (m NoCashSettlTerms) SetCashSettlValuationTime(v string) {
	m.Set(field.NewCashSettlValuationTime(v))
}

// SetCashSettlBusinessCenter sets CashSettlBusinessCenter, Tag 40026.
func (m NoCashSettlTerms) SetCashSettlBusinessCenter(v string) {
	m.Set(field.NewCashSettlBusinessCenter(v))
}

// SetCashSettlQuoteMethod sets CashSettlQuoteMethod, Tag 40027.
func (m NoCashSettlTerms) SetCashSettlQuoteMethod(v enum.CashSettlQuoteMethod) {
	m.Set(field.NewCashSettlQuoteMethod(v))
}

// SetCashSettlQuoteAmount sets CashSettlQuoteAmount, Tag 40028.
func (m NoCashSettlTerms) SetCashSettlQuoteAmount(value decimal.Decimal, scale int32) {
	m.Set(field.NewCashSettlQuoteAmount(value, scale))
}

// SetCashSettlQuoteCurrency sets CashSettlQuoteCurrency, Tag 40029.
func (m NoCashSettlTerms) SetCashSettlQuoteCurrency(v string) {
	m.Set(field.NewCashSettlQuoteCurrency(v))
}

// SetCashSettlMinimumQuoteAmount sets CashSettlMinimumQuoteAmount, Tag 40030.
func (m NoCashSettlTerms) SetCashSettlMinimumQuoteAmount(value decimal.Decimal, scale int32) {
	m.Set(field.NewCashSettlMinimumQuoteAmount(value, scale))
}

// SetCashSettlMinimumQuoteCurrency sets CashSettlMinimumQuoteCurrency, Tag 40031.
func (m NoCashSettlTerms) SetCashSettlMinimumQuoteCurrency(v string) {
	m.Set(field.NewCashSettlMinimumQuoteCurrency(v))
}

// SetNoCashSettlDealers sets NoCashSettlDealers, Tag 40277.
func (m NoCashSettlTerms) SetNoCashSettlDealers(f NoCashSettlDealersRepeatingGroup) {
	m.SetGroup(f)
}

// SetCashSettlBusinessDays sets CashSettlBusinessDays, Tag 40033.
func (m NoCashSettlTerms) SetCashSettlBusinessDays(v int) {
	m.Set(field.NewCashSettlBusinessDays(v))
}

// SetCashSettlAmount sets CashSettlAmount, Tag 40034.
func (m NoCashSettlTerms) SetCashSettlAmount(value decimal.Decimal, scale int32) {
	m.Set(field.NewCashSettlAmount(value, scale))
}

// SetCashSettlRecoveryFactor sets CashSettlRecoveryFactor, Tag 40035.
func (m NoCashSettlTerms) SetCashSettlRecoveryFactor(value decimal.Decimal, scale int32) {
	m.Set(field.NewCashSettlRecoveryFactor(value, scale))
}

// SetCashSettlFixedTermIndicator sets CashSettlFixedTermIndicator, Tag 40036.
func (m NoCashSettlTerms) SetCashSettlFixedTermIndicator(v bool) {
	m.Set(field.NewCashSettlFixedTermIndicator(v))
}

// SetCashSettlAccruedInterestIndicator sets CashSettlAccruedInterestIndicator, Tag 40037.
func (m NoCashSettlTerms) SetCashSettlAccruedInterestIndicator(v bool) {
	m.Set(field.NewCashSettlAccruedInterestIndicator(v))
}

// SetCashSettlValuationMethod sets CashSettlValuationMethod, Tag 40038.
func (m NoCashSettlTerms) SetCashSettlValuationMethod(v enum.CashSettlValuationMethod) {
	m.Set(field.NewCashSettlValuationMethod(v))
}

// SetCashSettlTermXID sets CashSettlTermXID, Tag 40039.
func (m NoCashSettlTerms) SetCashSettlTermXID(v string) {
	m.Set(field.NewCashSettlTermXID(v))
}

// SetCashSettlPriceSource sets CashSettlPriceSource, Tag 42216.
func (m NoCashSettlTerms) SetCashSettlPriceSource(v string) {
	m.Set(field.NewCashSettlPriceSource(v))
}

// SetCashSettlPriceDefault sets CashSettlPriceDefault, Tag 42217.
func (m NoCashSettlTerms) SetCashSettlPriceDefault(v enum.CashSettlPriceDefault) {
	m.Set(field.NewCashSettlPriceDefault(v))
}

// SetCashSettlDateUnadjusted sets CashSettlDateUnadjusted, Tag 42207.
func (m NoCashSettlTerms) SetCashSettlDateUnadjusted(v string) {
	m.Set(field.NewCashSettlDateUnadjusted(v))
}

// SetCashSettlDateBusinessDayConvention sets CashSettlDateBusinessDayConvention, Tag 42208.
func (m NoCashSettlTerms) SetCashSettlDateBusinessDayConvention(v int) {
	m.Set(field.NewCashSettlDateBusinessDayConvention(v))
}

// SetNoCashSettlDateBusinessCenters sets NoCashSettlDateBusinessCenters, Tag 42214.
func (m NoCashSettlTerms) SetNoCashSettlDateBusinessCenters(f NoCashSettlDateBusinessCentersRepeatingGroup) {
	m.SetGroup(f)
}

// SetCashSettlDateRelativeTo sets CashSettlDateRelativeTo, Tag 42209.
func (m NoCashSettlTerms) SetCashSettlDateRelativeTo(v int) {
	m.Set(field.NewCashSettlDateRelativeTo(v))
}

// SetCashSettlDateOffsetPeriod sets CashSettlDateOffsetPeriod, Tag 42210.
func (m NoCashSettlTerms) SetCashSettlDateOffsetPeriod(v int) {
	m.Set(field.NewCashSettlDateOffsetPeriod(v))
}

// SetCashSettlDateOffsetUnit sets CashSettlDateOffsetUnit, Tag 42211.
func (m NoCashSettlTerms) SetCashSettlDateOffsetUnit(v string) {
	m.Set(field.NewCashSettlDateOffsetUnit(v))
}

// SetCashSettlDateOffsetDayType sets CashSettlDateOffsetDayType, Tag 42212.
func (m NoCashSettlTerms) SetCashSettlDateOffsetDayType(v int) {
	m.Set(field.NewCashSettlDateOffsetDayType(v))
}

// SetCashSettlDateAdjusted sets CashSettlDateAdjusted, Tag 42213.
func (m NoCashSettlTerms) SetCashSettlDateAdjusted(v string) {
	m.Set(field.NewCashSettlDateAdjusted(v))
}

// GetCashSettlCurrency gets CashSettlCurrency, Tag 40023.
func (m NoCashSettlTerms) GetCashSettlCurrency() (v string, err quickfix.MessageRejectError) {
	var f field.CashSettlCurrencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetCashSettlValuationFirstBusinessDayOffset gets CashSettlValuationFirstBusinessDayOffset, Tag 40024.
func (m NoCashSettlTerms) GetCashSettlValuationFirstBusinessDayOffset() (v int, err quickfix.MessageRejectError) {
	var f field.CashSettlValuationFirstBusinessDayOffsetField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetCashSettlValuationSubsequentBusinessDaysOffset gets CashSettlValuationSubsequentBusinessDaysOffset, Tag 40916.
func (m NoCashSettlTerms) GetCashSettlValuationSubsequentBusinessDaysOffset() (v int, err quickfix.MessageRejectError) {
	var f field.CashSettlValuationSubsequentBusinessDaysOffsetField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetCashSettlNumOfValuationDates gets CashSettlNumOfValuationDates, Tag 40917.
func (m NoCashSettlTerms) GetCashSettlNumOfValuationDates() (v int, err quickfix.MessageRejectError) {
	var f field.CashSettlNumOfValuationDatesField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetCashSettlValuationTime gets CashSettlValuationTime, Tag 40025.
func (m NoCashSettlTerms) GetCashSettlValuationTime() (v string, err quickfix.MessageRejectError) {
	var f field.CashSettlValuationTimeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetCashSettlBusinessCenter gets CashSettlBusinessCenter, Tag 40026.
func (m NoCashSettlTerms) GetCashSettlBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.CashSettlBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetCashSettlQuoteMethod gets CashSettlQuoteMethod, Tag 40027.
func (m NoCashSettlTerms) GetCashSettlQuoteMethod() (v enum.CashSettlQuoteMethod, err quickfix.MessageRejectError) {
	var f field.CashSettlQuoteMethodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetCashSettlQuoteAmount gets CashSettlQuoteAmount, Tag 40028.
func (m NoCashSettlTerms) GetCashSettlQuoteAmount() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.CashSettlQuoteAmountField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetCashSettlQuoteCurrency gets CashSettlQuoteCurrency, Tag 40029.
func (m NoCashSettlTerms) GetCashSettlQuoteCurrency() (v string, err quickfix.MessageRejectError) {
	var f field.CashSettlQuoteCurrencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetCashSettlMinimumQuoteAmount gets CashSettlMinimumQuoteAmount, Tag 40030.
func (m NoCashSettlTerms) GetCashSettlMinimumQuoteAmount() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.CashSettlMinimumQuoteAmountField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetCashSettlMinimumQuoteCurrency gets CashSettlMinimumQuoteCurrency, Tag 40031.
func (m NoCashSettlTerms) GetCashSettlMinimumQuoteCurrency() (v string, err quickfix.MessageRejectError) {
	var f field.CashSettlMinimumQuoteCurrencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoCashSettlDealers gets NoCashSettlDealers, Tag 40277.
func (m NoCashSettlTerms) GetNoCashSettlDealers() (NoCashSettlDealersRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoCashSettlDealersRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetCashSettlBusinessDays gets CashSettlBusinessDays, Tag 40033.
func (m NoCashSettlTerms) GetCashSettlBusinessDays() (v int, err quickfix.MessageRejectError) {
	var f field.CashSettlBusinessDaysField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetCashSettlAmount gets CashSettlAmount, Tag 40034.
func (m NoCashSettlTerms) GetCashSettlAmount() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.CashSettlAmountField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetCashSettlRecoveryFactor gets CashSettlRecoveryFactor, Tag 40035.
func (m NoCashSettlTerms) GetCashSettlRecoveryFactor() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.CashSettlRecoveryFactorField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetCashSettlFixedTermIndicator gets CashSettlFixedTermIndicator, Tag 40036.
func (m NoCashSettlTerms) GetCashSettlFixedTermIndicator() (v bool, err quickfix.MessageRejectError) {
	var f field.CashSettlFixedTermIndicatorField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetCashSettlAccruedInterestIndicator gets CashSettlAccruedInterestIndicator, Tag 40037.
func (m NoCashSettlTerms) GetCashSettlAccruedInterestIndicator() (v bool, err quickfix.MessageRejectError) {
	var f field.CashSettlAccruedInterestIndicatorField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetCashSettlValuationMethod gets CashSettlValuationMethod, Tag 40038.
func (m NoCashSettlTerms) GetCashSettlValuationMethod() (v enum.CashSettlValuationMethod, err quickfix.MessageRejectError) {
	var f field.CashSettlValuationMethodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetCashSettlTermXID gets CashSettlTermXID, Tag 40039.
func (m NoCashSettlTerms) GetCashSettlTermXID() (v string, err quickfix.MessageRejectError) {
	var f field.CashSettlTermXIDField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetCashSettlPriceSource gets CashSettlPriceSource, Tag 42216.
func (m NoCashSettlTerms) GetCashSettlPriceSource() (v string, err quickfix.MessageRejectError) {
	var f field.CashSettlPriceSourceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetCashSettlPriceDefault gets CashSettlPriceDefault, Tag 42217.
func (m NoCashSettlTerms) GetCashSettlPriceDefault() (v enum.CashSettlPriceDefault, err quickfix.MessageRejectError) {
	var f field.CashSettlPriceDefaultField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetCashSettlDateUnadjusted gets CashSettlDateUnadjusted, Tag 42207.
func (m NoCashSettlTerms) GetCashSettlDateUnadjusted() (v string, err quickfix.MessageRejectError) {
	var f field.CashSettlDateUnadjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetCashSettlDateBusinessDayConvention gets CashSettlDateBusinessDayConvention, Tag 42208.
func (m NoCashSettlTerms) GetCashSettlDateBusinessDayConvention() (v int, err quickfix.MessageRejectError) {
	var f field.CashSettlDateBusinessDayConventionField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetNoCashSettlDateBusinessCenters gets NoCashSettlDateBusinessCenters, Tag 42214.
func (m NoCashSettlTerms) GetNoCashSettlDateBusinessCenters() (NoCashSettlDateBusinessCentersRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoCashSettlDateBusinessCentersRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetCashSettlDateRelativeTo gets CashSettlDateRelativeTo, Tag 42209.
func (m NoCashSettlTerms) GetCashSettlDateRelativeTo() (v int, err quickfix.MessageRejectError) {
	var f field.CashSettlDateRelativeToField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetCashSettlDateOffsetPeriod gets CashSettlDateOffsetPeriod, Tag 42210.
func (m NoCashSettlTerms) GetCashSettlDateOffsetPeriod() (v int, err quickfix.MessageRejectError) {
	var f field.CashSettlDateOffsetPeriodField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetCashSettlDateOffsetUnit gets CashSettlDateOffsetUnit, Tag 42211.
func (m NoCashSettlTerms) GetCashSettlDateOffsetUnit() (v string, err quickfix.MessageRejectError) {
	var f field.CashSettlDateOffsetUnitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetCashSettlDateOffsetDayType gets CashSettlDateOffsetDayType, Tag 42212.
func (m NoCashSettlTerms) GetCashSettlDateOffsetDayType() (v int, err quickfix.MessageRejectError) {
	var f field.CashSettlDateOffsetDayTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetCashSettlDateAdjusted gets CashSettlDateAdjusted, Tag 42213.
func (m NoCashSettlTerms) GetCashSettlDateAdjusted() (v string, err quickfix.MessageRejectError) {
	var f field.CashSettlDateAdjustedField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasCashSettlCurrency returns true if CashSettlCurrency is present, Tag 40023.
func (m NoCashSettlTerms) HasCashSettlCurrency() bool {
	return m.Has(tag.CashSettlCurrency)
}

// HasCashSettlValuationFirstBusinessDayOffset returns true if CashSettlValuationFirstBusinessDayOffset is present, Tag 40024.
func (m NoCashSettlTerms) HasCashSettlValuationFirstBusinessDayOffset() bool {
	return m.Has(tag.CashSettlValuationFirstBusinessDayOffset)
}

// HasCashSettlValuationSubsequentBusinessDaysOffset returns true if CashSettlValuationSubsequentBusinessDaysOffset is present, Tag 40916.
func (m NoCashSettlTerms) HasCashSettlValuationSubsequentBusinessDaysOffset() bool {
	return m.Has(tag.CashSettlValuationSubsequentBusinessDaysOffset)
}

// HasCashSettlNumOfValuationDates returns true if CashSettlNumOfValuationDates is present, Tag 40917.
func (m NoCashSettlTerms) HasCashSettlNumOfValuationDates() bool {
	return m.Has(tag.CashSettlNumOfValuationDates)
}

// HasCashSettlValuationTime returns true if CashSettlValuationTime is present, Tag 40025.
func (m NoCashSettlTerms) HasCashSettlValuationTime() bool {
	return m.Has(tag.CashSettlValuationTime)
}

// HasCashSettlBusinessCenter returns true if CashSettlBusinessCenter is present, Tag 40026.
func (m NoCashSettlTerms) HasCashSettlBusinessCenter() bool {
	return m.Has(tag.CashSettlBusinessCenter)
}

// HasCashSettlQuoteMethod returns true if CashSettlQuoteMethod is present, Tag 40027.
func (m NoCashSettlTerms) HasCashSettlQuoteMethod() bool {
	return m.Has(tag.CashSettlQuoteMethod)
}

// HasCashSettlQuoteAmount returns true if CashSettlQuoteAmount is present, Tag 40028.
func (m NoCashSettlTerms) HasCashSettlQuoteAmount() bool {
	return m.Has(tag.CashSettlQuoteAmount)
}

// HasCashSettlQuoteCurrency returns true if CashSettlQuoteCurrency is present, Tag 40029.
func (m NoCashSettlTerms) HasCashSettlQuoteCurrency() bool {
	return m.Has(tag.CashSettlQuoteCurrency)
}

// HasCashSettlMinimumQuoteAmount returns true if CashSettlMinimumQuoteAmount is present, Tag 40030.
func (m NoCashSettlTerms) HasCashSettlMinimumQuoteAmount() bool {
	return m.Has(tag.CashSettlMinimumQuoteAmount)
}

// HasCashSettlMinimumQuoteCurrency returns true if CashSettlMinimumQuoteCurrency is present, Tag 40031.
func (m NoCashSettlTerms) HasCashSettlMinimumQuoteCurrency() bool {
	return m.Has(tag.CashSettlMinimumQuoteCurrency)
}

// HasNoCashSettlDealers returns true if NoCashSettlDealers is present, Tag 40277.
func (m NoCashSettlTerms) HasNoCashSettlDealers() bool {
	return m.Has(tag.NoCashSettlDealers)
}

// HasCashSettlBusinessDays returns true if CashSettlBusinessDays is present, Tag 40033.
func (m NoCashSettlTerms) HasCashSettlBusinessDays() bool {
	return m.Has(tag.CashSettlBusinessDays)
}

// HasCashSettlAmount returns true if CashSettlAmount is present, Tag 40034.
func (m NoCashSettlTerms) HasCashSettlAmount() bool {
	return m.Has(tag.CashSettlAmount)
}

// HasCashSettlRecoveryFactor returns true if CashSettlRecoveryFactor is present, Tag 40035.
func (m NoCashSettlTerms) HasCashSettlRecoveryFactor() bool {
	return m.Has(tag.CashSettlRecoveryFactor)
}

// HasCashSettlFixedTermIndicator returns true if CashSettlFixedTermIndicator is present, Tag 40036.
func (m NoCashSettlTerms) HasCashSettlFixedTermIndicator() bool {
	return m.Has(tag.CashSettlFixedTermIndicator)
}

// HasCashSettlAccruedInterestIndicator returns true if CashSettlAccruedInterestIndicator is present, Tag 40037.
func (m NoCashSettlTerms) HasCashSettlAccruedInterestIndicator() bool {
	return m.Has(tag.CashSettlAccruedInterestIndicator)
}

// HasCashSettlValuationMethod returns true if CashSettlValuationMethod is present, Tag 40038.
func (m NoCashSettlTerms) HasCashSettlValuationMethod() bool {
	return m.Has(tag.CashSettlValuationMethod)
}

// HasCashSettlTermXID returns true if CashSettlTermXID is present, Tag 40039.
func (m NoCashSettlTerms) HasCashSettlTermXID() bool {
	return m.Has(tag.CashSettlTermXID)
}

// HasCashSettlPriceSource returns true if CashSettlPriceSource is present, Tag 42216.
func (m NoCashSettlTerms) HasCashSettlPriceSource() bool {
	return m.Has(tag.CashSettlPriceSource)
}

// HasCashSettlPriceDefault returns true if CashSettlPriceDefault is present, Tag 42217.
func (m NoCashSettlTerms) HasCashSettlPriceDefault() bool {
	return m.Has(tag.CashSettlPriceDefault)
}

// HasCashSettlDateUnadjusted returns true if CashSettlDateUnadjusted is present, Tag 42207.
func (m NoCashSettlTerms) HasCashSettlDateUnadjusted() bool {
	return m.Has(tag.CashSettlDateUnadjusted)
}

// HasCashSettlDateBusinessDayConvention returns true if CashSettlDateBusinessDayConvention is present, Tag 42208.
func (m NoCashSettlTerms) HasCashSettlDateBusinessDayConvention() bool {
	return m.Has(tag.CashSettlDateBusinessDayConvention)
}

// HasNoCashSettlDateBusinessCenters returns true if NoCashSettlDateBusinessCenters is present, Tag 42214.
func (m NoCashSettlTerms) HasNoCashSettlDateBusinessCenters() bool {
	return m.Has(tag.NoCashSettlDateBusinessCenters)
}

// HasCashSettlDateRelativeTo returns true if CashSettlDateRelativeTo is present, Tag 42209.
func (m NoCashSettlTerms) HasCashSettlDateRelativeTo() bool {
	return m.Has(tag.CashSettlDateRelativeTo)
}

// HasCashSettlDateOffsetPeriod returns true if CashSettlDateOffsetPeriod is present, Tag 42210.
func (m NoCashSettlTerms) HasCashSettlDateOffsetPeriod() bool {
	return m.Has(tag.CashSettlDateOffsetPeriod)
}

// HasCashSettlDateOffsetUnit returns true if CashSettlDateOffsetUnit is present, Tag 42211.
func (m NoCashSettlTerms) HasCashSettlDateOffsetUnit() bool {
	return m.Has(tag.CashSettlDateOffsetUnit)
}

// HasCashSettlDateOffsetDayType returns true if CashSettlDateOffsetDayType is present, Tag 42212.
func (m NoCashSettlTerms) HasCashSettlDateOffsetDayType() bool {
	return m.Has(tag.CashSettlDateOffsetDayType)
}

// HasCashSettlDateAdjusted returns true if CashSettlDateAdjusted is present, Tag 42213.
func (m NoCashSettlTerms) HasCashSettlDateAdjusted() bool {
	return m.Has(tag.CashSettlDateAdjusted)
}

// NoCashSettlDealers is a repeating group element, Tag 40277.
type NoCashSettlDealers struct {
	*quickfix.Group
}

// SetCashSettlDealer sets CashSettlDealer, Tag 40032.
func (m NoCashSettlDealers) SetCashSettlDealer(v string) {
	m.Set(field.NewCashSettlDealer(v))
}

// GetCashSettlDealer gets CashSettlDealer, Tag 40032.
func (m NoCashSettlDealers) GetCashSettlDealer() (v string, err quickfix.MessageRejectError) {
	var f field.CashSettlDealerField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasCashSettlDealer returns true if CashSettlDealer is present, Tag 40032.
func (m NoCashSettlDealers) HasCashSettlDealer() bool {
	return m.Has(tag.CashSettlDealer)
}

// NoCashSettlDealersRepeatingGroup is a repeating group, Tag 40277.
type NoCashSettlDealersRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoCashSettlDealersRepeatingGroup returns an initialized, NoCashSettlDealersRepeatingGroup.
func NewNoCashSettlDealersRepeatingGroup() NoCashSettlDealersRepeatingGroup {
	return NoCashSettlDealersRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoCashSettlDealers,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.CashSettlDealer),
			},
		),
	}
}

// Add create and append a new NoCashSettlDealers to this group.
func (m NoCashSettlDealersRepeatingGroup) Add() NoCashSettlDealers {
	g := m.RepeatingGroup.Add()
	return NoCashSettlDealers{g}
}

// Get returns the ith NoCashSettlDealers in the NoCashSettlDealersRepeatinGroup.
func (m NoCashSettlDealersRepeatingGroup) Get(i int) NoCashSettlDealers {
	return NoCashSettlDealers{m.RepeatingGroup.Get(i)}
}

// NoCashSettlDateBusinessCenters is a repeating group element, Tag 42214.
type NoCashSettlDateBusinessCenters struct {
	*quickfix.Group
}

// SetCashSettlDateBusinessCenter sets CashSettlDateBusinessCenter, Tag 42215.
func (m NoCashSettlDateBusinessCenters) SetCashSettlDateBusinessCenter(v string) {
	m.Set(field.NewCashSettlDateBusinessCenter(v))
}

// GetCashSettlDateBusinessCenter gets CashSettlDateBusinessCenter, Tag 42215.
func (m NoCashSettlDateBusinessCenters) GetCashSettlDateBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.CashSettlDateBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasCashSettlDateBusinessCenter returns true if CashSettlDateBusinessCenter is present, Tag 42215.
func (m NoCashSettlDateBusinessCenters) HasCashSettlDateBusinessCenter() bool {
	return m.Has(tag.CashSettlDateBusinessCenter)
}

// NoCashSettlDateBusinessCentersRepeatingGroup is a repeating group, Tag 42214.
type NoCashSettlDateBusinessCentersRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoCashSettlDateBusinessCentersRepeatingGroup returns an initialized, NoCashSettlDateBusinessCentersRepeatingGroup.
func NewNoCashSettlDateBusinessCentersRepeatingGroup() NoCashSettlDateBusinessCentersRepeatingGroup {
	return NoCashSettlDateBusinessCentersRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoCashSettlDateBusinessCenters,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.CashSettlDateBusinessCenter),
			},
		),
	}
}

// Add create and append a new NoCashSettlDateBusinessCenters to this group.
func (m NoCashSettlDateBusinessCentersRepeatingGroup) Add() NoCashSettlDateBusinessCenters {
	g := m.RepeatingGroup.Add()
	return NoCashSettlDateBusinessCenters{g}
}

// Get returns the ith NoCashSettlDateBusinessCenters in the NoCashSettlDateBusinessCentersRepeatinGroup.
func (m NoCashSettlDateBusinessCentersRepeatingGroup) Get(i int) NoCashSettlDateBusinessCenters {
	return NoCashSettlDateBusinessCenters{m.RepeatingGroup.Get(i)}
}

// NoCashSettlTermsRepeatingGroup is a repeating group, Tag 40022.
type NoCashSettlTermsRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoCashSettlTermsRepeatingGroup returns an initialized, NoCashSettlTermsRepeatingGroup.
func NewNoCashSettlTermsRepeatingGroup() NoCashSettlTermsRepeatingGroup {
	return NoCashSettlTermsRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoCashSettlTerms,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.CashSettlCurrency),
				quickfix.GroupElement(tag.CashSettlValuationFirstBusinessDayOffset),
				quickfix.GroupElement(tag.CashSettlValuationSubsequentBusinessDaysOffset),
				quickfix.GroupElement(tag.CashSettlNumOfValuationDates),
				quickfix.GroupElement(tag.CashSettlValuationTime),
				quickfix.GroupElement(tag.CashSettlBusinessCenter),
				quickfix.GroupElement(tag.CashSettlQuoteMethod),
				quickfix.GroupElement(tag.CashSettlQuoteAmount),
				quickfix.GroupElement(tag.CashSettlQuoteCurrency),
				quickfix.GroupElement(tag.CashSettlMinimumQuoteAmount),
				quickfix.GroupElement(tag.CashSettlMinimumQuoteCurrency),
				NewNoCashSettlDealersRepeatingGroup(),
				quickfix.GroupElement(tag.CashSettlBusinessDays),
				quickfix.GroupElement(tag.CashSettlAmount),
				quickfix.GroupElement(tag.CashSettlRecoveryFactor),
				quickfix.GroupElement(tag.CashSettlFixedTermIndicator),
				quickfix.GroupElement(tag.CashSettlAccruedInterestIndicator),
				quickfix.GroupElement(tag.CashSettlValuationMethod),
				quickfix.GroupElement(tag.CashSettlTermXID),
				quickfix.GroupElement(tag.CashSettlPriceSource),
				quickfix.GroupElement(tag.CashSettlPriceDefault),
				quickfix.GroupElement(tag.CashSettlDateUnadjusted),
				quickfix.GroupElement(tag.CashSettlDateBusinessDayConvention),
				NewNoCashSettlDateBusinessCentersRepeatingGroup(),
				quickfix.GroupElement(tag.CashSettlDateRelativeTo),
				quickfix.GroupElement(tag.CashSettlDateOffsetPeriod),
				quickfix.GroupElement(tag.CashSettlDateOffsetUnit),
				quickfix.GroupElement(tag.CashSettlDateOffsetDayType),
				quickfix.GroupElement(tag.CashSettlDateAdjusted),
			},
		),
	}
}

// Add create and append a new NoCashSettlTerms to this group.
func (m NoCashSettlTermsRepeatingGroup) Add() NoCashSettlTerms {
	g := m.RepeatingGroup.Add()
	return NoCashSettlTerms{g}
}

// Get returns the ith NoCashSettlTerms in the NoCashSettlTermsRepeatinGroup.
func (m NoCashSettlTermsRepeatingGroup) Get(i int) NoCashSettlTerms {
	return NoCashSettlTerms{m.RepeatingGroup.Get(i)}
}

// NoPhysicalSettlTerms is a repeating group element, Tag 40204.
type NoPhysicalSettlTerms struct {
	*quickfix.Group
}

// SetNoPhysicalSettlDeliverableObligations sets NoPhysicalSettlDeliverableObligations, Tag 40209.
func (m NoPhysicalSettlTerms) SetNoPhysicalSettlDeliverableObligations(f NoPhysicalSettlDeliverableObligationsRepeatingGroup) {
	m.SetGroup(f)
}

// SetPhysicalSettlCurrency sets PhysicalSettlCurrency, Tag 40205.
func (m NoPhysicalSettlTerms) SetPhysicalSettlCurrency(v string) {
	m.Set(field.NewPhysicalSettlCurrency(v))
}

// SetPhysicalSettlBusinessDays sets PhysicalSettlBusinessDays, Tag 40206.
func (m NoPhysicalSettlTerms) SetPhysicalSettlBusinessDays(v int) {
	m.Set(field.NewPhysicalSettlBusinessDays(v))
}

// SetPhysicalSettlMaximumBusinessDays sets PhysicalSettlMaximumBusinessDays, Tag 40207.
func (m NoPhysicalSettlTerms) SetPhysicalSettlMaximumBusinessDays(v int) {
	m.Set(field.NewPhysicalSettlMaximumBusinessDays(v))
}

// SetPhysicalSettlTermXID sets PhysicalSettlTermXID, Tag 40208.
func (m NoPhysicalSettlTerms) SetPhysicalSettlTermXID(v string) {
	m.Set(field.NewPhysicalSettlTermXID(v))
}

// GetNoPhysicalSettlDeliverableObligations gets NoPhysicalSettlDeliverableObligations, Tag 40209.
func (m NoPhysicalSettlTerms) GetNoPhysicalSettlDeliverableObligations() (NoPhysicalSettlDeliverableObligationsRepeatingGroup, quickfix.MessageRejectError) {
	f := NewNoPhysicalSettlDeliverableObligationsRepeatingGroup()
	err := m.GetGroup(f)
	return f, err
}

// GetPhysicalSettlCurrency gets PhysicalSettlCurrency, Tag 40205.
func (m NoPhysicalSettlTerms) GetPhysicalSettlCurrency() (v string, err quickfix.MessageRejectError) {
	var f field.PhysicalSettlCurrencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPhysicalSettlBusinessDays gets PhysicalSettlBusinessDays, Tag 40206.
func (m NoPhysicalSettlTerms) GetPhysicalSettlBusinessDays() (v int, err quickfix.MessageRejectError) {
	var f field.PhysicalSettlBusinessDaysField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPhysicalSettlMaximumBusinessDays gets PhysicalSettlMaximumBusinessDays, Tag 40207.
func (m NoPhysicalSettlTerms) GetPhysicalSettlMaximumBusinessDays() (v int, err quickfix.MessageRejectError) {
	var f field.PhysicalSettlMaximumBusinessDaysField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPhysicalSettlTermXID gets PhysicalSettlTermXID, Tag 40208.
func (m NoPhysicalSettlTerms) GetPhysicalSettlTermXID() (v string, err quickfix.MessageRejectError) {
	var f field.PhysicalSettlTermXIDField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasNoPhysicalSettlDeliverableObligations returns true if NoPhysicalSettlDeliverableObligations is present, Tag 40209.
func (m NoPhysicalSettlTerms) HasNoPhysicalSettlDeliverableObligations() bool {
	return m.Has(tag.NoPhysicalSettlDeliverableObligations)
}

// HasPhysicalSettlCurrency returns true if PhysicalSettlCurrency is present, Tag 40205.
func (m NoPhysicalSettlTerms) HasPhysicalSettlCurrency() bool {
	return m.Has(tag.PhysicalSettlCurrency)
}

// HasPhysicalSettlBusinessDays returns true if PhysicalSettlBusinessDays is present, Tag 40206.
func (m NoPhysicalSettlTerms) HasPhysicalSettlBusinessDays() bool {
	return m.Has(tag.PhysicalSettlBusinessDays)
}

// HasPhysicalSettlMaximumBusinessDays returns true if PhysicalSettlMaximumBusinessDays is present, Tag 40207.
func (m NoPhysicalSettlTerms) HasPhysicalSettlMaximumBusinessDays() bool {
	return m.Has(tag.PhysicalSettlMaximumBusinessDays)
}

// HasPhysicalSettlTermXID returns true if PhysicalSettlTermXID is present, Tag 40208.
func (m NoPhysicalSettlTerms) HasPhysicalSettlTermXID() bool {
	return m.Has(tag.PhysicalSettlTermXID)
}

// NoPhysicalSettlDeliverableObligations is a repeating group element, Tag 40209.
type NoPhysicalSettlDeliverableObligations struct {
	*quickfix.Group
}

// SetPhysicalSettlDeliverableObligationType sets PhysicalSettlDeliverableObligationType, Tag 40210.
func (m NoPhysicalSettlDeliverableObligations) SetPhysicalSettlDeliverableObligationType(v string) {
	m.Set(field.NewPhysicalSettlDeliverableObligationType(v))
}

// SetPhysicalSettlDeliverableObligationValue sets PhysicalSettlDeliverableObligationValue, Tag 40211.
func (m NoPhysicalSettlDeliverableObligations) SetPhysicalSettlDeliverableObligationValue(v string) {
	m.Set(field.NewPhysicalSettlDeliverableObligationValue(v))
}

// GetPhysicalSettlDeliverableObligationType gets PhysicalSettlDeliverableObligationType, Tag 40210.
func (m NoPhysicalSettlDeliverableObligations) GetPhysicalSettlDeliverableObligationType() (v string, err quickfix.MessageRejectError) {
	var f field.PhysicalSettlDeliverableObligationTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetPhysicalSettlDeliverableObligationValue gets PhysicalSettlDeliverableObligationValue, Tag 40211.
func (m NoPhysicalSettlDeliverableObligations) GetPhysicalSettlDeliverableObligationValue() (v string, err quickfix.MessageRejectError) {
	var f field.PhysicalSettlDeliverableObligationValueField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasPhysicalSettlDeliverableObligationType returns true if PhysicalSettlDeliverableObligationType is present, Tag 40210.
func (m NoPhysicalSettlDeliverableObligations) HasPhysicalSettlDeliverableObligationType() bool {
	return m.Has(tag.PhysicalSettlDeliverableObligationType)
}

// HasPhysicalSettlDeliverableObligationValue returns true if PhysicalSettlDeliverableObligationValue is present, Tag 40211.
func (m NoPhysicalSettlDeliverableObligations) HasPhysicalSettlDeliverableObligationValue() bool {
	return m.Has(tag.PhysicalSettlDeliverableObligationValue)
}

// NoPhysicalSettlDeliverableObligationsRepeatingGroup is a repeating group, Tag 40209.
type NoPhysicalSettlDeliverableObligationsRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoPhysicalSettlDeliverableObligationsRepeatingGroup returns an initialized, NoPhysicalSettlDeliverableObligationsRepeatingGroup.
func NewNoPhysicalSettlDeliverableObligationsRepeatingGroup() NoPhysicalSettlDeliverableObligationsRepeatingGroup {
	return NoPhysicalSettlDeliverableObligationsRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoPhysicalSettlDeliverableObligations,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.PhysicalSettlDeliverableObligationType),
				quickfix.GroupElement(tag.PhysicalSettlDeliverableObligationValue),
			},
		),
	}
}

// Add create and append a new NoPhysicalSettlDeliverableObligations to this group.
func (m NoPhysicalSettlDeliverableObligationsRepeatingGroup) Add() NoPhysicalSettlDeliverableObligations {
	g := m.RepeatingGroup.Add()
	return NoPhysicalSettlDeliverableObligations{g}
}

// Get returns the ith NoPhysicalSettlDeliverableObligations in the NoPhysicalSettlDeliverableObligationsRepeatinGroup.
func (m NoPhysicalSettlDeliverableObligationsRepeatingGroup) Get(i int) NoPhysicalSettlDeliverableObligations {
	return NoPhysicalSettlDeliverableObligations{m.RepeatingGroup.Get(i)}
}

// NoPhysicalSettlTermsRepeatingGroup is a repeating group, Tag 40204.
type NoPhysicalSettlTermsRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoPhysicalSettlTermsRepeatingGroup returns an initialized, NoPhysicalSettlTermsRepeatingGroup.
func NewNoPhysicalSettlTermsRepeatingGroup() NoPhysicalSettlTermsRepeatingGroup {
	return NoPhysicalSettlTermsRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoPhysicalSettlTerms,
			quickfix.GroupTemplate{
				NewNoPhysicalSettlDeliverableObligationsRepeatingGroup(),
				quickfix.GroupElement(tag.PhysicalSettlCurrency),
				quickfix.GroupElement(tag.PhysicalSettlBusinessDays),
				quickfix.GroupElement(tag.PhysicalSettlMaximumBusinessDays),
				quickfix.GroupElement(tag.PhysicalSettlTermXID),
			},
		),
	}
}

// Add create and append a new NoPhysicalSettlTerms to this group.
func (m NoPhysicalSettlTermsRepeatingGroup) Add() NoPhysicalSettlTerms {
	g := m.RepeatingGroup.Add()
	return NoPhysicalSettlTerms{g}
}

// Get returns the ith NoPhysicalSettlTerms in the NoPhysicalSettlTermsRepeatinGroup.
func (m NoPhysicalSettlTermsRepeatingGroup) Get(i int) NoPhysicalSettlTerms {
	return NoPhysicalSettlTerms{m.RepeatingGroup.Get(i)}
}

// NoAssetAttributes is a repeating group element, Tag 2304.
type NoAssetAttributes struct {
	*quickfix.Group
}

// SetAssetAttributeType sets AssetAttributeType, Tag 2305.
func (m NoAssetAttributes) SetAssetAttributeType(v string) {
	m.Set(field.NewAssetAttributeType(v))
}

// SetAssetAttributeValue sets AssetAttributeValue, Tag 2306.
func (m NoAssetAttributes) SetAssetAttributeValue(v string) {
	m.Set(field.NewAssetAttributeValue(v))
}

// SetAssetAttributeLimit sets AssetAttributeLimit, Tag 2307.
func (m NoAssetAttributes) SetAssetAttributeLimit(v string) {
	m.Set(field.NewAssetAttributeLimit(v))
}

// GetAssetAttributeType gets AssetAttributeType, Tag 2305.
func (m NoAssetAttributes) GetAssetAttributeType() (v string, err quickfix.MessageRejectError) {
	var f field.AssetAttributeTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetAssetAttributeValue gets AssetAttributeValue, Tag 2306.
func (m NoAssetAttributes) GetAssetAttributeValue() (v string, err quickfix.MessageRejectError) {
	var f field.AssetAttributeValueField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetAssetAttributeLimit gets AssetAttributeLimit, Tag 2307.
func (m NoAssetAttributes) GetAssetAttributeLimit() (v string, err quickfix.MessageRejectError) {
	var f field.AssetAttributeLimitField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasAssetAttributeType returns true if AssetAttributeType is present, Tag 2305.
func (m NoAssetAttributes) HasAssetAttributeType() bool {
	return m.Has(tag.AssetAttributeType)
}

// HasAssetAttributeValue returns true if AssetAttributeValue is present, Tag 2306.
func (m NoAssetAttributes) HasAssetAttributeValue() bool {
	return m.Has(tag.AssetAttributeValue)
}

// HasAssetAttributeLimit returns true if AssetAttributeLimit is present, Tag 2307.
func (m NoAssetAttributes) HasAssetAttributeLimit() bool {
	return m.Has(tag.AssetAttributeLimit)
}

// NoAssetAttributesRepeatingGroup is a repeating group, Tag 2304.
type NoAssetAttributesRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoAssetAttributesRepeatingGroup returns an initialized, NoAssetAttributesRepeatingGroup.
func NewNoAssetAttributesRepeatingGroup() NoAssetAttributesRepeatingGroup {
	return NoAssetAttributesRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoAssetAttributes,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.AssetAttributeType),
				quickfix.GroupElement(tag.AssetAttributeValue),
				quickfix.GroupElement(tag.AssetAttributeLimit),
			},
		),
	}
}

// Add create and append a new NoAssetAttributes to this group.
func (m NoAssetAttributesRepeatingGroup) Add() NoAssetAttributes {
	g := m.RepeatingGroup.Add()
	return NoAssetAttributes{g}
}

// Get returns the ith NoAssetAttributes in the NoAssetAttributesRepeatinGroup.
func (m NoAssetAttributesRepeatingGroup) Get(i int) NoAssetAttributes {
	return NoAssetAttributes{m.RepeatingGroup.Get(i)}
}

// NoPricingDateBusinessCenters is a repeating group element, Tag 41230.
type NoPricingDateBusinessCenters struct {
	*quickfix.Group
}

// SetPricingDateBusinessCenter sets PricingDateBusinessCenter, Tag 41231.
func (m NoPricingDateBusinessCenters) SetPricingDateBusinessCenter(v string) {
	m.Set(field.NewPricingDateBusinessCenter(v))
}

// GetPricingDateBusinessCenter gets PricingDateBusinessCenter, Tag 41231.
func (m NoPricingDateBusinessCenters) GetPricingDateBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.PricingDateBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasPricingDateBusinessCenter returns true if PricingDateBusinessCenter is present, Tag 41231.
func (m NoPricingDateBusinessCenters) HasPricingDateBusinessCenter() bool {
	return m.Has(tag.PricingDateBusinessCenter)
}

// NoPricingDateBusinessCentersRepeatingGroup is a repeating group, Tag 41230.
type NoPricingDateBusinessCentersRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoPricingDateBusinessCentersRepeatingGroup returns an initialized, NoPricingDateBusinessCentersRepeatingGroup.
func NewNoPricingDateBusinessCentersRepeatingGroup() NoPricingDateBusinessCentersRepeatingGroup {
	return NoPricingDateBusinessCentersRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoPricingDateBusinessCenters,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.PricingDateBusinessCenter),
			},
		),
	}
}

// Add create and append a new NoPricingDateBusinessCenters to this group.
func (m NoPricingDateBusinessCentersRepeatingGroup) Add() NoPricingDateBusinessCenters {
	g := m.RepeatingGroup.Add()
	return NoPricingDateBusinessCenters{g}
}

// Get returns the ith NoPricingDateBusinessCenters in the NoPricingDateBusinessCentersRepeatinGroup.
func (m NoPricingDateBusinessCentersRepeatingGroup) Get(i int) NoPricingDateBusinessCenters {
	return NoPricingDateBusinessCenters{m.RepeatingGroup.Get(i)}
}

// NoMarketDisruptionEvents is a repeating group element, Tag 41092.
type NoMarketDisruptionEvents struct {
	*quickfix.Group
}

// SetMarketDisruptionEvent sets MarketDisruptionEvent, Tag 41093.
func (m NoMarketDisruptionEvents) SetMarketDisruptionEvent(v string) {
	m.Set(field.NewMarketDisruptionEvent(v))
}

// SetMarketDisruptionValue sets MarketDisruptionValue, Tag 40991.
func (m NoMarketDisruptionEvents) SetMarketDisruptionValue(v string) {
	m.Set(field.NewMarketDisruptionValue(v))
}

// GetMarketDisruptionEvent gets MarketDisruptionEvent, Tag 41093.
func (m NoMarketDisruptionEvents) GetMarketDisruptionEvent() (v string, err quickfix.MessageRejectError) {
	var f field.MarketDisruptionEventField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetMarketDisruptionValue gets MarketDisruptionValue, Tag 40991.
func (m NoMarketDisruptionEvents) GetMarketDisruptionValue() (v string, err quickfix.MessageRejectError) {
	var f field.MarketDisruptionValueField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasMarketDisruptionEvent returns true if MarketDisruptionEvent is present, Tag 41093.
func (m NoMarketDisruptionEvents) HasMarketDisruptionEvent() bool {
	return m.Has(tag.MarketDisruptionEvent)
}

// HasMarketDisruptionValue returns true if MarketDisruptionValue is present, Tag 40991.
func (m NoMarketDisruptionEvents) HasMarketDisruptionValue() bool {
	return m.Has(tag.MarketDisruptionValue)
}

// NoMarketDisruptionEventsRepeatingGroup is a repeating group, Tag 41092.
type NoMarketDisruptionEventsRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoMarketDisruptionEventsRepeatingGroup returns an initialized, NoMarketDisruptionEventsRepeatingGroup.
func NewNoMarketDisruptionEventsRepeatingGroup() NoMarketDisruptionEventsRepeatingGroup {
	return NoMarketDisruptionEventsRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoMarketDisruptionEvents,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.MarketDisruptionEvent),
				quickfix.GroupElement(tag.MarketDisruptionValue),
			},
		),
	}
}

// Add create and append a new NoMarketDisruptionEvents to this group.
func (m NoMarketDisruptionEventsRepeatingGroup) Add() NoMarketDisruptionEvents {
	g := m.RepeatingGroup.Add()
	return NoMarketDisruptionEvents{g}
}

// Get returns the ith NoMarketDisruptionEvents in the NoMarketDisruptionEventsRepeatinGroup.
func (m NoMarketDisruptionEventsRepeatingGroup) Get(i int) NoMarketDisruptionEvents {
	return NoMarketDisruptionEvents{m.RepeatingGroup.Get(i)}
}

// NoMarketDisruptionFallbacks is a repeating group element, Tag 41094.
type NoMarketDisruptionFallbacks struct {
	*quickfix.Group
}

// SetMarketDisruptionFallbackType sets MarketDisruptionFallbackType, Tag 41095.
func (m NoMarketDisruptionFallbacks) SetMarketDisruptionFallbackType(v string) {
	m.Set(field.NewMarketDisruptionFallbackType(v))
}

// SetMarketDisruptionFallbackValue sets MarketDisruptionFallbackValue, Tag 40992.
func (m NoMarketDisruptionFallbacks) SetMarketDisruptionFallbackValue(v string) {
	m.Set(field.NewMarketDisruptionFallbackValue(v))
}

// GetMarketDisruptionFallbackType gets MarketDisruptionFallbackType, Tag 41095.
func (m NoMarketDisruptionFallbacks) GetMarketDisruptionFallbackType() (v string, err quickfix.MessageRejectError) {
	var f field.MarketDisruptionFallbackTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetMarketDisruptionFallbackValue gets MarketDisruptionFallbackValue, Tag 40992.
func (m NoMarketDisruptionFallbacks) GetMarketDisruptionFallbackValue() (v string, err quickfix.MessageRejectError) {
	var f field.MarketDisruptionFallbackValueField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasMarketDisruptionFallbackType returns true if MarketDisruptionFallbackType is present, Tag 41095.
func (m NoMarketDisruptionFallbacks) HasMarketDisruptionFallbackType() bool {
	return m.Has(tag.MarketDisruptionFallbackType)
}

// HasMarketDisruptionFallbackValue returns true if MarketDisruptionFallbackValue is present, Tag 40992.
func (m NoMarketDisruptionFallbacks) HasMarketDisruptionFallbackValue() bool {
	return m.Has(tag.MarketDisruptionFallbackValue)
}

// NoMarketDisruptionFallbacksRepeatingGroup is a repeating group, Tag 41094.
type NoMarketDisruptionFallbacksRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoMarketDisruptionFallbacksRepeatingGroup returns an initialized, NoMarketDisruptionFallbacksRepeatingGroup.
func NewNoMarketDisruptionFallbacksRepeatingGroup() NoMarketDisruptionFallbacksRepeatingGroup {
	return NoMarketDisruptionFallbacksRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoMarketDisruptionFallbacks,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.MarketDisruptionFallbackType),
				quickfix.GroupElement(tag.MarketDisruptionFallbackValue),
			},
		),
	}
}

// Add create and append a new NoMarketDisruptionFallbacks to this group.
func (m NoMarketDisruptionFallbacksRepeatingGroup) Add() NoMarketDisruptionFallbacks {
	g := m.RepeatingGroup.Add()
	return NoMarketDisruptionFallbacks{g}
}

// Get returns the ith NoMarketDisruptionFallbacks in the NoMarketDisruptionFallbacksRepeatinGroup.
func (m NoMarketDisruptionFallbacksRepeatingGroup) Get(i int) NoMarketDisruptionFallbacks {
	return NoMarketDisruptionFallbacks{m.RepeatingGroup.Get(i)}
}

// NoMarketDisruptionFallbackReferencePrices is a repeating group element, Tag 41096.
type NoMarketDisruptionFallbackReferencePrices struct {
	*quickfix.Group
}

// SetMarketDisruptionFallbackUnderlierType sets MarketDisruptionFallbackUnderlierType, Tag 41097.
func (m NoMarketDisruptionFallbackReferencePrices) SetMarketDisruptionFallbackUnderlierType(v enum.MarketDisruptionFallbackUnderlierType) {
	m.Set(field.NewMarketDisruptionFallbackUnderlierType(v))
}

// SetMarketDisruptionFallbackUnderlierSecurityID sets MarketDisruptionFallbackUnderlierSecurityID, Tag 41098.
func (m NoMarketDisruptionFallbackReferencePrices) SetMarketDisruptionFallbackUnderlierSecurityID(v string) {
	m.Set(field.NewMarketDisruptionFallbackUnderlierSecurityID(v))
}

// SetMarketDisruptionFallbackUnderlierSecurityIDSource sets MarketDisruptionFallbackUnderlierSecurityIDSource, Tag 41099.
func (m NoMarketDisruptionFallbackReferencePrices) SetMarketDisruptionFallbackUnderlierSecurityIDSource(v string) {
	m.Set(field.NewMarketDisruptionFallbackUnderlierSecurityIDSource(v))
}

// SetMarketDisruptionFallbackUnderlierSecurityDesc sets MarketDisruptionFallbackUnderlierSecurityDesc, Tag 41100.
func (m NoMarketDisruptionFallbackReferencePrices) SetMarketDisruptionFallbackUnderlierSecurityDesc(v string) {
	m.Set(field.NewMarketDisruptionFallbackUnderlierSecurityDesc(v))
}

// SetEncodedMarketDisruptionFallbackUnderlierSecurityDescLen sets EncodedMarketDisruptionFallbackUnderlierSecurityDescLen, Tag 41101.
func (m NoMarketDisruptionFallbackReferencePrices) SetEncodedMarketDisruptionFallbackUnderlierSecurityDescLen(v int) {
	m.Set(field.NewEncodedMarketDisruptionFallbackUnderlierSecurityDescLen(v))
}

// SetEncodedMarketDisruptionFallbackUnderlierSecurityDesc sets EncodedMarketDisruptionFallbackUnderlierSecurityDesc, Tag 41102.
func (m NoMarketDisruptionFallbackReferencePrices) SetEncodedMarketDisruptionFallbackUnderlierSecurityDesc(v string) {
	m.Set(field.NewEncodedMarketDisruptionFallbackUnderlierSecurityDesc(v))
}

// SetMarketDisruptionFallbackOpenUnits sets MarketDisruptionFallbackOpenUnits, Tag 41103.
func (m NoMarketDisruptionFallbackReferencePrices) SetMarketDisruptionFallbackOpenUnits(value decimal.Decimal, scale int32) {
	m.Set(field.NewMarketDisruptionFallbackOpenUnits(value, scale))
}

// SetMarketDisruptionFallbackBasketCurrency sets MarketDisruptionFallbackBasketCurrency, Tag 41104.
func (m NoMarketDisruptionFallbackReferencePrices) SetMarketDisruptionFallbackBasketCurrency(v string) {
	m.Set(field.NewMarketDisruptionFallbackBasketCurrency(v))
}

// SetMarketDisruptionFallbackBasketDivisor sets MarketDisruptionFallbackBasketDivisor, Tag 41105.
func (m NoMarketDisruptionFallbackReferencePrices) SetMarketDisruptionFallbackBasketDivisor(value decimal.Decimal, scale int32) {
	m.Set(field.NewMarketDisruptionFallbackBasketDivisor(value, scale))
}

// GetMarketDisruptionFallbackUnderlierType gets MarketDisruptionFallbackUnderlierType, Tag 41097.
func (m NoMarketDisruptionFallbackReferencePrices) GetMarketDisruptionFallbackUnderlierType() (v enum.MarketDisruptionFallbackUnderlierType, err quickfix.MessageRejectError) {
	var f field.MarketDisruptionFallbackUnderlierTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetMarketDisruptionFallbackUnderlierSecurityID gets MarketDisruptionFallbackUnderlierSecurityID, Tag 41098.
func (m NoMarketDisruptionFallbackReferencePrices) GetMarketDisruptionFallbackUnderlierSecurityID() (v string, err quickfix.MessageRejectError) {
	var f field.MarketDisruptionFallbackUnderlierSecurityIDField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetMarketDisruptionFallbackUnderlierSecurityIDSource gets MarketDisruptionFallbackUnderlierSecurityIDSource, Tag 41099.
func (m NoMarketDisruptionFallbackReferencePrices) GetMarketDisruptionFallbackUnderlierSecurityIDSource() (v string, err quickfix.MessageRejectError) {
	var f field.MarketDisruptionFallbackUnderlierSecurityIDSourceField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetMarketDisruptionFallbackUnderlierSecurityDesc gets MarketDisruptionFallbackUnderlierSecurityDesc, Tag 41100.
func (m NoMarketDisruptionFallbackReferencePrices) GetMarketDisruptionFallbackUnderlierSecurityDesc() (v string, err quickfix.MessageRejectError) {
	var f field.MarketDisruptionFallbackUnderlierSecurityDescField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetEncodedMarketDisruptionFallbackUnderlierSecurityDescLen gets EncodedMarketDisruptionFallbackUnderlierSecurityDescLen, Tag 41101.
func (m NoMarketDisruptionFallbackReferencePrices) GetEncodedMarketDisruptionFallbackUnderlierSecurityDescLen() (v int, err quickfix.MessageRejectError) {
	var f field.EncodedMarketDisruptionFallbackUnderlierSecurityDescLenField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetEncodedMarketDisruptionFallbackUnderlierSecurityDesc gets EncodedMarketDisruptionFallbackUnderlierSecurityDesc, Tag 41102.
func (m NoMarketDisruptionFallbackReferencePrices) GetEncodedMarketDisruptionFallbackUnderlierSecurityDesc() (v string, err quickfix.MessageRejectError) {
	var f field.EncodedMarketDisruptionFallbackUnderlierSecurityDescField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetMarketDisruptionFallbackOpenUnits gets MarketDisruptionFallbackOpenUnits, Tag 41103.
func (m NoMarketDisruptionFallbackReferencePrices) GetMarketDisruptionFallbackOpenUnits() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.MarketDisruptionFallbackOpenUnitsField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetMarketDisruptionFallbackBasketCurrency gets MarketDisruptionFallbackBasketCurrency, Tag 41104.
func (m NoMarketDisruptionFallbackReferencePrices) GetMarketDisruptionFallbackBasketCurrency() (v string, err quickfix.MessageRejectError) {
	var f field.MarketDisruptionFallbackBasketCurrencyField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetMarketDisruptionFallbackBasketDivisor gets MarketDisruptionFallbackBasketDivisor, Tag 41105.
func (m NoMarketDisruptionFallbackReferencePrices) GetMarketDisruptionFallbackBasketDivisor() (v decimal.Decimal, err quickfix.MessageRejectError) {
	var f field.MarketDisruptionFallbackBasketDivisorField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasMarketDisruptionFallbackUnderlierType returns true if MarketDisruptionFallbackUnderlierType is present, Tag 41097.
func (m NoMarketDisruptionFallbackReferencePrices) HasMarketDisruptionFallbackUnderlierType() bool {
	return m.Has(tag.MarketDisruptionFallbackUnderlierType)
}

// HasMarketDisruptionFallbackUnderlierSecurityID returns true if MarketDisruptionFallbackUnderlierSecurityID is present, Tag 41098.
func (m NoMarketDisruptionFallbackReferencePrices) HasMarketDisruptionFallbackUnderlierSecurityID() bool {
	return m.Has(tag.MarketDisruptionFallbackUnderlierSecurityID)
}

// HasMarketDisruptionFallbackUnderlierSecurityIDSource returns true if MarketDisruptionFallbackUnderlierSecurityIDSource is present, Tag 41099.
func (m NoMarketDisruptionFallbackReferencePrices) HasMarketDisruptionFallbackUnderlierSecurityIDSource() bool {
	return m.Has(tag.MarketDisruptionFallbackUnderlierSecurityIDSource)
}

// HasMarketDisruptionFallbackUnderlierSecurityDesc returns true if MarketDisruptionFallbackUnderlierSecurityDesc is present, Tag 41100.
func (m NoMarketDisruptionFallbackReferencePrices) HasMarketDisruptionFallbackUnderlierSecurityDesc() bool {
	return m.Has(tag.MarketDisruptionFallbackUnderlierSecurityDesc)
}

// HasEncodedMarketDisruptionFallbackUnderlierSecurityDescLen returns true if EncodedMarketDisruptionFallbackUnderlierSecurityDescLen is present, Tag 41101.
func (m NoMarketDisruptionFallbackReferencePrices) HasEncodedMarketDisruptionFallbackUnderlierSecurityDescLen() bool {
	return m.Has(tag.EncodedMarketDisruptionFallbackUnderlierSecurityDescLen)
}

// HasEncodedMarketDisruptionFallbackUnderlierSecurityDesc returns true if EncodedMarketDisruptionFallbackUnderlierSecurityDesc is present, Tag 41102.
func (m NoMarketDisruptionFallbackReferencePrices) HasEncodedMarketDisruptionFallbackUnderlierSecurityDesc() bool {
	return m.Has(tag.EncodedMarketDisruptionFallbackUnderlierSecurityDesc)
}

// HasMarketDisruptionFallbackOpenUnits returns true if MarketDisruptionFallbackOpenUnits is present, Tag 41103.
func (m NoMarketDisruptionFallbackReferencePrices) HasMarketDisruptionFallbackOpenUnits() bool {
	return m.Has(tag.MarketDisruptionFallbackOpenUnits)
}

// HasMarketDisruptionFallbackBasketCurrency returns true if MarketDisruptionFallbackBasketCurrency is present, Tag 41104.
func (m NoMarketDisruptionFallbackReferencePrices) HasMarketDisruptionFallbackBasketCurrency() bool {
	return m.Has(tag.MarketDisruptionFallbackBasketCurrency)
}

// HasMarketDisruptionFallbackBasketDivisor returns true if MarketDisruptionFallbackBasketDivisor is present, Tag 41105.
func (m NoMarketDisruptionFallbackReferencePrices) HasMarketDisruptionFallbackBasketDivisor() bool {
	return m.Has(tag.MarketDisruptionFallbackBasketDivisor)
}

// NoMarketDisruptionFallbackReferencePricesRepeatingGroup is a repeating group, Tag 41096.
type NoMarketDisruptionFallbackReferencePricesRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoMarketDisruptionFallbackReferencePricesRepeatingGroup returns an initialized, NoMarketDisruptionFallbackReferencePricesRepeatingGroup.
func NewNoMarketDisruptionFallbackReferencePricesRepeatingGroup() NoMarketDisruptionFallbackReferencePricesRepeatingGroup {
	return NoMarketDisruptionFallbackReferencePricesRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoMarketDisruptionFallbackReferencePrices,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.MarketDisruptionFallbackUnderlierType),
				quickfix.GroupElement(tag.MarketDisruptionFallbackUnderlierSecurityID),
				quickfix.GroupElement(tag.MarketDisruptionFallbackUnderlierSecurityIDSource),
				quickfix.GroupElement(tag.MarketDisruptionFallbackUnderlierSecurityDesc),
				quickfix.GroupElement(tag.EncodedMarketDisruptionFallbackUnderlierSecurityDescLen),
				quickfix.GroupElement(tag.EncodedMarketDisruptionFallbackUnderlierSecurityDesc),
				quickfix.GroupElement(tag.MarketDisruptionFallbackOpenUnits),
				quickfix.GroupElement(tag.MarketDisruptionFallbackBasketCurrency),
				quickfix.GroupElement(tag.MarketDisruptionFallbackBasketDivisor),
			},
		),
	}
}

// Add create and append a new NoMarketDisruptionFallbackReferencePrices to this group.
func (m NoMarketDisruptionFallbackReferencePricesRepeatingGroup) Add() NoMarketDisruptionFallbackReferencePrices {
	g := m.RepeatingGroup.Add()
	return NoMarketDisruptionFallbackReferencePrices{g}
}

// Get returns the ith NoMarketDisruptionFallbackReferencePrices in the NoMarketDisruptionFallbackReferencePricesRepeatinGroup.
func (m NoMarketDisruptionFallbackReferencePricesRepeatingGroup) Get(i int) NoMarketDisruptionFallbackReferencePrices {
	return NoMarketDisruptionFallbackReferencePrices{m.RepeatingGroup.Get(i)}
}

// NoOptionExerciseBusinessCenters is a repeating group element, Tag 41116.
type NoOptionExerciseBusinessCenters struct {
	*quickfix.Group
}

// SetOptionExerciseBusinessCenter sets OptionExerciseBusinessCenter, Tag 41117.
func (m NoOptionExerciseBusinessCenters) SetOptionExerciseBusinessCenter(v string) {
	m.Set(field.NewOptionExerciseBusinessCenter(v))
}

// GetOptionExerciseBusinessCenter gets OptionExerciseBusinessCenter, Tag 41117.
func (m NoOptionExerciseBusinessCenters) GetOptionExerciseBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.OptionExerciseBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasOptionExerciseBusinessCenter returns true if OptionExerciseBusinessCenter is present, Tag 41117.
func (m NoOptionExerciseBusinessCenters) HasOptionExerciseBusinessCenter() bool {
	return m.Has(tag.OptionExerciseBusinessCenter)
}

// NoOptionExerciseBusinessCentersRepeatingGroup is a repeating group, Tag 41116.
type NoOptionExerciseBusinessCentersRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoOptionExerciseBusinessCentersRepeatingGroup returns an initialized, NoOptionExerciseBusinessCentersRepeatingGroup.
func NewNoOptionExerciseBusinessCentersRepeatingGroup() NoOptionExerciseBusinessCentersRepeatingGroup {
	return NoOptionExerciseBusinessCentersRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoOptionExerciseBusinessCenters,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.OptionExerciseBusinessCenter),
			},
		),
	}
}

// Add create and append a new NoOptionExerciseBusinessCenters to this group.
func (m NoOptionExerciseBusinessCentersRepeatingGroup) Add() NoOptionExerciseBusinessCenters {
	g := m.RepeatingGroup.Add()
	return NoOptionExerciseBusinessCenters{g}
}

// Get returns the ith NoOptionExerciseBusinessCenters in the NoOptionExerciseBusinessCentersRepeatinGroup.
func (m NoOptionExerciseBusinessCentersRepeatingGroup) Get(i int) NoOptionExerciseBusinessCenters {
	return NoOptionExerciseBusinessCenters{m.RepeatingGroup.Get(i)}
}

// NoOptionExerciseDates is a repeating group element, Tag 41137.
type NoOptionExerciseDates struct {
	*quickfix.Group
}

// SetOptionExerciseDate sets OptionExerciseDate, Tag 41138.
func (m NoOptionExerciseDates) SetOptionExerciseDate(v string) {
	m.Set(field.NewOptionExerciseDate(v))
}

// SetOptionExerciseDateType sets OptionExerciseDateType, Tag 41139.
func (m NoOptionExerciseDates) SetOptionExerciseDateType(v enum.OptionExerciseDateType) {
	m.Set(field.NewOptionExerciseDateType(v))
}

// GetOptionExerciseDate gets OptionExerciseDate, Tag 41138.
func (m NoOptionExerciseDates) GetOptionExerciseDate() (v string, err quickfix.MessageRejectError) {
	var f field.OptionExerciseDateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetOptionExerciseDateType gets OptionExerciseDateType, Tag 41139.
func (m NoOptionExerciseDates) GetOptionExerciseDateType() (v enum.OptionExerciseDateType, err quickfix.MessageRejectError) {
	var f field.OptionExerciseDateTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasOptionExerciseDate returns true if OptionExerciseDate is present, Tag 41138.
func (m NoOptionExerciseDates) HasOptionExerciseDate() bool {
	return m.Has(tag.OptionExerciseDate)
}

// HasOptionExerciseDateType returns true if OptionExerciseDateType is present, Tag 41139.
func (m NoOptionExerciseDates) HasOptionExerciseDateType() bool {
	return m.Has(tag.OptionExerciseDateType)
}

// NoOptionExerciseDatesRepeatingGroup is a repeating group, Tag 41137.
type NoOptionExerciseDatesRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoOptionExerciseDatesRepeatingGroup returns an initialized, NoOptionExerciseDatesRepeatingGroup.
func NewNoOptionExerciseDatesRepeatingGroup() NoOptionExerciseDatesRepeatingGroup {
	return NoOptionExerciseDatesRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoOptionExerciseDates,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.OptionExerciseDate),
				quickfix.GroupElement(tag.OptionExerciseDateType),
			},
		),
	}
}

// Add create and append a new NoOptionExerciseDates to this group.
func (m NoOptionExerciseDatesRepeatingGroup) Add() NoOptionExerciseDates {
	g := m.RepeatingGroup.Add()
	return NoOptionExerciseDates{g}
}

// Get returns the ith NoOptionExerciseDates in the NoOptionExerciseDatesRepeatinGroup.
func (m NoOptionExerciseDatesRepeatingGroup) Get(i int) NoOptionExerciseDates {
	return NoOptionExerciseDates{m.RepeatingGroup.Get(i)}
}

// NoOptionExerciseExpirationDateBusinessCenters is a repeating group element, Tag 41140.
type NoOptionExerciseExpirationDateBusinessCenters struct {
	*quickfix.Group
}

// SetOptionExerciseExpirationDateBusinessCenter sets OptionExerciseExpirationDateBusinessCenter, Tag 41141.
func (m NoOptionExerciseExpirationDateBusinessCenters) SetOptionExerciseExpirationDateBusinessCenter(v string) {
	m.Set(field.NewOptionExerciseExpirationDateBusinessCenter(v))
}

// GetOptionExerciseExpirationDateBusinessCenter gets OptionExerciseExpirationDateBusinessCenter, Tag 41141.
func (m NoOptionExerciseExpirationDateBusinessCenters) GetOptionExerciseExpirationDateBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.OptionExerciseExpirationDateBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasOptionExerciseExpirationDateBusinessCenter returns true if OptionExerciseExpirationDateBusinessCenter is present, Tag 41141.
func (m NoOptionExerciseExpirationDateBusinessCenters) HasOptionExerciseExpirationDateBusinessCenter() bool {
	return m.Has(tag.OptionExerciseExpirationDateBusinessCenter)
}

// NoOptionExerciseExpirationDateBusinessCentersRepeatingGroup is a repeating group, Tag 41140.
type NoOptionExerciseExpirationDateBusinessCentersRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoOptionExerciseExpirationDateBusinessCentersRepeatingGroup returns an initialized, NoOptionExerciseExpirationDateBusinessCentersRepeatingGroup.
func NewNoOptionExerciseExpirationDateBusinessCentersRepeatingGroup() NoOptionExerciseExpirationDateBusinessCentersRepeatingGroup {
	return NoOptionExerciseExpirationDateBusinessCentersRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoOptionExerciseExpirationDateBusinessCenters,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.OptionExerciseExpirationDateBusinessCenter),
			},
		),
	}
}

// Add create and append a new NoOptionExerciseExpirationDateBusinessCenters to this group.
func (m NoOptionExerciseExpirationDateBusinessCentersRepeatingGroup) Add() NoOptionExerciseExpirationDateBusinessCenters {
	g := m.RepeatingGroup.Add()
	return NoOptionExerciseExpirationDateBusinessCenters{g}
}

// Get returns the ith NoOptionExerciseExpirationDateBusinessCenters in the NoOptionExerciseExpirationDateBusinessCentersRepeatinGroup.
func (m NoOptionExerciseExpirationDateBusinessCentersRepeatingGroup) Get(i int) NoOptionExerciseExpirationDateBusinessCenters {
	return NoOptionExerciseExpirationDateBusinessCenters{m.RepeatingGroup.Get(i)}
}

// NoOptionExerciseExpirationDates is a repeating group element, Tag 41152.
type NoOptionExerciseExpirationDates struct {
	*quickfix.Group
}

// SetOptionExerciseExpirationDate sets OptionExerciseExpirationDate, Tag 41153.
func (m NoOptionExerciseExpirationDates) SetOptionExerciseExpirationDate(v string) {
	m.Set(field.NewOptionExerciseExpirationDate(v))
}

// SetOptionExerciseExpirationDateType sets OptionExerciseExpirationDateType, Tag 41154.
func (m NoOptionExerciseExpirationDates) SetOptionExerciseExpirationDateType(v int) {
	m.Set(field.NewOptionExerciseExpirationDateType(v))
}

// GetOptionExerciseExpirationDate gets OptionExerciseExpirationDate, Tag 41153.
func (m NoOptionExerciseExpirationDates) GetOptionExerciseExpirationDate() (v string, err quickfix.MessageRejectError) {
	var f field.OptionExerciseExpirationDateField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetOptionExerciseExpirationDateType gets OptionExerciseExpirationDateType, Tag 41154.
func (m NoOptionExerciseExpirationDates) GetOptionExerciseExpirationDateType() (v int, err quickfix.MessageRejectError) {
	var f field.OptionExerciseExpirationDateTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasOptionExerciseExpirationDate returns true if OptionExerciseExpirationDate is present, Tag 41153.
func (m NoOptionExerciseExpirationDates) HasOptionExerciseExpirationDate() bool {
	return m.Has(tag.OptionExerciseExpirationDate)
}

// HasOptionExerciseExpirationDateType returns true if OptionExerciseExpirationDateType is present, Tag 41154.
func (m NoOptionExerciseExpirationDates) HasOptionExerciseExpirationDateType() bool {
	return m.Has(tag.OptionExerciseExpirationDateType)
}

// NoOptionExerciseExpirationDatesRepeatingGroup is a repeating group, Tag 41152.
type NoOptionExerciseExpirationDatesRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoOptionExerciseExpirationDatesRepeatingGroup returns an initialized, NoOptionExerciseExpirationDatesRepeatingGroup.
func NewNoOptionExerciseExpirationDatesRepeatingGroup() NoOptionExerciseExpirationDatesRepeatingGroup {
	return NoOptionExerciseExpirationDatesRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoOptionExerciseExpirationDates,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.OptionExerciseExpirationDate),
				quickfix.GroupElement(tag.OptionExerciseExpirationDateType),
			},
		),
	}
}

// Add create and append a new NoOptionExerciseExpirationDates to this group.
func (m NoOptionExerciseExpirationDatesRepeatingGroup) Add() NoOptionExerciseExpirationDates {
	g := m.RepeatingGroup.Add()
	return NoOptionExerciseExpirationDates{g}
}

// Get returns the ith NoOptionExerciseExpirationDates in the NoOptionExerciseExpirationDatesRepeatinGroup.
func (m NoOptionExerciseExpirationDatesRepeatingGroup) Get(i int) NoOptionExerciseExpirationDates {
	return NoOptionExerciseExpirationDates{m.RepeatingGroup.Get(i)}
}

// NoSettlMethodElectionDateBusinessCenters is a repeating group element, Tag 42775.
type NoSettlMethodElectionDateBusinessCenters struct {
	*quickfix.Group
}

// SetSettlMethodElectionDateBusinessCenter sets SettlMethodElectionDateBusinessCenter, Tag 42776.
func (m NoSettlMethodElectionDateBusinessCenters) SetSettlMethodElectionDateBusinessCenter(v string) {
	m.Set(field.NewSettlMethodElectionDateBusinessCenter(v))
}

// GetSettlMethodElectionDateBusinessCenter gets SettlMethodElectionDateBusinessCenter, Tag 42776.
func (m NoSettlMethodElectionDateBusinessCenters) GetSettlMethodElectionDateBusinessCenter() (v string, err quickfix.MessageRejectError) {
	var f field.SettlMethodElectionDateBusinessCenterField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasSettlMethodElectionDateBusinessCenter returns true if SettlMethodElectionDateBusinessCenter is present, Tag 42776.
func (m NoSettlMethodElectionDateBusinessCenters) HasSettlMethodElectionDateBusinessCenter() bool {
	return m.Has(tag.SettlMethodElectionDateBusinessCenter)
}

// NoSettlMethodElectionDateBusinessCentersRepeatingGroup is a repeating group, Tag 42775.
type NoSettlMethodElectionDateBusinessCentersRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoSettlMethodElectionDateBusinessCentersRepeatingGroup returns an initialized, NoSettlMethodElectionDateBusinessCentersRepeatingGroup.
func NewNoSettlMethodElectionDateBusinessCentersRepeatingGroup() NoSettlMethodElectionDateBusinessCentersRepeatingGroup {
	return NoSettlMethodElectionDateBusinessCentersRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoSettlMethodElectionDateBusinessCenters,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.SettlMethodElectionDateBusinessCenter),
			},
		),
	}
}

// Add create and append a new NoSettlMethodElectionDateBusinessCenters to this group.
func (m NoSettlMethodElectionDateBusinessCentersRepeatingGroup) Add() NoSettlMethodElectionDateBusinessCenters {
	g := m.RepeatingGroup.Add()
	return NoSettlMethodElectionDateBusinessCenters{g}
}

// Get returns the ith NoSettlMethodElectionDateBusinessCenters in the NoSettlMethodElectionDateBusinessCentersRepeatinGroup.
func (m NoSettlMethodElectionDateBusinessCentersRepeatingGroup) Get(i int) NoSettlMethodElectionDateBusinessCenters {
	return NoSettlMethodElectionDateBusinessCenters{m.RepeatingGroup.Get(i)}
}

// NoExtraordinaryEvents is a repeating group element, Tag 42296.
type NoExtraordinaryEvents struct {
	*quickfix.Group
}

// SetExtraordinaryEventType sets ExtraordinaryEventType, Tag 42297.
func (m NoExtraordinaryEvents) SetExtraordinaryEventType(v string) {
	m.Set(field.NewExtraordinaryEventType(v))
}

// SetExtraordinaryEventValue sets ExtraordinaryEventValue, Tag 42298.
func (m NoExtraordinaryEvents) SetExtraordinaryEventValue(v string) {
	m.Set(field.NewExtraordinaryEventValue(v))
}

// GetExtraordinaryEventType gets ExtraordinaryEventType, Tag 42297.
func (m NoExtraordinaryEvents) GetExtraordinaryEventType() (v string, err quickfix.MessageRejectError) {
	var f field.ExtraordinaryEventTypeField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// GetExtraordinaryEventValue gets ExtraordinaryEventValue, Tag 42298.
func (m NoExtraordinaryEvents) GetExtraordinaryEventValue() (v string, err quickfix.MessageRejectError) {
	var f field.ExtraordinaryEventValueField
	if err = m.Get(&f); err == nil {
		v = f.Value()
	}
	return
}

// HasExtraordinaryEventType returns true if ExtraordinaryEventType is present, Tag 42297.
func (m NoExtraordinaryEvents) HasExtraordinaryEventType() bool {
	return m.Has(tag.ExtraordinaryEventType)
}

// HasExtraordinaryEventValue returns true if ExtraordinaryEventValue is present, Tag 42298.
func (m NoExtraordinaryEvents) HasExtraordinaryEventValue() bool {
	return m.Has(tag.ExtraordinaryEventValue)
}

// NoExtraordinaryEventsRepeatingGroup is a repeating group, Tag 42296.
type NoExtraordinaryEventsRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoExtraordinaryEventsRepeatingGroup returns an initialized, NoExtraordinaryEventsRepeatingGroup.
func NewNoExtraordinaryEventsRepeatingGroup() NoExtraordinaryEventsRepeatingGroup {
	return NoExtraordinaryEventsRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoExtraordinaryEvents,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.ExtraordinaryEventType),
				quickfix.GroupElement(tag.ExtraordinaryEventValue),
			},
		),
	}
}

// Add create and append a new NoExtraordinaryEvents to this group.
func (m NoExtraordinaryEventsRepeatingGroup) Add() NoExtraordinaryEvents {
	g := m.RepeatingGroup.Add()
	return NoExtraordinaryEvents{g}
}

// Get returns the ith NoExtraordinaryEvents in the NoExtraordinaryEventsRepeatinGroup.
func (m NoExtraordinaryEventsRepeatingGroup) Get(i int) NoExtraordinaryEvents {
	return NoExtraordinaryEvents{m.RepeatingGroup.Get(i)}
}

// NoOrderEntriesRepeatingGroup is a repeating group, Tag 2428.
type NoOrderEntriesRepeatingGroup struct {
	*quickfix.RepeatingGroup
}

// NewNoOrderEntriesRepeatingGroup returns an initialized, NoOrderEntriesRepeatingGroup.
func NewNoOrderEntriesRepeatingGroup() NoOrderEntriesRepeatingGroup {
	return NoOrderEntriesRepeatingGroup{
		quickfix.NewRepeatingGroup(
			tag.NoOrderEntries,
			quickfix.GroupTemplate{
				quickfix.GroupElement(tag.OrderEntryAction),
				quickfix.GroupElement(tag.OrderEntryID),
				quickfix.GroupElement(tag.ClOrdID),
				quickfix.GroupElement(tag.OrigClOrdID),
				quickfix.GroupElement(tag.OrderID),
				quickfix.GroupElement(tag.OrdType),
				quickfix.GroupElement(tag.Price),
				quickfix.GroupElement(tag.Side),
				quickfix.GroupElement(tag.TimeInForce),
				quickfix.GroupElement(tag.OrderQty),
				quickfix.GroupElement(tag.CashOrderQty),
				quickfix.GroupElement(tag.OrderPercent),
				quickfix.GroupElement(tag.RoundingDirection),
				quickfix.GroupElement(tag.RoundingModulus),
				quickfix.GroupElement(tag.Symbol),
				quickfix.GroupElement(tag.SymbolSfx),
				quickfix.GroupElement(tag.SecurityID),
				quickfix.GroupElement(tag.SecurityIDSource),
				NewNoSecurityAltIDRepeatingGroup(),
				quickfix.GroupElement(tag.Product),
				quickfix.GroupElement(tag.ProductComplex),
				quickfix.GroupElement(tag.SecurityGroup),
				quickfix.GroupElement(tag.CFICode),
				quickfix.GroupElement(tag.SecurityType),
				quickfix.GroupElement(tag.SecuritySubType),
				quickfix.GroupElement(tag.MaturityMonthYear),
				quickfix.GroupElement(tag.MaturityDate),
				quickfix.GroupElement(tag.MaturityTime),
				quickfix.GroupElement(tag.SettleOnOpenFlag),
				quickfix.GroupElement(tag.InstrmtAssignmentMethod),
				quickfix.GroupElement(tag.SecurityStatus),
				quickfix.GroupElement(tag.CouponPaymentDate),
				quickfix.GroupElement(tag.IssueDate),
				quickfix.GroupElement(tag.RepoCollateralSecurityType),
				quickfix.GroupElement(tag.RepurchaseTerm),
				quickfix.GroupElement(tag.RepurchaseRate),
				quickfix.GroupElement(tag.Factor),
				quickfix.GroupElement(tag.CreditRating),
				quickfix.GroupElement(tag.InstrRegistry),
				quickfix.GroupElement(tag.CountryOfIssue),
				quickfix.GroupElement(tag.StateOrProvinceOfIssue),
				quickfix.GroupElement(tag.LocaleOfIssue),
				quickfix.GroupElement(tag.RedemptionDate),
				quickfix.GroupElement(tag.StrikePrice),
				quickfix.GroupElement(tag.StrikeCurrency),
				quickfix.GroupElement(tag.StrikeMultiplier),
				quickfix.GroupElement(tag.StrikeValue),
				quickfix.GroupElement(tag.OptAttribute),
				quickfix.GroupElement(tag.ContractMultiplier),
				quickfix.GroupElement(tag.MinPriceIncrement),
				quickfix.GroupElement(tag.MinPriceIncrementAmount),
				quickfix.GroupElement(tag.UnitOfMeasure),
				quickfix.GroupElement(tag.UnitOfMeasureQty),
				quickfix.GroupElement(tag.PriceUnitOfMeasure),
				quickfix.GroupElement(tag.PriceUnitOfMeasureQty),
				quickfix.GroupElement(tag.SettlMethod),
				quickfix.GroupElement(tag.ExerciseStyle),
				quickfix.GroupElement(tag.OptPayoutAmount),
				quickfix.GroupElement(tag.PriceQuoteMethod),
				quickfix.GroupElement(tag.ValuationMethod),
				quickfix.GroupElement(tag.ListMethod),
				quickfix.GroupElement(tag.CapPrice),
				quickfix.GroupElement(tag.FloorPrice),
				quickfix.GroupElement(tag.PutOrCall),
				quickfix.GroupElement(tag.FlexibleIndicator),
				quickfix.GroupElement(tag.FlexProductEligibilityIndicator),
				quickfix.GroupElement(tag.TimeUnit),
				quickfix.GroupElement(tag.CouponRate),
				quickfix.GroupElement(tag.SecurityExchange),
				quickfix.GroupElement(tag.PositionLimit),
				quickfix.GroupElement(tag.NTPositionLimit),
				quickfix.GroupElement(tag.Issuer),
				quickfix.GroupElement(tag.EncodedIssuerLen),
				quickfix.GroupElement(tag.EncodedIssuer),
				quickfix.GroupElement(tag.SecurityDesc),
				quickfix.GroupElement(tag.EncodedSecurityDescLen),
				quickfix.GroupElement(tag.EncodedSecurityDesc),
				quickfix.GroupElement(tag.SecurityXMLLen),
				quickfix.GroupElement(tag.SecurityXML),
				quickfix.GroupElement(tag.SecurityXMLSchema),
				quickfix.GroupElement(tag.Pool),
				quickfix.GroupElement(tag.ContractSettlMonth),
				quickfix.GroupElement(tag.CPProgram),
				quickfix.GroupElement(tag.CPRegType),
				NewNoEventsRepeatingGroup(),
				quickfix.GroupElement(tag.DatedDate),
				quickfix.GroupElement(tag.InterestAccrualDate),
				NewNoInstrumentPartiesRepeatingGroup(),
				quickfix.GroupElement(tag.ContractMultiplierUnit),
				quickfix.GroupElement(tag.FlowScheduleType),
				quickfix.GroupElement(tag.RestructuringType),
				quickfix.GroupElement(tag.Seniority),
				quickfix.GroupElement(tag.NotionalPercentageOutstanding),
				quickfix.GroupElement(tag.OriginalNotionalPercentageOutstanding),
				quickfix.GroupElement(tag.AttachmentPoint),
				quickfix.GroupElement(tag.DetachmentPoint),
				quickfix.GroupElement(tag.StrikePriceDeterminationMethod),
				quickfix.GroupElement(tag.StrikePriceBoundaryMethod),
				quickfix.GroupElement(tag.StrikePriceBoundaryPrecision),
				quickfix.GroupElement(tag.UnderlyingPriceDeterminationMethod),
				quickfix.GroupElement(tag.OptPayoutType),
				NewNoComplexEventsRepeatingGroup(),
				quickfix.GroupElement(tag.PriceQuoteCurrency),
				quickfix.GroupElement(tag.ObligationType),
				quickfix.GroupElement(tag.ShortSaleRestriction),
				quickfix.GroupElement(tag.UnitOfMeasureCurrency),
				quickfix.GroupElement(tag.PriceUnitOfMeasureCurrency),
				quickfix.GroupElement(tag.RefTickTableID),
				quickfix.GroupElement(tag.AssetClass),
				quickfix.GroupElement(tag.AssetSubClass),
				quickfix.GroupElement(tag.AssetType),
				NewNoSecondaryAssetClassesRepeatingGroup(),
				quickfix.GroupElement(tag.SwapClass),
				quickfix.GroupElement(tag.NthToDefault),
				quickfix.GroupElement(tag.MthToDefault),
				quickfix.GroupElement(tag.SettledEntityMatrixSource),
				quickfix.GroupElement(tag.SettledEntityMatrixPublicationDate),
				quickfix.GroupElement(tag.CouponType),
				quickfix.GroupElement(tag.TotalIssuedAmount),
				quickfix.GroupElement(tag.CouponFrequencyPeriod),
				quickfix.GroupElement(tag.CouponFrequencyUnit),
				quickfix.GroupElement(tag.CouponDayCount),
				quickfix.GroupElement(tag.ConvertibleBondEquityID),
				quickfix.GroupElement(tag.ConvertibleBondEquityIDSource),
				quickfix.GroupElement(tag.ContractPriceRefMonth),
				quickfix.GroupElement(tag.LienSeniority),
				quickfix.GroupElement(tag.LoanFacility),
				quickfix.GroupElement(tag.ReferenceEntityType),
				quickfix.GroupElement(tag.IndexSeries),
				quickfix.GroupElement(tag.IndexAnnexVersion),
				quickfix.GroupElement(tag.IndexAnnexDate),
				quickfix.GroupElement(tag.IndexAnnexSource),
				quickfix.GroupElement(tag.BusinessDayConvention),
				NewNoBusinessCentersRepeatingGroup(),
				quickfix.GroupElement(tag.DateRollConvention),
				NewNoStreamsRepeatingGroup(),
				NewNoProvisionsRepeatingGroup(),
				NewNoAdditionalTermsRepeatingGroup(),
				NewNoProtectionTermsRepeatingGroup(),
				NewNoCashSettlTermsRepeatingGroup(),
				NewNoPhysicalSettlTermsRepeatingGroup(),
				NewNoAssetAttributesRepeatingGroup(),
				quickfix.GroupElement(tag.SwapSubClass),
				quickfix.GroupElement(tag.SettlRateIndex),
				quickfix.GroupElement(tag.SettlRateIndexLocation),
				quickfix.GroupElement(tag.OptionExpirationDesc),
				quickfix.GroupElement(tag.EncodedOptionExpirationDescLen),
				quickfix.GroupElement(tag.EncodedOptionExpirationDesc),
				quickfix.GroupElement(tag.StrikeUnitOfMeasure),
				quickfix.GroupElement(tag.StrikeIndex),
				quickfix.GroupElement(tag.StrikeIndexSpread),
				quickfix.GroupElement(tag.ValuationSource),
				quickfix.GroupElement(tag.ValuationReferenceModel),
				quickfix.GroupElement(tag.StrategyType),
				quickfix.GroupElement(tag.CommonPricingIndicator),
				quickfix.GroupElement(tag.SettlDisruptionProvision),
				quickfix.GroupElement(tag.InstrumentRoundingDirection),
				quickfix.GroupElement(tag.InstrumentRoundingPrecision),
				quickfix.GroupElement(tag.PricingDateUnadjusted),
				quickfix.GroupElement(tag.PricingDateBusinessDayConvention),
				NewNoPricingDateBusinessCentersRepeatingGroup(),
				quickfix.GroupElement(tag.PricingDateAdjusted),
				quickfix.GroupElement(tag.PricingTime),
				quickfix.GroupElement(tag.PricingTimeBusinessCenter),
				quickfix.GroupElement(tag.MarketDisruptionProvision),
				NewNoMarketDisruptionEventsRepeatingGroup(),
				quickfix.GroupElement(tag.MarketDisruptionFallbackProvision),
				NewNoMarketDisruptionFallbacksRepeatingGroup(),
				NewNoMarketDisruptionFallbackReferencePricesRepeatingGroup(),
				quickfix.GroupElement(tag.MarketDisruptionMaximumDays),
				quickfix.GroupElement(tag.MarketDisruptionMaterialityPercentage),
				quickfix.GroupElement(tag.MarketDisruptionMinimumFuturesContracts),
				quickfix.GroupElement(tag.ExerciseDesc),
				quickfix.GroupElement(tag.EncodedExerciseDescLen),
				quickfix.GroupElement(tag.EncodedExerciseDesc),
				quickfix.GroupElement(tag.AutomaticExerciseIndicator),
				quickfix.GroupElement(tag.AutomaticExerciseThresholdRate),
				quickfix.GroupElement(tag.ExerciseConfirmationMethod),
				quickfix.GroupElement(tag.ManualNoticeBusinessCenter),
				quickfix.GroupElement(tag.FallbackExerciseIndicator),
				quickfix.GroupElement(tag.LimitedRightToConfirmIndicator),
				quickfix.GroupElement(tag.ExerciseSplitTicketIndicator),
				quickfix.GroupElement(tag.OptionExerciseBusinessDayConvention),
				NewNoOptionExerciseBusinessCentersRepeatingGroup(),
				NewNoOptionExerciseDatesRepeatingGroup(),
				quickfix.GroupElement(tag.OptionExerciseEarliestDateOffsetDayType),
				quickfix.GroupElement(tag.OptionExerciseEarliestDateOffsetPeriod),
				quickfix.GroupElement(tag.OptionExerciseEarliestDateOffsetUnit),
				quickfix.GroupElement(tag.OptionExerciseFrequencyPeriod),
				quickfix.GroupElement(tag.OptionExerciseFrequencyUnit),
				quickfix.GroupElement(tag.OptionExerciseStartDateUnadjusted),
				quickfix.GroupElement(tag.OptionExerciseStartDateRelativeTo),
				quickfix.GroupElement(tag.OptionExerciseStartDateOffsetPeriod),
				quickfix.GroupElement(tag.OptionExerciseStartDateOffsetUnit),
				quickfix.GroupElement(tag.OptionExerciseStartDateOffsetDayType),
				quickfix.GroupElement(tag.OptionExerciseStartDateAdjusted),
				quickfix.GroupElement(tag.OptionExerciseSkip),
				quickfix.GroupElement(tag.OptionExerciseNominationDeadline),
				quickfix.GroupElement(tag.OptionExerciseFirstDateUnadjusted),
				quickfix.GroupElement(tag.OptionExerciseLastDateUnadjusted),
				quickfix.GroupElement(tag.OptionExerciseEarliestTime),
				quickfix.GroupElement(tag.OptionExerciseLatestTime),
				quickfix.GroupElement(tag.OptionExerciseTimeBusinessCenter),
				quickfix.GroupElement(tag.OptionExerciseExpirationDateBusinessDayConvention),
				NewNoOptionExerciseExpirationDateBusinessCentersRepeatingGroup(),
				NewNoOptionExerciseExpirationDatesRepeatingGroup(),
				quickfix.GroupElement(tag.OptionExerciseExpirationDateRelativeTo),
				quickfix.GroupElement(tag.OptionExerciseExpirationDateOffsetPeriod),
				quickfix.GroupElement(tag.OptionExerciseExpirationDateOffsetUnit),
				quickfix.GroupElement(tag.OptionExerciseExpirationFrequencyPeriod),
				quickfix.GroupElement(tag.OptionExerciseExpirationFrequencyUnit),
				quickfix.GroupElement(tag.OptionExerciseExpirationRollConvention),
				quickfix.GroupElement(tag.OptionExerciseExpirationDateOffsetDayType),
				quickfix.GroupElement(tag.OptionExerciseExpirationTime),
				quickfix.GroupElement(tag.OptionExerciseExpirationTimeBusinessCenter),
				quickfix.GroupElement(tag.SettlMethodElectingPartySide),
				quickfix.GroupElement(tag.SettlMethodElectionDateUnadjusted),
				quickfix.GroupElement(tag.SettlMethodElectionDateBusinessDayConvention),
				NewNoSettlMethodElectionDateBusinessCentersRepeatingGroup(),
				quickfix.GroupElement(tag.SettlMethodElectionDateRelativeTo),
				quickfix.GroupElement(tag.SettlMethodElectionDateOffsetPeriod),
				quickfix.GroupElement(tag.SettlMethodElectionDateOffsetUnit),
				quickfix.GroupElement(tag.SettlMethodElectionDateOffsetDayType),
				quickfix.GroupElement(tag.SettlMethodElectionDateAdjusted),
				quickfix.GroupElement(tag.MakeWholeDate),
				quickfix.GroupElement(tag.MakeWholeAmount),
				quickfix.GroupElement(tag.MakeWholeBenchmarkCurveName),
				quickfix.GroupElement(tag.MakeWholeBenchmarkCurvePoint),
				quickfix.GroupElement(tag.MakeWholeRecallSpread),
				quickfix.GroupElement(tag.MakeWholeBenchmarkQuote),
				quickfix.GroupElement(tag.MakeWholeInterpolationMethod),
				quickfix.GroupElement(tag.TradingUnitPeriodMultiplier),
				quickfix.GroupElement(tag.AssetGroup),
				quickfix.GroupElement(tag.OrigStrikePrice),
				quickfix.GroupElement(tag.StrikePricePrecision),
				quickfix.GroupElement(tag.SettlSubMethod),
				quickfix.GroupElement(tag.BlockTradeEligibilityIndicator),
				quickfix.GroupElement(tag.LowExercisePriceOptionIndicator),
				quickfix.GroupElement(tag.InstrumentPricePrecision),
				quickfix.GroupElement(tag.StrikeIndexCurvePoint),
				quickfix.GroupElement(tag.StrikeIndexQuote),
				NewNoExtraordinaryEventsRepeatingGroup(),
				quickfix.GroupElement(tag.ExtraordinaryEventAdjustmentMethod),
				quickfix.GroupElement(tag.ExchangeLookAlike),
				quickfix.GroupElement(tag.InTheMoneyCondition),
				quickfix.GroupElement(tag.ContraryInstructionEligibilityIndicator),
				quickfix.GroupElement(tag.FinancialInstrumentFullName),
				quickfix.GroupElement(tag.EncodedFinancialInstrumentFullNameLen),
				quickfix.GroupElement(tag.EncodedFinancialInstrumentFullName),
				quickfix.GroupElement(tag.AssetSubType),
				quickfix.GroupElement(tag.FinancialInstrumentShortName),
				quickfix.GroupElement(tag.ReturnTrigger),
				quickfix.GroupElement(tag.DeliveryRouteOrCharter),
				quickfix.GroupElement(tag.CouponOtherDayCount),
				quickfix.GroupElement(tag.UPICode),
			},
		),
	}
}

// Add create and append a new NoOrderEntries to this group.
func (m NoOrderEntriesRepeatingGroup) Add() NoOrderEntries {
	g := m.RepeatingGroup.Add()
	return NoOrderEntries{g}
}

// Get returns the ith NoOrderEntries in the NoOrderEntriesRepeatinGroup.
func (m NoOrderEntriesRepeatingGroup) Get(i int) NoOrderEntries {
	return NoOrderEntries{m.RepeatingGroup.Get(i)}
}
